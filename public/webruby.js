/* /home/junichi/work/webruby/MyFirstProj/build/js_api.js */
(function() {
  function WEBRUBY(opts) {
    if (!(this instanceof WEBRUBY)) {
      // Well, this is not perfect, but it can at least cover some cases.
      return new WEBRUBY(opts);
    }
    opts = opts || {};
    // Default print level is errors only
    this.print_level = opts.print_level || 1;
    this.mrb = _mrb_open();
  };
  WEBRUBY.prototype.close = function() {
    _mrb_close(this.mrb);
  };
  WEBRUBY.prototype.run = function() {
    _webruby_internal_run(this.mrb, this.print_level);
  };
  WEBRUBY.prototype.run_bytecode = function(bc) {
    var stack = Runtime.stackSave();
    var addr = Runtime.stackAlloc(bc.length);
    var ret;
    writeArrayToMemory(bc, addr);
    ret = _webruby_internal_run_bytecode(this.mrb, addr, this.print_level);
    Runtime.stackRestore(stack);
    return ret;
  };
  WEBRUBY.prototype.run_source = function(src) {
    var stack = Runtime.stackSave();
    var addr = Runtime.stackAlloc(src.length);
    var ret;
    writeStringToMemory(src, addr);
    ret = _webruby_internal_run_source(this.mrb, addr, this.print_level);
    Runtime.stackRestore(stack);
    return ret;
  };
  if (typeof window === 'object') {
    window['WEBRUBY'] = WEBRUBY;
  } else {
    global['WEBRUBY'] = WEBRUBY;
  }
}) ();
// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
  Module.test;
} catch(e) {
  this['Module'] = Module = {};
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function(filename) { return Module['read'](filename, true) };
  Module['load'] = function(f) {
    globalEval(read(f));
  };
  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
  module.exports = Module;
}
if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  Module['read'] = read;
  Module['readBinary'] = function(f) {
    return read(f, 'binary');
  };
  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
  this['Module'] = Module;
}
if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }
  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
  this['Module'] = Module;
}
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  Module['load'] = importScripts;
}
if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 4,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = ((((DYNAMICTOP)+3)>>2)<<2); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? (((low)>>>(0))+(((high)>>>(0))*4294967296)) : (((low)>>>(0))+(((high)|(0))*4294967296))); return ret; },
  GLOBAL_BASE: 4,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = globalScope['Module']['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((ptr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown
var runtimeInitialized = false;
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledInit = false, calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
function addPreRun(func) {
  if (!Module['preRun']) Module['preRun'] = [];
  else if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
  Module['preRun'].push(func);
}
function loadMemoryInitializer(filename) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  // always do this asynchronously, to keep shell and web as similar as possible
  addPreRun(function() {
    if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
      applyData(Module['readBinary'](filename));
    } else {
      Browser.asyncLoad(filename, function(data) {
        applyData(data);
      }, function(data) {
        throw 'could not load memory initializer ' + filename;
      });
    }
  });
}
// === Body ===
STATIC_BASE = 4;
STATICTOP = STATIC_BASE + 111624;
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });
var _stdout;
var _stderr;
var _stdout = _stdout=allocate([0,0,0,0], "i8", ALLOC_STATIC);
var _stderr = _stderr=allocate([0,0,0,0], "i8", ALLOC_STATIC);
/* memory initializer */ allocate([0,2,2,2,2,2,2,2,2,2,150,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,127,2,2,2,125,120,2,146,147,123,121,144,122,143,124,2,2,2,2,2,2,2,2,2,2,115,149,117,113,116,114,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,142,2,148,119,2,145,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,140,118,141,128,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,126,129,130,131,132,133,134,135,136,137,138,139,132,128,1,0,20,128,1,0,8,128,1,0,248,127,1,0,232,127,1,0,200,127,1,0,136,127,1,0,120,127,1,0,96,127,1,0,68,127,1,0,56,127,1,0,232,126,1,0,216,126,1,0,200,126,1,0,184,126,1,0,148,126,1,0,128,126,1,0,112,126,1,0,88,126,1,0,60,126,1,0,48,126,1,0,192,125,1,0,160,125,1,0,144,125,1,0,128,125,1,0,116,125,1,0,52,125,1,0,36,125,1,0,252,124,1,0,220,124,1,0,204,124,1,0,136,124,1,0,120,124,1,0,92,124,1,0,80,124,1,0,64,124,1,0,36,124,1,0,24,124,1,0,240,123,1,0,204,123,1,0,192,123,1,0,96,123,1,0,80,123,1,0,64,123,1,0,48,123,1,0,32,123,1,0,248,122,1,0,236,122,1,0,200,122,1,0,164,122,1,0,132,122,1,0,32,122,1,0,252,121,1,0,232,121,1,0,148,121,1,0,84,121,1,0,4,121,1,0,228,120,1,0,176,120,1,0,152,120,1,0,144,120,1,0,44,120,1,0,36,120,1,0,28,120,1,0,12,120,1,0,0,120,1,0,224,119,1,0,212,119,1,0,184,119,1,0,152,119,1,0,144,119,1,0,88,119,1,0,80,119,1,0,76,119,1,0,68,119,1,0,60,119,1,0,44,119,1,0,32,119,1,0,4,119,1,0,236,118,1,0,228,118,1,0,168,118,1,0,160,118,1,0,152,118,1,0,144,118,1,0,136,118,1,0,120,118,1,0,72,118,1,0,48,118,1,0,32,118,1,0,20,118,1,0,208,117,1,0,200,117,1,0,188,117,1,0,180,117,1,0,172,117,1,0,160,117,1,0,112,117,1,0,88,117,1,0,72,117,1,0,64,117,1,0,248,116,1,0,236,116,1,0,224,116,1,0,208,116,1,0,188,116,1,0,164,116,1,0,104,116,1,0,72,116,1,0,48,116,1,0,32,116,1,0,216,115,1,0,208,115,1,0,204,115,1,0,200,115,1,0,196,115,1,0,172,115,1,0,168,115,1,0,140,115,1,0,124,115,1,0,120,115,1,0,28,115,1,0,20,115,1,0,16,115,1,0,12,115,1,0,8,115,1,0,244,114,1,0,236,114,1,0,208,114,1,0,192,114,1,0,176,114,1,0,80,114,1,0,72,114,1,0,36,114,1,0,8,114,1,0,240,113,1,0,204,113,1,0,148,113,1,0,96,113,1,0,64,113,1,0,60,113,1,0,244,112,1,0,240,112,1,0,236,112,1,0,232,112,1,0,228,112,1,0,216,112,1,0,172,112,1,0,140,112,1,0,120,112,1,0,104,112,1,0,20,112,1,0,248,111,1,0,212,111,1,0,168,111,1,0,112,111,1,0,68,111,1,0,36,111,1,0,252,110,1,0,232,110,1,0,224,110,1,0,104,110,1,0,100,110,1,0,84,110,1,0,76,110,1,0,64,110,1,0,40,110,1,0,0,110,1,0,220,109,1,0,208,109,1,0,200,109,1,0,76,109,1,0,64,109,1,0,52,109,1,0,12,109,1,0,0,109,1,0,236,108,1,0,212,108,1,0,188,108,1,0,172,108,1,0,164,108,1,0,64,108,1,0,56,108,1,0,44,108,1,0,40,108,1,0,36,108,1,0,16,108,1,0,4,108,1,0,224,107,1,0,204,107,1,0,192,107,1,0,92,107,1,0,76,107,1,0,64,107,1,0,48,107,1,0,44,107,1,0,24,107,1,0,252,106,1,0,220,106,1,0,200,106,1,0,192,106,1,0,144,106,1,0,140,106,1,0,136,106,1,0,132,106,1,0,120,106,1,0,104,106,1,0,52,106,1,0,24,106,1,0,8,106,1,0,0,106,1,0,196,105,1,0,192,105,1,0,188,105,1,0,184,105,1,0,180,105,1,0,168,105,1,0,144,105,1,0,108,105,1,0,140,137,1,0,180,135,1,0,92,105,1,0,80,105,1,0,36,105,1,0,20,105,1,0,8,105,1,0,0,105,1,0,244,104,1,0,220,104,1,0,200,104,1,0,172,104,1,0,152,104,1,0,144,104,1,0,44,104,1,0,32,104,1,0,20,104,1,0,12,104,1,0,0,104,1,0,236,103,1,0,208,103,1,0,180,103,1,0,148,103,1,0,136,103,1,0,52,103,1,0,40,103,1,0,28,103,1,0,20,103,1,0,8,103,1,0,252,102,1,0,240,102,1,0,208,102,1,0,188,102,1,0,140,102,1,0,56,102,1,0,28,102,1,0,0,102,1,0,180,101,1,0,156,101,1,0,84,101,1,0,8,101,1,0,236,100,1,0,212,100,1,0,208,100,1,0,124,100,1,0,116,100,1,0,104,100,1,0,96,100,1,0,88,100,1,0,60,100,1,0,24,100,1,0,248,99,1,0,228,99,1,0,220,99,1,0,140,99,1,0,128,99,1,0,116,99,1,0,108,99,1,0,92,99,1,0,64,99,1,0,28,99,1,0,248,98,1,0,224,98,1,0,212,98,1,0,132,98,1,0,120,98,1,0,104,98,1,0,92,98,1,0,84,98,1,0,56,98,1,0,28,98,1,0,0,98,1,0,236,97,1,0,224,97,1,0,176,97,1,0,152,97,1,0,140,97,1,0,132,97,1,0,124,97,1,0,112,97,1,0,84,97,1,0,48,97,1,0,36,97,1,0,28,97,1,0,0,97,1,0,232,96,1,0,0,0,0,0,99,0,114,1,3,1,60,1,151,1,172,1,226,0,214,0,214,0,214,0,211,0,242,0,242,0,78,1,194,0,242,0,5,1,11,2,104,2,115,0,115,0,120,2,248,0,248,0,120,2,32,1,248,0,0,1,227,1,115,0,211,0,123,1,237,1,221,0,224,0,183,1,100,0,247,0,247,0,78,2,50,2,247,0,48,2,138,2,56,2,122,2,20,1,59,2,25,1,29,1,196,1,209,1,16,2,1,3,198,1,110,2,24,1,28,1,227,0,226,0,168,255,42,1,216,2,67,0,76,2,67,0,115,0,203,2,77,2,204,1,166,255,23,1,226,2,206,1,64,1,63,1,18,1,122,2,107,2,7,3,94,2,239,1,48,2,61,3,56,2,223,2,64,3,153,2,242,1,112,1,115,0,242,1,142,1,242,1,113,2,242,1,177,2,242,1,77,2,1,1,118,3,252,2,112,1,117,1,234,2,142,1,120,1,129,3,129,1,3,0,0,1,227,0,109,1,162,255,46,2,23,3,54,2,245,0,250,0,54,2,155,255,251,0,30,3,192,1,117,1,77,2,159,255,70,1,71,1,196,2,197,2,237,1,241,2,2,1,169,2,156,255,237,254,223,0,46,2,60,254,54,2,7,1,160,255,189,255,57,254,160,255,141,2,58,254,168,255,11,1,77,2,158,255,72,1,158,255,46,2,121,1,54,2,112,3,166,255,122,1,227,0,126,1,162,255,200,1,159,255,150,1,154,2,110,1,46,2,223,0,54,2,79,3,161,255,170,2,175,255,118,1,115,1,129,3,118,3,168,255,74,1,190,1,168,255,58,1,59,1,168,255,7,2,75,1,155,255,166,255,237,254,237,254,166,255,172,1,247,253,166,255,46,2,54,2,161,255,57,254,222,0,223,0,58,254,113,1,156,255,141,1,123,2,64,3,142,3,255,0,125,2,215,2,79,1,154,1,42,1,128,2,113,1,152,2,226,0,1,3,46,2,237,1,54,2,230,2,208,1,133,2,214,0,214,0,222,0,223,0,135,2,209,1,170,255,202,2,153,1,120,2,120,2,138,1,170,3,163,255,223,0,222,0,223,0,207,2,157,255,170,1,170,1,242,0,252,0,242,0,242,0,157,1,158,1,181,1,164,255,182,1,184,1,122,2,248,0,248,253,248,0,227,0,159,255,159,255,168,255,226,0,16,3,227,0,36,3,255,0,227,0,3,2,166,255,247,0,252,2,247,0,12,2,127,1,160,255,160,255,195,1,194,1,252,2,167,255,209,1,248,253,105,3,158,255,158,255,203,1,81,0,169,255,81,0,116,0,116,0,223,0,176,2,18,1,217,0,217,0,217,0,115,0,56,254,234,0,217,0,217,0,9,2,74,2,217,0,222,0,223,0,151,2,62,2,64,2,2,1,212,2,193,254,227,0,214,0,214,0,214,0,214,0,55,254,255,1,0,2,202,1,202,1,149,1,206,2,191,1,202,1,145,1,237,1,14,1,161,255,161,255,81,0,217,0,222,0,223,0,33,1,124,1,125,1,250,1,251,1,252,1,253,1,115,0,53,254,154,1,217,0,5,2,249,1,173,1,251,253,176,1,5,2,56,254,242,0,106,1,18,1,181,1,54,254,165,255,33,1,247,253,130,1,159,1,205,2,55,2,193,254,193,254,146,1,11,2,124,254,56,1,69,2,55,254,45,1,46,1,65,254,67,0,242,0,61,254,156,1,181,1,254,1,79,2,58,3,163,1,237,2,167,1,160,1,55,2,88,2,242,1,14,1,217,0,242,0,81,0,231,2,181,1,137,2,53,254,208,1,168,1,103,2,109,2,109,2,55,2,171,1,179,3,242,0,107,1,108,1,181,1,65,254,54,254,188,1,186,1,131,1,132,1,12,3,55,2,120,2,47,1,147,1,148,1,227,0,129,2,121,2,105,2,106,3,170,1,170,1,65,254,124,254,240,2,61,254,247,2,99,0,80,1,212,1,211,0,250,253,122,2,161,1,162,1,193,1,246,1,55,2,190,255,45,1,46,1,209,1,95,3,80,1,208,1,223,0,227,0,227,0,59,254,136,2,199,1,242,0,205,1,246,254,181,1,251,253,236,254,65,254,65,254,147,1,189,1,251,253,55,2,207,1,144,3,211,1,115,0,247,1,115,0,60,254,223,0,136,3,158,2,248,1,158,2,124,254,158,2,124,254,124,254,66,2,151,2,245,2,40,3,213,1,214,1,152,3,47,1,81,0,10,2,224,2,67,0,238,1,162,255,61,254,237,2,103,1,104,1,105,1,173,2,134,2,85,2,134,3,59,254,59,254,217,0,217,0,181,2,246,254,246,254,225,2,236,254,236,254,160,255,116,1,254,2,70,1,71,1,2,3,86,2,60,3,90,2,115,0,106,2,170,255,186,2,137,3,138,3,217,0,11,3,217,0,217,0,52,3,158,255,217,0,217,0,187,1,155,255,237,1,81,0,131,1,132,1,14,1,124,2,81,0,81,0,250,253,144,2,61,254,61,254,190,1,186,2,250,253,184,2,193,2,161,255,126,2,193,2,173,2,173,2,127,2,190,2,200,2,33,1,190,2,218,2,215,2,214,0,163,255,186,2,164,3,131,2,210,2,156,255,77,2,193,2,208,2,175,255,161,2,151,2,184,2,151,2,190,2,102,3,214,2,217,2,211,0,217,2,186,2,104,3,209,2,156,2,201,2,244,253,159,2,217,2,81,0,217,0,217,0,217,0,217,0,81,0,217,0,217,0,164,255,14,1,217,0,5,2,81,0,33,1,162,2,217,0,31,3,214,0,227,0,208,1,186,2,80,1,165,2,170,1,12,2,164,2,3,255,19,3,21,3,185,2,175,2,249,2,227,0,26,3,28,3,178,2,238,2,192,2,179,2,204,2,195,2,215,2,235,2,217,0,229,2,239,2,246,2,4,3,46,2,249,2,54,2,217,0,217,0,2,255,18,3,227,0,24,3,151,2,114,3,244,253,39,3,41,3,188,2,47,3,46,2,51,3,189,2,217,0,43,3,81,0,217,0,101,1,102,1,103,1,104,1,105,1,89,2,53,3,59,3,81,0,25,3,62,3,65,3,217,0,97,2,160,255,202,1,81,0,120,3,158,255,145,2,66,3,216,1,217,1,218,1,219,1,115,0,217,0,68,3,38,3,127,3,173,2,130,3,161,255,67,3,69,3,151,2,71,3,151,2,73,3,75,3,244,253,78,3,244,253,244,253,45,3,168,255,248,253,49,3,214,0,166,255,80,3,81,0,81,3,26,1,44,1,90,3,45,1,46,1,83,3,85,3,81,0,87,3,109,2,169,255,1,255,93,3,92,3,151,2,108,3,170,1,249,2,109,3,125,3,50,3,33,1,111,3,33,1,0,255,217,0,241,1,227,0,45,1,46,1,132,3,158,2,158,2,133,3,158,2,135,3,158,2,158,2,50,1,45,1,46,1,143,3,158,2,147,3,158,2,158,2,151,3,153,3,176,3,166,2,47,1,155,3,81,0,5,3,161,3,216,1,217,1,218,1,219,1,244,2,158,3,227,0,169,3,98,0,215,1,98,0,216,1,217,1,218,1,219,1,248,253,98,0,98,0,98,0,247,253,47,1,33,1,98,0,98,0,182,3,232,0,98,0,52,1,45,1,46,1,130,2,47,1,0,3,120,0,217,2,3,3,80,1,194,2,115,0,220,1,168,3,243,2,171,3,8,3,167,3,221,1,222,1,54,1,45,1,46,1,220,1,93,1,94,1,32,3,98,0,98,0,221,1,222,1,228,2,145,2,197,0,216,1,217,1,218,1,219,1,96,3,126,3,223,1,98,0,253,2,224,1,227,0,145,3,115,0,0,0,47,1,136,1,227,0,223,1,45,1,46,1,224,1,0,0,217,0,81,0,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,81,0,47,1,80,1,223,0,158,2,158,2,158,2,158,2,0,0,0,0,225,1,158,2,158,2,158,2,0,0,158,2,158,2,93,1,94,1,242,0,0,0,98,0,181,1,98,0,88,2,217,2,186,2,80,1,0,0,0,0,55,2,98,2,47,1,0,0,0,0,217,0,45,1,46,1,164,1,165,1,166,1,0,0,93,1,94,1,0,0,215,1,0,0,216,1,217,1,218,1,219,1,0,0,101,1,102,1,103,1,104,1,105,1,158,2,113,3,0,0,158,2,158,2,158,2,158,2,65,1,66,1,67,1,68,1,69,1,250,2,251,2,158,2,81,0,81,0,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,227,2,47,1,0,0,0,0,220,1,13,3,0,0,0,0,81,0,0,0,221,1,222,1,0,0,0,0,0,0,33,1,217,0,0,0,0,0,217,0,217,0,0,0,119,3,0,0,121,3,217,0,217,0,0,0,122,3,0,0,33,3,34,3,223,1,81,0,81,0,224,1,128,3,0,0,131,3,238,1,45,1,46,1,98,0,243,1,45,1,46,1,0,0,0,0,4,2,46,3,0,0,0,0,81,0,15,2,0,0,217,0,0,0,0,0,80,2,98,0,98,0,244,1,45,1,46,1,0,0,55,3,56,3,57,3,81,0,81,0,81,0,245,1,45,1,46,1,215,1,0,0,216,1,217,1,218,1,219,1,0,0,0,0,98,0,0,0,98,0,98,0,0,0,47,1,98,0,98,0,0,0,47,1,145,2,98,0,216,1,217,1,218,1,219,1,98,0,98,0,172,3,48,1,51,1,53,1,55,1,57,1,175,3,0,0,177,3,47,1,0,0,178,3,0,0,0,0,0,0,220,1,0,0,0,0,217,0,47,1,0,0,221,1,222,1,0,0,0,0,0,0,94,3,0,0,15,2,81,0,81,0,0,0,0,0,146,2,0,0,186,3,99,3,103,3,0,0,147,2,81,0,117,2,119,2,223,1,0,0,26,1,224,1,0,0,0,0,0,0,98,0,98,0,98,0,98,0,98,0,98,0,98,0,98,0,0,0,0,0,98,0,0,0,98,0,0,0,145,2,98,0,216,1,217,1,218,1,219,1,0,0,124,3,0,0,0,0,119,2,0,0,115,3,26,1,216,1,217,1,218,1,219,1,0,0,145,2,0,0,216,1,217,1,218,1,219,1,81,0,0,0,0,0,139,3,98,0,140,3,81,0,0,0,81,0,0,0,0,0,141,3,98,0,98,0,81,0,0,0,146,2,0,0,0,0,0,0,0,0,0,0,63,3,0,0,0,0,0,0,0,0,0,0,98,0,0,0,98,0,98,0,0,0,0,0,145,2,220,1,216,1,217,1,218,1,219,1,98,0,217,0,222,1,174,2,98,0,0,0,0,0,224,253,98,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,224,253,98,0,0,0,224,253,224,253,224,253,223,1,224,253,0,0,180,2,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,146,2,0,0,243,0,243,0,0,0,0,0,243,0,0,0,98,0,224,253,224,253,0,0,224,253,224,253,224,253,224,253,224,253,98,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,8,1,10,1,93,1,94,1,98,0,243,0,243,0,0,0,5,3,0,0,216,1,217,1,218,1,219,1,0,0,0,0,0,0,61,1,62,1,0,0,0,0,211,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,95,1,98,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,220,1,0,0,0,0,0,0,236,2,0,0,221,1,222,1,0,0,0,0,0,0,26,255,119,2,26,1,94,0,0,0,94,0,117,0,117,0,117,0,198,2,0,0,0,0,0,0,0,0,0,0,0,0,236,0,223,1,0,0,242,2,224,1,224,253,224,253,0,0,224,253,0,0,0,0,255,0,224,253,0,0,224,253,224,253,0,0,0,0,0,0,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,94,0,15,3,93,1,94,1,34,1,0,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,1,0,0,95,1,0,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,54,3,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,243,0,243,0,61,1,0,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,88,3,0,0,243,0,0,0,243,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,0,0,0,0,26,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,98,0,98,0,98,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,14,2,17,2,18,2,19,2,20,2,21,2,22,2,23,2,24,2,25,2,26,2,27,2,28,2,29,2,30,2,31,2,32,2,33,2,34,2,35,2,36,2,37,2,38,2,39,2,40,2,41,2,42,2,0,0,243,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,63,2,65,2,98,0,94,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,98,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,34,1,0,0,98,0,0,0,0,0,0,0,0,0,0,0,91,2,0,0,243,0,0,0,63,2,65,2,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,243,0,243,0,0,0,94,0,243,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,34,1,0,0,0,0,0,0,0,0,98,0,0,0,132,2,0,0,0,0,0,0,98,0,0,0,98,0,0,0,0,0,0,0,243,0,0,0,98,0,243,0,95,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,97,0,118,0,118,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,2,168,2,94,0,95,0,78,0,0,0,78,0,0,0,0,0,0,0,94,0,243,0,0,0,0,0,0,0,0,0,0,0,233,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,35,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,78,0,35,1,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,34,1,0,0,34,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,2,0,0,163,2,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,1,0,0,0,0,0,0,243,0,80,1,223,253,223,253,223,253,223,253,85,1,86,1,243,0,243,0,223,253,223,253,0,0,0,0,0,0,0,0,93,1,94,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,243,0,0,0,94,0,97,0,91,2,17,3,0,0,20,3,22,3,0,0,0,0,0,0,94,0,27,3,29,3,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,35,3,0,0,89,1,90,1,0,0,0,0,0,0,78,0,93,1,94,1,0,0,95,0,0,0,0,0,0,0,0,0,95,0,95,0,0,0,0,0,0,0,0,0,0,0,20,3,22,3,0,0,27,3,29,3,0,0,0,0,0,0,97,0,243,0,0,0,0,0,0,0,97,0,97,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,1,0,0,0,0,78,0,0,0,0,0,94,0,94,0,78,0,78,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,243,0,95,0,0,0,0,0,89,3,0,0,0,0,94,0,95,0,0,0,0,0,91,3,0,0,0,0,34,1,0,0,97,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,35,1,0,0,0,0,94,0,94,0,0,0,0,0,0,0,0,0,91,3,0,0,0,0,0,0,0,0,78,0,0,0,243,0,0,0,0,0,78,0,0,0,0,0,94,0,0,0,0,0,0,0,78,0,0,0,0,0,13,2,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,94,0,94,0,94,0,0,0,0,0,0,0,0,0,0,0,95,0,70,3,72,3,0,0,74,3,0,0,76,3,77,3,95,0,0,0,97,0,0,0,82,3,0,0,84,3,86,3,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,78,0,89,1,90,1,0,0,0,0,0,0,95,0,93,1,94,1,0,0,78,0,243,0,0,0,0,0,0,0,95,0,94,0,94,0,78,0,0,0,0,0,0,0,0,0,100,3,0,0,0,0,97,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,180,2,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,35,1,0,0,35,1,0,0,78,0,0,0,0,0,0,0,0,0,117,0,0,0,95,0,0,0,78,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,94,0,0,0,93,1,94,1,97,0,0,0,94,0,0,0,94,0,0,0,146,3,148,3,149,3,150,3,94,0,0,0,0,0,154,3,156,3,157,3,0,0,159,3,160,3,0,0,0,0,0,0,0,0,0,0,35,1,0,0,95,1,78,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,3,0,0,0,0,181,3,183,3,184,3,185,3,0,0,95,0,0,0,0,0,43,2,44,2,0,0,187,3,45,2,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,97,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,95,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,0,0,95,0,0,0,97,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,95,0,95,0,35,1,0,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,97,0,97,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,2,0,0,0,0,0,0,0,0,95,0,95,0,95,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,97,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,97,0,0,0,0,0,0,0,0,0,0,0,101,3,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,98,3,0,0,0,0,0,0,78,0,0,0,95,0,0,0,118,0,0,0,0,0,0,0,95,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,78,0,0,0,0,0,0,0,224,253,4,0,78,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,0,0,61,0,62,0,63,0,0,0,0,0,0,0,237,254,237,254,237,254,0,0,0,0,237,254,237,254,237,254,0,0,237,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,0,0,237,254,237,254,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,0,0,0,0,93,1,94,1,0,0,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,0,0,0,0,237,254,237,254,237,254,0,0,222,2,237,254,0,0,0,0,0,0,0,0,95,1,237,254,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,237,254,0,0,0,0,0,0,0,0,157,255,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,237,254,237,254,125,254,0,0,237,254,237,254,237,254,237,254,0,0,0,0,125,254,125,254,125,254,0,0,0,0,125,254,125,254,125,254,0,0,125,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,254,125,254,125,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,254,125,254,0,0,125,254,125,254,125,254,125,254,125,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,0,0,0,0,93,1,94,1,0,0,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,0,0,0,0,125,254,125,254,125,254,0,0,0,0,125,254,0,0,0,0,0,0,0,0,95,1,125,254,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,125,254,0,0,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,254,125,254,125,254,125,254,125,254,245,254,255,0,125,254,125,254,125,254,125,254,0,0,0,0,245,254,245,254,245,254,0,0,0,0,245,254,245,254,245,254,0,0,245,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,254,245,254,245,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,254,245,254,0,0,245,254,245,254,245,254,245,254,245,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,223,253,223,253,0,0,0,0,93,1,94,1,0,0,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,0,0,0,0,245,254,245,254,245,254,0,0,0,0,245,254,0,0,0,0,0,0,0,0,0,0,245,254,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,245,254,0,0,0,0,0,0,0,0,0,0,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,254,245,254,245,254,245,254,224,253,0,0,245,254,245,254,245,254,245,254,0,0,0,0,224,253,224,253,224,253,0,0,0,0,224,253,224,253,224,253,0,0,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,0,0,224,253,224,253,224,253,224,253,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,0,0,0,0,224,253,224,253,224,253,0,0,0,0,224,253,0,0,0,0,0,0,0,0,0,0,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,0,0,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,224,253,224,253,224,253,230,254,255,0,224,253,224,253,224,253,224,253,0,0,0,0,230,254,230,254,230,254,0,0,0,0,230,254,230,254,230,254,0,0,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,230,254,0,0,230,254,230,254,230,254,230,254,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,0,0,0,0,230,254,230,254,230,254,0,0,0,0,230,254,0,0,0,0,0,0,0,0,0,0,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,0,0,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,230,254,230,254,230,254,244,253,252,0,230,254,230,254,230,254,230,254,0,0,0,0,244,253,244,253,244,253,0,0,0,0,0,0,244,253,244,253,0,0,244,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,253,244,253,0,0,244,253,244,253,244,253,244,253,244,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,0,0,0,0,244,253,244,253,244,253,237,254,182,2,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,237,254,0,0,0,0,0,0,237,254,237,254,0,0,237,254,0,0,0,0,0,0,0,0,0,0,0,0,159,255,244,253,0,0,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,237,254,237,254,0,0,237,254,237,254,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,244,253,244,253,244,253,244,253,167,255,0,0,0,0,244,253,0,0,244,253,244,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,0,0,0,0,237,254,237,254,237,254,0,0,183,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,255,237,254,0,0,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,237,254,165,255,0,0,0,0,237,254,0,0,237,254,237,254,12,1,0,0,5,0,6,0,7,0,8,0,9,0,224,253,224,253,224,253,10,0,11,0,0,0,0,0,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,224,253,224,253,224,253,10,0,11,0,0,0,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,224,253,10,0,11,0,224,253,224,253,224,253,12,0,224,253,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,224,253,10,0,11,0,224,253,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].concat([0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,224,253,224,253,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,13,1,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,0,0,224,253,224,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,0,0,224,253,224,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,224,253,224,253,224,253,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,223,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,222,0,223,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,62,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,223,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,156,1,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,1,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,148,0,149,0,150,0,151,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,35,0,36,0,163,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,251,253,251,253,251,253,0,0,251,253,0,0,0,0,0,0,251,253,251,253,0,0,192,0,193,0,251,253,0,0,251,253,251,253,251,253,251,253,251,253,251,253,251,253,0,0,251,253,0,0,0,0,0,0,251,253,251,253,251,253,251,253,251,253,251,253,251,253,0,0,0,0,251,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,253,251,253,0,0,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,0,0,0,0,251,253,0,0,0,0,251,253,251,253,0,0,251,253,251,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,253,0,0,0,0,251,253,251,253,0,0,251,253,251,253,0,0,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,0,0,0,0,251,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,253,251,253,251,253,0,0,0,0,0,0,0,0,0,0,250,253,250,253,250,253,0,0,250,253,0,0,251,253,0,0,250,253,250,253,0,0,0,0,251,253,250,253,0,0,250,253,250,253,250,253,250,253,250,253,250,253,250,253,0,0,250,253,0,0,0,0,0,0,250,253,250,253,250,253,250,253,250,253,250,253,250,253,0,0,0,0,250,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,253,250,253,0,0,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,0,0,0,0,250,253,0,0,0,0,250,253,250,253,0,0,250,253,250,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,253,0,0,0,0,250,253,250,253,0,0,250,253,250,253,0,0,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,0,0,0,0,250,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,253,250,253,250,253,0,0,0,0,0,0,0,0,0,0,248,253,248,253,248,253,0,0,248,253,0,0,250,253,0,0,248,253,248,253,0,0,0,0,250,253,248,253,0,0,248,253,248,253,248,253,248,253,248,253,248,253,248,253,0,0,0,0,0,0,0,0,0,0,248,253,248,253,248,253,248,253,248,253,248,253,248,253,0,0,0,0,248,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,253,248,253,0,0,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,0,0,0,0,248,253,0,0,0,0,248,253,248,253,0,0,248,253,248,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,253,221,2,0,0,248,253,248,253,0,0,248,253,248,253,0,0,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,0,0,0,0,248,253,0,0,0,0,0,0,159,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,253,246,253,246,253,0,0,246,253,248,253,248,253,248,253,246,253,246,253,0,0,0,0,0,0,246,253,0,0,246,253,246,253,246,253,246,253,246,253,246,253,246,253,0,0,0,0,0,0,248,253,0,0,246,253,246,253,246,253,246,253,246,253,246,253,246,253,0,0,0,0,246,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,253,246,253,0,0,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,0,0,0,0,246,253,0,0,0,0,246,253,246,253,0,0,246,253,246,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,253,0,0,0,0,246,253,246,253,0,0,246,253,246,253,0,0,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,0,0,0,0,246,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,245,253,245,253,0,0,245,253,246,253,246,253,246,253,245,253,245,253,0,0,0,0,0,0,245,253,0,0,245,253,245,253,245,253,245,253,245,253,245,253,245,253,0,0,0,0,0,0,246,253,0,0,245,253,245,253,245,253,245,253,245,253,245,253,245,253,0,0,0,0,245,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,245,253,0,0,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,0,0,0,0,245,253,0,0,0,0,245,253,245,253,0,0,245,253,245,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,0,0,0,0,245,253,245,253,0,0,245,253,245,253,0,0,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,0,0,0,0,245,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,245,253,245,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,199,0,200,0,201,0,202,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,203,0,204,0,160,0,205,0,162,0,37,1,38,1,206,0,39,1,0,0,0,0,0,0,0,0,0,0,0,0,40,1,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,41,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,199,0,200,0,201,0,202,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,203,0,204,0,160,0,205,0,162,0,37,1,38,1,206,0,39,1,0,0,0,0,0,0,0,0,0,0,0,0,40,1,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,137,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,199,0,200,0,201,0,202,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,203,0,204,0,160,0,205,0,162,0,0,0,0,0,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,199,0,200,0,201,0,202,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,203,0,204,0,160,0,205,0,162,0,0,0,0,0,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,192,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,112,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,31,1,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,112,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,8,2,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,62,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,62,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,118,2,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,118,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,2,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,2,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,14,3,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,118,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,62,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,107,0,34,0,35,0,36,0,108,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,110,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,76,1,49,0,0,0,50,0,51,0,0,0,77,1,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0])
.concat([0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,107,0,34,0,35,0,36,0,108,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,76,1,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,3,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,3,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,51,2,52,2,0,0,0,0,53,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,72,2,44,2,0,0,0,0,73,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,57,2,52,2,0,0,0,0,58,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,92,2,44,2,0,0,0,0,93,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,95,2,52,2,0,0,0,0,96,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,111,2,44,2,0,0,0,0,112,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,114,2,52,2,0,0,0,0,115,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,139,2,44,2,0,0,0,0,140,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,142,2,52,2,0,0,0,0,143,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,162,3,44,2,0,0,0,0,163,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,165,3,52,2,0,0,0,0,166,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,173,3,44,2,0,0,0,0,174,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,57,2,52,2,0,0,0,0,58,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,152,0,153,0,0,0,1,0,3,0,4,0,5,0,6,0,7,0,11,0,12,0,16,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,39,0,45,0,46,0,47,0,48,0,49,0,51,0,52,0,53,0,54,0,55,0,56,0,58,0,59,0,60,0,63,0,66,0,67,0,69,0,70,0,89,0,92,0,93,0,95,0,96,0,98,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,109,0,126,0,127,0,128,0,154,0,155,0,156,0,161,0,163,0,164,0,166,0,167,0,170,0,171,0,173,0,174,0,175,0,177,0,178,0,187,0,200,0,218,0,237,0,238,0,248,0,249,0,253,0,254,0,255,0,3,1,4,1,5,1,7,1,8,1,9,1,10,1,11,1,12,1,35,1,48,1,156,0,21,0,22,0,30,0,31,0,32,0,39,0,51,0,55,0,86,0,89,0,92,0,126,0,179,0,180,0,200,0,218,0,9,1,12,1,35,1,180,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,55,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,80,0,81,0,84,0,85,0,86,0,87,0,98,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,127,0,128,0,145,0,146,0,181,0,185,0,186,0,11,1,30,1,33,0,34,0,35,0,36,0,48,0,49,0,51,0,55,0,101,0,181,0,182,0,183,0,5,1,201,0,89,0,164,0,165,0,178,0,218,0,9,1,10,1,12,1,165,0,149,0,150,0,165,0,39,1,44,1,45,1,47,1,205,0,207,0,89,0,171,0,178,0,218,0,223,0,9,1,12,1,57,0,98,0,99,0,127,0,170,0,187,0,188,0,193,0,196,0,198,0,33,1,34,1,193,0,193,0,146,0,194,0,195,0,146,0,190,0,194,0,146,0,40,1,45,1,182,0,157,0,140,0,187,0,218,0,187,0,55,0,1,0,92,0,159,0,160,0,161,0,172,0,173,0,48,1,164,0,203,0,189,0,198,0,33,1,48,1,188,0,32,1,33,1,48,1,89,0,144,0,177,0,218,0,9,1,12,1,204,0,53,0,54,0,56,0,63,0,105,0,181,0,6,1,62,0,64,0,65,0,111,0,250,0,251,0,63,0,250,0,63,0,250,0,63,0,250,0,61,0,250,0,58,0,59,0,166,0,187,0,187,0,39,1,47,1,40,0,41,0,42,0,43,0,44,0,37,0,38,0,28,0,235,0,113,0,144,0,92,0,98,0,174,0,113,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,86,0,87,0,114,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,88,0,142,0,143,0,88,0,143,0,38,1,26,0,140,0,239,0,90,0,90,0,190,0,194,0,239,0,164,0,51,0,55,0,179,0,58,0,59,0,1,0,117,0,13,1,44,1,88,0,142,0,143,0,214,0,31,1,215,0,38,1,105,0,144,0,158,0,159,0,55,0,13,0,219,0,44,1,113,0,88,0,142,0,143,0,90,0,90,0,219,0,46,1,39,1,17,0,242,0,149,0,165,0,165,0,55,0,88,0,142,0,143,0,25,0,188,0,188,0,188,0,91,0,144,0,197,0,48,1,144,0,197,0,193,0,40,1,41,1,193,0,192,0,193,0,198,0,33,1,48,1,164,0,41,1,164,0,162,0,140,0,159,0,88,0,143,0,90,0,161,0,172,0,147,0,39,1,47,1,41,1,202,0,41,1,148,0,144,0,43,1,45,1,144,0,43,1,141,0,43,1,55,0,174,0,175,0,176,0,144,0,88,0,142,0,143,0,51,0,53,0,54,0,55,0,56,0,92,0,98,0,99,0,120,0,123,0,146,0,233,0,16,1,17,1,18,1,19,1,20,1,21,1,24,1,25,1,26,1,27,1,28,1,63,0,251,0,252,0,62,0,251,0,63,0,63,0,63,0,61,0,71,0,71,0,156,0,165,0,165,0,165,0,165,0,161,0,164,0,164,0,236,0,98,0,166,0,188,0,198,0,199,0,172,0,144,0,177,0,144,0,163,0,166,0,178,0,187,0,188,0,199,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,51,0,52,0,55,0,185,0,190,0,36,1,37,1,192,0,51,0,52,0,55,0,185,0,190,0,36,1,51,0,55,0,36,1,241,0,240,0,166,0,187,0,166,0,187,0,97,0,168,0,212,0,44,1,14,1,211,0,51,0,55,0,179,0,36,1,192,0,36,1,158,0,164,0,146,0,15,1,16,1,216,0,184,0,10,0,8,0,244,0,48,1,159,0,13,0,187,0,51,0,55,0,192,0,51,0,55,0,159,0,110,0,250,0,0,1,1,1,2,1,48,1,242,0,198,0,10,0,27,0,220,0,44,1,220,0,51,0,55,0,192,0,51,0,55,0,209,0,188,0,98,0,188,0,196,0,33,1,34,1,41,1,147,0,41,1,144,0,144,0,41,1,182,0,154,0,141,0,187,0,41,1,161,0,41,1,33,1,174,0,176,0,51,0,55,0,192,0,51,0,55,0,113,0,51,0,92,0,98,0,224,0,225,0,226,0,18,1,16,1,29,0,108,0,234,0,144,0,29,1,48,1,144,0,29,1,51,0,144,0,29,1,51,0,63,0,159,0,187,0,187,0,79,0,118,0,228,0,229,0,48,1,188,0,144,0,41,1,176,0,144,0,113,0,44,0,40,1,90,0,90,0,190,0,194,0,40,1,42,1,90,0,90,0,190,0,191,0,194,0,48,1,191,0,194,0,228,0,228,0,44,0,169,0,44,1,165,0,158,0,42,1,10,0,41,1,16,1,158,0,44,1,181,0,182,0,188,0,199,0,245,0,48,1,15,0,222,0,48,1,14,0,221,0,222,0,90,0,90,0,42,1,90,0,90,0,222,0,110,0,2,1,10,0,144,0,219,0,206,0,208,0,42,1,165,0,188,0,197,0,33,1,141,0,43,1,42,1,188,0,226,0,144,0,18,1,144,0,41,1,230,0,40,1,159,0,159,0,19,1,24,1,26,1,28,1,20,1,21,1,26,1,20,1,141,0,51,0,227,0,230,0,20,1,22,1,23,1,26,1,28,1,159,0,98,0,188,0,176,0,187,0,115,0,166,0,187,0,166,0,187,0,168,0,148,0,90,0,166,0,187,0,166,0,187,0,168,0,239,0,235,0,159,0,159,0,187,0,228,0,213,0,44,1,10,0,41,1,10,0,217,0,91,0,246,0,48,1,159,0,9,0,247,0,48,1,165,0,10,0,90,0,10,0,188,0,159,0,159,0,159,0,220,0,144,0,41,1,225,0,144,0,98,0,224,0,147,0,149,0,10,0,141,0,144,0,29,1,144,0,29,1,144,0,29,1,144,0,29,1,29,1,113,0,230,0,118,0,144,0,29,1,144,0,29,1,144,0,29,1,10,0,188,0,187,0,166,0,187,0,10,0,141,0,159,0,158,0,15,1,89,0,178,0,218,0,9,1,12,1,219,0,159,0,219,0,222,0,242,0,243,0,10,0,10,0,210,0,144,0,225,0,144,0,18,1,51,0,231,0,232,0,17,1,20,1,26,1,20,1,20,1,89,0,218,0,118,0,23,1,26,1,20,1,22,1,26,1,20,1,141,0,10,0,158,0,55,0,88,0,142,0,143,0,159,0,159,0,159,0,225,0,144,0,144,0,40,1,29,1,144,0,29,1,29,1,29,1,55,0,88,0,144,0,29,1,144,0,29,1,29,1,144,0,29,1,29,1,10,0,51,0,55,0,192,0,51,0,55,0,244,0,221,0,10,0,225,0,232,0,20,1,51,0,55,0,20,1,26,1,20,1,20,1,42,1,29,1,29,1,144,0,29,1,29,1,29,1,20,1,29,1,0,0,74,4,74,4,74,4,84,4,90,4,94,4,98,4,102,4,108,4,110,4,109,4,121,4,147,4,153,4,157,4,161,4,165,4,171,4,171,4,175,4,179,4,183,4,187,4,191,4,195,4,199,4,204,4,205,4,209,4,213,4,217,4,221,4,225,4,230,4,234,4,239,4,243,4,247,4,251,4,254,4,2,5,9,5,10,5,14,5,18,5,22,5,26,5,29,5,36,5,37,5,40,5,41,5,45,5,44,5,57,5,61,5,66,5,70,5,75,5,79,5,84,5,88,5,92,5,96,5,100,5,106,5,110,5,116,5,117,5,123,5,127,5,131,5,135,5,139,5,143,5,147,5,151,5,155,5,159,5,165,5,166,5,172,5,176,5,182,5,186,5,192,5,196,5,200,5,204,5,208,5,212,5,218,5,224,5,231,5,235,5,239,5,243,5,247,5,251,5,1,6,7,6,14,6,18,6,21,6,25,6,29,6,35,6,36,6,37,6,38,6,43,6,50,6,51,6,54,6,58,6,58,6,64,6,65,6,66,6,67,6,68,6,69,6,70,6,71,6,72,6,73,6,74,6,75,6,76,6,77,6,78,6,79,6,80,6,81,6,82,6,83,6,84,6,85,6,86,6,87,6,88,6,89,6,90,6,91,6,92,6,95,6,95,6,95,6,96,6,96,6,97,6,97,6,97,6,98,6,98,6,98,6,98,6,99,6,99,6,99,6,100,6,100,6,100,6,101,6,101,6,101,6,101,6,102,6,102,6,102,6,102,6,103,6,103,6,103,6,103,6,104,6,104,6,104,6,104,6,105,6,105,6,105,6,105,6,106,6,106,6,109,6,113,6,117,6,121,6,125,6,129,6,133,6,137,6,141,6,146,6,151,6,156,6,160,6,164,6,168,6,172,6,176,6,180,6,184,6,188,6,192,6,196,6,200,6,204,6,208,6,212,6,216,6,220,6,224,6,228,6,232,6,236,6,240,6,244,6,248,6,252,6,0,7,4,7,8,7,12,7,16,7,20,7,24,7,28,7,34,7,41,7,42,7,46,7,50,7,56,7,62,7,63,7,66,7,67,7,68,7,72,7,76,7,82,7,86,7,90,7,94,7,98,7,104,7,104,7,115,7,121,7,125,7,131,7,135,7,139,7,143,7,149,7,153,7,157,7,163,7,164,7,165,7,166,7,167,7,168,7,169,7,170,7,175,7,174,7,185,7,185,7,189,7,189,7,193,7,197,7,201,7,205,7,209,7,213,7,217,7,221,7,225,7,229,7,233,7,237,7,241,7,242,7,248,7,247,7,4,8,11,8,18,8,18,8,18,8,24,8,24,8,24,8,30,8,36,8,41,8,43,8,40,8,50,8,49,8,62,8,67,8,61,8,80,8,79,8,92,8,91,8,104,8,105,8,104,8,118,8,122,8,126,8,130,8,136,8,143,8,144,8,145,8,148,8,149,8,152,8,153,8,161,8,162,8,168,8,172,8,175,8,179,8,185,8,189,8,195,8,199,8,203,8,207,8,211,8,215,8,219,8,223,8,227,8,233,8,237,8,241,8,245,8,249,8,253,8,1,9,5,9,9,9,13,9,17,9,21,9,25,9,29,9,33,9,39,9,40,9,47,9,52,9,57,9,64,9,68,9,74,9,75,9,78,9,83,9,86,9,90,9,96,9,100,9,107,9,106,9,119,9,129,9,133,9,138,9,145,9,149,9,153,9,157,9,161,9,165,9,169,9,173,9,177,9,184,9,183,9,194,9,193,9,205,9,213,9,222,9,225,9,232,9,235,9,239,9,240,9,243,9,247,9,250,9,254,9,1,10,2,10,3,10,4,10,7,10,8,10,9,10,13,10,19,10,20,10,26,10,31,10,30,10,41,10,47,10,51,10,57,10,61,10,67,10,70,10,71,10,74,10,75,10,78,10,83,10,90,10,94,10,101,10,105,10,112,10,119,10,120,10,121,10,122,10,123,10,127,10,133,10,137,10,143,10,144,10,145,10,149,10,155,10,159,10,163,10,167,10,171,10,177,10,183,10,187,10,191,10,195,10,199,10,203,10,210,10,219,10,220,10,223,10,228,10,227,10,236,10,243,10,249,10,255,10,3,11,7,11,11,11,15,11,19,11,23,11,27,11,31,11,35,11,39,11,43,11,47,11,51,11,56,11,62,11,67,11,72,11,77,11,84,11,88,11,95,11,99,11,105,11,109,11,115,11,122,11,129,11,133,11,139,11,143,11,149,11,150,11,153,11,158,11,165,11,166,11,169,11,176,11,180,11,187,11,192,11,192,11,217,11,218,11,224,11,228,11,234,11,238,11,244,11,245,11,246,11,249,11,250,11,251,11,252,11,255,11,0,12,1,12,4,12,5,12,8,12,9,12,12,12,13,12,16,12,19,12,22,12,23,12,24,12,27,12,28,12,32,12,31,12,38,12,39,12,43,12,0,0,152,0,0,0,255,255,255,255,153,0,154,0,255,255,155,0,39,1,255,255,48,1,255,255,156,0,255,255,155,0,47,1,156,0,255,255,1,0,156,0,255,255,161,0,255,255,255,255,46,0,157,0,140,0,154,0,141,0,255,255,159,0,244,0,222,0,247,0,255,255,160,0,39,1,255,255,48,1,255,255,161,0,255,255,160,0,47,1,161,0,255,255,1,0,161,0,255,255,255,255,45,0,182,0,162,0,182,0,255,255,6,0,183,0,255,255,161,0,40,0,165,0,255,255,161,0,41,0,165,0,255,255,161,0,42,0,165,0,255,255,161,0,43,0,165,0,255,255,161,0,44,0,161,0,255,255,47,0,140,0,159,0,141,0,255,255,163,0,255,255,171,0,113,0,166,0,255,255,10,1,90,0,166,0,255,255,218,0,142,0,192,0,42,1,90,0,166,0,255,255,218,0,143,0,51,0,90,0,166,0,255,255,218,0,143,0,55,0,90,0,166,0,255,255,218,0,88,0,55,0,90,0,166,0,255,255,218,0,88,0,51,0,90,0,166,0,255,255,12,1,90,0,166,0,255,255,178,0,113,0,199,0,255,255,171,0,113,0,188,0,255,255,171,0,113,0,199,0,255,255,164,0,255,255,178,0,113,0,166,0,255,255,178,0,113,0,163,0,255,255,166,0,255,255,164,0,37,0,164,0,255,255,164,0,38,0,164,0,255,255,39,0,40,1,164,0,255,255,127,0,166,0,255,255,187,0,255,255,164,0,255,255,170,0,255,255,167,0,255,255,237,0,255,255,237,0,38,1,36,1,194,0,255,255,255,255,97,0,169,0,228,0,159,0,141,0,255,255,35,1,194,0,255,255,35,1,194,0,168,0,255,255,218,0,143,0,36,1,194,0,255,255,218,0,143,0,36,1,194,0,168,0,255,255,218,0,88,0,36,1,194,0,255,255,218,0,88,0,36,1,194,0,168,0,255,255,32,0,194,0,255,255,31,0,194,0,255,255,30,0,193,0,255,255,21,0,193,0,255,255,22,0,193,0,255,255,173,0,255,255,92,0,172,0,41,1,255,255,173,0,255,255,92,0,172,0,41,1,255,255,175,0,255,255,175,0,174,0,255,255,175,0,98,0,177,0,255,255,175,0,98,0,177,0,144,0,176,0,255,255,175,0,98,0,255,255,175,0,98,0,144,0,176,0,255,255,98,0,177,0,255,255,98,0,177,0,144,0,176,0,255,255,98,0,255,255,98,0,144,0,176,0,255,255,177,0,255,255,92,0,172,0,41,1,255,255,174,0,144,0,255,255,175,0,174,0,144,0,255,255,174,0,255,255,175,0,174,0,255,255,9,1,255,255,218,0,142,0,192,0,42,1,255,255,218,0,143,0,51,0,255,255,218,0,88,0,51,0,255,255,218,0,143,0,55,0,255,255,218,0,88,0,55,0,255,255,89,0,55,0,255,255,12,1,255,255,9,1,255,255,218,0,142,0,192,0,42,1,255,255,218,0,143,0,51,0,255,255,218,0,88,0,51,0,255,255,218,0,143,0,55,0,255,255,218,0,88,0,55,0,255,255,89,0,55,0,255,255,12,1,255,255,51,0,255,255,55,0,255,255,89,0,179,0,255,255,179,0,255,255,218,0,88,0,179,0,255,255,51,0,255,255,55,0,255,255,52,0,255,255,185,0,255,255,186,0,255,255,181,0,255,255,5,1,255,255,182,0,255,255,255,255,183,0,144,0,184,0,182,0,255,255,118,0,255,255,119,0,255,255,120,0,255,255,72,0,255,255,73,0,255,255,74,0,255,255,80,0,255,255,81,0,255,255,116,0,255,255,76,0,255,255,117,0,255,255,77,0,255,255,75,0,255,255,86,0,255,255,87,0,255,255,121,0,255,255,122,0,255,255,123,0,255,255,98,0,255,255,124,0,255,255,125,0,255,255,71,0,255,255,127,0,255,255,128,0,255,255,69,0,255,255,70,0,255,255,84,0,255,255,85,0,255,255,145,0,255,255,48,0,255,255,49,0,255,255,50,0,255,255,46,0,255,255,47,0,255,255,45,0,255,255,37,0,255,255,7,0,255,255,21,0,255,255,16,0,255,255,3,0,255,255,5,0,255,255,26,0,255,255,15,0,255,255,14,0,255,255,10,0,255,255,9,0,255,255,36,0,255,255,20,0,255,255,25,0,255,255,4,0,255,255,22,0,255,255,34,0,255,255,39,0,255,255,38,0,255,255,23,0,255,255,8,0,255,255,24,0,255,255,30,0,255,255,33,0,255,255,32,0,255,255,13,0,255,255,35,0,255,255,6,0,255,255,17,0,255,255,31,0,255,255,11,0,255,255,12,0,255,255,18,0,255,255,19,0,255,255,178,0,113,0,187,0,255,255,178,0,113,0,187,0,44,0,187,0,255,255,10,1,90,0,187,0,255,255,10,1,90,0,187,0,44,0,187,0,255,255,218,0,142,0,192,0,42,1,90,0,187,0,255,255,218,0,143,0,51,0,90,0,187,0,255,255,218,0,143,0,55,0,90,0,187,0,255,255,218,0,88,0,51,0,90,0,187,0,255,255,218,0,88,0,55,0,90,0,187,0,255,255,89,0,55,0,90,0,187,0,255,255,12,1,90,0,187,0,255,255,187,0,82,0,187,0,255,255,187,0,83,0,187,0,255,255,187,0,121,0,187,0,255,255,187,0,122,0,187,0,255,255,187,0,123,0,187,0,255,255,187,0,124,0,187,0,255,255,187,0,125,0,187,0,255,255,187,0,71,0,187,0,255,255,126,0,58,0,71,0,187,0,255,255,126,0,59,0,71,0,187,0,255,255,69,0,187,0,255,255,70,0,187,0,255,255,187,0,118,0,187,0,255,255,187,0,119,0,187,0,255,255,187,0,120,0,187,0,255,255,187,0,72,0,187,0,255,255,187,0,116,0,187,0,255,255,187,0,76,0,187,0,255,255,187,0,117,0,187,0,255,255,187,0,77,0,187,0,255,255,187,0,73,0,187,0,255,255,187,0,74,0,187,0,255,255,187,0,75,0,187,0,255,255,187,0,80,0,187,0,255,255,187,0,81,0,187,0,255,255,127,0,187,0,255,255,128,0,187,0,255,255,187,0,86,0,187,0,255,255,187,0,87,0,187,0,255,255,187,0,78,0,187,0,255,255,187,0,79,0,187,0,255,255,187,0,114,0,187,0,40,1,115,0,187,0,255,255,200,0,255,255,187,0,255,255,48,1,255,255,198,0,43,1,255,255,198,0,144,0,33,1,43,1,255,255,33,1,43,1,255,255,146,0,192,0,41,1,255,255,48,1,255,255,190,0,255,255,48,1,255,255,193,0,255,255,198,0,144,0,255,255,198,0,144,0,33,1,144,0,255,255,33,1,144,0,255,255,170,0,255,255,198,0,197,0,255,255,33,1,197,0,255,255,198,0,144,0,33,1,197,0,255,255,196,0,255,255,255,255,195,0,193,0,255,255,99,0,188,0,255,255,144,0,196,0,255,255,48,1,255,255,188,0,255,255,98,0,188,0,255,255,198,0,144,0,188,0,255,255,198,0,144,0,98,0,188,0,255,255,198,0,144,0,188,0,255,255,198,0,144,0,98,0,188,0,255,255,98,0,188,0,255,255,248,0,255,255,249,0,255,255,253,0,255,255,254,0,255,255,255,0,255,255,11,1,255,255,12,1,255,255,52,0,255,255,255,255,7,0,201,0,158,0,10,0,255,255,255,255,93,0,164,0,202,0,41,1,255,255,255,255,93,0,203,0,41,1,255,255,92,0,159,0,147,0,255,255,218,0,88,0,55,0,255,255,89,0,55,0,255,255,95,0,189,0,148,0,255,255,96,0,32,1,141,0,255,255,30,0,255,255,31,0,146,0,193,0,41,1,255,255,31,0,146,0,41,1,255,255,31,0,255,255,39,0,146,0,164,0,41,1,255,255,39,0,146,0,41,1,255,255,35,1,239,0,255,255,238,0,255,255,238,0,239,0,255,255,255,255,100,0,204,0,233,0,234,0,255,255,11,0,165,0,219,0,159,0,221,0,10,0,255,255,12,0,165,0,219,0,159,0,222,0,10,0,255,255,255,255,255,255,18,0,205,0,165,0,220,0,206,0,159,0,10,0,255,255,255,255,255,255,19,0,207,0,165,0,220,0,208,0,159,0,10,0,255,255,16,0,165,0,39,1,242,0,10,0,255,255,16,0,39,1,242,0,10,0,255,255,255,255,255,255,20,0,223,0,25,0,209,0,165,0,220,0,210,0,159,0,10,0,255,255,255,255,3,0,180,0,13,1,211,0,158,0,10,0,255,255,255,255,255,255,3,0,86,0,164,0,212,0,44,1,213,0,158,0,10,0,255,255,255,255,4,0,180,0,214,0,158,0,10,0,255,255,255,255,5,0,181,0,215,0,15,1,158,0,10,0,255,255,255,255,255,255,5,0,30,1,38,1,216,0,181,0,217,0,15,1,158,0,10,0,255,255,21,0,255,255,22,0,255,255,23,0,255,255,24,0,255,255,200,0,255,255,44,1,255,255,13,0,255,255,44,1,13,0,255,255,44,1,255,255,27,0,255,255,222,0,255,255,14,0,165,0,219,0,159,0,221,0,255,255,48,1,255,255,15,0,159,0,255,255,178,0,255,255,171,0,255,255,18,1,255,255,92,0,226,0,41,1,255,255,224,0,255,255,225,0,144,0,224,0,255,255,225,0,255,255,225,0,144,0,98,0,18,1,255,255,225,0,144,0,98,0,18,1,144,0,225,0,255,255,225,0,144,0,98,0,255,255,225,0,144,0,98,0,144,0,225,0,255,255,98,0,18,1,255,255,98,0,18,1,144,0,225,0,255,255,98,0,255,255,98,0,144,0,225,0,255,255,20,1,144,0,23,1,144,0,26,1,29,1,255,255,20,1,144,0,23,1,144,0,26,1,144,0,20,1,29,1,255,255,20,1,144,0,23,1,29,1,255,255,20,1,144,0,23,1,144,0,20,1,29,1,255,255,20,1,144,0,26,1,29,1,255,255,20,1,144,0,255,255,20,1,144,0,26,1,144,0,20,1,29,1,255,255,20,1,29,1,255,255,23,1,144,0,26,1,29,1,255,255,23,1,144,0,26,1,144,0,20,1,29,1,255,255,23,1,29,1,255,255,23,1,144,0,20,1,29,1,255,255,26,1,29,1,255,255,26,1,144,0,20,1,29,1,255,255,28,1,255,255,48,1,255,255,229,0,255,255,118,0,230,0,118,0,255,255,79,0,255,255,118,0,227,0,230,0,118,0,255,255,40,1,255,255,40,1,149,0,231,0,40,1,255,255,232,0,255,255,231,0,144,0,232,0,255,255,51,0,255,255,17,1,255,255,146,0,16,1,230,0,147,0,255,255,16,1,255,255,108,0,159,0,141,0,255,255,29,0,159,0,10,0,255,255,255,255,28,0,236,0,228,0,159,0,10,0,255,255,170,0,235,0,255,255,237,0,38,1,36,1,191,0,255,255,237,0,38,1,36,1,191,0,239,0,255,255,237,0,38,1,36,1,194,0,235,0,255,255,35,1,190,0,255,255,218,0,143,0,36,1,191,0,255,255,218,0,88,0,36,1,190,0,255,255,218,0,88,0,37,1,255,255,218,0,143,0,190,0,255,255,218,0,88,0,190,0,255,255,32,0,190,0,255,255,32,0,255,255,218,0,142,0,192,0,42,1,255,255,255,255,140,0,240,0,228,0,159,0,141,0,255,255,255,255,26,0,241,0,228,0,159,0,10,0,255,255,17,0,198,0,219,0,159,0,243,0,255,255,222,0,255,255,242,0,255,255,8,0,245,0,246,0,219,0,159,0,244,0,255,255,48,1,255,255,188,0,255,255,199,0,255,255,48,1,255,255,91,0,178,0,255,255,48,1,255,255,9,0,159,0,255,255,48,1,255,255,8,1,255,255,4,1,255,255,3,1,255,255,7,1,255,255,60,0,255,255,63,0,255,255,105,0,63,0,255,255,105,0,250,0,63,0,255,255,251,0,255,255,250,0,251,0,255,255,65,0,255,255,255,255,64,0,252,0,159,0,141,0,255,255,111,0,255,255,106,0,61,0,255,255,106,0,250,0,61,0,255,255,102,0,62,0,255,255,102,0,250,0,62,0,255,255,109,0,255,255,48,1,255,255,1,1,255,255,2,1,255,255,1,1,2,1,255,255,110,0,255,255,250,0,110,0,255,255,103,0,63,0,255,255,103,0,250,0,63,0,255,255,5,1,255,255,101,0,105,0,251,0,63,0,255,255,101,0,6,1,255,255,181,0,255,255,54,0,255,255,53,0,255,255,56,0,255,255,63,0,255,255,105,0,63,0,255,255,104,0,63,0,255,255,104,0,250,0,63,0,255,255,58,0,255,255,59,0,255,255,126,0,58,0,255,255,126,0,59,0,255,255,51,0,255,255,54,0,255,255,53,0,255,255,56,0,255,255,55,0,255,255,9,1,255,255,9,1,255,255,34,0,255,255,33,0,255,255,35,0,255,255,36,0,255,255,49,0,255,255,48,0,255,255,66,0,255,255,67,0,255,255,44,1,255,255,255,255,117,0,14,1,165,0,44,1,255,255,1,0,44,1,255,255,146,0,16,1,41,1,255,255,16,1,44,1,255,255,20,1,144,0,24,1,144,0,26,1,29,1,255,255,20,1,144,0,24,1,144,0,26,1,144,0,20,1,29,1,255,255,20,1,144,0,24,1,29,1,255,255,20,1,144,0,24,1,144,0,20,1,29,1,255,255,20,1,144,0,26,1,29,1,255,255,20,1,144,0,26,1,144,0,20,1,29,1,255,255,20,1,29,1,255,255,24,1,144,0,26,1,29,1,255,255,24,1,144,0,26,1,144,0,20,1,29,1,255,255,24,1,29,1,255,255,24,1,144,0,20,1,29,1,255,255,26,1,29,1,255,255,26,1,144,0,20,1,29,1,255,255,28,1,255,255,255,255,55,0,255,255,54,0,255,255,53,0,255,255,56,0,255,255,17,1,255,255,51,0,255,255,18,1,255,255,92,0,226,0,41,1,255,255,19,1,255,255,20,1,144,0,19,1,255,255,51,0,113,0,188,0,255,255,51,0,113,0,218,0,255,255,22,1,255,255,23,1,144,0,22,1,255,255,21,1,255,255,24,1,144,0,21,1,255,255,123,0,255,255,98,0,255,255,25,1,51,0,255,255,25,1,255,255,120,0,255,255,99,0,255,255,27,1,51,0,255,255,144,0,28,1,255,255,48,1,255,255,11,1,255,255,255,255,146,0,31,1,164,0,41,1,255,255,48,1,255,255,33,1,43,1,255,255,34,1,255,255,33,1,144,0,34,1,255,255,188,0,91,0,188,0,255,255,57,0,188,0,255,255,51,0,255,255,55,0,255,255,52,0,255,255,51,0,255,255,55,0,255,255,52,0,255,255,185,0,255,255,51,0,255,255,52,0,255,255,185,0,255,255,143,0,255,255,88,0,255,255,255,255,47,1,255,255,255,255,45,1,255,255,40,1,147,0,255,255,40,1,148,0,255,255,255,255,45,1,255,255,144,0,255,255,149,0,255,255,45,1,255,255,255,255,150,0,46,1,0,1,255,255,44,1,255,255,47,1,149,0,255,255,255,255,0,2,0,2,2,1,1,3,2,1,0,5,4,2,1,1,3,2,0,4,2,3,3,3,3,3,4,1,3,3,6,5,5,5,5,3,3,3,3,1,3,3,1,3,3,3,2,1,1,1,1,1,4,0,5,2,3,4,5,4,5,2,2,2,2,2,1,3,1,3,1,2,3,5,2,4,2,4,1,3,1,3,2,3,1,2,1,4,3,3,3,3,2,1,1,4,3,3,3,3,2,1,1,1,2,1,3,1,1,1,1,1,1,1,1,0,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,5,3,5,6,5,5,5,5,4,3,3,3,3,3,3,3,3,3,4,4,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,6,1,1,1,2,4,2,3,1,1,1,1,2,4,2,1,2,2,4,1,0,2,2,2,1,1,2,3,4,3,4,2,1,1,1,1,1,1,1,1,0,4,0,4,0,3,3,3,2,3,3,1,4,3,1,4,3,2,1,2,0,4,6,6,0,0,7,0,0,7,5,4,0,0,9,0,6,0,0,8,0,5,0,6,0,0,9,1,1,1,1,1,1,1,2,1,1,1,5,1,2,1,1,1,3,1,3,1,4,6,3,5,2,4,1,3,6,8,4,6,4,2,6,2,4,6,2,4,2,4,1,1,1,3,1,4,1,4,1,3,1,1,4,1,3,3,0,5,2,4,5,5,2,4,4,3,3,3,2,1,4,0,5,0,5,5,1,1,6,1,1,1,1,2,1,2,1,1,1,1,1,1,1,2,3,1,2,1,0,4,1,2,3,2,3,1,1,1,1,2,1,2,2,3,1,4,2,1,1,1,1,1,2,2,3,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,4,2,3,2,6,8,4,6,4,6,2,4,6,2,4,2,4,1,0,1,1,1,1,1,1,1,3,1,3,3,3,1,3,1,3,1,1,2,1,1,1,2,2,1,1,0,4,1,2,1,3,3,2,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,2,2,0,1,1,1,1,0,3,1,2,0,0,0,0,0,0,151,0,153,0,152,0,154,0,155,0,155,0,155,0,155,0,156,0,157,0,156,0,158,0,159,0,160,0,160,0,160,0,160,0,162,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,163,0,163,0,164,0,164,0,164,0,164,0,164,0,164,0,165,0,166,0,166,0,167,0,167,0,169,0,168,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,171,0,171,0,172,0,172,0,173,0,173,0,173,0,173,0,173,0,173,0,173,0,173,0,173,0,173,0,174,0,174,0,175,0,175,0,176,0,176,0,177,0,177,0,177,0,177,0,177,0,177,0,177,0,177,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,179,0,179,0,180,0,180,0,180,0,181,0,181,0,181,0,181,0,181,0,182,0,182,0,183,0,184,0,183,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0])
.concat([186,0,186,0,186,0,186,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,188,0,189,0,189,0,189,0,189,0,190,0,191,0,191,0,192,0,192,0,192,0,192,0,192,0,193,0,193,0,193,0,193,0,193,0,195,0,194,0,196,0,197,0,197,0,198,0,198,0,198,0,198,0,199,0,199,0,199,0,200,0,200,0,200,0,200,0,200,0,200,0,200,0,200,0,201,0,200,0,202,0,200,0,203,0,200,0,200,0,200,0,200,0,200,0,200,0,200,0,200,0,200,0,200,0,200,0,200,0,200,0,200,0,200,0,204,0,200,0,200,0,200,0,205,0,206,0,200,0,207,0,208,0,200,0,200,0,200,0,209,0,210,0,200,0,211,0,200,0,212,0,213,0,200,0,214,0,200,0,215,0,200,0,216,0,217,0,200,0,200,0,200,0,200,0,200,0,218,0,219,0,219,0,219,0,220,0,220,0,221,0,221,0,222,0,222,0,223,0,223,0,224,0,224,0,225,0,225,0,226,0,226,0,226,0,226,0,226,0,226,0,226,0,226,0,226,0,227,0,227,0,227,0,227,0,227,0,227,0,227,0,227,0,227,0,227,0,227,0,227,0,227,0,227,0,227,0,228,0,228,0,229,0,229,0,229,0,230,0,230,0,231,0,231,0,232,0,232,0,233,0,233,0,234,0,234,0,236,0,235,0,237,0,237,0,237,0,237,0,238,0,238,0,238,0,238,0,238,0,238,0,238,0,238,0,238,0,240,0,239,0,241,0,239,0,242,0,243,0,243,0,244,0,244,0,245,0,245,0,245,0,246,0,246,0,247,0,247,0,248,0,248,0,248,0,248,0,249,0,249,0,249,0,249,0,250,0,250,0,251,0,252,0,251,0,251,0,253,0,253,0,254,0,254,0,255,0,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,14,1,13,1,13,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,29,1,29,1,30,1,31,1,30,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,42,1,43,1,43,1,43,1,44,1,44,1,46,1,45,1,47,1,47,1,48,1,0,0,0,0,0,0,3,0,4,0,7,0,10,0,12,0,14,0,18,0,21,0,23,0,24,0,30,0,35,0,38,0,40,0,42,0,46,0,49,0,50,0,55,0,58,0,62,0,66,0,70,0,74,0,78,0,83,0,85,0,89,0,93,0,100,0,106,0,112,0,118,0,124,0,128,0,132,0,136,0,140,0,142,0,146,0,150,0,152,0,156,0,160,0,164,0,167,0,169,0,171,0,173,0,175,0,177,0,182,0,183,0,189,0,192,0,196,0,201,0,207,0,212,0,218,0,221,0,224,0,227,0,230,0,233,0,235,0,239,0,241,0,245,0,247,0,250,0,254,0,4,1,7,1,12,1,15,1,20,1,22,1,26,1,28,1,32,1,35,1,39,1,41,1,44,1,46,1,51,1,55,1,59,1,63,1,67,1,70,1,72,1,74,1,79,1,83,1,87,1,91,1,95,1,98,1,100,1,102,1,104,1,107,1,109,1,113,1,115,1,117,1,119,1,121,1,123,1,125,1,127,1,129,1,130,1,135,1,137,1,139,1,141,1,143,1,145,1,147,1,149,1,151,1,153,1,155,1,157,1,159,1,161,1,163,1,165,1,167,1,169,1,171,1,173,1,175,1,177,1,179,1,181,1,183,1,185,1,187,1,189,1,191,1,193,1,195,1,197,1,199,1,201,1,203,1,205,1,207,1,209,1,211,1,213,1,215,1,217,1,219,1,221,1,223,1,225,1,227,1,229,1,231,1,233,1,235,1,237,1,239,1,241,1,243,1,245,1,247,1,249,1,251,1,253,1,255,1,1,2,3,2,5,2,7,2,9,2,11,2,13,2,15,2,17,2,21,2,27,2,31,2,37,2,44,2,50,2,56,2,62,2,68,2,73,2,77,2,81,2,85,2,89,2,93,2,97,2,101,2,105,2,109,2,114,2,119,2,122,2,125,2,129,2,133,2,137,2,141,2,145,2,149,2,153,2,157,2,161,2,165,2,169,2,173,2,177,2,180,2,183,2,187,2,191,2,195,2,199,2,206,2,208,2,210,2,212,2,215,2,220,2,223,2,227,2,229,2,231,2,233,2,235,2,238,2,243,2,246,2,248,2,251,2,254,2,3,3,5,3,6,3,9,3,12,3,15,3,17,3,19,3,22,3,26,3,31,3,35,3,40,3,43,3,45,3,47,3,49,3,51,3,53,3,55,3,57,3,59,3,60,3,65,3,66,3,71,3,72,3,76,3,80,3,84,3,87,3,91,3,95,3,97,3,102,3,106,3,108,3,113,3,117,3,120,3,122,3,125,3,126,3,131,3,138,3,145,3,146,3,147,3,155,3,156,3,157,3,165,3,171,3,176,3,177,3,178,3,188,3,189,3,196,3,197,3,198,3,207,3,208,3,214,3,215,3,222,3,223,3,224,3,234,3,236,3,238,3,240,3,242,3,244,3,246,3,248,3,251,3,253,3,255,3,1,4,7,4,9,4,12,4,14,4,16,4,18,4,22,4,24,4,28,4,30,4,35,4,42,4,46,4,52,4,55,4,60,4,62,4,66,4,73,4,82,4,87,4,94,4,99,4,102,4,109,4,112,4,117,4,124,4,127,4,132,4,135,4,140,4,142,4,144,4,146,4,150,4,152,4,157,4,159,4,164,4,166,4,170,4,172,4,174,4,179,4,181,4,185,4,189,4,190,4,196,4,199,4,204,4,210,4,216,4,219,4,224,4,229,4,233,4,237,4,241,4,244,4,246,4,251,4,252,4,2,5,3,5,9,5,15,5,17,5,19,5,26,5,28,5,30,5,32,5,34,5,37,5,39,5,42,5,44,5,46,5,48,5,50,5,52,5,54,5,56,5,59,5,63,5,65,5,68,5,70,5,71,5,76,5,78,5,81,5,85,5,88,5,92,5,94,5,96,5,98,5,100,5,103,5,105,5,108,5,111,5,115,5,117,5,122,5,125,5,127,5,129,5,131,5,133,5,135,5,138,5,141,5,145,5,147,5,149,5,152,5,155,5,157,5,159,5,161,5,163,5,165,5,167,5,169,5,171,5,173,5,175,5,177,5,179,5,181,5,183,5,185,5,187,5,188,5,193,5,196,5,200,5,203,5,210,5,219,5,224,5,231,5,236,5,243,5,246,5,251,5,2,6,5,6,10,6,13,6,18,6,20,6,21,6,23,6,25,6,27,6,29,6,31,6,33,6,35,6,39,6,41,6,45,6,49,6,53,6,55,6,59,6,61,6,65,6,67,6,69,6,72,6,74,6,76,6,78,6,81,6,84,6,86,6,88,6,89,6,94,6,96,6,99,6,101,6,105,6,109,6,112,6,114,6,116,6,118,6,120,6,122,6,124,6,126,6,128,6,130,6,132,6,134,6,136,6,137,6,139,6,140,6,142,6,145,6,148,6,149,6,151,6,153,6,155,6,157,6,158,6,162,6,164,6,167,6,0,0,23,253,23,253,23,253,119,1,23,253,32,0,23,253,162,254,29,1,23,253,61,0,23,253,194,254,253,255,22,0,197,255,23,253,186,253,23,253,251,255,29,3,110,255,28,0,193,255,20,255,88,254,229,255,182,6,177,255,46,3,7,0,244,255,23,253,23,253,8,255,23,253,189,4,169,2,23,253,5,0,253,0,189,254,101,0,77,0,23,253,109,254,13,255,21,0,229,254,14,0,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,32,1,39,255,153,254,175,255,231,253,23,253,96,253,95,253,170,0,23,253,69,254,23,253,165,253,23,253,173,255,23,253,23,253,133,0,23,253,23,253,23,253,174,255,23,253,23,253,121,254,23,253,180,255,23,253,23,253,23,253,23,253,23,253,241,3,40,255,23,253,23,253,23,253,23,253,23,253,23,253,232,0,23,253,23,253,2,0,23,253,23,253,23,253,39,5,135,6,72,3,155,6,23,253,23,253,42,0,248,254,34,253,91,255,201,253,148,0,150,253,24,253,4,0,188,0,23,253,115,255,23,253,252,254,26,5,23,253,23,253,23,253,6,0,130,254,25,3,192,254,23,253,153,2,10,0,231,255,33,255,247,253,45,255,250,255,46,0,23,253,9,0,254,255,23,253,109,0,34,10,23,253,125,28,141,35,212,36,99,22,134,26,23,253,58,34,58,34,84,20,23,253,23,253,250,35,95,29,95,29,23,253,23,253,95,29,226,12,47,11,23,253,23,253,23,253,23,253,243,255,134,26,23,253,1,0,23,253,23,253,230,22,192,11,23,253,23,253,105,23,23,253,23,253,23,253,23,253,23,253,23,253,23,253,171,34,171,34,94,0,163,17,58,34,65,30,148,31,149,27,23,253,104,25,159,2,195,2,239,2,3,3,58,1,23,253,125,0,28,35,171,34,23,253,189,0,23,253,137,3,23,253,235,1,23,253,23,253,124,0,67,0,23,253,43,0,103,36,23,253,99,0,29,11,228,0,15,1,24,0,76,0,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,136,1,86,0,23,253,180,1,63,0,23,253,23,253,23,253,23,253,23,253,102,0,123,0,168,0,72,1,162,1,58,34,104,0,57,18,27,1,23,253,160,0,23,253,22,1,23,253,23,253,63,0,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,56,0,59,0,214,0,234,0,23,253,23,253,23,253,23,253,23,253,23,253,4,1,18,1,23,253,36,1,23,253,39,1,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,24,0,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,247,25,23,253,23,253,93,0,23,253,98,14,150,0,235,1,92,0,218,0,28,1,49,0,237,0,75,0,92,0,23,253,23,253,189,0,76,1,23,253,23,253,235,0,58,34,58,34,56,1,23,253,23,253,48,1,108,1,88,0,95,0,171,34,171,34,171,34,171,34,23,253,29,11,44,1,23,253,23,253,5,1,10,1,23,253,23,253,23,253,227,19,23,253,95,29,95,29,23,253,23,253,219,20,58,34,23,253,23,253,23,1,207,18,23,253,74,1,114,1,216,1,238,28,163,17,45,1,189,0,137,3,52,1,82,1,23,253,235,1,52,1,59,1,19,0,145,0,23,253,44,1,68,1,145,0,23,253,165,1,65,37,78,1,98,1,117,1,122,1,233,2,23,253,23,253,23,253,23,253,171,3,23,253,23,253,23,253,23,253,23,253,23,253,184,2,23,253,23,253,175,3,23,253,193,3,23,253,203,3,23,253,132,1,153,1,159,1,23,253,23,253,23,253,23,253,76,21,58,34,58,34,58,34,58,34,238,28,58,34,58,34,23,253,23,253,5,32,23,253,163,17,9,28,101,1,5,32,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,171,34,158,8,95,29,86,38,23,253,23,253,254,41,23,253,23,253,23,253,28,35,28,35,23,253,139,1,23,253,235,1,23,253,125,1,23,253,23,253,23,253,189,0,23,253,23,253,23,253,164,38,95,29,242,38,98,14,58,34,107,3,23,253,185,1,23,253,247,1,11,2,91,0,23,253,239,14,8,2,171,34,64,39,95,29,142,39,171,34,171,34,255,15,34,3,76,1,118,32,13,2,23,253,51,0,51,0,110,0,220,39,95,29,42,40,23,253,23,253,23,253,23,253,171,34,208,29,23,253,23,253,178,30,23,253,52,1,152,1,23,253,23,253,52,1,23,253,168,1,172,1,23,253,90,0,23,253,23,253,134,26,134,16,186,1,64,39,142,39,171,34,137,3,52,1,23,253,23,253,208,21,189,1,52,1,23,253,23,253,35,31,23,253,23,253,148,31,23,253,23,253,23,253,125,1,43,0,65,37,23,253,65,37,120,40,95,29,198,40,190,1,23,253,23,253,23,253,23,253,236,3,23,253,23,253,23,253,23,253,218,3,58,0,23,253,23,253,23,253,23,253,203,1,23,253,206,1,27,2,222,1,70,2,23,253,23,253,55,2,207,18,23,253,23,253,23,253,23,253,23,253,23,253,171,34,171,34,23,253,23,253,23,253,23,253,23,253,23,253,23,253,23,253,55,0,171,34,23,253,234,1,238,1,23,253,52,1,65,37,243,1,23,253,23,253,23,253,21,2,150,4,23,253,23,253,114,1,237,6,237,6,237,6,237,6,69,3,69,3,53,7,236,7,237,6,237,6,174,11,174,11,46,2,46,2,140,10,69,3,69,3,240,2,240,2,44,3,129,1,129,1,114,1,114,1,114,1,115,13,98,24,204,13,216,24,23,253,123,0,23,253,52,1,68,2,23,253,72,2,23,253,23,253,81,12,23,253,23,253,175,4,55,0,55,0,23,253,3,5,23,253,29,11,23,253,23,253,189,0,23,253,58,34,98,14,67,2,48,0,23,253,123,0,52,1,123,0,125,2,90,0,218,3,98,14,189,0,21,27,134,26,23,253,231,32,122,2,23,253,51,2,23,253,51,8,236,23,158,10,52,1,156,1,176,1,122,2,23,253,85,3,23,253,34,3,23,253,23,253,130,2,79,0,23,253,23,253,23,253,23,253,23,253,139,0,219,0,52,1,120,0,128,0,58,34,23,253,171,34,44,1,23,253,10,1,23,253,23,253,23,253,23,253,208,29,178,30,23,253,23,253,0,2,23,253,29,11,30,0,137,3,23,253,145,0,101,1,23,253,67,2,48,0,52,1,35,0,45,0,171,34,23,253,236,3,135,2,23,253,254,1,52,1,23,253,52,1,92,19,207,18,23,253,218,3,23,253,23,253,218,3,23,253,23,253,71,4,23,253,23,253,23,253,2,2,114,1,114,1,23,253,222,2,92,19,23,253,23,253,5,2,88,33,23,253,23,253,65,37,28,35,171,34,35,2,28,35,28,35,23,253,139,1,4,2,86,2,28,35,28,35,23,253,23,253,139,1,23,253,76,0,124,0,92,19,207,18,171,34,55,0,23,253,189,0,146,2,23,253,23,253,23,253,52,1,147,2,23,253,23,253,23,253,234,1,23,253,73,2,23,253,28,17,150,2,23,253,58,34,151,2,23,253,171,34,171,34,198,1,171,34,171,34,163,2,23,253,23,253,23,253,201,33,119,15,92,19,92,19,147,0,51,0,23,253,23,253,30,2,23,253,23,253,92,1,23,253,52,1,111,4,33,2,52,4,23,253,31,2,38,2,190,2,53,2,23,253,57,2,59,2,23,253,61,2,23,253,62,2,61,2,23,253,95,2,52,1,99,2,75,2,23,253,81,2,82,2,23,253,218,2,171,34,87,2,23,253,29,11,171,34,23,253,29,11,23,253,29,11,23,253,23,253,28,35,23,253,29,11,23,253,29,11,23,253,23,253,23,253,223,2,91,2,29,11,207,18,98,14,23,253,23,253,23,253,23,253,107,3,174,37,92,0,23,253,23,253,92,19,23,253,23,253,92,0,23,253,171,34,23,253,23,253,196,0,225,2,228,2,23,253,178,30,23,253,98,2,111,4,27,3,23,253,23,253,64,4,23,253,23,253,218,3,23,253,71,4,23,253,71,4,23,253,71,4,23,253,23,253,27,38,121,2,23,253,191,4,23,253,191,4,23,253,71,4,23,253,23,253,100,2,29,11,23,253,29,11,23,253,23,253,109,2,243,2,98,14,200,2,23,253,140,1,117,1,122,1,98,14,23,253,239,14,23,253,23,253,23,253,23,253,23,253,92,19,111,4,98,2,111,4,117,2,23,253,77,1,23,253,23,253,61,2,119,2,61,2,61,2,211,2,154,1,23,253,123,2,127,2,61,2,23,253,136,2,61,2,23,253,23,253,8,3,125,1,20,41,95,29,98,41,11,2,51,2,16,3,98,2,111,4,64,4,23,253,23,253,71,4,23,253,23,253,23,253,23,253,176,41,191,4,23,253,71,4,23,253,23,253,71,4,23,253,23,253,23,253,113,0,48,0,52,1,129,0,138,0,23,253,23,253,23,253,98,2,23,253,61,2,144,2,148,2,61,2,155,2,61,2,61,2,185,0,23,253,23,253,71,4,23,253,23,253,23,253,61,2,23,253,255,255,1,0,2,0,64,0,65,0,66,0,6,1,139,1,140,1,15,1,16,1,185,1,68,0,69,0,215,0,70,0,71,0,67,2,199,2,72,0,73,0,17,1,74,0,75,0,76,0,210,1,77,0,216,0,113,0,114,0,208,0,209,0,210,0,84,2,195,0,196,0,79,0,244,0,22,1,47,2,191,2,177,1,178,1,253,0,254,0,246,0,169,1,179,1,6,2,80,0,212,0,197,1,21,1,36,1,229,0,232,2,230,0,233,2,116,2,110,3,71,2,68,2,37,3,133,1,135,1,83,2,42,3,9,1,143,1,108,2,219,2,220,2,235,0,148,2,149,2,150,2,6,3,171,2,172,2,248,2,116,3,117,3,226,1,155,2,73,1,1,2,82,0,83,0,119,1,61,2,60,2,155,1,107,3,87,2,213,2,44,3,48,3,84,0,85,0,99,2,49,1,240,1,86,0,87,0,88,0,100,2,101,2,102,2,89,0,90,0,91,0,43,1,92,0,93,0,218,0,219,0,96,0,220,0,128,1,70,2,81,2,82,2,228,1,229,1,230,1,231,1,232,1,9,3,10,3,233,1,234,1,235,1,236,1,255,2,157,2,198,0,134,1,27,1,180,1,249,0,119,0,75,2,49,2,111,1,225,0,174,1,175,1,187,2,201,1,144,1,4,1,152,1,228,0,19,1,2,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,0,0,17,2,36,1,39,1,0,0,59,1,60,1,61,1,62,1,23,1,248,0,248,0,199,1,198,1,200,1,201,1,19,2,0,0,10,0,0,0,203,1,202,1,191,1,7,2,193,1,192,1,195,1,194,1,187,1,188,1,153,1,154,1,204,1,205,1,0,0,0,0,0,0,0,0,16,1,32,2,32,2,78,0,32,1,0,0,0,0,0,0,0,0,0,0,0,0,167,1,0,0,0,0,0,0,3,0,17,2,6,0,9,0,27,0,39,0,42,0,50,0,49,0,0,0,66,0,0,0,70,0,80,0,0,0,47,0,229,0,0,0,51,0,30,1,4,1,5,1,6,1,7,1,8,1,151,1,150,1,176,1,152,1,149,1,197,1,0,0,9,1,10,1,248,0,5,0,8,0,59,1,60,1,23,1,26,1,131,1,0,0,102,0,103,0,0,0,0,0,0,0,0,0,105,0,0,0,63,1,0,0,197,1,10,1,0,0,52,1,156,0,166,0,157,0,179,0,153,0,172,0,162,0,161,0,182,0,183,0,177,0,160,0,159,0,155,0,180,0,184,0,185,0,164,0,154,0,167,0,171,0,173,0,165,0,158,0,174,0,181,0,176,0,175,0,168,0,178,0,163,0,152,0,170,0,169,0,151,0,149,0,150,0,146,0,147,0,148,0,107,0,109,0,108,0,141,0,142,0,138,0,120,0,121,0,122,0,129,0,126,0,128,0,123,0,124,0,143,0,144,0,130,0,131,0,135,0,125,0,127,0,117,0,118,0,119,0,132,0,133,0,134,0,136,0,137,0,139,0,140,0,145,0,253,1,54,1,110,0,111,0,252,1,0,0,175,0,168,0,178,0,163,0,146,0,147,0,107,0,108,0,0,0,112,0,114,0,20,0,113,0,0,0,0,0,48,0,0,0,0,0,0,0,197,1,0,0,10,1,0,0,26,2,28,2,17,2,0,0,30,2,27,2,18,2,0,0,0,0,0,0,74,1,73,1,0,0,0,0,197,1,10,1,0,0,0,0,0,0,0,0,243,0,230,0,253,0,64,0,247,0,32,2,32,2,1,2,65,0,63,0,19,2,62,0,0,0,32,2,130,1,61,0,19,2,0,0,20,2,18,0,0,0,0,0,207,0,0,0,208,0,20,1,0,0,0,0,0,0,17,2,15,0,19,2,68,0,14,0,14,1,19,2,0,0,23,2,23,2,231,0,0,0,0,0,23,2,255,1,0,0,0,0,76,0,0,0,86,0,93,0,226,1,181,1,180,1,182,1,183,1,0,0,179,1,178,1,165,1,160,1,159,1,162,1,0,0,157,1,174,1,0,0,185,1,0,0,155,1,0,0,163,1,0,0,189,1,190,1,46,0,222,0,223,0,4,0,18,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,1,120,1,0,0,82,0,0,0,74,0,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,2,0,0,16,2,15,2,0,0,135,1,133,1,31,1,0,0,0,0,124,1,55,0,29,1,49,1,102,0,103,0,104,0,189,1,190,1,0,0,207,1,47,1,206,1,0,0,32,2,0,0,0,0,0,0,226,1,56,1,0,0,115,0,0,0,32,2,20,1,65,1,0,0,64,1,0,0,0,0,32,2,0,0,0,0,0,0,0,0,32,2,0,0,0,0,0,0,31,2,0,0,0,0,20,1,0,0,32,2,0,0,44,1,4,2,254,0,250,0,0,0,0,0,244,0,252,0,0,0,245,0,19,2,0,0,25,1,249,0,19,2,239,0,32,2,32,2,238,0,19,2,28,1,45,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,19,2,18,1,13,0,18,2,67,0,19,2,17,1,21,1,25,2,232,0,24,2,25,2,234,0,22,1,0,2,92,0,84,0,0,0,79,0,0,0,0,0,32,2,0,0,232,1,229,1,228,1,227,1,230,1,0,0,244,1,248,1,247,1,243,1,226,1,0,0,115,1,231,1,233,1,235,1,32,2,241,1,32,2,246,1,32,2,0,0,225,1,184,1,0,0,0,0,166,1,158,1,175,1,186,1,156,1,164,1,0,0,0,0,7,0,21,0,22,0,23,0,24,0,25,0,43,0,44,0,32,2,0,0,28,0,37,0,0,0,38,0,19,2,0,0,72,0,83,0,41,0,40,0,0,0,186,0,253,0,36,0,204,0,212,0,217,0,218,0,219,0,214,0,216,0,226,0,227,0,220,0,221,0,197,0,198,0,224,0,225,0,19,2,213,0,215,0,209,0,210,0,211,0,199,0,200,0,201,0,202,0,203,0,8,2,13,2,9,2,14,2,129,1,248,0,127,1,19,2,8,2,10,2,9,2,11,2,128,1,248,0,8,2,9,2,248,0,32,2,32,2,29,0,188,0,35,0,196,0,53,0,56,0,0,0,209,1,0,0,0,0,102,0,103,0,106,0,0,0,19,2,32,2,0,0,19,2,226,1,0,0,0,0,0,0,0,0,13,1,32,2,32,2,141,1,32,2,66,1,186,0,12,2,9,2,19,2,8,2,9,2,32,2,172,1,0,0,29,2,169,1,170,1,168,1,0,0,0,0,43,1,68,1,37,1,67,1,40,1,12,2,19,1,19,2,8,2,9,2,0,0,3,2,0,0,255,0,251,0,32,2,2,2,24,1,21,2,235,0,240,0,242,0,27,1,19,0,0,0,26,0,195,0,69,0,16,0,15,1,23,2,85,0,77,0,89,0,91,0,19,2,8,2,9,2,0,0,232,1,0,0,86,1,77,1,79,1,19,2,75,1,19,2,0,0,0,0,33,1,0,0,218,1,251,1,0,0,221,1,245,1,0,0,223,1,249,1,177,1,0,0,205,0,206,0,106,1,19,2,0,0,104,1,103,1,3,1,0,0,81,0,75,0,0,0,0,0,0,0,0,0,0,0,0,0,126,1,59,0,0,0,132,1,0,0,0,0,237,0,125,1,57,0,236,0,121,1,52,0,0,0,0,0,0,0,32,2,50,1,0,0,0,0,132,1,53,1,254,1,19,2,0,0,211,1,57,1,116,0,142,1,143,1,32,2,144,1,0,0,32,2,71,1,0,0,0,0,69,1,0,0,0,0,132,1,0,0,0,0,0,0,173,1,171,1,42,1,0,0,0,0,0,0,0,0,132,1,0,0,0,1,246,0,32,2,11,0,233,0,87,0,237,1,19,2,0,0,84,1,0,0,234,1,0,0,108,1,0,0,0,0,236,1,32,2,32,2,250,1,32,2,242,1,32,2,32,2,161,1,232,1,19,2,0,0,32,2,239,1,32,2,32,2,102,1,0,0,0,0,1,1,73,0,187,0,0,0,34,0,193,0,33,0,194,0,60,0,22,2,0,0,31,0,191,0,32,0,192,0,58,0,122,1,123,1,0,0,0,0,189,0,0,0,0,0,208,1,48,1,210,1,55,1,226,1,0,0,0,0,146,1,72,1,0,0,12,0,148,1,0,0,34,1,0,0,35,1,255,0,32,2,0,0,0,0,45,1,241,0,76,1,87,1,0,0,82,1,78,1,114,1,0,0,117,1,116,1,0,0,214,1,0,0,216,1,0,0,222,1,0,0,219,1,224,1,0,0,0,0,105,1,93,1,95,1,0,0,98,1,0,0,100,1,119,1,2,1,228,0,30,0,190,0,136,1,134,1,0,0,0,0,0,0,0,0,145,1,0,0,94,0,101,0,0,0,147,1,0,0,138,1,139,1,137,1,38,1,41,1,0,0,0,0,85,1,0,0,80,1,112,1,19,2,110,1,113,1,32,2,32,2,32,2,32,2,0,0,238,1,107,1,32,2,32,2,32,2,240,1,32,2,32,2,54,0,51,1,0,0,100,0,0,0,32,2,0,0,32,2,32,2,0,0,83,1,0,0,0,0,109,1,215,1,0,0,212,1,217,1,220,1,20,1,0,0,0,0,90,1,0,0,92,1,99,1,0,0,96,1,101,1,58,1,12,2,99,0,19,2,8,2,9,2,140,1,70,1,46,1,81,1,111,1,32,2,12,2,19,1,32,2,32,2,32,2,32,2,132,1,213,1,91,1,0,0,88,1,94,1,97,1,32,2,89,1,2,0,83,0,27,0,62,0,221,0,248,0,12,0,10,0,11,0,12,0,8,0,16,0,17,0,76,0,7,0,20,0,28,0,79,1,153,1,5,0,6,0,168,1,16,0,17,0,171,1,52,0,20,0,22,0,36,1,15,0,28,0,110,0,36,1,11,0,12,0,2,1,4,0,16,0,17,0,133,1,107,1,20,0,106,1,211,1,108,1,171,1,49,0,111,1,50,0,51,0,17,1,31,1,79,1,159,2,21,1,158,1,50,0,51,0,12,0,65,0,25,0,54,0,87,2,2,0,131,1,4,0,52,0,76,2,132,1,24,1,25,0,50,0,97,2,28,1,65,0,65,0,48,0,203,1,27,0,170,2,147,1,41,1,146,1,244,2,148,1,94,2,246,2,29,0,48,1,26,0,76,0,51,1,13,0,53,1,161,1,55,1,8,2,57,1,162,1,22,0,66,3,156,2,26,0,98,0,113,2,13,0,109,0,83,3,114,0,0,0,105,0,65,0,88,0,25,0,106,1,185,2,108,1,16,0,17,0,111,1,25,0,20,0,192,2,13,1,119,0,189,1,13,0,37,0,38,0,60,2,61,2,135,1,141,2,146,0,79,0,25,0,88,0,150,0,130,1,90,0,132,1,140,0,13,0,113,0,88,0,25,0,213,1,88,0,113,0,55,0,214,1,13,0,28,0,25,0,146,1,51,0,148,1,62,3,113,0,55,0,114,0,1,0,113,0,144,0,25,0,90,0,108,0,143,0,160,1,150,0,162,1,6,3,25,0,118,0,144,0,98,0,90,0,153,3,144,3,144,0,113,0,90,0,147,0,58,0,59,0,150,0,76,1,144,0,113,0,144,0,142,0,143,0,147,0,180,1,146,0,150,0,188,1,189,1,13,0,143,0,149,0,150,0,143,0,140,0,113,0,55,0,173,1,111,3,113,3,146,0,177,1,15,0,113,0,17,0,207,0,182,1,140,0,225,1,224,0,69,3,212,1,225,1,214,1,144,0,31,1,192,1,229,0,230,0,149,0,150,0,197,1,211,1,144,0,71,2,224,0,126,2,127,2,144,0,143,3,144,0,150,0,149,0,150,0,81,2,25,0,247,0,248,0,252,0,146,0,254,0,255,0,229,0,230,0,255,0,144,0,2,1,3,1,127,2,252,0,146,0,254,0,215,0,149,0,150,0,144,0,15,1,178,2,221,0,199,2,146,0,224,0,74,1,144,0,252,0,73,3,254,0,79,1,117,0,149,0,150,0,15,1,15,1,81,3,144,0,8,2,146,0,55,3,149,0,150,0,144,0,2,0,144,0,4,0,5,0,6,0,150,0,7,2,13,1,10,0,11,0,12,0,31,1,88,0,15,0,16,0,17,0,77,1,130,1,20,0,149,0,150,0,220,1,115,1,116,1,146,0,86,2,88,0,15,1,65,1,66,1,67,1,68,1,88,0,70,1,71,1,23,1,24,1,90,0,80,2,12,1,28,1,113,0,80,2,48,0,149,0,150,0,48,0,49,0,149,0,150,0,52,0,58,0,59,0,65,1,66,1,67,1,68,1,77,1,88,0,17,0,62,0,74,1,64,1,252,0,26,0,254,0,79,1,143,0,107,1,88,0,76,1,107,1,88,0,144,0,76,0,146,0,88,0,55,0,79,2,108,1,142,0,143,0,88,0,179,2,26,0,61,0,126,1,143,0,64,0,65,0,88,0,64,1,131,1,88,0,149,0,131,1,69,1,134,1,235,2,25,0,121,2,91,0,88,0,132,1,140,1,99,2,111,0,109,0,147,1,111,0,105,2,147,1,209,1,143,0,211,1,144,0,152,1,157,1,158,1,148,1,144,0,164,3,161,1,142,0,143,0,161,1,88,0,143,0,88,0,140,0,142,0,143,0,170,2,162,1,59,3,111,0,142,0,143,0,126,1,185,1,168,1,154,1,55,3,179,1,180,1,143,0,88,0,136,2,143,0,150,2,186,1,71,0,88,0,185,1,26,0,59,3,142,0,143,0,147,0,61,0,189,1,113,0,64,0,65,0,178,2,37,3,71,0,8,2,150,0,157,1,158,1,88,0,200,1,148,0,213,1,141,0,88,0,213,1,140,0,88,0,142,0,143,0,142,0,143,0,146,0,214,1,55,0,144,0,144,0,209,1,71,0,211,1,90,0,150,0,88,0,231,1,71,0,233,1,140,0,235,1,142,0,143,0,97,0,146,2,147,2,206,2,142,0,143,0,88,0,111,0,212,0,144,0,90,0,186,1,63,0,113,0,88,0,238,2,123,0,124,0,125,0,1,2,195,1,10,0,96,3,142,0,143,0,229,0,230,0,32,2,142,0,143,0,90,0,142,0,143,0,113,0,90,0,156,2,37,0,38,0,159,2,8,0,243,2,13,0,8,2,10,0,144,0,50,2,142,0,143,0,252,0,170,2,254,0,255,0,90,0,113,0,2,1,3,1,7,1,113,0,42,3,7,1,142,0,143,0,13,1,147,0,12,1,13,1,140,0,113,0,142,0,143,0,90,0,76,2,146,0,48,2,56,2,113,0,144,0,59,2,60,2,61,2,144,0,56,2,68,2,31,1,59,2,14,0,15,0,70,2,144,0,94,2,137,3,141,0,84,2,113,0,138,3,77,2,82,2,144,0,51,0,244,2,75,2,246,2,77,2,44,3,86,2,87,2,84,2,89,2,113,2,50,3,83,2,144,0,70,2,26,0,144,0,97,2,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,144,0,76,1,74,1,86,2,76,1,77,1,144,0,79,1,194,2,116,2,68,2,178,2,141,2,71,0,63,0,121,2,179,2,51,0,144,0,182,2,183,2,48,2,144,0,152,2,82,2,188,2,189,2,144,0,126,2,56,2,113,0,10,0,59,2,15,0,116,2,107,1,10,0,141,0,144,0,141,0,136,3,170,2,138,3,115,1,116,1,144,0,115,0,105,2,148,0,62,3,63,3,88,0,10,0,10,0,90,0,9,0,152,3,10,0,90,0,131,1,91,0,133,1,134,1,121,0,122,0,123,0,124,0,125,0,143,1,10,0,144,0,143,1,90,0,144,0,147,0,147,1,151,1,113,0,136,2,151,1,69,3,113,0,51,0,149,0,53,0,54,0,55,0,56,0,178,2,161,1,141,0,201,2,81,3,199,2,83,3,113,0,10,0,144,0,111,3,144,0,113,3,144,0,144,0,140,0,113,0,142,0,143,0,213,2,144,0,146,0,216,2,218,2,144,0,118,0,186,1,144,0,51,0,62,0,25,3,64,0,65,0,144,0,144,0,195,1,10,0,235,2,144,0,144,0,141,0,10,0,143,3,10,0,238,2,6,3,10,0,118,0,218,2,209,1,144,0,211,1,144,0,213,1,62,0,201,2,64,0,65,0,141,0,253,2,254,2,10,0,0,3,55,0,2,3,3,3,63,0,64,0,65,0,144,0,8,3,144,0,10,3,11,3,55,0,144,0,153,3,240,1,111,0,144,0,240,1,51,0,10,0,53,0,54,0,55,0,56,0,144,0,144,0,235,2,10,0,2,0,51,0,4,0,53,0,54,0,55,0,56,0,146,0,10,0,11,0,12,0,146,0,111,0,8,2,16,0,17,0,144,0,15,0,20,0,63,0,64,0,65,0,186,1,111,0,159,2,6,0,55,3,162,2,71,0,59,2,43,3,92,0,140,3,146,2,144,3,170,2,139,3,98,0,99,0,63,0,64,0,65,0,92,0,86,0,87,0,195,2,48,0,49,0,98,0,99,0,101,2,51,0,7,0,53,0,54,0,55,0,56,0,42,3,81,3,120,0,62,0,156,2,123,0,44,3,116,3,78,3,255,255,111,0,198,0,50,3,120,0,64,0,65,0,123,0,255,255,70,2,71,2,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,81,2,111,0,71,0,150,0,119,3,120,3,121,3,122,3,255,255,255,255,146,0,126,3,127,3,128,3,255,255,130,3,131,3,86,0,87,0,137,3,255,255,109,0,137,3,111,0,139,3,140,3,164,3,71,0,255,255,255,255,138,3,110,0,111,0,255,255,255,255,116,2,64,0,65,0,238,0,239,0,240,0,255,255,86,0,87,0,255,255,51,0,255,255,53,0,54,0,55,0,56,0,255,255,121,0,122,0,123,0,124,0,125,0,172,3,144,0,255,255,175,3,176,3,177,3,178,3,40,0,41,0,42,0,43,0,44,0,153,2,154,2,186,3,153,2,154,2,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,110,0,111,0,255,255,255,255,92,0,171,2,255,255,255,255,171,2,255,255,98,0,99,0,255,255,255,255,255,255,178,2,179,2,255,255,255,255,182,2,183,2,255,255,69,3,255,255,71,3,188,2,189,2,255,255,75,3,255,255,196,2,197,2,120,0,196,2,197,2,123,0,83,3,255,255,85,3,63,0,64,0,65,0,212,0,63,0,64,0,65,0,255,255,255,255,74,1,215,2,255,255,255,255,215,2,79,1,255,255,218,2,255,255,255,255,146,0,229,0,230,0,63,0,64,0,65,0,255,255,231,2,232,2,233,2,231,2,232,2,233,2,63,0,64,0,65,0,51,0,255,255,53,0,54,0,55,0,56,0,255,255,255,255,252,0,255,255,254,0,255,0,255,255,111,0,2,1,3,1,255,255,111,0,51,0,7,1,53,0,54,0,55,0,56,0,12,1,13,1,147,3,55,0,56,0,57,0,58,0,59,0,153,3,255,255,155,3,111,0,255,255,158,3,255,255,255,255,255,255,92,0,255,255,255,255,25,3,111,0,255,255,98,0,99,0,255,255,255,255,255,255,36,3,255,255,154,1,36,3,37,3,255,255,255,255,92,0,255,255,182,3,43,3,47,3,255,255,98,0,47,3,167,1,168,1,120,0,255,255,171,1,123,0,255,255,255,255,255,255,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,255,255,255,255,74,1,255,255,76,1,255,255,51,0,79,1,53,0,54,0,55,0,56,0,255,255,78,3,255,255,255,255,200,1,255,255,51,0,203,1,53,0,54,0,55,0,56,0,255,255,51,0,255,255,53,0,54,0,55,0,56,0,96,3,255,255,255,255,102,3,107,1,104,3,102,3,255,255,104,3,255,255,255,255,110,3,115,1,116,1,110,3,255,255,92,0,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,131,1,255,255,133,1,134,1,255,255,255,255,51,0,92,0,53,0,54,0,55,0,56,0,143,1,137,3,99,0,2,2,147,1,255,255,255,255,0,0,151,1,255,255,255,255,255,255,255,255,255,255,255,255,8,0,9,0,10,0,161,1,255,255,13,0,14,0,15,0,120,0,17,0,255,255,44,0,255,255,255,255,255,255,255,255,255,255,255,255,26,0,27,0,92,0,255,255,16,0,17,0,255,255,255,255,20,0,255,255,186,1,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,195,1,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,45,0,46,0,86,0,87,0,213,1,50,0,51,0,255,255,51,0,255,255,53,0,54,0,55,0,56,0,255,255,255,255,255,255,62,0,63,0,255,255,255,255,86,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,88,0,114,0,240,1,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,92,0,255,255,255,255,255,255,118,2,255,255,98,0,99,0,255,255,255,255,255,255,144,0,126,2,127,2,2,0,255,255,4,0,5,0,6,0,7,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,15,0,120,0,255,255,144,2,123,0,140,0,141,0,255,255,143,0,255,255,255,255,146,0,147,0,255,255,149,0,150,0,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,48,0,175,2,86,0,87,0,52,0,255,255,255,255,255,255,70,2,71,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,81,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,76,0,255,255,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,2,255,255,230,2,255,255,255,255,255,255,255,255,255,255,255,255,111,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,238,0,239,0,240,0,241,0,255,255,255,255,255,255,153,2,154,2,255,255,255,255,255,255,14,3,255,255,252,0,255,255,254,0,255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,171,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,179,2,255,255,255,255,182,2,183,2,255,255,255,255,255,255,255,255,188,2,189,2,255,255,255,255,255,255,255,255,255,255,255,255,196,2,197,2,255,255,255,255,255,255,255,255,255,255,59,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,215,2,255,255,255,255,218,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,212,0,255,255,255,255,255,255,255,255,231,2,232,2,233,2,255,255,255,255,255,255,255,255,74,1,255,255,255,255,255,255,255,255,79,1,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,93,1,94,1,95,1,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,255,255,107,1,255,255,255,255,255,255,255,255,255,255,7,1,255,255,115,1,116,1,25,3,12,1,13,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,36,3,37,3,255,255,131,1,255,255,255,255,255,255,255,255,255,255,31,1,255,255,47,3,255,255,255,255,255,255,255,255,255,255,145,1,255,255,147,1,255,255,149,1,150,1,255,255,255,255,255,255,154,1,255,255,255,255,255,255,255,255,255,255,255,255,161,1,255,255,255,255,255,255,255,255,255,255,167,1,168,1,255,255,64,1,171,1,255,255,255,255,255,255,69,1,255,255,255,255,255,255,255,255,255,255,255,255,76,1,77,1,255,255,255,255,255,255,255,255,96,3,255,255,190,1,255,255,255,255,255,255,102,3,255,255,104,3,255,255,255,255,255,255,200,1,255,255,110,3,203,1,2,0,255,255,4,0,255,255,255,255,255,255,255,255,255,255,255,255,213,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,2,0,255,255,4,0,5,0,6,0,137,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,133,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,247,1,248,1,143,1,48,0,2,0,255,255,4,0,255,255,255,255,255,255,151,1,2,2,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,255,255,48,0,255,255,255,255,255,255,52,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,186,1,255,255,255,255,255,255,255,255,48,0,76,0,255,255,255,255,195,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,111,0,255,255,209,1,255,255,211,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,233,1,255,255,235,1,255,255,255,255,255,255,255,255,111,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,86,2,255,255,255,255,255,255,240,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,111,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,8,2,255,255,255,255,255,255,118,2,71,0,72,0,73,0,74,0,75,0,76,0,77,0,126,2,127,2,80,0,81,0,255,255,255,255,255,255,255,255,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,144,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,212,0,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,175,2,255,255,71,2,212,0,179,2,180,2,255,255,182,2,183,2,255,255,255,255,255,255,81,2,188,2,189,2,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,198,2,255,255,80,0,81,0,255,255,255,255,255,255,212,0,86,0,87,0,255,255,7,1,255,255,255,255,255,255,255,255,12,1,13,1,255,255,255,255,255,255,255,255,255,255,221,2,222,2,255,255,224,2,225,2,255,255,255,255,255,255,7,1,230,2,255,255,255,255,255,255,12,1,13,1,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,1,255,255,255,255,7,1,255,255,255,255,153,2,154,2,12,1,13,1,255,255,255,255])
.concat([255,255,64,1,255,255,255,255,255,255,14,3,69,1,255,255,255,255,18,3,255,255,255,255,171,2,76,1,255,255,255,255,25,3,255,255,255,255,178,2,255,255,64,1,255,255,255,255,255,255,255,255,69,1,255,255,255,255,255,255,255,255,255,255,255,255,76,1,77,1,255,255,255,255,196,2,197,2,255,255,255,255,255,255,255,255,52,3,255,255,255,255,255,255,255,255,64,1,255,255,59,3,255,255,255,255,69,1,255,255,255,255,215,2,255,255,255,255,255,255,76,1,255,255,255,255,79,1,255,255,255,255,255,255,255,255,255,255,255,255,133,1,255,255,231,2,232,2,233,2,255,255,255,255,255,255,255,255,255,255,143,1,253,2,254,2,255,255,0,3,255,255,2,3,3,3,151,1,255,255,133,1,255,255,8,3,255,255,10,3,11,3,255,255,255,255,255,255,255,255,143,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,151,1,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,133,1,80,0,81,0,255,255,255,255,255,255,186,1,86,0,87,0,255,255,143,1,137,3,255,255,255,255,255,255,195,1,36,3,37,3,151,1,255,255,255,255,255,255,255,255,43,3,255,255,255,255,186,1,47,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,195,1,44,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,209,1,255,255,211,1,255,255,186,1,255,255,255,255,255,255,255,255,78,3,255,255,240,1,255,255,195,1,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,96,3,255,255,86,0,87,0,240,1,255,255,102,3,255,255,104,3,255,255,119,3,120,3,121,3,122,3,110,3,255,255,255,255,126,3,127,3,128,3,255,255,130,3,131,3,255,255,255,255,255,255,255,255,255,255,8,2,255,255,114,0,240,1,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,172,3,255,255,255,255,175,3,176,3,177,3,178,3,255,255,71,2,255,255,255,255,51,0,52,0,255,255,186,3,55,0,255,255,255,255,81,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,2,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,81,2,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,2,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,81,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,153,2,154,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,255,255,171,2,255,255,153,2,154,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,171,2,255,255,255,255,255,255,255,255,196,2,197,2,178,2,255,255,153,2,154,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,215,2,196,2,197,2,171,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,179,2,255,255,255,255,255,255,255,255,231,2,232,2,233,2,255,255,215,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,196,2,197,2,255,255,255,255,255,255,255,255,255,255,255,255,231,2,232,2,233,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,215,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,231,2,232,2,233,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,36,3,37,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,47,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,36,3,37,3,255,255,255,255,255,255,255,255,255,255,43,3,255,255,255,255,255,255,47,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,36,3,37,3,255,255,255,255,255,255,255,255,255,255,43,3,255,255,255,255,255,255,47,3,255,255,96,3,255,255,78,3,255,255,255,255,255,255,102,3,255,255,104,3,255,255,255,255,255,255,255,255,255,255,110,3,255,255,255,255,255,255,255,255,255,255,96,3,255,255,255,255,255,255,255,255,255,255,102,3,255,255,104,3,255,255,255,255,255,255,255,255,255,255,110,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,3,255,255,255,255,255,255,255,255,255,255,102,3,255,255,104,3,255,255,255,255,255,255,0,0,1,0,110,3,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,255,255,126,0,127,0,128,0,255,255,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,149,0,150,0,27,0,28,0,29,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,90,0,91,0,255,255,255,255,255,255,255,255,114,0,97,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,108,0,255,255,255,255,255,255,255,255,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,150,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,142,0,143,0,144,0,0,0,255,255,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,26,0,27,0,28,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,114,0,97,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,140,0,141,0,142,0,143,0,144,0,0,0,146,0,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,27,0,28,0,29,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,255,255,97,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,108,0,255,255,255,255,255,255,255,255,255,255,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,142,0,143,0,144,0,0,0,255,255,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,26,0,27,0,28,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,255,255,97,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,140,0,141,0,142,0,143,0,144,0,0,0,146,0,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,27,0,28,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,255,255,97,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,142,0,143,0,144,0,0,0,146,0,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,255,255,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,26,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,0,0,90,0,255,255,255,255,255,255,255,255,255,255,255,255,8,0,9,0,10,0,255,255,255,255,255,255,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,113,0,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,140,0,141,0,142,0,143,0,144,0,255,255,255,255,147,0,255,255,149,0,150,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,90,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,113,0,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,142,0,143,0,144,0,255,255,255,255,147,0,255,255,149,0,150,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,255,255,15,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,149,0,150,0,10,0,11,0,12,0,255,255,14,0,15,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,10,0,11,0,12,0,149,0,150,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,10,0,11,0,12,0,149,0,150,0,15,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,149,0,150,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,149,0,150,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,9,0,10,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,149,0,150,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,147,0,255,255,149,0,150,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,147,0,255,255,149,0,150,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,149,0,150,0,10,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,149,0,150,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,150,0,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,149,0,150,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,150,0,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,149,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,149,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,145,0,146,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,140,0,255,255,11,0,12,0,255,255,255,255,146,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,140,0,255,255,11,0,12,0,255,255,255,255,146,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,90,0,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,113,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,126,0,127,0,128,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,146,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,126,0,127,0,128,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,146,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,146,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,255,255,63,0,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,105,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,255,255,63,0,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,105,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,101,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,145,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0])
.concat([49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,126,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,144,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,126,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,144,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,86,0,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,8,92,1,0,200,91,1,0,128,91,1,0,240,90,1,0,160,90,1,0,68,90,1,0,224,89,1,0,148,106,1,0,208,105,1,0,48,105,1,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0,0,0,0,40,178,1,0,0,0,0,0,0,0,0,0,0,0,0,0,40,178,1,0,0,0,0,0,0,0,0,0,0,0,0,0,40,178,1,0,0,0,0,0,0,0,0,0,0,0,0,0,40,178,1,0,0,0,0,0,0,0,0,0,0,0,0,0,40,178,1,0,0,0,0,0,0,0,0,0,0,0,0,0,40,178,1,0,0,0,0,0,0,0,0,0,0,0,0,0,40,178,1,0,0,0,0,0,0,0,0,0,0,0,0,0,40,178,1,0,0,0,0,0,0,0,0,0,0,0,0,0,68,138,1,0,20,1,0,0,20,1,0,0,6,0,0,0,40,138,1,0,14,1,0,0,14,1,0,0,0,0,0,0,36,138,1,0,33,1,0,0,33,1,0,0,1,0,0,0,152,137,1,0,8,1,0,0,8,1,0,0,0,0,0,0,148,137,1,0,9,1,0,0,9,1,0,0,1,0,0,0,140,137,1,0,12,1,0,0,12,1,0,0,0,0,0,0,136,137,1,0,38,1,0,0,38,1,0,0,4,0,0,0,116,137,1,0,35,1,0,0,35,1,0,0,1,0,0,0,76,137,1,0,32,1,0,0,32,1,0,0,1,0,0,0,68,137,1,0,13,1,0,0,13,1,0,0,10,0,0,0,44,137,1,0,7,1,0,0,43,1,0,0,6,0,0,0,12,137,1,0,34,1,0,0,34,1,0,0,1,0,0,0,252,136,1,0,18,1,0,0,42,1,0,0,10,0,0,0,40,136,1,0,11,1,0,0,40,1,0,0,10,0,0,0,28,136,1,0,29,1,0,0,29,1,0,0,6,0,0,0,16,136,1,0,4,1,0,0,4,1,0,0,7,0,0,0,220,135,1,0,36,1,0,0,36,1,0,0,10,0,0,0,180,135,1,0,25,1,0,0,25,1,0,0,0,0,0,0,100,135,1,0,30,1,0,0,30,1,0,0,4,0,0,0,68,135,1,0,19,1,0,0,19,1,0,0,10,0,0,0,36,135,1,0,5,1,0,0,5,1,0,0,7,0,0,0,16,135,1,0,37,1,0,0,37,1,0,0,10,0,0,0,12,135,1,0,24,1,0,0,24,1,0,0,10,0,0,0,128,134,1,0,16,1,0,0,16,1,0,0,10,0,0,0,112,134,1,0,23,1,0,0,23,1,0,0,1,0,0,0,108,134,1,0,10,1,0,0,39,1,0,0,10,0,0,0,100,134,1,0,15,1,0,0,15,1,0,0,10,0,0,0,88,134,1,0,22,1,0,0,22,1,0,0,1,0,0,0,76,134,1,0,21,1,0,0,21,1,0,0,6,0,0,0,68,134,1,0,31,1,0,0,31,1,0,0,4,0,0,0,32,134,1,0,3,1,0,0,3,1,0,0,10,0,0,0,8,134,1,0,6,1,0,0,6,1,0,0,0,0,0,0,252,133,1,0,47,1,0,0,47,1,0,0,1,0,0,0,128,133,1,0,48,1,0,0,48,1,0,0,1,0,0,0,100,133,1,0,49,1,0,0,49,1,0,0,1,0,0,0,96,133,1,0,46,1,0,0,46,1,0,0,1,0,0,0,88,133,1,0,44,1,0,0,44,1,0,0,7,0,0,0,76,133,1,0,45,1,0,0,45,1,0,0,1,0,0,0,40,178,1,0,0,0,0,0,0,0,0,0,0,0,0,0,48,133,1,0,2,1,0,0,2,1,0,0,9,0,0,0,40,178,1,0,0,0,0,0,0,0,0,0,0,0,0,0,40,178,1,0,0,0,0,0,0,0,0,0,0,0,0,0,40,133,1,0,17,1,0,0,41,1,0,0,10,0,0,0,80,1,0,0,82,1,0,0,76,1,0,0,78,1,0,0,72,1,0,0,74,1,0,0,68,1,0,0,70,1,0,0,64,1,0,0,66,1,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,89,64,0,0,0,0,0,136,195,64,0,0,0,0,132,215,151,65,0,128,224,55,121,195,65,67,23,110,5,181,181,184,147,70,245,249,63,233,3,79,56,77,50,29,48,249,72,119,130,90,60,191,115,127,221,79,21,117,31,0,0,0,28,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,29,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,113,2,0,0,120,157,1,0,52,2,0,0,82,73,84,69,48,48,48,49,107,173,0,0,57,174,77,65,84,90,48,48,48,48,73,82,69,80,0,0,57,144,48,48,48,48,0,143,0,0,0,0,3,47,0,1,0,3,0,0,0,123,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,128,0,5,0,128,64,68,0,128,4,69,0,128,0,5,0,128,128,68,0,128,4,197,0,128,0,5,1,0,0,5,0,128,0,67,0,128,5,69,0,128,0,5,1,0,0,5,0,128,192,67,0,128,6,69,0,128,0,5,0,128,128,68,0,128,10,197,0,128,0,5,0,128,64,68,0,128,14,69,0,128,0,5,1,0,0,5,0,129,0,67,0,128,32,69,0,128,0,5,1,0,2,145,0,129,128,67,0,128,33,69,0,128,0,5,1,0,2,145,0,129,192,67,0,128,33,197,0,128,0,5,1,0,2,145,0,130,0,67,0,128,34,69,0,128,0,5,1,0,4,17,0,130,64,67,0,128,34,197,0,128,0,5,1,0,2,145,0,130,128,67,0,128,35,69,0,128,0,5,1,0,2,145,0,130,192,67,0,128,35,197,0,128,0,5,1,0,2,145,0,131,0,67,0,128,36,69,0,128,0,5,1,0,6,17,0,131,64,67,0,128,37,197,0,128,0,5,1,0,2,145,0,131,128,67,0,128,38,69,0,128,0,5,1,0,7,17,0,131,192,67,0,128,38,197,0,128,0,5,1,0,8,17,0,132,64,67,0,128,39,69,0,128,0,5,1,0,0,5,0,132,128,67,0,128,39,197,0,128,0,5,0,128,64,68,0,128,51,69,0,128,0,5,1,0,0,5,0,132,128,67,0,128,51,197,0,128,0,5,0,132,192,68,0,128,52,69,0,128,0,5,1,0,0,5,0,133,0,67,0,128,55,197,0,128,0,5,0,128,128,68,0,128,60,69,0,128,0,5,1,0,0,5,0,133,64,67,0,128,60,197,0,128,0,5,0,132,192,68,0,128,61,69,0,128,0,5,1,0,0,5,0,133,128,67,0,128,63,197,0,128,0,5,0,128,64,68,0,128,64,197,0,128,0,5,1,0,0,5,0,133,128,67,0,128,65,69,0,128,0,5,1,0,0,5,0,133,192,67,0,128,65,197,0,128,0,5,0,128,128,68,0,128,70,197,0,128,0,5,1,0,0,5,0,133,192,67,0,128,71,69,0,0,0,74,0,0,0,0,0,0,0,24,0,5,65,114,114,97,121,0,0,10,69,110,117,109,101,114,97,98,108,101,0,0,10,67,111,109,112,97,114,97,98,108,101,0,0,6,77,111,100,117,108,101,0,0,9,69,120,99,101,112,116,105,111,110,0,0,13,83,116,97,110,100,97,114,100,69,114,114,111,114,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,14,76,111,99,97,108,74,117,109,112,69,114,114,111,114,0,0,10,82,97,110,103,101,69,114,114,111,114,0,0,16,70,108,111,97,116,68,111,109,97,105,110,69,114,114,111,114,0,0,11,82,101,103,101,120,112,69,114,114,111,114,0,0,9,84,121,112,101,69,114,114,111,114,0,0,9,78,97,109,101,69,114,114,111,114,0,0,13,78,111,77,101,116,104,111,100,69,114,114,111,114,0,0,10,73,110,100,101,120,69,114,114,111,114,0,0,8,75,101,121,69,114,114,111,114,0,0,11,83,99,114,105,112,116,69,114,114,111,114,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,4,72,97,115,104,0,0,6,75,101,114,110,101,108,0,0,7,73,110,116,101,103,101,114,0,0,7,78,117,109,101,114,105,99,0,0,5,82,97,110,103,101,0,0,6,83,116,114,105,110,103,0,0,0,0,183,0,1,0,4,0,0,0,22,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,1,132,1,128,1,4,2,0,0,5,0,129,1,32,0,128,0,72,1,0,10,192,0,129,64,70,0,128,0,72,1,0,12,192,0,129,128,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,7,0,4,101,97,99,104,0,0,10,101,97,99,104,95,105,110,100,101,120,0,0,8,99,111,108,108,101,99,116,33,0,0,4,109,97,112,33,0,0,12,97,108,105,97,115,95,109,101,116,104,111,100,0,0,10,105,110,105,116,105,97,108,105,122,101,0,0,6,100,101,108,101,116,101,0,0,0,0,252,0,5,0,8,0,0,0,46,0,0,0,166,2,191,255,3,3,0,0,6,3,0,0,32,3,0,64,175,1,1,64,1,1,129,128,1,0,64,11,23,2,128,0,6,3,0,128,1,3,0,192,173,1,1,128,1,2,128,128,160,2,1,64,1,2,129,0,1,2,192,0,153,0,64,5,23,2,129,0,1,3,0,0,5,2,129,0,178,2,192,2,25,2,128,192,1,3,0,0,6,3,0,0,32,2,129,64,182,2,192,0,153,0,64,8,151,2,128,64,1,3,1,0,1,2,129,128,160,2,128,128,1,3,0,192,1,2,129,192,179,2,192,2,25,2,128,192,1,3,0,0,6,3,0,0,32,2,130,0,180,2,192,2,25,2,128,0,6,2,128,0,32,2,128,64,175,1,129,64,1,2,191,238,24,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,9,0,6,108,101,110,103,116,104,0,0,1,45,0,0,2,91,93,0,0,1,43,0,0,2,61,61,0,0,2,62,61,0,0,4,99,97,108,108,0,0,1,60,0,0,2,60,61,0,0,0,0,108,0,3,0,5,0,0,0,16,0,0,0,166,1,63,255,131,0,64,3,23,1,128,64,1,2,0,128,1,1,128,0,160,1,128,128,1,1,128,64,173,1,0,192,1,1,128,128,1,2,0,0,6,2,0,192,32,1,128,128,179,1,191,250,152,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,4,0,4,99,97,108,108,0,0,1,43,0,0,1,60,0,0,6,108,101,110,103,116,104,0,0,0,0,57,0,2,0,4,0,0,0,6,0,0,0,166,1,0,0,6,1,128,3,64,1,0,0,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,1,0,10,101,97,99,104,95,105,110,100,101,120,0,0,0,0,82,0,3,0,7,0,0,0,11,2,0,0,38,1,128,64,21,2,0,0,6,2,128,64,1,2,0,64,160,1,128,0,160,2,0,0,6,2,128,64,1,3,0,192,1,2,0,129,32,1,128,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,2,91,93,0,0,3,91,93,61,0,0,0,1,144,0,5,0,9,0,0,0,57,0,32,0,166,0])
.concat([64,1,23,0,64,1,23,0,64,1,23,0,191,255,131,1,0,0,5,2,128,64,1,3,0,0,145,2,128,0,160,2,192,0,153,0,64,2,23,2,128,0,6,3,0,1,145,3,128,0,61,2,128,129,32,2,128,64,1,3,63,255,131,2,129,0,179,2,192,2,25,2,128,0,6,3,0,2,145,3,128,0,189,2,128,129,32,2,128,0,6,2,129,128,32,2,128,64,1,3,63,255,131,2,129,192,181,2,192,13,25,2,128,0,5,3,0,0,6,3,128,64,1,3,130,64,175,4,1,64,1,3,2,1,32,2,63,255,131,0,64,7,23,2,128,192,1,2,192,2,25,2,128,192,1,3,1,0,1,2,130,128,160,0,64,0,151,2,128,128,1,3,0,0,6,3,129,0,1,4,1,64,1,3,2,1,32,2,129,0,1,2,130,192,173,2,1,64,1,2,129,0,1,3,0,64,1,2,129,0,179,2,191,247,24,0,0,0,6,0,0,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,19,110,101,103,97,116,105,118,101,32,97,114,114,97,121,32,115,105,122,101,0,0,0,12,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,1,60,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,5,99,108,101,97,114,0,0,1,62,0,0,3,91,93,61,0,0,1,45,0,0,4,99,97,108,108,0,0,1,43,0,0,0,0,140,0,5,0,7,0,0,0,22,2,0,0,166,0,64,2,23,2,128,0,6,3,0,192,1,2,128,0,160,2,0,64,1,2,128,0,6,3,0,64,1,2,128,64,160,1,129,64,1,2,191,251,152,2,129,0,1,3,0,0,5,2,128,128,178,2,192,0,153,2,128,128,1,2,192,1,153,2,128,128,1,2,128,192,32,0,64,0,151,2,129,0,1,2,128,0,41,0,0,0,0,0,0,0,4,0,9,100,101,108,101,116,101,95,97,116,0,0,5,105,110,100,101,120,0,0,2,61,61,0,0,4,99,97,108,108,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,108,0,1,0,3,0,0,0,11,0,128,0,6,1,0,0,145,0,128,0,160,0,128,0,6,1,0,1,17,0,128,0,160,0,128,0,72,1,0,2,192,0,128,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,4,0,7,105,110,99,108,117,100,101,0,0,10,69,110,117,109,101,114,97,98,108,101,0,0,10,67,111,109,112,97,114,97,98,108,101,0,0,5,115,111,114,116,33,0,0,0,0,65,0,2,0,5,0,0,0,7,0,0,0,166,1,0,0,6,1,128,0,6,2,0,64,1,1,128,64,33,1,0,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,114,101,112,108,97,99,101,0,0,4,115,111,114,116,0,0,0,0,127,0,1,0,2,0,0,0,14,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,8,192,0,128,64,70,0,128,0,72,1,0,14,192,0,128,128,70,0,128,0,72,1,0,16,192,0,128,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,4,0,11,97,116,116,114,95,114,101,97,100,101,114,0,0,11,97,116,116,114,95,119,114,105,116,101,114,0,0,13,97,116,116,114,95,97,99,99,101,115,115,111,114,0,0,4,97,116,116,114,0,0,0,0,47,0,3,0,5,0,0,0,5,0,8,0,38,1,128,64,1,2,0,3,64,1,128,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,108,0,4,0,7,0,0,0,12,2,0,0,38,2,0,0,61,2,128,64,1,2,128,64,32,2,0,0,172,2,0,128,32,1,129,0,1,2,0,0,6,2,128,64,1,3,0,3,64,2,0,192,161,2,0,0,41,0,0,0,1,16,0,1,64,0,0,0,4,0,1,43,0,0,4,116,111,95,115,0,0,6,105,110,116,101,114,110,0,0,13,100,101,102,105,110,101,95,109,101,116,104,111,100,0,0,0,0,60,0,1,0,3,0,0,0,4,0,128,0,6,1,0,192,21,0,128,0,160,0,128,0,41,0,0,0,0,0,0,0,1,0,21,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,103,101,116,0,0,0,0,47,0,3,0,5,0,0,0,5,0,8,0,38,1,128,64,1,2,0,3,64,1,128,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,136,0,4,0,7,0,0,0,18,2,0,0,38,2,0,0,61,2,128,64,1,2,128,64,32,2,0,0,172,2,0,128,32,1,129,0,1,2,0,64,1,2,0,64,32,2,128,0,189,2,0,0,172,2,0,128,32,0,129,0,1,2,0,0,6,2,128,64,1,3,0,3,64,2,0,192,161,2,0,0,41,0,0,0,2,16,0,1,64,16,0,1,61,0,0,0,4,0,1,43,0,0,4,116,111,95,115,0,0,6,105,110,116,101,114,110,0,0,13,100,101,102,105,110,101,95,109,101,116,104,111,100,0,0,0,0,68,0,3,0,6,0,0,0,6,2,0,0,38,1,128,0,6,2,0,192,21,2,128,64,1,1,128,1,32,1,128,0,41,0,0,0,0,0,0,0,1,0,21,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,115,101,116,0,0,0,0,96,0,3,0,6,0,0,0,12,0,8,0,38,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,127,160,1,128,0,41,0,0,0,0,0,0,0,2,0,11,97,116,116,114,95,114,101,97,100,101,114,0,0,11,97,116,116,114,95,119,114,105,116,101,114,0,0,0,0,54,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,11,97,116,116,114,95,114,101,97,100,101,114,0,0,0,0,134,0,1,0,2,0,0,0,20,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,128,0,72,1,0,12,192,0,129,64,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,6,0,1,60,0,0,2,60,61,0,0,2,61,61,0,0,1,62,0,0,2,62,61,0,0,8,98,101,116,119,101,101,110,63,0,0,0,0,109,0,4,0,6,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,179,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,0,0,0,0,0,0,0,3,0,3,60,61,62,0,0,4,110,105,108,63,0,0,1,60,0,0,0,0,110,0,4,0,6,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,180,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,0,0,0,0,0,0,0,3,0,3,60,61,62,0,0,4,110,105,108,63,0,0,2,60,61,0,0,0,0,83,0,4,0,6,0,0,0,13,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,191,255,131,2,0,64,178,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,0,0,0,0,0,0,0,2,0,3,60,61,62,0,0,2,61,61,0,0,0,0,109,0,4,0,6,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,181,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,0,0,0,0,0,0,0,3,0,3,60,61,62,0,0,4,110,105,108,63,0,0,1,62,0,0,0,0,110,0,4,0,6,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,0,64,32,2,64,1,25,2,0,0,8,0,64,3,151,2,0,192,1,2,191,255,131,2,0,128,182,2,64,1,25,2,0,0,7,0,64,0,151,2,0,0,8,2,0,0,41,0,0,0,0,0,0,0,3,0,3,60,61,62,0,0,4,110,105,108,63,0,0,2,62,61,0,0,0,0,80,0,4,0,6,0,0,0,13,4,0,0,38,2,0,0,6,2,128,64,1,2,0,0,179,2,64,1,152,2,0,0,6,2,128,128,1,2,0,64,181,2,64,1,25,2,0,0,8,0,64,0,151,2,0,0,7,2,0,0,41,0,0,0,0,0,0,0,2,0,1,60,0,0,1,62,0,0,0,2,41,0,1,0,4,0,0,0,79,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,8,192,0,128,64,70,0,128,0,72,1,0,14,192,0,128,128,70,0,128,0,72,1,0,18,192,0,128,192,70,0,128,0,72,1,0,22,192,0,129,0,70,0,128,0,72,1,0,26,192,0,129,64,70,0,128,0,72,1,0,3,4,1,128,1,132,2,0,0,5,0,129,193,32,0,128,0,72,1,0,30,192,0,130,0,70,0,128,0,72,1,0,34,192,0,130,64,70,0,128,0,72,1,0,38,192,0,130,128,70,0,128,0,72,1,0,42,192,0,130,192,70,0,128,0,72,1,0,6,4,1,128,5,132,2,0,0,5,0,129,193,32,0,128,0,72,1,0,6,132,1,128,1,4,2,0,0,5,0,129,193,32,0,128,0,72,1,0,48,192,0,131,128,70,0,128,0,72,1,0,52,192,0,131,192,70,0,128,0,72,1,0,8,4,1,128,5,4,2,0,0,5,0,129,193,32,0,128,0,72,1,0,56,192,0,132,64,70,0,128,0,72,1,0,60,192,0,132,128,70,0,128,0,72,1,0,9,132,1,128,4,4,2,0,0,5,0,129,193,32,0,128,0,72,1,0,64,192,0,133,0,70,0,128,0,72,1,0,68,192,0,133,64,70,0,128,0,72,1,0,11,4,1,128,2,132,2,0,0,5,0,129,193,32,1,0,0,41,0,0,0,0,0,0,0,23,0,4,97,108,108,63,0,0,4,97,110,121,63,0,0,7,99,111,108,108,101,99,116,0,0,6,100,101,116,101,99,116,0,0,15,101,97,99,104,95,119,105,116,104,95,105,110,100,101,120,0,0,7,101,110,116,114,105,101,115,0,0,4,102,105,110,100,0,0,12,97,108,105,97,115,95,109,101,116,104,111,100,0,0,8,102,105,110,100,95,97,108,108,0,0,4,103,114,101,112,0,0,8,105,110,99,108,117,100,101,63,0,0,6,105,110,106,101,99,116,0,0,6,114,101,100,117,99,101,0,0,3,109,97,112,0,0,3,109,97,120,0,0,3,109,105,110,0,0,7,109,101,109,98,101,114,63,0,0,9,112,97,114,116,105,116,105,111,110,0,0,6,114,101,106,101,99,116,0,0,6,115,101,108,101,99,116,0,0,12,95,95,115,111,114,116,95,115,117,98,95,95,0,0,4,115,111,114,116,0,0,4,116,111,95,97,0,0,0,0,75,0,3,0,5,0,0,0,12,0,0,0,166,1,0,0,7,1,128,64,1,1,192,2,25,1,128,0,6,2,0,3,64,1,128,0,33,0,64,1,151,1,128,0,6,2,0,5,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,71,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,8,1,128,128,22,1,128,64,41,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,56,0,3,0,4,0,0,0,9,2,0,0,38,1,128,64,1,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,8,1,128,128,22,1,128,64,41,1,128,0,41,0,0,0,0,0,0,0,0,0,0,0,75,0,3,0,5,0,0,0,12,0,0,0,166,1,0,0,8,1,128,64,1,1,192,2,25,1,128,0,6,2,0,3,64,1,128,0,33,0,64,1,151,1,128,0,6,2,0,5,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,71,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,2,25,1,128,0,7,1,128,128,22,1,128,64,41,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,56,0,3,0,4,0,0,0,9,2,0,0,38,1,128,64,1,1,192,2,25,1,128,0,7,1,128,128,22,1,128,64,41,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,62,0,3,0,6,0,0,0,7,2,0,0,38,1,128,128,21,2,0,64,21,2,128,64,1,2,0,64,160,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,112,117,115,104,0,0,4,99,97,108,108,0,0,0,0,63,0,4,0,6,0,0,0,9,0,16,0,166,0,64,0,151,0,64,0,151,0,128,0,5,1,128,64,1,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,67,0,3,0,5,0,0,0,10,2,0,0,38,1,128,128,21,2,0,64,1,1,128,0,160,1,192,1,153,0,128,192,22,1,128,64,41,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,55,0,3,0,5,0,0,0,7,0,0,0,166,1,63,255,131,1,128,0,6,2,0,3,64,1,128,0,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,67,0,3,0,6,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,2,128,128,21,1,128,1,32,1,128,128,21,1,128,64,173,1,128,128,22,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,1,43,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,38,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,47,0,3,0,5,0,0,0,5,2,0,0,38,1,128,128,21,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,4,112,117,115,104,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,78,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,2,25,1,128,128,21,2,0,64,1,1,128,64,160,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,4,112,117,115,104,0,0,0,0,51,0,4,0,6,0,0,0,6,2,0,0,166,1,129,0,55,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,108,0,3,0,6,0,0,0,17,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,5,25,1,128,192,21,2,0,128,21,2,64,2,25,2,0,128,21,2,128,64,1,2,0,128,160,0,64,0,151,2,0,64,1,1,128,64,160,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,3,0,3,61,61,61,0,0,4,112,117,115,104,0,0,4,99,97,108,108,0,0,0,0,51,0,4,0,6,0,0,0,6,2,0,0,38,1,128,0,8,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,69,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,1,2,0,64,21,1,128,0,178,1,192,2,25,1,128,0,7,1,128,192,22,1,128,64,41,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,1,0,2,61,61,0,0,0,1,18,0,6,0,9,0,0,0,39,0,8,0,166,3,0,64,1,3,0,0,32,3,192,0,131,3,0,64,181,3,64,2,25,3,0,0,6,3,128,1,145,4,0,0,61,3,0,129,32,3,0,2,17,3,128,64,1,4,63,255,3,3,129,128,160,3,1,64,160,3,64,4,25,3,0,64,1,3,191,255,3,3,1,128,160,1,129,128,1,3,0,3,192,1,1,128,1,3,0,64,1,3,1,192,32,3,0,64,1,3,2,0,32,3,64,1,153,2,0,0,7,2,128,0,5,0,64,2,151,2,0,0,8,3,0,64,1,3,191,255,131,3,1,128,160,2,129,128,1,3,0,0,6,3,128,5,64,3,2,64,33,2,128,0,41,0,0,0,1,16,0,18,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,0,0,0,10,0,4,115,105,122,101,0,0,1,62,0,0,5,114,97,105,115,101,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,6,83,121,109,98,111,108,0,0,3,61,61,61,0,0,2,91,93,0,0,3,112,111,112,0,0,6,101,109,112,116,121,63,0,0,4,101,97,99,104,0,0,0,0,51,0,4,0,7,0,0,0,6,4,0,0,38,2,0,64,1,2,128,192,21,3,0,128,1,2,0,1,32,2,0,0,41,0,0,0,0,0,0,0,1,0,4,115,101,110,100,0,0,0,0,83,0,3,0,6,0,0,0,14,2,0,0,38,1,129,0,21,1,192,2,153,1,128,0,8,1,129,0,22,1,128,64,1,1,129,64,22,0,64,2,151,1,128,128,21,2,1,64,21,2,128,64,1,1,128,1,32,1,129,64,22,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,55,0,4,0,6,0,0,0,7,0,0,0,166,1,0,0,7,1,128,0,5,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,165,0,3,0,6,0,0,0,32,2,0,0,38,1,128,128,21,1,192,2,25,0,128,192,22,1,128,0,8,1,128,128,22,0,64,12,23,1,128,64,21,1,192,6,25,1,128,64,21,2,0,64,1,2,128,192,21,1,128,1,32,2,63,255,131,1,128,64,181,1,192,1,153,1,128,64,1,1,128,192,22,0,64,0,151,1,128,0,5,0,64,5,23,1,128,64,1,2,0,192,21,1,128,128,160,2,63,255,131,1,128,64,181,1,192,1,153,1,128,64,1,1,128,192,22,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,1,62,0,0,3,60,61,62,0,0,0,0,55,0,4,0,6,0,0,0,7,0,0,0,166,1,0,0,7,1,128,0,5,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,165,0,3,0,6,0,0,0,32,2,0,0,38,1,128,128,21,1,192,2,25,0,128,192,22,1,128,0,8,1,128,128,22,0,64,12,23,1,128,64,21,1,192,6,25,1,128,64,21,2,0,64,1,2,128,192,21,1,128,1,32,2,63,255,131,1,128,64,179,1,192,1,153,1,128,64,1,1,128,192,22,0,64,0,151,1,128,0,5,0,64,5,23,1,128,64,1,2,0,192,21,1,128,128,160,2,63,255,131,1,128,64,179,1,192,1,153,1,128,64,1,1,128,192,22,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,1,60,0,0,3,60,61,62,0,0,0,0,67,0,4,0,6,0,0,0,10,0,0,0,166,1,1,0,55,1,129,0,55,2,0,0,6,2,128,3,64,2,0,0,33,2,0,128,1,2,128,192,1,0,1,1,55,0,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,86,0,3,0,5,0,0,0,13,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,2,25,1,128,128,21,2,0,64,1,1,128,64,160,0,64,1,151,1,128,192,21,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,4,112,117,115,104,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,78,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,1,25,1,128,0,5,0,64,1,151,1,128,128,21,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,4,112,117,115,104,0,0,0,1,154,0,12,0,19,0,0,0,83,10,0,0,166,6,1,0,1,6,129,64,1,6,0,0,178,6,64,6,153,6,0,192,1,6,192,0,3,6,0,0,178,6,64,3,153,6,0,128,1,6,129,0,1,6,0,64,160,6,128,64,1,7,1,0,1,7,131,0,1,6,128,129,32,0,0,0,5,0,0,0,41,6,0,192,1,6,191,255,131,6,0,0,178,6,64,2,153,6,0,64,1,6,128,128,1,3,131,0,1,4,3,64,1,0,64,2,23,6,0,128,1,6,128,64,1,3,131,0,1,4,3,64,1,6,1,192,1,6,129,0,1,6,0,64,160,4,131,0,1,6,1,0,1,6,129,64,1,5,3,0,1,5,131,64,1,6,1,0,1,6,0,192,173,6,129,64,1,7,0,3,64,6,1,0,161,6,2,64,1,6,128,64,1,7,2,128,1,7,131,0,1,6,128,129,32,6,0,192,1,6,0,192,173,6,192,0,131,6,1,64,160,1,131,0,1,6,2,128,1,6,129,0,1,6,1,128,181,6,64,4,153,6,0,0,6,6,128,64,1,7,0,128,1,7,128,192,1,8,1,0,1,8,130,128,1,8,130,0,175,9,1,128,1,6,1,194,161,6,2,128,1,6,129,64,1,6,2,64,179,6,64,5,25,6,0,0,6,6,128,64,1,7,0,128,1,7,128,192,1,8,2,128,1,8,0,192,173,8,129,64,1,9,1,128,1,6,1,194,161,0,64,0,151,6,0,0,5,6,0,0,41,0,0,0,0,0,0,0,10,0,2,61,61,0,0,2,91,93,0,0,3,91,93,61,0,0,1,43,0,0,4,117,112,116,111,0,0,1,37,0,0,1,62,0,0,12,95,95,115,111,114,116,95,115,117,98,95,95,0,0,1,45,0,0,1,60,0,0,0,0,216,0,3,0,7,0,0,0,40,2,0,0,38,1,129,128,21,1,192,3,153,1,129,128,21,2,1,192,21,2,128,64,1,2,0,64,160,2,130,64,21,1,128,1,32,0,64,2,151,1,129,192,21,2,0,64,1,1,128,64,160,2,2,64,21,1,128,128,160,2,63,255,131,1,128,192,181,1,192,5,153,1,129,192,21,2,0,64,1,1,128,64,160,2,2,0,21,2,130,192,21,3,0,192,1,2,1,1,32,1,130,192,21,1,129,64,175,1,130,192,22,0,64,5,23,1,129,192,21,2,0,64,1,1,128,64,160,2,2,0,21,2,130,128,21,3,0,192,1,2,1,1,32,1,130,128,21,1,129,128,173,1,130,128,22,1,128,0,41,0,0,0,0,0,0,0,7,0,4,99,97,108,108,0,0,2,91,93,0,0,3,60,61,62,0,0,1,62,0,0,3,91,93,61,0,0,1,45,0,0,1,43,0,0,0,0,172,0,3,0,10,0,0,0,24,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,128,1,1,128,64,32,1,192,0,153,0,64,7,23,1,128,0,6,2,0,128,1,2,128,0,66,2,128,1,147,3,0,128,1,3,1,64,32,2,129,0,160,3,63,255,131,3,191,255,131,4,0,128,1,4,1,64,32,4,1,128,175,4,128,64,1,1,128,130,161,1,0,0,41,0,0,0,0,0,0,0,7,0,4,101,97,99,104,0,0,6,101,109,112,116,121,63,0,0,12,95,95,115,111,114,116,95,115,117,98,95,95,0,0,5,65,114,114,97,121,0,0,3,110,101,119,0,0,4,115,105,122,101,0,0,1,45,0,0,0,0,47,0,3,0,5,0,0,0,5,2,0,0,38,1,128,128,21,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,4,112,117,115,104,0,0,0,0,56,0,1,0,2,0,0,0,6,0,128,0,6,0,128,64,71,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,9,101,120,99,101,112,116,105,111,110,0,0,0,0,58,0,3,0,6,0,0,0,8,0,8,0,166,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,2,128,128,1,1,128,63,161,1,128,0,41,0,0,0,0,0,0,0,1,0,3,110,101,119,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,106,0,1,0,3,0,0,0,11,0,128,0,6,1,0,0,132,0,128,0,160,0,128,0,72,1,0,2,192,0,128,128,70,0,128,0,72,1,0,4,192,0,128,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,4,0,13,97,116,116,114,95,97,99,99,101,115,115,111,114,0,0,4,110,97,109,101,0,0,3,110,101,119,0,0,10,105,110,105,116,105,97,108,105,122,101,0,0,0,0,89,0,4,0,7,0,0,0,11,0,32,0,38,0,64,1,23,0,64,1,23,0,64,1,23,0,128,0,61,1,0,0,5,2,0,0,6,2,128,64,1,3,0,128,1,2,0,1,32,2,0,0,41,0,0,0,1,16,0,9,78,97,109,101,69,114,114,111,114,0,0,0,1,0,10,105,110,105,116,105,97,108,105,122,101,0,0,0,0,72,0,4,0,6,0,0,0,11,0,32,0,38,0,64,1,23,0,64,1,23,0,64,1,23,0,128,0,5,1,0,0,5,1,0,0,14,2,128,64,1,3,0,0,5,2,0,0,164,2,0,0,41,0,0,0,0,0,0,0,1,0,5,64,110,97,109,101,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,247,0,1,0,2,0,0,0,32,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,8,192,0,128,128,70,0,128,0,72,1,0,12,192,0,128,192,70,0,128,0,72,1,0,16,192,0,129,0,70,0,128,0,72,1,0,18,192,0,129,64,70,0,128,0,72,1,0,26,192,0,129,128,70,0,128,0,72,1,0,32,192,0,129,192,70,0,128,0,72,1,0,36,192,0,130,0,70,0,128,0,72,1,0,42,192,0,130,64,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,10,0,6,100,101,108,101,116,101,0,0,4,101,97,99,104,0,0,8,101,97,99,104,95,107,101,121,0,0,10,101,97,99,104,95,118,97,108,117,101,0,0,10,105,110,105,116,105,97,108,105,122,101,0,0,5,109,101,114,103,101,0,0,7,114,101,106,101,99,116,33,0,0,6,114,101,106,101,99,116,0,0,7,115,101,108,101,99,116,33,0,0,6,115,101,108,101,99,116,0,0,0,0,117,0,3,0,5,0,0,0,16,2,0,0,166,1,128,128,1,1,192,2,25,1,128,0,6,2,0,64,1,1,128,0,160,1,128,64,32,1,192,2,25,1,128,128,1,2,0,64,1,1,128,128,160,0,64,1,151,1,128,0,6,2,0,64,1,1,128,192,160,1,128,0,41,0,0,0,0,0,0,0,4,0,8,104,97,115,95,107,101,121,63,0,0,1,33,0,0,4,99,97,108,108,0,0,8,95,95,100,101,108,101,116,101,0,0,0,0,62,0,2,0,4,0,0,0,7,0,0,0,166,1,0,0,6,1,0,0,32,1,128,3,64,1,0,64,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,2,0,4,107,101,121,115,0,0,4,101,97,99,104,0,0,0,0,68,0,3,0,7,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,2,128,0,6,3,0,64,1,2,128,64,160,2,1,1,55,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,2,91,93,0,0,0,0,62,0,2,0,4,0,0,0,7,0,0,0,166,1,0,0,6,1,0,0,32,1,128,3,64,1,0,64,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,2,0,4,107,101,121,115,0,0,4,101,97,99,104,0,0,0,0,47,0,3,0,5,0,0,0,5,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,62,0,2,0,4,0,0,0,7,0,0,0,166,1,0,0,6,1,0,0,32,1,128,3,64,1,0,64,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,2,0,4,107,101,121,115,0,0,4,101,97,99,104,0,0,0,0,60,0,3,0,6,0,0,0,7,2,0,0,38,1,128,64,21,2,0,0,6,2,128,64,1,2,0,64,160,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,2,91,93,0,0,0,0,66,0,3,0,6,0,0,0,8,0,8,0,166,1,128,0,6,2,0,128,1,2,1,0,183,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,11,95,95,105,110,105,116,95,99,111,114,101,0,0,0,0,202,0,4,0,6,0,0,0,26,2,0,0,166,1,129,0,63,2,0,64,1,2,128,0,132,2,0,0,160,2,64,0,153,0,64,1,151,2,0,0,6,2,128,0,61,2,0,128,160,2,0,64,1,2,0,64,32,0,129,0,1,2,0,0,6,2,128,3,64,2,0,192,33,2,0,128,1,2,64,2,25,2,0,64,1,2,128,5,64,2,0,192,33,0,64,1,151,2,0,64,1,2,128,7,64,2,0,192,33,1,128,0,41,0,0,0,1,16,0,32,99,97,110,39,116,32,99,111,110,118,101,114,116,32,97,114,103,117,109,101,110,116,32,105,110,116,111,32,72,97,115,104,0,0,0,4,0,11,114,101,115,112,111,110,100,95,116,111,63,0,0,7,116,111,95,104,97,115,104,0,0,5,114,97,105,115,101,0,0,8,101,97,99,104,95,107,101,121,0,0,0,0,67,0,3,0,7,0,0,0,9,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,2,0,192,21,2,128,64,1,3,0,192,1,2,0,65,32,1,128,0,41,0,0,0,0,0,0,0,2,0,2,91,93,0,0,3,91,93,61,0,0,0,0,141,0,3,0,8,0,0,0,23,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,192,5,25,1,128,128,21,2,0,64,1,2,128,0,6,3,0,64,1,2,128,128,160,3,0,64,21,3,128,64,1,3,0,128,160,1,128,65,160,0,64,1,151,1,128,64,21,2,0,64,1,1,128,128,160,2,0,192,21,2,128,64,1,3,0,192,1,2,0,193,32,1,128,0,41,0,0,0,0,0,0,0,4,0,8,104,97,115,95,107,101,121,63,0,0,4,99,97,108,108,0,0,2,91,93,0,0,3,91,93,61,0,0,0,0,67,0,3,0,7,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,2,0,192,21,2,128,64,1,3,0,192,1,2,0,65,32,1,128,0,41,0,0,0,0,0,0,0,2,0,2,91,93,0,0,3,91,93,61,0,0,0,0,118,0,3,0,5,0,0,0,17,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,128,1,1,128,64,32,2,63,255,131,1,128,128,178,1,192,1,25,0,0,0,5,0,0,0,41,1,128,128,1,2,0,5,64,1,128,192,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,4,0,8,101,97,99,104,95,107,101,121,0,0,4,115,105,122,101,0,0,2,61,61,0,0,4,101,97,99,104,0,0,0,0,103,0,4,0,7,0,0,0,16,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,2,25,2,0,128,21,2,128,64,1,2,0,128,160,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,4,112,117,115,104,0,0,0,0,49,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,6,100,101,108,101,116,101,0,0,0,0,55,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,63,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,8,101,97,99,104,95,107,101,121,0,0,0,0,110,0,4,0,8,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,1,25,2,0,0,5,0,64,2,151,2,0,192,1,2,128,128,21,3,0,64,1,3,129,0,1,2,128,129,32,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,3,91,93,61,0,0,0,0,118,0,3,0,5,0,0,0,17,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,128,1,1,128,64,32,2,63,255,131,1,128,128,178,1,192,1,25,0,0,0,5,0,0,0,41,1,128,128,1,2,0,5,64,1,128,192,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,4,0,8,101,97,99,104,95,107,101,121,0,0,4,115,105,122,101,0,0,2,61,61,0,0,4,101,97,99,104,0,0,0,0,103,0,4,0,7,0,0,0,16,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,1,25,2,0,0,5,0,64,1,151,2,0,128,21,2,128,64,1,2,0,128,160,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,4,112,117,115,104,0,0,0,0,49,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,6,100,101,108,101,116,101,0,0,0,0,55,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,63,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,8,101,97,99,104,95,107,101,121,0,0,0,0,110,0,4,0,8,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,3,25,2,0,192,1,2,128,128,21,3,0,64,1,3,129,0,1,2,128,129,32,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,3,91,93,61,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,59,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,0,10,69,110,117,109,101,114,97,98,108,101,0,0,0,0,130,0,1,0,2,0,0,0,23,0,128,0,6,0,128,64,71,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,0,70,0,128,0,6,0,128,64,71,1,0,6,192,0,128,64,70,0,128,0,6,0,128,64,71,1,0,8,192,0,128,128,70,0,128,0,72,1,0,10,192,0,128,128,70,0,128,0,72,1,0,12,192,0,128,64,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,3,0,1,96,0,0,4,108,111,111,112,0,0,4,101,118,97,108,0,0,0,0,104,0,3,0,6,0,0,0,7,2,0,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,17,96,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,53,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,17,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,6,75,101,114,110,101,108,0,0,1,96,0,0,0,0,59,0,2,0,3,0,0,0,8,0,0,0,38,0,64,1,23,1,0,0,43,1,0,0,32,1,0,0,7,1,63,254,24,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,107,0,3,0,6,0,0,0,7,2,0,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,20,101,118,97,108,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,56,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,17,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,6,75,101,114,110,101,108,0,0,4,101,118,97,108,0,0,0,0,59,0,2,0,3,0,0,0,8,0,0,0,38,0,64,1,23,1,0,0,43,1,0,0,32,1,0,0,7,1,63,254,24,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,189,0,1,0,2,0,0,0,26,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,128,0,72,1,0,12,192,0,129,64,70,0,128,0,72,1,0,14,192,0,129,128,70,0,128,0,72,1,0,16,192,0,129,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,8,0,4,99,101,105,108,0,0,6,100,111,119,110,116,111,0,0,5,102,108,111,111,114,0,0,5,116,105,109,101,115,0,0,5,114,111,117,110,100,0,0,8,116,114,117,110,99,97,116,101,0,0,4,117,112,116,111,0,0,4,115,116,101,112,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,96,0,4,0,6,0,0,0,15,2,0,0,166,1,128,0,6,0,64,3,23,2,0,128,1,2,128,192,1,2,0,0,160,2,0,192,1,2,0,64,175,1,129,0,1,2,0,192,1,2,128,64,1,2,0,128,182,2,63,251,24,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,1,45,0,0,2,62,61,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,95,0,3,0,5,0,0,0,15,0,0,0,166,1,63,255,131,0,64,3,23,1,128,64,1,2,0,128,1,1,128,0,160,1,128,128,1,1,128,64,173,1,0,192,1,1,128,128,1,2,0,0,6,1,128,128,179,1,191,251,24,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,1,43,0,0,1,60,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,96,0,4,0,6,0,0,0,15,2,0,0,166,1,128,0,6,0,64,3,23,2,0,128,1,2,128,192,1,2,0,0,160,2,0,192,1,2,0,64,173,1,129,0,1,2,0,192,1,2,128,64,1,2,0,128,180,2,63,251,24,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,1,43,0,0,2,60,61,0,0,0,0,170,0,5,0,7,0,0,0,27,2,16,0,166,0,64,0,151,0,64,0,151,1,64,0,3,2,128,64,1,3,0,0,145,2,128,0,160,2,192,1,153,2,128,0,6,2,128,128,32,0,64,0,151,2,128,0,6,2,1,64,1,0,64,3,151,2,128,192,1,3,1,0,1,2,128,192,160,2,129,0,1,3,0,128,1,2,129,0,172,2,1,64,1,2,129,0,1,3,0,64,1,2,129,64,180,2,191,250,152,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,6,0,8,107,105,110,100,95,111,102,63,0,0,5,70,108,111,97,116,0,0,4])
.concat([116,111,95,102,0,0,4,99,97,108,108,0,0,1,43,0,0,2,60,61,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,59,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,0,10,67,111,109,112,97,114,97,98,108,101,0,0,0,0,104,0,1,0,2,0,0,0,14,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,4,0,5,112,114,105,110,116,0,0,4,112,117,116,115,0,0,1,112,0,0,6,112,114,105,110,116,102,0,0,0,0,106,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,19,112,114,105,110,116,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,105,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,18,112,117,116,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,102,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,15,112,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,107,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,20,112,114,105,110,116,102,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,47,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,1,89,0,4,0,7,0,0,0,52,0,0,0,166,2,0,0,6,2,0,0,32,1,1,0,1,2,0,128,1,2,128,1,4,2,0,64,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,2,17,3,0,0,61,2,0,193,32,2,0,0,6,2,1,64,32,1,129,0,1,2,0,128,1,2,128,192,1,2,1,128,160,2,191,255,131,2,1,192,181,2,64,1,25,0,0,0,6,0,0,0,41,0,64,3,23,2,0,64,1,2,128,128,1,2,2,0,160,2,0,128,1,2,0,128,32,1,1,0,1,2,0,128,1,2,128,192,1,2,1,128,160,2,191,255,131,2,2,64,179,2,63,250,24,2,0,0,6,2,2,128,32,2,2,192,32,2,64,2,153,2,0,128,1,2,128,192,1,2,1,128,160,2,191,255,131,2,3,0,178,2,64,1,153,2,0,64,1,2,128,128,1,2,2,0,160,0,0,0,6,0,0,0,41,0,0,0,1,16,0,13,99,97,110,39,116,32,105,116,101,114,97,116,101,0,0,0,13,0,5,102,105,114,115,116,0,0,11,114,101,115,112,111,110,100,95,116,111,63,0,0,4,115,117,99,99,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,4,108,97,115,116,0,0,3,60,61,62,0,0,1,62,0,0,4,99,97,108,108,0,0,1,60,0,0,12,101,120,99,108,117,100,101,95,101,110,100,63,0,0,1,33,0,0,2,61,61,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,59,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,0,10,69,110,117,109,101,114,97,98,108,101,0,0,0,0,213,0,1,0,2,0,0,0,29,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,128,0,72,1,0,12,192,0,129,64,70,0,128,0,72,1,0,14,192,0,129,128,70,0,128,0,72,1,0,16,192,0,129,192,70,0,128,0,72,1,0,18,192,0,130,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,9,0,9,101,97,99,104,95,108,105,110,101,0,0,4,103,115,117,98,0,0,5,103,115,117,98,33,0,0,4,115,99,97,110,0,0,3,115,117,98,0,0,4,115,117,98,33,0,0,9,101,97,99,104,95,99,104,97,114,0,0,9,101,97,99,104,95,98,121,116,101,0,0,3,91,93,61,0,0,0,0,207,0,4,0,9,0,0,0,37,0,0,0,166,1,63,255,131,0,64,6,23,2,0,64,1,2,128,0,6,3,0,128,1,3,128,192,1,3,128,128,173,4,0,128,1,3,128,192,174,2,128,65,32,2,0,0,160,2,0,192,1,2,0,128,173,1,1,0,1,2,0,0,6,2,192,4,131,3,0,128,1,2,1,1,32,1,129,0,1,2,63,247,24,2,0,0,6,2,1,64,32,2,128,128,1,2,1,128,181,2,64,4,153,2,0,64,1,2,128,0,6,3,0,128,1,3,128,0,6,3,129,64,32,4,0,128,1,3,128,192,174,2,128,65,32,2,0,0,160,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,7,0,4,99,97,108,108,0,0,2,91,93,0,0,1,43,0,0,1,45,0,0,5,105,110,100,101,120,0,0,4,115,105,122,101,0,0,1,62,0,0,0,1,23,0,3,0,7,0,0,0,42,0,8,0,166,1,128,64,1,1,128,0,32,2,64,0,131,1,128,64,178,1,192,5,153,1,128,0,6,2,0,64,1,2,191,255,131,2,0,192,160,2,191,255,3,1,128,129,32,2,0,64,1,2,192,0,3,2,0,192,160,1,129,0,160,0,64,12,23,1,128,64,1,1,128,0,32,2,64,0,3,1,128,64,178,1,192,0,153,1,128,128,1,1,192,6,153,1,128,0,6,2,0,64,1,2,191,255,131,2,0,192,160,2,191,255,3,1,128,129,32,2,0,128,1,2,128,64,1,3,63,255,131,2,128,192,160,2,1,64,160,1,129,0,160,0,64,2,23,1,128,0,6,2,0,3,145,2,128,0,61,1,129,129,32,1,128,0,41,0,0,0,1,16,0,25,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,8,0,4,115,105,122,101,0,0,2,61,61,0,0,5,115,112,108,105,116,0,0,2,91,93,0,0,4,106,111,105,110,0,0,4,99,97,108,108,0,0,5,114,97,105,115,101,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,0,118,0,4,0,7,0,0,0,19,0,8,0,166,2,0,0,6,2,129,64,55,3,0,64,1,2,129,128,56,3,0,128,1,2,0,63,161,1,129,0,1,2,0,192,1,2,128,0,6,2,0,64,160,2,64,2,153,2,0,0,6,2,128,192,1,2,0,128,160,2,0,0,6,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,4,103,115,117,98,0,0,2,33,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,160,0,3,0,6,0,0,0,12,2,0,0,166,1,128,0,17,2,0,1,4,1,128,64,160,1,192,1,25,1,128,0,5,0,64,2,23,1,128,0,6,2,0,2,17,2,128,0,61,1,128,193,32,1,128,0,41,0,0,0,1,16,0,24,115,99,97,110,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,40,121,101,116,41,0,0,0,5,0,6,79,98,106,101,99,116,0,0,14,99,111,110,115,116,95,100,101,102,105,110,101,100,63,0,0,6,82,101,103,101,120,112,0,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,0,1,23,0,3,0,7,0,0,0,42,0,8,0,166,1,128,64,1,1,128,0,32,2,64,0,131,1,128,64,178,1,192,5,153,1,128,0,6,2,0,64,1,2,191,255,131,2,0,192,160,2,192,0,131,1,128,129,32,2,0,64,1,2,192,0,3,2,0,192,160,1,129,0,160,0,64,12,23,1,128,64,1,1,128,0,32,2,64,0,3,1,128,64,178,1,192,0,153,1,128,128,1,1,192,6,153,1,128,0,6,2,0,64,1,2,191,255,131,2,0,192,160,2,192,0,131,1,128,129,32,2,0,128,1,2,128,64,1,3,63,255,131,2,128,192,160,2,1,64,160,1,129,0,160,0,64,2,23,1,128,0,6,2,0,3,145,2,128,0,61,1,129,129,32,1,128,0,41,0,0,0,1,16,0,25,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,8,0,4,115,105,122,101,0,0,2,61,61,0,0,5,115,112,108,105,116,0,0,2,91,93,0,0,4,106,111,105,110,0,0,4,99,97,108,108,0,0,5,114,97,105,115,101,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,0,117,0,4,0,7,0,0,0,19,0,8,0,166,2,0,0,6,2,129,64,55,3,0,64,1,2,129,128,56,3,0,128,1,2,0,63,161,1,129,0,1,2,0,192,1,2,128,0,6,2,0,64,160,2,64,2,153,2,0,0,6,2,128,192,1,2,0,128,160,2,0,0,6,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,3,115,117,98,0,0,2,33,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,119,0,3,0,6,0,0,0,18,0,0,0,166,1,63,255,131,0,64,4,23,1,128,64,1,2,0,0,6,2,128,128,1,2,0,64,160,1,128,0,160,1,128,128,1,1,128,128,173,1,0,192,1,1,128,128,1,2,0,0,6,2,1,0,32,1,128,192,179,1,191,249,152,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,5,0,4,99,97,108,108,0,0,2,91,93,0,0,1,43,0,0,1,60,0,0,4,115,105,122,101,0,0,0,0,139,0,4,0,7,0,0,0,21,0,0,0,166,2,0,0,6,2,0,0,32,1,1,0,1,1,191,255,131,0,64,4,23,2,0,64,1,2,128,128,1,3,0,192,1,2,128,128,160,2,0,64,160,2,0,192,1,2,0,192,173,1,129,0,1,2,0,192,1,2,128,128,1,2,129,64,32,2,1,0,179,2,63,249,152,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,6,0,5,98,121,116,101,115,0,0,4,99,97,108,108,0,0,2,91,93,0,0,1,43,0,0,1,60,0,0,4,115,105,122,101,0,0,0,0,137,0,6,0,10,0,0,0,22,4,0,0,38,3,0,0,6,3,191,255,131,4,0,64,1,3,0,1,32,2,1,128,1,3,0,0,6,3,128,64,1,3,128,64,173,4,63,255,3,3,129,192,65,3,0,0,160,2,129,128,1,3,0,0,6,3,129,0,1,4,0,128,1,4,129,64,1,3,129,193,183,4,0,0,61,3,128,192,160,3,0,128,160,3,0,0,41,0,0,0,1,16,0,0,0,0,0,4,0,2,91,93,0,0,1,43,0,0,7,114,101,112,108,97,99,101,0,0,4,106,111,105,110,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,59,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,0,10,67,111,109,112,97,114,97,98,108,101,0,69,78,68,0,0,0,0,8,0,0,96,142,1,0,84,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,13,0,0,0,74,0,0,0,16,0,0,0,17,0,0,0,20,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,39,0,0,0,42,0,0,0,43,0,0,0,46,0,0,0,49,0,0,0,55,0,0,0,58,0,0,0,62,0,0,0,63,0,0,0,69,0,0,0,79,0,0,0,77,0,0,0,117,0,0,0,118,0,0,0,137,0,0,0,158,0,0,0,173,0,0,0,217,0,0,0,218,0,0,0,220,0,0,0,15,1,0,0,33,1,0,0,39,1,0,0,116,1,0,0,60,1,0,0,128,1,0,0,80,1,0,0,101,1,0,0,141,1,0,0,191,1,0,0,236,1,0,0,25,2,0,0,70,2,0,0,115,2,0,0,116,2,0,0,117,2,0,0,118,2,0,0,127,2,0,0,128,2,0,0,152,2,0,0,153,2,0,0,154,2,0,0,158,2,0,0,183,2,0,0,164,2,0,0,165,2,0,0,169,2,0,0,173,2,0,0,178,2,0,0,179,2,0,0,180,2,0,0,184,2,0,0,185,2,0,0,192,2,0,0,110,111,32,116,97,114,103,101,116,32,99,108,97,115,115,32,111,114,32,109,111,100,117,108,101,0,0,0,115,117,112,101,114,32,99,97,108,108,101,100,32,111,117,116,115,105,100,101,32,111,102,32,109,101,116,104,111,100,0,0,0,0,0,0,223,176,8,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0,0,0,0,176,100,1,0,192,99,1,0,188,98,1,0,188,97,1,0,8,97,1,0,196,95,1,0,68,95,1,0,4,95,1,0,120,94,1,0,248,93,1,0,196,92,1,0,100,92,1,0,117,110,101,120,112,101,99,116,101,100,32,0,6,5,5,0,114,101,116,117,114,110,0,98,114,101,97,107,0,0,121,105,101,108,100,0,0,0,0,0,99,111,100,101,103,101,110,32,101,114,114,111,114,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,114,101,112,32,108,111,97,100,32,101,114,114,111,114,0,40,46,46,46,32,46,46,46,32,46,46,46,41,0,40,46,46,46,32,46,46,32,46,46,46,41,0,0,13,0,0,0,12,0,0,0,93,0,0,0,44,32,0,0,91,0,0,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,14,51,16,8,11,13,51,51,51,51,10,51,13,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,11,51,13,1,26,4,1,8,28,51,23,51,1,1,27,5,19,21,51,8,3,3,11,51,21,24,16,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,0,0,0,223,176,8,153,82,73,84,69,48,48,48,49,103,148,0,0,1,89,77,65,84,90,48,48,48,48,73,82,69,80,0,0,1,59,48,48,48,48,0,5,0,0,0,0,0,133,0,1,0,2,0,0,0,18,0,128,0,6,0,128,64,71,1,0,2,192,0,128,0,70,0,128,0,6,0,128,64,71,1,0,4,192,0,128,64,70,0,128,0,6,0,128,64,71,1,0,6,192,0,128,128,70,0,128,0,6,0,128,64,71,1,0,8,192,0,128,192,70,0,128,0,5,0,0,0,74,0,0,0,0,0,0,0,4,0,7,105,110,99,108,117,100,101,0,0,7,112,114,105,118,97,116,101,0,0,9,112,114,111,116,101,99,116,101,100,0,0,6,112,117,98,108,105,99,0,0,0,0,70,0,3,0,6,0,0,0,8,0,8,0,38,1,128,0,6,1,128,0,32,2,1,0,55,2,128,64,1,2,1,64,56,1,128,127,160,1,128,0,41,0,0,0,0,0,0,0,2,0,5,99,108,97,115,115,0,0,7,105,110,99,108,117,100,101,0,0,0,0,32,0,3,0,4,0,0,0,3,0,8,0,38,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,32,0,3,0,4,0,0,0,3,0,8,0,38,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,32,0,3,0,4,0,0,0,3,0,8,0,38,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,69,78,68,0,0,0,0,8,0,0,0,82,73,84,69,48,48,48,49,111,233,0,0,1,1,77,65,84,90,48,48,48,48,73,82,69,80,0,0,0,227,48,48,48,48,0,4,0,0,0,0,0,49,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,6,83,121,109,98,111,108,0,0,0,0,50,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,7,116,111,95,112,114,111,99,0,0,0,0,53,0,2,0,4,0,0,0,5,0,0,0,38,1,0,0,17,1,128,3,64,1,0,64,33,1,0,0,41,0,0,0,0,0,0,0,2,0,4,80,114,111,99,0,0,3,110,101,119,0,0,0,0,59,0,4,0,7,0,0,0,8,2,8,0,38,2,0,64,1,2,128,0,6,2,129,64,183,3,0,128,1,2,129,128,56,2,0,63,160,2,0,0,41,0,0,0,0,0,0,0,1,0,4,115,101,110,100,0,69,78,68,0,0,0,0,8,0,0,0,82,73,84,69,48,48,48,49,121,204,0,0,2,192,77,65,84,90,48,48,48,48,73,82,69,80,0,0,2,162,48,48,48,48,0,8,0,0,0,0,0,99,0,1,0,3,0,0,0,11,0,128,0,17,1,0,1,4,0,128,64,160,0,192,2,153,0,128,0,5,1,0,0,5,0,128,128,67,0,128,0,197,0,64,0,151,0,128,0,5,0,0,0,74,0,0,0,0,0,0,0,3,0,6,79,98,106,101,99,116,0,0,14,99,111,110,115,116,95,100,101,102,105,110,101,100,63,0,0,6,83,116,114,117,99,116,0,0,0,0,92,0,1,0,2,0,0,0,11,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,6,192,0,128,64,70,0,128,0,72,1,0,10,192,0,128,128,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,3,0,4,101,97,99,104,0,0,9,101,97,99,104,95,112,97,105,114,0,0,6,115,101,108,101,99,116,0,0,0,0,77,0,2,0,4,0,0,0,8,0,0,0,166,1,0,0,6,1,0,0,32,1,0,64,32,1,128,3,64,1,0,128,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,5,99,108,97,115,115,0,0,7,109,101,109,98,101,114,115,0,0,4,101,97,99,104,0,0,0,0,60,0,3,0,6,0,0,0,7,2,0,0,38,1,128,64,21,2,0,0,6,2,128,64,1,2,0,64,160,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,2,91,93,0,0,0,0,77,0,2,0,4,0,0,0,8,0,0,0,166,1,0,0,6,1,0,0,32,1,0,64,32,1,128,3,64,1,0,128,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,5,99,108,97,115,115,0,0,7,109,101,109,98,101,114,115,0,0,4,101,97,99,104,0,0,0,0,77,0,3,0,7,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,2,0,64,32,2,128,0,6,3,0,64,1,2,128,128,160,1,128,1,32,1,128,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,6,116,111,95,115,121,109,0,0,2,91,93,0,0,0,0,77,0,3,0,5,0,0,0,8,0,0,0,166,1,0,192,55,1,128,0,6,1,128,0,32,1,128,64,32,2,0,3,64,1,128,128,33,1,0,0,41,0,0,0,0,0,0,0,3,0,5,99,108,97,115,115,0,0,7,109,101,109,98,101,114,115,0,0,4,101,97,99,104,0,0,0,0,99,0,4,0,6,0,0,0,15,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,192,1,2,0,64,160,2,64,2,25,2,0,128,21,2,128,192,1,2,0,128,160,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,4,112,117,115,104,0,69,78,68,0,0,0,0,8,82,73,84,69,48,48,48,49,170,180,0,0,5,22,77,65,84,90,48,48,48,48,73,82,69,80,0,0,4,248,48,48,48,48,0,9,0,0,0,0,0,49,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,6,83,116,114,105,110,103,0,0,0,0,177,0,1,0,2,0,0,0,23,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,128,0,72,1,0,12,192,0,129,64,70,0,128,0,72,1,0,14,192,0,129,128,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,7,0,6,108,115,116,114,105,112,0,0,6,114,115,116,114,105,112,0,0,5,115,116,114,105,112,0,0,7,108,115,116,114,105,112,33,0,0,7,114,115,116,114,105,112,33,0,0,6,115,116,114,105,112,33,0,0,7,99,97,115,101,99,109,112,0,0,0,0,201,0,4,0,7,0,0,0,32,0,0,0,38,1,63,255,131,2,0,0,6,2,0,0,32,2,0,64,175,1,129,0,1,0,64,1,151,2,0,128,1,2,0,128,173,1,1,0,1,2,0,0,61,2,128,0,6,3,0,128,1,2,129,0,160,2,0,192,160,2,64,1,153,2,0,128,1,2,128,192,1,2,1,64,180,2,63,249,152,2,0,192,1,2,191,255,131,2,1,128,182,2,64,3,25,2,0,0,6,2,128,128,1,3,0,192,1,2,129,64,65,2,1,0,160,0,64,0,151,2,0,0,189,2,0,0,41,0,0,0,2,16,0,6,32,12,10,13,9,11,16,0,0,0,0,0,7,0,4,115,105,122,101,0,0,1,45,0,0,1,43,0,0,8,105,110,99,108,117,100,101,63,0,0,2,91,93,0,0,2,60,61,0,0,2,62,61,0,0,0,0,198,0,4,0,7,0,0,0,32,0,0,0,38,1,63,255,131,2,0,0,6,2,0,0,32,2,0,64,175,1,129,0,1,0,64,1,151,2,0,192,1,2,0,64,175,1,129,0,1,2,0,0,61,2,128,0,6,3,0,192,1,2,128,192,160,2,0,128,160,2,64,1,153,2,0,128,1,2,128,192,1,2,1,0,180,2,63,249,152,2,0,192,1,2,191,255,131,2,1,64,182,2,64,3,25,2,0,0,6,2,128,128,1,3,0,192,1,2,129,64,65,2,0,192,160,0,64,0,151,2,0,0,189,2,0,0,41,0,0,0,2,16,0,7,32,12,10,13,9,11,0,16,0,0,0,0,0,6,0,4,115,105,122,101,0,0,1,45,0,0,8,105,110,99,108,117,100,101,63,0,0,2,91,93,0,0,2,60,61,0,0,2,62,61,0,0,0,1,11,0,4,0,7,0,0,0,46,0,0,0,38,1,63,255,131,2,0,0,6,2,0,0,32,2,0,64,175,1,129,0,1,0,64,1,151,2,0,128,1,2,0,128,173,1,1,0,1,2,0,0,61,2,128,0,6,3,0,128,1,2,129,0,160,2,0,192,160,2,64,1,153,2,0,128,1,2,128,192,1,2,1,64,180,2,63,249,152,0,64,1,151,2,0,192,1,2,0,64,175,1,129,0,1,2,0,0,189,2,128,0,6,3,0,192,1,2,129,0,160,2,0,192,160,2,64,1,153,2,0,128,1,2,128,192,1,2,1,64,180,2,63,249,152,2,0,192,1,2,191,255,131,2,1,128,182,2,64,3,25,2,0,0,6,2,128,128,1,3,0,192,1,2,129,64,65,2,1,0,160,0,64,0,151,2,0,1,61,2,0,0,41,0,0,0,3,16,0,6,32,12,10,13,9,11,16,0,7,32,12,10,13,9,11,0,16,0,0,0,0,0,7,0,4,115,105,122,101,0,0,1,45,0,0,1,43,0,0,8,105,110,99,108,117,100,101,63,0,0,2,91,93,0,0,2,60,61,0,0,2,62,61,0,0,0,0,100,0,3,0,5,0,0,0,14,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,2,0,0,6,1,128,64,178,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,6,2,0,128,1,1,128,128,160,1,128,0,41,0,0,0,0,0,0,0,3,0,6,108,115,116,114,105,112,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,100,0,3,0,5,0,0,0,14,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,2,0,0,6,1,128,64,178,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,6,2,0,128,1,1,128,128,160,1,128,0,41,0,0,0,0,0,0,0,3,0,6,114,115,116,114,105,112,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,99,0,3,0,5,0,0,0,14,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,2,0,0,6,1,128,64,178,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,6,2,0,128,1,1,128,128,160,1,128,0,41,0,0,0,0,0,0,0,3,0,5,115,116,114,105,112,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,65,0,3,0,5,0,0,0,7,2,0,0,38,1,128,0,6,1,128,0,32,2,0,64,1,2,0,0,32,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,8,100,111,119,110,99,97,115,101,0,0,3,60,61,62,0,69,78,68,0,0,0,0,8,0,0,82,73,84,69,48,48,48,49,191,38,0,0,3,222,77,65,84,90,48,48,48,48,73,82,69,80,0,0,3,192,48,48,48,48,0,9,0,0,0,0,0,47,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,4,80,114,111,99,0,0,0,0,108,0,1,0,2,0,0,0,14,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,4,0,3,61,61,61,0,0,5,121,105,101,108,100,0,0,7,116,111,95,112,114,111,99,0,0,5,99,117,114,114,121,0,0,0,0,55,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,55,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,1,134,0,7,0,12,0,0,0,60,0,16,0,38,0,64,0,151,0,64,1,151,3,128,0,6,3,128,0,32,0,129,192,1,3,128,0,6,4,0,3,64,3,128,64,33,1,129,192,1,3,128,192,1,4,0,64,1,3,128,128,160,0,129,192,1,3,128,0,6,3,128,192,32,3,192,17,153,3,128,0,6,3,128,0,32,2,1,192,1,3,129,0,1,4,63,255,131,3,129,0,182,3,192,1,153,3,128,64,1,4,1,0,1,3,129,64,160,3,192,4,152,3,129,0,1,4,63,255,131,3,129,128,179,3,192,2,153,3,128,192,1,4,1,0,1,3,128,128,160,4,0,64,1,3,129,192,181,3,192,7,25,3,128,0,6,4,0,4,145,4,128,0,61,5,0,64,1,4,130,128,62,5,0,0,189,4,130,128,62,5,0,192,1,5,129,0,1,5,0,128,160,4,130,128,62,5,0,1,61,4,130,128,62,3,130,1,32,2,128,0,6,3,128,0,6,4,0,5,64,3,130,128,33,3,1,192,1,3,129,128,1,3,130,192,32,3,128,0,41,0,0,0,3,16,0,27,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,16,0,5,32,102,111,114,32,16,0,1,41,0,0,0,12,0,5,97,114,105,116,121,0,0,6,108,97,109,98,100,97,0,0,2,91,93,0,0,7,108,97,109,98,100,97,63,0,0,2,62,61,0,0,2,33,61,0,0,1,60,0,0,1,62,0,0,5,114,97,105,115,101,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,112,114,111,99,0,0,4,99,97,108,108,0,0,0,0,77,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,1,2,63,255,131,1,128,0,179,1,192,2,25,1,128,64,1,1,128,64,32,1,128,128,175,0,64,0,151,1,128,64,1,1,128,0,41,0,0,0,0,0,0,0,3,0,1,60,0,0,2,45,64,0,0,1,45,0,0,0,0,59,0,3,0,5,0,0,0,8,0,16,0,38,0,64,0,151,0,64,0,151,0,128,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,112,114,111,99,0,0,0,0,121,0,4,0,7,0,0,0,20,0,8,0,38,2,0,64,21,2,128,64,1,2,0,0,172,1,129,0,1,2,0,192,1,2,0,64,32,2,128,64,149,2,0,128,182,2,64,3,25,2,1,64,149,2,129,64,55,3,0,192,1,2,129,128,56,2,0,255,160,0,64,1,151,2,1,128,149,2,128,192,1,2,0,192,160,2,0,0,41,0,0,0,0,0,0,0,4,0,1,43,0,0,4,115,105,122,101,0,0,2,62,61,0,0,2,91,93,0,69,78,68,0,0,0,0,8,0,0,82,73,84,69,48,48,48,49,95,93,0,0,4,103,77,65,84,90,48,48,48,48,73,82,69,80,0,0,4,73,48,48,48,48,0,8,0,0,0,0,0,45,0,1,0,2,0,0,0,4,0,128,0,5,0,128,0,68,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,6,75,101,114,110,101,108,0,0,0,0,185,0,1,0,3,0,0,0,26,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,1,145,1,0,2,132,0,129,0,160,0,192,2,153,0,128,0,72,1,0,8,192,0,129,128,70,0,128,0,5,0,64,3,151,0,128,0,72,1,0,10,192,0,129,128,70,0,128,0,72,1,0,12,192,0,129,64,70,0,128,0,5,1,0,0,41,0,0,0,0,0,0,0,7,0,5,112,114,105,110,116,0,0,4,112,117,116,115,0,0,1,112,0,0,6,75,101,114,110,101,108,0,0,11,114,101,115,112,111,110,100,95,116,111,63,0,0,7,115,112,114,105,110,116,102,0,0,6,112,114,105,110,116,102,0,0,0,0,146,0,5,0,8,0,0,0,21,0,8,0,38,1,191,255,131,2,128,64,1,2,128,0,32,2,1,64,1,0,64,4,151,2,128,0,6,3,0,64,1,3,128,192,1,3,0,128,160,3,0,192,32,2,128,64,160,2,128,192,1,2,129,0,173,1,129,64,1,2,128,192,1,3,1,0,1,2,129,64,179,2,191,249,152,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,6,0,4,115,105,122,101,0,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,0,2,91,93,0,0,4,116,111,95,115,0,0,1,43,0,0,1,60,0,0,0,0,232,0,6,0,8,0,0,0,39,0,8,0,38,1,191,255,131,3,0,64,1,3,0,0,32,2,1,128,1,0,64,10,23,3,0,64,1,3,128,192,1,3,0,64,160,3,0,128,32,2,129,128,1,3,0,0,6,3,129,64,1,3,0,192,160,3,1,64,1,3,191,255,3,3,0,64,160,3,128,0,61,3,1,0,160,3,64,1,153,3,0,0,6,3,128,0,61,3,0,192,160,3,0,192,1,3,1,64,173,1,129,128,1,3,0,192,1,3,129,0,1,3,1,128,179,3,63,244,24,3,1,0,1,3,191,255,131,3,1,192,178,3,64,1,153,3,0,0,6,3,128,0,61,3,0,192,160,0,0,0,5,0,0,0,41,0,0,0,1,16,0,1,10,0,0,0,8,0,4,115,105,122,101,0,0,2,91,93,0,0,4,116,111,95,115,0,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,0,2,33,61,0,0,1,43,0,0,1,60,0,0,2,61,61,0,0,0,0,173,0,5,0,8,0,0,0,26,0,8,0,38,1,191,255,131,2,128,64,1,2,128,0,32,2,1,64,1,0,64,6,23,2,128,0,6,3,0,64,1,3,128,192,1,3,0,128,160,3,0,192,32,2,128,64,160,2,128,0,6,3,0,0,61,2,128,64,160,2,128,192,1,2,129,0,173,1,129,64,1,2,128,192,1,3,1,0,1,2,129,64,179,2,191,248,24,2,128,64,1,3,63,255,131,2,128,128,160,2,128,0,41,0,0,0,1,16,0,1,10,0,0,0,6,0,4,115,105,122,101,0,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,0,2,91,93,0,0,7,105,110,115,112,101,99,116,0,0,1,43,0,0,1,60,0,0,0,0,85,0,3,0,7,0,0,0,10,0,8,0,38,1,128,0,6,2,0,0,6,2,129,64,55,3,0,64,1,2,129,128,56,2,0,127,160,1,128,0,160,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,2,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,0,7,115,112,114,105,110,116,102,0,0,0,0,107,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,20,112,114,105,110,116,102,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,108,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,21,115,112,114,105,110,116,102,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,69,78,68,0,0,0,0,8,0,82,73,84,69,48,48,48,49,106,86,0,0,2,16,77,65,84,90,48,48,48,48,73,82,69,80,0,0,1,242,48,48,48,48,0,5,0,0,0,0,0,47,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,4,72,97,115,104,0,0,0,0,49,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,6,109,101,114,103,101,33,0,0,0,0,178,0,3,0,5,0,0,0,20,2,0,0,166,1,128,64,1,2,0,0,132,1,128,0,160,1,192,0,153,0,64,1,151,1,128,0,6,2,0,0,61,1,128,128,160,1,128,128,1,1,192,2,25,1,128,64,1,2,0,3,64,1,128,192,33,0,64,1,151,1,128,64,1,2,0,5,64,1,128,192,33,0,0,0,6,0,0,0,41,0,0,0,1,16,0,32,99,97,110,39,116,32,99,111,110,118,101,114,116,32,97,114,103,117,109,101,110,116,32,105,110,116,111,32,72,97,115,104,0,0,0,4,0,11,114,101,115,112,111,110,100,95,116,111,63,0,0,7,116,111,95,104,97,115,104,0,0,5,114,97,105,115,101,0,0,8,101,97,99,104,95,107,101,121,0,0,0,0,141,0,3,0,8,0,0,0,23,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,192,5,25,1,128,128,21,2,0,64,1,2,128,0,6,3,0,64,1,2,128,128,160,3,0,64,21,3,128,64,1,3,0,128,160,1,128,65,160,0,64,1,151,1,128,64,21,2,0,64,1,1,128,128,160,2,0,0,6,2,128,64,1,3,0,192,1,2,0,193,32,1,128,0,41,0,0,0,0,0,0,0,4,0,8,104,97,115,95,107,101,121,63,0,0,4,99,97,108,108,0,0,2,91,93,0,0,3,91,93,61,0,0,0,0,67,0,3,0,7,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,2,0,0,6,2,128,64,1,3,0,192,1,2,0,65,32,1,128,0,41,0,0,0,0,0,0,0,2,0,2,91,93,0,0,3,91,93,61,0,69,78,68,0,0,0,0,8,82,73,84,69,48,48,48,49,8,107,0,0,8,173,77,65,84,90,48,48,48,48,73,82,69,80,0,0,8,143,48,48,48,48,0,16,0,0,0,0,0,49,0,1,0,2,0,0,0,4,0,128,0,5,0,128,0,68,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,10,69,110,117,109,101,114,97,98,108,101,0,0,0,0,188,0,1,0,2,0,0,0,23,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,6,192,0,128,64,70,0,128,0,72,1,0,10,192,0,128,128,70,0,128,0,72,1,0,14,192,0,128,192,70,0,128,0,72,1,0,18,192,0,129,0,70,0,128,0,72,1,0,22,192,0,129,64,70,0,128,0,72,1,0,26,192,0,129,128,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,7,0,4,100,114,111,112,0,0,10,100,114,111,112,95,119,104,105,108,101,0,0,4,116,97,107,101,0,0,10,116,97,107,101,95,119,104,105,108,101,0,0,9,101,97,99,104,95,99,111,110,115,0,0,10,101,97,99,104,95,115,108,105,99,101,0,0,8,103,114,111,117,112,95,98,121,0,0,0,0,248,0,4,0,7,0,0,0,23,2,0,0,38,2,0,64,1,2,128,0,145,2,0,0,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,1,145,3,0,0,61,2,0,129,32,2,0,64,1,2,191,255,131,2,1,0,179,2,64,2,25,2,0,0,6,2,128,2,145,3,0,0,189,2,0,129,32,1,129,0,55,2,0,0,6,2,128,3,64,2,1,128,33,1,128,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,29,97,116,116,101,109,112,116,32,116,111,32,100,114,111,112,32,110,101,103,97,116,105,118,101,32,115,105,122,101,0,0,0,7,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,1,60,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,86,0,3,0,5,0,0,0,13,2,0,0,38,1,128,64,21,2,63,255,131,1,128,0,178,1,192,2,25,1,128,192,21,2,0,64,1,1,128,64,160,0,64,1,151,1,128,64,21,1,128,128,175,1,128,64,22,1,128,0,41,0,0,0,0,0,0,0,3,0,2,61,61,0,0,2,60,60,0,0,1,45,0,0,0,0,63,0,4,0,6,0,0,0,9,0,0,0,166,2,1,0,55,2,128,0,8,1,1,0,1,1,129,64,1,2,0,0,6,2,128,3,64,2,0,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,112,0,3,0,5,0,0,0,19,2,0,0,38,1,128,192,21,1,128,0,32,1,192,2,25,1,128,64,21,2,0,64,1,1,128,64,160,1,128,0,32,1,192,1,25,1,128,0,7,1,128,192,22,1,128,192,21,1,192,2,25,1,128,128,21,2,0,64,1,1,128,128,160,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,3,0,1,33,0,0,4,99,97,108,108,0,0,2,60,60,0,0,0,0,248,0,4,0,7,0,0,0,23,2,0,0,38,2,0,64,1,2,128,0,145,2,0,0,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,1,145,3,0,0,61,2,0,129,32,2,0,64,1,2,191,255,131,2,1,0,179,2,64,2,25])
.concat([2,0,0,6,2,128,2,145,3,0,0,189,2,0,129,32,1,129,0,55,2,0,0,6,2,128,3,64,2,1,128,33,1,128,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,29,97,116,116,101,109,112,116,32,116,111,32,116,97,107,101,32,110,101,103,97,116,105,118,101,32,115,105,122,101,0,0,0,7,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,1,60,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,81,0,3,0,5,0,0,0,11,2,0,0,38,1,128,192,21,1,128,0,32,2,0,64,21,1,128,64,182,1,192,0,153,1,128,64,41,1,128,192,21,2,0,64,1,1,128,128,160,1,128,0,41,0,0,0,0,0,0,0,3,0,4,115,105,122,101,0,0,2,62,61,0,0,2,60,60,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,80,0,3,0,5,0,0,0,12,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,0,153,0,64,1,23,1,128,128,21,1,128,128,41,1,128,128,21,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,2,60,60,0,0,0,0,232,0,4,0,7,0,0,0,23,2,0,0,166,2,0,64,1,2,128,0,145,2,0,0,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,1,145,3,0,0,61,2,0,129,32,2,0,64,1,2,191,255,131,2,1,0,180,2,64,2,25,2,0,0,6,2,128,2,145,3,0,0,189,2,0,129,32,1,129,0,55,2,0,0,6,2,128,3,64,2,1,128,33,2,0,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,12,105,110,118,97,108,105,100,32,115,105,122,101,0,0,0,7,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,2,60,61,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,150,0,3,0,5,0,0,0,23,2,0,0,38,1,128,192,21,1,128,0,32,2,0,64,21,1,128,64,178,1,192,1,25,1,128,192,21,1,128,128,32,1,128,192,21,2,0,64,1,1,128,192,160,1,128,192,21,1,128,0,32,2,0,64,21,1,128,64,178,1,192,2,153,1,128,128,21,2,0,192,21,2,1,64,32,1,129,0,160,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,6,0,4,115,105,122,101,0,0,2,61,61,0,0,5,115,104,105,102,116,0,0,2,60,60,0,0,4,99,97,108,108,0,0,3,100,117,112,0,0,0,1,30,0,4,0,7,0,0,0,31,2,0,0,166,2,0,64,1,2,128,0,145,2,0,0,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,1,145,3,0,0,61,2,0,129,32,2,0,64,1,2,191,255,131,2,1,0,180,2,64,2,25,2,0,0,6,2,128,2,145,3,0,0,189,2,0,129,32,1,129,0,55,2,0,0,6,2,128,3,64,2,1,128,33,2,0,192,1,2,1,192,32,2,64,1,25,2,0,0,5,0,64,1,151,2,0,128,1,2,128,192,1,2,2,0,160,2,0,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,18,105,110,118,97,108,105,100,32,115,108,105,99,101,32,115,105,122,101,0,0,0,9,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,2,60,61,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,101,97,99,104,0,0,6,101,109,112,116,121,63,0,0,4,99,97,108,108,0,0,0,0,112,0,3,0,5,0,0,0,17,2,0,0,38,1,128,192,21,2,0,64,1,1,128,0,160,1,128,192,21,1,128,64,32,2,0,64,21,1,128,128,178,1,192,3,25,1,128,128,21,2,0,192,21,1,128,192,160,1,128,192,55,1,128,192,22,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,4,0,2,60,60,0,0,4,115,105,122,101,0,0,2,61,61,0,0,4,99,97,108,108,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,63,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,138,0,4,0,8,0,0,0,22,2,0,0,38,2,0,64,21,2,128,64,1,2,0,0,160,1,129,0,1,2,0,128,21,2,128,192,1,2,0,64,160,2,64,3,25,2,0,128,21,2,128,192,1,2,0,128,160,2,128,64,1,2,0,192,160,0,64,3,23,2,0,64,1,2,1,0,183,2,128,128,21,3,0,192,1,3,129,0,1,2,129,1,32,2,0,0,41,0,0,0,0,0,0,0,5,0,4,99,97,108,108,0,0,4,107,101,121,63,0,0,2,91,93,0,0,2,60,60,0,0,3,91,93,61,0,69,78,68,0,0,0,0,8,0,0,0,82,73,84,69,48,48,48,49,127,107,0,0,8,174,77,65,84,90,48,48,48,48,73,82,69,80,0,0,8,144,48,48,48,48,0,18,0,0,0,0,0,48,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,5,65,114,114,97,121,0,0,0,0,205,0,1,0,2,0,0,0,29,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,12,192,0,128,192,70,0,128,0,72,1,0,14,192,0,129,0,70,0,128,0,72,1,0,20,192,0,129,64,70,0,128,0,72,1,0,24,192,0,129,128,70,0,128,0,72,1,0,28,192,0,129,192,70,0,128,0,72,1,0,30,192,0,130,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,9,0,5,117,110,105,113,33,0,0,4,117,110,105,113,0,0,1,45,0,0,1,124,0,0,1,38,0,0,7,102,108,97,116,116,101,110,0,0,8,102,108,97,116,116,101,110,33,0,0,7,99,111,109,112,97,99,116,0,0,8,99,111,109,112,97,99,116,33,0,0,0,0,205,0,4,0,6,0,0,0,31,0,0,0,38,2,0,0,6,2,0,0,32,1,1,0,1,1,129,0,55,0,64,4,23,2,0,192,1,2,128,128,1,2,128,128,32,2,0,64,160,2,0,128,1,2,128,192,1,2,129,0,32,2,0,192,160,2,0,128,1,2,1,64,32,2,191,255,131,2,1,128,181,2,63,249,152,2,0,192,1,2,1,64,32,2,128,0,6,2,129,64,32,2,1,192,178,2,64,1,25,2,0,0,5,0,64,1,151,2,0,0,6,2,128,192,1,2,2,0,160,2,0,0,41,0,0,0,0,0,0,0,9,0,3,100,117,112,0,0,2,60,60,0,0,5,115,104,105,102,116,0,0,6,100,101,108,101,116,101,0,0,4,108,97,115,116,0,0,4,115,105,122,101,0,0,1,62,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,62,0,3,0,4,0,0,0,7,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,1,128,64,32,1,0,0,41,0,0,0,0,0,0,0,2,0,3,100,117,112,0,0,5,117,110,105,113,33,0,0,0,0,199,0,5,0,9,0,0,0,25,2,0,0,38,2,128,64,1,2,128,0,32,3,0,1,17,2,128,64,178,2,192,0,153,0,64,4,151,2,128,0,6,3,0,2,17,3,128,0,61,4,0,64,1,4,0,0,32,3,130,0,62,4,0,0,189,3,130,0,62,2,128,193,32,1,129,64,63,2,1,64,55,2,128,64,1,3,0,3,64,2,129,64,33,2,128,0,6,3,0,5,64,2,129,64,33,2,0,0,41,0,0,0,2,16,0,14,99,97,110,39,116,32,99,111,110,118,101,114,116,32,16,0,11,32,105,110,116,111,32,65,114,114,97,121,0,0,0,6,0,5,99,108,97,115,115,0,0,2,61,61,0,0,5,65,114,114,97,121,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,54,0,3,0,7,0,0,0,7,2,0,0,38,1,128,0,7,2,0,192,21,2,128,64,1,3,0,192,1,2,0,1,32,1,128,0,41,0,0,0,0,0,0,0,1,0,3,91,93,61,0,0,0,0,74,0,3,0,5,0,0,0,11,2,0,0,38,1,128,192,21,2,0,64,1,1,128,0,160,1,192,1,25,1,128,0,5,0,64,1,151,1,129,0,21,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,2,91,93,0,0,2,60,60,0,0,0,0,204,0,4,0,8,0,0,0,25,2,0,0,38,2,0,64,1,2,0,0,32,2,128,1,17,2,0,64,178,2,64,0,153,0,64,4,151,2,0,0,6,2,128,2,17,3,0,0,61,3,128,64,1,3,128,0,32,3,1,192,62,3,128,0,189,3,1,192,62,2,0,193,32,2,0,0,6,2,128,64,1,2,1,64,172,1,129,0,1,2,0,192,1,2,1,128,32,2,64,0,152,2,0,192,1,2,0,0,41,0,0,0,2,16,0,14,99,97,110,39,116,32,99,111,110,118,101,114,116,32,16,0,11,32,105,110,116,111,32,65,114,114,97,121,0,0,0,7,0,5,99,108,97,115,115,0,0,2,61,61,0,0,5,65,114,114,97,121,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,1,43,0,0,5,117,110,105,113,33,0,0,0,0,199,0,5,0,9,0,0,0,25,2,0,0,38,2,128,64,1,2,128,0,32,3,0,1,17,2,128,64,178,2,192,0,153,0,64,4,151,2,128,0,6,3,0,2,17,3,128,0,61,4,0,64,1,4,0,0,32,3,130,0,62,4,0,0,189,3,130,0,62,2,128,193,32,1,129,64,63,2,1,64,55,2,128,64,1,3,0,3,64,2,129,64,33,2,128,0,6,3,0,5,64,2,129,64,33,2,0,0,41,0,0,0,2,16,0,14,99,97,110,39,116,32,99,111,110,118,101,114,116,32,16,0,11,32,105,110,116,111,32,65,114,114,97,121,0,0,0,6,0,5,99,108,97,115,115,0,0,2,61,61,0,0,5,65,114,114,97,121,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,54,0,3,0,7,0,0,0,7,2,0,0,38,1,128,0,7,2,0,192,21,2,128,64,1,3,0,192,1,2,0,1,32,1,128,0,41,0,0,0,0,0,0,0,1,0,3,91,93,61,0,0,0,0,95,0,3,0,5,0,0,0,14,2,0,0,38,1,128,192,21,2,0,64,1,1,128,0,160,1,192,3,153,1,129,0,21,2,0,64,1,1,128,64,160,1,128,192,21,2,0,64,1,1,128,128,160,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,2,60,60,0,0,6,100,101,108,101,116,101,0,0,0,0,63,0,4,0,6,0,0,0,9,0,16,0,38,0,64,0,151,0,64,0,151,0,128,0,5,1,129,0,55,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,186,0,3,0,7,0,0,0,29,2,0,0,38,1,128,64,1,2,0,0,145,1,128,0,160,1,192,3,25,1,128,64,21,1,128,128,32,1,192,1,152,1,128,64,21,2,63,255,131,1,128,192,181,1,192,6,153,1,128,192,21,2,0,64,1,2,128,64,21,2,128,128,32,2,192,1,25,2,128,0,5,0,64,1,23,2,128,64,21,2,129,64,175,2,1,0,160,1,129,128,172,1,128,192,22,0,64,1,151,1,128,192,21,2,0,64,1,1,129,192,160,1,128,0,41,0,0,0,0,0,0,0,8,0,5,105,115,95,97,63,0,0,5,65,114,114,97,121,0,0,4,110,105,108,63,0,0,1,62,0,0,7,102,108,97,116,116,101,110,0,0,1,45,0,0,1,43,0,0,2,60,60,0,0,0,0,105,0,5,0,7,0,0,0,17,0,16,0,38,0,64,0,151,0,64,0,151,0,128,0,5,1,128,0,8,2,1,64,55,2,128,0,6,3,0,3,64,2,128,0,33,2,128,192,1,2,192,2,25,2,128,0,6,3,1,0,1,2,128,64,160,0,64,0,151,2,128,0,5,2,128,0,41,0,0,0,0,0,0,0,2,0,4,101,97,99,104,0,0,7,114,101,112,108,97,99,101,0,0,0,0,194,0,3,0,7,0,0,0,31,2,0,0,38,1,128,64,1,2,0,0,145,1,128,0,160,1,192,3,25,1,128,64,21,1,128,128,32,1,192,1,152,1,128,64,21,2,63,255,131,1,128,192,181,1,192,7,153,1,129,0,21,2,0,64,1,2,128,64,21,2,128,128,32,2,192,1,25,2,128,0,5,0,64,1,23,2,128,64,21,2,129,64,175,2,1,0,160,1,129,128,172,1,129,0,22,1,128,0,7,1,128,192,22,0,64,1,151,1,129,0,21,2,0,64,1,1,129,192,160,1,128,0,41,0,0,0,0,0,0,0,8,0,5,105,115,95,97,63,0,0,5,65,114,114,97,121,0,0,4,110,105,108,63,0,0,1,62,0,0,7,102,108,97,116,116,101,110,0,0,1,45,0,0,1,43,0,0,2,60,60,0,0,0,0,65,0,3,0,4,0,0,0,7,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,1,128,64,32,1,0,0,41,0,0,0,0,0,0,0,2,0,3,100,117,112,0,0,8,99,111,109,112,97,99,116,33,0,0,0,0,119,0,3,0,5,0,0,0,17,0,0,0,38,1,128,0,6,2,0,3,64,1,128,0,33,1,0,192,1,1,128,128,1,1,128,64,32,2,0,0,6,2,0,64,32,1,128,128,178,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,6,2,0,128,1,1,128,192,160,1,128,0,41,0,0,0,0,0,0,0,4,0,6,115,101,108,101,99,116,0,0,4,115,105,122,101,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,45,0,3,0,5,0,0,0,5,2,0,0,38,1,128,64,1,2,0,0,5,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,2,33,61,0,69,78,68,0,0,0,0,8,0,0,36,0,0,0,35,0,0,0,0,0,0,0,116,119,1,0,2,0,0,0,204,118,1,0,3,0,0,0,120,146,1,0,4,0,0,0,216,144,1,0,10,0,0,0,248,117,1,0,8,0,0,0,36,117,1,0,9,0,0,0,8,116,1,0,11,0,0,0,88,115,1,0,12,0,0,0,140,114,1,0,13,0,0,0,32,113,1,0,6,0,0,0,140,130,1,0,14,0,0,0,52,112,1,0,15,0,0,0,188,110,1,0,16,0,0,0,152,109,1,0,17,0,0,0,120,108,1,0,19,0,0,0,144,107,1,0,21,0,0,0,156,106,1,0,255,0,0,0,0,0,0,0,82,73,84,69,48,48,48,49,188,85,0,0,0,152,77,65,84,90,48,48,48,48,73,82,69,80,0,0,0,122,48,48,48,48,0,2,0,0,0,0,0,44,0,1,0,3,0,0,0,4,0,192,2,3,1,0,3,64,0,128,0,33,0,0,0,74,0,0,0,0,0,0,0,1,0,5,116,105,109,101,115,0,0,0,0,62,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,61,0,128,0,160,0,128,0,41,0,0,0,1,16,0,16,82,117,98,121,32,105,115,32,97,119,101,115,111,109,101,33,0,0,0,1,0,4,112,117,116,115,0,69,78,68,0,0,0,0,8,115,116,101,112,95,114,97,116,105,111,61,0,79,80,95,117,110,107,110,111,119,110,32,37,100,9,37,100,9,37,100,9,37,100,10,0,116,111,95,104,97,115,104,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,37,115,0,0,79,80,95,69,80,79,80,9,37,100,10,0,72,97,115,104,0,0,0,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,58,34,0,0,45,0,0,0,44,32,0,0,79,80,95,80,79,80,69,82,82,9,37,100,10,0,0,0,117,110,100,101,102,105,110,101,100,32,109,101,116,104,111,100,32,39,37,83,39,32,102,111,114,32,99,108,97,115,115,32,39,37,83,39,0,0,0,0,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,58,10,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,79,80,95,82,65,73,83,69,9,82,37,100,10,0,0,0,109,101,116,104,111,100,32,96,37,83,39,32,110,111,116,32,100,101,102,105,110,101,100,32,105,110,32,37,83,0,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,78,79,68,69,95,83,67,79,80,69,58,10,0,0,0,0,79,80,95,82,69,83,67,85,69,9,82,37,100,10,0,0,105,110,100,101,120,32,37,83,32,111,117,116,32,111,102,32,97,114,114,97,121,0,0,0,119,114,111,110,103,32,99,111,110,115,116,97,110,116,32,110,97,109,101,32,37,83,0,0,100,111,58,10,0,0,0,0,79,80,95,79,78,69,82,82,9,37,48,51,100,10,0,0,117,110,100,101,102,105,110,101,100,32,109,101,116,104,111,100,32,39,37,83,39,32,102,111,114,32,37,83,0,0,0,0,115,116,114,105,110,103,32,40,37,83,41,32,116,111,111,32,98,105,103,32,102,111,114,32,105,110,116,101,103,101,114,0,105,110,58,10,0,0,0,0,79,80,95,69,80,85,83,72,9,58,73,40,37,100,41,10,0,0,0,0,78,111,77,101,116,104,111,100,69,114,114,111,114,0,0,0,110,101,119,0,112,111,115,116,58,10,0,0,79,80,95,69,82,82,9,76,40,37,100,41,10,0,0,0,110,42,0,0,114,101,115,116,58,10,0,0,79,80,95,84,67,76,65,83,83,9,82,37,100,10,0,0,60,61,62,0,96,37,83,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,0,0,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,99,108,97,115,115,0,0,0,0,83,0,0,0,110,117,109,98,101,114,101,100,40,37,83,41,32,97,102,116,101,114,32,117,110,110,117,109,98,101,114,101,100,40,37,83,41,0,0,0,116,111,95,105,110,116,0,0,64,0,0,0,66,69,71,73,78,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,77,82,66,95,84,84,95,70,76,79,65,84,0,0,0,0,97,116,97,110,0,0,0,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,101,110,100,0,100,111,117,98,108,101,32,114,101,115,117,109,101,0,0,0,84,114,117,101,67,108,97,115,115,0,0,0,45,73,110,102,105,110,105,116,121,0,0,0,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,84,121,112,101,69,114,114,111,114,0,0,0,61,61,0,0,112,114,101,58,10,0,0,0,79,80,95,83,67,76,65,83,83,9,82,37,100,9,82,37,100,10,0,0,124,98,0,0,118,97,114,58,10,0,0,0,116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,80,114,111,99,32,111,98,106,101,99,116,32,119,105,116,104,111,117,116,32,97,32,98,108,111,99,107,0,115,116,101,112,95,114,97,116,105,111,0,0,79,80,95,69,88,69,67,9,82,37,100,9,73,40,37,100,41,10,0,0,35,60,63,63,63,63,63,63,58,0,0,0,101,120,99,101,112,116,105,111,110,32,99,108,97,115,115,47,111,98,106,101,99,116,32,101,120,112,101,99,116,101,100,0,78,79,68,69,95,70,79,82,58,10,0,0,79,80,95,77,79,68,85,76,69,9,82,37,100,9,58,37,115,10,0,0,35,60,77,111,100,117,108,101,58,0,0,0,36,0,0,0,111,0,0,0,78,79,68,69,95,85,78,84,73,76,58,10,0,0,0,0,79,80,95,67,76,65,83,83,9,82,37,100,9,58,37,115,10,0,0,0,95,95,97,116,116,97,99,104,101,100,95,95,0,0,0,0,78,79,68,69,95,87,72,73,76,69,58,10,0,0,0,0,79,80,95,79,67,76,65,83,83,9,82,37,100,10,0,0,110,111,32,98,108,111,99,107,32,103,105,118,101,110,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,9,91,37,100,93,32,37,115,58,37,100,10,0,0,0,0,99,97,115,101,58,10,0,0,79,80,95,72,65,83,72,9,82,37,100,9,82,37,100,9,37,100,10,0,73,110,100,101,120,69,114,114,111,114,0,0,110,38,0,0,78,79,68,69,95,67,65,83,69,58,10,0,79,80,95,83,84,82,67,65,84,9,82,37,100,9,82,37,100,10,0,0,111,0,0,0,78,79,68,69,95,79,82,58,10,0,0,0,79,80,95,83,84,82,73,78,71,9,82,37,100,9,37,115,10,0,0,0,105,108,108,101,103,97,108,32,114,97,100,105,120,32,37,83,0,0,0,0,77,111,100,117,108,101,46,99,111,110,115,116,97,110,116,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,0,78,79,68,69,95,65,78,68,58,10,0,0,79,80,95,65,80,79,83,84,9,82,37,100,9,37,100,9,37,100,10,0,61,61,61,0,116,104,101,110,58,10,0,0,79,80,95,65,82,69,70,9,82,37,100,9,82,37,100,9,37,100,10,0,109,114,98,95,109,97,108,108,111,99,0,0,61,61,0,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,115,0,111,0,0,0,42,0,0,0,118,97,108,117,101,32,103,105,118,101,110,32,116,119,105,99,101,32,45,32,37,83,36,0,70,105,120,110,117,109,0,0,35,60,80,114,111,99,58,0,83,104,105,102,116,105,110,103,0,0,0,0,77,82,66,95,84,84,95,85,78,68,69,70,0,0,0,0,97,99,111,115,0,0,0,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,70,105,98,101,114,0,98,101,103,105,110,0,0,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,105,110,115,112,101,99,116,0,70,108,111,97,116,68,111,109,97,105,110,69,114,114,111,114,0,0,0,0,124,83,38,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,99,111,110,115,116,97,110,116,32,37,83,0,0,0,69,110,117,109,101,114,97,98,108,101,0,0,99,111,110,100,58,10,0,0,79,80,95,65,82,89,80,85,83,72,9,82,37,100,9,82,37,100,10,0,100,101,102,105,110,101,95,109,101,116,104,111,100,0,0,0,78,79,68,69,95,73,70,58,10,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,105,110,116,101,114,118,97,108,95,114,97,116,105,111,61,0,79,80,95,65,82,89,67,65,84,9,82,37,100,9,82,37,100,10,0,0,114,101,109,111,118,101,95,99,111,110,115,116,0,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,98,108,107,61,38,37,115,10,0,0,0,0,79,80,95,65,82,82,65,89,9,82,37,100,9,82,37,100,9,37,100,10,0,0,0,0,99,111,110,115,116,97,110,116,115,0,0,0,117,110,101,120,112,101,99,116,101,100,32,114,101,116,114,121,0,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,112,111,115,116,32,109,97,110,100,97,116,111,114,121,32,97,114,103,115,58,10,0,0,0,79,80,95,83,84,79,80,10,0,0,0,0,99,111,110,115,116,95,115,101,116,0,0,0,114,101,115,116,61,42,37,115,10,0,0,0,79,80,95,69,81,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,99,111,110,115,116,95,103,101,116,0,0,0,110,111,32,115,117,112,101,114,32,99,108,97,115,115,32,102,111,114,32,96,37,83,58,58,37,83,39,44,32,79,98,106,101,99,116,32,97,115,115,117,109,101,100,0,9,91,37,100,93,32,37,115,58,37,100,58,105,110,32,37,115,10,0,0,37,115,61,0,79,80,95,71,69,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,110,101,103,97,116,105,118,101,32,97,114,103,117,109,101,110,116,0,0,0,99,111,110,115,116,95,100,101,102,105,110,101,100,63,0,0,111,112,116,105,111,110,97,108,32,97,114,103,115,58,10,0,79,80,95,71,84,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,117,110,100,101,102,95,109,101,116,104,111,100,0,0,0,0,109,97,110,100,97,116,111,114,121,32,97,114,103,115,58,10,0,0,0,0,83,121,109,98,111,108,0,0,79,80,95,76,69,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,116,111,95,115,0,0,0,0,97,110,99,101,115,116,111,114,115,0,0,0,78,79,68,69,95,66,76,79,67,75,58,10,0,0,0,0,102,124,102,0,115,116,114,105,110,103,32,115,105,122,101,115,32,116,111,111,32,98,105,103,0,0,0,0,79,80,95,76,84,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,97,108,105,97,115,95,109,101,116,104,111,100,0,0,0,0,101,110,115,117,114,101,58,10,0,0,0,0,105,124,105,105,105,105,105,105,0,0,0,0,110,101,103,97,116,105,118,101,32,97,114,103,117,109,101,110,116,0,0,0,79,80,95,68,73,86,9,82,37,100,9,58,37,115,9,37,100,10,0,0,117,116,99,0,116,111,95,115,0,0,0,0,37,83,32,105,115,32,110,111,116,32,115,116,114,117,99,116,32,109,101,109,98,101,114,0,101,110,100,95,119,105,116,104,63,0,0,0,109,97,108,102,111,114,109,101,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,32,45,32,37,42,91,48,45,57,93,0,0,0,60,61,62,0,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,116,121,112,101,0,0,0,116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,80,114,111,99,32,111,98,106,101,99,116,32,119,105,116,104,111,117,116,32,97,32,98,108,111,99,107,0,77,82,66,95,84,84,95,83,89,77,66,79,76,0,0,0,10,0,0,0,97,115,105,110,0,0,0,0,42,0,0,0,69,110,117,109,101,114,97,98,108,101,0,0,99,105,105,100,120,0,0,0,116,111,95,115,0,0,0,0,78,79,68,69,95,69,78,83,85,82,69,58,10,0,0,0,84,111,111,32,108,97,114,103,101,32,101,120,112,111,114,110,101,110,116,46,0,0,0,0,102,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,32,115,104,111,117,108,100,32,116,97,107,101,32,115,97,109,101,32,99,108,97,115,115,32,111,98,106,101,99,116,0,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,99,111,110,115,116,95,109,105,115,115,105,110,103,0,0,0,105,0,0,0,79,80,95,77,85,76,9,82,37,100,9,58,37,115,9,37,100,10,0,0,114,101,109,111,118,101,95,109,101,116,104,111,100,0,0,0,101,108,115,101,58,10,0,0,83,97,116,0,45,0,0,0,38,0,0,0,105,110,116,101,114,118,97,108,95,114,97,116,105,111,0,0,79,80,95,83,85,66,73,9,82,37,100,9,58,37,115,9,37,100,10,0,114,101,109,111,118,101,95,99,108,97,115,115,95,118,97,114,105,97,98,108,101,0,0,0,101,120,99,101,112,116,105,111,110,0,0,0,114,101,115,99,117,101,32,98,111,100,121,58,10,0,0,0,70,114,105,0,82,101,103,101,120,112,32,99,108,97,115,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,0,79,80,95,83,85,66,9,82,37,100,9,58,37,115,9,37,100,10,0,0,112,117,98,108,105,99,0,0,117,110,101,120,112,101,99,116,101,100,32,114,101,100,111,0,101,120,99,95,118,97,114,58,10,0,0,0,84,104,117,0,60,61,62,0,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,79,80,95,65,68,68,73,9,82,37,100,9,58,37,115,9,37,100,10,0,112,114,111,116,101,99,116,101,100,0,0,0,104,97,110,100,108,101,32,99,108,97,115,115,101,115,58,10,0,0,0,0,87,101,100,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,49,41,0,0,0,0,79,80,95,65,68,68,9,82,37,100,9,58,37,115,9,37,100,10,0,0,112,114,105,118,97,116,101,0,37,83,32,105,115,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,0,0,0,95,95,99,108,97,115,115,105,100,95,95,0,9,91,37,100,93,32,37,115,58,37,100,58,105,110,32,37,115,37,115,37,115,10,0,0,114,101,115,99,117,101,58,10,0,0,0,0,84,117,101,0,111,124,111,0,79,80,95,77,69,84,72,79,68,9,82,37,100,9,58,37,115,10,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,109,111,100,117,108,101,95,101,118,97,108,0,116,114,97,99,101,58,10,0,98,111,100,121,58,10,0,0,77,111,110,0,111,0,0,0,79,80,95,82,65,78,71,69,9,82,37,100,9,82,37,100,9,37,100,10,0,0,0,0,109,101,116,104,111,100,95,100,101,102,105,110,101,100,63,0,78,79,68,69,95,82,69,83,67,85,69,58,10,0,0,0,83,117,110,0,101,120,116,101,110,100,101,100,0,0,0,0,124,83,0,0,79,80,95,76,65,77,66,68,65,9,82,37,100,9,73,40,37,43,100,41,9,37,100,10,0,0,0,0,105,110,115,116,97,110,99,101,95,109,101,116,104,111,100,115,0,0,0,0,83,116,114,105,110,103,0,0,78,79,68,69,95,66,69,71,73,78,58,10,0,0,0,0,68,101,99,0,101,120,116,101,110,100,95,111,98,106,101,99,116,0,0,0,83,0,0,0,79,80,95,66,76,75,80,85,83,72,9,82,37,100,9,37,100,58,37,100,58,37,100,58,37,100,10,0,105,110,99,108,117,100,101,100,95,109,111,100,117,108,101,115,0,0,0,0,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,0,78,111,118,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,97,116,32,108,101,97,115,116,32,49,41,0,0,82,101,103,101,120,112,0,0,9,98,114,111,107,101,110,10,0,0,0,0,110,111,119,0,105,110,99,108,117,100,101,100,0,0,0,0,73,110,100,101,120,69,114,114,111,114,0,0,115,116,97,114,116,95,119,105,116,104,63,0,119,105,100,116,104,32,116,111,111,32,98,105,103,0,0,0,111,0,0,0,108,97,109,98,100,97,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,77,82,66,95,84,84,95,70,73,88,78,85,77,0,0,0,78,101,120,116,32,116,111,107,101,110,32,105,115,0,0,0,110,111,32,98,108,111,99,107,32,103,105,118,101,110,0,0,116,97,110,0,99,97,110,39,116,32,121,105,101,108,100,32,102,114,111,109,32,114,111,111,116,32,102,105,98,101,114,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,99,108,97,115,115,0,0,0,0,110,105,108,63,0,0,0,0,108,97,115,116,112,99,0,0,67,108,101,97,110,117,112,58,32,112,111,112,112,105,110,103,0,0,0,0,105,110,102,0,79,99,116,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,111,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,95,95,99,108,97,115,115,105,100,95,95,0,116,121,112,101,32,109,105,115,109,97,116,99,104,58,32,37,83,32,103,105,118,101,110,0,9,98,114,101,97,107,10,0,99,108,97,115,115,95,101,118,97,108,0,0,67,108,101,97,110,117,112,58,32,100,105,115,99,97,114,100,105,110,103,32,108,111,111,107,97,104,101,97,100,0,0,0,83,101,112,0,96,37,83,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,0,0,0,124,111,105,0,105,110,115,112,101,99,116,0,100,105,115,97,98,108,101,0,9,114,101,116,117,114,110,10,0,0,0,0,97,112,112,101,110,100,95,102,101,97,116,117,114,101,115,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,109,101,109,111,114,121,32,101,120,104,97,117,115,116,101,100,0,0,0,0,65,117,103,0,110,42,38,0,98,121,116,101,115,0,0,0,10,0,0,0,105,110,99,108,117,100,101,63,0,0,0,0,117,110,101,120,112,101,99,116,101,100,32,110,101,120,116,0,69,114,114,111,114,58,32,112,111,112,112,105,110,103,0,0,74,117,108,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,70,108,111,97,116,32,105,110,116,111,32,73,110,116,101,103,101,114,0,0,0,0,115,105,110,103,108,101,116,111,110,95,109,101,116,104,111,100,115,0,0,0,105,110,115,112,101,99,116,0,105,110,115,112,101,99,116,0,79,80,95,82,69,84,85,82,78,9,82,37,100,0,0,0,105,110,99,108,117,100,101,0,42,0,0,0,69,114,114,111,114,58,32,100,105,115,99,97,114,100,105,110,103,0,0,0,41,0,0,0,74,117,110,0,119,105,100,116,104,40,37,83,41,32,62,32,40,37,83,58,115,105,122,101,111,102,40,109,114,98,95,105,110,116,41,42,67,72,65,82,95,66,73,84,45,49,41,0,115,101,110,100,0,0,0,0,110,116,101,114,109,32,37,115,32,40,0,0,116,111,107,101,110,32,37,115,32,40,0,0,117,112,99,97,115,101,33,0,32,32,32,36,37,100,32,61,32,0,0,0,79,80,95,69,78,84,69,82,9,37,100,58,37,100,58,37,100,58,37,100,58,37,100,58,37,100,58,37,100,10,0,0,82,101,100,117,99,105,110,103,32,115,116,97,99,107,32,98,121,32,114,117,108,101,32,37,100,32,40,108,105,110,101,32,37,108,117,41,58,10,0,0,101,120,116,101,110,100,101,100,0,0,0,0,105,110,104,101,114,105,116,101,100,0,0,0,98,111,116,104,32,98,108,111,99,107,32,97,114,103,32,97,110,100,32,97,99,116,117,97,108,32,98,108,111,99,107,32,103,105,118,101,110,0,0,0,98,108,111,99,107,32,97,114,103,117,109,101,110,116,32,115,104,111,117,108,100,32,110,111,116,32,98,101,32,103,105,118,101,110,0,0,35,0,0,0,32,37,100,0,83,116,97,99,107,32,110,111,119,0,0,0,110,111,110,101,0,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,0,0,0,0,116,101,114,109,115,0,0,0,77,97,121,0,102,0,0,0,114,101,115,112,111,110,100,95,116,111,63,0,36,64,51,48,0,0,0,0,110,108,0,0,117,112,99,97,115,101,0,0,116,101,114,109,0,0,0,0,79,80,95,65,82,71,65,82,89,9,82,37,100,9,37,100,58,37,100,58,37,100,58,37,100,10,0,0,116,114,97,105,108,101,114,0,105,0,0,0,101,120,116,101,110,100,95,111,98,106,101,99,116,0,0,0,114,98,114,97,99,107,101,116,0,0,0,0,114,112,97,114,101,110,0,0,111,112,116,95,110,108,0,0,111,112,116,95,116,101,114,109,115,0,0,0,100,111,116,95,111,114,95,99,111,108,111,110,0,0,0,0,45,62,32,36,36,32,61,0,111,112,101,114,97,116,105,111,110,51,0,0,65,112,114,0,110,97,110,0,114,101,109,111,118,101,95,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,0,0,0,0,111,112,101,114,97,116,105,111,110,50,0,0,111,112,101,114,97,116,105,111,110,0,0,0,116,111,95,115,121,109,0,0,97,115,115,111,99,0,0,0,79,80,95,83,85,80,69,82,9,82,37,100,9,37,100,10,0,0,0,0,97,115,115,111,99,115,0,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,95,115,101,116,0,0,97,115,115,111,99,95,108,105,115,116,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,36,64,50,57,0,0,0,0,115,105,110,103,108,101,116,111,110,0,0,0,111,112,116,95,102,95,98,108,111,99,107,95,97,114,103,0,102,95,98,108,111,99,107,95,97,114,103,0,98,108,107,97,114,103,95,109,97,114,107,0,99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,32,109,101,116,104,111,100,32,102,111,114,32,108,105,116,101,114,97,108,115,0,0,77,97,114,0,111,0,0,0,112,117,98,108,105,99,95,109,101,116,104,111,100,115,0,0,102,95,114,101,115,116,95,97,114,103,0,0,114,101,115,116,97,114,103,95,109,97,114,107,0,0,0,0,116,111,95,102,0,0,0,0,102,95,111,112,116,97,114,103,0,0,0,0,79,80,95,84,65,73,76,67,65,76,76,9,82,37,100,9,58,37,115,9,37,100,10,0,102,95,98,108,111,99,107,95,111,112,116,97,114,103,0,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,95,103,101,116,0,0,102,95,98,108,111,99,107,95,111,112,116,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,102,95,111,112,116,0,0,0,116,111,95,115,116,114,0,0,102,95,97,114,103,0,0,0,102,95,97,114,103,95,105,116,101,109,0,0,102,95,110,111,114,109,95,97,114,103,0,0,102,95,98,97,100,95,97,114,103,0,0,0,99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,32,109,101,116,104,111,100,32,102,111,114,32,40,41,46,0,0,0,70,101,98,0,124,105,0,0,112,114,111,116,101,99,116,101,100,95,109,101,116,104,111,100,115,0,0,0,102,95,97,114,103,115,0,0,102,95,97,114,103,108,105,115,116,0,0,0,116,111,95,105,0,0,0,0,36,64,50,56,0,0,0,0,79,80,95,83,69,78,68,66,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,0,115,117,112,101,114,99,108,97,115,115,0,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,95,100,101,102,105,110,101,100,63,0,98,97,99,107,114,101,102,0,97,114,114,97,121,32,115,105,122,101,32,116,111,111,32,98,105,103,0,0,118,97,114,95,114,101,102,0,118,97,114,95,108,104,115,0,118,97,114,105,97,98,108,101,0,0,0,0,110,117,109,101,114,105,99,0,115,121,109,98,111,108,115,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,0,0,74,97,110,0,116,114,117,110,99,97,116,101,0,0,0,0,112,114,105,118,97,116,101,95,109,101,116,104,111,100,115,0,115,121,109,0,98,97,115,105,99,95,115,121,109,98,111,108,0,0,0,0,115,117,98,33,0,0,0,0,115,121,109,98,111,108,0,0,79,80,95,83,69,78,68,9,82,37,100,9,58,37,115,9,37,100,10,0,119,111,114,100,115,0,0,0,109,107,116,105,109,101,0,0,115,116,114,117,99,116,32,115,105,122,101,32,100,105,102,102,101,114,115,32,40,37,83,32,114,101,113,117,105,114,101,100,32,37,83,32,103,105,118,101,110,41,0,0,115,117,112,101,114,99,108,97,115,115,0,0,60,60,0,0,104,101,114,101,100,111,99,95,98,111,100,121,0,0,0,0,102,108,97,103,32,97,102,116,101,114,32,112,114,101,99,105,115,105,111,110,0,0,0,0,114,101,99,117,114,115,105,118,101,32,97,114,114,97,121,32,106,111,105,110,0,0,0,0,116,111,95,97,0,0,0,0,104,101,114,101,100,111,99,95,98,111,100,105,101,115,0,0,124,111,0,0,38,0,0,0,111,112,116,95,104,101,114,101,100,111,99,95,98,111,100,105,101,115,0,0,77,82,66,95,84,84,95,84,82,85,69,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,37,115,32,0,91,93,0,0,99,111,115,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,104,101,114,101,100,111,99,0,105,0,0,0,101,120,112,101,99,116,101,100,32,82,97,110,103,101,46,0,114,101,103,101,120,112,0,0,124,0,0,0,78,111,77,101,116,104,111,100,69,114,114,111,114,0,0,0,120,115,116,114,105,110,103,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,103,108,111,98,97,108,32,118,97,114,105,97,98,108,101,0,45,105,110,102,0,0,0,0,114,111,117,110,100,0,0,0,111,98,106,101,99,116,95,105,100,0,0,0,42,0,0,0,64,50,55,0,111,111,0,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,37,83,32,105,110,32,37,83,0,0,0,115,116,114,105,110,103,95,105,110,116,101,114,112,0,0,0,115,117,98,0,115,116,114,105,110,103,95,114,101,112,0,0,79,80,95,74,77,80,78,79,84,9,82,37,100,9,37,48,51,100,10,0,115,116,114,105,110,103,0,0,110,101,119,0,108,105,116,101,114,97,108,0,124,83,0,0,111,112,116,95,101,110,115,117,114,101,0,0,101,120,99,95,118,97,114,0,101,120,99,95,108,105,115,116,0,0,0,0,111,112,116,95,114,101,115,99,117,101,0,0,99,97,115,101,115,0,0,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,0,0,85,84,67,32,0,0,0,0,105,110,102,105,110,105,116,101,63,0,0,0,110,105,108,63,0,0,0,0,99,97,115,101,95,98,111,100,121,0,0,0,36,64,50,54,0,0,0,0,115,112,108,105,116,0,0,0,48,48,48,49,0,0,0,0,101,110,97,98,108,101,0,0,36,64,50,53,0,0,0,0,79,80,95,74,77,80,73,70,9,82,37,100,9,37,48,51,100,10,0,0,98,114,97,99,101,95,98,108,111,99,107,0,109,101,116,104,111,100,95,109,105,115,115,105,110,103,0,0,109,101,116,104,111,100,95,99,97,108,108,0,91,46,46,46,93,0,0,0,98,108,111,99])
.concat([107,95,99,97,108,108,0,0,36,64,50,52,0,0,0,0,100,111,95,98,108,111,99,107,0,0,0,0,108,97,109,98,100,97,95,98,111,100,121,0,102,95,108,97,114,103,108,105,115,116,0,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,99,111,110,115,116,97,110,116,0,0,0,0,37,115,32,37,115,32,37,48,50,100,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,32,37,115,37,100,0,0,102,108,111,111,114,0,0,0,109,101,116,104,111,100,115,0,98,118,97,114,0,0,0,0,98,118,95,100,101,99,108,115,0,0,0,0,115,108,105,99,101,0,0,0,111,112,116,95,98,118,95,100,101,99,108,0,79,80,95,74,77,80,9,9,37,48,51,100,10,0,0,0,98,108,111,99,107,95,112,97,114,97,109,95,100,101,102,0,33,0,0,0,111,112,116,95,98,108,111,99,107,95,112,97,114,97,109,0,101,113,108,63,0,0,0,0,98,108,111,99,107,95,112,97,114,97,109,0,102,95,109,97,114,103,115,0,102,95,109,97,114,103,95,108,105,115,116,0,102,95,109,97,114,103,0,0,99,97,108,108,0,0,0,0,102,111,114,95,118,97,114,0,37,100,0,0,76,79,67,65,76,0,0,0,98,0,0,0,102,105,110,105,116,101,63,0,107,105,110,100,95,111,102,63,0,0,0,0,111,112,116,95,101,108,115,101,0,0,0,0,105,102,95,116,97,105,108,0,115,99,97,110,0,0,0,0,112,114,105,109,97,114,121,95,118,97,108,117,101,0,0,0,79,80,95,83,69,84,67,86,9,37,115,9,82,37,100,10,0,0,0,0,64,50,51,0,116,111,95,115,121,109,0,0,105,110,105,116,105,97,108,105,122,101,0,0,36,64,50,50,0,0,0,0,61,61,0,0,64,50,49,0,64,50,48,0,64,49,57,0,64,49,56,0,64,49,55,0,40,110,117,108,108,41,0,0,85,84,67,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,37,83,32,105,110,116,111,32,37,83,0,0,0,0,99,101,105,108,0,0,0,0,105,115,95,97,63,0,0,0,36,64,49,54,0,0,0,0,36,64,49,53,0,0,0,0,114,105,110,100,101,120,0,0,36,64,49,52,0,0,0,0,79,80,95,71,69,84,67,86,9,82,37,100,9,37,115,10,0,0,0,0,36,64,49,51,0,0,0,0,67,108,97,115,115,0,0,0,115,117,112,101,114,99,108,97,115,115,32,109,105,115,109,97,116,99,104,32,102,111,114,32,99,108,97,115,115,32,37,83,0,0,0,0,36,64,49,50,0,0,0,0,116,111,95,115,0,0,0,0,36,64,49,49,0,0,0,0,46,0,0,0,64,49,48,0,36,64,57,0,36,64,56,0,36,64,55,0,110,111,110,101,0,0,0,0,68,97,116,97,0,0,0,0,70,108,111,97,116,0,0,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,115,0,0,112,114,105,109,97,114,121,0,109,114,104,115,0,0,0,0,114,101,118,101,114,115,101,33,0,0,0,0,97,114,103,115,0,0,0,0,79,80,95,83,69,84,85,80,86,65,82,9,82,37,100,9,37,100,9,37,100,10,0,0,111,112,116,95,98,108,111,99,107,95,97,114,103,0,0,0,65,0,0,0,77,111,100,117,108,101,0,0,98,108,111,99,107,95,97,114,103,0,0,0,105,110,115,112,101,99,116,0,64,54,0,0,99,111,109,109,97,110,100,95,97,114,103,115,0,0,0,0,99,97,108,108,95,97,114,103,115,0,0,0,111,112,116,95,99,97,108,108,95,97,114,103,115,0,0,0,111,112,116,95,112,97,114,101,110,95,97,114,103,115,0,0,99,97,108,108,0,0,0,0,78,111,116,32,97,32,118,97,108,105,100,32,116,105,109,101,46,0,0,0,116,111,95,104,97,115,104,0,70,105,108,101,0,0,0,0,100,105,118,109,111,100,0,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,115,101,116,0,0,0,104,97,115,104,0,0,0,0,112,97,114,101,110,95,97,114,103,115,0,0,97,114,101,102,95,97,114,103,115,0,0,0,114,101,118,101,114,115,101,0,97,114,103,95,118,97,108,117,101,0,0,0,79,80,95,71,69,84,85,80,86,65,82,9,82,37,100,9,37,100,9,37,100,10,0,0,97,114,103,0,79,98,106,101,99,116,0,0,114,101,115,119,111,114,100,115,0,0,0,0,117,110,115,104,105,102,116,0,111,112,0,0,36,64,53,0,117,110,100,101,102,95,108,105,115,116,0,0,102,115,121,109,0,0,0,0,102,110,97,109,101,0,0,0,98,108,111,99,107,32,103,105,118,101,110,32,116,111,32,121,105,101,108,100,0,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,72,97,115,104,0,0,0,0,82,97,110,103,101,0,0,0,105,110,115,112,101,99,116,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,103,101,116,0,0,0,42,0,0,0,99,112,97,116,104,0,0,0,99,110,97,109,101,0,0,0,114,101,112,108,97,99,101,0,108,104,115,0,79,80,95,83,69,84,73,86,9,37,115,9,82,37,100,10,0,0,0,0,109,108,104,115,95,110,111,100,101,0,0,0,66,97,115,105,99,79,98,106,101,99,116,0,109,108,104,115,95,112,111,115,116,0,0,0,115,108,105,99,101,0,0,0,109,108,104,115,95,108,105,115,116,0,0,0,109,108,104,115,95,105,116,101,109,0,0,0,115,116,114,105,110,103,32,99,111,110,116,97,105,110,115,32,110,117,108,108,32,98,121,116,101,0,0,0,109,108,104,115,95,98,97,115,105,99,0,0,109,108,104,115,95,105,110,110,101,114,0,0,109,108,104,115,0,0,0,0,109,111,100,117,108,101,32,100,101,102,105,110,105,116,105,111,110,32,105,110,32,109,101,116,104,111,100,32,98,111,100,121,0,0,0,0,124,105,105,105,105,105,105,105,0,0,0,0,111,110,101,32,104,97,115,104,32,114,101,113,117,105,114,101,100,0,0,0,83,116,114,105,110,103,0,0,116,111,95,115,0,0,0,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,100,101,102,105,110,101,100,63,0,0,111,42,0,0,99,111,109,109,97,110,100,0,36,64,52,0,109,97,116,99,104,0,0,0,99,109,100,95,98,114,97,99,101,95,98,108,111,99,107,0,79,80,95,71,69,84,73,86,9,82,37,100,9,37,115,10,0,0,0,0,98,108,111,99,107,95,99,111,109,109,97,110,100,0,0,0,99,111,110,115,116,97,110,116,32,37,83,32,110,111,116,32,100,101,102,105,110,101,100,0,99,111,109,109,97,110,100,95,99,97,108,108,0,0,0,0,115,105,122,101,0,0,0,0,101,120,112,114,95,118,97,108,117,101,0,0,101,120,112,114,0,0,0,0,99,111,109,109,97,110,100,95,97,115,103,110,0,0,0,0,36,64,51,0,115,116,109,116,0,0,0,0,99,108,97,115,115,32,100,101,102,105,110,105,116,105,111,110,32,105,110,32,109,101,116,104,111,100,32,98,111,100,121,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,99,108,97,115,115,0,0,0,0,105,110,118,97,108,105,100,32,114,97,100,105,120,32,37,83,0,0,0,0,72,97,115,104,0,0,0,0,116,111,95,102,0,0,0,0,105,110,115,116,97,110,99,101,95,111,102,63,0,0,0,0,125,0,0,0,115,116,109,116,115,0,0,0,99,111,109,112,115,116,109,116,0,0,0,0,105,110,116,101,114,110,0,0,98,111,100,121,115,116,109,116,0,0,0,0,79,80,95,83,69,84,77,67,78,83,84,9,82,37,100,58,58,37,115,9,82,37,100,10,0,0,0,0,64,50,0,0,108,111,99,97,108,0,0,0,83,116,114,117,99,116,0,0,110,111,0,0,99,111,110,99,97,116,0,0,116,111,112,95,115,116,109,116,0,0,0,0,102,108,97,103,32,97,102,116,101,114,32,119,105,100,116,104,0,0,0,0,124,111,0,0,115,104,105,102,116,0,0,0,116,111,112,95,115,116,109,116,115,0,0,0,36,109,114,98,95,105,95,114,97,110,100,95,115,101,101,100,0,0,0,0,112,114,111,99,0,0,0,0,77,82,66,95,84,84,95,70,82,69,69,0,42,38,0,0,116,111,112,95,99,111,109,112,115,116,109,116,0,0,0,0,78,111,119,32,97,116,32,101,110,100,32,111,102,32,105,110,112,117,116,46,10,0,0,0,115,105,110,0,36,64,49,0,121,105,101,108,100,0,0,0,99,97,108,108,0,0,0,0,111,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,112,114,111,103,114,97,109,0,94,0,0,0,110,111,32,98,108,111,99,107,32,103,105,118,101,110,0,0,36,97,99,99,101,112,116,0,78,97,78,0,126,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,46,37,100,0,65,114,114,97,121,0,0,0,115,117,99,99,0,0,0,0,105,110,115,116,97,110,99,101,95,101,118,97,108,0,0,0,61,62,0,0,99,97,110,39,116,32,100,117,112,32,37,83,0,0,0,0,39,92,110,39,0,0,0,0,111,0,0,0,62,0,0,0,39,59,39,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,39,93,39,0,79,80,95,71,69,84,77,67,78,83,84,9,82,37,100,9,82,37,100,58,58,37,115,10,0,0,0,0,39,41,39,0,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,37,83,32,110,111,116,32,100,101,102,105,110,101,100,32,102,111,114,32,37,83,0,0,0,0,39,40,39,0,114,105,110,100,101,120,0,0,39,96,39,0,39,44,39,0,39,46,39,0,39,91,39,0,39,125,39,0,60,0,0,0,111,0,0,0,96,37,83,39,32,105,115,32,110,111,116,32,97,32,115,116,114,117,99,116,32,109,101,109,98,101,114,0,37,100,0,0,80,114,111,99,0,0,0,0,110,101,120,116,0,0,0,0,105,110,115,112,101,99,116,0,44,32,0,0,39,123,39,0,116,76,65,83,84,95,84,79,75,69,78,0,105,110,105,116,105,97,108,105,122,101,0,0,82,73,84,69,0,0,0,0,105,100,95,99,111,114,101,95,115,101,116,95,112,111,115,116,101,120,101,0,115,116,97,114,116,0,0,0,79,80,95,83,69,84,67,79,78,83,84,9,58,37,115,9,82,37,100,10,0,0,0,0,105,100,95,99,111,114,101,95,100,101,102,105,110,101,95,115,105,110,103,108,101,116,111,110,95,109,101,116,104,111,100,0,99,97,110,110,111,116,32,114,101,109,111,118,101,32,37,83,32,102,111,114,32,37,83,0,105,100,95,99,111,114,101,95,100,101,102,105,110,101,95,109,101,116,104,111,100,0,0,0,114,101,118,101,114,115,101,33,0,0,0,0,105,100,95,99,111,114,101,95,117,110,100,101,102,95,109,101,116,104,111,100,0,0,0,0,105,100,95,99,111,114,101,95,115,101,116,95,118,97,114,105,97,98,108,101,95,97,108,105,97,115,0,0,105,100,95,99,111,114,101,95,115,101,116,95,109,101,116,104,111,100,95,97,108,105,97,115,0,0,0,0,98,117,103,58,32,0,0,0,105,100,67,70,85,78,67,0,105,100,73,70,85,78,67,0,62,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,114,101,100,101,102,105,110,105,110,103,32,99,111,110,115,116,97,110,116,32,83,116,114,117,99,116,58,58,37,83,0,0,83,67,108,97,115,115,0,0,104,97,115,104,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,123,0,0,0,105,100,82,101,115,112,111,110,100,95,116,111,0,0,0,0,105,100,78,85,76,76,0,0,105,110,100,101,120,0,0,0,39,126,39,0,79,80,95,71,69,84,67,79,78,83,84,9,82,37,100,9,58,37,115,10,0,0,0,0,39,33,39,0,110,0,0,0,116,85,77,73,78,85,83,95,78,85,77,0,114,101,118,101,114,115,101,0,39,37,39,0,39,47,39,0,39,42,39,0,39,45,39,0,61,61,61,0,39,43,39,0,38,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,105,100,101,110,116,105,102,105,101,114,32,37,83,32,110,101,101,100,115,32,116,111,32,98,101,32,99,111,110,115,116,97,110,116,0,0,37,42,115,0,105,67,108,97,115,115,0,0,101,113,108,63,0,0,0,0,104,97,115,104,0,0,0,0,123,46,46,46,125,0,0,0,39,38,39,0,39,94,39,0,105,110,99,108,117,100,101,63,0,0,0,0,39,124,39,0,79,80,95,83,69,84,71,76,79,66,65,76,9,58,37,115,9,82,37,100,10,0,0,0,39,60,39,0,39,62,39,0,42,0,0,0,116,111,95,115,0,0,0,0,114,101,112,108,97,99,101,0,39,58,39,0,39,63,39,0,39,61,39,0,116,76,79,87,69,83,84,0,116,76,73,84,69,82,65,76,95,68,69,76,73,77,0,0,122,111,110,101,0,0,0,0,94,0,0,0,98,114,111,107,101,110,32,109,101,109,98,101,114,115,0,0,73,110,102,0,67,108,97,115,115,0,0,0,62,62,0,0,101,120,116,101,110,100,0,0,123,125,0,0,116,72,69,82,69,68,79,67,95,69,78,68,0,0,0,0,116,72,69,82,69,68,79,67,95,66,69,71,0,0,0,0,104,97,115,104,0,0,0,0,116,76,65,77,66,69,71,0,79,80,95,71,69,84,71,76,79,66,65,76,9,82,37,100,9,58,37,115,10,0,0,0,116,83,84,82,73,78,71,95,68,86,65,82,0,0,0,0,110,110,0,0,115,117,112,101,114,99,108,97,115,115,32,109,117,115,116,32,98,101,32,97,32,67,108,97,115,115,32,40,37,83,32,103,105,118,101,110,41,0,0,0,116,88,83,84,82,73,78,71,95,66,69,71,0,0,0,0,112,117,115,104,0,0,0,0,116,83,84,82,73,78,71,95,66,69,71,0,108,97,115,116,112,99,0,0,116,83,89,77,66,79,76,83,95,66,69,71,0,0,0,0,116,87,79,82,68,83,95,66,69,71,0,0,116,82,69,71,69,88,80,95,66,69,71,0,116,83,89,77,66,69,71,0,121,101,97,114,0,0,0,0,124,0,0,0,115,116,114,117,99,116,32,115,105,122,101,32,100,105,102,102,101,114,115,0,78,97,78,0,79,98,106,101,99,116,0,0,60,60,0,0,101,113,117,97,108,63,0,0,101,113,108,63,0,0,0,0,116,76,65,77,66,68,65,0,116,65,77,80,69,82,0,0,103,115,117,98,33,0,0,0,116,83,84,65,82,0,0,0,79,80,95,76,79,65,68,70,9,82,37,100,10,0,0,0,116,76,66,82,65,67,69,95,65,82,71,0,60,61,62,0,99,97,110,39,116,32,109,97,107,101,32,115,117,98,99,108,97,115,115,32,111,102,32,67,108,97,115,115,0,0,0,0,116,76,66,82,65,67,69,0,112,111,112,0,116,76,66,82,65,67,75,0,116,82,80,65,82,69,78,0,116,76,80,65,82,69,78,95,65,82,71,0,116,76,80,65,82,69,78,0,116,65,83,83,79,67,0,0,121,100,97,121,0,0,0,0,37,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,46,46,0,0,77,111,100,117,108,101,0,0,94,0,0,0,101,113,108,63,0,0,0,0,116,111,95,115,0,0,0,0,116,79,80,95,65,83,71,78,0,0,0,0,116,67,79,76,79,78,51,0,103,115,117,98,0,0,0,0,116,67,79,76,79,78,50,0,79,80,95,76,79,65,68,84,9,82,37,100,10,0,0,0,116,82,83,72,70,84,0,0,99,97,110,39,116,32,109,97,107,101,32,115,117,98,99,108,97,115,115,32,111,102,32,115,105,110,103,108,101,116,111,110,32,99,108,97,115,115,0,0,116,76,83,72,70,84,0,0,108,101,110,103,116,104,0,0,116,65,83,69,84,0,0,0,116,65,82,69,70,0,0,0,116,68,79,84,51,0,0,0,116,68,79,84,50,0,0,0,116,78,77,65,84,67,72,0,119,100,97,121,0,0,0,0,47,0,0,0,99,97,108,108,0,0,0,0,37,37,108,37,99,0,0,0,116,114,117,101,0,0,0,0,124,0,0,0,100,117,112,0,105,110,115,112,101,99,116,0,116,77,65,84,67,72,0,0,116,79,82,79,80,0,0,0,101,113,108,63,0,0,0,0,99,105,105,100,120,0,0,0,116,65,78,68,79,80,0,0,79,80,95,76,79,65,68,83,69,76,70,9,82,37,100,10,0,0,0,0,116,76,69,81,0,0,0,0,62,0,0,0,116,71,69,81,0,0,0,0,108,97,115,116,0,0,0,0,116,78,69,81,0,0,0,0,116,69,81,81,0,0,0,0,116,69,81,0,116,67,77,80,0,0,0,0,116,80,79,87,0,0,0,0,117,116,99,63,0,0,0,0,42,0,0,0,42,38,0,0,48,66,0,0,102,97,108,115,101,0,0,0,38,0,0,0,99,108,111,110,101,0,0,0,118,97,108,117,101,115,0,0,116,85,77,73,78,85,83,0,116,85,80,76,85,83,0,0,101,109,112,116,121,63,0,0,115,101,116,95,98,97,99,107,116,114,97,99,101,0,0,0,116,82,69,71,69,88,80,95,69,78,68,0,79,80,95,76,79,65,68,78,73,76,9,82,37,100,10,0,116,66,65,67,75,95,82,69,70,0,0,0,116,78,84,72,95,82,69,70,0,0,0,0,35,60,67,108,97,115,115,58,0,0,0,0,106,111,105,110,0,0,0,0,116,83,84,82,73,78,71,95,77,73,68,0,116,83,84,82,73,78,71,95,80,65,82,84,0,0,0,0,116,83,84,82,73,78,71,0,116,82,69,71,69,88,80,0,116,88,83,84,82,73,78,71,0,0,0,0,117,115,101,99,0,0,0,0,45,0,0,0,42,0,0,0,48,98,0,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,37,83,32,116,111,32,73,110,116,101,103,101,114,32,40,37,83,35,37,83,32,103,105,118,101,115,32,37,83,41,0,0,0,0,126,0,0,0,99,108,97,115,115,0,0,0,118,97,108,117,101,63,0,0,116,67,72,65,82,0,0,0,116,70,76,79,65,84,0,0,100,111,119,110,99,97,115,101,33,0,0,0,124,111,0,0,116,73,78,84,69,71,69,82,0,0,0,0,37,83,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,0,0,79,80,95,76,79,65,68,83,89,77,9,82,37,100,9,58,37,115,10,0,116,76,65,66,69,76,0,0,103,109,0,0,99,111,114,114,117,112,116,101,100,32,115,116,114,117,99,116,0,0,0,0,116,67,86,65,82,0,0,0,115,119,97,112,99,97,115,101,0,0,0,0,58,58,0,0,109,97,108,102,111,114,109,101,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,32,45,32,92,37,37,83,0,0,108,97,115,116,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,116,67,79,78,83,84,65,78,84,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,105,110,115,112,101,99,116,0,77,82,66,95,84,84,95,70,65,76,83,69,0,0,0,0,105,110,115,116,97,110,99,101,95,101,120,101,99,0,0,0,116,73,86,65,82,0,0,0,37,83,32,111,117,116,32,111,102,32,99,104,97,114,32,114,97,110,103,101,0,0,0,0,82,101,97,100,105,110,103,32,97,32,116,111,107,101,110,58,32,0,0,0,84,79,76,69,82,65,78,67,69,0,0,0,100,111,119,110,99,97,115,101,0,0,0,0,97,108,105,118,101,63,0,0,116,71,86,65,82,0,0,0,114,97,115,115,111,99,0,0,61,61,0,0,116,70,73,68,0,0,0,0,97,114,105,116,121,0,0,0,38,0,0,0,109,101,116,104,111,100,95,109,105,115,115,105,110,103,0,0,116,73,68,69,78,84,73,70,73,69,82,0,110,111,110,32,102,108,111,97,116,32,118,97,108,117,101,0,116,111,95,102,0,0,0,0,43,0,0,0,62,0,0,0,48,88,0,0,102,124,102,0,116,111,95,105,0,0,0,0,61,61,0,0,95,95,115,101,110,100,95,95,0,0,0,0,115,116,111,114,101,0,0,0,99,97,110,39,116,32,99,108,111,110,101,32,37,83,0,0,107,101,121,119,111,114,100,95,95,69,78,67,79,68,73,78,71,95,95,0,116,111,95,104,97,115,104,0,58,0,0,0,107,101,121,119,111,114,100,95,95,70,73,76,69,95,95,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,111,0,0,0,107,101,121,119,111,114,100,95,95,76,73,78,69,95,95,0,79,80,95,76,79,65,68,73,9,82,37,100,9,37,100,10,0,0,0,0,107,101,121,119,111,114,100,95,69,78,68,0,107,101,121,119,111,114,100,95,66,69,71,73,78,0,0,0,95,95,99,108,97,115,115,112,97,116,104,95,95,0,0,0,105,110,100,101,120,0,0,0,107,101,121,119,111,114,100,95,97,108,105,97,115,0,0,0,109,111,100,105,102,105,101,114,95,114,101,115,99,117,101,0,109,111,100,105,102,105,101,114,95,117,110,116,105,108,0,0,109,111,100,105,102,105,101,114,95,119,104,105,108,101,0,0,109,111,100,105,102,105,101,114,95,117,110,108,101,115,115,0,116,111,95,105,0,0,0,0,91,93,61,0,61,0,0,0,48,120,0,0,102,105,0,0,98,97,115,101,32,115,112,101,99,105,102,105,101,100,32,102,111,114,32,110,111,110,32,115,116,114,105,110,103,32,118,97,108,117,101,0,37,0,0,0,95,95,105,100,95,95,0,0,115,105,122,101,0,0,0,0,109,111,100,105,102,105,101,114,95,105,102,0,107,101,121,119,111,114,100,95,110,111,116,0,99,104,111,112,33,0,0,0,83,99,114,105,112,116,69,114,114,111,114,0,41,0,0,0,107,101,121,119,111,114,100,95,111,114,0,0,45,60,0,0,71,67,0,0,79,80,95,76,79,65,68,76,9,82,37,100,9,76,40,37,100,41,10,0,107,101,121,119,111,114,100,95,97,110,100,0,107,101,121,119,111,114,100,95,102,97,108,115,101,0,0,0,124,111,0,0,102,105,114,115,116,0,0,0,107,101,121,119,111,114,100,95,116,114,117,101,0,0,0,0,107,101,121,119,111,114,100,95,110,105,108,0,107,101,121,119,111,114,100,95,115,101,108,102,0,0,0,0,119,97,114,110,105,110,103,58,32,0,0,0,107,101,121,119,111,114,100,95,115,117,112,101,114,0,0,0,107,101,121,119,111,114,100,95,121,105,101,108,100,0,0,0,115,101,99,0,32,0,0,0,45,64,0,0,48,0,0,0,102,102,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,42,0,0,0,61,61,61,0,115,104,105,102,116,0,0,0,107,101,121,119,111,114,100,95,114,101,116,117,114,110,0,0,107,101,121,119,111,114,100,95,100,111,95,76,65,77,66,68,65,0,0,0,99,104,111,112,0,0,0,0,32,40,0,0,107,101,121,119,111,114,100,95,100,111,95,98,108,111,99,107,0,0,0,0,79,80,95,77,79,86,69,9,82,37,100,9,82,37,100,10,0,0,0,0,107,101,121,119,111,114,100,95,100,111,95,99,111,110,100,0,107,101,121,119,111,114,100,95,100,111,0,0,99,97,110,39,116,32,99,114,101,97,116,101,32,105,110,115,116,97,110,99,101,32,111,102,32,115,105,110,103,108,101,116,111,110,32,99,108,97,115,115,0,0,0,0,101,109,112,116,121,63,0,0,107,101,121,119,111,114,100,95,105,110,0,0,107,101,121,119,111,114,100,95,114,101,116,114,121,0,0,0,107,101,121,119,111,114,100,95,114,101,100,111,0,0,0,0,107,101,121,119,111,114,100,95,110,101,120,116,0,0,0,0,83,116,97,110,100,97,114,100,69,114,114,111,114,0,0,0,107,101,121,119,111,114,100,95,98,114,101,97,107,0,0,0,109,111,110,116,104,0,0,0,44,32,0,0,43,64,0,0,105,110,118,97,108,105,100,32,109,98,115,116,114,105,110,103,32,115,101,113,117,101,110,99,101,0,0,0,102,0,0,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,110,105,108,32,105,110,116,111,32,73,110,116,101,103,101,114,0,0,45,0,0,0,33,61,0,0,114,101,112,108,97,99,101,0,107,101,121,119,111,114,100,95,102,111,114,0,107,101,121,119,111,114,100,95,117,110,116,105,108,0,0,0,99,104,111,109,112,33,0,0,58,32,0,0,107,101,121,119,111,114,100,95,119,104,105,108,101,0,0,0,79,80,95,78,79,80,10,0,107,101,121,119,111,114,100,95,119,104,101,110,0,0,0,0,107,101,121,119,111,114,100,95,99,97,115,101,0,0,0,0,42,38,0,0,107,101,121,119,111,114,100,95,101,108,115,101,0,0,0,0,100,101,108,101,116,101,95,97,116,0,0,0,105,100,50,110,97,109,101,0,107,101,121,119,111,114,100,95,101,108,115,105,102,0,0,0,107,101,121,119,111,114,100,95,116,104,101,110,0,0,0,0,107,101,121,119,111,114,100,95,117,110,108,101,115,115,0,0,107,101,121,119,111,114,100,95,105,102,0,0,109,111,110,0,58,46,46,46,62,0,0,0,42,42,0,0,105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,0,0,0,101,114,102,99,0,0,0,0,101,113,108,63,0,0,0,0,43,0,0,0,61,61,0,0,109,101,109,98,101,114,63,0,107,101,121,119,111,114,100,95,101,110,100,0,107,101,121,119,111,114,100,95,101,110,115,117,114,101,0,0,99,104,111,109,112,0,0,0,58,0,0,0,107,101,121,119,111,114,100,95,114,101,115,99,117,101,0,0,37,48,51,100,32,0,0,0,107,101,121,119,111,114,100,95,98,101,103,105,110,0,0,0,107,101,121,119,111,114,100,95,117,110,100,101,102,0,0,0,117,110,100,101,102,105,110,101,100,32,109,101,116,104,111,100,32,39,37,83,39,32,102,111,114,32,99,108,97,115,115,32,37,83,0,0,84,121,112,101,69,114,114,111,114,0,0,0,107,101,121,119,111,114,100,95,100,101,102,0,99,111,110,99,97,116,0,0,40,117,110,107,110,111,119,110,41,0,0,0,107,101,121,119,111,114,100,95,109,111,100,117,108,101,0,0,107,101,121,119,111,114,100,95,99,108,97,115,115,0,0,0,36,117,110,100,101,102,105,110,101,100,0,0,101,114,114,111,114,0,0,0,109,105,110,0,35,60,115,116,114,117,99,116,32,0,0,0,62,62,0,0,37,99,32,114,101,113,117,105,114,101,115,32,97,32,99,104,97,114,97,99,116,101,114,0,99,111,117,110,116,95,111,98,106,101,99,116,115,0,0,0,101,114,102,0,116,111,95,102,0,0,0,0,70,105,120,110,117,109,0,0,115,105,110,103,108,101,116,111,110,95,99,108,97,115,115,0,108,101,110,103,116,104,0,0,36,101,110,100,0,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,44,32,117,110,101,120,112,101,99,116,101,100,32,37,115,44,32,101,120,112,101,99,116,105,110,103,32,37,115,32,111,114,32,37,115,32,111,114,32,37,115,32,111,114,32,37,115,0,99,97,112,105,116,97,108,105,122,101,33,0,108,105,110,101,0,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,44,32,117,110,101,120,112,101,99,116,101,100,32,37,115,44,32,101,120,112,101,99,116,105,110,103,32,37,115,32,111,114,32,37,115,32,111,114,32,37,115,0,0,0,105,114,101,112,32,37,100,32,110,114,101,103,115,61,37,100,32,110,108,111,99,97,108,115,61,37,100,32,112,111,111,108,115,61,37,100,32,115,121,109,115,61,37,100,10,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,44,32,117,110,101,120,112,101,99,116,101,100,32,37,115,44,32,101,120,112,101,99,116,105,110,103,32,37,115,32,111,114,32,37,115,0,111,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,44,32,117,110,101,120,112,101,99,116,101,100,32,37,115,44,32,101,120,112,101,99,116,105,110,103,32,37,115,0,0,0,99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,0,0,115,121,110,116,97,120,32,101,114,114,111,114,44,32,117,110,101,120,112,101,99,116,101,100,32,37,115,0,99,108,101,97,114,0,0,0,68,101,108,101,116,105,110,103,0,0,0,0,108,105,110,101,32,37,100,58,37,100,58,32,37,115,10,0,37,115,58,37,100,58,37,100,58,32,37,115,10,0,0,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,32,98,97,99,107,114,101,102,95,101,114,114,111,114,40,41,32,58,32,110,61,62,99,97,114,32,61,61,32,37,100,0,0,0,0,109,100,97,121,0,0,0,0,105,110,99,111,110,115,105,115,116,101,110,116,32,115,116,114,117,99,116,0,60,60,0,0,37,0,0,0,79,98,106,101,99,116,83,112,97,99,101,0,104,121,112,111,116,0,0,0,98,97,100,32,118,97,108,117,101,32,102,111,114,32,114,97,110,103,101,0,70,108,111,97,116,0,0,0,116,111,95,105,110,116,0,0,114,97,105,115,101,0,0,0,107,101,121,115,0,0,0,0,99,97,110,39,116,32,115,101,116,32,118,97,114,105,97,98,108,101,32,36,37,99,0,0,99,97,110,39,116,32,115,101,116,32,118,97,114,105,97,98,108,101,32,36,37,100,0,0,99,97,112,105,116,97,108,105,122,101,0,0,102,105,108,101,0,0,0,0,109,0,0,0,116,111,111,32,99,111,109,112,108,101,120,32,101,120,112,114,101,115,115,105,111,110,0,0,120,0,0,0,105,0,0,0,109,111,100,117,108,101,95,101,118,97,108,47,99,108,97,115,115,95,101,118,97,108,32,119,105,116,104,32,115,116,114,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,115,0,0,0,91,93,61,0,117,110,107,110,111,119,110,32,114,101,103,101,120,112,32,111,112,116,105,111,110,37,115,32,45,32,37,115,0,0,0,0,117,110,116,101,114,109,105,110,97,116,101,100,32,115,116,114,105,110,103,32,109,101,101,116,115,32,101,110,100,32,111,102,32,102,105,108,101,0,0,0,99,97,110,39,116,32,102,105,110,100,32,115,116,114,105,110,103,32,34,37,115,34,32,97,110,121,119,104,101,114,101,32,98,101,102,111,114,101,32,69,79,70,0,0,117,110,116,101,114,109,105,110,97,116,101,100,32,104,101,114,101,32,100,111,99,117,109,101,110,116,32,105,100,101,110,116,105,102,105,101,114,0,0,0,108,111,99,97,108,116,105,109,101,0,0,0,101,113,108,63,0,0,0,0,33,61,0,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,99,104,97,114,97,99,116,101,114,32,45,32,37,0,0,0,0,77,82,66,95,84,84,95,68,65,84,65,0,108,100,101,120,112,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,110,105,108,32,105,110,116,111,32,70,108,111,97,116,0,0,0,0,116,111,95,105,0,0,0,0,105,116,101,114,97,116,111,114,63,0,0,0,107,101,121,63,0,0,0,0,73,110,118,97,108,105,100,32,101,115,99,97,112,101,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,0,115,116,114,105,110,103,32,116,111,111,32,108,111,110,103,32,40,116,114,117,110,99,97,116,101,100,41,0,91,93,0,0,109,101,115,103,0,0,0,0,97,109,98,105,103,117,111,117,115,32,102,105,114,115,116,32,97,114,103,117,109,101,110,116,59,32,112,117,116,32,112,97,114,101,110,116,104,101,115,101,115,32,111,114,32,101,118,101,110,32,115,112,97,99,101,115,0,0,0,0,98,117,103,58,32,100,105,115,112,97,116,99,104,32,111,110,32,110,111,110,32,74,77,80,32,111,112,10,0,0,0,0,119,104,105,108,101,0,0,0,99,108,97,115,115,0,0,0,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,66,69,71,73,78,0,0,0,60,60,0,0,97,108,105,97,115,0,0,0,69,78,68,0,95,95,69,78,67,79,68,73,78,71,95,95,0,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,95,95,70,73,76,69,95,95,0,0,0,0,104,111,117,114,0,0,0,0,116,111,95,115,0,0,0,0,60,61,0,0,112,114,101,99,105,115,105,111,110,32,116,111,111,32,98,105,103,0,0,0,77,82,66,95,84,84,95,69,78,86,0,0,102,114,101,120,112,0,0,0,60,61,62,0,116,111,95,105,110,116,0,0,110,101,119,0,103,108,111,98,97,108,95,118,97,114,105,97,98,108,101,115,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,95,95,76,73,78,69,95,95,0,0,0,0,98,101,103,105,110,0,0,0,61,126,0,0,83,121,110,116,97,120,69,114,114,111,114,0,109,111,100,117,108,101,0,0,116,111,111,32,109,97,110,121,32,115,121,109,98,111,108,115,32,40,109,97,120,32,50,53,54,41,0,0,115,117,112,101,114,0,0,0,110,101,120,116,0,0,0,0,124,83,38,0,114,101,100,111,0,0,0,0,43,0,0,0,99,97,115,101,0,0,0,0,105,102,0,0,114,101,116,114,121,0,0,0,109,97,105,110,0,0,0,0,119,104,101,110,0,0,0,0,103,109,116,105,109,101,0,0,105,110,115,112,101,99,116,0,62,61,0,0,112,114,101,99,105,115,105,111,110,32,103,105,118,101,110,32,116,119,105,99,101,0,0,0,77,82,66,95,84,84,95,70,73,76,69,0,99,98,114,116,0,0,0,0,46,46,46,0,99,108,97,115,115,32,111,114,32,109,111,100,117,108,101,32,114,101,113,117,105,114,101,100,0,0,0,0,73,110,116,101,103,101,114,0,98,108,111,99,107,95,103,105,118,101,110,63,0,0,0,0,95,95,105,110,105,116,95,99,111,114,101,0,105,110,0,0,111,114,0,0,61,61,0,0,83,99,114,105,112,116,69,114,114,111,114,0,117,110,100,101,102,0,0,0,112,111,111,108,32,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,0,0,102,111,114,0,97,116,0,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,115,116,114,117,99,116,0,0,0,0,121,105,101,108,100,0,0,0,115,119,97,112,99,97,115,101,33,0,0,0,99,121,99,108,105,99,32,105,110,99,108,117,100,101,32,100,101,116,101,99,116,101,100,0,116,111,111,32,102,101,119,32,97,114,103,117,109,101,110,116,115,0,0,0,102,111,114,109,97,116,0,0,102,105,114,115,116,0,0,0,100,111,0,0,91,93,0,0,82,97,110,100,111,109,0,0,116,111,95,115,0,0,0,0,70,82,69,69,0,0,0,0,116,111,95,105,0,0,0,0,97,110,100,0,82,97,110,103,101,69,114,114,111,114,0,0,69,110,116,101,114,105,110,103,32,115,116,97,116,101,32,37,100,10,0,0,69,0,0,0,60,61,62,0,114,101,115,117,109,101,0,0,100,101,102,0,97,116,0,0,111,0,0,0,114,101,116,117,114,110,0,0,110,101,119,0,117,110,108,101,115,115,0,0,110,101,103,97,116,105,118,101,32,97,114,103,99,32,102,111,114,32,102,117,110,99,97,108,108,32,40,37,83,41,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,84,121,112,101,69,114,114,111,114,0,0,0,103,109,116,63,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,117,110,110,117,109,98,101,114,101,100,40,37,83,41,32,109,105,120,101,100,32,119,105,116,104,32,110,97,109,101,100,0,33,126,0,0,77,82,66,95,84,84,95,69,88,67,69,80,84,73,79,78,0,0,0,0,115,113,114,116,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,62,0,0,0,60,61,62,0,75,101,114,110,101,108,0,0,105,110,99,108,117,100,101,63,0,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,117,110,116,105,108,0,0,0,72,97,115,104,0,0,0,0,116,114,117,101,0,0,0,0,105,110,115,112,101,99,116,0,83,116,97,110,100,97,114,100,69,114,114,111,114,0,0,0,114,101,115,99,117,101,0,0,117,110,107,110,111,119,110,32,108,104,115,32,37,100,10,0,101,108,115,105,102,0,0,0,115,101,108,102,0,0,0,0,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,115,112,101,99,105,102,105,101,114,32,37,83,0,0,0,102,97,108,115,101,0,0,0,69,110,117,109,101,114,97,98,108,101,0,0,110,111,116,0,116,104,101,110,0,0,0,0,101,110,100,0,101,110,115,117,114,101,0,0,103,101,116,117,116,99,0,0,105,110,105,116,105,97,108,105,122,101,0,0,117,110,110,117,109,98,101,114,101,100,40,37,83,41,32,109,105,120,101,100,32,119,105,116,104,32,110,117,109,98,101,114,101,100,0,0,61,126,0,0,77,82,66,95,84,84,95,82,65,78,71,69,0,0,0,0,108,111,103,49,48,0,0,0,101,113,108,63,0,0,0,0,58,0,0,0,97,98,115,0,114,101,115,112,111,110,100,95,116,111,95,109,105,115,115,105,110,103,63,0,104,97,115,95,118,97,108,117,101,63,0,0,110,105,108,0,101,108,115,101,0,0,0,0,42,0,0,0,69,78,68,0,0,0,0,0,105,110,115,112,101,99,116,0,98,114,101,97,107,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,101,97,99,104,0,0,0,0,95,95,69,78,68,95,95,0,99,97,110,110,111,116,32,115,101,116,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,0,0,0,0,73,110,118,97,108,105,100,32,99,104,97,114,32,96,92,120,37,48,50,88,39,32,105,110,32,101,120,112,114,101,115,115,105,111,110,0,37,83,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,0,0,96,64,64,37,99,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,0,116,111,95,97,114,121,0,0,96,64,37,99,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,0,0,105,110,99,111,109,112,108,101,116,101,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,115,121,110,116,97,120,0,0,0,0,78,97,109,101,69,114,114,111,114,0,0,0,105,110,99,111,109,112,108,101,116,101,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,115,121,110,116,97,120,0,105,110,99,111,109,112,108,101,116,101,32,103,108,111,98,97,108,32,118,97,114,105,97,98,108,101,32,115,121,110,116,97,120,0,0,0,103,101,116,108,111,99,97,108,0,0,0,0,109,101,109,98,101,114,115,0,118,97,108,32,116,111,111,32,98,105,103,0,61,61,61,0,77,82,66,95,84,84,95,83,84,82,73,78,71,0,0,0,108,111,103,50,0,0,0,0,105,110,115,112,101,99,116,0,35,60,0,0,113,117,111,0,37,83,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,0,0,104,97,115,95,107,101,121,63,0,0,0,0,117,110,116,101,114,109,105,110,97,116,101,100,32,113,117,111,116,101,100,32,115,116,114,105,110,103,32,109,101,101,116,115,32,101,110,100,32,111,102,32,102,105,108,101,0,0,0,0,117,110,107,110,111,119,110,32,116,121,112,101,32,111,102,32,37,115,116,114,105,110,103,0,108,101,110,103,116,104,0,0,109,101,115,115,97,103,101,0,102,108,111,97,116,32,37,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,117,110,101,120,112,101,99,116,101,100,32,98,114,101,97,107,0,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,99,111,114,114,117,112,116,101,100,32,102,108,111,97,116,32,118,97,108,117,101,32,37,115,0,0,0,0,69,110,117,109,101,114,97,98,108,101,0,0,67,111,109,112,97,114,97,98,108,101,0,0,116,114,97,105,108,105,110,103,32,96,37,99,39,32,105,110,32,110,117,109,98,101,114,0,105,110,115,112,101,99,116,0,48,0,0,0,65,114,114,97,121,0,0,0,73,110,118,97,108,105,100,32,111,99,116,97,108,32,100,105,103,105,116,0,110,117,109,101,114,105,99,32,108,105,116,101,114,97,108,32,119,105,116,104,111,117,116,32,100,105,103,105,116,115,0,0,110,111,32,46,60,100,105,103,105,116,62,32,102,108,111,97,116,105,110,103,32,108,105,116,101,114,97,108,32,97,110,121,109,111,114,101,59,32,112,117,116,32,48,32,98,101,102,111,114,101,32,100,111,116,0,0,109,114,98,95,114,101,97,108,108,111,99,0,124,124,0,0,103,101,116,103,109,0,0,0,91,93,61,0,107,101,121,37,83,32,110,111,116,32,102,111,117,110,100,0,61,61,0,0,77,82,66,95,84,84,95,72,65,83,72,0,108,111,103,0,116,111,95,115,0,0,0,0,117,110,107,110,111,119,110,32,116,121,112,101,32,37,83,32,40,37,83,32,103,105,118,101,110,41,0,0,47,0,0,0,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,37,83,32,110,111,116,32,100,101,102,105,110,101,100,0,0,0,0,101,109,112,116,121,63,0,0,96,38,39,32,105,110,116,101,114,112,114,101,116,101,100,32,97,115,32,97,114,103,117,109,101,110,116,32,112,114,101,102,105,120,0,0,38,38,0,0,115,105,122,101,0,0,0,0,116,111,95,115,0,0,0,0,105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,59,32,117,115,101,32,63,92,37,99,0,0,84,105,109,101,0,0,0,0,109,97,108,102,111,114,109,101,100,32,114,101,97,100,105,110,116,32,105,110,112,117,116,0,105,110,99,111,109,112,108,101,116,101,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,0,97,108,108,95,115,121,109,98,111,108,115,0,10,61,101,110,100,10,0,0,116,111,95,105,110,116,0,0,98,101,103,105,110,10,0,0,110,101,103,97,116,105,118,101,32,97,114,114,97,121,32,115,105,122,101,0,96,42,39,32,105,110,116,101,114,112,114,101,116,101,100,32,97,115,32,97,114,103,117,109,101,110,116,32,112,114,101,102,105,120,0,0,61,61,61,0,83,99,114,105,112,116,69,114,114,111,114,0,83,121,110,116,97,120,69,114,114,111,114,0,95,95,109,101,109,98,101,114,115,95,95,0,100,115,116,63,0,0,0,0,91,93,0,0,75,101,121,69,114,114,111,114,0,0,0,0,60,61,62,0,77,82,66,95,84,84,95,65,82,82,65,89,0,0,0,0,101,120,112,0,109,101,109,98,101,114,63,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,116,121,112,101,32,37,83,32,40,101,120,112,101,99,116,101,100,32,37,83,41,0,0,0,0,42,42,0,0,108,97,115,116,112,99,0,0,95,95,100,101,108,101,116,101,0,0,0,0,108,105,110,101,32,37,100,58,32,37,115,10,0,0,0,0,110,111,100,101,32,116,121,112,101,58,32,37,100,32,40,48,120,37,120,41,10,0,0,0,98,121,116,101,115,105,122,101,0,0,0,0,100,117,109,112,0,0,0,0,61,61,0,0,78,79,68,69,95,72,69,82,69,68,79,67,58,10,0,0,105,110,116,101,114,110,0,0,78,79,68,69,95,80,79,83,84,69,88,69,58,10,0,0,78,79,68,69])
.concat([95,83,68,69,70,58,10,0,73,110,116,101,103,101,114,0,95,95,111,117,116,101,114,95,95,0,0,0,37,115,10,0,124,105,0,0,99,105,105,100,120,0,0,0,78,79,68,69,95,68,69,70,58,10,0,0,42,0,0,0,78,79,68,69,95,83,67,76,65,83,83,58,10,0,0,0,75,101,114,110,101,108,0,0,78,79,68,69,95,77,79,68,85,76,69,58,10,0,0,0,115,117,112,101,114,58,10,0,100,97,121,0,61,61,0,0,110,97,109,101,100,37,83,32,97,102,116,101,114,32,110,117,109,98,101,114,101,100,0,0,99,108,97,115,115,47,109,111,100,117,108,101,32,110,97,109,101,32,109,117,115,116,32,98,101,32,67,79,78,83,84,65,78,84,0,0,77,82,66,95,84,84,95,80,82,79,67,0,97,116,97,110,104,0,0,0,82,97,110,103,101,0,0,0,108,97,115,116,0,0,0,0,83,121,109,98,111,108,0,0,45,64,0,0,100,101,102,97,117,108,116,95,112,114,111,99,61,0,0,0,58,37,115,10,0,0,0,0,78,79,68,69,95,67,76,65,83,83,58,10,0,0,0,0,43,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,58,10,0,0,114,97,110,100,0,0,0,0,117,110,100,101,102,95,109,101,116,104,111,100,0,0,0,0,32,37,115,0,97,0,0,0,78,79,68,69,95,85,78,68,69,70,0,0,102,108,111,97,116,32,116,111,111,32,98,105,103,32,102,111,114,32,105,110,116,0,0,0,108,97,109,98,100,97,63,0,78,79,68,69,95,65,76,73,65,83,32,37,115,32,37,115,58,10,0,0,101,120,112,101,99,116,101,100,32,70,105,120,110,117,109,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,0,0,0,0,111,0,0,0,78,79,68,69,95,70,65,76,83,69,10,0,78,79,68,69,95,84,82,85,69,10,0,0,78,79,68,69,95,78,73,76,10,0,0,0,78,79,68,69,95,83,69,76,70,10,0,0,99,116,105,109,101,0,0,0,110,101,119,0,110,97,109,101,100,37,83,32,97,102,116,101,114,32,117,110,110,117,109,98,101,114,101,100,40,37,83,41,0,0,0,0,100,121,110,97,109,105,99,32,99,111,110,115,116,97,110,116,32,97,115,115,105,103,110,109,101,110,116,0,77,82,66,95,84,84,95,83,67,76,65,83,83,0,0,0,124,72,0,0,97,99,111,115,104,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,115,116,97,99,107,32,108,101,118,101,108,32,116,111,111,32,100,101,101,112,46,32,40,108,105,109,105,116,61,40,48,120,52,48,48,48,48,32,45,32,49,50,56,41,41,0,0,0,70,105,120,110,117,109,0,0,43,64,0,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,100,101,102,97,117,108,116,95,112,114,111,99,0,0,0,0,78,79,68,69,95,83,89,77,32,58,37,115,10,0,0,0,111,112,116,58,32,37,115,10,0,0,0,0,67,111,109,112,97,114,97,98,108,101,0,0,116,111,95,97,0,0,0,0,69,120,99,101,112,116,105,111,110,0,0,0,116,97,105,108,58,32,37,115,10,0,0,0,73,110,116,101,103,101,114,0,97,108,105,97,115,95,109,101,116,104,111,100,0,0,0,0,78,79,68,69,95,68,82,69,71,88,10,0,78,79,68,69,95,82,69,71,88,32,47,37,115,47,37,115,10,0,0,0,82,97,110,103,101,69,114,114,111,114,0,0,78,79,68,69,95,68,88,83,84,82,10,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,78,79,68,69,95,88,83,84,82,32,34,37,115,34,32,108,101,110,32,37,100,10,0,0,83,116,97,114,116,105,110,103,32,112,97,114,115,101,10,0,77,97,116,104,0,0,0,0,78,79,68,69,95,68,83,84,82,10,0,0,118,97,108,117,101,115,95,97,116,0,0,0,78,79,68,69,95,83,84,82,32,34,37,115,34,32,108,101,110,32,37,100,10,0,0,0,78,79,68,69,95,78,69,71,65,84,69,10,0,0,0,0,97,115,99,116,105,109,101,0,111,111,0,0,110,97,109,101,37,83,32,97,102,116,101,114,32,60,37,83,62,0,0,0,33,0,0,0,77,82,66,95,84,84,95,73,67,76,65,83,83,0,0,0,97,115,105,110,104,0,0,0,116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,70,105,98,101,114,32,102,114,111,109,32,67,32,100,101,102,105,110,101,100,32,109,101,116,104,111,100,0,105,110,99,108,117,100,101,63,0,0,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,37,83,41,0,0,0,110,105,108,0,67,111,109,112,97,114,97,98,108,101,0,0,124,111,111,0,100,101,102,97,117,108,116,61,0,0,0,0,97,114,101,110,97,32,111,118,101,114,102,108,111,119,32,101,114,114,111,114,0,0,0,0,78,79,68,69,95,70,76,79,65,84,32,37,115,10,0,0,70,105,98,101,114,0,0,0,78,79,68,69,95,73,78,84,32,37,115,32,98,97,115,101,32,37,100,10,0,0,0,0,34,0,0,0,105,0,0,0,78,79,68,69,95,66,76,79,67,75,95,65,82,71,58,10,0,0,0,0,99,111,109,112,105,108,101,0,116,114,121,95,99,111,110,118,101,114,116,0,78,79,68,69,95,65,82,71,32,37,115,10,0,0,0,0,78,79,68,69,95,78,84,72,95,82,69,70,58,32,36,37,100,10,0,0,116,111,95,102,0,0,0,0,78,79,68,69,95,66,65,67,75,95,82,69,70,58,32,36,37,99,10,0,101,120,112,101,99,116,101,100,32,70,105,120,110,117,109,0,78,79,68,69,95,77,65,84,67,72,58,10,0,0,0,0,78,79,68,69,95,67,79,78,83,84,32,37,115,10,0,0,82,97,110,103,101,0,0,0,78,79,68,69,95,67,86,65,82,32,37,115,10,0,0,0,78,79,68,69,95,73,86,65,82,32,37,115,10,0,0,0,97,114,103,117,109,101,110,116,32,116,111,111,32,98,105,103,0,0,0,0,105,110,115,112,101,99,116,0,111,102,102,115,101,116,32,37,83,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,115,116,114,117,99,116,40,115,105,122,101,58,37,83,41,0,119,105,100,116,104,32,97,102,116,101,114,32,112,114,101,99,105,115,105,111,110,0,0,0,36,109,114,98,95,103,95,114,97,110,100,95,115,101,101,100,0,0,0,0,99,111,110,115,116,97,110,116,32,114,101,45,97,115,115,105,103,110,109,101,110,116,0,0,62,0,0,0,77,82,66,95,84,84,95,77,79,68,85,76,69,0,0,0,116,97,110,104,0,0,0,0,116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,70,105,98,101,114,32,111,98,106,101,99,116,32,119,105,116,104,111,117,116,32,97,32,98,108,111,99,107,0,0,0,0,102,105,114,115,116,0,0,0,39,37,83,39,58,32,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,37,83,41,0,37,83,32,99,97,110,110,111,116,32,98,101,32,99,111,110,118,101,114,116,101,100,32,116,111,32,37,83,32,98,121,32,35,37,83,0,78,117,109,101,114,105,99,0,124,98,0,0,61,0,0,0,100,101,102,97,117,108,116,0,78,79,68,69,95,71,86,65,82,32,37,115,10,0,0,0,78,79,68,69,95,76,86,65,82,32,37,115,10,0,0,0,110,101,103,97,116,105,118,101,32,115,116,114,105,110,103,32,115,105,122,101,32,40,111,114,32,115,105,122,101,32,116,111,111,32,98,105,103,41,0,0,98,0,0,0,78,79,68,69,95,82,69,84,82,89,10,0,82,101,103,101,120,112,0,0,78,79,68,69,95,82,69,68,79,10,0,0,78,79,68,69,95,78,69,88,84,58,10,0,70,108,111,97,116,0,0,0,78,79,68,69,95,66,82,69,65,75,58,10,0,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,61,61,0,0,78,79,68,69,95,89,73,69,76,68,58,10,0,0,0,0,78,79,68,69,95,82,69,84,85,82,78,58,10,0,0,0,78,79,68,69,95,90,83,85,80,69,82,10,0,0,0,0,78,79,68,69,95,83,85,80,69,82,58,10,0,0,0,0,116,111,95,115,0,0,0,0,116,111,95,115,0,0,0,0,111,102,102,115,101,116,32,37,83,32,116,111,111,32,115,109,97,108,108,32,102,111,114,32,115,116,114,117,99,116,40,115,105,122,101,58,37,83,41,0,119,105,100,116,104,32,103,105,118,101,110,32,116,119,105,99,101,0,0,0,109,116,95,115,116,97,116,101,32,103,101,116,32,102,114,111,109,32,109,114,98,95,105,118,95,103,101,116,32,102,97,105,108,101,100,0,32,40,108,97,109,98,100,97,41,0,0,0,91,93,0,0,77,82,66,95,84,84,95,67,76,65,83,83,0,0,0,0,99,111,115,104,0,0,0,0,38,0,0,0,101,120,99,108,117,100,101,95,101,110,100,63,0,0,0,0,76,111,99,97,108,74,117,109,112,69,114,114,111,114,0,0,84,121,112,101,69,114,114,111,114,0,0,0,105,110,118,97,108,105,100,32,114,97,100,105,120,32,37,83,0,0,0,0,110,111,0,0,44,32,0,0,99,108,101,97,114,0,0,0,111,112,61,39,37,115,39,32,40,37,100,41,10,0,0,0,78,79,68,69,95,79,80,95,65,83,71,78,58,10,0,0,115,116,114,105,110,103,32,102,111,114,32,70,108,111,97,116,32,99,111,110,116,97,105,110,115,32,110,117,108,108,32,98,121,116,101,0,103,101,110,101,114,97,116,105,111,110,97,108,95,109,111,100,101,0,0,0,101,120,99,101,112,116,105,111,110,32,111,98,106,101,99,116,32,101,120,112,101,99,116,101,100,0,0,0,40,101,109,112,116,121,41,10,0,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,96,0,0,0,82,97,110,103,101,69,114,114,111,114,0,0,109,108,104,115,58,10,0,0,67,111,109,112,97,114,97,98,108,101,0,0,84,121,112,101,69,114,114,111,114,0,0,0,78,79,68,69,95,77,65,83,71,78,58,10,0,0,0,0,103,101,116,98,121,116,101,0,83,116,114,105,110,103,32,99,97,110,39,116,32,98,101,32,99,111,101,114,99,101,100,32,105,110,116,111,32,70,108,111,97,116,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,115,112,114,105,110,116,102,0,99,111,118,101,114,63,0,0,114,104,115,58,10,0,0,0,115,114,97,110,100,0,0,0,105,42,0,0,115,111,117,114,99,101,95,108,111,99,97,116,105,111,110,0,95,95,112,114,105,110,116,115,116,114,95,95,0,0,0,0,84,79,84,65,76,0,0,0,108,104,115,58,10,0,0,0,116,111,95,102,0,0,0,0,99,104,114,0,83,116,97,99,107,32,115,105,122,101,32,105,110,99,114,101,97,115,101,100,32,116,111,32,37,108,117,10,0,0,0,0,80,73,0,0,42,0,0,0,105,110,118,97,108,105,100,32,115,116,114,105,110,103,32,102,111,114,32,102,108,111,97,116,40,37,83,41,0,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,78,79,68,69,95,65,83,71,78,58,10,0,97,115,115,111,99,0,0,0,111,111,124,98,0,0,0,0,78,79,68,69,95,83,80,76,65,84,58,10,0,0,0,0,78,105,108,67,108,97,115,115,0,0,0,0,84,111,111,32,108,111,110,103,32,97,114,103,117,109,101,110,116,115,46,32,40,108,105,109,105,116,61,49,54,41,0,0,118,97,108,117,101,58,10,0,84,111,111,32,108,97,114,103,101,32,109,97,120,95,100,105,103,105,116,46,0,0,0,0,45,0,0,0,110,111,32,109,101,109,98,101,114,32,39,37,83,39,32,105,110,32,115,116,114,117,99,116,0,0,0,0,105,110,118,97,108,105,100,32,105,110,100,101,120,32,45,32,37,83,36,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,58,0,0,0,69,78,68,32,110,111,116,32,115,117,112,111,114,116,101,100,0,0,0,0,77,82,66,95,84,84,95,79,66,74,69,67,84,0,0,0,115,105,110,104,0,0,0,0,114,101,115,117,109,105,110,103,32,100,101,97,100,32,102,105,98,101,114,0,101,97,99,104,0,0,0,0,79,80,95,68,69,66,85,71,32,37,100,32,37,100,32,37,100,10,0,0,73,110,116,101,103,101,114,0,107,101,121,58,10,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,110,0,0,0,32,0,0,0,91,93,61,0,95,95,97,116,116,97,99,104,101,100,95,95,0,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,99,97,108,108,0,0,0,0,116,111,95,115,0,0,0,0,78,79,68,69,95,72,65,83,72,58,10,0,110,111,116,32,97,32,112,114,111,99,0,0,103,101,110,101,114,97,116,105,111,110,97,108,95,109,111,100,101,61,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,48,46,46,51,41,0,78,79,68,69,95,65,82,82,65,89,58,10,0,0,0,0,75,101,114,110,101,108,0,0,78,79,68,69,95,67,79,76,79,78,51,58,10,0,0,0,58,58,37,115,10,0,0,0,83,116,114,105,110,103,32,99,111,110,116,97,105,110,115,32,78,85,76,0,78,79,68,69,95,67,79,76,79,78,50,58,10,0,0,0,105,110,100,101,120,32,105,115,32,111,117,116,32,111,102,32,97,114,114,97,121,0,0,0,37,83,32,105,115,32,110,111,116,32,97,32,99,108,97,115,115,47,109,111,100,117,108,101,0,0,0,0,78,79,68,69,95,68,79,84,51,58,10,0,116,111,95,115,116,114,0,0,105,110,118,97,108,105,100,32,115,116,114,105,110,103,32,102,111,114,32,110,117,109,98,101,114,40,37,83,41,0,0,0,78,79,68,69,95,68,79,84,50,58,10,0,83,116,114,105,110,103,0,0,105,102,110,111,110,101,0,0,98,108,111,99,107,58,10,0,116,111,95,97,114,121,0,0,97,114,103,115,58,10,0,0,99,111,100,101,103,101,110,32,101,114,114,111,114,58,32,37,115,10,0,0,43,0,0,0,65,114,114,97,121,0,0,0,115,116,114,117,99,116,32,115,105,122,101,32,109,105,115,109,97,116,99,104,0,0,0,0,105,0,0,0,111,0,0,0,110,117,109,98,101,114,101,100,40,37,83,41,32,97,102,116,101,114,32,110,97,109,101,100,0,0,0,0,36,109,114,98,95,105,95,109,116,95,115,116,97,116,101,0,45,0,0,0,101,108,115,101,32,119,105,116,104,111,117,116,32,114,101,115,99,117,101,32,105,115,32,117,115,101,108,101,115,115,0,0,77,82,66,95,84,84,95,86,79,73,68,80,0,0,0,0,97,116,97,110,50,0,0,0,100,111,117,98,108,101,32,114,101,115,117,109,101,0,0,0,61,61,61,0,84,121,112,101,69,114,114,111,114,0,0,0,70,97,108,115,101,67,108,97,115,115,0,0,73,110,102,105,110,105,116,121,0,0,0,0,105,110,115,116,97,110,99,101,95,101,118,97,108,32,119,105,116,104,32,115,116,114,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,99,111,110,115,116,97,110,116,32,108,111,111,107,45,117,112,32,102,111,114,32,110,111,110,32,99,108,97,115,115,47,109,111,100,117,108,101,0,0,0,91,93,0,0,109,101,116,104,111,100,61,39,37,115,39,32,40,37,100,41,10,0,0,0,99,111,100,101,103,101,110,32,101,114,114,111,114,58,37,115,58,37,100,58,32,37,115,10,0,0,0,0,101,120,112,101,99,116,101,100,32,37,83,0,78,79,68,69,95,67,65,76,76,58,10,0,80,114,111,99,0,0,0,0,76,73,78,69,0,0,0,0,73,82,69,80,0,0,0,0,2,8,32,128,0,0,0,0,2,8,32,128,0,0,0,0,2,8,32,128,0,0,0,0,2,8,32,128,0,0,0,0,3,12,48,192,0,0,0,0,3,12,48,192,0,0,0,0,3,12,48,192,0,0,0,0,3,12,48,192,0,0,0,0,3,12,48,192,0,0,0,0,3,12,48,192,0,0,0,0,1,4,16,64,0,0,0,0,1,4,16,64,0,0,0,0,1,4,16,64,0,0,0,0,1,4,16,64,0,0,0,0])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
}
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function _memcmp(p1, p2, num) {
      p1 = p1|0; p2 = p2|0; num = num|0;
      var i = 0, v1 = 0, v2 = 0;
      while ((i|0) < (num|0)) {
        var v1 = HEAPU8[(((p1)+(i))|0)];
        var v2 = HEAPU8[(((p2)+(i))|0)];
        if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
        i = (i+1)|0;
      }
      return 0;
    }
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:35,EIDRM:36,ECHRNG:37,EL2NSYNC:38,EL3HLT:39,EL3RST:40,ELNRNG:41,EUNATCH:42,ENOCSI:43,EL2HLT:44,EDEADLK:45,ENOLCK:46,EBADE:50,EBADR:51,EXFULL:52,ENOANO:53,EBADRQC:54,EBADSLT:55,EDEADLOCK:56,EBFONT:57,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:74,ELBIN:75,EDOTDOT:76,EBADMSG:77,EFTYPE:79,ENOTUNIQ:80,EBADFD:81,EREMCHG:82,ELIBACC:83,ELIBBAD:84,ELIBSCN:85,ELIBMAX:86,ELIBEXEC:87,ENOSYS:88,ENMFILE:89,ENOTEMPTY:90,ENAMETOOLONG:91,ELOOP:92,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:106,EPROTOTYPE:107,ENOTSOCK:108,ENOPROTOOPT:109,ESHUTDOWN:110,ECONNREFUSED:111,EADDRINUSE:112,ECONNABORTED:113,ENETUNREACH:114,ENETDOWN:115,ETIMEDOUT:116,EHOSTDOWN:117,EHOSTUNREACH:118,EINPROGRESS:119,EALREADY:120,EDESTADDRREQ:121,EMSGSIZE:122,EPROTONOSUPPORT:123,ESOCKTNOSUPPORT:124,EADDRNOTAVAIL:125,ENETRESET:126,EISCONN:127,ENOTCONN:128,ETOOMANYREFS:129,EPROCLIM:130,EUSERS:131,EDQUOT:132,ESTALE:133,ENOTSUP:134,ENOMEDIUM:135,ENOSHARE:136,ECASECLASH:137,EILSEQ:138,EOVERFLOW:139,ECANCELED:140,ENOTRECOVERABLE:141,EOWNERDEAD:142,ESTRPIPE:143};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  var __impure_ptr=allocate(1, "i32*", ALLOC_STATIC);var FS={currentPath:"/",nextInode:2,streams:[null],checkStreams:function () {
        for (var i in FS.streams) if (FS.streams.hasOwnProperty(i)) assert(i >= 0 && i < FS.streams.length); // no keys not in dense span
        for (var i = 0; i < FS.streams.length; i++) assert(typeof FS.streams[i] == 'object'); // no non-null holes in dense span
      },ignorePermissions:true,createFileHandle:function (stream, fd) {
        if (typeof stream === 'undefined') {
          stream = null;
        }
        if (!fd) {
          if (stream && stream.socket) {
            for (var i = 1; i < 64; i++) {
              if (!FS.streams[i]) {
                fd = i;
                break;
              }
            }
            assert(fd, 'ran out of low fds for sockets');
          } else {
            fd = Math.max(FS.streams.length, 64);
            for (var i = FS.streams.length; i < fd; i++) {
              FS.streams[i] = null; // Keep dense
            }
          }
        }
        // Close WebSocket first if we are about to replace the fd (i.e. dup2)
        if (FS.streams[fd] && FS.streams[fd].socket && FS.streams[fd].socket.close) {
          FS.streams[fd].socket.close();
        }
        FS.streams[fd] = stream;
        return fd;
      },removeFileHandle:function (fd) {
        FS.streams[fd] = null;
      },joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.init();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureRoot();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === 10) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        stdin.isTerminal = !stdinOverridden;
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        stdout.isTerminal = !stdoutOverridden;
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        stderr.isTerminal = !stderrOverridden;
        FS.createDevice(devFolder, 'tty', input, output);
        FS.createDevice(devFolder, 'null', function(){}, function(){});
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: []
        };
        // TODO: put these low in memory like we used to assert on: assert(Math.max(_stdin, _stdout, _stderr) < 15000); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        FS.checkStreams();
        // see previous TODO on stdin etc.: assert(FS.streams.length < 1024); // at this early stage, we should not have a large set of file descriptors - just a few
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_NORMAL) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output(10);
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output(10);
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  function _send(fd, buf, len, flags) {
      var info = FS.streams[fd];
      if (!info) return -1;
      info.sender(HEAPU8.subarray(buf, buf+len));
      return len;
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[(((buf)+(i))|0)];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (stream && ('socket' in stream)) {
          return _send(fildes, buf, nbyte, 0);
      } else if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[(((buf)+(i))|0)]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }var _putc=_fputc;
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }
  function _islower(chr) {
      return chr >= 97 && chr <= 122;
    }
  function _isupper(chr) {
      return chr >= 65 && chr <= 90;
    }
  function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == 45) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
      // Apply sign.
      ret *= multiplier;
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
      if (bits == 64) {
        return tempRet0 = Math.min(Math.floor((ret)/4294967296), 4294967295)>>>0,ret>>>0;
      }
      return ret;
    }function _strtoul(str, endptr, base) {
      return __parseInt(str, endptr, base, 0, 4294967295, 32, true);  // ULONG_MAX.
    }
  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }
  function _isprint(chr) {
      return 0x1F < chr && chr < 0x7F;
    }
  function _toupper(chr) {
      if (chr >= 97 && chr <= 122) {
        return chr - 97 + 65;
      } else {
        return chr;
      }
    }
  function _tolower(chr) {
      chr = chr|0;
      if ((chr|0) < 65) return chr|0;
      if ((chr|0) > 90) return chr|0;
      return (chr - 65 + 97)|0;
    }
  function _isalpha(chr) {
      return (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }
  function _isalnum(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }
  var _llvm_va_start=undefined;
  function _llvm_va_end() {}
  var _setjmp=undefined;
  function _longjmp(env, value) {
      throw { longjmp: true, id: HEAP32[((env)>>2)], value: value || 1 };
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],HEAPF64[(tempDoublePtr)>>3]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (flagAlwaysSigned) {
                if (currArg < 0) {
                  prefix = '-' + prefix;
                } else {
                  prefix = '+' + prefix;
                }
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (flagAlwaysSigned && currArg >= 0) {
                  argText = '+' + argText;
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }
  function ___errno_location() {
      return ___errno_state;
    }var ___errno=___errno_location;
  function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }
  function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }
  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }
  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      return Number(FS.streams[stream] && FS.streams[stream].eof);
    }
  function _recv(fd, buf, len, flags) {
      var info = FS.streams[fd];
      if (!info) return -1;
      if (!info.hasData()) {
        ___setErrNo(ERRNO_CODES.EAGAIN); // no data, and all sockets are nonblocking, so this is the right behavior
        return -1;
      }
      var buffer = info.inQueue.shift();
      if (len < buffer.length) {
        if (info.stream) {
          // This is tcp (reliable), so if not all was read, keep it
          info.inQueue.unshift(buffer.subarray(len));
        }
        buffer = buffer.subarray(0, len);
      }
      HEAPU8.set(buffer, buf);
      return buffer.length;
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[((buf++)|0)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        if (contents.subarray) { // typed array
          HEAPU8.set(contents.subarray(offset, offset+size), buf);
        } else
        if (contents.slice) { // normal array
          for (var i = 0; i < size; i++) {
            HEAP8[(((buf)+(i))|0)]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[(((buf)+(i))|0)]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (stream && ('socket' in stream)) {
        return _recv(fildes, buf, nbyte, 0);
      } else if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[((buf++)|0)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === undefined && bytesRead === 0) {
                ___setErrNo(ERRNO_CODES.EAGAIN);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[(((buf)+(i))|0)]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!FS.streams[stream]) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32=_memset;
  function _strcat(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      var pdestEnd = 0;
      pdestEnd = (pdest + (_strlen(pdest)|0))|0;
      do {
        HEAP8[((pdestEnd+i)|0)]=HEAP8[((psrc+i)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)]);
      return pdest|0;
    }
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      function ExitStatus() {
        this.name = "ExitStatus";
        this.message = "Program terminated with exit(" + status + ")";
        this.status = status;
        Module.print('Exit Status: ' + status);
      };
      ExitStatus.prototype = new Error();
      ExitStatus.prototype.constructor = ExitStatus;
      exitRuntime();
      ABORT = true;
      throw new ExitStatus();
    }function _exit(status) {
      __exit(status);
    }
  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }
  function ___fpclassifyf(x) {
      if (isNaN(x)) return 0;
      if (!isFinite(x)) return 1;
      if (x == 0) return 2;
      // FP_SUBNORMAL..?
      return 4;
    }var ___fpclassifyd=___fpclassifyf;
  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }
  var _llvm_pow_f64=Math.pow;
  var _floor=Math.floor;
  var _ceil=Math.ceil;
  var _abs=Math.abs;
  function _fmod(x, y) {
      return x % y;
    }
  function _erfc(x) {
      var MATH_TOLERANCE = 1E-12;
      var ONE_SQRTPI = 0.564189583547756287;
      var a = 1;
      var b = x;
      var c = x;
      var d = x * x + 0.5;
      var n = 1.0;
      var q2 = b / d;
      var q1, t;
      if (Math.abs(x) < 2.2) {
        return 1.0 - _erf(x);
      }
      if (x < 0) {
        return 2.0 - _erfc(-x);
      }
      do {
        t = a * n + b * x;
        a = b;
        b = t;
        t = c * n + d * x;
        c = d;
        d = t;
        n += 0.5;
        q1 = q2;
        q2 = b / d;
      } while (Math.abs(q1 - q2) / q2 > MATH_TOLERANCE);
      return (ONE_SQRTPI * Math.exp(- x * x) * q2);
    }
  function _erf(x) {
      var MATH_TOLERANCE = 1E-12;
      var TWO_SQRTPI = 1.128379167095512574;
      var sum = x;
      var term = x;
      var xsqr = x*x;
      var j = 1;
      if (Math.abs(x) > 2.2) {
        return 1.0 - _erfc(x);
      }
      do {
        term *= xsqr / j;
        sum -= term / (2 * j + 1);
        ++j;
        term *= xsqr / j;
        sum += term / (2 * j + 1);
        ++j;
      } while (Math.abs(term / sum) > MATH_TOLERANCE);
      return (TWO_SQRTPI * sum);
    }
  function _hypot(a, b) {
       return Math.sqrt(a*a + b*b);
    }
  function _ldexp(x, exp_) {
      return x * Math.pow(2, exp_);
    }
  function _frexp(x, exp_addr) {
      var sig = 0, exp_ = 0;
      if (x !== 0) {
        var sign = 1;
        if (x < 0) {
          x = -x;
          sign = -1;
        }
        var raw_exp = Math.log(x)/Math.log(2);
        exp_ = Math.ceil(raw_exp);
        if (exp_ === raw_exp) exp_ += 1;
        sig = sign*x/Math.pow(2, exp_);
      }
      HEAP32[((exp_addr)>>2)]=exp_
      return sig;
    }
  function _cbrt(x) {
      return Math.pow(x, 1/3);
    }
  var _sqrt=Math.sqrt;
  var _log=Math.log;
  var _exp=Math.exp;
  function _atanh(x) {
      return Math.log((1 + x) / (1 - x)) / 2;
    }
  function _acosh(x) {
      return Math.log(x * 1 + Math.sqrt(x * x - 1));
    }
  function _asinh(x) {
      return Math.log(x + Math.sqrt(x * x + 1));
    }
  function _sinh(x) {
      var p = Math.pow(Math.E, x);
      return (p - (1 / p)) / 2;
    }
  function _cosh(x) {
      var p = Math.pow(Math.E, x);
      return (p + (1 / p)) / 2;
    }function _tanh(x) {
      return _sinh(x) / _cosh(x);
    }
  var _atan2=Math.atan2;
  var _atan=Math.atan;
  var _acos=Math.acos;
  var _asin=Math.asin;
  var _tan=Math.tan;
  var _cos=Math.cos;
  var _sin=Math.sin;
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  var __tzname=allocate(8, "i32*", ALLOC_STATIC);
  var __daylight=allocate(1, "i32*", ALLOC_STATIC);
  var __timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
      HEAP32[((__timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((__tzname)>>2)]=winterNamePtr
      HEAP32[(((__tzname)+(4))>>2)]=summerNamePtr
    }function _mktime(tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var year = HEAP32[(((tmPtr)+(offsets.tm_year))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_min))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=new Date(timestamp).getDay()
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      return timestamp;
    }
  var ___tm_timezones={};function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      var offsets = ___tm_struct_layout;
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getUTCSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getUTCMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getUTCHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getUTCDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getUTCMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getUTCFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getUTCDay()
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=0
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=0
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.round((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      var timezone = "GMT";
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
      return tmPtr;
    }
  function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getDay()
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=start.getTimezoneOffset() * 60
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=dst
      var timezone = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | date.toString().match(/\(([A-Z]+)\)/)[1];
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
      return tmPtr;
    }
  function _gettimeofday(ptr) {
      // %struct.timeval = type { i32, i32 }
      var now = Date.now();
      HEAP32[((ptr)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((ptr)+(4))>>2)]=Math.floor((now-1000*Math.floor(now/1000))*1000); // microseconds
      return 0;
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
        case 10: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(name.lastIndexOf('.')+1)];
        }
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x = event.pageX - (window.scrollX + rect.left);
          var y = event.pageY - (window.scrollY + rect.top);
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var FUNCTION_TABLE = [0,0,_mrb_mod_undef,0,_mrb_ary_cmp,0,_nil_to_s,0,_mrb_bob_missing,0,_mrb_str_capitalize_bang
,0,_mrb_mod_remove_cvar,0,_math_log10,0,_mrb_proc_lambda,0,_mrb_f_global_variables,0,_mrb_ary_assoc
,0,_mrb_hash_aset,0,_fix_mul,0,_mrb_str_bytesize,0,_mrb_struct_init_copy,0,_mrb_ary_equal
,0,_mrb_hash_to_hash,0,_math_hypot,0,_flo_mul,0,_mrb_ary_inspect,0,_mrb_hash_set_default
,0,_fix_and,0,_mrb_range_cover,0,_mrb_hash_equal,0,_mrb_mod_include_p,0,_mrb_ary_reverse_bang
,0,_mrb_time_gm,0,_sym_cmp,0,_mrb_str_to_s,0,_mrb_obj_clone,0,_num_pow
,0,_mrb_f_raise,0,_mrb_str_to_f,0,_mrb_str_to_i,0,_mrb_ary_times,0,_mrb_printstr
,0,_num_uplus,0,_mrb_range_each,0,_nil_inspect,0,_num_abs,0,_fiber_yield
,0,_mrb_obj_ivar_get,0,_mrb_time_free,0,_math_erfc,0,_mrb_mod_included_modules,0,_range_eql
,0,_mrb_proc_init_copy,0,_mrb_hash_values,0,_mrb_ary_delete_at,0,_mrb_ary_eql,0,_gc_disable
,0,_mrb_hash_default,0,_gc_interval_ratio_get,0,_mrb_mod_constants,0,_iv_i,0,_mrb_obj_not_equal_m
,0,_math_frexp,0,_mrb_hash_keys,0,_num_eql,0,_mrb_range_excl,0,_mrb_kernel_proc
,0,_mrb_f_block_given_p_m,0,_mrb_str_empty_p,0,_exc_to_s,0,_mrb_str_concat2,0,_fix_rev
,0,_mrb_time_initialize_copy,0,_mrb_time_minus,0,_mrb_str_reverse,0,_math_ldexp,0,_math_log
,0,_mrb_str_chomp_bang,0,_mrb_proc_initialize,0,_mrb_time_initialize,0,_mrb_time_min,0,_cv_i
,0,_math_sin,0,_mrb_ary_rindex_m,0,_math_asinh,0,_mrb_proc_arity,0,_gc_enable
,0,_mrb_time_mday,0,_mrb_mod_instance_methods,0,_math_sqrt,0,_math_cosh,0,_mrb_obj_instance_exec
,0,_mrb_obj_hash,0,_math_acosh,0,_gc_step_ratio_get,0,_mrb_str_capitalize,0,_mrb_mod_remove_const
,0,_mrb_range_first,0,_false_to_s,0,_gc_generational_mode_get,0,_mrb_obj_equal_m,0,_mrb_str_times
,0,_range_to_s,0,_mrb_time_getlocal,0,_mod_define_method,0,_math_tan,0,_fix_or
,0,_flo_plus,0,_mrb_obj_singleton_methods_m,0,_mrb_struct_eql,0,_mrb_hash_inspect,0,_iv_mark_i
,0,_mrb_struct_ref,0,_mrb_time_asctime,0,_mrb_str_chop,0,_exc_equal,0,_mrb_mod_module_eval
,0,_mrb_f_sprintf,0,_fiber_resume,0,_mrb_struct_initialize_m,0,_flo_infinite_p,0,_mrb_obj_ivar_set
,0,_mrb_hash_replace,0,_math_exp,0,_mrb_mod_append_features,0,_math_cbrt,0,_fix_mod
,0,_gv_i,0,_fiber_init,0,_mrb_str_start_with,0,_range_inspect,0,_math_cos
,0,_mrb_str_reverse_bang,0,_mrb_time_dstp,0,_mrb_mod_remove_method,0,_allocf,0,_mrb_str_swapcase
,0,_gc_interval_ratio_set,0,_gc_start,0,_mrb_range_last,0,_mrb_ary_join_m,0,_flo_hash
,0,_mrb_ary_size,0,_mrb_hash_default_proc,0,_mrb_random_srand,0,_exc_inspect,0,_math_tanh
,0,_mrb_str_intern,0,_false_xor,0,_mrb_mod_method_defined,0,_mrb_time_getutc,0,_gc_step_ratio_set
,0,_obj_is_instance_of,0,_inspect_i,0,_mrb_str_split_m,0,_mrb_random_g_rand,0,_mrb_obj_methods_m
,0,_mrb_str_include,0,_mrb_str_init,0,_num_cmp,0,_mrb_str_downcase,0,_fix_equal
,0,_fix_xor,0,_mrb_struct_set_m,0,_csym_i,0,_mrb_str_index_m,0,_mrb_struct_ref8
,0,_mrb_struct_ref9,0,_mrb_struct_ref6,0,_mrb_struct_ref7,0,_mrb_struct_ref4,0,_mrb_struct_ref5
,0,_mrb_struct_ref2,0,_mrb_struct_ref3,0,_mrb_struct_ref0,0,_mrb_struct_ref1,0,_mrb_random_rand
,0,_true_xor,0,_mrb_ary_push_m,0,_fix_uminus,0,_exc_message,0,_mrb_time_day
,0,_mrb_ary_plus,0,_proc_lambda,0,_gc_generational_mode_set,0,_mrb_time_eq,0,_mrb_time_cmp
,0,_mrb_struct_inspect,0,_mrb_obj_ivar_defined,0,_mrb_mod_ancestors,0,_fix_divmod,0,_mrb_time_year
,0,_math_atan,0,_mrb_str_rindex_m,0,_math_erf,0,_fix_to_s,0,_fix_minus
,0,_mrb_range_initialize,0,_mrb_mod_eqq,0,_mrb_bob_not,0,_fix_to_f,0,_mrb_ary_empty_p
,0,_mrb_any_to_s,0,_mrb_range_include,0,_mrb_mod_const_set,0,_mrb_proc_source_location,0,_mrb_str_upcase_bang
,0,_mrb_hash_clear,0,_num_div,0,_mrb_hash_has_key,0,_mrb_time_to_f,0,_mrb_bob_init
,0,_mrb_time_to_i,0,_mrb_time_yday,0,_mrb_str_bytes,0,_mrb_time_zone,0,_mrb_random_g_srand
,0,_sym_equal,0,_mrb_proc_inspect,0,_int_to_i,0,_mrb_ary_shift,0,_mrb_time_at
,0,_mrb_time_local,0,_mrb_mod_cvar_get,0,_mrb_hash_set_default_proc,0,_mrb_ary_concat_m,0,_mrb_ary_reverse
,0,_mrb_hash_shift,0,_mrb_random_init,0,_true_or,0,_mrb_obj_dup,0,_noregexp
,0,_mrb_time_sec,0,_mrb_str_cmp_m,0,_mrb_obj_instance_eval,0,_mrb_hash_init_core,0,_mrb_false
,0,_mrb_hash_has_value,0,_mrb_ary_at,0,_hash_values_at,0,_flo_floor,0,_mrb_obj_extend_m
,0,_nil_to_f,0,_mrb_ary_pop,0,_nil_to_a,0,_flo_finite_p,0,_mrb_mod_cvar_defined
,0,_mrb_struct_aref,0,_math_acos,0,_num_uminus,0,_mrb_sym_all_symbols,0,_mrb_class_superclass
,0,_mrb_time_now,0,_mrb_obj_instance_variables,0,_mrb_mod_cvar_set,0,_mrb_ary_index_m,0,_mrb_true
,0,_fiber_alive_p,0,_mrb_str_hash_m,0,_flo_minus,0,_mrb_struct_s_def,0,_mrb_int_chr
,0,_mrb_ary_replace_m,0,_mrb_struct_s_members_m,0,_mrb_ary_rassoc,0,_int_succ,0,_mrb_str_getbyte
,0,_sym_inspect,0,_mrb_ary_aget,0,_mrb_time_wday,0,_mrb_obj_remove_instance_variable,0,_mrb_ary_s_create
,0,_mrb_obj_inspect,0,_mrb_class_new_class,0,_flo_to_f,0,_inspect_main,0,_flo_to_s
,0,_mrb_ary_unshift_m,0,_math_sinh,0,_mrb_str_inspect,0,_mrb_mod_to_s,0,_mrb_f_send
,0,_exc_exception,0,_flo_round,0,_mrb_str_plus_m,0,_mrb_str_size,0,_flo_truncate
,0,_mrb_obj_id_m,0,_mrb_free,0,_true_to_s,0,_mrb_time_utc,0,_mrb_singleton_class
,0,_fix_rshift,0,_mrb_str_dump,0,_mrb_hash_empty_p,0,_exc_initialize,0,_mrb_mod_include
,0,_mrb_str_swapcase_bang,0,_flo_ceil,0,_mrb_mod_alias,0,_fix_lshift,0,_mrb_str_equal_m
,0,_mrb_obj_init_copy,0,_mrb_obj_class_m,0,_mrb_range_end,0,_mrb_instance_new,0,_math_atanh
,0,_mrb_time_plus,0,_mrb_str_aref_m,0,_mrb_time_utcp,0,_mrb_obj_protected_methods,0,_mrb_sym_to_s
,0,_math_asin,0,_flo_mod,0,_mrb_mod_const_defined,0,_mrb_range_beg,0,_mrb_equal_m
,0,_mrb_struct_aset,0,_mrb_mod_s_constants,0,_mrb_struct_members_m,0,_flo_eq,0,_math_atan2
,0,_os_count_objects,0,_mrb_mod_extend_object,0,_false_and,0,_fix_succ,0,_true_and
,0,_mrb_ary_s_try_convert,0,_mrb_str_upcase,0,_os_count_object_type,0,_mrb_range_eq,0,_mrb_mod_dummy_visibility
,0,_false_or,0,_fix_plus,0,_mrb_str_downcase_bang,0,_mrb_time_hour,0,_mrb_ary_last
,0,_mrb_obj_is_kind_of_m,0,_mrb_obj_public_methods,0,_mrb_mod_const_get,0,_mrb_hash_aget,0,_mrb_hash_size_m
,0,_mrb_str_chop_bang,0,_mrb_struct_equal,0,_mrb_ary_clear,0,_mrb_ary_aset,0,_mrb_str_replace
,0,_mrb_str_chomp,0,_obj_respond_to,0,_mrb_obj_private_methods,0,_mrb_str_end_with,0,_mrb_hash_eql
,0,_math_log2,0,_mrb_hash_delete,0,_mrb_str_eql,0,_nil_to_i,0,_mrb_time_usec
,0,_range_initialize_copy,0,_mrb_mod_class_variables,0,_const_i,0,_mrb_ary_first,0,_mrb_time_mon,0,_mrb_time_localtime,0,_sym_to_sym];
// EMSCRIPTEN_START_FUNCS
function _offset_crc_body() {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $header=sp;
 var $1=(($header+8)|0);
 var $2=(($1)|0);
 var $3=$header;
 var $4=$2;
 var $5=$3;
 var $6=((($4)-($5))|0);
 var $7=((($6)+(2))|0);
 STACKTOP = sp;
 return $7;
}
function _bin_to_uint32($bin) {
 var label = 0;
 var $1;
 $1=$bin;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP8[($3)];
 var $5=(($4)&(255));
 var $6=$5 << 24;
 var $7=$1;
 var $8=(($7+1)|0);
 var $9=HEAP8[($8)];
 var $10=(($9)&(255));
 var $11=$10 << 16;
 var $12=$6 | $11;
 var $13=$1;
 var $14=(($13+2)|0);
 var $15=HEAP8[($14)];
 var $16=(($15)&(255));
 var $17=$16 << 8;
 var $18=$12 | $17;
 var $19=$1;
 var $20=(($19+3)|0);
 var $21=HEAP8[($20)];
 var $22=(($21)&(255));
 var $23=$18 | $22;
 return $23;
}
function _bin_to_uint16($bin) {
 var label = 0;
 var $1;
 $1=$bin;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP8[($3)];
 var $5=(($4)&(255));
 var $6=(($5)&(65535));
 var $7=$6 << 8;
 var $8=$1;
 var $9=(($8+1)|0);
 var $10=HEAP8[($9)];
 var $11=(($10)&(255));
 var $12=(($11)&(65535));
 var $13=$7 | $12;
 var $14=(($13) & 65535);
 return $14;
}
function _webruby_internal_run_bytecode($mrb, $bc, $print_level) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4=sp;
 $1=$mrb;
 $2=$bc;
 $3=$print_level;
 var $5=$1;
 var $6=$1;
 var $7=$2;
 _mrb_load_irep($4, $6, $7);
 var $8=$3;
 var $9=_check_and_print_errors($5, $4, $8);
 STACKTOP = sp;
 return $9;
}
Module["_webruby_internal_run_bytecode"] = _webruby_internal_run_bytecode;
function _check_and_print_errors($mrb, $result, $print_level) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $result; $result = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($result)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($result)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($result)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4=sp;
   $2=$mrb;
   $3=$print_level;
   var $5=$2;
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))!=0;
   if ($8) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $10=$3;
   var $11=(($10)|(0)) > 0;
   if ($11) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $13=$2;
   var $14=$2;
   var $15=(($14+16)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$16;
   _mrb_obj_value($4, $17);
   _mrb_p($13, $4);
   var $18=$2;
   var $19=(($18+16)|0);
   HEAP32[(($19)>>2)]=0;
   $1=1;
   label = 7; break;
  case 4: 
   var $21=$3;
   var $22=(($21)|(0)) > 1;
   if ($22) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $24=$2;
   _mrb_p($24, $result);
   label = 6; break;
  case 6: 
   $1=0;
   label = 7; break;
  case 7: 
   var $27=$1;
   STACKTOP = sp;
   return $27;
  default: assert(0, "bad label: " + label);
 }
}
function _webruby_internal_run($mrb, $print_level) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$print_level;
 var $3=$1;
 var $4=$2;
 var $5=_webruby_internal_run_bytecode($3, ((85672)|0), $4);
 return $5;
}
Module["_webruby_internal_run"] = _webruby_internal_run;
function _webruby_internal_run_source($mrb, $s, $print_level) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4=sp;
 $1=$mrb;
 $2=$s;
 $3=$print_level;
 var $5=$1;
 var $6=$1;
 var $7=$2;
 _mrb_load_string($4, $6, $7);
 var $8=$3;
 var $9=_check_and_print_errors($5, $4, $8);
 STACKTOP = sp;
 return $9;
}
Module["_webruby_internal_run_source"] = _webruby_internal_run_source;
function _mrb_obj_value($agg_result, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   var $b;
   $1=$p;
   var $2=$1;
   var $3=$2;
   $b=$3;
   label = 2; break;
  case 2: 
   var $5=$b;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 255;
   var $9=(($v+8)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=$1;
   var $11=(($v)|0);
   var $12=$11;
   HEAP32[(($12)>>2)]=$10;
   label = 3; break;
  case 3: 
   var $14=$agg_result;
   var $15=$v;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_read_irep($mrb, $bin) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $result;
   var $total_nirep;
   var $section_header;
   var $crc=sp;
   var $bin_size=(sp)+(4);
   var $n;
   var $sirep;
   $2=$mrb;
   $3=$bin;
   $total_nirep=0;
   HEAP32[(($bin_size)>>2)]=0;
   var $4=$2;
   var $5=(($4)|(0))==0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=$3;
   var $8=(($7)|(0))==0;
   if ($8) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $1=-7;
   label = 21; break;
  case 4: 
   var $11=$3;
   var $12=_read_rite_binary_header($11, $bin_size, $crc);
   $result=$12;
   var $13=$result;
   var $14=(($13)|(0))!=0;
   if ($14) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $16=$result;
   $1=$16;
   label = 21; break;
  case 6: 
   var $18=_offset_crc_body();
   $n=$18;
   var $19=HEAP16[(($crc)>>1)];
   var $20=(($19)&(65535));
   var $21=$3;
   var $22=$n;
   var $23=(($21+$22)|0);
   var $24=HEAP32[(($bin_size)>>2)];
   var $25=$n;
   var $26=((($24)-($25))|0);
   var $27=_calc_crc_16_ccitt($23, $26, 0);
   var $28=(($27)&(65535));
   var $29=(($20)|(0))!=(($28)|(0));
   if ($29) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $1=-5;
   label = 21; break;
  case 8: 
   var $32=$3;
   var $33=(($32+22)|0);
   $3=$33;
   var $34=$2;
   var $35=(($34+28)|0);
   var $36=HEAP32[(($35)>>2)];
   $sirep=$36;
   label = 9; break;
  case 9: 
   var $38=$3;
   var $39=$38;
   $section_header=$39;
   var $40=$section_header;
   var $41=(($40)|0);
   var $42=(($41)|0);
   var $43=_memcmp($42, ((106156)|0), 4);
   var $44=(($43)|(0))==0;
   if ($44) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $46=$2;
   var $47=$3;
   var $48=_read_rite_section_irep($46, $47);
   $result=$48;
   var $49=$result;
   var $50=(($49)|(0)) < 0;
   if ($50) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $52=$result;
   $1=$52;
   label = 21; break;
  case 12: 
   var $54=$result;
   var $55=$total_nirep;
   var $56=((($55)+($54))|0);
   $total_nirep=$56;
   label = 18; break;
  case 13: 
   var $58=$section_header;
   var $59=(($58)|0);
   var $60=(($59)|0);
   var $61=_memcmp($60, ((106148)|0), 4);
   var $62=(($61)|(0))==0;
   if ($62) { label = 14; break; } else { label = 17; break; }
  case 14: 
   var $64=$2;
   var $65=$3;
   var $66=$sirep;
   var $67=_read_rite_section_lineno($64, $65, $66);
   $result=$67;
   var $68=$result;
   var $69=(($68)|(0)) < 0;
   if ($69) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $71=$result;
   $1=$71;
   label = 21; break;
  case 16: 
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $75=$section_header;
   var $76=(($75+4)|0);
   var $77=(($76)|0);
   var $78=_bin_to_uint32($77);
   var $79=$3;
   var $80=(($79+$78)|0);
   $3=$80;
   label = 19; break;
  case 19: 
   var $82=$section_header;
   var $83=(($82)|0);
   var $84=(($83)|0);
   var $85=_memcmp($84, ((100916)|0), 4);
   var $86=(($85)|(0))!=0;
   if ($86) { label = 9; break; } else { label = 20; break; }
  case 20: 
   var $88=$sirep;
   $1=$88;
   label = 21; break;
  case 21: 
   var $90=$1;
   STACKTOP = sp;
   return $90;
  default: assert(0, "bad label: " + label);
 }
}
function _read_rite_binary_header($bin, $bin_size, $crc) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $header;
   $2=$bin;
   $3=$bin_size;
   $4=$crc;
   var $5=$2;
   var $6=$5;
   $header=$6;
   var $7=$header;
   var $8=(($7)|0);
   var $9=(($8)|0);
   var $10=_memcmp($9, ((94552)|0), 4);
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=-5;
   label = 8; break;
  case 3: 
   var $14=$header;
   var $15=(($14+4)|0);
   var $16=(($15)|0);
   var $17=_memcmp($16, ((92068)|0), 4);
   var $18=(($17)|(0))!=0;
   if ($18) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $1=-5;
   label = 8; break;
  case 5: 
   var $21=$header;
   var $22=(($21+8)|0);
   var $23=(($22)|0);
   var $24=_bin_to_uint16($23);
   var $25=$4;
   HEAP16[(($25)>>1)]=$24;
   var $26=$3;
   var $27=(($26)|(0))!=0;
   if ($27) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $29=$header;
   var $30=(($29+10)|0);
   var $31=(($30)|0);
   var $32=_bin_to_uint32($31);
   var $33=$3;
   HEAP32[(($33)>>2)]=$32;
   label = 7; break;
  case 7: 
   $1=0;
   label = 8; break;
  case 8: 
   var $36=$1;
   return $36;
  default: assert(0, "bad label: " + label);
 }
}
function _read_rite_section_irep($mrb, $bin) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $result;
   var $sirep;
   var $len=sp;
   var $nirep;
   var $n;
   var $header;
   $1=$mrb;
   $2=$bin;
   var $3=$2;
   var $4=$3;
   $header=$4;
   var $5=$2;
   var $6=(($5+16)|0);
   $2=$6;
   var $7=$1;
   var $8=(($7+28)|0);
   var $9=HEAP32[(($8)>>2)];
   $sirep=$9;
   var $10=$header;
   var $11=(($10+12)|0);
   var $12=(($11)|0);
   var $13=_bin_to_uint16($12);
   $nirep=$13;
   $n=0;
   label = 2; break;
  case 2: 
   var $15=$n;
   var $16=(($15)&(65535));
   var $17=$nirep;
   var $18=(($17)&(65535));
   var $19=(($16)|(0)) < (($18)|(0));
   if ($19) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $21=$1;
   var $22=$2;
   var $23=_read_rite_irep_record($21, $22, $len);
   $result=$23;
   var $24=$result;
   var $25=(($24)|(0))!=0;
   if ($25) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 8; break;
  case 5: 
   var $28=HEAP32[(($len)>>2)];
   var $29=$2;
   var $30=(($29+$28)|0);
   $2=$30;
   label = 6; break;
  case 6: 
   var $32=$n;
   var $33=((($32)+(1))&65535);
   $n=$33;
   label = 2; break;
  case 7: 
   var $35=$nirep;
   var $36=(($35)&(65535));
   $result=$36;
   label = 8; break;
  case 8: 
   var $38=$result;
   var $39=(($38)|(0)) < 0;
   if ($39) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $41=$sirep;
   var $42=$1;
   _irep_free($41, $42);
   label = 10; break;
  case 10: 
   var $44=$result;
   STACKTOP = sp;
   return $44;
  default: assert(0, "bad label: " + label);
 }
}
function _read_rite_section_lineno($mrb, $bin, $sirep) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $result;
   var $i;
   var $len=sp;
   var $nirep;
   var $n;
   var $header;
   $1=$mrb;
   $2=$bin;
   $3=$sirep;
   HEAP32[(($len)>>2)]=0;
   var $4=$2;
   var $5=$4;
   $header=$5;
   var $6=$2;
   var $7=(($6+12)|0);
   $2=$7;
   var $8=$header;
   var $9=(($8+8)|0);
   var $10=(($9)|0);
   var $11=_bin_to_uint16($10);
   $nirep=$11;
   $n=0;
   var $12=$3;
   $i=$12;
   label = 2; break;
  case 2: 
   var $14=$n;
   var $15=(($14)&(65535));
   var $16=$nirep;
   var $17=(($16)&(65535));
   var $18=(($15)|(0)) < (($17)|(0));
   if ($18) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $20=$1;
   var $21=$2;
   var $22=$i;
   var $23=_read_rite_lineno_record($20, $21, $22, $len);
   $result=$23;
   var $24=$result;
   var $25=(($24)|(0))!=0;
   if ($25) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 8; break;
  case 5: 
   var $28=HEAP32[(($len)>>2)];
   var $29=$2;
   var $30=(($29+$28)|0);
   $2=$30;
   label = 6; break;
  case 6: 
   var $32=$n;
   var $33=((($32)+(1))&65535);
   $n=$33;
   var $34=$i;
   var $35=((($34)+(1))|0);
   $i=$35;
   label = 2; break;
  case 7: 
   var $37=$3;
   var $38=$header;
   var $39=(($38+10)|0);
   var $40=(($39)|0);
   var $41=_bin_to_uint16($40);
   var $42=(($41)&(65535));
   var $43=((($37)+($42))|0);
   $result=$43;
   label = 8; break;
  case 8: 
   var $45=$result;
   STACKTOP = sp;
   return $45;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_load_irep($agg_result, $mrb, $bin) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $n;
   var $3=sp;
   $1=$mrb;
   $2=$bin;
   var $4=$1;
   var $5=$2;
   var $6=_mrb_read_irep($4, $5);
   $n=$6;
   var $7=$n;
   var $8=(($7)|(0)) < 0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$1;
   var $11=$n;
   _irep_error($10, $11);
   _mrb_nil_value($agg_result);
   label = 4; break;
  case 3: 
   var $13=$1;
   var $14=$1;
   var $15=$n;
   var $16=$1;
   var $17=(($16+24)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18+($15<<2))|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=_mrb_proc_new($14, $20);
   var $22=$1;
   _mrb_top_self($3, $22);
   _mrb_run($agg_result, $13, $21, $3);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _irep_error($mrb, $n) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3=sp;
 $1=$mrb;
 $2=$n;
 var $4=$1;
 var $5=$1;
 var $6=_mrb_class_get($5, ((97248)|0));
 _mrb_exc_new($3, $4, $6, ((75480)|0), 15);
 var $7=(($3)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 var $11=$1;
 var $12=(($11+16)|0);
 HEAP32[(($12)>>2)]=$10;
 STACKTOP = sp;
 return;
}
function _mrb_nil_value($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _read_rite_lineno_record($mrb, $bin, $irepno, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $ret;
   var $i;
   var $fname_len;
   var $niseq;
   var $fname;
   var $lines;
   $1=$mrb;
   $2=$bin;
   $3=$irepno;
   $4=$len;
   $ret=0;
   var $5=$4;
   HEAP32[(($5)>>2)]=0;
   var $6=$2;
   var $7=(($6+4)|0);
   $2=$7;
   var $8=$4;
   var $9=HEAP32[(($8)>>2)];
   var $10=((($9)+(4))|0);
   HEAP32[(($8)>>2)]=$10;
   var $11=$2;
   var $12=_bin_to_uint16($11);
   var $13=(($12)&(65535));
   $fname_len=$13;
   var $14=$2;
   var $15=(($14+2)|0);
   $2=$15;
   var $16=$4;
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)+(2))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=$1;
   var $20=$fname_len;
   var $21=((($20)+(1))|0);
   var $22=_mrb_malloc($19, $21);
   $fname=$22;
   var $23=$fname;
   var $24=(($23)|(0))==0;
   if ($24) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $ret=-1;
   label = 10; break;
  case 3: 
   var $27=$fname;
   var $28=$2;
   var $29=$fname_len;
   assert($29 % 1 === 0);(_memcpy($27, $28, $29)|0);
   var $30=$fname_len;
   var $31=$fname;
   var $32=(($31+$30)|0);
   HEAP8[($32)]=0;
   var $33=$fname_len;
   var $34=$2;
   var $35=(($34+$33)|0);
   $2=$35;
   var $36=$fname_len;
   var $37=$4;
   var $38=HEAP32[(($37)>>2)];
   var $39=((($38)+($36))|0);
   HEAP32[(($37)>>2)]=$39;
   var $40=$2;
   var $41=_bin_to_uint32($40);
   $niseq=$41;
   var $42=$2;
   var $43=(($42+4)|0);
   $2=$43;
   var $44=$4;
   var $45=HEAP32[(($44)>>2)];
   var $46=((($45)+(4))|0);
   HEAP32[(($44)>>2)]=$46;
   var $47=$1;
   var $48=$niseq;
   var $49=($48<<1);
   var $50=_mrb_malloc($47, $49);
   var $51=$50;
   $lines=$51;
   var $52=$lines;
   var $53=(($52)|(0))==0;
   if ($53) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $ret=-1;
   label = 10; break;
  case 5: 
   $i=0;
   label = 6; break;
  case 6: 
   var $57=$i;
   var $58=$niseq;
   var $59=(($57)>>>(0)) < (($58)>>>(0));
   if ($59) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $61=$2;
   var $62=_bin_to_uint16($61);
   var $63=$i;
   var $64=$lines;
   var $65=(($64+($63<<1))|0);
   HEAP16[(($65)>>1)]=$62;
   var $66=$2;
   var $67=(($66+2)|0);
   $2=$67;
   var $68=$4;
   var $69=HEAP32[(($68)>>2)];
   var $70=((($69)+(2))|0);
   HEAP32[(($68)>>2)]=$70;
   label = 8; break;
  case 8: 
   var $72=$i;
   var $73=((($72)+(1))|0);
   $i=$73;
   label = 6; break;
  case 9: 
   var $75=$fname;
   var $76=$3;
   var $77=$1;
   var $78=(($77+24)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79+($76<<2))|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($81+24)|0);
   HEAP32[(($82)>>2)]=$75;
   var $83=$lines;
   var $84=$3;
   var $85=$1;
   var $86=(($85+24)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=(($87+($84<<2))|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($89+28)|0);
   HEAP32[(($90)>>2)]=$83;
   label = 10; break;
  case 10: 
   var $92=$ret;
   return $92;
  default: assert(0, "bad label: " + label);
 }
}
function _irep_free($sirep, $mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $i;
   var $p;
   $1=$sirep;
   $2=$mrb;
   var $3=$1;
   $i=$3;
   label = 2; break;
  case 2: 
   var $5=$i;
   var $6=$2;
   var $7=(($6+28)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($5)>>>(0)) < (($8)>>>(0));
   if ($9) { label = 3; break; } else { label = 13; break; }
  case 3: 
   var $11=$i;
   var $12=$2;
   var $13=(($12+24)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14+($11<<2))|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))!=0;
   if ($17) { label = 4; break; } else { label = 11; break; }
  case 4: 
   var $19=$i;
   var $20=$2;
   var $21=(($20+24)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+($19<<2))|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24+12)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$26;
   $p=$27;
   var $28=$p;
   var $29=(($28)|(0))!=0;
   if ($29) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $31=$2;
   var $32=$p;
   _mrb_free($31, $32);
   label = 6; break;
  case 6: 
   var $34=$i;
   var $35=$2;
   var $36=(($35+24)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37+($34<<2))|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39+16)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$41;
   $p=$42;
   var $43=$p;
   var $44=(($43)|(0))!=0;
   if ($44) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $46=$2;
   var $47=$p;
   _mrb_free($46, $47);
   label = 8; break;
  case 8: 
   var $49=$i;
   var $50=$2;
   var $51=(($50+24)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52+($49<<2))|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($54+20)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=$56;
   $p=$57;
   var $58=$p;
   var $59=(($58)|(0))!=0;
   if ($59) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $61=$2;
   var $62=$p;
   _mrb_free($61, $62);
   label = 10; break;
  case 10: 
   var $64=$2;
   var $65=$i;
   var $66=$2;
   var $67=(($66+24)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=(($68+($65<<2))|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=$70;
   _mrb_free($64, $71);
   label = 11; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $74=$i;
   var $75=((($74)+(1))|0);
   $i=$75;
   label = 2; break;
  case 13: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_proc_iseq($mrb, $p) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$p;
 var $3=$2;
 var $4=(($3+12)|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+12)|0);
 var $8=HEAP32[(($7)>>2)];
 return $8;
}
function _read_rite_irep_record($mrb, $bin, $len) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $ret;
   var $i;
   var $src;
   var $tt;
   var $pool_data_len;
   var $snl;
   var $plen;
   var $ai;
   var $irep;
   var $s=sp;
   var $4=(sp)+(12);
   var $5=(sp)+(24);
   var $6=(sp)+(36);
   var $7=(sp)+(48);
   $1=$mrb;
   $2=$bin;
   $3=$len;
   var $8=$2;
   $src=$8;
   var $9=$1;
   var $10=_mrb_gc_arena_save($9);
   $ai=$10;
   var $11=$1;
   var $12=_mrb_add_irep($11);
   $irep=$12;
   var $13=$src;
   var $14=(($13+4)|0);
   $src=$14;
   var $15=$src;
   var $16=_bin_to_uint16($15);
   var $17=$irep;
   var $18=(($17+4)|0);
   HEAP16[(($18)>>1)]=$16;
   var $19=$src;
   var $20=(($19+2)|0);
   $src=$20;
   var $21=$src;
   var $22=_bin_to_uint16($21);
   var $23=$irep;
   var $24=(($23+6)|0);
   HEAP16[(($24)>>1)]=$22;
   var $25=$src;
   var $26=(($25+2)|0);
   $src=$26;
   var $27=$src;
   var $28=_bin_to_uint32($27);
   var $29=$irep;
   var $30=(($29+32)|0);
   HEAP32[(($30)>>2)]=$28;
   var $31=$src;
   var $32=(($31+4)|0);
   $src=$32;
   var $33=$irep;
   var $34=(($33+32)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35)>>>(0)) > 0;
   if ($36) { label = 2; break; } else { label = 9; break; }
  case 2: 
   var $38=$1;
   var $39=$irep;
   var $40=(($39+32)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=($41<<2);
   var $43=_mrb_malloc($38, $42);
   var $44=$43;
   var $45=$irep;
   var $46=(($45+12)|0);
   HEAP32[(($46)>>2)]=$44;
   var $47=$irep;
   var $48=(($47+12)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49)|(0))==0;
   if ($50) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $ret=-1;
   label = 33; break;
  case 4: 
   $i=0;
   label = 5; break;
  case 5: 
   var $54=$i;
   var $55=$irep;
   var $56=(($55+32)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($54)>>>(0)) < (($57)>>>(0));
   if ($58) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $60=$src;
   var $61=_bin_to_uint32($60);
   var $62=$i;
   var $63=$irep;
   var $64=(($63+12)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65+($62<<2))|0);
   HEAP32[(($66)>>2)]=$61;
   var $67=$src;
   var $68=(($67+4)|0);
   $src=$68;
   label = 7; break;
  case 7: 
   var $70=$i;
   var $71=((($70)+(1))|0);
   $i=$71;
   label = 5; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $74=$src;
   var $75=_bin_to_uint32($74);
   $plen=$75;
   var $76=$src;
   var $77=(($76+4)|0);
   $src=$77;
   var $78=$plen;
   var $79=(($78)>>>(0)) > 0;
   if ($79) { label = 10; break; } else { label = 22; break; }
  case 10: 
   var $81=$1;
   var $82=$plen;
   var $83=((($82)*(12))&-1);
   var $84=_mrb_malloc($81, $83);
   var $85=$84;
   var $86=$irep;
   var $87=(($86+16)|0);
   HEAP32[(($87)>>2)]=$85;
   var $88=$irep;
   var $89=(($88+16)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90)|(0))==0;
   if ($91) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $ret=-1;
   label = 33; break;
  case 12: 
   $i=0;
   label = 13; break;
  case 13: 
   var $95=$i;
   var $96=$plen;
   var $97=(($95)>>>(0)) < (($96)>>>(0));
   if ($97) { label = 14; break; } else { label = 21; break; }
  case 14: 
   var $99=$src;
   var $100=(($99+1)|0);
   $src=$100;
   var $101=HEAP8[($99)];
   var $102=(($101)&(255));
   $tt=$102;
   var $103=$src;
   var $104=_bin_to_uint16($103);
   $pool_data_len=$104;
   var $105=$src;
   var $106=(($105+2)|0);
   $src=$106;
   var $107=$1;
   var $108=$src;
   var $109=$pool_data_len;
   var $110=(($109)&(65535));
   _mrb_str_new($4, $107, $108, $110);
   var $111=$s;
   var $112=$4;
   assert(12 % 1 === 0);HEAP32[(($111)>>2)]=HEAP32[(($112)>>2)];HEAP32[((($111)+(4))>>2)]=HEAP32[((($112)+(4))>>2)];HEAP32[((($111)+(8))>>2)]=HEAP32[((($112)+(8))>>2)];
   var $113=$pool_data_len;
   var $114=(($113)&(65535));
   var $115=$src;
   var $116=(($115+$114)|0);
   $src=$116;
   var $117=$tt;
   var $118=(($117)&(65535));
   if ((($118)|(0))==3) {
    label = 15; break;
   }
   else if ((($118)|(0))==6) {
    label = 16; break;
   }
   else if ((($118)|(0))==16) {
    label = 17; break;
   }
   else {
   label = 18; break;
   }
  case 15: 
   var $120=$i;
   var $121=$irep;
   var $122=(($121+16)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124=(($123+((($120)*(12))&-1))|0);
   var $125=$1;
   _mrb_str_to_inum($5, $125, $s, 10, 0);
   var $126=$124;
   var $127=$5;
   assert(12 % 1 === 0);HEAP32[(($126)>>2)]=HEAP32[(($127)>>2)];HEAP32[((($126)+(4))>>2)]=HEAP32[((($127)+(4))>>2)];HEAP32[((($126)+(8))>>2)]=HEAP32[((($127)+(8))>>2)];
   label = 19; break;
  case 16: 
   var $129=$i;
   var $130=$irep;
   var $131=(($130+16)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=(($132+((($129)*(12))&-1))|0);
   var $134=$1;
   var $135=$1;
   var $136=_mrb_str_to_dbl($135, $s, 0);
   _mrb_float_value($6, $134, $136);
   var $137=$133;
   var $138=$6;
   assert(12 % 1 === 0);HEAP32[(($137)>>2)]=HEAP32[(($138)>>2)];HEAP32[((($137)+(4))>>2)]=HEAP32[((($138)+(4))>>2)];HEAP32[((($137)+(8))>>2)]=HEAP32[((($138)+(8))>>2)];
   label = 19; break;
  case 17: 
   var $140=$i;
   var $141=$irep;
   var $142=(($141+16)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=(($143+((($140)*(12))&-1))|0);
   var $145=$144;
   var $146=$s;
   assert(12 % 1 === 0);HEAP32[(($145)>>2)]=HEAP32[(($146)>>2)];HEAP32[((($145)+(4))>>2)]=HEAP32[((($146)+(4))>>2)];HEAP32[((($145)+(8))>>2)]=HEAP32[((($146)+(8))>>2)];
   label = 19; break;
  case 18: 
   var $148=$i;
   var $149=$irep;
   var $150=(($149+16)|0);
   var $151=HEAP32[(($150)>>2)];
   var $152=(($151+((($148)*(12))&-1))|0);
   _mrb_nil_value($7);
   var $153=$152;
   var $154=$7;
   assert(12 % 1 === 0);HEAP32[(($153)>>2)]=HEAP32[(($154)>>2)];HEAP32[((($153)+(4))>>2)]=HEAP32[((($154)+(4))>>2)];HEAP32[((($153)+(8))>>2)]=HEAP32[((($154)+(8))>>2)];
   label = 19; break;
  case 19: 
   var $156=$irep;
   var $157=(($156+36)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=((($158)+(1))|0);
   HEAP32[(($157)>>2)]=$159;
   var $160=$1;
   var $161=$ai;
   _mrb_gc_arena_restore($160, $161);
   label = 20; break;
  case 20: 
   var $163=$i;
   var $164=((($163)+(1))|0);
   $i=$164;
   label = 13; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $167=$src;
   var $168=_bin_to_uint32($167);
   var $169=$irep;
   var $170=(($169+40)|0);
   HEAP32[(($170)>>2)]=$168;
   var $171=$src;
   var $172=(($171+4)|0);
   $src=$172;
   var $173=$irep;
   var $174=(($173+40)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176=(($175)>>>(0)) > 0;
   if ($176) { label = 23; break; } else { label = 32; break; }
  case 23: 
   var $178=$1;
   var $179=$irep;
   var $180=(($179+40)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=($181<<1);
   var $183=_mrb_malloc($178, $182);
   var $184=$183;
   var $185=$irep;
   var $186=(($185+20)|0);
   HEAP32[(($186)>>2)]=$184;
   var $187=$irep;
   var $188=(($187+20)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=(($189)|(0))==0;
   if ($190) { label = 24; break; } else { label = 25; break; }
  case 24: 
   $ret=-1;
   label = 33; break;
  case 25: 
   $i=0;
   label = 26; break;
  case 26: 
   var $194=$i;
   var $195=$irep;
   var $196=(($195+40)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=(($194)>>>(0)) < (($197)>>>(0));
   if ($198) { label = 27; break; } else { label = 31; break; }
  case 27: 
   var $200=$src;
   var $201=_bin_to_uint16($200);
   $snl=$201;
   var $202=$src;
   var $203=(($202+2)|0);
   $src=$203;
   var $204=$snl;
   var $205=(($204)&(65535));
   var $206=(($205)|(0))==65535;
   if ($206) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $208=$i;
   var $209=$irep;
   var $210=(($209+20)|0);
   var $211=HEAP32[(($210)>>2)];
   var $212=(($211+($208<<1))|0);
   HEAP16[(($212)>>1)]=0;
   label = 30; break;
  case 29: 
   var $214=$1;
   var $215=$src;
   var $216=$snl;
   var $217=(($216)&(65535));
   var $218=_mrb_intern2($214, $215, $217);
   var $219=$i;
   var $220=$irep;
   var $221=(($220+20)|0);
   var $222=HEAP32[(($221)>>2)];
   var $223=(($222+($219<<1))|0);
   HEAP16[(($223)>>1)]=$218;
   var $224=$snl;
   var $225=(($224)&(65535));
   var $226=((($225)+(1))|0);
   var $227=$src;
   var $228=(($227+$226)|0);
   $src=$228;
   var $229=$1;
   var $230=$ai;
   _mrb_gc_arena_restore($229, $230);
   label = 30; break;
  case 30: 
   var $232=$i;
   var $233=((($232)+(1))|0);
   $i=$233;
   label = 26; break;
  case 31: 
   label = 32; break;
  case 32: 
   var $236=$src;
   var $237=$2;
   var $238=$236;
   var $239=$237;
   var $240=((($238)-($239))|0);
   var $241=$3;
   HEAP32[(($241)>>2)]=$240;
   $ret=0;
   label = 33; break;
  case 33: 
   var $243=$ret;
   STACKTOP = sp;
   return $243;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_float_value($agg_result, $mrb, $f) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $v=sp;
   $1=$mrb;
   $2=$f;
   label = 2; break;
  case 2: 
   var $4=(($v+8)|0);
   HEAP32[(($4)>>2)]=6;
   var $5=$2;
   var $6=(($v)|0);
   var $7=$6;
   (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($7)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($7)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 3; break;
  case 3: 
   var $9=$agg_result;
   var $10=$v;
   assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_p($mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2=sp;
 $1=$mrb;
 var $3=$1;
 _mrb_funcall($2, $3, $obj, ((89780)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
 var $4=$obj;
 var $5=$2;
 assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
 var $6=$1;
 _printstr($6, $obj);
 var $7=HEAP32[((_stdout)>>2)];
 var $8=_fputc(10, $7);
 STACKTOP = sp;
 return;
}
function _printstr($mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $str;
   var $s;
   var $len;
   $1=$mrb;
   var $2=(($obj+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|(0))==16;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=(($obj)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=$8;
   $str=$9;
   var $10=$str;
   var $11=(($10+20)|0);
   var $12=HEAP32[(($11)>>2)];
   $s=$12;
   var $13=$str;
   var $14=(($13+12)|0);
   var $15=HEAP32[(($14)>>2)];
   $len=$15;
   var $16=$s;
   var $17=$len;
   var $18=HEAP32[((_stdout)>>2)];
   var $19=_fwrite($16, $17, 1, $18);
   label = 3; break;
  case 3: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_print_error($mrb) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $s=sp;
   var $2=(sp)+(12);
   var $3=(sp)+(24);
   var $str;
   $1=$mrb;
   var $4=$1;
   _mrb_print_backtrace($4);
   var $5=$1;
   var $6=$1;
   var $7=(($6+16)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$8;
   _mrb_obj_value9($2, $9);
   _mrb_funcall($3, $5, $2, ((89780)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $10=$s;
   var $11=$3;
   assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
   var $12=(($s+8)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))==16;
   if ($14) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $16=(($s)|0);
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   var $19=$18;
   $str=$19;
   var $20=$str;
   var $21=(($20+20)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$str;
   var $24=(($23+12)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=HEAP32[((_stderr)>>2)];
   var $27=_fwrite($22, $25, 1, $26);
   var $28=HEAP32[((_stderr)>>2)];
   var $29=_fputc(10, $28);
   label = 3; break;
  case 3: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_value9($agg_result, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   var $b;
   $1=$p;
   var $2=$1;
   var $3=$2;
   $b=$3;
   label = 2; break;
  case 2: 
   var $5=$b;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 255;
   var $9=(($v+8)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=$1;
   var $11=(($v)|0);
   var $12=$11;
   HEAP32[(($12)>>2)]=$10;
   label = 3; break;
  case 3: 
   var $14=$agg_result;
   var $15=$v;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_proc_new($mrb, $irep) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $p;
   $1=$mrb;
   $2=$irep;
   var $3=$1;
   var $4=$1;
   var $5=(($4+56)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=_mrb_obj_alloc($3, 13, $6);
   var $8=$7;
   $p=$8;
   var $9=$1;
   var $10=(($9+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11+16)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))!=0;
   if ($14) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $16=$1;
   var $17=(($16+8)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18+16)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+28)|0);
   var $22=HEAP32[(($21)>>2)];
   var $25 = $22;label = 4; break;
  case 3: 
   var $25 = 0;label = 4; break;
  case 4: 
   var $25;
   var $26=$p;
   var $27=(($26+16)|0);
   HEAP32[(($27)>>2)]=$25;
   var $28=$2;
   var $29=$p;
   var $30=(($29+12)|0);
   var $31=$30;
   HEAP32[(($31)>>2)]=$28;
   var $32=$p;
   var $33=(($32+20)|0);
   HEAP32[(($33)>>2)]=0;
   var $34=$p;
   return $34;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_closure_new($mrb, $irep) {
 var label = 0;
 var $1;
 var $2;
 var $p;
 $1=$mrb;
 $2=$irep;
 var $3=$1;
 var $4=$2;
 var $5=_mrb_proc_new($3, $4);
 $p=$5;
 var $6=$1;
 var $7=$p;
 var $8=$1;
 var $9=(($8+8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+12)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+4)|0);
 var $19=HEAP16[(($18)>>1)];
 var $20=(($19)&(65535));
 _closure_setup($6, $7, $20);
 var $21=$p;
 return $21;
}
function _closure_setup($mrb, $p, $nlocals) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $e;
   $1=$mrb;
   $2=$p;
   $3=$nlocals;
   var $4=$1;
   var $5=(($4+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6+16)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8+40)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $13=$1;
   var $14=$1;
   var $15=(($14+8)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16+16)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+20)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$22;
   var $24=_mrb_obj_alloc($13, 20, $23);
   var $25=$24;
   $e=$25;
   var $26=$3;
   var $27=$e;
   var $28=$26 & 2097151;
   var $29=$27;
   var $30=$28 & 2097151;
   var $31=$30 << 11;
   var $32=HEAP32[(($29)>>2)];
   var $33=$32 & 2047;
   var $34=$33 | $31;
   HEAP32[(($29)>>2)]=$34;
   var $35=$1;
   var $36=(($35+8)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37+16)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39)|0);
   var $41=HEAP16[(($40)>>1)];
   var $42=$e;
   var $43=(($42+16)|0);
   HEAP16[(($43)>>1)]=$41;
   var $44=$1;
   var $45=(($44+8)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($46+16)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=$1;
   var $50=(($49+8)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($51+20)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=$48;
   var $55=$53;
   var $56=((($54)-($55))|0);
   var $57=((((($56)|(0)))/(44))&-1);
   var $58=$e;
   var $59=(($58+20)|0);
   HEAP32[(($59)>>2)]=$57;
   var $60=$1;
   var $61=(($60+8)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62+4)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=$e;
   var $66=(($65+12)|0);
   HEAP32[(($66)>>2)]=$64;
   var $67=$e;
   var $68=$1;
   var $69=(($68+8)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70+16)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72+40)|0);
   HEAP32[(($73)>>2)]=$67;
   label = 4; break;
  case 3: 
   var $75=$1;
   var $76=(($75+8)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($77+16)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79+40)|0);
   var $81=HEAP32[(($80)>>2)];
   $e=$81;
   label = 4; break;
  case 4: 
   var $83=$e;
   var $84=$2;
   var $85=(($84+20)|0);
   HEAP32[(($85)>>2)]=$83;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_proc_new_cfunc($mrb, $func) {
 var label = 0;
 var $1;
 var $2;
 var $p;
 $1=$mrb;
 $2=$func;
 var $3=$1;
 var $4=$1;
 var $5=(($4+56)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=_mrb_obj_alloc($3, 13, $6);
 var $8=$7;
 $p=$8;
 var $9=$2;
 var $10=$p;
 var $11=(($10+12)|0);
 var $12=$11;
 HEAP32[(($12)>>2)]=$9;
 var $13=$p;
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $16=$15 >>> 11;
 var $17=$16 & 2097151;
 var $18=$17 | 128;
 var $19=$18 & 2097151;
 var $20=$13;
 var $21=$19 & 2097151;
 var $22=$21 << 11;
 var $23=HEAP32[(($20)>>2)];
 var $24=$23 & 2047;
 var $25=$24 | $22;
 HEAP32[(($20)>>2)]=$25;
 var $26=$p;
 return $26;
}
function _mrb_proc_copy($a, $b) {
 var label = 0;
 var $1;
 var $2;
 $1=$a;
 $2=$b;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$5 >>> 11;
 var $7=$6 & 2097151;
 var $8=$1;
 var $9=$7 & 2097151;
 var $10=$8;
 var $11=$9 & 2097151;
 var $12=$11 << 11;
 var $13=HEAP32[(($10)>>2)];
 var $14=$13 & 2047;
 var $15=$14 | $12;
 HEAP32[(($10)>>2)]=$15;
 var $16=$1;
 var $17=(($16+12)|0);
 var $18=$2;
 var $19=(($18+12)|0);
 var $20=$17;
 var $21=$19;
 assert(4 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];
 var $22=$2;
 var $23=(($22+16)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$1;
 var $26=(($25+16)|0);
 HEAP32[(($26)>>2)]=$24;
 var $27=$2;
 var $28=(($27+20)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$1;
 var $31=(($30+20)|0);
 HEAP32[(($31)>>2)]=$29;
 return;
}
function _mrb_init_proc($mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $m;
   var $call_irep;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_alloca($2, 44);
   var $4=$3;
   $call_irep=$4;
   var $5=$call_irep;
   var $6=(($5)|(0))==0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   var $9=$call_irep;
   var $10=$9;
   assert(44 % 1 === 0);(_memcpy($10, 110976, 44)|0);
   var $11=$call_irep;
   var $12=(($11+8)|0);
   HEAP8[($12)]=1;
   var $13=$call_irep;
   var $14=(($13)|0);
   HEAP32[(($14)>>2)]=-1;
   var $15=$call_irep;
   var $16=(($15+12)|0);
   HEAP32[(($16)>>2)]=((85524)|0);
   var $17=$call_irep;
   var $18=(($17+32)|0);
   HEAP32[(($18)>>2)]=1;
   var $19=$1;
   var $20=$1;
   var $21=(($20+44)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=_mrb_define_class($19, ((106140)|0), $22);
   var $24=$1;
   var $25=(($24+56)|0);
   HEAP32[(($25)>>2)]=$23;
   var $26=$1;
   var $27=(($26+56)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=$28;
   var $30=HEAP32[(($29)>>2)];
   var $31=$30 >>> 11;
   var $32=$31 & 2097151;
   var $33=$32 & -256;
   var $34=$33 | 13;
   var $35=$1;
   var $36=(($35+56)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=$34 & 2097151;
   var $39=$37;
   var $40=$38 & 2097151;
   var $41=$40 << 11;
   var $42=HEAP32[(($39)>>2)];
   var $43=$42 & 2047;
   var $44=$43 | $41;
   HEAP32[(($39)>>2)]=$44;
   var $45=$1;
   var $46=$1;
   var $47=(($46+56)|0);
   var $48=HEAP32[(($47)>>2)];
   _mrb_define_method($45, $48, ((105404)|0), 144, 0);
   var $49=$1;
   var $50=$1;
   var $51=(($50+56)|0);
   var $52=HEAP32[(($51)>>2)];
   _mrb_define_method($49, $52, ((100432)|0), 92, 262144);
   var $53=$1;
   var $54=$1;
   var $55=(($54+56)|0);
   var $56=HEAP32[(($55)>>2)];
   _mrb_define_method($53, $56, ((96772)|0), 158, 0);
   var $57=$1;
   var $58=$call_irep;
   var $59=_mrb_proc_new($57, $58);
   $m=$59;
   var $60=$1;
   var $61=$1;
   var $62=(($61+56)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=$1;
   var $65=_mrb_intern2($64, ((94176)|0), 4);
   var $66=$m;
   _mrb_define_method_raw($60, $63, $65, $66);
   var $67=$1;
   var $68=$1;
   var $69=(($68+56)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=$1;
   var $72=_mrb_intern2($71, ((91624)|0), 2);
   var $73=$m;
   _mrb_define_method_raw($67, $70, $72, $73);
   var $74=$1;
   var $75=$1;
   var $76=(($75+96)|0);
   var $77=HEAP32[(($76)>>2)];
   _mrb_define_class_method($74, $77, ((89408)|0), 354, 0);
   var $78=$1;
   var $79=$1;
   var $80=(($79+96)|0);
   var $81=HEAP32[(($80)>>2)];
   _mrb_define_method($78, $81, ((89408)|0), 354, 0);
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_proc_initialize($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $blk=sp;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((88552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$blk,tempInt));
   var $4=(($blk+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))==0;
   if ($6) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $8=(($blk)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $13=$1;
   var $14=$1;
   var $15=_mrb_class_get($14, ((87504)|0));
   _mrb_raise($13, $15, ((86680)|0));
   label = 5; break;
  case 4: 
   var $17=(($self)|0);
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=$19;
   var $21=(($blk)|0);
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=$23;
   _mrb_proc_copy($20, $24);
   label = 5; break;
  case 5: 
   var $26=$agg_result;
   var $27=$self;
   assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_proc_init_copy($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $proc=sp;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((105816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$proc,tempInt));
   var $4=(($proc+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))!=13;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$1;
   var $9=$1;
   var $10=_mrb_class_get($9, ((87504)|0));
   _mrb_raise($8, $10, ((105444)|0));
   label = 3; break;
  case 3: 
   var $12=(($self)|0);
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=$14;
   var $16=(($proc)|0);
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   var $19=$18;
   _mrb_proc_copy($15, $19);
   var $20=$agg_result;
   var $21=$self;
   assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_proc_arity($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $p;
   var $iseq;
   var $aspec;
   var $ma;
   var $ra;
   var $pa;
   var $arity;
   $1=$mrb;
   var $2=(($self)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $p=$5;
   var $6=$1;
   var $7=$p;
   var $8=_mrb_proc_iseq($6, $7);
   $iseq=$8;
   var $9=$iseq;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 >>> 7;
   var $12=$11 & 33554431;
   $aspec=$12;
   var $13=$aspec;
   var $14=$13 >>> 18;
   var $15=$14 & 31;
   $ma=$15;
   var $16=$aspec;
   var $17=$16 & 4096;
   $ra=$17;
   var $18=$aspec;
   var $19=$18 >>> 7;
   var $20=$19 & 31;
   $pa=$20;
   var $21=$ra;
   var $22=(($21)|(0))!=0;
   if ($22) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $24=$ma;
   var $25=$pa;
   var $26=((($24)+($25))|0);
   var $27=((($26)+(1))|0);
   var $28=(((-$27))|0);
   var $34 = $28;label = 4; break;
  case 3: 
   var $30=$ma;
   var $31=$pa;
   var $32=((($30)+($31))|0);
   var $34 = $32;label = 4; break;
  case 4: 
   var $34;
   $arity=$34;
   var $35=$arity;
   _mrb_fixnum_value($agg_result, $35);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _proc_lambda($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $blk=sp;
   var $p;
   var $p2;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((88552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$blk,tempInt));
   var $4=(($blk+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))==0;
   if ($6) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $8=(($blk)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $13=$1;
   var $14=$1;
   var $15=_mrb_class_get($14, ((87504)|0));
   _mrb_raise($13, $15, ((86680)|0));
   label = 4; break;
  case 4: 
   var $17=(($blk)|0);
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=$19;
   $p=$20;
   var $21=$p;
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=$23 >>> 11;
   var $25=$24 & 2097151;
   var $26=$25 & 256;
   var $27=(($26)|(0))!=0;
   if ($27) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $29=$1;
   var $30=$p;
   var $31=(($30+4)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=_mrb_obj_alloc($29, 13, $32);
   var $34=$33;
   $p2=$34;
   var $35=$p2;
   var $36=$p;
   _mrb_proc_copy($35, $36);
   var $37=$p2;
   var $38=$37;
   var $39=HEAP32[(($38)>>2)];
   var $40=$39 >>> 11;
   var $41=$40 & 2097151;
   var $42=$41 | 256;
   var $43=$42 & 2097151;
   var $44=$37;
   var $45=$43 & 2097151;
   var $46=$45 << 11;
   var $47=HEAP32[(($44)>>2)];
   var $48=$47 & 2047;
   var $49=$48 | $46;
   HEAP32[(($44)>>2)]=$49;
   var $50=$p2;
   var $51=$50;
   _mrb_obj_value20($agg_result, $51);
   label = 7; break;
  case 6: 
   var $53=$agg_result;
   var $54=$blk;
   assert(12 % 1 === 0);HEAP32[(($53)>>2)]=HEAP32[(($54)>>2)];HEAP32[((($53)+(4))>>2)]=HEAP32[((($54)+(4))>>2)];HEAP32[((($53)+(8))>>2)]=HEAP32[((($54)+(8))>>2)];
   label = 7; break;
  case 7: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_value20($agg_result, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   var $b;
   $1=$p;
   var $2=$1;
   var $3=$2;
   $b=$3;
   label = 2; break;
  case 2: 
   var $5=$b;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 255;
   var $9=(($v+8)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=$1;
   var $11=(($v)|0);
   var $12=$11;
   HEAP32[(($12)>>2)]=$10;
   label = 3; break;
  case 3: 
   var $14=$agg_result;
   var $15=$v;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_value($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_open_allocf($f, $ud) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $mrb;
   $2=$f;
   $3=$ud;
   var $4=$2;
   var $5=$3;
   var $6=FUNCTION_TABLE[$4](0, 0, 584, $5);
   var $7=$6;
   $mrb=$7;
   var $8=$mrb;
   var $9=(($8)|(0))==0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=0;
   label = 4; break;
  case 3: 
   var $12=$mrb;
   var $13=$12;
   assert(584 % 1 === 0);(_memcpy($13, 110340, 584)|0);
   var $14=$3;
   var $15=$mrb;
   var $16=(($15+580)|0);
   HEAP32[(($16)>>2)]=$14;
   var $17=$2;
   var $18=$mrb;
   var $19=(($18+4)|0);
   HEAP32[(($19)>>2)]=$17;
   var $20=$mrb;
   var $21=(($20+524)|0);
   HEAP32[(($21)>>2)]=1;
   var $22=$mrb;
   _mrb_init_heap($22);
   var $23=$mrb;
   var $24=_mrb_malloc($23, 52);
   var $25=$24;
   var $26=$mrb;
   var $27=(($26+8)|0);
   HEAP32[(($27)>>2)]=$25;
   var $28=$mrb;
   var $29=(($28+8)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$30;
   assert(52 % 1 === 0);(_memcpy($31, 110924, 52)|0);
   var $32=$mrb;
   var $33=(($32+8)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=$mrb;
   var $36=(($35+12)|0);
   HEAP32[(($36)>>2)]=$34;
   var $37=$mrb;
   _mrb_init_core($37);
   var $38=$mrb;
   $1=$38;
   label = 4; break;
  case 4: 
   var $40=$1;
   return $40;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_alloca($mrb, $size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $p;
   $2=$mrb;
   $3=$size;
   var $4=$2;
   var $5=$3;
   var $6=((($5)+(4))|0);
   var $7=_mrb_malloc($4, $6);
   var $8=$7;
   $p=$8;
   var $9=$p;
   var $10=(($9)|(0))==0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=0;
   label = 4; break;
  case 3: 
   var $13=$2;
   var $14=(($13+560)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$p;
   var $17=(($16)|0);
   HEAP32[(($17)>>2)]=$15;
   var $18=$p;
   var $19=$2;
   var $20=(($19+560)|0);
   HEAP32[(($20)>>2)]=$18;
   var $21=$p;
   var $22=(($21+4)|0);
   var $23=(($22)|0);
   $1=$23;
   label = 4; break;
  case 4: 
   var $25=$1;
   return $25;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_open() {
 var label = 0;
 var $mrb;
 var $1=_mrb_open_allocf(258, 0);
 $mrb=$1;
 var $2=$mrb;
 return $2;
}
Module["_mrb_open"] = _mrb_open;
function _allocf($mrb, $p, $size, $ud) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   $2=$mrb;
   $3=$p;
   $4=$size;
   $5=$ud;
   var $6=$4;
   var $7=(($6)|(0))==0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$3;
   _free($9);
   $1=0;
   label = 4; break;
  case 3: 
   var $11=$3;
   var $12=$4;
   var $13=_realloc($11, $12);
   $1=$13;
   label = 4; break;
  case 4: 
   var $15=$1;
   return $15;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_irep_free($mrb, $irep) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$irep;
   var $3=$2;
   var $4=(($3+8)|0);
   var $5=HEAP8[($4)];
   var $6=(($5)&(255));
   var $7=$6 & 1;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=$1;
   var $11=$2;
   var $12=(($11+12)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$13;
   _mrb_free($10, $14);
   label = 3; break;
  case 3: 
   var $16=$1;
   var $17=$2;
   var $18=(($17+16)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$19;
   _mrb_free($16, $20);
   var $21=$1;
   var $22=$2;
   var $23=(($22+20)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$24;
   _mrb_free($21, $25);
   var $26=$1;
   var $27=$2;
   var $28=(($27+24)|0);
   var $29=HEAP32[(($28)>>2)];
   _mrb_free($26, $29);
   var $30=$1;
   var $31=$2;
   var $32=(($31+28)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=$33;
   _mrb_free($30, $34);
   var $35=$1;
   var $36=$2;
   var $37=$36;
   _mrb_free($35, $37);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_free_context($mrb, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$c;
   var $3=$2;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 4; break;
  case 3: 
   var $7=$1;
   var $8=$2;
   var $9=(($8+8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$10;
   _mrb_free($7, $11);
   var $12=$1;
   var $13=$2;
   var $14=(($13+20)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$15;
   _mrb_free($12, $16);
   var $17=$1;
   var $18=$2;
   var $19=(($18+28)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$20;
   _mrb_free($17, $21);
   var $22=$1;
   var $23=$2;
   var $24=(($23+36)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$25;
   _mrb_free($22, $26);
   var $27=$1;
   var $28=$2;
   var $29=$28;
   _mrb_free($27, $29);
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_close($mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $i;
   $1=$mrb;
   var $2=$1;
   _mrb_final_core($2);
   var $3=$1;
   _mrb_gc_free_gv($3);
   $i=0;
   label = 2; break;
  case 2: 
   var $5=$i;
   var $6=$1;
   var $7=(($6+28)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($5)>>>(0)) < (($8)>>>(0));
   if ($9) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $11=$1;
   var $12=$i;
   var $13=$1;
   var $14=(($13+24)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15+($12<<2))|0);
   var $17=HEAP32[(($16)>>2)];
   _mrb_irep_free($11, $17);
   label = 4; break;
  case 4: 
   var $19=$i;
   var $20=((($19)+(1))|0);
   $i=$20;
   label = 2; break;
  case 5: 
   var $22=$1;
   var $23=$1;
   var $24=(($23+24)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$25;
   _mrb_free($22, $26);
   var $27=$1;
   var $28=$1;
   var $29=(($28+12)|0);
   var $30=HEAP32[(($29)>>2)];
   _mrb_free_context($27, $30);
   var $31=$1;
   _mrb_free_symtbl($31);
   var $32=$1;
   _mrb_free_heap($32);
   var $33=$1;
   _mrb_alloca_free($33);
   var $34=$1;
   var $35=$1;
   var $36=$35;
   _mrb_free($34, $36);
   return;
  default: assert(0, "bad label: " + label);
 }
}
Module["_mrb_close"] = _mrb_close;
function _mrb_alloca_free($mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $p;
   var $tmp;
   $1=$mrb;
   var $2=$1;
   var $3=(($2)|(0))==0;
   if ($3) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 6; break;
  case 3: 
   var $6=$1;
   var $7=(($6+560)|0);
   var $8=HEAP32[(($7)>>2)];
   $p=$8;
   label = 4; break;
  case 4: 
   var $10=$p;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $13=$p;
   $tmp=$13;
   var $14=$p;
   var $15=(($14)|0);
   var $16=HEAP32[(($15)>>2)];
   $p=$16;
   var $17=$1;
   var $18=$tmp;
   var $19=$18;
   _mrb_free($17, $19);
   label = 4; break;
  case 6: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_add_irep($mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $irep;
   var $max;
   var $i;
   var $old_capa;
   $1=$mrb;
   var $2=$1;
   var $3=(($2+24)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))!=0;
   if ($5) { label = 5; break; } else { label = 2; break; }
  case 2: 
   $max=256;
   var $7=$1;
   var $8=(($7+28)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$max;
   var $11=(($9)>>>(0)) > (($10)>>>(0));
   if ($11) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $13=$1;
   var $14=(($13+28)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=((($15)+(1))|0);
   $max=$16;
   label = 4; break;
  case 4: 
   var $18=$1;
   var $19=$max;
   var $20=_mrb_calloc($18, $19, 4);
   var $21=$20;
   var $22=$1;
   var $23=(($22+24)|0);
   HEAP32[(($23)>>2)]=$21;
   var $24=$max;
   var $25=$1;
   var $26=(($25+32)|0);
   HEAP32[(($26)>>2)]=$24;
   label = 15; break;
  case 5: 
   var $28=$1;
   var $29=(($28+32)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$1;
   var $32=(($31+28)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($30)>>>(0)) <= (($33)>>>(0));
   if ($34) { label = 6; break; } else { label = 14; break; }
  case 6: 
   var $36=$1;
   var $37=(($36+32)|0);
   var $38=HEAP32[(($37)>>2)];
   $old_capa=$38;
   label = 7; break;
  case 7: 
   var $40=$1;
   var $41=(($40+32)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=$1;
   var $44=(($43+28)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($42)>>>(0)) <= (($45)>>>(0));
   if ($46) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $48=$1;
   var $49=(($48+32)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=($50<<1);
   HEAP32[(($49)>>2)]=$51;
   label = 7; break;
  case 9: 
   var $53=$1;
   var $54=$1;
   var $55=(($54+24)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=$56;
   var $58=$1;
   var $59=(($58+32)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=($60<<2);
   var $62=_mrb_realloc($53, $57, $61);
   var $63=$62;
   var $64=$1;
   var $65=(($64+24)|0);
   HEAP32[(($65)>>2)]=$63;
   var $66=$old_capa;
   $i=$66;
   label = 10; break;
  case 10: 
   var $68=$i;
   var $69=$1;
   var $70=(($69+32)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($68)>>>(0)) < (($71)>>>(0));
   if ($72) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $74=$i;
   var $75=$1;
   var $76=(($75+24)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($77+($74<<2))|0);
   HEAP32[(($78)>>2)]=0;
   label = 12; break;
  case 12: 
   var $80=$i;
   var $81=((($80)+(1))|0);
   $i=$81;
   label = 10; break;
  case 13: 
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $85=$1;
   var $86=_mrb_malloc($85, 44);
   var $87=$86;
   $irep=$87;
   var $88=$irep;
   var $89=$88;
   assert(44 % 1 === 0);(_memcpy($89, 111020, 44)|0);
   var $90=$irep;
   var $91=$1;
   var $92=(($91+28)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=$1;
   var $95=(($94+24)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($96+($93<<2))|0);
   HEAP32[(($97)>>2)]=$90;
   var $98=$1;
   var $99=(($98+28)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=((($100)+(1))|0);
   HEAP32[(($99)>>2)]=$101;
   var $102=$irep;
   var $103=(($102)|0);
   HEAP32[(($103)>>2)]=$100;
   var $104=$irep;
   return $104;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_top_self($agg_result, $mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$mrb;
   var $2=$1;
   var $3=(($2+40)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))!=0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $7=$1;
   var $8=$1;
   var $9=(($8+44)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=_mrb_obj_alloc($7, 8, $10);
   var $12=$11;
   var $13=$1;
   var $14=(($13+40)|0);
   HEAP32[(($14)>>2)]=$12;
   var $15=$1;
   var $16=$1;
   var $17=(($16+40)|0);
   var $18=HEAP32[(($17)>>2)];
   _mrb_define_singleton_method($15, $18, ((100628)|0), 538, 0);
   var $19=$1;
   var $20=$1;
   var $21=(($20+40)|0);
   var $22=HEAP32[(($21)>>2)];
   _mrb_define_singleton_method($19, $22, ((104376)|0), 538, 0);
   label = 3; break;
  case 3: 
   var $24=$1;
   var $25=(($24+40)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$26;
   _mrb_obj_value30($agg_result, $27);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _inspect_main($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_str_new($agg_result, $2, ((99960)|0), 4);
 STACKTOP = sp;
 return;
}
function _mrb_obj_value30($agg_result, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   var $b;
   $1=$p;
   var $2=$1;
   var $3=$2;
   $b=$3;
   label = 2; break;
  case 2: 
   var $5=$b;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 255;
   var $9=(($v+8)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=$1;
   var $11=(($v)|0);
   var $12=$11;
   HEAP32[(($12)>>2)]=$10;
   label = 3; break;
  case 3: 
   var $14=$agg_result;
   var $15=$v;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_modify($mrb, $s) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $shared;
   var $ptr;
   var $p;
   var $len;
   var $p1;
   $1=$mrb;
   $2=$s;
   var $3=$2;
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5 >>> 11;
   var $7=$6 & 2097151;
   var $8=$7 & 1;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 9; break; }
  case 2: 
   var $11=$2;
   var $12=(($11+16)|0);
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   $shared=$14;
   var $15=$shared;
   var $16=(($15+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0))==1;
   if ($18) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $20=$2;
   var $21=(($20+20)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$shared;
   var $24=(($23+8)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($22)|(0))==(($25)|(0));
   if ($26) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $28=$shared;
   var $29=(($28+8)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$2;
   var $32=(($31+20)|0);
   HEAP32[(($32)>>2)]=$30;
   var $33=$shared;
   var $34=(($33+12)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$2;
   var $37=(($36+16)|0);
   var $38=$37;
   HEAP32[(($38)>>2)]=$35;
   var $39=$1;
   var $40=$shared;
   var $41=$40;
   _mrb_free($39, $41);
   label = 8; break;
  case 5: 
   var $43=$2;
   var $44=(($43+20)|0);
   var $45=HEAP32[(($44)>>2)];
   $p=$45;
   var $46=$2;
   var $47=(($46+12)|0);
   var $48=HEAP32[(($47)>>2)];
   $len=$48;
   var $49=$1;
   var $50=$len;
   var $51=((($50)+(1))|0);
   var $52=_mrb_malloc($49, $51);
   $ptr=$52;
   var $53=$p;
   var $54=(($53)|(0))!=0;
   if ($54) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $56=$ptr;
   var $57=$p;
   var $58=$len;
   assert($58 % 1 === 0);(_memcpy($56, $57, $58)|0);
   label = 7; break;
  case 7: 
   var $60=$len;
   var $61=$ptr;
   var $62=(($61+$60)|0);
   HEAP8[($62)]=0;
   var $63=$ptr;
   var $64=$2;
   var $65=(($64+20)|0);
   HEAP32[(($65)>>2)]=$63;
   var $66=$len;
   var $67=$2;
   var $68=(($67+16)|0);
   var $69=$68;
   HEAP32[(($69)>>2)]=$66;
   var $70=$1;
   var $71=$shared;
   _str_decref($70, $71);
   label = 8; break;
  case 8: 
   var $73=$2;
   var $74=$73;
   var $75=HEAP32[(($74)>>2)];
   var $76=$75 >>> 11;
   var $77=$76 & 2097151;
   var $78=$77 & -2;
   var $79=$78 & 2097151;
   var $80=$73;
   var $81=$79 & 2097151;
   var $82=$81 << 11;
   var $83=HEAP32[(($80)>>2)];
   var $84=$83 & 2047;
   var $85=$84 | $82;
   HEAP32[(($80)>>2)]=$85;
   label = 13; break;
  case 9: 
   var $87=$2;
   var $88=$87;
   var $89=HEAP32[(($88)>>2)];
   var $90=$89 >>> 11;
   var $91=$90 & 2097151;
   var $92=$91 & 2;
   var $93=(($92)|(0))!=0;
   if ($93) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $95=$2;
   var $96=(($95+20)|0);
   var $97=HEAP32[(($96)>>2)];
   $p1=$97;
   var $98=$1;
   var $99=$2;
   var $100=(($99+12)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=((($101)+(1))|0);
   var $103=_mrb_malloc($98, $102);
   var $104=$2;
   var $105=(($104+20)|0);
   HEAP32[(($105)>>2)]=$103;
   var $106=$p1;
   var $107=(($106)|(0))!=0;
   if ($107) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $109=$2;
   var $110=(($109+20)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=$p1;
   var $113=$2;
   var $114=(($113+12)|0);
   var $115=HEAP32[(($114)>>2)];
   assert($115 % 1 === 0);(_memcpy($111, $112, $115)|0);
   label = 12; break;
  case 12: 
   var $117=$2;
   var $118=(($117+12)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120=$2;
   var $121=(($120+20)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=(($122+$119)|0);
   HEAP8[($123)]=0;
   var $124=$2;
   var $125=(($124+12)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=$2;
   var $128=(($127+16)|0);
   var $129=$128;
   HEAP32[(($129)>>2)]=$126;
   label = 13; break;
  case 13: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _str_decref($mrb, $shared) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$shared;
   var $3=$2;
   var $4=(($3+4)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=((($5)-(1))|0);
   HEAP32[(($4)>>2)]=$6;
   var $7=$2;
   var $8=(($7+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==0;
   if ($10) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $12=$2;
   var $13=(($12)|0);
   var $14=HEAP8[($13)];
   var $15=(($14 << 24) >> 24)!=0;
   if ($15) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $17=$1;
   var $18=$2;
   var $19=(($18+8)|0);
   var $20=HEAP32[(($19)>>2)];
   _mrb_free($17, $20);
   label = 4; break;
  case 4: 
   var $22=$1;
   var $23=$2;
   var $24=$23;
   _mrb_free($22, $24);
   label = 5; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _str_with_class($mrb, $s, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 $1=$mrb;
 $2=$s;
 var $3=(($obj)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$5;
 var $7=(($6+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$2;
 var $10=(($9+4)|0);
 HEAP32[(($10)>>2)]=$8;
 STACKTOP = sp;
 return;
}
function _mrb_str_resize($agg_result, $mrb, $str, $len) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $slen;
   var $s;
   $1=$mrb;
   $2=$len;
   var $3=(($str)|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5;
   $s=$6;
   var $7=$1;
   var $8=$s;
   _mrb_str_modify($7, $8);
   var $9=$s;
   var $10=(($9+12)|0);
   var $11=HEAP32[(($10)>>2)];
   $slen=$11;
   var $12=$2;
   var $13=$slen;
   var $14=(($12)|(0))!=(($13)|(0));
   if ($14) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $16=$slen;
   var $17=$2;
   var $18=(($16)|(0)) < (($17)|(0));
   if ($18) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $20=$slen;
   var $21=$2;
   var $22=((($20)-($21))|0);
   var $23=(($22)|(0)) > 256;
   if ($23) { label = 4; break; } else { label = 7; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $26=$1;
   var $27=$s;
   var $28=(($27+20)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$2;
   var $31=((($30)+(1))|0);
   var $32=_mrb_realloc($26, $29, $31);
   var $33=$s;
   var $34=(($33+20)|0);
   HEAP32[(($34)>>2)]=$32;
   var $35=$2;
   var $36=$s;
   var $37=(($36+16)|0);
   var $38=$37;
   HEAP32[(($38)>>2)]=$35;
   label = 6; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $41=$2;
   var $42=$s;
   var $43=(($42+12)|0);
   HEAP32[(($43)>>2)]=$41;
   var $44=$2;
   var $45=$s;
   var $46=(($45+20)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47+$44)|0);
   HEAP8[($48)]=0;
   label = 8; break;
  case 8: 
   var $50=$agg_result;
   var $51=$str;
   assert(12 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)];HEAP32[((($50)+(8))>>2)]=HEAP32[((($51)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_buf_new($agg_result, $mrb, $capa) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $s;
   $1=$mrb;
   $2=$capa;
   var $3=$1;
   var $4=$1;
   var $5=(($4+60)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=_mrb_obj_alloc($3, 16, $6);
   var $8=$7;
   $s=$8;
   var $9=$2;
   var $10=(($9)|(0)) < 128;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $2=128;
   label = 3; break;
  case 3: 
   var $13=$s;
   var $14=(($13+12)|0);
   HEAP32[(($14)>>2)]=0;
   var $15=$2;
   var $16=$s;
   var $17=(($16+16)|0);
   var $18=$17;
   HEAP32[(($18)>>2)]=$15;
   var $19=$1;
   var $20=$2;
   var $21=((($20)+(1))|0);
   var $22=_mrb_malloc($19, $21);
   var $23=$s;
   var $24=(($23+20)|0);
   HEAP32[(($24)>>2)]=$22;
   var $25=$s;
   var $26=(($25+20)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27)|0);
   HEAP8[($28)]=0;
   var $29=$s;
   var $30=$29;
   _mrb_obj_value45($agg_result, $30);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_value45($agg_result, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   var $b;
   $1=$p;
   var $2=$1;
   var $3=$2;
   $b=$3;
   label = 2; break;
  case 2: 
   var $5=$b;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 255;
   var $9=(($v+8)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=$1;
   var $11=(($v)|0);
   var $12=$11;
   HEAP32[(($12)>>2)]=$10;
   label = 3; break;
  case 3: 
   var $14=$agg_result;
   var $15=$v;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_buf_cat($agg_result, $mrb, $str, $ptr, $len) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$mrb;
   $2=$ptr;
   $3=$len;
   var $4=$3;
   var $5=(($4)|(0))==0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$agg_result;
   var $8=$str;
   assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
   label = 4; break;
  case 3: 
   var $10=$1;
   var $11=(($str)|0);
   var $12=$11;
   var $13=HEAP32[(($12)>>2)];
   var $14=$13;
   var $15=$2;
   var $16=$3;
   _str_buf_cat($10, $14, $15, $16);
   var $17=$agg_result;
   var $18=$str;
   assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _str_buf_cat($mrb, $s, $ptr, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $capa;
   var $total;
   var $off;
   $1=$mrb;
   $2=$s;
   $3=$ptr;
   $4=$len;
   $off=-1;
   var $5=$1;
   var $6=$2;
   _mrb_str_modify($5, $6);
   var $7=$3;
   var $8=$2;
   var $9=(($8+20)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($7)>>>(0)) >= (($10)>>>(0));
   if ($11) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $13=$3;
   var $14=$2;
   var $15=(($14+20)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$2;
   var $18=(($17+12)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($16+$19)|0);
   var $21=(($13)>>>(0)) <= (($20)>>>(0));
   if ($21) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $23=$3;
   var $24=$2;
   var $25=(($24+20)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$23;
   var $28=$26;
   var $29=((($27)-($28))|0);
   $off=$29;
   label = 4; break;
  case 4: 
   var $31=$4;
   var $32=(($31)|(0))==0;
   if ($32) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 20; break;
  case 6: 
   var $35=$2;
   var $36=(($35+16)|0);
   var $37=$36;
   var $38=HEAP32[(($37)>>2)];
   $capa=$38;
   var $39=$2;
   var $40=(($39+12)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$4;
   var $43=(((2147483647)-($42))|0);
   var $44=(($41)|(0)) >= (($43)|(0));
   if ($44) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $46=$1;
   var $47=$1;
   var $48=_mrb_class_get($47, ((96948)|0));
   _mrb_raise($46, $48, ((88020)|0));
   label = 8; break;
  case 8: 
   var $50=$2;
   var $51=(($50+12)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=$4;
   var $54=((($52)+($53))|0);
   $total=$54;
   var $55=$capa;
   var $56=$total;
   var $57=(($55)|(0)) <= (($56)|(0));
   if ($57) { label = 9; break; } else { label = 17; break; }
  case 9: 
   label = 10; break;
  case 10: 
   var $60=$total;
   var $61=$capa;
   var $62=(($60)|(0)) > (($61)|(0));
   if ($62) { label = 11; break; } else { label = 14; break; }
  case 11: 
   var $64=$capa;
   var $65=((($64)+(1))|0);
   var $66=(($65)|(0)) >= 1073741823;
   if ($66) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $68=$total;
   var $69=((($68)+(4095))|0);
   var $70=((((($69)|(0)))/(4096))&-1);
   $capa=$70;
   label = 14; break;
  case 13: 
   var $72=$capa;
   var $73=((($72)+(1))|0);
   var $74=($73<<1);
   $capa=$74;
   label = 10; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $77=$1;
   var $78=$2;
   var $79=(($78+20)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=$capa;
   var $82=((($81)+(1))|0);
   var $83=_mrb_realloc($77, $80, $82);
   var $84=$2;
   var $85=(($84+20)|0);
   HEAP32[(($85)>>2)]=$83;
   var $86=$capa;
   var $87=$2;
   var $88=(($87+16)|0);
   var $89=$88;
   HEAP32[(($89)>>2)]=$86;
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $92=$off;
   var $93=(($92)|(0))!=-1;
   if ($93) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $95=$2;
   var $96=(($95+20)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=$off;
   var $99=(($97+$98)|0);
   $3=$99;
   label = 19; break;
  case 19: 
   var $101=$2;
   var $102=(($101+20)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=$2;
   var $105=(($104+12)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($103+$106)|0);
   var $108=$3;
   var $109=$4;
   assert($109 % 1 === 0);(_memcpy($107, $108, $109)|0);
   var $110=$total;
   var $111=$2;
   var $112=(($111+12)|0);
   HEAP32[(($112)>>2)]=$110;
   var $113=$total;
   var $114=$2;
   var $115=(($114+20)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=(($116+$113)|0);
   HEAP8[($117)]=0;
   label = 20; break;
  case 20: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_new($agg_result, $mrb, $p, $len) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $s;
 $1=$mrb;
 $2=$p;
 $3=$len;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 var $7=_str_new($4, $5, $6);
 $s=$7;
 var $8=$s;
 var $9=$8;
 _mrb_obj_value45($agg_result, $9);
 return;
}
function _str_new($mrb, $p, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $s;
   $1=$mrb;
   $2=$p;
   $3=$len;
   var $4=$1;
   var $5=$1;
   var $6=(($5+60)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=_mrb_obj_alloc($4, 16, $7);
   var $9=$8;
   $s=$9;
   var $10=$3;
   var $11=$s;
   var $12=(($11+12)|0);
   HEAP32[(($12)>>2)]=$10;
   var $13=$3;
   var $14=$s;
   var $15=(($14+16)|0);
   var $16=$15;
   HEAP32[(($16)>>2)]=$13;
   var $17=$1;
   var $18=$3;
   var $19=((($18)+(1))|0);
   var $20=_mrb_malloc($17, $19);
   var $21=$s;
   var $22=(($21+20)|0);
   HEAP32[(($22)>>2)]=$20;
   var $23=$2;
   var $24=(($23)|(0))!=0;
   if ($24) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $26=$s;
   var $27=(($26+20)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=$2;
   var $30=$3;
   assert($30 % 1 === 0);(_memcpy($28, $29, $30)|0);
   label = 3; break;
  case 3: 
   var $32=$3;
   var $33=$s;
   var $34=(($33+20)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+$32)|0);
   HEAP8[($36)]=0;
   var $37=$s;
   return $37;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_new_cstr($agg_result, $mrb, $p) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $s;
   var $len;
   $1=$mrb;
   $2=$p;
   var $3=$2;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $6=$2;
   var $7=_strlen($6);
   $len=$7;
   var $8=$len;
   var $9=(($8)|(0)) < 0;
   if ($9) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $11=$1;
   var $12=$1;
   var $13=_mrb_class_get($12, ((96948)|0));
   _mrb_raise($11, $13, ((103828)|0));
   label = 4; break;
  case 4: 
   label = 6; break;
  case 5: 
   $len=0;
   label = 6; break;
  case 6: 
   var $17=$1;
   var $18=$2;
   var $19=$len;
   var $20=_str_new($17, $18, $19);
   $s=$20;
   var $21=$s;
   var $22=$21;
   _mrb_obj_value45($agg_result, $22);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_new_static($agg_result, $mrb, $p, $len) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $s;
 $1=$mrb;
 $2=$p;
 $3=$len;
 var $4=$1;
 var $5=$1;
 var $6=(($5+60)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=_mrb_obj_alloc($4, 16, $7);
 var $9=$8;
 $s=$9;
 var $10=$3;
 var $11=$s;
 var $12=(($11+12)|0);
 HEAP32[(($12)>>2)]=$10;
 var $13=$s;
 var $14=(($13+16)|0);
 var $15=$14;
 HEAP32[(($15)>>2)]=0;
 var $16=$2;
 var $17=$s;
 var $18=(($17+20)|0);
 HEAP32[(($18)>>2)]=$16;
 var $19=$s;
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21 & 2047;
 var $23=$22 | 4096;
 HEAP32[(($20)>>2)]=$23;
 var $24=$s;
 var $25=$24;
 _mrb_obj_value45($agg_result, $25);
 return;
}
function _mrb_gc_free_str($mrb, $str) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$str;
   var $3=$2;
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5 >>> 11;
   var $7=$6 & 2097151;
   var $8=$7 & 1;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$1;
   var $12=$2;
   var $13=(($12+16)|0);
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   _str_decref($11, $15);
   label = 6; break;
  case 3: 
   var $17=$2;
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=$19 >>> 11;
   var $21=$20 & 2097151;
   var $22=$21 & 2;
   var $23=(($22)|(0))==0;
   if ($23) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $25=$1;
   var $26=$2;
   var $27=(($26+20)|0);
   var $28=HEAP32[(($27)>>2)];
   _mrb_free($25, $28);
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_literal($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $s;
   var $orig;
   var $shared;
   $1=$mrb;
   var $2=$1;
   var $3=$1;
   var $4=(($3+60)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=_mrb_obj_alloc($2, 16, $5);
   var $7=$6;
   $s=$7;
   var $8=(($str)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10;
   $orig=$11;
   var $12=$orig;
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=$14 >>> 11;
   var $16=$15 & 2097151;
   var $17=$16 & 1;
   var $18=(($17)|(0))!=0;
   if ($18) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $20=$1;
   var $21=$orig;
   _str_make_shared($20, $21);
   label = 3; break;
  case 3: 
   var $23=$orig;
   var $24=(($23+16)|0);
   var $25=$24;
   var $26=HEAP32[(($25)>>2)];
   $shared=$26;
   var $27=$shared;
   var $28=(($27+4)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=((($29)+(1))|0);
   HEAP32[(($28)>>2)]=$30;
   var $31=$shared;
   var $32=(($31+8)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=$s;
   var $35=(($34+20)|0);
   HEAP32[(($35)>>2)]=$33;
   var $36=$shared;
   var $37=(($36+12)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=$s;
   var $40=(($39+12)|0);
   HEAP32[(($40)>>2)]=$38;
   var $41=$shared;
   var $42=$s;
   var $43=(($42+16)|0);
   var $44=$43;
   HEAP32[(($44)>>2)]=$41;
   var $45=$s;
   var $46=$45;
   var $47=HEAP32[(($46)>>2)];
   var $48=$47 >>> 11;
   var $49=$48 & 2097151;
   var $50=$49 | 1;
   var $51=$50 & 2097151;
   var $52=$45;
   var $53=$51 & 2097151;
   var $54=$53 << 11;
   var $55=HEAP32[(($52)>>2)];
   var $56=$55 & 2047;
   var $57=$56 | $54;
   HEAP32[(($52)>>2)]=$57;
   var $58=$s;
   var $59=$58;
   _mrb_obj_value45($agg_result, $59);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _str_make_shared($mrb, $s) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $shared;
   $1=$mrb;
   $2=$s;
   var $3=$2;
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5 >>> 11;
   var $7=$6 & 2097151;
   var $8=$7 & 1;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 9; break; } else { label = 2; break; }
  case 2: 
   var $11=$1;
   var $12=_mrb_malloc($11, 16);
   var $13=$12;
   $shared=$13;
   var $14=$shared;
   var $15=(($14+4)|0);
   HEAP32[(($15)>>2)]=1;
   var $16=$2;
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   var $19=$18 >>> 11;
   var $20=$19 & 2097151;
   var $21=$20 & 2;
   var $22=(($21)|(0))!=0;
   if ($22) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $24=$shared;
   var $25=(($24)|0);
   HEAP8[($25)]=1;
   var $26=$2;
   var $27=(($26+20)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=$shared;
   var $30=(($29+8)|0);
   HEAP32[(($30)>>2)]=$28;
   var $31=$2;
   var $32=$31;
   var $33=HEAP32[(($32)>>2)];
   var $34=$33 >>> 11;
   var $35=$34 & 2097151;
   var $36=$35 & -3;
   var $37=$36 & 2097151;
   var $38=$31;
   var $39=$37 & 2097151;
   var $40=$39 << 11;
   var $41=HEAP32[(($38)>>2)];
   var $42=$41 & 2047;
   var $43=$42 | $40;
   HEAP32[(($38)>>2)]=$43;
   label = 8; break;
  case 4: 
   var $45=$shared;
   var $46=(($45)|0);
   HEAP8[($46)]=0;
   var $47=$2;
   var $48=(($47+16)|0);
   var $49=$48;
   var $50=HEAP32[(($49)>>2)];
   var $51=$2;
   var $52=(($51+12)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($50)|(0)) > (($53)|(0));
   if ($54) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $56=$1;
   var $57=$2;
   var $58=(($57+20)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=$2;
   var $61=(($60+12)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=((($62)+(1))|0);
   var $64=_mrb_realloc($56, $59, $63);
   var $65=$shared;
   var $66=(($65+8)|0);
   HEAP32[(($66)>>2)]=$64;
   var $67=$2;
   var $68=(($67+20)|0);
   HEAP32[(($68)>>2)]=$64;
   label = 7; break;
  case 6: 
   var $70=$2;
   var $71=(($70+20)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=$shared;
   var $74=(($73+8)|0);
   HEAP32[(($74)>>2)]=$72;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $77=$2;
   var $78=(($77+12)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=$shared;
   var $81=(($80+12)|0);
   HEAP32[(($81)>>2)]=$79;
   var $82=$shared;
   var $83=$2;
   var $84=(($83+16)|0);
   var $85=$84;
   HEAP32[(($85)>>2)]=$82;
   var $86=$2;
   var $87=$86;
   var $88=HEAP32[(($87)>>2)];
   var $89=$88 >>> 11;
   var $90=$89 & 2097151;
   var $91=$90 | 1;
   var $92=$91 & 2097151;
   var $93=$86;
   var $94=$92 & 2097151;
   var $95=$94 << 11;
   var $96=HEAP32[(($93)>>2)];
   var $97=$96 & 2047;
   var $98=$97 | $95;
   HEAP32[(($93)>>2)]=$98;
   label = 9; break;
  case 9: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_concat($mrb, $self, $other) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $other; $other = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($other)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($other)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($other)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $s1;
   var $s2;
   var $len;
   var $2=sp;
   $1=$mrb;
   var $3=(($self)|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5;
   $s1=$6;
   var $7=$1;
   var $8=$s1;
   _mrb_str_modify($7, $8);
   var $9=(($other+8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))==16;
   if ($11) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $13=$1;
   _mrb_str_to_str($2, $13, $other);
   var $14=$other;
   var $15=$2;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   label = 3; break;
  case 3: 
   var $17=(($other)|0);
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=$19;
   $s2=$20;
   var $21=$s1;
   var $22=(($21+12)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=$s2;
   var $25=(($24+12)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=((($23)+($26))|0);
   $len=$27;
   var $28=$s1;
   var $29=(($28+16)|0);
   var $30=$29;
   var $31=HEAP32[(($30)>>2)];
   var $32=$len;
   var $33=(($31)|(0)) < (($32)|(0));
   if ($33) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $35=$len;
   var $36=$s1;
   var $37=(($36+16)|0);
   var $38=$37;
   HEAP32[(($38)>>2)]=$35;
   var $39=$1;
   var $40=$s1;
   var $41=(($40+20)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=$len;
   var $44=((($43)+(1))|0);
   var $45=_mrb_realloc($39, $42, $44);
   var $46=$s1;
   var $47=(($46+20)|0);
   HEAP32[(($47)>>2)]=$45;
   label = 5; break;
  case 5: 
   var $49=$s1;
   var $50=(($49+20)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$s1;
   var $53=(($52+12)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($51+$54)|0);
   var $56=$s2;
   var $57=(($56+20)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=$s2;
   var $60=(($59+12)|0);
   var $61=HEAP32[(($60)>>2)];
   assert($61 % 1 === 0);(_memcpy($55, $58, $61)|0);
   var $62=$len;
   var $63=$s1;
   var $64=(($63+12)|0);
   HEAP32[(($64)>>2)]=$62;
   var $65=$len;
   var $66=$s1;
   var $67=(($66+20)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=(($68+$65)|0);
   HEAP8[($69)]=0;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_to_str($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $s=sp;
   var $2=(sp)+(12);
   var $3=(sp)+(24);
   $1=$mrb;
   var $4=(($str+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))==16;
   if ($6) { label = 6; break; } else { label = 2; break; }
  case 2: 
   var $8=$1;
   _mrb_check_convert_type($2, $8, $str, 16, ((89164)|0), ((90980)|0));
   var $9=$s;
   var $10=$2;
   assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   var $11=(($s+8)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))==0;
   if ($13) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $15=(($s)|0);
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0))!=0;
   if ($18) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $20=$1;
   _mrb_convert_type($3, $20, $str, 16, ((89164)|0), ((87980)|0));
   var $21=$s;
   var $22=$3;
   assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
   label = 5; break;
  case 5: 
   var $24=$agg_result;
   var $25=$s;
   assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
   label = 7; break;
  case 6: 
   var $27=$agg_result;
   var $28=$str;
   assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
   label = 7; break;
  case 7: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_hash($mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $s;
   var $len;
   var $p;
   var $key;
   $1=$mrb;
   var $2=(($str)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $s=$5;
   var $6=$s;
   var $7=(($6+12)|0);
   var $8=HEAP32[(($7)>>2)];
   $len=$8;
   var $9=$s;
   var $10=(($9+20)|0);
   var $11=HEAP32[(($10)>>2)];
   $p=$11;
   $key=0;
   label = 2; break;
  case 2: 
   var $13=$len;
   var $14=((($13)-(1))|0);
   $len=$14;
   var $15=(($13)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $17=$key;
   var $18=((($17)*(65599))&-1);
   var $19=$p;
   var $20=HEAP8[($19)];
   var $21=(($20 << 24) >> 24);
   var $22=((($18)+($21))|0);
   $key=$22;
   var $23=$p;
   var $24=(($23+1)|0);
   $p=$24;
   label = 2; break;
  case 4: 
   var $26=$key;
   var $27=$key;
   var $28=$27 >> 5;
   var $29=((($26)+($28))|0);
   $key=$29;
   var $30=$key;
   STACKTOP = sp;
   return $30;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_plus($agg_result, $mrb, $a, $b) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $s;
 var $s2;
 var $t;
 $1=$mrb;
 var $2=(($a)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 $s=$5;
 var $6=(($b)|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=$8;
 $s2=$9;
 var $10=$1;
 var $11=$s;
 var $12=(($11+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$s2;
 var $15=(($14+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=((($13)+($16))|0);
 var $18=_str_new($10, 0, $17);
 $t=$18;
 var $19=$t;
 var $20=(($19+20)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$s;
 var $23=(($22+20)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$s;
 var $26=(($25+12)|0);
 var $27=HEAP32[(($26)>>2)];
 assert($27 % 1 === 0);(_memcpy($21, $24, $27)|0);
 var $28=$t;
 var $29=(($28+20)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$s;
 var $32=(($31+12)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($30+$33)|0);
 var $35=$s2;
 var $36=(($35+20)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=$s2;
 var $39=(($38+12)|0);
 var $40=HEAP32[(($39)>>2)];
 assert($40 % 1 === 0);(_memcpy($34, $37, $40)|0);
 var $41=$t;
 var $42=$41;
 _mrb_obj_value45($agg_result, $42);
 STACKTOP = sp;
 return;
}
function _mrb_str_size($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $s;
 $1=$mrb;
 var $2=(($self)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 $s=$5;
 var $6=$s;
 var $7=(($6+12)|0);
 var $8=HEAP32[(($7)>>2)];
 _mrb_fixnum_value48($agg_result, $8);
 STACKTOP = sp;
 return;
}
function _mrb_fixnum_value48($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_cmp($mrb, $str1, $str2) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str1; $str1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $str2; $str2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $len;
   var $retval;
   var $s1;
   var $s2;
   $2=$mrb;
   var $3=(($str1)|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5;
   $s1=$6;
   var $7=(($str2)|0);
   var $8=$7;
   var $9=HEAP32[(($8)>>2)];
   var $10=$9;
   $s2=$10;
   var $11=$s1;
   var $12=(($11+12)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$s2;
   var $15=(($14+12)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($13)|(0)) > (($16)|(0));
   if ($17) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $19=$s2;
   var $20=(($19+12)|0);
   var $21=HEAP32[(($20)>>2)];
   var $27 = $21;label = 4; break;
  case 3: 
   var $23=$s1;
   var $24=(($23+12)|0);
   var $25=HEAP32[(($24)>>2)];
   var $27 = $25;label = 4; break;
  case 4: 
   var $27;
   $len=$27;
   var $28=$s1;
   var $29=(($28+20)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$s2;
   var $32=(($31+20)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=$len;
   var $35=_memcmp($30, $33, $34);
   $retval=$35;
   var $36=$retval;
   var $37=(($36)|(0))==0;
   if ($37) { label = 5; break; } else { label = 10; break; }
  case 5: 
   var $39=$s1;
   var $40=(($39+12)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$s2;
   var $43=(($42+12)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=(($41)|(0))==(($44)|(0));
   if ($45) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $1=0;
   label = 13; break;
  case 7: 
   var $48=$s1;
   var $49=(($48+12)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=$s2;
   var $52=(($51+12)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($50)|(0)) > (($53)|(0));
   if ($54) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $1=1;
   label = 13; break;
  case 9: 
   $1=-1;
   label = 13; break;
  case 10: 
   var $58=$retval;
   var $59=(($58)|(0)) > 0;
   if ($59) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $1=1;
   label = 13; break;
  case 12: 
   $1=-1;
   label = 13; break;
  case 13: 
   var $63=$1;
   STACKTOP = sp;
   return $63;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_equal($mrb, $str1, $str2) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str1; $str1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $str2; $str2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3=sp;
   $2=$mrb;
   var $4=$2;
   var $5=_mrb_obj_equal($4, $str1, $str2);
   var $6=(($5 << 24) >> 24)!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=1;
   label = 11; break;
  case 3: 
   var $9=(($str2+8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))==16;
   if ($11) { label = 10; break; } else { label = 4; break; }
  case 4: 
   var $13=(($str2+8)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0))==0;
   if ($15) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $17=(($str2)|0);
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19)|(0))!=0;
   if ($20) { label = 7; break; } else { label = 6; break; }
  case 6: 
   $1=0;
   label = 11; break;
  case 7: 
   var $23=$2;
   var $24=$2;
   var $25=_mrb_intern2($24, ((90980)|0), 6);
   var $26=_mrb_respond_to($23, $str2, $25);
   var $27=(($26 << 24) >> 24)!=0;
   if ($27) { label = 9; break; } else { label = 8; break; }
  case 8: 
   $1=0;
   label = 11; break;
  case 9: 
   var $30=$2;
   _mrb_funcall($3, $30, $str2, ((90980)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $31=$str2;
   var $32=$3;
   assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
   var $33=$2;
   var $34=_mrb_equal($33, $str2, $str1);
   $1=$34;
   label = 11; break;
  case 10: 
   var $36=$2;
   var $37=_str_eql($36, $str1, $str2);
   $1=$37;
   label = 11; break;
  case 11: 
   var $39=$1;
   STACKTOP = sp;
   return $39;
  default: assert(0, "bad label: " + label);
 }
}
function _str_eql($mrb, $str1, $str2) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str1; $str1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $str2; $str2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $len;
   $2=$mrb;
   var $3=(($str1)|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5;
   var $7=(($6+12)|0);
   var $8=HEAP32[(($7)>>2)];
   $len=$8;
   var $9=$len;
   var $10=(($str2)|0);
   var $11=$10;
   var $12=HEAP32[(($11)>>2)];
   var $13=$12;
   var $14=(($13+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($9)|(0))!=(($15)|(0));
   if ($16) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=0;
   label = 6; break;
  case 3: 
   var $19=(($str1)|0);
   var $20=$19;
   var $21=HEAP32[(($20)>>2)];
   var $22=$21;
   var $23=(($22+20)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($str2)|0);
   var $26=$25;
   var $27=HEAP32[(($26)>>2)];
   var $28=$27;
   var $29=(($28+20)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$len;
   var $32=_memcmp($24, $30, $31);
   var $33=(($32)|(0))==0;
   if ($33) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $1=1;
   label = 6; break;
  case 5: 
   $1=0;
   label = 6; break;
  case 6: 
   var $37=$1;
   STACKTOP = sp;
   return $37;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_dup($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $s;
 $1=$mrb;
 var $2=(($str)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 $s=$5;
 var $6=$1;
 var $7=$s;
 var $8=(($7+20)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$s;
 var $11=(($10+12)|0);
 var $12=HEAP32[(($11)>>2)];
 _mrb_str_new($agg_result, $6, $9, $12);
 STACKTOP = sp;
 return;
}
function _mrb_str_substr($agg_result, $mrb, $str, $beg, $len) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $str2=sp;
   var $4=(sp)+(12);
   $1=$mrb;
   $2=$beg;
   $3=$len;
   var $5=$3;
   var $6=(($5)|(0)) < 0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _mrb_nil_value49($agg_result);
   label = 16; break;
  case 3: 
   var $9=(($str)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=$11;
   var $13=(($12+12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0))!=0;
   if ($15) { label = 5; break; } else { label = 4; break; }
  case 4: 
   $3=0;
   label = 5; break;
  case 5: 
   var $18=$2;
   var $19=(($str)|0);
   var $20=$19;
   var $21=HEAP32[(($20)>>2)];
   var $22=$21;
   var $23=(($22+12)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($18)|(0)) > (($24)|(0));
   if ($25) { label = 6; break; } else { label = 7; break; }
  case 6: 
   _mrb_nil_value49($agg_result);
   label = 16; break;
  case 7: 
   var $28=$2;
   var $29=(($28)|(0)) < 0;
   if ($29) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $31=(($str)|0);
   var $32=$31;
   var $33=HEAP32[(($32)>>2)];
   var $34=$33;
   var $35=(($34+12)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=$2;
   var $38=((($37)+($36))|0);
   $2=$38;
   var $39=$2;
   var $40=(($39)|(0)) < 0;
   if ($40) { label = 9; break; } else { label = 10; break; }
  case 9: 
   _mrb_nil_value49($agg_result);
   label = 16; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $44=$2;
   var $45=$3;
   var $46=((($44)+($45))|0);
   var $47=(($str)|0);
   var $48=$47;
   var $49=HEAP32[(($48)>>2)];
   var $50=$49;
   var $51=(($50+12)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($46)|(0)) > (($52)|(0));
   if ($53) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $55=(($str)|0);
   var $56=$55;
   var $57=HEAP32[(($56)>>2)];
   var $58=$57;
   var $59=(($58+12)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=$2;
   var $62=((($60)-($61))|0);
   $3=$62;
   label = 13; break;
  case 13: 
   var $64=$3;
   var $65=(($64)|(0)) <= 0;
   if ($65) { label = 14; break; } else { label = 15; break; }
  case 14: 
   $3=0;
   label = 15; break;
  case 15: 
   var $68=$1;
   var $69=$2;
   var $70=$3;
   _mrb_str_subseq($4, $68, $str, $69, $70);
   var $71=$str2;
   var $72=$4;
   assert(12 % 1 === 0);HEAP32[(($71)>>2)]=HEAP32[(($72)>>2)];HEAP32[((($71)+(4))>>2)]=HEAP32[((($72)+(4))>>2)];HEAP32[((($71)+(8))>>2)]=HEAP32[((($72)+(8))>>2)];
   var $73=$agg_result;
   var $74=$str2;
   assert(12 % 1 === 0);HEAP32[(($73)>>2)]=HEAP32[(($74)>>2)];HEAP32[((($73)+(4))>>2)]=HEAP32[((($74)+(4))>>2)];HEAP32[((($73)+(8))>>2)]=HEAP32[((($74)+(8))>>2)];
   label = 16; break;
  case 16: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value49($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_subseq($agg_result, $mrb, $str, $beg, $len) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 var $3;
 var $orig;
 var $s;
 var $shared;
 $1=$mrb;
 $2=$beg;
 $3=$len;
 var $4=(($str)|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 $orig=$7;
 var $8=$1;
 var $9=$orig;
 _str_make_shared($8, $9);
 var $10=$orig;
 var $11=(($10+16)|0);
 var $12=$11;
 var $13=HEAP32[(($12)>>2)];
 $shared=$13;
 var $14=$1;
 var $15=$1;
 var $16=(($15+60)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=_mrb_obj_alloc($14, 16, $17);
 var $19=$18;
 $s=$19;
 var $20=$orig;
 var $21=(($20+20)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$2;
 var $24=(($22+$23)|0);
 var $25=$s;
 var $26=(($25+20)|0);
 HEAP32[(($26)>>2)]=$24;
 var $27=$3;
 var $28=$s;
 var $29=(($28+12)|0);
 HEAP32[(($29)>>2)]=$27;
 var $30=$shared;
 var $31=$s;
 var $32=(($31+16)|0);
 var $33=$32;
 HEAP32[(($33)>>2)]=$30;
 var $34=$s;
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36 >>> 11;
 var $38=$37 & 2097151;
 var $39=$38 | 1;
 var $40=$39 & 2097151;
 var $41=$34;
 var $42=$40 & 2097151;
 var $43=$42 << 11;
 var $44=HEAP32[(($41)>>2)];
 var $45=$44 & 2047;
 var $46=$45 | $43;
 HEAP32[(($41)>>2)]=$46;
 var $47=$shared;
 var $48=(($47+4)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=((($49)+(1))|0);
 HEAP32[(($48)>>2)]=$50;
 var $51=$s;
 var $52=$51;
 _mrb_obj_value45($agg_result, $52);
 STACKTOP = sp;
 return;
}
function _mrb_str_buf_append($agg_result, $mrb, $str, $str2) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $str2; $str2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2=sp;
 $1=$mrb;
 var $3=$1;
 var $4=(($str2)|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 var $8=(($7+20)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($str2)|0);
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=$12;
 var $14=(($13+12)|0);
 var $15=HEAP32[(($14)>>2)];
 _mrb_str_cat($2, $3, $str, $9, $15);
 var $16=$agg_result;
 var $17=$str;
 assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_str_cat($agg_result, $mrb, $str, $ptr, $len) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$mrb;
   $2=$ptr;
   $3=$len;
   var $4=$3;
   var $5=(($4)|(0)) < 0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   var $8=$1;
   var $9=_mrb_class_get($8, ((96948)|0));
   _mrb_raise($7, $9, ((104184)|0));
   label = 3; break;
  case 3: 
   var $11=$1;
   var $12=(($str)|0);
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=$14;
   var $16=$2;
   var $17=$3;
   _str_buf_cat($11, $15, $16, $17);
   var $18=$agg_result;
   var $19=$str;
   assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_intern($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $id;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_intern_str($2, $self);
 $id=$3;
 var $4=$id;
 _mrb_symbol_value($agg_result, $4);
 STACKTOP = sp;
 return;
}
function _mrb_symbol_value($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=4;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP16[(($6)>>1)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_as_string($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $str=sp;
   var $2=(sp)+(12);
   $1=$mrb;
   var $3=(($obj+8)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))==16;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$agg_result;
   var $8=$obj;
   assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
   label = 6; break;
  case 3: 
   var $10=$1;
   _mrb_funcall($2, $10, $obj, ((87980)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $11=$str;
   var $12=$2;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   var $13=(($str+8)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0))==16;
   if ($15) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $17=$1;
   _mrb_any_to_s($agg_result, $17, $obj);
   label = 6; break;
  case 5: 
   var $19=$agg_result;
   var $20=$str;
   assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ptr_to_str($agg_result, $mrb, $p) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $p_str;
   var $p1;
   var $p2;
   var $n;
   var $c;
   $1=$mrb;
   $2=$p;
   var $3=$2;
   var $4=$3;
   $n=$4;
   var $5=$1;
   var $6=_str_new($5, 0, 10);
   $p_str=$6;
   var $7=$p_str;
   var $8=(($7+20)|0);
   var $9=HEAP32[(($8)>>2)];
   $p1=$9;
   var $10=$p1;
   var $11=(($10+1)|0);
   $p1=$11;
   HEAP8[($10)]=48;
   var $12=$p1;
   var $13=(($12+1)|0);
   $p1=$13;
   HEAP8[($12)]=120;
   var $14=$p1;
   $p2=$14;
   label = 2; break;
  case 2: 
   var $16=$n;
   var $17=((((($16)|(0)))%(16))&-1);
   var $18=((75064+$17)|0);
   var $19=HEAP8[($18)];
   var $20=$p2;
   var $21=(($20+1)|0);
   $p2=$21;
   HEAP8[($20)]=$19;
   var $22=$n;
   var $23=((((($22)|(0)))/(16))&-1);
   $n=$23;
   label = 3; break;
  case 3: 
   var $25=$n;
   var $26=(($25)|(0)) > 0;
   if ($26) { label = 2; break; } else { label = 4; break; }
  case 4: 
   var $28=$p2;
   HEAP8[($28)]=0;
   var $29=$p2;
   var $30=$p_str;
   var $31=(($30+20)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$29;
   var $34=$32;
   var $35=((($33)-($34))|0);
   var $36=$p_str;
   var $37=(($36+12)|0);
   HEAP32[(($37)>>2)]=$35;
   label = 5; break;
  case 5: 
   var $39=$p1;
   var $40=$p2;
   var $41=(($39)>>>(0)) < (($40)>>>(0));
   if ($41) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $43=$p1;
   var $44=HEAP8[($43)];
   $c=$44;
   var $45=$p2;
   var $46=((($45)-(1))|0);
   $p2=$46;
   var $47=HEAP8[($46)];
   var $48=$p1;
   var $49=(($48+1)|0);
   $p1=$49;
   HEAP8[($48)]=$47;
   var $50=$c;
   var $51=$p2;
   HEAP8[($51)]=$50;
   label = 5; break;
  case 7: 
   var $53=$p_str;
   var $54=$53;
   _mrb_obj_value45($agg_result, $54);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_check_string_type($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_check_convert_type($agg_result, $2, $str, 16, ((89164)|0), ((90980)|0));
 STACKTOP = sp;
 return;
}
function _mrb_cstr_to_inum($agg_result, $mrb, $str, $base, $badcheck) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $end=sp;
   var $sign;
   var $c;
   var $n;
   var $val;
   var $5=(sp)+(4);
   var $us;
   var $6=(sp)+(16);
   var $7=(sp)+(28);
   $1=$mrb;
   $2=$str;
   $3=$base;
   $4=$badcheck;
   $sign=1;
   var $8=$2;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 5; break; } else { label = 2; break; }
  case 2: 
   var $11=$4;
   var $12=(($11)|(0))!=0;
   if ($12) { label = 3; break; } else { label = 4; break; }
  case 3: 
   label = 106; break;
  case 4: 
   _mrb_fixnum_value48($agg_result, 0);
   label = 107; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $17=$2;
   var $18=HEAP8[($17)];
   var $19=(($18)&(255));
   var $20=_isspace($19);
   var $21=(($20)|(0))!=0;
   if ($21) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $23=$2;
   var $24=(($23+1)|0);
   $2=$24;
   label = 6; break;
  case 8: 
   var $26=$2;
   var $27=(($26)|0);
   var $28=HEAP8[($27)];
   var $29=(($28 << 24) >> 24);
   var $30=(($29)|(0))==43;
   if ($30) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $32=$2;
   var $33=(($32+1)|0);
   $2=$33;
   label = 13; break;
  case 10: 
   var $35=$2;
   var $36=(($35)|0);
   var $37=HEAP8[($36)];
   var $38=(($37 << 24) >> 24);
   var $39=(($38)|(0))==45;
   if ($39) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $41=$2;
   var $42=(($41+1)|0);
   $2=$42;
   $sign=0;
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $45=$2;
   var $46=(($45)|0);
   var $47=HEAP8[($46)];
   var $48=(($47 << 24) >> 24);
   var $49=(($48)|(0))==43;
   if ($49) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $51=$2;
   var $52=(($51)|0);
   var $53=HEAP8[($52)];
   var $54=(($53 << 24) >> 24);
   var $55=(($54)|(0))==45;
   if ($55) { label = 15; break; } else { label = 18; break; }
  case 15: 
   var $57=$4;
   var $58=(($57)|(0))!=0;
   if ($58) { label = 16; break; } else { label = 17; break; }
  case 16: 
   label = 106; break;
  case 17: 
   _mrb_fixnum_value48($agg_result, 0);
   label = 107; break;
  case 18: 
   var $62=$3;
   var $63=(($62)|(0)) <= 0;
   if ($63) { label = 19; break; } else { label = 32; break; }
  case 19: 
   var $65=$2;
   var $66=(($65)|0);
   var $67=HEAP8[($66)];
   var $68=(($67 << 24) >> 24);
   var $69=(($68)|(0))==48;
   if ($69) { label = 20; break; } else { label = 27; break; }
  case 20: 
   var $71=$2;
   var $72=(($71+1)|0);
   var $73=HEAP8[($72)];
   var $74=(($73 << 24) >> 24);
   if ((($74)|(0))==120 | (($74)|(0))==88) {
    label = 21; break;
   }
   else if ((($74)|(0))==98 | (($74)|(0))==66) {
    label = 22; break;
   }
   else if ((($74)|(0))==111 | (($74)|(0))==79) {
    label = 23; break;
   }
   else if ((($74)|(0))==100 | (($74)|(0))==68) {
    label = 24; break;
   }
   else {
   label = 25; break;
   }
  case 21: 
   $3=16;
   label = 26; break;
  case 22: 
   $3=2;
   label = 26; break;
  case 23: 
   $3=8;
   label = 26; break;
  case 24: 
   $3=10;
   label = 26; break;
  case 25: 
   $3=8;
   label = 26; break;
  case 26: 
   label = 31; break;
  case 27: 
   var $82=$3;
   var $83=(($82)|(0)) < -1;
   if ($83) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $85=$3;
   var $86=(((-$85))|0);
   $3=$86;
   label = 30; break;
  case 29: 
   $3=10;
   label = 30; break;
  case 30: 
   label = 31; break;
  case 31: 
   label = 32; break;
  case 32: 
   var $91=$3;
   if ((($91)|(0))==2) {
    label = 33; break;
   }
   else if ((($91)|(0))==3) {
    label = 38; break;
   }
   else if ((($91)|(0))==8) {
    label = 39; break;
   }
   else if ((($91)|(0))==4 | (($91)|(0))==5 | (($91)|(0))==6 | (($91)|(0))==7) {
    label = 44; break;
   }
   else if ((($91)|(0))==10) {
    label = 45; break;
   }
   else if ((($91)|(0))==9 | (($91)|(0))==11 | (($91)|(0))==12 | (($91)|(0))==13 | (($91)|(0))==14 | (($91)|(0))==15) {
    label = 50; break;
   }
   else if ((($91)|(0))==16) {
    label = 51; break;
   }
   else {
   label = 56; break;
   }
  case 33: 
   var $93=$2;
   var $94=(($93)|0);
   var $95=HEAP8[($94)];
   var $96=(($95 << 24) >> 24);
   var $97=(($96)|(0))==48;
   if ($97) { label = 34; break; } else { label = 37; break; }
  case 34: 
   var $99=$2;
   var $100=(($99+1)|0);
   var $101=HEAP8[($100)];
   var $102=(($101 << 24) >> 24);
   var $103=(($102)|(0))==98;
   if ($103) { label = 36; break; } else { label = 35; break; }
  case 35: 
   var $105=$2;
   var $106=(($105+1)|0);
   var $107=HEAP8[($106)];
   var $108=(($107 << 24) >> 24);
   var $109=(($108)|(0))==66;
   if ($109) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $111=$2;
   var $112=(($111+2)|0);
   $2=$112;
   label = 37; break;
  case 37: 
   label = 60; break;
  case 38: 
   label = 60; break;
  case 39: 
   var $116=$2;
   var $117=(($116)|0);
   var $118=HEAP8[($117)];
   var $119=(($118 << 24) >> 24);
   var $120=(($119)|(0))==48;
   if ($120) { label = 40; break; } else { label = 43; break; }
  case 40: 
   var $122=$2;
   var $123=(($122+1)|0);
   var $124=HEAP8[($123)];
   var $125=(($124 << 24) >> 24);
   var $126=(($125)|(0))==111;
   if ($126) { label = 42; break; } else { label = 41; break; }
  case 41: 
   var $128=$2;
   var $129=(($128+1)|0);
   var $130=HEAP8[($129)];
   var $131=(($130 << 24) >> 24);
   var $132=(($131)|(0))==79;
   if ($132) { label = 42; break; } else { label = 43; break; }
  case 42: 
   var $134=$2;
   var $135=(($134+2)|0);
   $2=$135;
   label = 43; break;
  case 43: 
   label = 44; break;
  case 44: 
   label = 60; break;
  case 45: 
   var $139=$2;
   var $140=(($139)|0);
   var $141=HEAP8[($140)];
   var $142=(($141 << 24) >> 24);
   var $143=(($142)|(0))==48;
   if ($143) { label = 46; break; } else { label = 49; break; }
  case 46: 
   var $145=$2;
   var $146=(($145+1)|0);
   var $147=HEAP8[($146)];
   var $148=(($147 << 24) >> 24);
   var $149=(($148)|(0))==100;
   if ($149) { label = 48; break; } else { label = 47; break; }
  case 47: 
   var $151=$2;
   var $152=(($151+1)|0);
   var $153=HEAP8[($152)];
   var $154=(($153 << 24) >> 24);
   var $155=(($154)|(0))==68;
   if ($155) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $157=$2;
   var $158=(($157+2)|0);
   $2=$158;
   label = 49; break;
  case 49: 
   label = 50; break;
  case 50: 
   label = 60; break;
  case 51: 
   var $162=$2;
   var $163=(($162)|0);
   var $164=HEAP8[($163)];
   var $165=(($164 << 24) >> 24);
   var $166=(($165)|(0))==48;
   if ($166) { label = 52; break; } else { label = 55; break; }
  case 52: 
   var $168=$2;
   var $169=(($168+1)|0);
   var $170=HEAP8[($169)];
   var $171=(($170 << 24) >> 24);
   var $172=(($171)|(0))==120;
   if ($172) { label = 54; break; } else { label = 53; break; }
  case 53: 
   var $174=$2;
   var $175=(($174+1)|0);
   var $176=HEAP8[($175)];
   var $177=(($176 << 24) >> 24);
   var $178=(($177)|(0))==88;
   if ($178) { label = 54; break; } else { label = 55; break; }
  case 54: 
   var $180=$2;
   var $181=(($180+2)|0);
   $2=$181;
   label = 55; break;
  case 55: 
   label = 60; break;
  case 56: 
   var $184=$3;
   var $185=(($184)|(0)) < 2;
   if ($185) { label = 58; break; } else { label = 57; break; }
  case 57: 
   var $187=$3;
   var $188=36 < (($187)|(0));
   if ($188) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $190=$1;
   var $191=$1;
   var $192=_mrb_class_get($191, ((96948)|0));
   var $193=$3;
   _mrb_fixnum_value48($5, $193);
   _mrb_raisef($190, $192, ((87096)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($5)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
   label = 59; break;
  case 59: 
   label = 60; break;
  case 60: 
   var $196=$2;
   var $197=HEAP8[($196)];
   var $198=(($197 << 24) >> 24);
   var $199=(($198)|(0))==48;
   if ($199) { label = 61; break; } else { label = 75; break; }
  case 61: 
   $us=0;
   label = 62; break;
  case 62: 
   var $202=$2;
   var $203=(($202+1)|0);
   $2=$203;
   var $204=HEAP8[($203)];
   var $205=(($204 << 24) >> 24);
   $c=$205;
   var $206=(($205)|(0))==48;
   if ($206) { var $211 = 1;label = 64; break; } else { label = 63; break; }
  case 63: 
   var $208=$c;
   var $209=(($208)|(0))==95;
   var $211 = $209;label = 64; break;
  case 64: 
   var $211;
   if ($211) { label = 65; break; } else { label = 71; break; }
  case 65: 
   var $213=$c;
   var $214=(($213)|(0))==95;
   if ($214) { label = 66; break; } else { label = 69; break; }
  case 66: 
   var $216=$us;
   var $217=((($216)+(1))|0);
   $us=$217;
   var $218=(($217)|(0)) >= 2;
   if ($218) { label = 67; break; } else { label = 68; break; }
  case 67: 
   label = 71; break;
  case 68: 
   label = 70; break;
  case 69: 
   $us=0;
   label = 70; break;
  case 70: 
   label = 62; break;
  case 71: 
   var $224=$2;
   var $225=HEAP8[($224)];
   var $226=(($225 << 24) >> 24);
   $c=$226;
   var $227=(($226)|(0))!=0;
   if ($227) { label = 72; break; } else { label = 73; break; }
  case 72: 
   var $229=$c;
   var $230=(($229) & 255);
   var $231=(($230)&(255));
   var $232=_isspace($231);
   var $233=(($232)|(0))!=0;
   if ($233) { label = 73; break; } else { label = 74; break; }
  case 73: 
   var $235=$2;
   var $236=((($235)-(1))|0);
   $2=$236;
   label = 74; break;
  case 74: 
   label = 75; break;
  case 75: 
   var $239=$2;
   var $240=HEAP8[($239)];
   var $241=(($240 << 24) >> 24);
   $c=$241;
   var $242=$c;
   var $243=_isdigit($242);
   var $244=(($243)|(0))!=0;
   if ($244) { label = 76; break; } else { label = 77; break; }
  case 76: 
   var $246=$c;
   var $247=((($246)-(48))|0);
   var $270 = $247;label = 84; break;
  case 77: 
   var $249=$c;
   var $250=_islower($249);
   var $251=(($250)|(0))!=0;
   if ($251) { label = 78; break; } else { label = 79; break; }
  case 78: 
   var $253=$c;
   var $254=((($253)-(97))|0);
   var $255=((($254)+(10))|0);
   var $268 = $255;label = 83; break;
  case 79: 
   var $257=$c;
   var $258=_isupper($257);
   var $259=(($258)|(0))!=0;
   if ($259) { label = 80; break; } else { label = 81; break; }
  case 80: 
   var $261=$c;
   var $262=((($261)-(65))|0);
   var $263=((($262)+(10))|0);
   var $266 = $263;label = 82; break;
  case 81: 
   var $266 = -1;label = 82; break;
  case 82: 
   var $266;
   var $268 = $266;label = 83; break;
  case 83: 
   var $268;
   var $270 = $268;label = 84; break;
  case 84: 
   var $270;
   $c=$270;
   var $271=$c;
   var $272=(($271)|(0)) < 0;
   if ($272) { label = 86; break; } else { label = 85; break; }
  case 85: 
   var $274=$c;
   var $275=$3;
   var $276=(($274)|(0)) >= (($275)|(0));
   if ($276) { label = 86; break; } else { label = 89; break; }
  case 86: 
   var $278=$4;
   var $279=(($278)|(0))!=0;
   if ($279) { label = 87; break; } else { label = 88; break; }
  case 87: 
   label = 106; break;
  case 88: 
   _mrb_fixnum_value48($agg_result, 0);
   label = 107; break;
  case 89: 
   var $283=$2;
   var $284=$3;
   var $285=_strtoul($283, $end, $284);
   $n=$285;
   var $286=$n;
   var $287=(($286)>>>(0)) > 2147483647;
   if ($287) { label = 90; break; } else { label = 91; break; }
  case 90: 
   var $289=$1;
   var $290=$1;
   var $291=_mrb_class_get($290, ((96948)|0));
   var $292=$1;
   var $293=$2;
   _mrb_str_new_cstr($6, $292, $293);
   _mrb_raisef($289, $291, ((86240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($6)+(8))>>2)],tempInt));
   label = 91; break;
  case 91: 
   var $295=$n;
   $val=$295;
   var $296=$4;
   var $297=(($296)|(0))!=0;
   if ($297) { label = 92; break; } else { label = 102; break; }
  case 92: 
   var $299=HEAP32[(($end)>>2)];
   var $300=$2;
   var $301=(($299)|(0))==(($300)|(0));
   if ($301) { label = 93; break; } else { label = 94; break; }
  case 93: 
   label = 106; break;
  case 94: 
   label = 95; break;
  case 95: 
   var $305=HEAP32[(($end)>>2)];
   var $306=HEAP8[($305)];
   var $307=(($306 << 24) >> 24);
   var $308=(($307)|(0))!=0;
   if ($308) { label = 96; break; } else { var $316 = 0;label = 97; break; }
  case 96: 
   var $310=HEAP32[(($end)>>2)];
   var $311=HEAP8[($310)];
   var $312=(($311)&(255));
   var $313=_isspace($312);
   var $314=(($313)|(0))!=0;
   var $316 = $314;label = 97; break;
  case 97: 
   var $316;
   if ($316) { label = 98; break; } else { label = 99; break; }
  case 98: 
   var $318=HEAP32[(($end)>>2)];
   var $319=(($318+1)|0);
   HEAP32[(($end)>>2)]=$319;
   label = 95; break;
  case 99: 
   var $321=HEAP32[(($end)>>2)];
   var $322=HEAP8[($321)];
   var $323=(($322 << 24) >> 24)!=0;
   if ($323) { label = 100; break; } else { label = 101; break; }
  case 100: 
   label = 106; break;
  case 101: 
   label = 102; break;
  case 102: 
   var $327=$sign;
   var $328=(($327 << 24) >> 24);
   var $329=(($328)|(0))!=0;
   if ($329) { label = 103; break; } else { label = 104; break; }
  case 103: 
   var $331=$val;
   var $336 = $331;label = 105; break;
  case 104: 
   var $333=$val;
   var $334=(((-$333))|0);
   var $336 = $334;label = 105; break;
  case 105: 
   var $336;
   _mrb_fixnum_value48($agg_result, $336);
   label = 107; break;
  case 106: 
   var $338=$1;
   var $339=$1;
   var $340=_mrb_class_get($339, ((96948)|0));
   var $341=$1;
   var $342=$2;
   _mrb_str_new_cstr($7, $341, $342);
   _mrb_raisef($338, $340, ((105672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($7)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($7)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($7)+(8))>>2)],tempInt));
   _mrb_fixnum_value48($agg_result, 0);
   label = 107; break;
  case 107: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_string_value_cstr($mrb, $ptr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $ps;
   var $s;
   $1=$mrb;
   $2=$ptr;
   var $3=$2;
   var $4=(($3)|0);
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=$6;
   $ps=$7;
   var $8=$ps;
   var $9=(($8+20)|0);
   var $10=HEAP32[(($9)>>2)];
   $s=$10;
   var $11=$s;
   var $12=(($11)|(0))!=0;
   if ($12) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $14=$ps;
   var $15=(($14+12)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$s;
   var $18=_strlen($17);
   var $19=(($16)|(0))!=(($18)|(0));
   if ($19) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $21=$1;
   var $22=$1;
   var $23=_mrb_class_get($22, ((96948)|0));
   _mrb_raise($21, $23, ((93464)|0));
   label = 4; break;
  case 4: 
   var $25=$s;
   return $25;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_to_inum($agg_result, $mrb, $str, $base, $badcheck) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $s;
   var $len;
   var $4=sp;
   var $temp_str;
   $1=$mrb;
   $2=$base;
   $3=$badcheck;
   var $5=$1;
   _mrb_str_to_str($4, $5, $str);
   var $6=$str;
   var $7=$4;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   var $8=$3;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$1;
   var $12=_mrb_string_value_cstr($11, $str);
   $s=$12;
   label = 4; break;
  case 3: 
   var $14=(($str)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=$16;
   var $18=(($17+20)|0);
   var $19=HEAP32[(($18)>>2)];
   $s=$19;
   label = 4; break;
  case 4: 
   var $21=$s;
   var $22=(($21)|(0))!=0;
   if ($22) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $24=(($str)|0);
   var $25=$24;
   var $26=HEAP32[(($25)>>2)];
   var $27=$26;
   var $28=(($27+12)|0);
   var $29=HEAP32[(($28)>>2)];
   $len=$29;
   var $30=$len;
   var $31=$s;
   var $32=(($31+$30)|0);
   var $33=HEAP8[($32)];
   var $34=(($33 << 24) >> 24)!=0;
   if ($34) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $36=$1;
   var $37=$s;
   var $38=$len;
   var $39=_str_new($36, $37, $38);
   $temp_str=$39;
   var $40=$temp_str;
   var $41=(($40+20)|0);
   var $42=HEAP32[(($41)>>2)];
   $s=$42;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $45=$1;
   var $46=$s;
   var $47=$2;
   var $48=$3;
   _mrb_cstr_to_inum($agg_result, $45, $46, $47, $48);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_cstr_to_dbl($mrb, $p, $badcheck) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 92)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $end=sp;
   var $d;
   var $5=(sp)+(4);
   var $buf=(sp)+(16);
   var $n;
   var $e;
   var $prev;
   $2=$mrb;
   $3=$p;
   $4=$badcheck;
   var $6=$3;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 61; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $11=$3;
   var $12=HEAP8[($11)];
   var $13=(($12)&(255));
   var $14=_isspace($13);
   var $15=(($14)|(0))!=0;
   if ($15) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $17=$3;
   var $18=(($17+1)|0);
   $3=$18;
   label = 4; break;
  case 6: 
   var $20=$4;
   var $21=(($20)|(0))!=0;
   if ($21) { label = 11; break; } else { label = 7; break; }
  case 7: 
   var $23=$3;
   var $24=(($23)|0);
   var $25=HEAP8[($24)];
   var $26=(($25 << 24) >> 24);
   var $27=(($26)|(0))==48;
   if ($27) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $29=$3;
   var $30=(($29+1)|0);
   var $31=HEAP8[($30)];
   var $32=(($31 << 24) >> 24);
   var $33=(($32)|(0))==120;
   if ($33) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $35=$3;
   var $36=(($35+1)|0);
   var $37=HEAP8[($36)];
   var $38=(($37 << 24) >> 24);
   var $39=(($38)|(0))==88;
   if ($39) { label = 10; break; } else { label = 11; break; }
  case 10: 
   $1=0;
   label = 61; break;
  case 11: 
   var $42=$3;
   var $43=_strtod($42, $end);
   $d=$43;
   var $44=$3;
   var $45=HEAP32[(($end)>>2)];
   var $46=(($44)|(0))==(($45)|(0));
   if ($46) { label = 12; break; } else { label = 16; break; }
  case 12: 
   var $48=$4;
   var $49=(($48)|(0))!=0;
   if ($49) { label = 13; break; } else { label = 15; break; }
  case 13: 
   label = 14; break;
  case 14: 
   var $52=$2;
   var $53=$2;
   var $54=_mrb_class_get($53, ((96948)|0));
   var $55=$2;
   var $56=$3;
   _mrb_str_new_cstr($5, $55, $56);
   _mrb_raisef($52, $54, ((105016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($5)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
   label = 15; break;
  case 15: 
   var $58=$d;
   $1=$58;
   label = 61; break;
  case 16: 
   var $60=HEAP32[(($end)>>2)];
   var $61=HEAP8[($60)];
   var $62=(($61 << 24) >> 24)!=0;
   if ($62) { label = 17; break; } else { label = 60; break; }
  case 17: 
   var $64=(($buf)|0);
   $n=$64;
   var $65=(($buf)|0);
   var $66=(($65+74)|0);
   var $67=((($66)-(1))|0);
   $e=$67;
   $prev=0;
   label = 18; break;
  case 18: 
   var $69=$3;
   var $70=HEAP32[(($end)>>2)];
   var $71=(($69)>>>(0)) < (($70)>>>(0));
   if ($71) { label = 19; break; } else { var $77 = 0;label = 20; break; }
  case 19: 
   var $73=$n;
   var $74=$e;
   var $75=(($73)>>>(0)) < (($74)>>>(0));
   var $77 = $75;label = 20; break;
  case 20: 
   var $77;
   if ($77) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $79=$3;
   var $80=(($79+1)|0);
   $3=$80;
   var $81=HEAP8[($79)];
   var $82=$n;
   var $83=(($82+1)|0);
   $n=$83;
   HEAP8[($82)]=$81;
   $prev=$81;
   label = 18; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $86=$3;
   var $87=HEAP8[($86)];
   var $88=(($87 << 24) >> 24)!=0;
   if ($88) { label = 24; break; } else { label = 42; break; }
  case 24: 
   var $90=$3;
   var $91=HEAP8[($90)];
   var $92=(($91 << 24) >> 24);
   var $93=(($92)|(0))==95;
   if ($93) { label = 25; break; } else { label = 39; break; }
  case 25: 
   var $95=$4;
   var $96=(($95)|(0))!=0;
   if ($96) { label = 26; break; } else { label = 34; break; }
  case 26: 
   var $98=$n;
   var $99=(($buf)|0);
   var $100=(($98)|(0))==(($99)|(0));
   if ($100) { label = 29; break; } else { label = 27; break; }
  case 27: 
   var $102=$prev;
   var $103=(($102 << 24) >> 24);
   var $104=48 <= (($103)|(0));
   if ($104) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $106=$prev;
   var $107=(($106 << 24) >> 24);
   var $108=(($107)|(0)) <= 57;
   if ($108) { label = 30; break; } else { label = 29; break; }
  case 29: 
   label = 14; break;
  case 30: 
   var $111=$3;
   var $112=(($111+1)|0);
   $3=$112;
   var $113=$3;
   var $114=HEAP8[($113)];
   var $115=(($114 << 24) >> 24);
   var $116=48 <= (($115)|(0));
   if ($116) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $118=$3;
   var $119=HEAP8[($118)];
   var $120=(($119 << 24) >> 24);
   var $121=(($120)|(0)) <= 57;
   if ($121) { label = 33; break; } else { label = 32; break; }
  case 32: 
   label = 14; break;
  case 33: 
   label = 38; break;
  case 34: 
   label = 35; break;
  case 35: 
   var $126=$3;
   var $127=(($126+1)|0);
   $3=$127;
   var $128=HEAP8[($127)];
   var $129=(($128 << 24) >> 24);
   var $130=(($129)|(0))==95;
   if ($130) { label = 36; break; } else { label = 37; break; }
  case 36: 
   label = 35; break;
  case 37: 
   label = 23; break;
  case 38: 
   label = 39; break;
  case 39: 
   var $135=$3;
   var $136=(($135+1)|0);
   $3=$136;
   var $137=HEAP8[($135)];
   $prev=$137;
   var $138=$n;
   var $139=$e;
   var $140=(($138)>>>(0)) < (($139)>>>(0));
   if ($140) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $142=$prev;
   var $143=$n;
   var $144=(($143+1)|0);
   $n=$144;
   HEAP8[($143)]=$142;
   label = 41; break;
  case 41: 
   label = 23; break;
  case 42: 
   var $147=$n;
   HEAP8[($147)]=0;
   var $148=(($buf)|0);
   $3=$148;
   var $149=$4;
   var $150=(($149)|(0))!=0;
   if ($150) { label = 47; break; } else { label = 43; break; }
  case 43: 
   var $152=$3;
   var $153=(($152)|0);
   var $154=HEAP8[($153)];
   var $155=(($154 << 24) >> 24);
   var $156=(($155)|(0))==48;
   if ($156) { label = 44; break; } else { label = 47; break; }
  case 44: 
   var $158=$3;
   var $159=(($158+1)|0);
   var $160=HEAP8[($159)];
   var $161=(($160 << 24) >> 24);
   var $162=(($161)|(0))==120;
   if ($162) { label = 46; break; } else { label = 45; break; }
  case 45: 
   var $164=$3;
   var $165=(($164+1)|0);
   var $166=HEAP8[($165)];
   var $167=(($166 << 24) >> 24);
   var $168=(($167)|(0))==88;
   if ($168) { label = 46; break; } else { label = 47; break; }
  case 46: 
   $1=0;
   label = 61; break;
  case 47: 
   var $171=$3;
   var $172=_strtod($171, $end);
   $d=$172;
   var $173=$4;
   var $174=(($173)|(0))!=0;
   if ($174) { label = 48; break; } else { label = 59; break; }
  case 48: 
   var $176=HEAP32[(($end)>>2)];
   var $177=(($176)|(0))!=0;
   if ($177) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $179=$3;
   var $180=HEAP32[(($end)>>2)];
   var $181=(($179)|(0))==(($180)|(0));
   if ($181) { label = 50; break; } else { label = 51; break; }
  case 50: 
   label = 14; break;
  case 51: 
   label = 52; break;
  case 52: 
   var $185=HEAP32[(($end)>>2)];
   var $186=HEAP8[($185)];
   var $187=(($186 << 24) >> 24);
   var $188=(($187)|(0))!=0;
   if ($188) { label = 53; break; } else { var $196 = 0;label = 54; break; }
  case 53: 
   var $190=HEAP32[(($end)>>2)];
   var $191=HEAP8[($190)];
   var $192=(($191)&(255));
   var $193=_isspace($192);
   var $194=(($193)|(0))!=0;
   var $196 = $194;label = 54; break;
  case 54: 
   var $196;
   if ($196) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $198=HEAP32[(($end)>>2)];
   var $199=(($198+1)|0);
   HEAP32[(($end)>>2)]=$199;
   label = 52; break;
  case 56: 
   var $201=HEAP32[(($end)>>2)];
   var $202=HEAP8[($201)];
   var $203=(($202 << 24) >> 24)!=0;
   if ($203) { label = 57; break; } else { label = 58; break; }
  case 57: 
   label = 14; break;
  case 58: 
   label = 59; break;
  case 59: 
   label = 60; break;
  case 60: 
   var $208=$d;
   $1=$208;
   label = 61; break;
  case 61: 
   var $210=$1;
   STACKTOP = sp;
   return $210;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_to_dbl($mrb, $str, $badcheck) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $s;
   var $len;
   var $3=sp;
   var $temp_str;
   $1=$mrb;
   $2=$badcheck;
   var $4=$1;
   _mrb_str_to_str($3, $4, $str);
   var $5=$str;
   var $6=$3;
   assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
   var $7=(($str)|0);
   var $8=$7;
   var $9=HEAP32[(($8)>>2)];
   var $10=$9;
   var $11=(($10+20)|0);
   var $12=HEAP32[(($11)>>2)];
   $s=$12;
   var $13=(($str)|0);
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15;
   var $17=(($16+12)|0);
   var $18=HEAP32[(($17)>>2)];
   $len=$18;
   var $19=$s;
   var $20=(($19)|(0))!=0;
   if ($20) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $22=$2;
   var $23=(($22)|(0))!=0;
   if ($23) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $25=$s;
   var $26=$len;
   var $27=_memchr($25, 0, $26);
   var $28=(($27)|(0))!=0;
   if ($28) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $30=$1;
   var $31=$1;
   var $32=_mrb_class_get($31, ((96948)|0));
   _mrb_raise($30, $32, ((104644)|0));
   label = 5; break;
  case 5: 
   var $34=$len;
   var $35=$s;
   var $36=(($35+$34)|0);
   var $37=HEAP8[($36)];
   var $38=(($37 << 24) >> 24)!=0;
   if ($38) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $40=$1;
   var $41=$s;
   var $42=$len;
   var $43=_str_new($40, $41, $42);
   $temp_str=$43;
   var $44=$temp_str;
   var $45=(($44+20)|0);
   var $46=HEAP32[(($45)>>2)];
   $s=$46;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $49=$1;
   var $50=$s;
   var $51=$2;
   var $52=_mrb_cstr_to_dbl($49, $50, $51);
   STACKTOP = sp;
   return $52;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_dump($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $len;
   var $p;
   var $pend;
   var $q;
   var $result;
   var $c;
   var $c1;
   $1=$mrb;
   $len=2;
   var $2=(($str)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=(($5+20)|0);
   var $7=HEAP32[(($6)>>2)];
   $p=$7;
   var $8=$p;
   var $9=(($str)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=$11;
   var $13=(($12+12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($8+$14)|0);
   $pend=$15;
   label = 2; break;
  case 2: 
   var $17=$p;
   var $18=$pend;
   var $19=(($17)>>>(0)) < (($18)>>>(0));
   if ($19) { label = 3; break; } else { label = 16; break; }
  case 3: 
   var $21=$p;
   var $22=(($21+1)|0);
   $p=$22;
   var $23=HEAP8[($21)];
   $c=$23;
   var $24=$c;
   var $25=(($24)&(255));
   if ((($25)|(0))==34 | (($25)|(0))==92 | (($25)|(0))==10 | (($25)|(0))==13 | (($25)|(0))==9 | (($25)|(0))==12 | (($25)|(0))==11 | (($25)|(0))==8 | (($25)|(0))==7 | (($25)|(0))==27) {
    label = 4; break;
   }
   else if ((($25)|(0))==35) {
    label = 5; break;
   }
   else {
   label = 11; break;
   }
  case 4: 
   var $27=$len;
   var $28=((($27)+(2))|0);
   $len=$28;
   label = 15; break;
  case 5: 
   var $30=$p;
   var $31=$pend;
   var $32=(($30)>>>(0)) < (($31)>>>(0));
   if ($32) { label = 6; break; } else { var $51 = 0;label = 10; break; }
  case 6: 
   var $34=$p;
   var $35=HEAP8[($34)];
   var $36=(($35 << 24) >> 24);
   var $37=(($36)|(0))==36;
   if ($37) { var $49 = 1;label = 9; break; } else { label = 7; break; }
  case 7: 
   var $39=$p;
   var $40=HEAP8[($39)];
   var $41=(($40 << 24) >> 24);
   var $42=(($41)|(0))==64;
   if ($42) { var $49 = 1;label = 9; break; } else { label = 8; break; }
  case 8: 
   var $44=$p;
   var $45=HEAP8[($44)];
   var $46=(($45 << 24) >> 24);
   var $47=(($46)|(0))==123;
   var $49 = $47;label = 9; break;
  case 9: 
   var $49;
   var $51 = $49;label = 10; break;
  case 10: 
   var $51;
   var $52=$51 ? 2 : 1;
   var $53=$len;
   var $54=((($53)+($52))|0);
   $len=$54;
   label = 15; break;
  case 11: 
   var $56=$c;
   var $57=(($56)&(255));
   var $58=_isprint($57);
   var $59=(($58)|(0))!=0;
   if ($59) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $61=$len;
   var $62=((($61)+(1))|0);
   $len=$62;
   label = 14; break;
  case 13: 
   var $64=$len;
   var $65=((($64)+(4))|0);
   $len=$65;
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   label = 2; break;
  case 16: 
   var $69=$1;
   var $70=$len;
   var $71=_str_new($69, 0, $70);
   $result=$71;
   var $72=$1;
   var $73=$result;
   _str_with_class($72, $73, $str);
   var $74=(($str)|0);
   var $75=$74;
   var $76=HEAP32[(($75)>>2)];
   var $77=$76;
   var $78=(($77+20)|0);
   var $79=HEAP32[(($78)>>2)];
   $p=$79;
   var $80=$p;
   var $81=(($str)|0);
   var $82=$81;
   var $83=HEAP32[(($82)>>2)];
   var $84=$83;
   var $85=(($84+12)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=(($80+$86)|0);
   $pend=$87;
   var $88=$result;
   var $89=(($88+20)|0);
   var $90=HEAP32[(($89)>>2)];
   $q=$90;
   var $91=$q;
   var $92=(($91+1)|0);
   $q=$92;
   HEAP8[($91)]=34;
   label = 17; break;
  case 17: 
   var $94=$p;
   var $95=$pend;
   var $96=(($94)>>>(0)) < (($95)>>>(0));
   if ($96) { label = 18; break; } else { label = 39; break; }
  case 18: 
   var $98=$p;
   var $99=(($98+1)|0);
   $p=$99;
   var $100=HEAP8[($98)];
   $c1=$100;
   var $101=$c1;
   var $102=(($101)&(255));
   if ((($102)|(0))==34 | (($102)|(0))==92) {
    label = 19; break;
   }
   else if ((($102)|(0))==10) {
    label = 20; break;
   }
   else if ((($102)|(0))==13) {
    label = 21; break;
   }
   else if ((($102)|(0))==9) {
    label = 22; break;
   }
   else if ((($102)|(0))==12) {
    label = 23; break;
   }
   else if ((($102)|(0))==11) {
    label = 24; break;
   }
   else if ((($102)|(0))==8) {
    label = 25; break;
   }
   else if ((($102)|(0))==7) {
    label = 26; break;
   }
   else if ((($102)|(0))==27) {
    label = 27; break;
   }
   else if ((($102)|(0))==35) {
    label = 28; break;
   }
   else {
   label = 34; break;
   }
  case 19: 
   var $104=$q;
   var $105=(($104+1)|0);
   $q=$105;
   HEAP8[($104)]=92;
   var $106=$c1;
   var $107=$q;
   var $108=(($107+1)|0);
   $q=$108;
   HEAP8[($107)]=$106;
   label = 38; break;
  case 20: 
   var $110=$q;
   var $111=(($110+1)|0);
   $q=$111;
   HEAP8[($110)]=92;
   var $112=$q;
   var $113=(($112+1)|0);
   $q=$113;
   HEAP8[($112)]=110;
   label = 38; break;
  case 21: 
   var $115=$q;
   var $116=(($115+1)|0);
   $q=$116;
   HEAP8[($115)]=92;
   var $117=$q;
   var $118=(($117+1)|0);
   $q=$118;
   HEAP8[($117)]=114;
   label = 38; break;
  case 22: 
   var $120=$q;
   var $121=(($120+1)|0);
   $q=$121;
   HEAP8[($120)]=92;
   var $122=$q;
   var $123=(($122+1)|0);
   $q=$123;
   HEAP8[($122)]=116;
   label = 38; break;
  case 23: 
   var $125=$q;
   var $126=(($125+1)|0);
   $q=$126;
   HEAP8[($125)]=92;
   var $127=$q;
   var $128=(($127+1)|0);
   $q=$128;
   HEAP8[($127)]=102;
   label = 38; break;
  case 24: 
   var $130=$q;
   var $131=(($130+1)|0);
   $q=$131;
   HEAP8[($130)]=92;
   var $132=$q;
   var $133=(($132+1)|0);
   $q=$133;
   HEAP8[($132)]=118;
   label = 38; break;
  case 25: 
   var $135=$q;
   var $136=(($135+1)|0);
   $q=$136;
   HEAP8[($135)]=92;
   var $137=$q;
   var $138=(($137+1)|0);
   $q=$138;
   HEAP8[($137)]=98;
   label = 38; break;
  case 26: 
   var $140=$q;
   var $141=(($140+1)|0);
   $q=$141;
   HEAP8[($140)]=92;
   var $142=$q;
   var $143=(($142+1)|0);
   $q=$143;
   HEAP8[($142)]=97;
   label = 38; break;
  case 27: 
   var $145=$q;
   var $146=(($145+1)|0);
   $q=$146;
   HEAP8[($145)]=92;
   var $147=$q;
   var $148=(($147+1)|0);
   $q=$148;
   HEAP8[($147)]=101;
   label = 38; break;
  case 28: 
   var $150=$p;
   var $151=$pend;
   var $152=(($150)>>>(0)) < (($151)>>>(0));
   if ($152) { label = 29; break; } else { label = 33; break; }
  case 29: 
   var $154=$p;
   var $155=HEAP8[($154)];
   var $156=(($155 << 24) >> 24);
   var $157=(($156)|(0))==36;
   if ($157) { label = 32; break; } else { label = 30; break; }
  case 30: 
   var $159=$p;
   var $160=HEAP8[($159)];
   var $161=(($160 << 24) >> 24);
   var $162=(($161)|(0))==64;
   if ($162) { label = 32; break; } else { label = 31; break; }
  case 31: 
   var $164=$p;
   var $165=HEAP8[($164)];
   var $166=(($165 << 24) >> 24);
   var $167=(($166)|(0))==123;
   if ($167) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $169=$q;
   var $170=(($169+1)|0);
   $q=$170;
   HEAP8[($169)]=92;
   label = 33; break;
  case 33: 
   var $172=$q;
   var $173=(($172+1)|0);
   $q=$173;
   HEAP8[($172)]=35;
   label = 38; break;
  case 34: 
   var $175=$c1;
   var $176=(($175)&(255));
   var $177=_isprint($176);
   var $178=(($177)|(0))!=0;
   if ($178) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $180=$c1;
   var $181=$q;
   var $182=(($181+1)|0);
   $q=$182;
   HEAP8[($181)]=$180;
   label = 37; break;
  case 36: 
   var $184=$q;
   var $185=(($184+1)|0);
   $q=$185;
   HEAP8[($184)]=92;
   var $186=$c1;
   var $187=(($186)&(255));
   var $188=((((($187)|(0)))%(8))&-1);
   var $189=((($188)+(48))|0);
   var $190=(($189) & 255);
   var $191=$q;
   var $192=(($191+2)|0);
   HEAP8[($192)]=$190;
   var $193=$c1;
   var $194=(($193)&(255));
   var $195=((((($194)|(0)))/(8))&-1);
   var $196=(($195) & 255);
   $c1=$196;
   var $197=$c1;
   var $198=(($197)&(255));
   var $199=((((($198)|(0)))%(8))&-1);
   var $200=((($199)+(48))|0);
   var $201=(($200) & 255);
   var $202=$q;
   var $203=(($202+1)|0);
   HEAP8[($203)]=$201;
   var $204=$c1;
   var $205=(($204)&(255));
   var $206=((((($205)|(0)))/(8))&-1);
   var $207=(($206) & 255);
   $c1=$207;
   var $208=$c1;
   var $209=(($208)&(255));
   var $210=((((($209)|(0)))%(8))&-1);
   var $211=((($210)+(48))|0);
   var $212=(($211) & 255);
   var $213=$q;
   var $214=(($213)|0);
   HEAP8[($214)]=$212;
   var $215=$q;
   var $216=(($215+3)|0);
   $q=$216;
   label = 37; break;
  case 37: 
   label = 38; break;
  case 38: 
   label = 17; break;
  case 39: 
   var $220=$q;
   var $221=(($220+1)|0);
   $q=$221;
   HEAP8[($220)]=34;
   var $222=$result;
   var $223=$222;
   _mrb_obj_value45($agg_result, $223);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_cat_cstr($agg_result, $mrb, $str, $ptr) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 $1=$mrb;
 $2=$ptr;
 var $3=$1;
 var $4=$2;
 var $5=$2;
 var $6=_strlen($5);
 _mrb_str_cat($agg_result, $3, $str, $4, $6);
 STACKTOP = sp;
 return;
}
function _mrb_str_append($agg_result, $mrb, $str, $str2) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $str2; $str2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2=sp;
 $1=$mrb;
 var $3=$1;
 _mrb_str_to_str($2, $3, $str2);
 var $4=$str2;
 var $5=$2;
 assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
 var $6=$1;
 _mrb_str_buf_append($agg_result, $6, $str, $str2);
 STACKTOP = sp;
 return;
}
function _mrb_str_inspect($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 88)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $p;
   var $pend;
   var $buf=sp;
   var $result=(sp)+(16);
   var $c;
   var $cc;
   var $2=(sp)+(28);
   var $3=(sp)+(40);
   var $4=(sp)+(52);
   var $5=(sp)+(64);
   var $6=(sp)+(76);
   $1=$mrb;
   var $7=$1;
   _mrb_str_new($result, $7, ((103628)|0), 1);
   var $8=(($str)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10;
   var $12=(($11+20)|0);
   var $13=HEAP32[(($12)>>2)];
   $p=$13;
   var $14=(($str)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=$16;
   var $18=(($17+20)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($str)|0);
   var $21=$20;
   var $22=HEAP32[(($21)>>2)];
   var $23=$22;
   var $24=(($23+12)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($19+$25)|0);
   $pend=$26;
   label = 2; break;
  case 2: 
   var $28=$p;
   var $29=$pend;
   var $30=(($28)>>>(0)) < (($29)>>>(0));
   if ($30) { label = 3; break; } else { label = 27; break; }
  case 3: 
   var $32=$p;
   var $33=HEAP8[($32)];
   var $34=(($33 << 24) >> 24);
   $c=$34;
   var $35=$c;
   var $36=(($35)|(0))==34;
   if ($36) { label = 10; break; } else { label = 4; break; }
  case 4: 
   var $38=$c;
   var $39=(($38)|(0))==92;
   if ($39) { label = 10; break; } else { label = 5; break; }
  case 5: 
   var $41=$c;
   var $42=(($41)|(0))==35;
   if ($42) { label = 6; break; } else { label = 11; break; }
  case 6: 
   var $44=$p;
   var $45=$pend;
   var $46=(($44)>>>(0)) < (($45)>>>(0));
   if ($46) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $48=$p;
   var $49=HEAP8[($48)];
   var $50=(($49 << 24) >> 24);
   var $51=(($50)|(0))==36;
   if ($51) { label = 10; break; } else { label = 8; break; }
  case 8: 
   var $53=$p;
   var $54=HEAP8[($53)];
   var $55=(($54 << 24) >> 24);
   var $56=(($55)|(0))==64;
   if ($56) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $58=$p;
   var $59=HEAP8[($58)];
   var $60=(($59 << 24) >> 24);
   var $61=(($60)|(0))==123;
   if ($61) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $63=(($buf)|0);
   HEAP8[($63)]=92;
   var $64=$c;
   var $65=(($64) & 255);
   var $66=(($buf+1)|0);
   HEAP8[($66)]=$65;
   var $67=$1;
   var $68=(($buf)|0);
   _mrb_str_buf_cat($2, $67, $result, $68, 2);
   label = 26; break;
  case 11: 
   var $70=$c;
   var $71=(($70) & 255);
   var $72=(($71)&(255));
   var $73=_isprint($72);
   var $74=(($73)|(0))!=0;
   if ($74) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $76=$c;
   var $77=(($76) & 255);
   var $78=(($buf)|0);
   HEAP8[($78)]=$77;
   var $79=$1;
   var $80=(($buf)|0);
   _mrb_str_buf_cat($3, $79, $result, $80, 1);
   label = 26; break;
  case 13: 
   var $82=$c;
   if ((($82)|(0))==10) {
    label = 14; break;
   }
   else if ((($82)|(0))==13) {
    label = 15; break;
   }
   else if ((($82)|(0))==9) {
    label = 16; break;
   }
   else if ((($82)|(0))==12) {
    label = 17; break;
   }
   else if ((($82)|(0))==11) {
    label = 18; break;
   }
   else if ((($82)|(0))==8) {
    label = 19; break;
   }
   else if ((($82)|(0))==7) {
    label = 20; break;
   }
   else if ((($82)|(0))==27) {
    label = 21; break;
   }
   else {
   label = 22; break;
   }
  case 14: 
   $cc=110;
   label = 23; break;
  case 15: 
   $cc=114;
   label = 23; break;
  case 16: 
   $cc=116;
   label = 23; break;
  case 17: 
   $cc=102;
   label = 23; break;
  case 18: 
   $cc=118;
   label = 23; break;
  case 19: 
   $cc=98;
   label = 23; break;
  case 20: 
   $cc=97;
   label = 23; break;
  case 21: 
   $cc=101;
   label = 23; break;
  case 22: 
   $cc=0;
   label = 23; break;
  case 23: 
   var $93=$cc;
   var $94=(($93)|(0))!=0;
   if ($94) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $96=(($buf)|0);
   HEAP8[($96)]=92;
   var $97=$cc;
   var $98=(($97) & 255);
   var $99=(($buf+1)|0);
   HEAP8[($99)]=$98;
   var $100=$1;
   var $101=(($buf)|0);
   _mrb_str_buf_cat($4, $100, $result, $101, 2);
   label = 26; break;
  case 25: 
   var $103=(($buf)|0);
   HEAP8[($103)]=92;
   var $104=$c;
   var $105=((((($104)>>>(0)))%(8))&-1);
   var $106=((($105)+(48))|0);
   var $107=(($106) & 255);
   var $108=(($buf+3)|0);
   HEAP8[($108)]=$107;
   var $109=$c;
   var $110=((((($109)>>>(0)))/(8))&-1);
   $c=$110;
   var $111=$c;
   var $112=((((($111)>>>(0)))%(8))&-1);
   var $113=((($112)+(48))|0);
   var $114=(($113) & 255);
   var $115=(($buf+2)|0);
   HEAP8[($115)]=$114;
   var $116=$c;
   var $117=((((($116)>>>(0)))/(8))&-1);
   $c=$117;
   var $118=$c;
   var $119=((((($118)>>>(0)))%(8))&-1);
   var $120=((($119)+(48))|0);
   var $121=(($120) & 255);
   var $122=(($buf+1)|0);
   HEAP8[($122)]=$121;
   var $123=$1;
   var $124=(($buf)|0);
   _mrb_str_buf_cat($5, $123, $result, $124, 4);
   label = 26; break;
  case 26: 
   var $126=$p;
   var $127=(($126+1)|0);
   $p=$127;
   label = 2; break;
  case 27: 
   var $129=$1;
   _mrb_str_buf_cat($6, $129, $result, ((103628)|0), 1);
   var $130=$agg_result;
   var $131=$result;
   assert(12 % 1 === 0);HEAP32[(($130)>>2)]=HEAP32[(($131)>>2)];HEAP32[((($130)+(4))>>2)]=HEAP32[((($131)+(4))>>2)];HEAP32[((($130)+(8))>>2)]=HEAP32[((($131)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_init_string($mrb) {
 var label = 0;
 var $1;
 var $s;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=(($3+44)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_mrb_define_class($2, ((89164)|0), $5);
 var $7=$1;
 var $8=(($7+60)|0);
 HEAP32[(($8)>>2)]=$6;
 $s=$6;
 var $9=$s;
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=$11 >>> 11;
 var $13=$12 & 2097151;
 var $14=$13 & -256;
 var $15=$14 | 16;
 var $16=$s;
 var $17=$15 & 2097151;
 var $18=$16;
 var $19=$17 & 2097151;
 var $20=$19 << 11;
 var $21=HEAP32[(($18)>>2)];
 var $22=$21 & 2047;
 var $23=$22 | $20;
 HEAP32[(($18)>>2)]=$23;
 var $24=$1;
 var $25=$s;
 var $26=$1;
 var $27=_mrb_class_get($26, ((103104)|0));
 _mrb_include_module($24, $25, $27);
 var $28=$1;
 var $29=$s;
 _mrb_define_method($28, $29, ((102668)|0), 556, 262144);
 var $30=$1;
 var $31=$s;
 _mrb_define_method($30, $31, ((102336)|0), 26, 0);
 var $32=$1;
 var $33=$s;
 _mrb_define_method($32, $33, ((101932)|0), 558, 0);
 var $34=$1;
 var $35=$s;
 _mrb_define_method($34, $35, ((101468)|0), 558, 0);
 var $36=$1;
 var $37=$s;
 _mrb_define_method($36, $37, ((100912)|0), 190, 262144);
 var $38=$1;
 var $39=$s;
 _mrb_define_method($38, $39, ((100356)|0), 454, 262144);
 var $40=$1;
 var $41=$s;
 _mrb_define_method($40, $41, ((100116)|0), 590, 262144);
 var $42=$1;
 var $43=$s;
 _mrb_define_method($42, $43, ((99856)|0), 450, 262144);
 var $44=$1;
 var $45=$s;
 _mrb_define_method($44, $45, ((99520)|0), 604, 4096);
 var $46=$1;
 var $47=$s;
 _mrb_define_method($46, $47, ((99036)|0), 178, 0);
 var $48=$1;
 var $49=$s;
 _mrb_define_method($48, $49, ((98504)|0), 10, 262144);
 var $50=$1;
 var $51=$s;
 _mrb_define_method($50, $51, ((98132)|0), 682, 4096);
 var $52=$1;
 var $53=$s;
 _mrb_define_method($52, $53, ((97868)|0), 142, 4096);
 var $54=$1;
 var $55=$s;
 _mrb_define_method($54, $55, ((97520)|0), 216, 262144);
 var $56=$1;
 var $57=$s;
 _mrb_define_method($56, $57, ((97240)|0), 672, 262144);
 var $58=$1;
 var $59=$s;
 _mrb_define_method($58, $59, ((96724)|0), 308, 0);
 var $60=$1;
 var $61=$s;
 _mrb_define_method($60, $61, ((96416)|0), 656, 0);
 var $62=$1;
 var $63=$s;
 _mrb_define_method($62, $63, ((96160)|0), 124, 0);
 var $64=$1;
 var $65=$s;
 _mrb_define_method($64, $65, ((95988)|0), 696, 262144);
 var $66=$1;
 var $67=$s;
 _mrb_define_method($66, $67, ((95784)|0), 450, 262144);
 var $68=$1;
 var $69=$s;
 _mrb_define_method($68, $69, ((95568)|0), 450, 262144);
 var $70=$1;
 var $71=$s;
 _mrb_define_method($70, $71, ((95296)|0), 504, 262144);
 var $72=$1;
 var $73=$s;
 _mrb_define_method($72, $73, ((95104)|0), 302, 262144);
 var $74=$1;
 var $75=$s;
 _mrb_define_method($74, $75, ((94920)|0), 318, 4096);
 var $76=$1;
 var $77=$s;
 _mrb_define_method($76, $77, ((94540)|0), 304, 262144);
 var $78=$1;
 var $79=$s;
 _mrb_define_method($78, $79, ((94332)|0), 680, 262144);
 var $80=$1;
 var $81=$s;
 _mrb_define_method($80, $81, ((93940)|0), 282, 0);
 var $82=$1;
 var $83=$s;
 _mrb_define_method($82, $83, ((93652)|0), 450, 262144);
 var $84=$1;
 var $85=$s;
 _mrb_define_method($84, $85, ((93364)|0), 680, 262144);
 var $86=$1;
 var $87=$s;
 _mrb_define_method($86, $87, ((93144)|0), 136, 0);
 var $88=$1;
 var $89=$s;
 _mrb_define_method($88, $89, ((92880)|0), 252, 0);
 var $90=$1;
 var $91=$s;
 _mrb_define_method($90, $91, ((92688)|0), 374, 4096);
 var $92=$1;
 var $93=$s;
 _mrb_define_method($92, $93, ((92516)|0), 450, 262144);
 var $94=$1;
 var $95=$s;
 _mrb_define_method($94, $95, ((92324)|0), 604, 4096);
 var $96=$1;
 var $97=$s;
 _mrb_define_method($96, $97, ((92060)|0), 296, 4096);
 var $98=$1;
 var $99=$s;
 _mrb_define_method($98, $99, ((91852)|0), 450, 262144);
 var $100=$1;
 var $101=$s;
 _mrb_define_method($100, $101, ((91364)|0), 450, 262144);
 var $102=$1;
 var $103=$s;
 _mrb_define_method($102, $103, ((91120)|0), 66, 4096);
 var $104=$1;
 var $105=$s;
 _mrb_define_method($104, $105, ((90864)|0), 64, 0);
 var $106=$1;
 var $107=$s;
 _mrb_define_method($106, $107, ((87980)|0), 56, 0);
 var $108=$1;
 var $109=$s;
 _mrb_define_method($108, $109, ((90980)|0), 56, 0);
 var $110=$1;
 var $111=$s;
 _mrb_define_method($110, $111, ((90616)|0), 282, 0);
 var $112=$1;
 var $113=$s;
 _mrb_define_method($112, $113, ((90408)|0), 644, 262144);
 var $114=$1;
 var $115=$s;
 _mrb_define_method($114, $115, ((90132)|0), 400, 262144);
 var $116=$1;
 var $117=$s;
 _mrb_define_method($116, $117, ((89984)|0), 546, 0);
 var $118=$1;
 var $119=$s;
 _mrb_define_method($118, $119, ((89868)|0), 416, 0);
 return;
}
function _mrb_str_plus_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $str=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((89208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$str,tempInt));
 var $4=$1;
 _mrb_str_plus($agg_result, $4, $self, $str);
 STACKTOP = sp;
 return;
}
function _mrb_str_bytesize($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $s;
 $1=$mrb;
 var $2=(($self)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 $s=$5;
 var $6=$s;
 var $7=(($6+12)|0);
 var $8=HEAP32[(($7)>>2)];
 _mrb_fixnum_value48($agg_result, $8);
 STACKTOP = sp;
 return;
}
function _mrb_str_times($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $n;
   var $len;
   var $times=sp;
   var $str2;
   var $p;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((88496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$times,tempInt));
   var $4=HEAP32[(($times)>>2)];
   var $5=(($4)|(0)) < 0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   var $8=$1;
   var $9=_mrb_class_get($8, ((96948)|0));
   _mrb_raise($7, $9, ((88104)|0));
   label = 3; break;
  case 3: 
   var $11=HEAP32[(($times)>>2)];
   var $12=(($11)|(0))!=0;
   if ($12) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $14=HEAP32[(($times)>>2)];
   var $15=(((2147483647)/((($14)|(0))))&-1);
   var $16=(($self)|0);
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   var $19=$18;
   var $20=(($19+12)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($15)|(0)) < (($21)|(0));
   if ($22) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $24=$1;
   var $25=$1;
   var $26=_mrb_class_get($25, ((96948)|0));
   _mrb_raise($24, $26, ((103828)|0));
   label = 6; break;
  case 6: 
   var $28=(($self)|0);
   var $29=$28;
   var $30=HEAP32[(($29)>>2)];
   var $31=$30;
   var $32=(($31+12)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=HEAP32[(($times)>>2)];
   var $35=(Math.imul($33,$34)|0);
   $len=$35;
   var $36=$1;
   var $37=$len;
   var $38=_str_new($36, 0, $37);
   $str2=$38;
   var $39=$1;
   var $40=$str2;
   _str_with_class($39, $40, $self);
   var $41=$str2;
   var $42=(($41+20)|0);
   var $43=HEAP32[(($42)>>2)];
   $p=$43;
   var $44=$len;
   var $45=(($44)|(0)) > 0;
   if ($45) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $47=(($self)|0);
   var $48=$47;
   var $49=HEAP32[(($48)>>2)];
   var $50=$49;
   var $51=(($50+12)|0);
   var $52=HEAP32[(($51)>>2)];
   $n=$52;
   var $53=$p;
   var $54=(($self)|0);
   var $55=$54;
   var $56=HEAP32[(($55)>>2)];
   var $57=$56;
   var $58=(($57+20)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=$n;
   assert($60 % 1 === 0);(_memcpy($53, $59, $60)|0);
   label = 8; break;
  case 8: 
   var $62=$n;
   var $63=$len;
   var $64=((((($63)|(0)))/(2))&-1);
   var $65=(($62)|(0)) <= (($64)|(0));
   if ($65) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $67=$p;
   var $68=$n;
   var $69=(($67+$68)|0);
   var $70=$p;
   var $71=$n;
   assert($71 % 1 === 0);(_memcpy($69, $70, $71)|0);
   var $72=$n;
   var $73=($72<<1);
   $n=$73;
   label = 8; break;
  case 10: 
   var $75=$p;
   var $76=$n;
   var $77=(($75+$76)|0);
   var $78=$p;
   var $79=$len;
   var $80=$n;
   var $81=((($79)-($80))|0);
   assert($81 % 1 === 0);(_memcpy($77, $78, $81)|0);
   label = 11; break;
  case 11: 
   var $83=$str2;
   var $84=(($83+12)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=$p;
   var $87=(($86+$85)|0);
   HEAP8[($87)]=0;
   var $88=$str2;
   var $89=$88;
   _mrb_obj_value45($agg_result, $89);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_cmp_m($agg_result, $mrb, $str1) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str1; $str1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $str2=sp;
   var $result;
   var $tmp=(sp)+(12);
   var $2=(sp)+(24);
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_get_args($3, ((89036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$str2,tempInt));
   var $5=(($str2+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==16;
   if ($7) { label = 14; break; } else { label = 2; break; }
  case 2: 
   var $9=$1;
   var $10=$1;
   var $11=_mrb_intern2($10, ((87980)|0), 4);
   var $12=_mrb_respond_to($9, $str2, $11);
   var $13=(($12 << 24) >> 24)!=0;
   if ($13) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _mrb_nil_value49($agg_result);
   label = 16; break;
  case 4: 
   var $16=$1;
   var $17=$1;
   var $18=_mrb_intern2($17, ((100356)|0), 3);
   var $19=_mrb_respond_to($16, $str2, $18);
   var $20=(($19 << 24) >> 24)!=0;
   if ($20) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _mrb_nil_value49($agg_result);
   label = 16; break;
  case 6: 
   var $23=$1;
   _mrb_funcall($tmp, $23, $str2, ((100356)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($str1)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($str1)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($str1)+(8))>>2)],tempInt));
   var $24=(($tmp+8)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25)|(0))==0;
   if ($26) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $28=(($tmp)|0);
   var $29=$28;
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30)|(0))!=0;
   if ($31) { label = 9; break; } else { label = 8; break; }
  case 8: 
   _mrb_nil_value49($agg_result);
   label = 16; break;
  case 9: 
   var $34=(($tmp)|0);
   var $35=$34;
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36)|(0))!=0;
   if ($37) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $39=$1;
   _mrb_fixnum_value48($2, 0);
   _mrb_funcall($agg_result, $39, $2, ((88548)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($tmp)+(8))>>2)],tempInt));
   label = 16; break;
  case 11: 
   var $41=(($tmp)|0);
   var $42=$41;
   var $43=HEAP32[(($42)>>2)];
   var $44=(((-$43))|0);
   $result=$44;
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   label = 15; break;
  case 14: 
   var $48=$1;
   var $49=_mrb_str_cmp($48, $str1, $str2);
   $result=$49;
   label = 15; break;
  case 15: 
   var $51=$result;
   _mrb_fixnum_value48($agg_result, $51);
   label = 16; break;
  case 16: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_equal_m($agg_result, $mrb, $str1) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str1; $str1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $str2=sp;
 var $equal_p;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((89036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$str2,tempInt));
 var $4=$1;
 var $5=_mrb_str_equal($4, $str1, $str2);
 $equal_p=$5;
 var $6=$equal_p;
 _mrb_bool_value($agg_result, $6);
 STACKTOP = sp;
 return;
}
function _noregexp($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=_mrb_class_get($3, ((88744)|0));
 _mrb_raise($2, $4, ((88648)|0));
 _mrb_nil_value49($agg_result);
 STACKTOP = sp;
 return;
}
function _mrb_str_aref_m($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a1=sp;
   var $a2=(sp)+(12);
   var $argc;
   var $2=(sp)+(24);
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_get_args($3, ((88964)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$a1,HEAP32[(((tempInt)+(4))>>2)]=$a2,tempInt));
   $argc=$4;
   var $5=$argc;
   var $6=(($5)|(0))==2;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$1;
   _regexp_check($8, $a1);
   var $9=$1;
   var $10=(($a1)|0);
   var $11=$10;
   var $12=HEAP32[(($11)>>2)];
   var $13=(($a2)|0);
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   _mrb_str_substr($agg_result, $9, $str, $12, $15);
   label = 6; break;
  case 3: 
   var $17=$argc;
   var $18=(($17)|(0))!=1;
   if ($18) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $20=$1;
   var $21=$1;
   var $22=_mrb_class_get($21, ((96948)|0));
   var $23=$argc;
   _mrb_fixnum_value48($2, $23);
   _mrb_raisef($20, $22, ((88820)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($2)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($2)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($2)+(8))>>2)],tempInt));
   label = 5; break;
  case 5: 
   var $25=$1;
   _mrb_str_aref($agg_result, $25, $str, $a1);
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_capitalize($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $str=sp;
 var $2=(sp)+(12);
 var $3=(sp)+(24);
 $1=$mrb;
 var $4=$1;
 _mrb_str_dup($2, $4, $self);
 var $5=$str;
 var $6=$2;
 assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 var $7=$1;
 _mrb_str_capitalize_bang($3, $7, $str);
 var $8=$agg_result;
 var $9=$str;
 assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_str_capitalize_bang($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $p;
   var $pend;
   var $modify;
   var $s;
   $1=$mrb;
   $modify=0;
   var $2=(($str)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $s=$5;
   var $6=$1;
   var $7=$s;
   _mrb_str_modify($6, $7);
   var $8=$s;
   var $9=(($8+12)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))==0;
   if ($11) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $13=$s;
   var $14=(($13+20)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))!=0;
   if ($16) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _mrb_nil_value49($agg_result);
   label = 14; break;
  case 4: 
   var $19=$s;
   var $20=(($19+20)|0);
   var $21=HEAP32[(($20)>>2)];
   $p=$21;
   var $22=$s;
   var $23=(($22+20)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$s;
   var $26=(($25+12)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($24+$27)|0);
   $pend=$28;
   var $29=$p;
   var $30=HEAP8[($29)];
   var $31=(($30)&(255));
   var $32=_islower($31);
   var $33=(($32)|(0))!=0;
   if ($33) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $35=$p;
   var $36=HEAP8[($35)];
   var $37=(($36)&(255));
   var $38=_toupper($37);
   var $39=(($38) & 255);
   var $40=$p;
   HEAP8[($40)]=$39;
   $modify=1;
   label = 6; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $43=$p;
   var $44=(($43+1)|0);
   $p=$44;
   var $45=$pend;
   var $46=(($44)>>>(0)) < (($45)>>>(0));
   if ($46) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $48=$p;
   var $49=HEAP8[($48)];
   var $50=(($49)&(255));
   var $51=_isupper($50);
   var $52=(($51)|(0))!=0;
   if ($52) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $54=$p;
   var $55=HEAP8[($54)];
   var $56=(($55)&(255));
   var $57=_tolower($56);
   var $58=(($57) & 255);
   var $59=$p;
   HEAP8[($59)]=$58;
   $modify=1;
   label = 10; break;
  case 10: 
   label = 7; break;
  case 11: 
   var $62=$modify;
   var $63=(($62)|(0))!=0;
   if ($63) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $65=$agg_result;
   var $66=$str;
   assert(12 % 1 === 0);HEAP32[(($65)>>2)]=HEAP32[(($66)>>2)];HEAP32[((($65)+(4))>>2)]=HEAP32[((($66)+(4))>>2)];HEAP32[((($65)+(8))>>2)]=HEAP32[((($66)+(8))>>2)];
   label = 14; break;
  case 13: 
   _mrb_nil_value49($agg_result);
   label = 14; break;
  case 14: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_chomp($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $str=sp;
 var $2=(sp)+(12);
 var $3=(sp)+(24);
 $1=$mrb;
 var $4=$1;
 _mrb_str_dup($2, $4, $self);
 var $5=$str;
 var $6=$2;
 assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 var $7=$1;
 _mrb_str_chomp_bang($3, $7, $str);
 var $8=$agg_result;
 var $9=$str;
 assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_str_chomp_bang($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $rs=sp;
   var $newline;
   var $p;
   var $pp;
   var $rslen;
   var $len;
   var $s;
   $1=$mrb;
   var $2=(($str)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $s=$5;
   var $6=$1;
   var $7=$s;
   _mrb_str_modify($6, $7);
   var $8=$s;
   var $9=(($8+12)|0);
   var $10=HEAP32[(($9)>>2)];
   $len=$10;
   var $11=$1;
   var $12=_mrb_get_args($11, ((89112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$rs,tempInt));
   var $13=(($12)|(0))==0;
   if ($13) { label = 2; break; } else { label = 15; break; }
  case 2: 
   var $15=$len;
   var $16=(($15)|(0))==0;
   if ($16) { label = 3; break; } else { label = 4; break; }
  case 3: 
   _mrb_nil_value49($agg_result);
   label = 44; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $20=$len;
   var $21=((($20)-(1))|0);
   var $22=$s;
   var $23=(($22+20)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24+$21)|0);
   var $26=HEAP8[($25)];
   var $27=(($26 << 24) >> 24);
   var $28=(($27)|(0))==10;
   if ($28) { label = 6; break; } else { label = 10; break; }
  case 6: 
   var $30=$s;
   var $31=(($30+12)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=((($32)-(1))|0);
   HEAP32[(($31)>>2)]=$33;
   var $34=$s;
   var $35=(($34+12)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36)|(0)) > 0;
   if ($37) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $39=$s;
   var $40=(($39+12)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=((($41)-(1))|0);
   var $43=$s;
   var $44=(($43+20)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($45+$42)|0);
   var $47=HEAP8[($46)];
   var $48=(($47 << 24) >> 24);
   var $49=(($48)|(0))==13;
   if ($49) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $51=$s;
   var $52=(($51+12)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=((($53)-(1))|0);
   HEAP32[(($52)>>2)]=$54;
   label = 9; break;
  case 9: 
   label = 14; break;
  case 10: 
   var $57=$len;
   var $58=((($57)-(1))|0);
   var $59=$s;
   var $60=(($59+20)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($61+$58)|0);
   var $63=HEAP8[($62)];
   var $64=(($63 << 24) >> 24);
   var $65=(($64)|(0))==13;
   if ($65) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $67=$s;
   var $68=(($67+12)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=((($69)-(1))|0);
   HEAP32[(($68)>>2)]=$70;
   label = 13; break;
  case 12: 
   _mrb_nil_value49($agg_result);
   label = 44; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $74=$s;
   var $75=(($74+12)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=$s;
   var $78=(($77+20)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79+$76)|0);
   HEAP8[($80)]=0;
   var $81=$agg_result;
   var $82=$str;
   assert(12 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($82)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($82)+(8))>>2)];
   label = 44; break;
  case 15: 
   var $84=$len;
   var $85=(($84)|(0))==0;
   if ($85) { label = 18; break; } else { label = 16; break; }
  case 16: 
   var $87=(($rs+8)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=(($88)|(0))==0;
   if ($89) { label = 17; break; } else { label = 19; break; }
  case 17: 
   var $91=(($rs)|0);
   var $92=$91;
   var $93=HEAP32[(($92)>>2)];
   var $94=(($93)|(0))!=0;
   if ($94) { label = 19; break; } else { label = 18; break; }
  case 18: 
   _mrb_nil_value49($agg_result);
   label = 44; break;
  case 19: 
   var $97=$s;
   var $98=(($97+20)|0);
   var $99=HEAP32[(($98)>>2)];
   $p=$99;
   var $100=(($rs)|0);
   var $101=$100;
   var $102=HEAP32[(($101)>>2)];
   var $103=$102;
   var $104=(($103+12)|0);
   var $105=HEAP32[(($104)>>2)];
   $rslen=$105;
   var $106=$rslen;
   var $107=(($106)|(0))==0;
   if ($107) { label = 20; break; } else { label = 31; break; }
  case 20: 
   label = 21; break;
  case 21: 
   var $110=$len;
   var $111=(($110)|(0)) > 0;
   if ($111) { label = 22; break; } else { var $121 = 0;label = 23; break; }
  case 22: 
   var $113=$len;
   var $114=((($113)-(1))|0);
   var $115=$p;
   var $116=(($115+$114)|0);
   var $117=HEAP8[($116)];
   var $118=(($117 << 24) >> 24);
   var $119=(($118)|(0))==10;
   var $121 = $119;label = 23; break;
  case 23: 
   var $121;
   if ($121) { label = 24; break; } else { label = 28; break; }
  case 24: 
   var $123=$len;
   var $124=((($123)-(1))|0);
   $len=$124;
   var $125=$len;
   var $126=(($125)|(0)) > 0;
   if ($126) { label = 25; break; } else { label = 27; break; }
  case 25: 
   var $128=$len;
   var $129=((($128)-(1))|0);
   var $130=$p;
   var $131=(($130+$129)|0);
   var $132=HEAP8[($131)];
   var $133=(($132 << 24) >> 24);
   var $134=(($133)|(0))==13;
   if ($134) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $136=$len;
   var $137=((($136)-(1))|0);
   $len=$137;
   label = 27; break;
  case 27: 
   label = 21; break;
  case 28: 
   var $140=$len;
   var $141=$s;
   var $142=(($141+12)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=(($140)|(0)) < (($143)|(0));
   if ($144) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $146=$len;
   var $147=$s;
   var $148=(($147+12)|0);
   HEAP32[(($148)>>2)]=$146;
   var $149=$len;
   var $150=$p;
   var $151=(($150+$149)|0);
   HEAP8[($151)]=0;
   var $152=$agg_result;
   var $153=$str;
   assert(12 % 1 === 0);HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];HEAP32[((($152)+(4))>>2)]=HEAP32[((($153)+(4))>>2)];HEAP32[((($152)+(8))>>2)]=HEAP32[((($153)+(8))>>2)];
   label = 44; break;
  case 30: 
   _mrb_nil_value49($agg_result);
   label = 44; break;
  case 31: 
   var $156=$rslen;
   var $157=$len;
   var $158=(($156)|(0)) > (($157)|(0));
   if ($158) { label = 32; break; } else { label = 33; break; }
  case 32: 
   _mrb_nil_value49($agg_result);
   label = 44; break;
  case 33: 
   var $161=$rslen;
   var $162=((($161)-(1))|0);
   var $163=(($rs)|0);
   var $164=$163;
   var $165=HEAP32[(($164)>>2)];
   var $166=$165;
   var $167=(($166+20)|0);
   var $168=HEAP32[(($167)>>2)];
   var $169=(($168+$162)|0);
   var $170=HEAP8[($169)];
   var $171=(($170 << 24) >> 24);
   $newline=$171;
   var $172=$rslen;
   var $173=(($172)|(0))==1;
   if ($173) { label = 34; break; } else { label = 36; break; }
  case 34: 
   var $175=$newline;
   var $176=(($175)|(0))==10;
   if ($176) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $178=$rslen;
   var $179=((($178)-(1))|0);
   var $180=(($rs)|0);
   var $181=$180;
   var $182=HEAP32[(($181)>>2)];
   var $183=$182;
   var $184=(($183+20)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=(($185+$179)|0);
   var $187=HEAP8[($186)];
   var $188=(($187 << 24) >> 24);
   $newline=$188;
   label = 36; break;
  case 36: 
   var $190=$rslen;
   var $191=(($190)|(0))==1;
   if ($191) { label = 37; break; } else { label = 39; break; }
  case 37: 
   var $193=$newline;
   var $194=(($193)|(0))==10;
   if ($194) { label = 38; break; } else { label = 39; break; }
  case 38: 
   label = 5; break;
  case 39: 
   var $197=$p;
   var $198=$len;
   var $199=(($197+$198)|0);
   var $200=$rslen;
   var $201=(((-$200))|0);
   var $202=(($199+$201)|0);
   $pp=$202;
   var $203=$len;
   var $204=((($203)-(1))|0);
   var $205=$p;
   var $206=(($205+$204)|0);
   var $207=HEAP8[($206)];
   var $208=(($207 << 24) >> 24);
   var $209=$newline;
   var $210=(($208)|(0))==(($209)|(0));
   if ($210) { label = 40; break; } else { label = 43; break; }
  case 40: 
   var $212=$rslen;
   var $213=(($212)|(0)) <= 1;
   if ($213) { label = 42; break; } else { label = 41; break; }
  case 41: 
   var $215=(($rs)|0);
   var $216=$215;
   var $217=HEAP32[(($216)>>2)];
   var $218=$217;
   var $219=(($218+20)|0);
   var $220=HEAP32[(($219)>>2)];
   var $221=$pp;
   var $222=$rslen;
   var $223=_memcmp($220, $221, $222);
   var $224=(($223)|(0))==0;
   if ($224) { label = 42; break; } else { label = 43; break; }
  case 42: 
   var $226=$len;
   var $227=$rslen;
   var $228=((($226)-($227))|0);
   var $229=$s;
   var $230=(($229+12)|0);
   HEAP32[(($230)>>2)]=$228;
   var $231=$s;
   var $232=(($231+12)|0);
   var $233=HEAP32[(($232)>>2)];
   var $234=$p;
   var $235=(($234+$233)|0);
   HEAP8[($235)]=0;
   var $236=$agg_result;
   var $237=$str;
   assert(12 % 1 === 0);HEAP32[(($236)>>2)]=HEAP32[(($237)>>2)];HEAP32[((($236)+(4))>>2)]=HEAP32[((($237)+(4))>>2)];HEAP32[((($236)+(8))>>2)]=HEAP32[((($237)+(8))>>2)];
   label = 44; break;
  case 43: 
   _mrb_nil_value49($agg_result);
   label = 44; break;
  case 44: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_chop($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $str=sp;
 var $2=(sp)+(12);
 var $3=(sp)+(24);
 $1=$mrb;
 var $4=$1;
 _mrb_str_dup($2, $4, $self);
 var $5=$str;
 var $6=$2;
 assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 var $7=$1;
 _mrb_str_chop_bang($3, $7, $str);
 var $8=$agg_result;
 var $9=$str;
 assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_str_chop_bang($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $s;
   var $len;
   $1=$mrb;
   var $2=(($str)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $s=$5;
   var $6=$1;
   var $7=$s;
   _mrb_str_modify($6, $7);
   var $8=$s;
   var $9=(($8+12)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0)) > 0;
   if ($11) { label = 2; break; } else { label = 8; break; }
  case 2: 
   var $13=$s;
   var $14=(($13+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=((($15)-(1))|0);
   $len=$16;
   var $17=$len;
   var $18=$s;
   var $19=(($18+20)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+$17)|0);
   var $22=HEAP8[($21)];
   var $23=(($22 << 24) >> 24);
   var $24=(($23)|(0))==10;
   if ($24) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $26=$len;
   var $27=(($26)|(0)) > 0;
   if ($27) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $29=$len;
   var $30=((($29)-(1))|0);
   var $31=$s;
   var $32=(($31+20)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33+$30)|0);
   var $35=HEAP8[($34)];
   var $36=(($35 << 24) >> 24);
   var $37=(($36)|(0))==13;
   if ($37) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $39=$len;
   var $40=((($39)-(1))|0);
   $len=$40;
   label = 6; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $43=$len;
   var $44=$s;
   var $45=(($44+12)|0);
   HEAP32[(($45)>>2)]=$43;
   var $46=$len;
   var $47=$s;
   var $48=(($47+20)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+$46)|0);
   HEAP8[($50)]=0;
   var $51=$agg_result;
   var $52=$str;
   assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($52)+(8))>>2)];
   label = 9; break;
  case 8: 
   _mrb_nil_value49($agg_result);
   label = 9; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_downcase($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $str=sp;
 var $2=(sp)+(12);
 var $3=(sp)+(24);
 $1=$mrb;
 var $4=$1;
 _mrb_str_dup($2, $4, $self);
 var $5=$str;
 var $6=$2;
 assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 var $7=$1;
 _mrb_str_downcase_bang($3, $7, $str);
 var $8=$agg_result;
 var $9=$str;
 assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_str_downcase_bang($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $p;
   var $pend;
   var $modify;
   var $s;
   $1=$mrb;
   $modify=0;
   var $2=(($str)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $s=$5;
   var $6=$1;
   var $7=$s;
   _mrb_str_modify($6, $7);
   var $8=$s;
   var $9=(($8+20)|0);
   var $10=HEAP32[(($9)>>2)];
   $p=$10;
   var $11=$s;
   var $12=(($11+20)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$s;
   var $15=(($14+12)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($13+$16)|0);
   $pend=$17;
   label = 2; break;
  case 2: 
   var $19=$p;
   var $20=$pend;
   var $21=(($19)>>>(0)) < (($20)>>>(0));
   if ($21) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $23=$p;
   var $24=HEAP8[($23)];
   var $25=(($24)&(255));
   var $26=_isupper($25);
   var $27=(($26)|(0))!=0;
   if ($27) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $29=$p;
   var $30=HEAP8[($29)];
   var $31=(($30)&(255));
   var $32=_tolower($31);
   var $33=(($32) & 255);
   var $34=$p;
   HEAP8[($34)]=$33;
   $modify=1;
   label = 5; break;
  case 5: 
   var $36=$p;
   var $37=(($36+1)|0);
   $p=$37;
   label = 2; break;
  case 6: 
   var $39=$modify;
   var $40=(($39)|(0))!=0;
   if ($40) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $42=$agg_result;
   var $43=$str;
   assert(12 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];HEAP32[((($42)+(8))>>2)]=HEAP32[((($43)+(8))>>2)];
   label = 9; break;
  case 8: 
   _mrb_nil_value49($agg_result);
   label = 9; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_empty_p($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $s;
 $1=$mrb;
 var $2=(($self)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 $s=$5;
 var $6=$s;
 var $7=(($6+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8)|(0))==0;
 var $10=(($9)&(1));
 var $11=(($10) & 255);
 _mrb_bool_value($agg_result, $11);
 STACKTOP = sp;
 return;
}
function _mrb_str_eql($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $str2=sp;
   var $eql_p;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((89036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$str2,tempInt));
   var $4=(($str2+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))==16;
   if ($6) { label = 2; break; } else { var $13 = 0;label = 3; break; }
  case 2: 
   var $8=$1;
   var $9=_str_eql($8, $self, $str2);
   var $10=(($9)&(255));
   var $11=(($10)|(0))!=0;
   var $13 = $11;label = 3; break;
  case 3: 
   var $13;
   var $14=(($13)&(1));
   var $15=(($14) & 255);
   $eql_p=$15;
   var $16=$eql_p;
   _mrb_bool_value($agg_result, $16);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_hash_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $key;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_str_hash($2, $self);
 $key=$3;
 var $4=$key;
 _mrb_fixnum_value48($agg_result, $4);
 STACKTOP = sp;
 return;
}
function _mrb_str_include($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $i;
   var $str2=sp;
   var $include_p;
   var $2=(sp)+(12);
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_get_args($3, ((89036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$str2,tempInt));
   var $5=(($str2+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==3;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=(($self)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=$11;
   var $13=(($12+20)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($str2)|0);
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $18=(($self)|0);
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $21=$20;
   var $22=(($21+12)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=_memchr($14, $17, $23);
   var $25=(($24)|(0))!=0;
   var $26=(($25)&(1));
   var $27=(($26) & 255);
   $include_p=$27;
   label = 4; break;
  case 3: 
   var $29=$1;
   _mrb_str_to_str($2, $29, $str2);
   var $30=$str2;
   var $31=$2;
   assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
   var $32=$1;
   var $33=_mrb_str_index($32, $self, $str2, 0);
   $i=$33;
   var $34=$i;
   var $35=(($34)|(0))!=-1;
   var $36=(($35)&(1));
   var $37=(($36) & 255);
   $include_p=$37;
   label = 4; break;
  case 4: 
   var $39=$include_p;
   _mrb_bool_value($agg_result, $39);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_index_m($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $argv=sp;
   var $argc=(sp)+(4);
   var $sub=(sp)+(8);
   var $pos;
   var $2=(sp)+(20);
   var $c;
   var $len;
   var $p;
   var $tmp=(sp)+(32);
   var $3=(sp)+(44);
   $1=$mrb;
   var $4=$1;
   var $5=_mrb_get_args($4, ((100912)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
   var $6=HEAP32[(($argc)>>2)];
   var $7=(($6)|(0))==2;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=HEAP32[(($argv)>>2)];
   var $10=(($9+12)|0);
   var $11=(($10)|0);
   var $12=$11;
   var $13=HEAP32[(($12)>>2)];
   $pos=$13;
   var $14=HEAP32[(($argv)>>2)];
   var $15=(($14)|0);
   var $16=$sub;
   var $17=$15;
   assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
   label = 7; break;
  case 3: 
   $pos=0;
   var $19=HEAP32[(($argc)>>2)];
   var $20=(($19)|(0)) > 0;
   if ($20) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $22=HEAP32[(($argv)>>2)];
   var $23=(($22)|0);
   var $24=$sub;
   var $25=$23;
   assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
   label = 6; break;
  case 5: 
   _mrb_nil_value49($2);
   var $27=$sub;
   var $28=$2;
   assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
   label = 6; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $31=$1;
   _regexp_check($31, $sub);
   var $32=$pos;
   var $33=(($32)|(0)) < 0;
   if ($33) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $35=(($str)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=$37;
   var $39=(($38+12)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=$pos;
   var $42=((($41)+($40))|0);
   $pos=$42;
   var $43=$pos;
   var $44=(($43)|(0)) < 0;
   if ($44) { label = 9; break; } else { label = 10; break; }
  case 9: 
   _mrb_nil_value49($agg_result);
   label = 27; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $48=(($sub+8)|0);
   var $49=HEAP32[(($48)>>2)];
   if ((($49)|(0))==3) {
    label = 12; break;
   }
   else if ((($49)|(0))==16) {
    label = 23; break;
   }
   else {
   label = 19; break;
   }
  case 12: 
   var $51=(($sub)|0);
   var $52=$51;
   var $53=HEAP32[(($52)>>2)];
   $c=$53;
   var $54=(($str)|0);
   var $55=$54;
   var $56=HEAP32[(($55)>>2)];
   var $57=$56;
   var $58=(($57+12)|0);
   var $59=HEAP32[(($58)>>2)];
   $len=$59;
   var $60=(($str)|0);
   var $61=$60;
   var $62=HEAP32[(($61)>>2)];
   var $63=$62;
   var $64=(($63+20)|0);
   var $65=HEAP32[(($64)>>2)];
   $p=$65;
   label = 13; break;
  case 13: 
   var $67=$pos;
   var $68=$len;
   var $69=(($67)|(0)) < (($68)|(0));
   if ($69) { label = 14; break; } else { label = 18; break; }
  case 14: 
   var $71=$pos;
   var $72=$p;
   var $73=(($72+$71)|0);
   var $74=HEAP8[($73)];
   var $75=(($74)&(255));
   var $76=$c;
   var $77=(($75)|(0))==(($76)|(0));
   if ($77) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $79=$pos;
   _mrb_fixnum_value48($agg_result, $79);
   label = 27; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $82=$pos;
   var $83=((($82)+(1))|0);
   $pos=$83;
   label = 13; break;
  case 18: 
   _mrb_nil_value49($agg_result);
   label = 27; break;
  case 19: 
   var $86=$1;
   _mrb_check_string_type($3, $86, $sub);
   var $87=$tmp;
   var $88=$3;
   assert(12 % 1 === 0);HEAP32[(($87)>>2)]=HEAP32[(($88)>>2)];HEAP32[((($87)+(4))>>2)]=HEAP32[((($88)+(4))>>2)];HEAP32[((($87)+(8))>>2)]=HEAP32[((($88)+(8))>>2)];
   var $89=(($tmp+8)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90)|(0))==0;
   if ($91) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $93=(($tmp)|0);
   var $94=$93;
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95)|(0))!=0;
   if ($96) { label = 22; break; } else { label = 21; break; }
  case 21: 
   var $98=$1;
   var $99=$1;
   var $100=_mrb_class_get($99, ((99700)|0));
   _mrb_raisef($98, $100, ((89644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($sub)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($sub)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($sub)+(8))>>2)],tempInt));
   label = 22; break;
  case 22: 
   var $102=$sub;
   var $103=$tmp;
   assert(12 % 1 === 0);HEAP32[(($102)>>2)]=HEAP32[(($103)>>2)];HEAP32[((($102)+(4))>>2)]=HEAP32[((($103)+(4))>>2)];HEAP32[((($102)+(8))>>2)]=HEAP32[((($103)+(8))>>2)];
   label = 23; break;
  case 23: 
   var $105=$1;
   var $106=$pos;
   var $107=_mrb_str_index($105, $str, $sub, $106);
   $pos=$107;
   label = 24; break;
  case 24: 
   var $109=$pos;
   var $110=(($109)|(0))==-1;
   if ($110) { label = 25; break; } else { label = 26; break; }
  case 25: 
   _mrb_nil_value49($agg_result);
   label = 27; break;
  case 26: 
   var $113=$pos;
   _mrb_fixnum_value48($agg_result, $113);
   label = 27; break;
  case 27: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_init($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $str2=sp;
   var $2=(sp)+(12);
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_get_args($3, ((89112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$str2,tempInt));
   var $5=(($4)|(0))==1;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   var $8=(($self)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10;
   var $12=(($str2)|0);
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=$14;
   _str_replace($2, $7, $11, $15);
   label = 3; break;
  case 3: 
   var $17=$agg_result;
   var $18=$self;
   assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_replace($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $str2=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((89208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$str2,tempInt));
 var $4=$1;
 var $5=(($str)|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 var $9=(($str2)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=$11;
 _str_replace($agg_result, $4, $8, $12);
 STACKTOP = sp;
 return;
}
function _mrb_str_reverse($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $s2;
   var $s;
   var $e;
   var $p;
   $1=$mrb;
   var $2=(($str)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=(($5+12)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0)) <= 1;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$1;
   _mrb_str_dup($agg_result, $10, $str);
   label = 7; break;
  case 3: 
   var $12=$1;
   var $13=(($str)|0);
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15;
   var $17=(($16+12)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=_str_new($12, 0, $18);
   $s2=$19;
   var $20=$1;
   var $21=$s2;
   _str_with_class($20, $21, $str);
   var $22=(($str)|0);
   var $23=$22;
   var $24=HEAP32[(($23)>>2)];
   var $25=$24;
   var $26=(($25+20)|0);
   var $27=HEAP32[(($26)>>2)];
   $s=$27;
   var $28=(($str)|0);
   var $29=$28;
   var $30=HEAP32[(($29)>>2)];
   var $31=$30;
   var $32=(($31+20)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($str)|0);
   var $35=$34;
   var $36=HEAP32[(($35)>>2)];
   var $37=$36;
   var $38=(($37+12)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($33+$39)|0);
   var $41=((($40)-(1))|0);
   $e=$41;
   var $42=$s2;
   var $43=(($42+20)|0);
   var $44=HEAP32[(($43)>>2)];
   $p=$44;
   label = 4; break;
  case 4: 
   var $46=$e;
   var $47=$s;
   var $48=(($46)>>>(0)) >= (($47)>>>(0));
   if ($48) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $50=$e;
   var $51=((($50)-(1))|0);
   $e=$51;
   var $52=HEAP8[($50)];
   var $53=$p;
   var $54=(($53+1)|0);
   $p=$54;
   HEAP8[($53)]=$52;
   label = 4; break;
  case 6: 
   var $56=$s2;
   var $57=$56;
   _mrb_obj_value45($agg_result, $57);
   label = 7; break;
  case 7: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_reverse_bang($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $s;
   var $p;
   var $e;
   var $c;
   $1=$mrb;
   var $2=(($str)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $s=$5;
   var $6=$1;
   var $7=$s;
   _mrb_str_modify($6, $7);
   var $8=$s;
   var $9=(($8+12)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0)) > 1;
   if ($11) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $13=$s;
   var $14=(($13+20)|0);
   var $15=HEAP32[(($14)>>2)];
   $p=$15;
   var $16=$p;
   var $17=$s;
   var $18=(($17+12)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($16+$19)|0);
   var $21=((($20)-(1))|0);
   $e=$21;
   label = 3; break;
  case 3: 
   var $23=$p;
   var $24=$e;
   var $25=(($23)>>>(0)) < (($24)>>>(0));
   if ($25) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $27=$p;
   var $28=HEAP8[($27)];
   $c=$28;
   var $29=$e;
   var $30=HEAP8[($29)];
   var $31=$p;
   var $32=(($31+1)|0);
   $p=$32;
   HEAP8[($31)]=$30;
   var $33=$c;
   var $34=$e;
   var $35=((($34)-(1))|0);
   $e=$35;
   HEAP8[($34)]=$33;
   label = 3; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $38=$agg_result;
   var $39=$str;
   assert(12 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];HEAP32[((($38)+(8))>>2)]=HEAP32[((($39)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_rindex_m($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 68)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $argv=sp;
   var $argc=(sp)+(4);
   var $sub=(sp)+(8);
   var $vpos=(sp)+(20);
   var $pos;
   var $len;
   var $2=(sp)+(32);
   var $c;
   var $len1;
   var $p;
   var $tmp=(sp)+(44);
   var $3=(sp)+(56);
   $1=$mrb;
   var $4=(($str)|0);
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=$6;
   var $8=(($7+12)|0);
   var $9=HEAP32[(($8)>>2)];
   $len=$9;
   var $10=$1;
   var $11=_mrb_get_args($10, ((100912)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
   var $12=HEAP32[(($argc)>>2)];
   var $13=(($12)|(0))==2;
   if ($13) { label = 2; break; } else { label = 9; break; }
  case 2: 
   var $15=HEAP32[(($argv)>>2)];
   var $16=(($15)|0);
   var $17=$sub;
   var $18=$16;
   assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
   var $19=HEAP32[(($argv)>>2)];
   var $20=(($19+12)|0);
   var $21=$vpos;
   var $22=$20;
   assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
   var $23=(($vpos)|0);
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   $pos=$25;
   var $26=$pos;
   var $27=(($26)|(0)) < 0;
   if ($27) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $29=$len;
   var $30=$pos;
   var $31=((($30)+($29))|0);
   $pos=$31;
   var $32=$pos;
   var $33=(($32)|(0)) < 0;
   if ($33) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $35=$1;
   _regexp_check($35, $sub);
   _mrb_nil_value49($agg_result);
   label = 29; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $38=$pos;
   var $39=$len;
   var $40=(($38)|(0)) > (($39)|(0));
   if ($40) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $42=$len;
   $pos=$42;
   label = 8; break;
  case 8: 
   label = 13; break;
  case 9: 
   var $45=$len;
   $pos=$45;
   var $46=HEAP32[(($argc)>>2)];
   var $47=(($46)|(0)) > 0;
   if ($47) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $49=HEAP32[(($argv)>>2)];
   var $50=(($49)|0);
   var $51=$sub;
   var $52=$50;
   assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($52)+(8))>>2)];
   label = 12; break;
  case 11: 
   _mrb_nil_value49($2);
   var $54=$sub;
   var $55=$2;
   assert(12 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($55)+(4))>>2)];HEAP32[((($54)+(8))>>2)]=HEAP32[((($55)+(8))>>2)];
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $58=$1;
   _regexp_check($58, $sub);
   var $59=(($sub+8)|0);
   var $60=HEAP32[(($59)>>2)];
   if ((($60)|(0))==3) {
    label = 14; break;
   }
   else if ((($60)|(0))==16) {
    label = 25; break;
   }
   else {
   label = 21; break;
   }
  case 14: 
   var $62=(($sub)|0);
   var $63=$62;
   var $64=HEAP32[(($63)>>2)];
   $c=$64;
   var $65=(($str)|0);
   var $66=$65;
   var $67=HEAP32[(($66)>>2)];
   var $68=$67;
   var $69=(($68+12)|0);
   var $70=HEAP32[(($69)>>2)];
   $len1=$70;
   var $71=(($str)|0);
   var $72=$71;
   var $73=HEAP32[(($72)>>2)];
   var $74=$73;
   var $75=(($74+20)|0);
   var $76=HEAP32[(($75)>>2)];
   $p=$76;
   var $77=$len1;
   $pos=$77;
   label = 15; break;
  case 15: 
   var $79=$pos;
   var $80=(($79)|(0)) >= 0;
   if ($80) { label = 16; break; } else { label = 20; break; }
  case 16: 
   var $82=$pos;
   var $83=$p;
   var $84=(($83+$82)|0);
   var $85=HEAP8[($84)];
   var $86=(($85)&(255));
   var $87=$c;
   var $88=(($86)|(0))==(($87)|(0));
   if ($88) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $90=$pos;
   _mrb_fixnum_value48($agg_result, $90);
   label = 29; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $93=$pos;
   var $94=((($93)-(1))|0);
   $pos=$94;
   label = 15; break;
  case 20: 
   _mrb_nil_value49($agg_result);
   label = 29; break;
  case 21: 
   var $97=$1;
   _mrb_check_string_type($3, $97, $sub);
   var $98=$tmp;
   var $99=$3;
   assert(12 % 1 === 0);HEAP32[(($98)>>2)]=HEAP32[(($99)>>2)];HEAP32[((($98)+(4))>>2)]=HEAP32[((($99)+(4))>>2)];HEAP32[((($98)+(8))>>2)]=HEAP32[((($99)+(8))>>2)];
   var $100=(($tmp+8)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101)|(0))==0;
   if ($102) { label = 22; break; } else { label = 24; break; }
  case 22: 
   var $104=(($tmp)|0);
   var $105=$104;
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106)|(0))!=0;
   if ($107) { label = 24; break; } else { label = 23; break; }
  case 23: 
   var $109=$1;
   var $110=$1;
   var $111=_mrb_class_get($110, ((99700)|0));
   _mrb_raisef($109, $111, ((89644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($sub)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($sub)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($sub)+(8))>>2)],tempInt));
   label = 24; break;
  case 24: 
   var $113=$sub;
   var $114=$tmp;
   assert(12 % 1 === 0);HEAP32[(($113)>>2)]=HEAP32[(($114)>>2)];HEAP32[((($113)+(4))>>2)]=HEAP32[((($114)+(4))>>2)];HEAP32[((($113)+(8))>>2)]=HEAP32[((($114)+(8))>>2)];
   label = 25; break;
  case 25: 
   var $116=$1;
   var $117=$pos;
   var $118=_mrb_str_rindex($116, $str, $sub, $117);
   $pos=$118;
   var $119=$pos;
   var $120=(($119)|(0)) >= 0;
   if ($120) { label = 26; break; } else { label = 27; break; }
  case 26: 
   var $122=$pos;
   _mrb_fixnum_value48($agg_result, $122);
   label = 29; break;
  case 27: 
   label = 28; break;
  case 28: 
   _mrb_nil_value49($agg_result);
   label = 29; break;
  case 29: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_split_m($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 148)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $argc;
   var $spat=sp;
   var $split_type;
   var $i;
   var $lim_p;
   var $beg;
   var $end;
   var $lim=(sp)+(12);
   var $result=(sp)+(16);
   var $tmp=(sp)+(28);
   var $2=(sp)+(40);
   var $3=(sp)+(52);
   var $ptr;
   var $eptr;
   var $bptr;
   var $skip;
   var $c;
   var $ai;
   var $4=(sp)+(64);
   var $ptr1;
   var $temp;
   var $eptr2;
   var $slen;
   var $ai3;
   var $5=(sp)+(76);
   var $sptr;
   var $ai4;
   var $6=(sp)+(88);
   var $7=(sp)+(100);
   var $8=(sp)+(112);
   var $9=(sp)+(124);
   var $len;
   var $10=(sp)+(136);
   $1=$mrb;
   _mrb_nil_value49($spat);
   $split_type=1;
   $i=0;
   HEAP32[(($lim)>>2)]=0;
   var $11=$1;
   var $12=_mrb_get_args($11, ((89776)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$spat,HEAP32[(((tempInt)+(4))>>2)]=$lim,tempInt));
   $argc=$12;
   var $13=HEAP32[(($lim)>>2)];
   var $14=(($13)|(0)) > 0;
   if ($14) { label = 2; break; } else { var $19 = 0;label = 3; break; }
  case 2: 
   var $16=$argc;
   var $17=(($16)|(0))==2;
   var $19 = $17;label = 3; break;
  case 3: 
   var $19;
   var $20=(($19)&(1));
   $lim_p=$20;
   var $21=$argc;
   var $22=(($21)|(0))==2;
   if ($22) { label = 4; break; } else { label = 9; break; }
  case 4: 
   var $24=HEAP32[(($lim)>>2)];
   var $25=(($24)|(0))==1;
   if ($25) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $27=(($str)|0);
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $30=$29;
   var $31=(($30+12)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)|(0))==0;
   if ($33) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $35=$1;
   _mrb_ary_new_capa($agg_result, $35, 0);
   label = 77; break;
  case 7: 
   var $37=$1;
   _mrb_ary_new_from_values($agg_result, $37, 1, $str);
   label = 77; break;
  case 8: 
   $i=1;
   label = 9; break;
  case 9: 
   var $40=$argc;
   var $41=(($40)|(0))==0;
   if ($41) { label = 12; break; } else { label = 10; break; }
  case 10: 
   var $43=(($spat+8)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=(($44)|(0))==0;
   if ($45) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $47=(($spat)|0);
   var $48=$47;
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49)|(0))!=0;
   if ($50) { label = 13; break; } else { label = 12; break; }
  case 12: 
   $split_type=0;
   label = 20; break;
  case 13: 
   var $53=(($spat+8)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($54)|(0))==16;
   if ($55) { label = 14; break; } else { label = 18; break; }
  case 14: 
   $split_type=1;
   var $57=(($spat)|0);
   var $58=$57;
   var $59=HEAP32[(($58)>>2)];
   var $60=$59;
   var $61=(($60+12)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62)|(0))==1;
   if ($63) { label = 15; break; } else { label = 17; break; }
  case 15: 
   var $65=(($spat)|0);
   var $66=$65;
   var $67=HEAP32[(($66)>>2)];
   var $68=$67;
   var $69=(($68+20)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70)|0);
   var $72=HEAP8[($71)];
   var $73=(($72 << 24) >> 24);
   var $74=(($73)|(0))==32;
   if ($74) { label = 16; break; } else { label = 17; break; }
  case 16: 
   $split_type=0;
   label = 17; break;
  case 17: 
   label = 19; break;
  case 18: 
   var $78=$1;
   _noregexp($2, $78, $str);
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $81=$1;
   _mrb_ary_new($3, $81);
   var $82=$result;
   var $83=$3;
   assert(12 % 1 === 0);HEAP32[(($82)>>2)]=HEAP32[(($83)>>2)];HEAP32[((($82)+(4))>>2)]=HEAP32[((($83)+(4))>>2)];HEAP32[((($82)+(8))>>2)]=HEAP32[((($83)+(8))>>2)];
   $beg=0;
   var $84=$split_type;
   var $85=(($84)|(0))==0;
   if ($85) { label = 21; break; } else { label = 39; break; }
  case 21: 
   var $87=(($str)|0);
   var $88=$87;
   var $89=HEAP32[(($88)>>2)];
   var $90=$89;
   var $91=(($90+20)|0);
   var $92=HEAP32[(($91)>>2)];
   $ptr=$92;
   var $93=(($str)|0);
   var $94=$93;
   var $95=HEAP32[(($94)>>2)];
   var $96=$95;
   var $97=(($96+20)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=(($str)|0);
   var $100=$99;
   var $101=HEAP32[(($100)>>2)];
   var $102=$101;
   var $103=(($102+12)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($98+$104)|0);
   $eptr=$105;
   var $106=$ptr;
   $bptr=$106;
   $skip=1;
   var $107=$beg;
   $end=$107;
   label = 22; break;
  case 22: 
   var $109=$ptr;
   var $110=$eptr;
   var $111=(($109)>>>(0)) < (($110)>>>(0));
   if ($111) { label = 23; break; } else { label = 38; break; }
  case 23: 
   var $113=$1;
   var $114=_mrb_gc_arena_save($113);
   $ai=$114;
   var $115=$ptr;
   var $116=(($115+1)|0);
   $ptr=$116;
   var $117=HEAP8[($115)];
   var $118=(($117)&(255));
   $c=$118;
   var $119=$skip;
   var $120=(($119)|(0))!=0;
   if ($120) { label = 24; break; } else { label = 31; break; }
  case 24: 
   var $122=$c;
   var $123=(($122) & 255);
   var $124=(($123)&(255));
   var $125=((75224+$124)|0);
   var $126=HEAP8[($125)];
   var $127=(($126 << 24) >> 24)!=0;
   if ($127) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $129=$ptr;
   var $130=$bptr;
   var $131=$129;
   var $132=$130;
   var $133=((($131)-($132))|0);
   $beg=$133;
   label = 30; break;
  case 26: 
   var $135=$ptr;
   var $136=$bptr;
   var $137=$135;
   var $138=$136;
   var $139=((($137)-($138))|0);
   $end=$139;
   $skip=0;
   var $140=$lim_p;
   var $141=(($140)|(0))!=0;
   if ($141) { label = 27; break; } else { label = 29; break; }
  case 27: 
   var $143=HEAP32[(($lim)>>2)];
   var $144=$i;
   var $145=(($143)|(0)) <= (($144)|(0));
   if ($145) { label = 28; break; } else { label = 29; break; }
  case 28: 
   label = 38; break;
  case 29: 
   label = 30; break;
  case 30: 
   label = 37; break;
  case 31: 
   var $150=$c;
   var $151=(($150) & 255);
   var $152=(($151)&(255));
   var $153=((75224+$152)|0);
   var $154=HEAP8[($153)];
   var $155=(($154 << 24) >> 24)!=0;
   if ($155) { label = 32; break; } else { label = 35; break; }
  case 32: 
   var $157=$1;
   var $158=$1;
   var $159=$beg;
   var $160=$end;
   var $161=$beg;
   var $162=((($160)-($161))|0);
   _mrb_str_subseq($4, $158, $str, $159, $162);
   _mrb_ary_push($157, $result, $4);
   var $163=$1;
   var $164=$ai;
   _mrb_gc_arena_restore($163, $164);
   $skip=1;
   var $165=$ptr;
   var $166=$bptr;
   var $167=$165;
   var $168=$166;
   var $169=((($167)-($168))|0);
   $beg=$169;
   var $170=$lim_p;
   var $171=(($170)|(0))!=0;
   if ($171) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $173=$i;
   var $174=((($173)+(1))|0);
   $i=$174;
   label = 34; break;
  case 34: 
   label = 36; break;
  case 35: 
   var $177=$ptr;
   var $178=$bptr;
   var $179=$177;
   var $180=$178;
   var $181=((($179)-($180))|0);
   $end=$181;
   label = 36; break;
  case 36: 
   label = 37; break;
  case 37: 
   label = 22; break;
  case 38: 
   label = 60; break;
  case 39: 
   var $186=$split_type;
   var $187=(($186)|(0))==1;
   if ($187) { label = 40; break; } else { label = 58; break; }
  case 40: 
   var $189=(($str)|0);
   var $190=$189;
   var $191=HEAP32[(($190)>>2)];
   var $192=$191;
   var $193=(($192+20)|0);
   var $194=HEAP32[(($193)>>2)];
   $ptr1=$194;
   var $195=$ptr1;
   $temp=$195;
   var $196=(($str)|0);
   var $197=$196;
   var $198=HEAP32[(($197)>>2)];
   var $199=$198;
   var $200=(($199+20)|0);
   var $201=HEAP32[(($200)>>2)];
   var $202=(($str)|0);
   var $203=$202;
   var $204=HEAP32[(($203)>>2)];
   var $205=$204;
   var $206=(($205+12)|0);
   var $207=HEAP32[(($206)>>2)];
   var $208=(($201+$207)|0);
   $eptr2=$208;
   var $209=(($spat)|0);
   var $210=$209;
   var $211=HEAP32[(($210)>>2)];
   var $212=$211;
   var $213=(($212+12)|0);
   var $214=HEAP32[(($213)>>2)];
   $slen=$214;
   var $215=$slen;
   var $216=(($215)|(0))==0;
   if ($216) { label = 41; break; } else { label = 48; break; }
  case 41: 
   var $218=$1;
   var $219=_mrb_gc_arena_save($218);
   $ai3=$219;
   label = 42; break;
  case 42: 
   var $221=$ptr1;
   var $222=$eptr2;
   var $223=(($221)>>>(0)) < (($222)>>>(0));
   if ($223) { label = 43; break; } else { label = 47; break; }
  case 43: 
   var $225=$1;
   var $226=$1;
   var $227=$ptr1;
   var $228=$temp;
   var $229=$227;
   var $230=$228;
   var $231=((($229)-($230))|0);
   _mrb_str_subseq($5, $226, $str, $231, 1);
   _mrb_ary_push($225, $result, $5);
   var $232=$1;
   var $233=$ai3;
   _mrb_gc_arena_restore($232, $233);
   var $234=$ptr1;
   var $235=(($234+1)|0);
   $ptr1=$235;
   var $236=$lim_p;
   var $237=(($236)|(0))!=0;
   if ($237) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $239=HEAP32[(($lim)>>2)];
   var $240=$i;
   var $241=((($240)+(1))|0);
   $i=$241;
   var $242=(($239)|(0)) <= (($241)|(0));
   if ($242) { label = 45; break; } else { label = 46; break; }
  case 45: 
   label = 47; break;
  case 46: 
   label = 42; break;
  case 47: 
   label = 57; break;
  case 48: 
   var $247=(($spat)|0);
   var $248=$247;
   var $249=HEAP32[(($248)>>2)];
   var $250=$249;
   var $251=(($250+20)|0);
   var $252=HEAP32[(($251)>>2)];
   $sptr=$252;
   var $253=$1;
   var $254=_mrb_gc_arena_save($253);
   $ai4=$254;
   label = 49; break;
  case 49: 
   var $256=$ptr1;
   var $257=$eptr2;
   var $258=(($256)>>>(0)) < (($257)>>>(0));
   if ($258) { label = 50; break; } else { var $271 = 0;label = 51; break; }
  case 50: 
   var $260=$sptr;
   var $261=$slen;
   var $262=$ptr1;
   var $263=$eptr2;
   var $264=$ptr1;
   var $265=$263;
   var $266=$264;
   var $267=((($265)-($266))|0);
   var $268=_mrb_memsearch($260, $261, $262, $267);
   $end=$268;
   var $269=(($268)|(0)) >= 0;
   var $271 = $269;label = 51; break;
  case 51: 
   var $271;
   if ($271) { label = 52; break; } else { label = 56; break; }
  case 52: 
   var $273=$1;
   var $274=$1;
   var $275=$ptr1;
   var $276=$temp;
   var $277=$275;
   var $278=$276;
   var $279=((($277)-($278))|0);
   var $280=$end;
   _mrb_str_subseq($6, $274, $str, $279, $280);
   _mrb_ary_push($273, $result, $6);
   var $281=$1;
   var $282=$ai4;
   _mrb_gc_arena_restore($281, $282);
   var $283=$end;
   var $284=$slen;
   var $285=((($283)+($284))|0);
   var $286=$ptr1;
   var $287=(($286+$285)|0);
   $ptr1=$287;
   var $288=$lim_p;
   var $289=(($288)|(0))!=0;
   if ($289) { label = 53; break; } else { label = 55; break; }
  case 53: 
   var $291=HEAP32[(($lim)>>2)];
   var $292=$i;
   var $293=((($292)+(1))|0);
   $i=$293;
   var $294=(($291)|(0)) <= (($293)|(0));
   if ($294) { label = 54; break; } else { label = 55; break; }
  case 54: 
   label = 56; break;
  case 55: 
   label = 49; break;
  case 56: 
   label = 57; break;
  case 57: 
   var $299=$ptr1;
   var $300=$temp;
   var $301=$299;
   var $302=$300;
   var $303=((($301)-($302))|0);
   $beg=$303;
   label = 59; break;
  case 58: 
   var $305=$1;
   _noregexp($7, $305, $str);
   label = 59; break;
  case 59: 
   label = 60; break;
  case 60: 
   var $308=(($str)|0);
   var $309=$308;
   var $310=HEAP32[(($309)>>2)];
   var $311=$310;
   var $312=(($311+12)|0);
   var $313=HEAP32[(($312)>>2)];
   var $314=(($313)|(0)) > 0;
   if ($314) { label = 61; break; } else { label = 68; break; }
  case 61: 
   var $316=$lim_p;
   var $317=(($316)|(0))!=0;
   if ($317) { label = 64; break; } else { label = 62; break; }
  case 62: 
   var $319=(($str)|0);
   var $320=$319;
   var $321=HEAP32[(($320)>>2)];
   var $322=$321;
   var $323=(($322+12)|0);
   var $324=HEAP32[(($323)>>2)];
   var $325=$beg;
   var $326=(($324)|(0)) > (($325)|(0));
   if ($326) { label = 64; break; } else { label = 63; break; }
  case 63: 
   var $328=HEAP32[(($lim)>>2)];
   var $329=(($328)|(0)) < 0;
   if ($329) { label = 64; break; } else { label = 68; break; }
  case 64: 
   var $331=(($str)|0);
   var $332=$331;
   var $333=HEAP32[(($332)>>2)];
   var $334=$333;
   var $335=(($334+12)|0);
   var $336=HEAP32[(($335)>>2)];
   var $337=$beg;
   var $338=(($336)|(0))==(($337)|(0));
   if ($338) { label = 65; break; } else { label = 66; break; }
  case 65: 
   var $340=$1;
   _mrb_str_new_empty($8, $340, $str);
   var $341=$tmp;
   var $342=$8;
   assert(12 % 1 === 0);HEAP32[(($341)>>2)]=HEAP32[(($342)>>2)];HEAP32[((($341)+(4))>>2)]=HEAP32[((($342)+(4))>>2)];HEAP32[((($341)+(8))>>2)]=HEAP32[((($342)+(8))>>2)];
   label = 67; break;
  case 66: 
   var $344=$1;
   var $345=$beg;
   var $346=(($str)|0);
   var $347=$346;
   var $348=HEAP32[(($347)>>2)];
   var $349=$348;
   var $350=(($349+12)|0);
   var $351=HEAP32[(($350)>>2)];
   var $352=$beg;
   var $353=((($351)-($352))|0);
   _mrb_str_subseq($9, $344, $str, $345, $353);
   var $354=$tmp;
   var $355=$9;
   assert(12 % 1 === 0);HEAP32[(($354)>>2)]=HEAP32[(($355)>>2)];HEAP32[((($354)+(4))>>2)]=HEAP32[((($355)+(4))>>2)];HEAP32[((($354)+(8))>>2)]=HEAP32[((($355)+(8))>>2)];
   label = 67; break;
  case 67: 
   var $357=$1;
   _mrb_ary_push($357, $result, $tmp);
   label = 68; break;
  case 68: 
   var $359=$lim_p;
   var $360=(($359)|(0))!=0;
   if ($360) { label = 76; break; } else { label = 69; break; }
  case 69: 
   var $362=HEAP32[(($lim)>>2)];
   var $363=(($362)|(0))==0;
   if ($363) { label = 70; break; } else { label = 76; break; }
  case 70: 
   label = 71; break;
  case 71: 
   var $366=(($result)|0);
   var $367=$366;
   var $368=HEAP32[(($367)>>2)];
   var $369=$368;
   var $370=(($369+12)|0);
   var $371=HEAP32[(($370)>>2)];
   $len=$371;
   var $372=(($371)|(0)) > 0;
   if ($372) { label = 72; break; } else { var $393 = 0;label = 73; break; }
  case 72: 
   var $374=$len;
   var $375=((($374)-(1))|0);
   var $376=(($result)|0);
   var $377=$376;
   var $378=HEAP32[(($377)>>2)];
   var $379=$378;
   var $380=(($379+20)|0);
   var $381=HEAP32[(($380)>>2)];
   var $382=(($381+((($375)*(12))&-1))|0);
   var $383=$tmp;
   var $384=$382;
   assert(12 % 1 === 0);HEAP32[(($383)>>2)]=HEAP32[(($384)>>2)];HEAP32[((($383)+(4))>>2)]=HEAP32[((($384)+(4))>>2)];HEAP32[((($383)+(8))>>2)]=HEAP32[((($384)+(8))>>2)];
   var $385=(($tmp)|0);
   var $386=$385;
   var $387=HEAP32[(($386)>>2)];
   var $388=$387;
   var $389=(($388+12)|0);
   var $390=HEAP32[(($389)>>2)];
   var $391=(($390)|(0))==0;
   var $393 = $391;label = 73; break;
  case 73: 
   var $393;
   if ($393) { label = 74; break; } else { label = 75; break; }
  case 74: 
   var $395=$1;
   _mrb_ary_pop($10, $395, $result);
   label = 71; break;
  case 75: 
   label = 76; break;
  case 76: 
   var $398=$agg_result;
   var $399=$result;
   assert(12 % 1 === 0);HEAP32[(($398)>>2)]=HEAP32[(($399)>>2)];HEAP32[((($398)+(4))>>2)]=HEAP32[((($399)+(4))>>2)];HEAP32[((($398)+(8))>>2)]=HEAP32[((($399)+(8))>>2)];
   label = 77; break;
  case 77: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_to_i($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $argv=sp;
   var $argc=(sp)+(4);
   var $base;
   var $2=(sp)+(8);
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_get_args($3, ((100912)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
   var $5=HEAP32[(($argc)>>2)];
   var $6=(($5)|(0))==0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $base=10;
   label = 4; break;
  case 3: 
   var $9=HEAP32[(($argv)>>2)];
   var $10=(($9)|0);
   var $11=(($10)|0);
   var $12=$11;
   var $13=HEAP32[(($12)>>2)];
   $base=$13;
   label = 4; break;
  case 4: 
   var $15=$base;
   var $16=(($15)|(0)) < 0;
   if ($16) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $18=$1;
   var $19=$1;
   var $20=_mrb_class_get($19, ((96948)|0));
   var $21=$base;
   _mrb_fixnum_value48($2, $21);
   _mrb_raisef($18, $20, ((87096)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($2)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($2)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($2)+(8))>>2)],tempInt));
   label = 6; break;
  case 6: 
   var $23=$1;
   var $24=$base;
   _mrb_str_to_inum($agg_result, $23, $self, $24, 0);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_to_f($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=_mrb_str_to_dbl($3, $self, 0);
 _mrb_float_value54($agg_result, $2, $4);
 STACKTOP = sp;
 return;
}
function _mrb_str_to_s($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_obj_class($2, $self);
   var $4=$1;
   var $5=(($4+60)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($3)|(0))!=(($6)|(0));
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$1;
   _mrb_str_dup($agg_result, $9, $self);
   label = 4; break;
  case 3: 
   var $11=$agg_result;
   var $12=$self;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_upcase($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $str=sp;
 var $2=(sp)+(12);
 var $3=(sp)+(24);
 $1=$mrb;
 var $4=$1;
 _mrb_str_dup($2, $4, $self);
 var $5=$str;
 var $6=$2;
 assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 var $7=$1;
 _mrb_str_upcase_bang($3, $7, $str);
 var $8=$agg_result;
 var $9=$str;
 assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_str_upcase_bang($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $s;
   var $p;
   var $pend;
   var $modify;
   $1=$mrb;
   var $2=(($str)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $s=$5;
   $modify=0;
   var $6=$1;
   var $7=$s;
   _mrb_str_modify($6, $7);
   var $8=(($str)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10;
   var $12=(($11+20)|0);
   var $13=HEAP32[(($12)>>2)];
   $p=$13;
   var $14=(($str)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=$16;
   var $18=(($17+20)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($str)|0);
   var $21=$20;
   var $22=HEAP32[(($21)>>2)];
   var $23=$22;
   var $24=(($23+12)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($19+$25)|0);
   $pend=$26;
   label = 2; break;
  case 2: 
   var $28=$p;
   var $29=$pend;
   var $30=(($28)>>>(0)) < (($29)>>>(0));
   if ($30) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $32=$p;
   var $33=HEAP8[($32)];
   var $34=(($33)&(255));
   var $35=_islower($34);
   var $36=(($35)|(0))!=0;
   if ($36) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $38=$p;
   var $39=HEAP8[($38)];
   var $40=(($39)&(255));
   var $41=_toupper($40);
   var $42=(($41) & 255);
   var $43=$p;
   HEAP8[($43)]=$42;
   $modify=1;
   label = 5; break;
  case 5: 
   var $45=$p;
   var $46=(($45+1)|0);
   $p=$46;
   label = 2; break;
  case 6: 
   var $48=$modify;
   var $49=(($48)|(0))!=0;
   if ($49) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $51=$agg_result;
   var $52=$str;
   assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($52)+(8))>>2)];
   label = 9; break;
  case 8: 
   _mrb_nil_value49($agg_result);
   label = 9; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_bytes($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $s;
   var $a=sp;
   var $p;
   var $pend;
   var $2=(sp)+(12);
   $1=$mrb;
   var $3=(($str)|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5;
   $s=$6;
   var $7=$1;
   var $8=$s;
   var $9=(($8+12)|0);
   var $10=HEAP32[(($9)>>2)];
   _mrb_ary_new_capa($a, $7, $10);
   var $11=$s;
   var $12=(($11+20)|0);
   var $13=HEAP32[(($12)>>2)];
   $p=$13;
   var $14=$p;
   var $15=$s;
   var $16=(($15+12)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($14+$17)|0);
   $pend=$18;
   label = 2; break;
  case 2: 
   var $20=$p;
   var $21=$pend;
   var $22=(($20)>>>(0)) < (($21)>>>(0));
   if ($22) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $24=$1;
   var $25=$p;
   var $26=(($25)|0);
   var $27=HEAP8[($26)];
   var $28=(($27)&(255));
   _mrb_fixnum_value48($2, $28);
   _mrb_ary_push($24, $a, $2);
   var $29=$p;
   var $30=(($29+1)|0);
   $p=$30;
   label = 2; break;
  case 4: 
   var $32=$agg_result;
   var $33=$a;
   assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_float_value54($agg_result, $mrb, $f) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $v=sp;
   $1=$mrb;
   $2=$f;
   label = 2; break;
  case 2: 
   var $4=(($v+8)|0);
   HEAP32[(($4)>>2)]=6;
   var $5=$2;
   var $6=(($v)|0);
   var $7=$6;
   (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($7)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($7)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 3; break;
  case 3: 
   var $9=$agg_result;
   var $10=$v;
   assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_memsearch($x0, $m, $y0, $n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $x;
   var $y;
   var $ys;
   var $ye;
   $2=$x0;
   $3=$m;
   $4=$y0;
   $5=$n;
   var $6=$2;
   $x=$6;
   var $7=$4;
   $y=$7;
   var $8=$3;
   var $9=$5;
   var $10=(($8)|(0)) > (($9)|(0));
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=-1;
   label = 19; break;
  case 3: 
   var $13=$3;
   var $14=$5;
   var $15=(($13)|(0))==(($14)|(0));
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $17=$2;
   var $18=$4;
   var $19=$3;
   var $20=_memcmp($17, $18, $19);
   var $21=(($20)|(0))==0;
   var $22=$21 ? 0 : -1;
   $1=$22;
   label = 19; break;
  case 5: 
   var $24=$3;
   var $25=(($24)|(0)) < 1;
   if ($25) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $1=0;
   label = 19; break;
  case 7: 
   var $28=$3;
   var $29=(($28)|(0))==1;
   if ($29) { label = 8; break; } else { label = 15; break; }
  case 8: 
   var $31=$y;
   $ys=$31;
   var $32=$ys;
   var $33=$5;
   var $34=(($32+$33)|0);
   $ye=$34;
   label = 9; break;
  case 9: 
   var $36=$y;
   var $37=$ye;
   var $38=(($36)>>>(0)) < (($37)>>>(0));
   if ($38) { label = 10; break; } else { label = 14; break; }
  case 10: 
   var $40=$x;
   var $41=HEAP8[($40)];
   var $42=(($41)&(255));
   var $43=$y;
   var $44=HEAP8[($43)];
   var $45=(($44)&(255));
   var $46=(($42)|(0))==(($45)|(0));
   if ($46) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $48=$y;
   var $49=$ys;
   var $50=$48;
   var $51=$49;
   var $52=((($50)-($51))|0);
   $1=$52;
   label = 19; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $55=$y;
   var $56=(($55+1)|0);
   $y=$56;
   label = 9; break;
  case 14: 
   $1=-1;
   label = 19; break;
  case 15: 
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $62=$2;
   var $63=$3;
   var $64=$4;
   var $65=$5;
   var $66=_mrb_memsearch_qs($62, $63, $64, $65);
   $1=$66;
   label = 19; break;
  case 19: 
   var $68=$1;
   return $68;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_new_empty($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $s;
 $1=$mrb;
 var $2=$1;
 var $3=_str_new($2, 0, 0);
 $s=$3;
 var $4=$1;
 var $5=$s;
 _str_with_class($4, $5, $str);
 var $6=$s;
 var $7=$6;
 _mrb_obj_value45($agg_result, $7);
 STACKTOP = sp;
 return;
}
function _mrb_memsearch_qs($xs, $m, $ys, $n) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 1024)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $x;
   var $xe;
   var $y;
   var $i;
   var $qstable=sp;
   $2=$xs;
   $3=$m;
   $4=$ys;
   $5=$n;
   var $6=$2;
   $x=$6;
   var $7=$2;
   var $8=$3;
   var $9=(($7+$8)|0);
   $xe=$9;
   var $10=$4;
   $y=$10;
   $i=0;
   label = 2; break;
  case 2: 
   var $12=$i;
   var $13=(($12)|(0)) < 256;
   if ($13) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $15=$3;
   var $16=((($15)+(1))|0);
   var $17=$i;
   var $18=(($qstable+($17<<2))|0);
   HEAP32[(($18)>>2)]=$16;
   label = 4; break;
  case 4: 
   var $20=$i;
   var $21=((($20)+(1))|0);
   $i=$21;
   label = 2; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $24=$x;
   var $25=$xe;
   var $26=(($24)>>>(0)) < (($25)>>>(0));
   if ($26) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $28=$xe;
   var $29=$x;
   var $30=$28;
   var $31=$29;
   var $32=((($30)-($31))|0);
   var $33=$x;
   var $34=HEAP8[($33)];
   var $35=(($34)&(255));
   var $36=(($qstable+($35<<2))|0);
   HEAP32[(($36)>>2)]=$32;
   label = 8; break;
  case 8: 
   var $38=$x;
   var $39=(($38+1)|0);
   $x=$39;
   label = 6; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $42=$y;
   var $43=$3;
   var $44=(($42+$43)|0);
   var $45=$4;
   var $46=$5;
   var $47=(($45+$46)|0);
   var $48=(($44)>>>(0)) <= (($47)>>>(0));
   if ($48) { label = 11; break; } else { label = 16; break; }
  case 11: 
   var $50=$2;
   var $51=HEAP8[($50)];
   var $52=(($51)&(255));
   var $53=$y;
   var $54=HEAP8[($53)];
   var $55=(($54)&(255));
   var $56=(($52)|(0))==(($55)|(0));
   if ($56) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $58=$2;
   var $59=$y;
   var $60=$3;
   var $61=_memcmp($58, $59, $60);
   var $62=(($61)|(0))==0;
   if ($62) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $64=$y;
   var $65=$4;
   var $66=$64;
   var $67=$65;
   var $68=((($66)-($67))|0);
   $1=$68;
   label = 17; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $71=(($qstable)|0);
   var $72=$3;
   var $73=$y;
   var $74=(($73+$72)|0);
   var $75=HEAP8[($74)];
   var $76=(($75)&(255));
   var $77=(($71+($76<<2))|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=$y;
   var $80=(($79+$78)|0);
   $y=$80;
   label = 10; break;
  case 16: 
   $1=-1;
   label = 17; break;
  case 17: 
   var $83=$1;
   STACKTOP = sp;
   return $83;
  default: assert(0, "bad label: " + label);
 }
}
function _regexp_check($mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2=sp;
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_obj_classname($3, $obj);
   var $5=_memcmp($4, ((89328)|0), 6);
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=$1;
   _noregexp($2, $8, $obj);
   label = 3; break;
  case 3: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_rindex($mrb, $str, $sub, $pos) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $sub; $sub = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($sub)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sub)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sub)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $s;
   var $sbeg;
   var $t;
   var $ps;
   var $psub;
   var $len;
   $2=$mrb;
   $3=$pos;
   var $4=(($str)|0);
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=$6;
   $ps=$7;
   var $8=(($sub)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10;
   $psub=$11;
   var $12=$psub;
   var $13=(($12+12)|0);
   var $14=HEAP32[(($13)>>2)];
   $len=$14;
   var $15=$ps;
   var $16=(($15+12)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$len;
   var $19=(($17)|(0)) < (($18)|(0));
   if ($19) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=-1;
   label = 13; break;
  case 3: 
   var $22=$ps;
   var $23=(($22+12)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$3;
   var $26=((($24)-($25))|0);
   var $27=$len;
   var $28=(($26)|(0)) < (($27)|(0));
   if ($28) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $30=$ps;
   var $31=(($30+12)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$len;
   var $34=((($32)-($33))|0);
   $3=$34;
   label = 5; break;
  case 5: 
   var $36=$ps;
   var $37=(($36+20)|0);
   var $38=HEAP32[(($37)>>2)];
   $sbeg=$38;
   var $39=$ps;
   var $40=(($39+20)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$3;
   var $43=(($41+$42)|0);
   $s=$43;
   var $44=$psub;
   var $45=(($44+20)|0);
   var $46=HEAP32[(($45)>>2)];
   $t=$46;
   var $47=$len;
   var $48=(($47)|(0))!=0;
   if ($48) { label = 6; break; } else { label = 12; break; }
  case 6: 
   label = 7; break;
  case 7: 
   var $51=$sbeg;
   var $52=$s;
   var $53=(($51)>>>(0)) <= (($52)>>>(0));
   if ($53) { label = 8; break; } else { label = 11; break; }
  case 8: 
   var $55=$s;
   var $56=$t;
   var $57=$len;
   var $58=_memcmp($55, $56, $57);
   var $59=(($58)|(0))==0;
   if ($59) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $61=$s;
   var $62=$ps;
   var $63=(($62+20)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=$61;
   var $66=$64;
   var $67=((($65)-($66))|0);
   $1=$67;
   label = 13; break;
  case 10: 
   var $69=$s;
   var $70=((($69)-(1))|0);
   $s=$70;
   label = 7; break;
  case 11: 
   $1=-1;
   label = 13; break;
  case 12: 
   var $73=$3;
   $1=$73;
   label = 13; break;
  case 13: 
   var $75=$1;
   STACKTOP = sp;
   return $75;
  default: assert(0, "bad label: " + label);
 }
}
function _str_replace($agg_result, $mrb, $s1, $s2) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$mrb;
   $2=$s1;
   $3=$s2;
   var $4=$3;
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=$6 >>> 11;
   var $8=$7 & 2097151;
   var $9=$8 & 1;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 7; break; }
  case 2: 
   label = 3; break;
  case 3: 
   var $13=$2;
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 >>> 11;
   var $17=$16 & 2097151;
   var $18=$17 & 1;
   var $19=(($18)|(0))!=0;
   if ($19) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=$1;
   var $22=$2;
   var $23=(($22+16)|0);
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   _str_decref($21, $25);
   label = 6; break;
  case 5: 
   var $27=$1;
   var $28=$2;
   var $29=(($28+20)|0);
   var $30=HEAP32[(($29)>>2)];
   _mrb_free($27, $30);
   label = 6; break;
  case 6: 
   var $32=$3;
   var $33=(($32+20)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=$2;
   var $36=(($35+20)|0);
   HEAP32[(($36)>>2)]=$34;
   var $37=$3;
   var $38=(($37+12)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=$2;
   var $41=(($40+12)|0);
   HEAP32[(($41)>>2)]=$39;
   var $42=$3;
   var $43=(($42+16)|0);
   var $44=$43;
   var $45=HEAP32[(($44)>>2)];
   var $46=$2;
   var $47=(($46+16)|0);
   var $48=$47;
   HEAP32[(($48)>>2)]=$45;
   var $49=$2;
   var $50=$49;
   var $51=HEAP32[(($50)>>2)];
   var $52=$51 >>> 11;
   var $53=$52 & 2097151;
   var $54=$53 | 1;
   var $55=$54 & 2097151;
   var $56=$49;
   var $57=$55 & 2097151;
   var $58=$57 << 11;
   var $59=HEAP32[(($56)>>2)];
   var $60=$59 & 2047;
   var $61=$60 | $58;
   HEAP32[(($56)>>2)]=$61;
   var $62=$2;
   var $63=(($62+16)|0);
   var $64=$63;
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65+4)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=((($67)+(1))|0);
   HEAP32[(($66)>>2)]=$68;
   label = 14; break;
  case 7: 
   var $70=$3;
   var $71=(($70+12)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72)|(0)) > 10;
   if ($73) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $75=$1;
   var $76=$3;
   _str_make_shared($75, $76);
   label = 3; break;
  case 9: 
   var $78=$2;
   var $79=$78;
   var $80=HEAP32[(($79)>>2)];
   var $81=$80 >>> 11;
   var $82=$81 & 2097151;
   var $83=$82 & 1;
   var $84=(($83)|(0))!=0;
   if ($84) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $86=$1;
   var $87=$2;
   var $88=(($87+16)|0);
   var $89=$88;
   var $90=HEAP32[(($89)>>2)];
   _str_decref($86, $90);
   var $91=$2;
   var $92=$91;
   var $93=HEAP32[(($92)>>2)];
   var $94=$93 >>> 11;
   var $95=$94 & 2097151;
   var $96=$95 & -2;
   var $97=$96 & 2097151;
   var $98=$91;
   var $99=$97 & 2097151;
   var $100=$99 << 11;
   var $101=HEAP32[(($98)>>2)];
   var $102=$101 & 2047;
   var $103=$102 | $100;
   HEAP32[(($98)>>2)]=$103;
   var $104=$1;
   var $105=$3;
   var $106=(($105+12)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=((($107)+(1))|0);
   var $109=_mrb_malloc($104, $108);
   var $110=$2;
   var $111=(($110+20)|0);
   HEAP32[(($111)>>2)]=$109;
   label = 12; break;
  case 11: 
   var $113=$1;
   var $114=$2;
   var $115=(($114+20)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=$3;
   var $118=(($117+12)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120=((($119)+(1))|0);
   var $121=_mrb_realloc($113, $116, $120);
   var $122=$2;
   var $123=(($122+20)|0);
   HEAP32[(($123)>>2)]=$121;
   label = 12; break;
  case 12: 
   var $125=$2;
   var $126=(($125+20)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=$3;
   var $129=(($128+20)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=$3;
   var $132=(($131+12)|0);
   var $133=HEAP32[(($132)>>2)];
   assert($133 % 1 === 0);(_memcpy($127, $130, $133)|0);
   var $134=$3;
   var $135=(($134+12)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=$2;
   var $138=(($137+20)|0);
   var $139=HEAP32[(($138)>>2)];
   var $140=(($139+$136)|0);
   HEAP8[($140)]=0;
   var $141=$3;
   var $142=(($141+12)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=$2;
   var $145=(($144+12)|0);
   HEAP32[(($145)>>2)]=$143;
   var $146=$3;
   var $147=(($146+12)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=$2;
   var $150=(($149+16)|0);
   var $151=$150;
   HEAP32[(($151)>>2)]=$148;
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $154=$2;
   var $155=$154;
   _mrb_obj_value45($agg_result, $155);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_index($mrb, $str, $sub, $offset) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $sub; $sub = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($sub)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sub)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sub)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $pos;
   var $s;
   var $sptr;
   var $len;
   var $slen;
   $2=$mrb;
   $3=$offset;
   var $4=(($str)|0);
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=$6;
   var $8=(($7+12)|0);
   var $9=HEAP32[(($8)>>2)];
   $len=$9;
   var $10=(($sub)|0);
   var $11=$10;
   var $12=HEAP32[(($11)>>2)];
   var $13=$12;
   var $14=(($13+12)|0);
   var $15=HEAP32[(($14)>>2)];
   $slen=$15;
   var $16=$3;
   var $17=(($16)|(0)) < 0;
   if ($17) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $19=$len;
   var $20=$3;
   var $21=((($20)+($19))|0);
   $3=$21;
   var $22=$3;
   var $23=(($22)|(0)) < 0;
   if ($23) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $1=-1;
   label = 14; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $27=$len;
   var $28=$3;
   var $29=((($27)-($28))|0);
   var $30=$slen;
   var $31=(($29)|(0)) < (($30)|(0));
   if ($31) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $1=-1;
   label = 14; break;
  case 7: 
   var $34=(($str)|0);
   var $35=$34;
   var $36=HEAP32[(($35)>>2)];
   var $37=$36;
   var $38=(($37+20)|0);
   var $39=HEAP32[(($38)>>2)];
   $s=$39;
   var $40=$3;
   var $41=(($40)|(0))!=0;
   if ($41) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $43=$3;
   var $44=$s;
   var $45=(($44+$43)|0);
   $s=$45;
   label = 9; break;
  case 9: 
   var $47=$slen;
   var $48=(($47)|(0))==0;
   if ($48) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $50=$3;
   $1=$50;
   label = 14; break;
  case 11: 
   var $52=(($sub)|0);
   var $53=$52;
   var $54=HEAP32[(($53)>>2)];
   var $55=$54;
   var $56=(($55+20)|0);
   var $57=HEAP32[(($56)>>2)];
   $sptr=$57;
   var $58=(($sub)|0);
   var $59=$58;
   var $60=HEAP32[(($59)>>2)];
   var $61=$60;
   var $62=(($61+12)|0);
   var $63=HEAP32[(($62)>>2)];
   $slen=$63;
   var $64=(($str)|0);
   var $65=$64;
   var $66=HEAP32[(($65)>>2)];
   var $67=$66;
   var $68=(($67+12)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=$3;
   var $71=((($69)-($70))|0);
   $len=$71;
   var $72=$sptr;
   var $73=$slen;
   var $74=$s;
   var $75=$len;
   var $76=_mrb_memsearch($72, $73, $74, $75);
   $pos=$76;
   var $77=$pos;
   var $78=(($77)|(0)) < 0;
   if ($78) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $80=$pos;
   $1=$80;
   label = 14; break;
  case 13: 
   var $82=$pos;
   var $83=$3;
   var $84=((($82)+($83))|0);
   $1=$84;
   label = 14; break;
  case 14: 
   var $86=$1;
   STACKTOP = sp;
   return $86;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_bool_value($agg_result, $boolean) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$boolean;
   label = 2; break;
  case 2: 
   var $3=$1;
   var $4=(($3)&(255));
   var $5=(($4)|(0))!=0;
   var $6=$5 ? 2 : 0;
   var $7=(($v+8)|0);
   HEAP32[(($7)>>2)]=$6;
   var $8=(($v)|0);
   var $9=$8;
   HEAP32[(($9)>>2)]=1;
   label = 3; break;
  case 3: 
   var $11=$agg_result;
   var $12=$v;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_aref($agg_result, $mrb, $str, $indx) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 44)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $indx; $indx = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($indx)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($indx)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($indx)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $idx;
   var $2=sp;
   var $beg=(sp)+(12);
   var $len=(sp)+(16);
   var $tmp=(sp)+(20);
   var $3=(sp)+(32);
   $1=$mrb;
   var $4=$1;
   _regexp_check($4, $indx);
   var $5=(($indx+8)|0);
   var $6=HEAP32[(($5)>>2)];
   if ((($6)|(0))==3) {
    label = 2; break;
   }
   else if ((($6)|(0))==16) {
    label = 8; break;
   }
   else if ((($6)|(0))==17) {
    label = 11; break;
   }
   else {
   label = 14; break;
   }
  case 2: 
   var $8=(($indx)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   $idx=$10;
   label = 3; break;
  case 3: 
   var $12=$1;
   var $13=$idx;
   _mrb_str_substr($2, $12, $str, $13, 1);
   var $14=$str;
   var $15=$2;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   var $16=(($str+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0))==0;
   if ($18) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $20=(($str)|0);
   var $21=$20;
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))!=0;
   if ($23) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $25=(($str)|0);
   var $26=$25;
   var $27=HEAP32[(($26)>>2)];
   var $28=$27;
   var $29=(($28+12)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30)|(0))==0;
   if ($31) { label = 6; break; } else { label = 7; break; }
  case 6: 
   _mrb_nil_value49($agg_result);
   label = 15; break;
  case 7: 
   var $34=$agg_result;
   var $35=$str;
   assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
   label = 15; break;
  case 8: 
   var $37=$1;
   var $38=_mrb_str_index($37, $str, $indx, 0);
   var $39=(($38)|(0))!=-1;
   if ($39) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $41=$1;
   _mrb_str_dup($agg_result, $41, $indx);
   label = 15; break;
  case 10: 
   _mrb_nil_value49($agg_result);
   label = 15; break;
  case 11: 
   var $44=(($str)|0);
   var $45=$44;
   var $46=HEAP32[(($45)>>2)];
   var $47=$46;
   var $48=(($47+12)|0);
   var $49=HEAP32[(($48)>>2)];
   HEAP32[(($len)>>2)]=$49;
   var $50=$1;
   var $51=HEAP32[(($len)>>2)];
   var $52=_mrb_range_beg_len($50, $indx, $beg, $len, $51);
   var $53=(($52)|(0))!=0;
   if ($53) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $55=$1;
   var $56=HEAP32[(($beg)>>2)];
   var $57=HEAP32[(($len)>>2)];
   _mrb_str_subseq($3, $55, $str, $56, $57);
   var $58=$tmp;
   var $59=$3;
   assert(12 % 1 === 0);HEAP32[(($58)>>2)]=HEAP32[(($59)>>2)];HEAP32[((($58)+(4))>>2)]=HEAP32[((($59)+(4))>>2)];HEAP32[((($58)+(8))>>2)]=HEAP32[((($59)+(8))>>2)];
   var $60=$agg_result;
   var $61=$tmp;
   assert(12 % 1 === 0);HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];HEAP32[((($60)+(8))>>2)]=HEAP32[((($61)+(8))>>2)];
   label = 15; break;
  case 13: 
   _mrb_nil_value49($agg_result);
   label = 15; break;
  case 14: 
   var $64=(($indx)|0);
   var $65=$64;
   var $66=HEAP32[(($65)>>2)];
   $idx=$66;
   label = 3; break;
  case 15: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_alloc_n2s($h) {
 var label = 0;
 var $1;
 var $sz;
 var $p;
 $1=$h;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 $sz=$4;
 var $5=$1;
 var $6=(($5+36)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$sz;
 var $9=$8;
 var $10=((((($9)>>>(0)))/(4))&-1);
 var $11=$sz;
 var $12=((($11)*(10))&-1);
 var $13=((($10)+($12))|0);
 var $14=_mrb_malloc($7, $13);
 $p=$14;
 var $15=$1;
 var $16=(($15+8)|0);
 HEAP32[(($16)>>2)]=0;
 var $17=$1;
 var $18=(($17+4)|0);
 HEAP32[(($18)>>2)]=0;
 var $19=$sz;
 var $20=$19 >>> 2;
 var $21=$sz;
 var $22=$21 >>> 1;
 var $23=$20 | $22;
 var $24=$1;
 var $25=(($24+12)|0);
 HEAP32[(($25)>>2)]=$23;
 var $26=$p;
 var $27=$26;
 var $28=$1;
 var $29=(($28+20)|0);
 HEAP32[(($29)>>2)]=$27;
 var $30=$p;
 var $31=$sz;
 var $32=($31<<3);
 var $33=(($30+$32)|0);
 var $34=$33;
 var $35=$1;
 var $36=(($35+24)|0);
 HEAP32[(($36)>>2)]=$34;
 var $37=$p;
 var $38=$sz;
 var $39=($38<<3);
 var $40=(($37+$39)|0);
 var $41=$sz;
 var $42=($41<<1);
 var $43=(($40+$42)|0);
 var $44=$1;
 var $45=(($44+16)|0);
 HEAP32[(($45)>>2)]=$43;
 var $46=$1;
 var $47=(($46+16)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=$sz;
 var $50=((((($49)>>>(0)))/(4))&-1);
 _kh_fill_flags($48, -86, $50);
 var $51=$sz;
 var $52=((($51)-(1))|0);
 var $53=$1;
 var $54=(($53+28)|0);
 HEAP32[(($54)>>2)]=$52;
 var $55=$sz;
 var $56=((((($55)>>>(0)))/(2))&-1);
 var $57=((($56)-(1))|0);
 var $58=$1;
 var $59=(($58+32)|0);
 HEAP32[(($59)>>2)]=$57;
 return;
}
function _kh_fill_flags($p, $c, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$p;
   $2=$c;
   $3=$len;
   label = 2; break;
  case 2: 
   var $5=$3;
   var $6=((($5)-(1))|0);
   $3=$6;
   var $7=(($5)>>>(0)) > 0;
   if ($7) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $9=$2;
   var $10=$1;
   var $11=(($10+1)|0);
   $1=$11;
   HEAP8[($10)]=$9;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _sym_hash_func($mrb, $s_0, $s_1) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $s=sp;
   var $h;
   var $i;
   var $p;
   $1=$mrb;
   var $2=(($s)|0);
   HEAP32[(($2)>>2)]=$s_0;
   var $3=(($s+4)|0);
   HEAP32[(($3)>>2)]=$s_1;
   $h=0;
   var $4=(($s+4)|0);
   var $5=HEAP32[(($4)>>2)];
   $p=$5;
   $i=0;
   label = 2; break;
  case 2: 
   var $7=$i;
   var $8=(($s)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($7)>>>(0)) < (($9)>>>(0));
   if ($10) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $12=$h;
   var $13=$12 << 5;
   var $14=$h;
   var $15=((($13)-($14))|0);
   var $16=$p;
   var $17=(($16+1)|0);
   $p=$17;
   var $18=HEAP8[($16)];
   var $19=(($18 << 24) >> 24);
   var $20=((($15)+($19))|0);
   $h=$20;
   label = 4; break;
  case 4: 
   var $22=$i;
   var $23=((($22)+(1))|0);
   $i=$23;
   label = 2; break;
  case 5: 
   var $25=$h;
   STACKTOP = sp;
   return $25;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_init_n2s_size($mrb, $size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $h;
   $1=$mrb;
   $2=$size;
   var $3=$1;
   var $4=_mrb_calloc($3, 1, 40);
   var $5=$4;
   $h=$5;
   var $6=$2;
   var $7=(($6)>>>(0)) < 8;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $2=8;
   label = 3; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $11=$2;
   var $12=((($11)-(1))|0);
   $2=$12;
   var $13=$2;
   var $14=$13 >>> 1;
   var $15=$2;
   var $16=$15 | $14;
   $2=$16;
   var $17=$2;
   var $18=$17 >>> 2;
   var $19=$2;
   var $20=$19 | $18;
   $2=$20;
   var $21=$2;
   var $22=$21 >>> 4;
   var $23=$2;
   var $24=$23 | $22;
   $2=$24;
   var $25=$2;
   var $26=$25 >>> 8;
   var $27=$2;
   var $28=$27 | $26;
   $2=$28;
   var $29=$2;
   var $30=$29 >>> 16;
   var $31=$2;
   var $32=$31 | $30;
   $2=$32;
   var $33=$2;
   var $34=((($33)+(1))|0);
   $2=$34;
   label = 5; break;
  case 5: 
   var $36=$2;
   var $37=$h;
   var $38=(($37)|0);
   HEAP32[(($38)>>2)]=$36;
   var $39=$1;
   var $40=$h;
   var $41=(($40+36)|0);
   HEAP32[(($41)>>2)]=$39;
   var $42=$h;
   _kh_alloc_n2s($42);
   var $43=$h;
   return $43;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_init_n2s($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=_kh_init_n2s_size($2, 32);
 return $3;
}
function _kh_destroy_n2s($h) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$h;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $5=$1;
   var $6=(($5+36)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$1;
   var $9=(($8+20)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$10;
   _mrb_free($7, $11);
   var $12=$1;
   var $13=(($12+36)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$1;
   var $16=$15;
   _mrb_free($14, $16);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_get_n2s($h, $key_0, $key_1) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $key=sp;
   var $k;
   $2=$h;
   var $3=(($key)|0);
   HEAP32[(($3)>>2)]=$key_0;
   var $4=(($key+4)|0);
   HEAP32[(($4)>>2)]=$key_1;
   var $5=$2;
   var $6=(($5+36)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($key)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($key+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=_sym_hash_func($7, $9, $11);
   var $13=$2;
   var $14=(($13+28)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$12 & $15;
   $k=$16;
   label = 2; break;
  case 2: 
   var $18=$k;
   var $19=((((($18)>>>(0)))/(4))&-1);
   var $20=$2;
   var $21=(($20+16)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+$19)|0);
   var $24=HEAP8[($23)];
   var $25=(($24)&(255));
   var $26=$k;
   var $27=((((($26)>>>(0)))%(4))&-1);
   var $28=((106188+$27)|0);
   var $29=HEAP8[($28)];
   var $30=(($29)&(255));
   var $31=$25 & $30;
   var $32=(($31)|(0))!=0;
   var $33=$32 ^ 1;
   if ($33) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $35=$k;
   var $36=((((($35)>>>(0)))/(4))&-1);
   var $37=$2;
   var $38=(($37+16)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39+$36)|0);
   var $41=HEAP8[($40)];
   var $42=(($41)&(255));
   var $43=$k;
   var $44=((((($43)>>>(0)))%(4))&-1);
   var $45=((106268+$44)|0);
   var $46=HEAP8[($45)];
   var $47=(($46)&(255));
   var $48=$42 & $47;
   var $49=(($48)|(0))!=0;
   if ($49) { label = 8; break; } else { label = 4; break; }
  case 4: 
   var $51=$k;
   var $52=$2;
   var $53=(($52+20)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($54+($51<<3))|0);
   var $56=(($55)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($key)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=(($57)|(0))==(($59)|(0));
   if ($60) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $62=$k;
   var $63=$2;
   var $64=(($63+20)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65+($62<<3))|0);
   var $67=(($66+4)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=(($key+4)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=$k;
   var $72=$2;
   var $73=(($72+20)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=(($74+($71<<3))|0);
   var $76=(($75)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=_memcmp($68, $70, $77);
   var $79=(($78)|(0))==0;
   if ($79) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $81=$k;
   $1=$81;
   label = 10; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $84=$k;
   var $85=$2;
   var $86=(($85+32)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=((($84)+($87))|0);
   var $89=$2;
   var $90=(($89+28)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=$88 & $91;
   $k=$92;
   label = 2; break;
  case 9: 
   var $94=$2;
   var $95=(($94)|0);
   var $96=HEAP32[(($95)>>2)];
   $1=$96;
   label = 10; break;
  case 10: 
   var $98=$1;
   STACKTOP = sp;
   return $98;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_resize_n2s($h, $new_n_buckets) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $old_ed_flags;
   var $old_keys;
   var $old_vals;
   var $old_n_buckets;
   var $i;
   var $k;
   $1=$h;
   $2=$new_n_buckets;
   var $3=$2;
   var $4=(($3)>>>(0)) < 8;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $2=8;
   label = 3; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $8=$2;
   var $9=((($8)-(1))|0);
   $2=$9;
   var $10=$2;
   var $11=$10 >>> 1;
   var $12=$2;
   var $13=$12 | $11;
   $2=$13;
   var $14=$2;
   var $15=$14 >>> 2;
   var $16=$2;
   var $17=$16 | $15;
   $2=$17;
   var $18=$2;
   var $19=$18 >>> 4;
   var $20=$2;
   var $21=$20 | $19;
   $2=$21;
   var $22=$2;
   var $23=$22 >>> 8;
   var $24=$2;
   var $25=$24 | $23;
   $2=$25;
   var $26=$2;
   var $27=$26 >>> 16;
   var $28=$2;
   var $29=$28 | $27;
   $2=$29;
   var $30=$2;
   var $31=((($30)+(1))|0);
   $2=$31;
   label = 5; break;
  case 5: 
   var $33=$1;
   var $34=(($33+16)|0);
   var $35=HEAP32[(($34)>>2)];
   $old_ed_flags=$35;
   var $36=$1;
   var $37=(($36+20)|0);
   var $38=HEAP32[(($37)>>2)];
   $old_keys=$38;
   var $39=$1;
   var $40=(($39+24)|0);
   var $41=HEAP32[(($40)>>2)];
   $old_vals=$41;
   var $42=$1;
   var $43=(($42)|0);
   var $44=HEAP32[(($43)>>2)];
   $old_n_buckets=$44;
   var $45=$2;
   var $46=$1;
   var $47=(($46)|0);
   HEAP32[(($47)>>2)]=$45;
   var $48=$1;
   _kh_alloc_n2s($48);
   $i=0;
   label = 6; break;
  case 6: 
   var $50=$i;
   var $51=$old_n_buckets;
   var $52=(($50)>>>(0)) < (($51)>>>(0));
   if ($52) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $54=$i;
   var $55=((((($54)>>>(0)))/(4))&-1);
   var $56=$old_ed_flags;
   var $57=(($56+$55)|0);
   var $58=HEAP8[($57)];
   var $59=(($58)&(255));
   var $60=$i;
   var $61=((((($60)>>>(0)))%(4))&-1);
   var $62=((106236+$61)|0);
   var $63=HEAP8[($62)];
   var $64=(($63)&(255));
   var $65=$59 & $64;
   var $66=(($65)|(0))!=0;
   if ($66) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $68=$1;
   var $69=$i;
   var $70=$old_keys;
   var $71=(($70+($69<<3))|0);
   var $72=(($71)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($71+4)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=_kh_put_n2s($68, $73, $75);
   $k=$76;
   var $77=$i;
   var $78=$old_vals;
   var $79=(($78+($77<<1))|0);
   var $80=HEAP16[(($79)>>1)];
   var $81=$k;
   var $82=$1;
   var $83=(($82+24)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=(($84+($81<<1))|0);
   HEAP16[(($85)>>1)]=$80;
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $88=$i;
   var $89=((($88)+(1))|0);
   $i=$89;
   label = 6; break;
  case 11: 
   var $91=$1;
   var $92=(($91+36)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=$old_keys;
   var $95=$94;
   _mrb_free($93, $95);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_put_n2s($h, $key_0, $key_1) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $key=sp;
   var $k;
   $1=$h;
   var $2=(($key)|0);
   HEAP32[(($2)>>2)]=$key_0;
   var $3=(($key+4)|0);
   HEAP32[(($3)>>2)]=$key_1;
   var $4=$1;
   var $5=(($4+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$1;
   var $8=(($7+12)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($6)>>>(0)) >= (($9)>>>(0));
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$1;
   var $13=$1;
   var $14=(($13)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=($15<<1);
   _kh_resize_n2s($12, $16);
   label = 3; break;
  case 3: 
   var $18=$1;
   var $19=(($18+36)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($key)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($key+4)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=_sym_hash_func($20, $22, $24);
   var $26=$1;
   var $27=(($26+28)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=$25 & $28;
   $k=$29;
   label = 4; break;
  case 4: 
   var $31=$k;
   var $32=((((($31)>>>(0)))/(4))&-1);
   var $33=$1;
   var $34=(($33+16)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+$32)|0);
   var $37=HEAP8[($36)];
   var $38=(($37)&(255));
   var $39=$k;
   var $40=((((($39)>>>(0)))%(4))&-1);
   var $41=((106236+$40)|0);
   var $42=HEAP8[($41)];
   var $43=(($42)&(255));
   var $44=$38 & $43;
   var $45=(($44)|(0))!=0;
   var $46=$45 ^ 1;
   if ($46) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $48=$k;
   var $49=$1;
   var $50=(($49+20)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($51+($48<<3))|0);
   var $53=(($52)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($key)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($54)|(0))==(($56)|(0));
   if ($57) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $59=$k;
   var $60=$1;
   var $61=(($60+20)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62+($59<<3))|0);
   var $64=(($63+4)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($key+4)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=$k;
   var $69=$1;
   var $70=(($69+20)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($71+($68<<3))|0);
   var $73=(($72)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=_memcmp($65, $67, $74);
   var $76=(($75)|(0))==0;
   if ($76) { label = 7; break; } else { label = 8; break; }
  case 7: 
   label = 9; break;
  case 8: 
   var $79=$k;
   var $80=$1;
   var $81=(($80+32)|0);
   var $82=HEAP32[(($81)>>2)];
   var $83=((($79)+($82))|0);
   var $84=$1;
   var $85=(($84+28)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=$83 & $86;
   $k=$87;
   label = 4; break;
  case 9: 
   var $89=$k;
   var $90=((((($89)>>>(0)))/(4))&-1);
   var $91=$1;
   var $92=(($91+16)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=(($93+$90)|0);
   var $95=HEAP8[($94)];
   var $96=(($95)&(255));
   var $97=$k;
   var $98=((((($97)>>>(0)))%(4))&-1);
   var $99=((106188+$98)|0);
   var $100=HEAP8[($99)];
   var $101=(($100)&(255));
   var $102=$96 & $101;
   var $103=(($102)|(0))!=0;
   if ($103) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $105=$k;
   var $106=$1;
   var $107=(($106+20)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=(($108+($105<<3))|0);
   var $110=$109;
   var $111=$key;
   assert(8 % 1 === 0);HEAP32[(($110)>>2)]=HEAP32[(($111)>>2)];HEAP32[((($110)+(4))>>2)]=HEAP32[((($111)+(4))>>2)];
   var $112=$k;
   var $113=((((($112)>>>(0)))%(4))&-1);
   var $114=((106188+$113)|0);
   var $115=HEAP8[($114)];
   var $116=(($115)&(255));
   var $117=$116 ^ -1;
   var $118=$k;
   var $119=((((($118)>>>(0)))/(4))&-1);
   var $120=$1;
   var $121=(($120+16)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=(($122+$119)|0);
   var $124=HEAP8[($123)];
   var $125=(($124)&(255));
   var $126=$125 & $117;
   var $127=(($126) & 255);
   HEAP8[($123)]=$127;
   var $128=$1;
   var $129=(($128+4)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=((($130)+(1))|0);
   HEAP32[(($129)>>2)]=$131;
   var $132=$1;
   var $133=(($132+8)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135=((($134)+(1))|0);
   HEAP32[(($133)>>2)]=$135;
   label = 14; break;
  case 11: 
   var $137=$k;
   var $138=((((($137)>>>(0)))/(4))&-1);
   var $139=$1;
   var $140=(($139+16)|0);
   var $141=HEAP32[(($140)>>2)];
   var $142=(($141+$138)|0);
   var $143=HEAP8[($142)];
   var $144=(($143)&(255));
   var $145=$k;
   var $146=((((($145)>>>(0)))%(4))&-1);
   var $147=((106268+$146)|0);
   var $148=HEAP8[($147)];
   var $149=(($148)&(255));
   var $150=$144 & $149;
   var $151=(($150)|(0))!=0;
   if ($151) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $153=$k;
   var $154=$1;
   var $155=(($154+20)|0);
   var $156=HEAP32[(($155)>>2)];
   var $157=(($156+($153<<3))|0);
   var $158=$157;
   var $159=$key;
   assert(8 % 1 === 0);HEAP32[(($158)>>2)]=HEAP32[(($159)>>2)];HEAP32[((($158)+(4))>>2)]=HEAP32[((($159)+(4))>>2)];
   var $160=$k;
   var $161=((((($160)>>>(0)))%(4))&-1);
   var $162=((106268+$161)|0);
   var $163=HEAP8[($162)];
   var $164=(($163)&(255));
   var $165=$164 ^ -1;
   var $166=$k;
   var $167=((((($166)>>>(0)))/(4))&-1);
   var $168=$1;
   var $169=(($168+16)|0);
   var $170=HEAP32[(($169)>>2)];
   var $171=(($170+$167)|0);
   var $172=HEAP8[($171)];
   var $173=(($172)&(255));
   var $174=$173 & $165;
   var $175=(($174) & 255);
   HEAP8[($171)]=$175;
   var $176=$1;
   var $177=(($176+4)|0);
   var $178=HEAP32[(($177)>>2)];
   var $179=((($178)+(1))|0);
   HEAP32[(($177)>>2)]=$179;
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $182=$k;
   STACKTOP = sp;
   return $182;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_intern2($mrb, $name, $len) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $h;
   var $sname=sp;
   var $k;
   var $sym;
   var $p;
   $2=$mrb;
   $3=$name;
   $4=$len;
   var $5=$2;
   var $6=(($5+568)|0);
   var $7=HEAP32[(($6)>>2)];
   $h=$7;
   var $8=$4;
   var $9=(($sname)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=$3;
   var $11=(($sname+4)|0);
   HEAP32[(($11)>>2)]=$10;
   var $12=$h;
   var $13=(($sname)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($sname+4)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=_kh_get_n2s($12, $14, $16);
   $k=$17;
   var $18=$k;
   var $19=$h;
   var $20=(($19)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($18)|(0))!=(($21)|(0));
   if ($22) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $24=$k;
   var $25=$h;
   var $26=(($25+24)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27+($24<<1))|0);
   var $29=HEAP16[(($28)>>1)];
   $1=$29;
   label = 4; break;
  case 3: 
   var $31=$2;
   var $32=(($31+564)|0);
   var $33=HEAP16[(($32)>>1)];
   var $34=((($33)+(1))&65535);
   HEAP16[(($32)>>1)]=$34;
   $sym=$34;
   var $35=$2;
   var $36=$4;
   var $37=((($36)+(1))|0);
   var $38=_mrb_malloc($35, $37);
   $p=$38;
   var $39=$p;
   var $40=$3;
   var $41=$4;
   assert($41 % 1 === 0);(_memcpy($39, $40, $41)|0);
   var $42=$4;
   var $43=$p;
   var $44=(($43+$42)|0);
   HEAP8[($44)]=0;
   var $45=$p;
   var $46=(($sname+4)|0);
   HEAP32[(($46)>>2)]=$45;
   var $47=$h;
   var $48=(($sname)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($sname+4)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=_kh_put_n2s($47, $49, $51);
   $k=$52;
   var $53=$sym;
   var $54=$k;
   var $55=$h;
   var $56=(($55+24)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57+($54<<1))|0);
   HEAP16[(($58)>>1)]=$53;
   var $59=$sym;
   $1=$59;
   label = 4; break;
  case 4: 
   var $61=$1;
   STACKTOP = sp;
   return $61;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_intern_cstr($mrb, $name) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$name;
 var $3=$1;
 var $4=$2;
 var $5=$2;
 var $6=_strlen($5);
 var $7=_mrb_intern2($3, $4, $6);
 return $7;
}
function _mrb_intern_str($mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=(($str)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$5;
 var $7=(($6+20)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($str)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=$11;
 var $13=(($12+12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=_mrb_intern2($2, $8, $14);
 STACKTOP = sp;
 return $15;
}
function _mrb_check_intern($agg_result, $mrb, $name, $len) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $h;
   var $sname=sp;
   var $k;
   $1=$mrb;
   $2=$name;
   $3=$len;
   var $4=$1;
   var $5=(($4+568)|0);
   var $6=HEAP32[(($5)>>2)];
   $h=$6;
   var $7=$3;
   var $8=(($sname)|0);
   HEAP32[(($8)>>2)]=$7;
   var $9=$2;
   var $10=(($sname+4)|0);
   HEAP32[(($10)>>2)]=$9;
   var $11=$h;
   var $12=(($sname)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($sname+4)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=_kh_get_n2s($11, $13, $15);
   $k=$16;
   var $17=$k;
   var $18=$h;
   var $19=(($18)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($17)|(0))!=(($20)|(0));
   if ($21) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $23=$k;
   var $24=$h;
   var $25=(($24+24)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26+($23<<1))|0);
   var $28=HEAP16[(($27)>>1)];
   _mrb_symbol_value88($agg_result, $28);
   label = 4; break;
  case 3: 
   _mrb_nil_value89($agg_result);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_symbol_value88($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=4;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP16[(($6)>>1)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value89($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_check_intern_str($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=(($str)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$5;
 var $7=(($6+20)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($str)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=$11;
 var $13=(($12+12)|0);
 var $14=HEAP32[(($13)>>2)];
 _mrb_check_intern($agg_result, $2, $8, $14);
 STACKTOP = sp;
 return;
}
function _mrb_sym2name_len($mrb, $sym, $lenp) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $h;
   var $k;
   var $sname=sp;
   $2=$mrb;
   $3=$sym;
   $4=$lenp;
   var $5=$2;
   var $6=(($5+568)|0);
   var $7=HEAP32[(($6)>>2)];
   $h=$7;
   $k=0;
   label = 2; break;
  case 2: 
   var $9=$k;
   var $10=$h;
   var $11=(($10)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($9)|(0))!=(($12)|(0));
   if ($13) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $15=$k;
   var $16=((((($15)>>>(0)))/(4))&-1);
   var $17=$h;
   var $18=(($17+16)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19+$16)|0);
   var $21=HEAP8[($20)];
   var $22=(($21)&(255));
   var $23=$k;
   var $24=((((($23)>>>(0)))%(4))&-1);
   var $25=((106236+$24)|0);
   var $26=HEAP8[($25)];
   var $27=(($26)&(255));
   var $28=$22 & $27;
   var $29=(($28)|(0))!=0;
   if ($29) { label = 7; break; } else { label = 4; break; }
  case 4: 
   var $31=$k;
   var $32=$h;
   var $33=(($32+24)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34+($31<<1))|0);
   var $36=HEAP16[(($35)>>1)];
   var $37=(($36 << 16) >> 16);
   var $38=$3;
   var $39=(($38 << 16) >> 16);
   var $40=(($37)|(0))==(($39)|(0));
   if ($40) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $42=$k;
   var $43=$h;
   var $44=(($43+20)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($45+($42<<3))|0);
   var $47=$sname;
   var $48=$46;
   assert(8 % 1 === 0);HEAP32[(($47)>>2)]=HEAP32[(($48)>>2)];HEAP32[((($47)+(4))>>2)]=HEAP32[((($48)+(4))>>2)];
   var $49=(($sname)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=$4;
   HEAP32[(($51)>>2)]=$50;
   var $52=(($sname+4)|0);
   var $53=HEAP32[(($52)>>2)];
   $1=$53;
   label = 10; break;
  case 6: 
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $57=$k;
   var $58=((($57)+(1))|0);
   $k=$58;
   label = 2; break;
  case 9: 
   var $60=$4;
   HEAP32[(($60)>>2)]=0;
   $1=0;
   label = 10; break;
  case 10: 
   var $62=$1;
   STACKTOP = sp;
   return $62;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_free_symtbl($mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $h;
   var $k;
   $1=$mrb;
   var $2=$1;
   var $3=(($2+568)|0);
   var $4=HEAP32[(($3)>>2)];
   $h=$4;
   $k=0;
   label = 2; break;
  case 2: 
   var $6=$k;
   var $7=$h;
   var $8=(($7)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($6)|(0))!=(($9)|(0));
   if ($10) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $12=$k;
   var $13=((((($12)>>>(0)))/(4))&-1);
   var $14=$h;
   var $15=(($14+16)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16+$13)|0);
   var $18=HEAP8[($17)];
   var $19=(($18)&(255));
   var $20=$k;
   var $21=((((($20)>>>(0)))%(4))&-1);
   var $22=((106236+$21)|0);
   var $23=HEAP8[($22)];
   var $24=(($23)&(255));
   var $25=$19 & $24;
   var $26=(($25)|(0))!=0;
   if ($26) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $28=$1;
   var $29=$k;
   var $30=$h;
   var $31=(($30+20)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32+($29<<3))|0);
   var $34=(($33+4)|0);
   var $35=HEAP32[(($34)>>2)];
   _mrb_free($28, $35);
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $38=$k;
   var $39=((($38)+(1))|0);
   $k=$39;
   label = 2; break;
  case 7: 
   var $41=$1;
   var $42=(($41+568)|0);
   var $43=HEAP32[(($42)>>2)];
   _kh_destroy_n2s($43);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_init_symtbl($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=_kh_init_n2s($2);
 var $4=$1;
 var $5=(($4+568)|0);
 HEAP32[(($5)>>2)]=$3;
 return;
}
function _mrb_sym_to_s($agg_result, $mrb, $sym) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $sym; $sym = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($sym)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sym)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sym)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $id;
 var $p;
 var $len=sp;
 $1=$mrb;
 var $2=(($sym)|0);
 var $3=$2;
 var $4=HEAP16[(($3)>>1)];
 $id=$4;
 var $5=$1;
 var $6=$id;
 var $7=_mrb_sym2name_len($5, $6, $len);
 $p=$7;
 var $8=$1;
 var $9=$p;
 var $10=HEAP32[(($len)>>2)];
 _mrb_str_new_static($agg_result, $8, $9, $10);
 STACKTOP = sp;
 return;
}
function _mrb_sym2str($agg_result, $mrb, $sym) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $len=sp;
   var $name;
   var $str=(sp)+(4);
   var $3=(sp)+(16);
   $1=$mrb;
   $2=$sym;
   var $4=$1;
   var $5=$2;
   var $6=_mrb_sym2name_len($4, $5, $len);
   $name=$6;
   var $7=$name;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_undef_value($agg_result);
   label = 7; break;
  case 3: 
   var $11=$1;
   var $12=$name;
   var $13=HEAP32[(($len)>>2)];
   _mrb_str_new_static($3, $11, $12, $13);
   var $14=$str;
   var $15=$3;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   var $16=$name;
   var $17=_symname_p($16);
   var $18=(($17)&(255));
   var $19=(($18)|(0))!=0;
   if ($19) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $21=$name;
   var $22=_strlen($21);
   var $23=HEAP32[(($len)>>2)];
   var $24=(($22)|(0))==(($23)|(0));
   if ($24) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $26=$agg_result;
   var $27=$str;
   assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
   label = 7; break;
  case 6: 
   var $29=$1;
   _mrb_str_dump($agg_result, $29, $str);
   label = 7; break;
  case 7: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_undef_value($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=5;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _symname_p($name) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $m;
   var $localid;
   $2=$name;
   var $3=$2;
   $m=$3;
   $localid=0;
   var $4=$m;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 68; break;
  case 3: 
   var $8=$m;
   var $9=HEAP8[($8)];
   var $10=(($9 << 24) >> 24);
   if ((($10)|(0))==0) {
    label = 4; break;
   }
   else if ((($10)|(0))==36) {
    label = 5; break;
   }
   else if ((($10)|(0))==64) {
    label = 8; break;
   }
   else if ((($10)|(0))==60) {
    label = 11; break;
   }
   else if ((($10)|(0))==62) {
    label = 18; break;
   }
   else if ((($10)|(0))==61) {
    label = 22; break;
   }
   else if ((($10)|(0))==42) {
    label = 29; break;
   }
   else if ((($10)|(0))==33) {
    label = 32; break;
   }
   else if ((($10)|(0))==43 | (($10)|(0))==45) {
    label = 35; break;
   }
   else if ((($10)|(0))==124) {
    label = 38; break;
   }
   else if ((($10)|(0))==38) {
    label = 41; break;
   }
   else if ((($10)|(0))==94 | (($10)|(0))==47 | (($10)|(0))==37 | (($10)|(0))==126 | (($10)|(0))==96) {
    label = 44; break;
   }
   else if ((($10)|(0))==91) {
    label = 45; break;
   }
   else {
   label = 50; break;
   }
  case 4: 
   $1=0;
   label = 68; break;
  case 5: 
   var $13=$m;
   var $14=(($13+1)|0);
   $m=$14;
   var $15=_is_special_global_name($14);
   var $16=(($15 << 24) >> 24)!=0;
   if ($16) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $1=1;
   label = 68; break;
  case 7: 
   label = 51; break;
  case 8: 
   var $20=$m;
   var $21=(($20+1)|0);
   $m=$21;
   var $22=HEAP8[($21)];
   var $23=(($22 << 24) >> 24);
   var $24=(($23)|(0))==64;
   if ($24) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $26=$m;
   var $27=(($26+1)|0);
   $m=$27;
   label = 10; break;
  case 10: 
   label = 51; break;
  case 11: 
   var $30=$m;
   var $31=(($30+1)|0);
   $m=$31;
   var $32=HEAP8[($31)];
   var $33=(($32 << 24) >> 24);
   if ((($33)|(0))==60) {
    label = 12; break;
   }
   else if ((($33)|(0))==61) {
    label = 13; break;
   }
   else {
   label = 16; break;
   }
  case 12: 
   var $35=$m;
   var $36=(($35+1)|0);
   $m=$36;
   label = 17; break;
  case 13: 
   var $38=$m;
   var $39=(($38+1)|0);
   $m=$39;
   var $40=HEAP8[($39)];
   var $41=(($40 << 24) >> 24);
   var $42=(($41)|(0))==62;
   if ($42) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $44=$m;
   var $45=(($44+1)|0);
   $m=$45;
   label = 15; break;
  case 15: 
   label = 17; break;
  case 16: 
   label = 17; break;
  case 17: 
   label = 67; break;
  case 18: 
   var $50=$m;
   var $51=(($50+1)|0);
   $m=$51;
   var $52=HEAP8[($51)];
   var $53=(($52 << 24) >> 24);
   if ((($53)|(0))==62 | (($53)|(0))==61) {
    label = 19; break;
   }
   else {
   label = 20; break;
   }
  case 19: 
   var $55=$m;
   var $56=(($55+1)|0);
   $m=$56;
   label = 21; break;
  case 20: 
   label = 21; break;
  case 21: 
   label = 67; break;
  case 22: 
   var $60=$m;
   var $61=(($60+1)|0);
   $m=$61;
   var $62=HEAP8[($61)];
   var $63=(($62 << 24) >> 24);
   if ((($63)|(0))==126) {
    label = 23; break;
   }
   else if ((($63)|(0))==61) {
    label = 24; break;
   }
   else {
   label = 27; break;
   }
  case 23: 
   var $65=$m;
   var $66=(($65+1)|0);
   $m=$66;
   label = 28; break;
  case 24: 
   var $68=$m;
   var $69=(($68+1)|0);
   $m=$69;
   var $70=HEAP8[($69)];
   var $71=(($70 << 24) >> 24);
   var $72=(($71)|(0))==61;
   if ($72) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $74=$m;
   var $75=(($74+1)|0);
   $m=$75;
   label = 26; break;
  case 26: 
   label = 28; break;
  case 27: 
   $1=0;
   label = 68; break;
  case 28: 
   label = 67; break;
  case 29: 
   var $80=$m;
   var $81=(($80+1)|0);
   $m=$81;
   var $82=HEAP8[($81)];
   var $83=(($82 << 24) >> 24);
   var $84=(($83)|(0))==42;
   if ($84) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $86=$m;
   var $87=(($86+1)|0);
   $m=$87;
   label = 31; break;
  case 31: 
   label = 67; break;
  case 32: 
   var $90=$m;
   var $91=(($90+1)|0);
   $m=$91;
   var $92=HEAP8[($91)];
   var $93=(($92 << 24) >> 24);
   var $94=(($93)|(0))==61;
   if ($94) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $96=$m;
   var $97=(($96+1)|0);
   $m=$97;
   label = 34; break;
  case 34: 
   label = 67; break;
  case 35: 
   var $100=$m;
   var $101=(($100+1)|0);
   $m=$101;
   var $102=HEAP8[($101)];
   var $103=(($102 << 24) >> 24);
   var $104=(($103)|(0))==64;
   if ($104) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $106=$m;
   var $107=(($106+1)|0);
   $m=$107;
   label = 37; break;
  case 37: 
   label = 67; break;
  case 38: 
   var $110=$m;
   var $111=(($110+1)|0);
   $m=$111;
   var $112=HEAP8[($111)];
   var $113=(($112 << 24) >> 24);
   var $114=(($113)|(0))==124;
   if ($114) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $116=$m;
   var $117=(($116+1)|0);
   $m=$117;
   label = 40; break;
  case 40: 
   label = 67; break;
  case 41: 
   var $120=$m;
   var $121=(($120+1)|0);
   $m=$121;
   var $122=HEAP8[($121)];
   var $123=(($122 << 24) >> 24);
   var $124=(($123)|(0))==38;
   if ($124) { label = 42; break; } else { label = 43; break; }
  case 42: 
   var $126=$m;
   var $127=(($126+1)|0);
   $m=$127;
   label = 43; break;
  case 43: 
   label = 67; break;
  case 44: 
   var $130=$m;
   var $131=(($130+1)|0);
   $m=$131;
   label = 67; break;
  case 45: 
   var $133=$m;
   var $134=(($133+1)|0);
   $m=$134;
   var $135=HEAP8[($134)];
   var $136=(($135 << 24) >> 24);
   var $137=(($136)|(0))!=93;
   if ($137) { label = 46; break; } else { label = 47; break; }
  case 46: 
   $1=0;
   label = 68; break;
  case 47: 
   var $140=$m;
   var $141=(($140+1)|0);
   $m=$141;
   var $142=HEAP8[($141)];
   var $143=(($142 << 24) >> 24);
   var $144=(($143)|(0))==61;
   if ($144) { label = 48; break; } else { label = 49; break; }
  case 48: 
   var $146=$m;
   var $147=(($146+1)|0);
   $m=$147;
   label = 49; break;
  case 49: 
   label = 67; break;
  case 50: 
   var $150=$m;
   var $151=HEAP8[($150)];
   var $152=(($151)&(255));
   var $153=_isupper($152);
   var $154=(($153)|(0))!=0;
   var $155=$154 ^ 1;
   var $156=(($155)&(1));
   $localid=$156;
   label = 51; break;
  case 51: 
   var $158=$m;
   var $159=HEAP8[($158)];
   var $160=(($159 << 24) >> 24);
   var $161=(($160)|(0))!=95;
   if ($161) { label = 52; break; } else { label = 54; break; }
  case 52: 
   var $163=$m;
   var $164=HEAP8[($163)];
   var $165=(($164)&(255));
   var $166=_isalpha($165);
   var $167=(($166)|(0))!=0;
   if ($167) { label = 54; break; } else { label = 53; break; }
  case 53: 
   $1=0;
   label = 68; break;
  case 54: 
   label = 55; break;
  case 55: 
   var $171=$m;
   var $172=HEAP8[($171)];
   var $173=(($172 << 24) >> 24);
   var $174=(($173)|(0))!=-1;
   if ($174) { label = 56; break; } else { var $189 = 0;label = 59; break; }
  case 56: 
   var $176=$m;
   var $177=HEAP8[($176)];
   var $178=(($177)&(255));
   var $179=_isalnum($178);
   var $180=(($179)|(0))!=0;
   if ($180) { var $187 = 1;label = 58; break; } else { label = 57; break; }
  case 57: 
   var $182=$m;
   var $183=HEAP8[($182)];
   var $184=(($183 << 24) >> 24);
   var $185=(($184)|(0))==95;
   var $187 = $185;label = 58; break;
  case 58: 
   var $187;
   var $189 = $187;label = 59; break;
  case 59: 
   var $189;
   if ($189) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $191=$m;
   var $192=(($191+1)|0);
   $m=$192;
   label = 55; break;
  case 61: 
   var $194=$localid;
   var $195=(($194)|(0))!=0;
   if ($195) { label = 62; break; } else { label = 66; break; }
  case 62: 
   var $197=$m;
   var $198=HEAP8[($197)];
   var $199=(($198 << 24) >> 24);
   if ((($199)|(0))==33 | (($199)|(0))==63 | (($199)|(0))==61) {
    label = 63; break;
   }
   else {
   label = 64; break;
   }
  case 63: 
   var $201=$m;
   var $202=(($201+1)|0);
   $m=$202;
   label = 64; break;
  case 64: 
   label = 65; break;
  case 65: 
   label = 66; break;
  case 66: 
   label = 67; break;
  case 67: 
   var $207=$m;
   var $208=HEAP8[($207)];
   var $209=(($208 << 24) >> 24);
   var $210=(($209)|(0))!=0;
   var $211=$210 ? 0 : 1;
   var $212=(($211) & 255);
   $1=$212;
   label = 68; break;
  case 68: 
   var $214=$1;
   return $214;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_sym2name($mrb, $sym) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $len=sp;
   var $name;
   var $str=(sp)+(4);
   var $4=(sp)+(16);
   $2=$mrb;
   $3=$sym;
   var $5=$2;
   var $6=$3;
   var $7=_mrb_sym2name_len($5, $6, $len);
   $name=$7;
   var $8=$name;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 7; break;
  case 3: 
   var $12=$name;
   var $13=_symname_p($12);
   var $14=(($13)&(255));
   var $15=(($14)|(0))!=0;
   if ($15) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $17=$name;
   var $18=_strlen($17);
   var $19=HEAP32[(($len)>>2)];
   var $20=(($18)|(0))==(($19)|(0));
   if ($20) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $22=$name;
   $1=$22;
   label = 7; break;
  case 6: 
   var $24=$2;
   var $25=$2;
   var $26=$name;
   var $27=HEAP32[(($len)>>2)];
   _mrb_str_new_static($4, $25, $26, $27);
   _mrb_str_dump($str, $24, $4);
   var $28=(($str)|0);
   var $29=$28;
   var $30=HEAP32[(($29)>>2)];
   var $31=$30;
   var $32=(($31+20)|0);
   var $33=HEAP32[(($32)>>2)];
   $1=$33;
   label = 7; break;
  case 7: 
   var $35=$1;
   STACKTOP = sp;
   return $35;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_init_symbol($mrb) {
 var label = 0;
 var $1;
 var $sym;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=(($3+44)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_mrb_define_class($2, ((87952)|0), $5);
 var $7=$1;
 var $8=(($7+92)|0);
 HEAP32[(($8)>>2)]=$6;
 $sym=$6;
 var $9=$1;
 var $10=$sym;
 _mrb_define_method($9, $10, ((102136)|0), 422, 262144);
 var $11=$1;
 var $12=$sym;
 _mrb_define_method($11, $12, ((97968)|0), 610, 0);
 var $13=$1;
 var $14=$sym;
 _mrb_define_method($13, $14, ((95156)|0), 610, 0);
 var $15=$1;
 var $16=$sym;
 _mrb_define_method($15, $16, ((92564)|0), 714, 0);
 var $17=$1;
 var $18=$sym;
 _mrb_define_method($17, $18, ((89992)|0), 522, 0);
 var $19=$1;
 var $20=$sym;
 _mrb_define_method($19, $20, ((88740)|0), 54, 262144);
 var $21=$1;
 var $22=_mrb_intern2($21, ((87652)|0), 10);
 var $23=$1;
 var $24=(($23+36)|0);
 HEAP16[(($24)>>1)]=$22;
 return;
}
function _sym_equal($agg_result, $mrb, $sym1) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $sym1; $sym1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($sym1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sym1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sym1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $sym2=sp;
 var $equal_p;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((86848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$sym2,tempInt));
 var $4=$1;
 var $5=_mrb_obj_equal($4, $sym1, $sym2);
 $equal_p=$5;
 var $6=$equal_p;
 _mrb_bool_value93($agg_result, $6);
 STACKTOP = sp;
 return;
}
function _sym_to_sym($agg_result, $mrb, $sym) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $sym; $sym = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($sym)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sym)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sym)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$agg_result;
 var $3=$sym;
 assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _sym_inspect($agg_result, $mrb, $sym) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $sym; $sym = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($sym)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sym)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sym)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $str=sp;
   var $name;
   var $len=(sp)+(12);
   var $id;
   var $2=(sp)+(16);
   var $3=(sp)+(28);
   $1=$mrb;
   var $4=(($sym)|0);
   var $5=$4;
   var $6=HEAP16[(($5)>>1)];
   $id=$6;
   var $7=$1;
   var $8=$id;
   var $9=_mrb_sym2name_len($7, $8, $len);
   $name=$9;
   var $10=$1;
   var $11=HEAP32[(($len)>>2)];
   var $12=((($11)+(1))|0);
   _mrb_str_new($2, $10, 0, $12);
   var $13=$str;
   var $14=$2;
   assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
   var $15=(($str)|0);
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $18=$17;
   var $19=(($18+20)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|0);
   HEAP8[($21)]=58;
   var $22=(($str)|0);
   var $23=$22;
   var $24=HEAP32[(($23)>>2)];
   var $25=$24;
   var $26=(($25+20)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27+1)|0);
   var $29=$name;
   var $30=HEAP32[(($len)>>2)];
   assert($30 % 1 === 0);(_memcpy($28, $29, $30)|0);
   var $31=$name;
   var $32=_symname_p($31);
   var $33=(($32 << 24) >> 24)!=0;
   if ($33) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $35=$name;
   var $36=_strlen($35);
   var $37=HEAP32[(($len)>>2)];
   var $38=(($36)|(0))!=(($37)|(0));
   if ($38) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $40=$1;
   _mrb_str_dump($3, $40, $str);
   var $41=$str;
   var $42=$3;
   assert(12 % 1 === 0);HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];HEAP32[((($41)+(8))>>2)]=HEAP32[((($42)+(8))>>2)];
   var $43=(($str)|0);
   var $44=$43;
   var $45=HEAP32[(($44)>>2)];
   var $46=$45;
   var $47=(($46+20)|0);
   var $48=HEAP32[(($47)>>2)];
   assert(2 % 1 === 0);HEAP8[($48)]=HEAP8[((((85924)|0))|0)];HEAP8[((($48)+(1))|0)]=HEAP8[(((((85924)|0))+(1))|0)];
   label = 4; break;
  case 4: 
   var $50=$agg_result;
   var $51=$str;
   assert(12 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)];HEAP32[((($50)+(8))>>2)]=HEAP32[((($51)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_fill_flags111($p, $c, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$p;
   $2=$c;
   $3=$len;
   label = 2; break;
  case 2: 
   var $5=$3;
   var $6=((($5)-(1))|0);
   $3=$6;
   var $7=(($5)>>>(0)) > 0;
   if ($7) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $9=$2;
   var $10=$1;
   var $11=(($10+1)|0);
   $1=$11;
   HEAP8[($10)]=$9;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_get_iv($h, $key) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $k;
   $2=$h;
   $3=$key;
   var $4=$3;
   var $5=(($4 << 16) >> 16);
   var $6=$3;
   var $7=(($6 << 16) >> 16);
   var $8=$7 << 2;
   var $9=$5 ^ $8;
   var $10=$3;
   var $11=(($10 << 16) >> 16);
   var $12=$11 >> 2;
   var $13=$9 ^ $12;
   var $14=$2;
   var $15=(($14+28)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$13 & $16;
   $k=$17;
   label = 2; break;
  case 2: 
   var $19=$k;
   var $20=((((($19)>>>(0)))/(4))&-1);
   var $21=$2;
   var $22=(($21+16)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23+$20)|0);
   var $25=HEAP8[($24)];
   var $26=(($25)&(255));
   var $27=$k;
   var $28=((((($27)>>>(0)))%(4))&-1);
   var $29=((106164+$28)|0);
   var $30=HEAP8[($29)];
   var $31=(($30)&(255));
   var $32=$26 & $31;
   var $33=(($32)|(0))!=0;
   var $34=$33 ^ 1;
   if ($34) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $36=$k;
   var $37=((((($36)>>>(0)))/(4))&-1);
   var $38=$2;
   var $39=(($38+16)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40+$37)|0);
   var $42=HEAP8[($41)];
   var $43=(($42)&(255));
   var $44=$k;
   var $45=((((($44)>>>(0)))%(4))&-1);
   var $46=((106244+$45)|0);
   var $47=HEAP8[($46)];
   var $48=(($47)&(255));
   var $49=$43 & $48;
   var $50=(($49)|(0))!=0;
   if ($50) { label = 7; break; } else { label = 4; break; }
  case 4: 
   var $52=$k;
   var $53=$2;
   var $54=(($53+20)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+($52<<1))|0);
   var $57=HEAP16[(($56)>>1)];
   var $58=(($57 << 16) >> 16);
   var $59=$3;
   var $60=(($59 << 16) >> 16);
   var $61=(($58)|(0))==(($60)|(0));
   if ($61) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $63=$k;
   $1=$63;
   label = 9; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $66=$k;
   var $67=$2;
   var $68=(($67+32)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=((($66)+($69))|0);
   var $71=$2;
   var $72=(($71+28)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=$70 & $73;
   $k=$74;
   label = 2; break;
  case 8: 
   var $76=$2;
   var $77=(($76)|0);
   var $78=HEAP32[(($77)>>2)];
   $1=$78;
   label = 9; break;
  case 9: 
   var $80=$1;
   return $80;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_del_iv($h, $x) {
 var label = 0;
 var $1;
 var $2;
 $1=$h;
 $2=$x;
 var $3=$2;
 var $4=((((($3)>>>(0)))%(4))&-1);
 var $5=((106244+$4)|0);
 var $6=HEAP8[($5)];
 var $7=(($6)&(255));
 var $8=$2;
 var $9=((((($8)>>>(0)))/(4))&-1);
 var $10=$1;
 var $11=(($10+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+$9)|0);
 var $14=HEAP8[($13)];
 var $15=(($14)&(255));
 var $16=$15 | $7;
 var $17=(($16) & 255);
 HEAP8[($13)]=$17;
 var $18=$1;
 var $19=(($18+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=((($20)-(1))|0);
 HEAP32[(($19)>>2)]=$21;
 return;
}
function _sym_cmp($agg_result, $mrb, $s1) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $s1; $s1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($s1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $s2=sp;
   var $sym1;
   var $sym2;
   var $p1;
   var $p2;
   var $retval;
   var $len;
   var $len1=(sp)+(12);
   var $len2=(sp)+(16);
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((86848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$s2,tempInt));
   var $4=(($s2+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))!=4;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _mrb_nil_value89($agg_result);
   label = 17; break;
  case 3: 
   var $9=(($s1)|0);
   var $10=$9;
   var $11=HEAP16[(($10)>>1)];
   $sym1=$11;
   var $12=(($s2)|0);
   var $13=$12;
   var $14=HEAP16[(($13)>>1)];
   $sym2=$14;
   var $15=$sym1;
   var $16=(($15 << 16) >> 16);
   var $17=$sym2;
   var $18=(($17 << 16) >> 16);
   var $19=(($16)|(0))==(($18)|(0));
   if ($19) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _mrb_fixnum_value92($agg_result, 0);
   label = 17; break;
  case 5: 
   var $22=$1;
   var $23=$sym1;
   var $24=_mrb_sym2name_len($22, $23, $len1);
   $p1=$24;
   var $25=$1;
   var $26=$sym2;
   var $27=_mrb_sym2name_len($25, $26, $len2);
   $p2=$27;
   var $28=HEAP32[(($len1)>>2)];
   var $29=HEAP32[(($len2)>>2)];
   var $30=(($28)>>>(0)) > (($29)>>>(0));
   if ($30) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $32=HEAP32[(($len2)>>2)];
   var $36 = $32;label = 8; break;
  case 7: 
   var $34=HEAP32[(($len1)>>2)];
   var $36 = $34;label = 8; break;
  case 8: 
   var $36;
   $len=$36;
   var $37=$p1;
   var $38=$p2;
   var $39=$len;
   var $40=_memcmp($37, $38, $39);
   $retval=$40;
   var $41=$retval;
   var $42=(($41)|(0))==0;
   if ($42) { label = 9; break; } else { label = 14; break; }
  case 9: 
   var $44=HEAP32[(($len1)>>2)];
   var $45=HEAP32[(($len2)>>2)];
   var $46=(($44)|(0))==(($45)|(0));
   if ($46) { label = 10; break; } else { label = 11; break; }
  case 10: 
   _mrb_fixnum_value92($agg_result, 0);
   label = 17; break;
  case 11: 
   var $49=HEAP32[(($len1)>>2)];
   var $50=HEAP32[(($len2)>>2)];
   var $51=(($49)>>>(0)) > (($50)>>>(0));
   if ($51) { label = 12; break; } else { label = 13; break; }
  case 12: 
   _mrb_fixnum_value92($agg_result, 1);
   label = 17; break;
  case 13: 
   _mrb_fixnum_value92($agg_result, -1);
   label = 17; break;
  case 14: 
   var $55=$retval;
   var $56=(($55)|(0)) > 0;
   if ($56) { label = 15; break; } else { label = 16; break; }
  case 15: 
   _mrb_fixnum_value92($agg_result, 1);
   label = 17; break;
  case 16: 
   _mrb_fixnum_value92($agg_result, -1);
   label = 17; break;
  case 17: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_value92($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_bool_value93($agg_result, $boolean) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$boolean;
   label = 2; break;
  case 2: 
   var $3=$1;
   var $4=(($3)&(255));
   var $5=(($4)|(0))!=0;
   var $6=$5 ? 2 : 0;
   var $7=(($v+8)|0);
   HEAP32[(($7)>>2)]=$6;
   var $8=(($v)|0);
   var $9=$8;
   HEAP32[(($9)>>2)]=1;
   label = 3; break;
  case 3: 
   var $11=$agg_result;
   var $12=$v;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _is_special_global_name($m) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $2=$m;
   var $3=$2;
   var $4=HEAP8[($3)];
   var $5=(($4 << 24) >> 24);
   if ((($5)|(0))==126 | (($5)|(0))==42 | (($5)|(0))==36 | (($5)|(0))==63 | (($5)|(0))==33 | (($5)|(0))==64 | (($5)|(0))==47 | (($5)|(0))==92 | (($5)|(0))==59 | (($5)|(0))==44 | (($5)|(0))==46 | (($5)|(0))==61 | (($5)|(0))==58 | (($5)|(0))==60 | (($5)|(0))==62 | (($5)|(0))==34 | (($5)|(0))==38 | (($5)|(0))==96 | (($5)|(0))==39 | (($5)|(0))==43 | (($5)|(0))==48) {
    label = 2; break;
   }
   else if ((($5)|(0))==45) {
    label = 3; break;
   }
   else {
   label = 8; break;
   }
  case 2: 
   var $7=$2;
   var $8=(($7+1)|0);
   $2=$8;
   label = 14; break;
  case 3: 
   var $10=$2;
   var $11=(($10+1)|0);
   $2=$11;
   var $12=$2;
   var $13=HEAP8[($12)];
   var $14=(($13 << 24) >> 24);
   var $15=(($14)|(0))!=-1;
   if ($15) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $17=$2;
   var $18=HEAP8[($17)];
   var $19=(($18)&(255));
   var $20=_isalnum($19);
   var $21=(($20)|(0))!=0;
   if ($21) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $23=$2;
   var $24=HEAP8[($23)];
   var $25=(($24 << 24) >> 24);
   var $26=(($25)|(0))==95;
   if ($26) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $28=$2;
   var $29=(($28+1)|0);
   $2=$29;
   label = 7; break;
  case 7: 
   label = 14; break;
  case 8: 
   var $32=$2;
   var $33=HEAP8[($32)];
   var $34=(($33)&(255));
   var $35=_isdigit($34);
   var $36=(($35)|(0))!=0;
   if ($36) { label = 10; break; } else { label = 9; break; }
  case 9: 
   $1=0;
   label = 15; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $40=$2;
   var $41=(($40+1)|0);
   $2=$41;
   label = 12; break;
  case 12: 
   var $43=$2;
   var $44=HEAP8[($43)];
   var $45=(($44)&(255));
   var $46=_isdigit($45);
   var $47=(($46)|(0))!=0;
   if ($47) { label = 11; break; } else { label = 13; break; }
  case 13: 
   label = 14; break;
  case 14: 
   var $50=$2;
   var $51=HEAP8[($50)];
   var $52=(($51 << 24) >> 24)!=0;
   var $53=$52 ^ 1;
   var $54=(($53)&(1));
   var $55=(($54) & 255);
   $1=$55;
   label = 15; break;
  case 15: 
   var $57=$1;
   return $57;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_alloc_iv($h) {
 var label = 0;
 var $1;
 var $sz;
 var $p;
 $1=$h;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 $sz=$4;
 var $5=$1;
 var $6=(($5+36)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$sz;
 var $9=$8;
 var $10=((((($9)>>>(0)))/(4))&-1);
 var $11=$sz;
 var $12=((($11)*(14))&-1);
 var $13=((($10)+($12))|0);
 var $14=_mrb_malloc($7, $13);
 $p=$14;
 var $15=$1;
 var $16=(($15+8)|0);
 HEAP32[(($16)>>2)]=0;
 var $17=$1;
 var $18=(($17+4)|0);
 HEAP32[(($18)>>2)]=0;
 var $19=$sz;
 var $20=$19 >>> 2;
 var $21=$sz;
 var $22=$21 >>> 1;
 var $23=$20 | $22;
 var $24=$1;
 var $25=(($24+12)|0);
 HEAP32[(($25)>>2)]=$23;
 var $26=$p;
 var $27=$26;
 var $28=$1;
 var $29=(($28+20)|0);
 HEAP32[(($29)>>2)]=$27;
 var $30=$p;
 var $31=$sz;
 var $32=($31<<1);
 var $33=(($30+$32)|0);
 var $34=$33;
 var $35=$1;
 var $36=(($35+24)|0);
 HEAP32[(($36)>>2)]=$34;
 var $37=$p;
 var $38=$sz;
 var $39=($38<<1);
 var $40=(($37+$39)|0);
 var $41=$sz;
 var $42=((($41)*(12))&-1);
 var $43=(($40+$42)|0);
 var $44=$1;
 var $45=(($44+16)|0);
 HEAP32[(($45)>>2)]=$43;
 var $46=$1;
 var $47=(($46+16)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=$sz;
 var $50=((((($49)>>>(0)))/(4))&-1);
 _kh_fill_flags111($48, -86, $50);
 var $51=$sz;
 var $52=((($51)-(1))|0);
 var $53=$1;
 var $54=(($53+28)|0);
 HEAP32[(($54)>>2)]=$52;
 var $55=$sz;
 var $56=((((($55)>>>(0)))/(2))&-1);
 var $57=((($56)-(1))|0);
 var $58=$1;
 var $59=(($58+32)|0);
 HEAP32[(($59)>>2)]=$57;
 return;
}
function _kh_init_iv_size($mrb, $size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $h;
   $1=$mrb;
   $2=$size;
   var $3=$1;
   var $4=_mrb_calloc($3, 1, 40);
   var $5=$4;
   $h=$5;
   var $6=$2;
   var $7=(($6)>>>(0)) < 8;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $2=8;
   label = 3; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $11=$2;
   var $12=((($11)-(1))|0);
   $2=$12;
   var $13=$2;
   var $14=$13 >>> 1;
   var $15=$2;
   var $16=$15 | $14;
   $2=$16;
   var $17=$2;
   var $18=$17 >>> 2;
   var $19=$2;
   var $20=$19 | $18;
   $2=$20;
   var $21=$2;
   var $22=$21 >>> 4;
   var $23=$2;
   var $24=$23 | $22;
   $2=$24;
   var $25=$2;
   var $26=$25 >>> 8;
   var $27=$2;
   var $28=$27 | $26;
   $2=$28;
   var $29=$2;
   var $30=$29 >>> 16;
   var $31=$2;
   var $32=$31 | $30;
   $2=$32;
   var $33=$2;
   var $34=((($33)+(1))|0);
   $2=$34;
   label = 5; break;
  case 5: 
   var $36=$2;
   var $37=$h;
   var $38=(($37)|0);
   HEAP32[(($38)>>2)]=$36;
   var $39=$1;
   var $40=$h;
   var $41=(($40+36)|0);
   HEAP32[(($41)>>2)]=$39;
   var $42=$h;
   _kh_alloc_iv($42);
   var $43=$h;
   return $43;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_init_iv($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=_kh_init_iv_size($2, 32);
 return $3;
}
function _kh_destroy_iv($h) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$h;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $5=$1;
   var $6=(($5+36)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$1;
   var $9=(($8+20)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$10;
   _mrb_free($7, $11);
   var $12=$1;
   var $13=(($12+36)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$1;
   var $16=$15;
   _mrb_free($14, $16);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_resize_iv($h, $new_n_buckets) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $old_ed_flags;
   var $old_keys;
   var $old_vals;
   var $old_n_buckets;
   var $i;
   var $k;
   $1=$h;
   $2=$new_n_buckets;
   var $3=$2;
   var $4=(($3)>>>(0)) < 8;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $2=8;
   label = 3; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $8=$2;
   var $9=((($8)-(1))|0);
   $2=$9;
   var $10=$2;
   var $11=$10 >>> 1;
   var $12=$2;
   var $13=$12 | $11;
   $2=$13;
   var $14=$2;
   var $15=$14 >>> 2;
   var $16=$2;
   var $17=$16 | $15;
   $2=$17;
   var $18=$2;
   var $19=$18 >>> 4;
   var $20=$2;
   var $21=$20 | $19;
   $2=$21;
   var $22=$2;
   var $23=$22 >>> 8;
   var $24=$2;
   var $25=$24 | $23;
   $2=$25;
   var $26=$2;
   var $27=$26 >>> 16;
   var $28=$2;
   var $29=$28 | $27;
   $2=$29;
   var $30=$2;
   var $31=((($30)+(1))|0);
   $2=$31;
   label = 5; break;
  case 5: 
   var $33=$1;
   var $34=(($33+16)|0);
   var $35=HEAP32[(($34)>>2)];
   $old_ed_flags=$35;
   var $36=$1;
   var $37=(($36+20)|0);
   var $38=HEAP32[(($37)>>2)];
   $old_keys=$38;
   var $39=$1;
   var $40=(($39+24)|0);
   var $41=HEAP32[(($40)>>2)];
   $old_vals=$41;
   var $42=$1;
   var $43=(($42)|0);
   var $44=HEAP32[(($43)>>2)];
   $old_n_buckets=$44;
   var $45=$2;
   var $46=$1;
   var $47=(($46)|0);
   HEAP32[(($47)>>2)]=$45;
   var $48=$1;
   _kh_alloc_iv($48);
   $i=0;
   label = 6; break;
  case 6: 
   var $50=$i;
   var $51=$old_n_buckets;
   var $52=(($50)>>>(0)) < (($51)>>>(0));
   if ($52) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $54=$i;
   var $55=((((($54)>>>(0)))/(4))&-1);
   var $56=$old_ed_flags;
   var $57=(($56+$55)|0);
   var $58=HEAP8[($57)];
   var $59=(($58)&(255));
   var $60=$i;
   var $61=((((($60)>>>(0)))%(4))&-1);
   var $62=((106196+$61)|0);
   var $63=HEAP8[($62)];
   var $64=(($63)&(255));
   var $65=$59 & $64;
   var $66=(($65)|(0))!=0;
   if ($66) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $68=$1;
   var $69=$i;
   var $70=$old_keys;
   var $71=(($70+($69<<1))|0);
   var $72=HEAP16[(($71)>>1)];
   var $73=_kh_put_iv($68, $72);
   $k=$73;
   var $74=$k;
   var $75=$1;
   var $76=(($75+24)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($77+((($74)*(12))&-1))|0);
   var $79=$i;
   var $80=$old_vals;
   var $81=(($80+((($79)*(12))&-1))|0);
   var $82=$78;
   var $83=$81;
   assert(12 % 1 === 0);HEAP32[(($82)>>2)]=HEAP32[(($83)>>2)];HEAP32[((($82)+(4))>>2)]=HEAP32[((($83)+(4))>>2)];HEAP32[((($82)+(8))>>2)]=HEAP32[((($83)+(8))>>2)];
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $86=$i;
   var $87=((($86)+(1))|0);
   $i=$87;
   label = 6; break;
  case 11: 
   var $89=$1;
   var $90=(($89+36)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=$old_keys;
   var $93=$92;
   _mrb_free($91, $93);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_put_iv($h, $key) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $k;
   $1=$h;
   $2=$key;
   var $3=$1;
   var $4=(($3+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$1;
   var $7=(($6+12)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($5)>>>(0)) >= (($8)>>>(0));
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$1;
   var $12=$1;
   var $13=(($12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=($14<<1);
   _kh_resize_iv($11, $15);
   label = 3; break;
  case 3: 
   var $17=$2;
   var $18=(($17 << 16) >> 16);
   var $19=$2;
   var $20=(($19 << 16) >> 16);
   var $21=$20 << 2;
   var $22=$18 ^ $21;
   var $23=$2;
   var $24=(($23 << 16) >> 16);
   var $25=$24 >> 2;
   var $26=$22 ^ $25;
   var $27=$1;
   var $28=(($27+28)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$26 & $29;
   $k=$30;
   label = 4; break;
  case 4: 
   var $32=$k;
   var $33=((((($32)>>>(0)))/(4))&-1);
   var $34=$1;
   var $35=(($34+16)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36+$33)|0);
   var $38=HEAP8[($37)];
   var $39=(($38)&(255));
   var $40=$k;
   var $41=((((($40)>>>(0)))%(4))&-1);
   var $42=((106196+$41)|0);
   var $43=HEAP8[($42)];
   var $44=(($43)&(255));
   var $45=$39 & $44;
   var $46=(($45)|(0))!=0;
   var $47=$46 ^ 1;
   if ($47) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $49=$k;
   var $50=$1;
   var $51=(($50+20)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52+($49<<1))|0);
   var $54=HEAP16[(($53)>>1)];
   var $55=(($54 << 16) >> 16);
   var $56=$2;
   var $57=(($56 << 16) >> 16);
   var $58=(($55)|(0))==(($57)|(0));
   if ($58) { label = 6; break; } else { label = 7; break; }
  case 6: 
   label = 8; break;
  case 7: 
   var $61=$k;
   var $62=$1;
   var $63=(($62+32)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=((($61)+($64))|0);
   var $66=$1;
   var $67=(($66+28)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=$65 & $68;
   $k=$69;
   label = 4; break;
  case 8: 
   var $71=$k;
   var $72=((((($71)>>>(0)))/(4))&-1);
   var $73=$1;
   var $74=(($73+16)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($75+$72)|0);
   var $77=HEAP8[($76)];
   var $78=(($77)&(255));
   var $79=$k;
   var $80=((((($79)>>>(0)))%(4))&-1);
   var $81=((106164+$80)|0);
   var $82=HEAP8[($81)];
   var $83=(($82)&(255));
   var $84=$78 & $83;
   var $85=(($84)|(0))!=0;
   if ($85) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $87=$2;
   var $88=$k;
   var $89=$1;
   var $90=(($89+20)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=(($91+($88<<1))|0);
   HEAP16[(($92)>>1)]=$87;
   var $93=$k;
   var $94=((((($93)>>>(0)))%(4))&-1);
   var $95=((106164+$94)|0);
   var $96=HEAP8[($95)];
   var $97=(($96)&(255));
   var $98=$97 ^ -1;
   var $99=$k;
   var $100=((((($99)>>>(0)))/(4))&-1);
   var $101=$1;
   var $102=(($101+16)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=(($103+$100)|0);
   var $105=HEAP8[($104)];
   var $106=(($105)&(255));
   var $107=$106 & $98;
   var $108=(($107) & 255);
   HEAP8[($104)]=$108;
   var $109=$1;
   var $110=(($109+4)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=((($111)+(1))|0);
   HEAP32[(($110)>>2)]=$112;
   var $113=$1;
   var $114=(($113+8)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=((($115)+(1))|0);
   HEAP32[(($114)>>2)]=$116;
   label = 13; break;
  case 10: 
   var $118=$k;
   var $119=((((($118)>>>(0)))/(4))&-1);
   var $120=$1;
   var $121=(($120+16)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=(($122+$119)|0);
   var $124=HEAP8[($123)];
   var $125=(($124)&(255));
   var $126=$k;
   var $127=((((($126)>>>(0)))%(4))&-1);
   var $128=((106244+$127)|0);
   var $129=HEAP8[($128)];
   var $130=(($129)&(255));
   var $131=$125 & $130;
   var $132=(($131)|(0))!=0;
   if ($132) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $134=$2;
   var $135=$k;
   var $136=$1;
   var $137=(($136+20)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(($138+($135<<1))|0);
   HEAP16[(($139)>>1)]=$134;
   var $140=$k;
   var $141=((((($140)>>>(0)))%(4))&-1);
   var $142=((106244+$141)|0);
   var $143=HEAP8[($142)];
   var $144=(($143)&(255));
   var $145=$144 ^ -1;
   var $146=$k;
   var $147=((((($146)>>>(0)))/(4))&-1);
   var $148=$1;
   var $149=(($148+16)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($150+$147)|0);
   var $152=HEAP8[($151)];
   var $153=(($152)&(255));
   var $154=$153 & $145;
   var $155=(($154) & 255);
   HEAP8[($151)]=$155;
   var $156=$1;
   var $157=(($156+4)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=((($158)+(1))|0);
   HEAP32[(($157)>>2)]=$159;
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $162=$k;
   return $162;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_vm_special_set($mrb, $i, $v) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 $1=$mrb;
 $2=$i;
 STACKTOP = sp;
 return;
}
function _iv_size($mrb, $t) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $h;
   $2=$mrb;
   $3=$t;
   var $4=$3;
   var $5=(($4)|0);
   $h=$5;
   var $6=$h;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 4; break;
  case 3: 
   var $10=$h;
   var $11=(($10+4)|0);
   var $12=HEAP32[(($11)>>2)];
   $1=$12;
   label = 4; break;
  case 4: 
   var $14=$1;
   return $14;
  default: assert(0, "bad label: " + label);
 }
}
function _obj_iv_p($obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2=(($obj+8)|0);
   var $3=HEAP32[(($2)>>2)];
   if ((($3)|(0))==8 | (($3)|(0))==9 | (($3)|(0))==10 | (($3)|(0))==12 | (($3)|(0))==15 | (($3)|(0))==21) {
    label = 2; break;
   }
   else {
   label = 3; break;
   }
  case 2: 
   $1=1;
   label = 4; break;
  case 3: 
   $1=0;
   label = 4; break;
  case 4: 
   var $7=$1;
   STACKTOP = sp;
   return $7;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_copy_iv($mrb, $h) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $h2;
   var $k;
   var $k2;
   $1=$mrb;
   $2=$h;
   var $3=$1;
   var $4=_kh_init_iv($3);
   $h2=$4;
   $k=0;
   label = 2; break;
  case 2: 
   var $6=$k;
   var $7=$2;
   var $8=(($7)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($6)|(0))!=(($9)|(0));
   if ($10) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $12=$k;
   var $13=((((($12)>>>(0)))/(4))&-1);
   var $14=$2;
   var $15=(($14+16)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16+$13)|0);
   var $18=HEAP8[($17)];
   var $19=(($18)&(255));
   var $20=$k;
   var $21=((((($20)>>>(0)))%(4))&-1);
   var $22=((106196+$21)|0);
   var $23=HEAP8[($22)];
   var $24=(($23)&(255));
   var $25=$19 & $24;
   var $26=(($25)|(0))!=0;
   if ($26) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $28=$h2;
   var $29=$k;
   var $30=$2;
   var $31=(($30+20)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32+($29<<1))|0);
   var $34=HEAP16[(($33)>>1)];
   var $35=_kh_put_iv($28, $34);
   $k2=$35;
   var $36=$k2;
   var $37=$h2;
   var $38=(($37+24)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39+((($36)*(12))&-1))|0);
   var $41=$k;
   var $42=$2;
   var $43=(($42+24)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=(($44+((($41)*(12))&-1))|0);
   var $46=$40;
   var $47=$45;
   assert(12 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($46)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $50=$k;
   var $51=((($50)+(1))|0);
   $k=$51;
   label = 2; break;
  case 7: 
   var $53=$h2;
   return $53;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_gc_mark_gv($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=(($3+20)|0);
 var $5=HEAP32[(($4)>>2)];
 _mark_tbl($2, $5);
 return;
}
function _mark_tbl($mrb, $t) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$t;
   var $3=$2;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$1;
   var $7=$2;
   var $8=_iv_foreach($6, $7, 210, 0);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_gc_free_gv($mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$mrb;
   var $2=$1;
   var $3=(($2+20)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   var $8=$1;
   var $9=(($8+20)|0);
   var $10=HEAP32[(($9)>>2)];
   _iv_free($7, $10);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _iv_free($mrb, $t) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$t;
 var $3=$2;
 var $4=(($3)|0);
 _kh_destroy_iv($4);
 return;
}
function _mrb_gc_mark_iv($mrb, $obj) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$obj;
 var $3=$1;
 var $4=$2;
 var $5=(($4+12)|0);
 var $6=HEAP32[(($5)>>2)];
 _mark_tbl($3, $6);
 return;
}
function _mrb_gc_mark_iv_size($mrb, $obj) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$obj;
 var $3=$1;
 var $4=$2;
 var $5=(($4+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=_iv_size($3, $6);
 return $7;
}
function _mrb_gc_free_iv($mrb, $obj) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$obj;
   var $3=$2;
   var $4=(($3+12)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$1;
   var $9=$2;
   var $10=(($9+12)|0);
   var $11=HEAP32[(($10)>>2)];
   _iv_free($8, $11);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_vm_special_get($agg_result, $mrb, $i) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$i;
 _mrb_fixnum_value114($agg_result, 0);
 return;
}
function _mrb_fixnum_value114($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_iv_get($agg_result, $mrb, $obj, $sym) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $v=sp;
   $1=$mrb;
   $2=$obj;
   $3=$sym;
   var $4=$2;
   var $5=(($4+12)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))!=0;
   if ($7) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $9=$1;
   var $10=$2;
   var $11=(($10+12)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$3;
   var $14=_iv_get($9, $12, $13, $v);
   var $15=(($14)&(255));
   var $16=(($15)|(0))!=0;
   if ($16) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $18=$agg_result;
   var $19=$v;
   assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
   label = 5; break;
  case 4: 
   _mrb_nil_value115($agg_result);
   label = 5; break;
  case 5: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _iv_get($mrb, $t, $sym, $vp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $h;
   var $k;
   $2=$mrb;
   $3=$t;
   $4=$sym;
   $5=$vp;
   var $6=$3;
   var $7=(($6)|0);
   $h=$7;
   var $8=$h;
   var $9=$4;
   var $10=_kh_get_iv($8, $9);
   $k=$10;
   var $11=$k;
   var $12=$h;
   var $13=(($12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($11)|(0))!=(($14)|(0));
   if ($15) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $17=$5;
   var $18=(($17)|(0))!=0;
   if ($18) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $20=$5;
   var $21=$k;
   var $22=$h;
   var $23=(($22+24)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24+((($21)*(12))&-1))|0);
   var $26=$20;
   var $27=$25;
   assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
   label = 4; break;
  case 4: 
   $1=1;
   label = 6; break;
  case 5: 
   $1=0;
   label = 6; break;
  case 6: 
   var $31=$1;
   return $31;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value115($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_iv_get($agg_result, $mrb, $obj, $sym) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$sym;
   var $3=_obj_iv_p($obj);
   var $4=(($3 << 24) >> 24)!=0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$1;
   var $7=(($obj)|0);
   var $8=$7;
   var $9=HEAP32[(($8)>>2)];
   var $10=$9;
   var $11=$2;
   _mrb_obj_iv_get($agg_result, $6, $10, $11);
   label = 4; break;
  case 3: 
   _mrb_nil_value115($agg_result);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_iv_set($mrb, $obj, $sym, $v) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $t;
   $1=$mrb;
   $2=$obj;
   $3=$sym;
   var $4=$2;
   var $5=(($4+12)|0);
   var $6=HEAP32[(($5)>>2)];
   $t=$6;
   var $7=$t;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=$1;
   var $11=_iv_new($10);
   var $12=$2;
   var $13=(($12+12)|0);
   HEAP32[(($13)>>2)]=$11;
   $t=$11;
   label = 3; break;
  case 3: 
   var $15=$1;
   var $16=$2;
   var $17=$16;
   _mrb_write_barrier($15, $17);
   var $18=$1;
   var $19=$t;
   var $20=$3;
   _iv_put($18, $19, $20, $v);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _iv_new($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=_kh_init_iv_size($2, 8);
 var $4=$3;
 return $4;
}
function _iv_put($mrb, $t, $sym, $val) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 var $3;
 var $h;
 var $k;
 $1=$mrb;
 $2=$t;
 $3=$sym;
 var $4=$2;
 var $5=(($4)|0);
 $h=$5;
 var $6=$h;
 var $7=$3;
 var $8=_kh_put_iv($6, $7);
 $k=$8;
 var $9=$k;
 var $10=$h;
 var $11=(($10+24)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+((($9)*(12))&-1))|0);
 var $14=$13;
 var $15=$val;
 assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_obj_iv_ifnone($mrb, $obj, $sym, $v) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $t;
   $1=$mrb;
   $2=$obj;
   $3=$sym;
   var $4=$2;
   var $5=(($4+12)|0);
   var $6=HEAP32[(($5)>>2)];
   $t=$6;
   var $7=$t;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=$1;
   var $11=_iv_new($10);
   var $12=$2;
   var $13=(($12+12)|0);
   HEAP32[(($13)>>2)]=$11;
   $t=$11;
   label = 6; break;
  case 3: 
   var $15=$1;
   var $16=$t;
   var $17=$3;
   var $18=_iv_get($15, $16, $17, $v);
   var $19=(($18 << 24) >> 24)!=0;
   if ($19) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 7; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $23=$1;
   var $24=$2;
   var $25=$24;
   _mrb_write_barrier($23, $25);
   var $26=$1;
   var $27=$t;
   var $28=$3;
   _iv_put($26, $27, $28, $v);
   label = 7; break;
  case 7: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_iv_set($mrb, $obj, $sym, $v) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$sym;
   var $3=_obj_iv_p($obj);
   var $4=(($3 << 24) >> 24)!=0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$1;
   var $7=(($obj)|0);
   var $8=$7;
   var $9=HEAP32[(($8)>>2)];
   var $10=$9;
   var $11=$2;
   _mrb_obj_iv_set($6, $10, $11, $v);
   label = 4; break;
  case 3: 
   var $13=$1;
   var $14=$1;
   var $15=_mrb_class_get($14, ((86012)|0));
   _mrb_raise($13, $15, ((100972)|0));
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_iv_defined($mrb, $obj, $sym) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $t;
   $2=$mrb;
   $3=$obj;
   $4=$sym;
   var $5=$3;
   var $6=(($5+12)|0);
   var $7=HEAP32[(($6)>>2)];
   $t=$7;
   var $8=$t;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$2;
   var $12=$t;
   var $13=$4;
   var $14=_iv_get($11, $12, $13, 0);
   $1=$14;
   label = 4; break;
  case 3: 
   $1=0;
   label = 4; break;
  case 4: 
   var $17=$1;
   return $17;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_iv_copy($mrb, $dest, $src) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $dest; $dest = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dest)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dest)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($dest)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $src; $src = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($src)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($src)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($src)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $d;
   var $s;
   $1=$mrb;
   var $2=(($dest)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $d=$5;
   var $6=(($src)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=$8;
   $s=$9;
   var $10=$d;
   var $11=(($10+12)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))!=0;
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $15=$1;
   var $16=$d;
   var $17=(($16+12)|0);
   var $18=HEAP32[(($17)>>2)];
   _iv_free($15, $18);
   var $19=$d;
   var $20=(($19+12)|0);
   HEAP32[(($20)>>2)]=0;
   label = 3; break;
  case 3: 
   var $22=$s;
   var $23=(($22+12)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))!=0;
   if ($25) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $27=$1;
   var $28=$s;
   var $29=(($28+12)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=_iv_copy($27, $30);
   var $32=$d;
   var $33=(($32+12)|0);
   HEAP32[(($33)>>2)]=$31;
   label = 5; break;
  case 5: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _iv_copy($mrb, $t) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$t;
 var $3=$1;
 var $4=$2;
 var $5=(($4)|0);
 var $6=_kh_copy_iv($3, $5);
 var $7=$6;
 return $7;
}
function _mrb_obj_iv_inspect($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 96)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $t;
   var $len;
   var $cn;
   var $3=sp;
   var $str=(sp)+(12);
   var $4=(sp)+(24);
   var $5=(sp)+(36);
   var $6=(sp)+(48);
   var $7=(sp)+(60);
   var $8=(sp)+(72);
   var $9=(sp)+(84);
   $1=$mrb;
   $2=$obj;
   var $10=$2;
   var $11=(($10+12)|0);
   var $12=HEAP32[(($11)>>2)];
   $t=$12;
   var $13=$1;
   var $14=$t;
   var $15=_iv_size($13, $14);
   $len=$15;
   var $16=$len;
   var $17=(($16)>>>(0)) > 0;
   if ($17) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $19=$1;
   var $20=$2;
   var $21=$20;
   _mrb_obj_value116($3, $21);
   var $22=_mrb_obj_classname($19, $3);
   $cn=$22;
   var $23=$1;
   _mrb_str_buf_new($str, $23, 30);
   var $24=$1;
   _mrb_str_buf_cat($4, $24, $str, ((97276)|0), 2);
   var $25=$1;
   var $26=$cn;
   _mrb_str_cat2($5, $25, $str, $26);
   var $27=$1;
   _mrb_str_cat($6, $27, $str, ((96928)|0), 1);
   var $28=$1;
   var $29=$1;
   var $30=$2;
   var $31=$30;
   _mrb_ptr_to_str($7, $29, $31);
   _mrb_str_concat($28, $str, $7);
   var $32=$1;
   var $33=$t;
   var $34=$str;
   var $35=_iv_foreach($32, $33, 294, $34);
   var $36=$1;
   _mrb_str_cat($8, $36, $str, ((94324)|0), 1);
   var $37=$agg_result;
   var $38=$str;
   assert(12 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];
   label = 4; break;
  case 3: 
   var $40=$1;
   var $41=$2;
   var $42=$41;
   _mrb_obj_value116($9, $42);
   _mrb_any_to_s($agg_result, $40, $9);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_value116($agg_result, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   var $b;
   $1=$p;
   var $2=$1;
   var $3=$2;
   $b=$3;
   label = 2; break;
  case 2: 
   var $5=$b;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 255;
   var $9=(($v+8)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=$1;
   var $11=(($v)|0);
   var $12=$11;
   HEAP32[(($12)>>2)]=$10;
   label = 3; break;
  case 3: 
   var $14=$agg_result;
   var $15=$v;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_cat2($agg_result, $mrb, $str, $ptr) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 $1=$mrb;
 $2=$ptr;
 var $3=$1;
 var $4=$2;
 _mrb_str_cat_cstr($agg_result, $3, $str, $4);
 STACKTOP = sp;
 return;
}
function _iv_foreach($mrb, $t, $func, $p) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $h;
   var $k;
   var $n;
   $2=$mrb;
   $3=$t;
   $4=$func;
   $5=$p;
   var $6=$3;
   var $7=(($6)|0);
   $h=$7;
   var $8=$h;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 13; break; }
  case 2: 
   $k=0;
   label = 3; break;
  case 3: 
   var $12=$k;
   var $13=$h;
   var $14=(($13)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($12)|(0))!=(($15)|(0));
   if ($16) { label = 4; break; } else { label = 12; break; }
  case 4: 
   var $18=$k;
   var $19=((((($18)>>>(0)))/(4))&-1);
   var $20=$h;
   var $21=(($20+16)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+$19)|0);
   var $24=HEAP8[($23)];
   var $25=(($24)&(255));
   var $26=$k;
   var $27=((((($26)>>>(0)))%(4))&-1);
   var $28=((106196+$27)|0);
   var $29=HEAP8[($28)];
   var $30=(($29)&(255));
   var $31=$25 & $30;
   var $32=(($31)|(0))!=0;
   if ($32) { label = 10; break; } else { label = 5; break; }
  case 5: 
   var $34=$4;
   var $35=$2;
   var $36=$k;
   var $37=$h;
   var $38=(($37+20)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39+($36<<1))|0);
   var $41=HEAP16[(($40)>>1)];
   var $42=$k;
   var $43=$h;
   var $44=(($43+24)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($45+((($42)*(12))&-1))|0);
   var $47=$5;
   var $48=FUNCTION_TABLE[$34]($35, $41, $46, $47);
   $n=$48;
   var $49=$n;
   var $50=(($49)|(0)) > 0;
   if ($50) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $1=0;
   label = 14; break;
  case 7: 
   var $53=$n;
   var $54=(($53)|(0)) < 0;
   if ($54) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $56=$h;
   var $57=$k;
   _kh_del_iv($56, $57);
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $61=$k;
   var $62=((($61)+(1))|0);
   $k=$62;
   label = 3; break;
  case 12: 
   label = 13; break;
  case 13: 
   $1=1;
   label = 14; break;
  case 14: 
   var $66=$1;
   return $66;
  default: assert(0, "bad label: " + label);
 }
}
function _inspect_i($mrb, $sym, $v, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 88)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $str=sp;
   var $s;
   var $len=(sp)+(12);
   var $4=(sp)+(16);
   var $5=(sp)+(28);
   var $6=(sp)+(40);
   var $7=(sp)+(52);
   var $8=(sp)+(64);
   var $9=(sp)+(76);
   $1=$mrb;
   $2=$sym;
   $3=$p;
   var $10=$3;
   var $11=$10;
   var $12=$str;
   var $13=$11;
   assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
   var $14=(($str)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=$16;
   var $18=(($17+20)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19)|0);
   var $21=HEAP8[($20)];
   var $22=(($21 << 24) >> 24);
   var $23=(($22)|(0))==45;
   if ($23) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $25=(($str)|0);
   var $26=$25;
   var $27=HEAP32[(($26)>>2)];
   var $28=$27;
   var $29=(($28+20)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30)|0);
   HEAP8[($31)]=35;
   var $32=$1;
   _mrb_str_cat($4, $32, $str, ((105380)|0), 1);
   label = 4; break;
  case 3: 
   var $34=$1;
   _mrb_str_cat($5, $34, $str, ((104600)|0), 2);
   label = 4; break;
  case 4: 
   var $36=$1;
   var $37=$2;
   var $38=_mrb_sym2name_len($36, $37, $len);
   $s=$38;
   var $39=$1;
   var $40=$s;
   var $41=HEAP32[(($len)>>2)];
   _mrb_str_cat($6, $39, $str, $40, $41);
   var $42=$1;
   _mrb_str_cat($7, $42, $str, ((104140)|0), 1);
   var $43=$1;
   var $44=$1;
   _mrb_inspect($8, $44, $v);
   _mrb_str_append($9, $43, $str, $8);
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_iv_remove($agg_result, $mrb, $obj, $sym) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $t;
   var $val=sp;
   $1=$mrb;
   $2=$sym;
   var $3=_obj_iv_p($obj);
   var $4=(($3 << 24) >> 24)!=0;
   if ($4) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $6=(($obj)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=$8;
   var $10=(($9+12)|0);
   var $11=HEAP32[(($10)>>2)];
   $t=$11;
   var $12=$t;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $15=$1;
   var $16=$t;
   var $17=$2;
   var $18=_iv_del($15, $16, $17, $val);
   var $19=(($18)&(255));
   var $20=(($19)|(0))!=0;
   if ($20) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $22=$agg_result;
   var $23=$val;
   assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
   label = 7; break;
  case 5: 
   label = 6; break;
  case 6: 
   _mrb_undef_value117($agg_result);
   label = 7; break;
  case 7: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _iv_del($mrb, $t, $sym, $vp) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $h;
   var $k;
   var $val=sp;
   $2=$mrb;
   $3=$t;
   $4=$sym;
   $5=$vp;
   var $6=$3;
   var $7=(($6)|0);
   $h=$7;
   var $8=$h;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 7; break; }
  case 2: 
   var $11=$h;
   var $12=$4;
   var $13=_kh_get_iv($11, $12);
   $k=$13;
   var $14=$k;
   var $15=$h;
   var $16=(($15)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($14)|(0))!=(($17)|(0));
   if ($18) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $20=$k;
   var $21=$h;
   var $22=(($21+24)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23+((($20)*(12))&-1))|0);
   var $25=$val;
   var $26=$24;
   assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
   var $27=$h;
   var $28=$k;
   _kh_del_iv($27, $28);
   var $29=$5;
   var $30=(($29)|(0))!=0;
   if ($30) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $32=$5;
   var $33=$32;
   var $34=$val;
   assert(12 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];HEAP32[((($33)+(8))>>2)]=HEAP32[((($34)+(8))>>2)];
   label = 5; break;
  case 5: 
   $1=1;
   label = 8; break;
  case 6: 
   label = 7; break;
  case 7: 
   $1=0;
   label = 8; break;
  case 8: 
   var $39=$1;
   STACKTOP = sp;
   return $39;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_undef_value117($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=5;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_vm_iv_get($agg_result, $mrb, $sym) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$sym;
 var $3=$1;
 var $4=$1;
 var $5=(($4+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8)|0);
 var $10=$2;
 _mrb_iv_get($agg_result, $3, $9, $10);
 return;
}
function _mrb_vm_iv_set($mrb, $sym, $v) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 $1=$mrb;
 $2=$sym;
 var $3=$1;
 var $4=$1;
 var $5=(($4+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8)|0);
 var $10=$2;
 _mrb_iv_set($3, $9, $10, $v);
 STACKTOP = sp;
 return;
}
function _mrb_obj_instance_variables($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ary=sp;
   var $2=(sp)+(12);
   $1=$mrb;
   var $3=$1;
   _mrb_ary_new($2, $3);
   var $4=$ary;
   var $5=$2;
   assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
   var $6=_obj_iv_p($self);
   var $7=(($6)&(255));
   var $8=(($7)|(0))!=0;
   if ($8) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $10=(($self)|0);
   var $11=$10;
   var $12=HEAP32[(($11)>>2)];
   var $13=$12;
   var $14=(($13+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))!=0;
   if ($16) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $18=$1;
   var $19=(($self)|0);
   var $20=$19;
   var $21=HEAP32[(($20)>>2)];
   var $22=$21;
   var $23=(($22+12)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$ary;
   var $26=_iv_foreach($18, $24, 108, $25);
   label = 4; break;
  case 4: 
   var $28=$agg_result;
   var $29=$ary;
   assert(12 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[((($29)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _iv_i($mrb, $sym, $v, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $ary=sp;
   var $s;
   var $len=(sp)+(12);
   var $4=(sp)+(16);
   $1=$mrb;
   $2=$sym;
   $3=$p;
   var $5=$3;
   var $6=$5;
   var $7=$ary;
   var $8=$6;
   assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
   var $9=$1;
   var $10=$2;
   var $11=_mrb_sym2name_len($9, $10, $len);
   $s=$11;
   var $12=HEAP32[(($len)>>2)];
   var $13=(($12)>>>(0)) > 1;
   if ($13) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $15=$s;
   var $16=(($15)|0);
   var $17=HEAP8[($16)];
   var $18=(($17 << 24) >> 24);
   var $19=(($18)|(0))==64;
   if ($19) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $21=$s;
   var $22=(($21+1)|0);
   var $23=HEAP8[($22)];
   var $24=(($23 << 24) >> 24);
   var $25=(($24)|(0))!=64;
   if ($25) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $27=$1;
   var $28=$2;
   _mrb_symbol_value118($4, $28);
   _mrb_ary_push($27, $ary, $4);
   label = 5; break;
  case 5: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mod_class_variables($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ary=sp;
   var $c;
   var $2=(sp)+(12);
   $1=$mrb;
   var $3=$1;
   _mrb_ary_new($2, $3);
   var $4=$ary;
   var $5=$2;
   assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
   var $6=(($mod)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=$8;
   $c=$9;
   label = 2; break;
  case 2: 
   var $11=$c;
   var $12=(($11)|(0))!=0;
   if ($12) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $14=$c;
   var $15=(($14+12)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))!=0;
   if ($17) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $19=$1;
   var $20=$c;
   var $21=(($20+12)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$ary;
   var $24=_iv_foreach($19, $22, 150, $23);
   label = 5; break;
  case 5: 
   var $26=$c;
   var $27=(($26+20)|0);
   var $28=HEAP32[(($27)>>2)];
   $c=$28;
   label = 2; break;
  case 6: 
   var $30=$agg_result;
   var $31=$ary;
   assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cv_i($mrb, $sym, $v, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $ary=sp;
   var $s;
   var $len=(sp)+(12);
   var $4=(sp)+(16);
   $1=$mrb;
   $2=$sym;
   $3=$p;
   var $5=$3;
   var $6=$5;
   var $7=$ary;
   var $8=$6;
   assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
   var $9=$1;
   var $10=$2;
   var $11=_mrb_sym2name_len($9, $10, $len);
   $s=$11;
   var $12=HEAP32[(($len)>>2)];
   var $13=(($12)>>>(0)) > 2;
   if ($13) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $15=$s;
   var $16=(($15)|0);
   var $17=HEAP8[($16)];
   var $18=(($17 << 24) >> 24);
   var $19=(($18)|(0))==64;
   if ($19) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $21=$s;
   var $22=(($21+1)|0);
   var $23=HEAP8[($22)];
   var $24=(($23 << 24) >> 24);
   var $25=(($24)|(0))==64;
   if ($25) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $27=$1;
   var $28=$2;
   _mrb_symbol_value118($4, $28);
   _mrb_ary_push($27, $ary, $4);
   label = 5; break;
  case 5: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mod_cv_get($agg_result, $mrb, $c, $sym) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $cls;
   var $t;
   var $v=sp;
   var $4=(sp)+(12);
   var $5=(sp)+(24);
   $1=$mrb;
   $2=$c;
   $3=$sym;
   var $6=$2;
   $cls=$6;
   label = 2; break;
  case 2: 
   var $8=$2;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $11=$2;
   var $12=(($11+12)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))!=0;
   if ($14) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $16=$2;
   var $17=(($16+12)|0);
   var $18=HEAP32[(($17)>>2)];
   $t=$18;
   var $19=$1;
   var $20=$t;
   var $21=$3;
   var $22=_iv_get($19, $20, $21, $v);
   var $23=(($22 << 24) >> 24)!=0;
   if ($23) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $25=$agg_result;
   var $26=$v;
   assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
   label = 9; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $29=$2;
   var $30=(($29+20)|0);
   var $31=HEAP32[(($30)>>2)];
   $2=$31;
   label = 2; break;
  case 8: 
   var $33=$1;
   var $34=$3;
   var $35=$1;
   var $36=$3;
   _mrb_sym2str($4, $35, $36);
   var $37=$cls;
   var $38=$37;
   _mrb_obj_value116($5, $38);
   _mrb_name_error($33, $34, ((91796)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($5)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
   _mrb_nil_value115($agg_result);
   label = 9; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_cv_get($agg_result, $mrb, $mod, $sym) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 $1=$mrb;
 $2=$sym;
 var $3=$1;
 var $4=(($mod)|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 var $8=$2;
 _mrb_mod_cv_get($agg_result, $3, $7, $8);
 STACKTOP = sp;
 return;
}
function _mrb_mod_cv_set($mrb, $c, $sym, $v) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $cls;
   var $t;
   $1=$mrb;
   $2=$c;
   $3=$sym;
   var $4=$2;
   $cls=$4;
   label = 2; break;
  case 2: 
   var $6=$2;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $9=$2;
   var $10=(($9+12)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))!=0;
   if ($12) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $14=$2;
   var $15=(($14+12)|0);
   var $16=HEAP32[(($15)>>2)];
   $t=$16;
   var $17=$1;
   var $18=$t;
   var $19=$3;
   var $20=_iv_get($17, $18, $19, 0);
   var $21=(($20 << 24) >> 24)!=0;
   if ($21) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $23=$1;
   var $24=$2;
   var $25=$24;
   _mrb_write_barrier($23, $25);
   var $26=$1;
   var $27=$t;
   var $28=$3;
   _iv_put($26, $27, $28, $v);
   label = 11; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $31=$2;
   var $32=(($31+20)|0);
   var $33=HEAP32[(($32)>>2)];
   $2=$33;
   label = 2; break;
  case 8: 
   var $35=$cls;
   var $36=(($35+12)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37)|(0))!=0;
   if ($38) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $40=$1;
   var $41=_iv_new($40);
   var $42=$cls;
   var $43=(($42+12)|0);
   HEAP32[(($43)>>2)]=$41;
   label = 10; break;
  case 10: 
   var $45=$1;
   var $46=$cls;
   var $47=$46;
   _mrb_write_barrier($45, $47);
   var $48=$1;
   var $49=$cls;
   var $50=(($49+12)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$3;
   _iv_put($48, $51, $52, $v);
   label = 11; break;
  case 11: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_cv_set($mrb, $mod, $sym, $v) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 $1=$mrb;
 $2=$sym;
 var $3=$1;
 var $4=(($mod)|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 var $8=$2;
 _mrb_mod_cv_set($3, $7, $8, $v);
 STACKTOP = sp;
 return;
}
function _mrb_mod_cv_defined($mrb, $c, $sym) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $t;
   $2=$mrb;
   $3=$c;
   $4=$sym;
   label = 2; break;
  case 2: 
   var $6=$3;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $9=$3;
   var $10=(($9+12)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))!=0;
   if ($12) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $14=$3;
   var $15=(($14+12)|0);
   var $16=HEAP32[(($15)>>2)];
   $t=$16;
   var $17=$2;
   var $18=$t;
   var $19=$4;
   var $20=_iv_get($17, $18, $19, 0);
   var $21=(($20 << 24) >> 24)!=0;
   if ($21) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $1=1;
   label = 9; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $25=$3;
   var $26=(($25+20)|0);
   var $27=HEAP32[(($26)>>2)];
   $3=$27;
   label = 2; break;
  case 8: 
   $1=0;
   label = 9; break;
  case 9: 
   var $30=$1;
   return $30;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_cv_defined($mrb, $mod, $sym) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 $1=$mrb;
 $2=$sym;
 var $3=$1;
 var $4=(($mod)|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 var $8=$2;
 var $9=_mrb_mod_cv_defined($3, $7, $8);
 STACKTOP = sp;
 return $9;
}
function _mrb_vm_cv_get($agg_result, $mrb, $sym) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   $1=$mrb;
   $2=$sym;
   var $3=$1;
   var $4=(($3+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9+16)|0);
   var $11=HEAP32[(($10)>>2)];
   $c=$11;
   var $12=$c;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $15=$1;
   var $16=(($15+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17+16)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19+28)|0);
   var $21=HEAP32[(($20)>>2)];
   $c=$21;
   label = 3; break;
  case 3: 
   var $23=$1;
   var $24=$c;
   var $25=$2;
   _mrb_mod_cv_get($agg_result, $23, $24, $25);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_vm_cv_set($mrb, $sym, $v) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   var $t;
   $1=$mrb;
   $2=$sym;
   var $3=$1;
   var $4=(($3+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9+16)|0);
   var $11=HEAP32[(($10)>>2)];
   $c=$11;
   var $12=$c;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $15=$1;
   var $16=(($15+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17+16)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19+28)|0);
   var $21=HEAP32[(($20)>>2)];
   $c=$21;
   label = 3; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $24=$c;
   var $25=(($24)|(0))!=0;
   if ($25) { label = 5; break; } else { label = 10; break; }
  case 5: 
   var $27=$c;
   var $28=(($27+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29)|(0))!=0;
   if ($30) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $32=$c;
   var $33=(($32+12)|0);
   var $34=HEAP32[(($33)>>2)];
   $t=$34;
   var $35=$1;
   var $36=$t;
   var $37=$2;
   var $38=_iv_get($35, $36, $37, 0);
   var $39=(($38 << 24) >> 24)!=0;
   if ($39) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $41=$1;
   var $42=$c;
   var $43=$42;
   _mrb_write_barrier($41, $43);
   var $44=$1;
   var $45=$t;
   var $46=$2;
   _iv_put($44, $45, $46, $v);
   label = 13; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $49=$c;
   var $50=(($49+20)|0);
   var $51=HEAP32[(($50)>>2)];
   $c=$51;
   label = 4; break;
  case 10: 
   var $53=$1;
   var $54=(($53+8)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+16)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57+28)|0);
   var $59=HEAP32[(($58)>>2)];
   $c=$59;
   var $60=$c;
   var $61=(($60+12)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62)|(0))!=0;
   if ($63) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $65=$1;
   var $66=_iv_new($65);
   var $67=$c;
   var $68=(($67+12)|0);
   HEAP32[(($68)>>2)]=$66;
   label = 12; break;
  case 12: 
   var $70=$1;
   var $71=$c;
   var $72=$71;
   _mrb_write_barrier($70, $72);
   var $73=$1;
   var $74=$c;
   var $75=(($74+12)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=$2;
   _iv_put($73, $76, $77, $v);
   label = 13; break;
  case 13: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_const_defined($mrb, $mod, $sym) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $m;
   var $t;
   $2=$mrb;
   $3=$sym;
   var $4=(($mod)|0);
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=$6;
   $m=$7;
   var $8=$m;
   var $9=(($8+12)|0);
   var $10=HEAP32[(($9)>>2)];
   $t=$10;
   var $11=$t;
   var $12=(($11)|(0))!=0;
   if ($12) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 4; break;
  case 3: 
   var $15=$2;
   var $16=$t;
   var $17=$3;
   var $18=_iv_get($15, $16, $17, 0);
   $1=$18;
   label = 4; break;
  case 4: 
   var $20=$1;
   STACKTOP = sp;
   return $20;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_const_get($agg_result, $mrb, $mod, $sym) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 $1=$mrb;
 $2=$sym;
 var $3=$1;
 _mod_const_check($3, $mod);
 var $4=$1;
 var $5=(($mod)|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 var $9=$2;
 _const_get($agg_result, $4, $8, $9);
 STACKTOP = sp;
 return;
}
function _mod_const_check($mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$mrb;
   var $2=(($mod+8)|0);
   var $3=HEAP32[(($2)>>2)];
   if ((($3)|(0))==9 | (($3)|(0))==10 | (($3)|(0))==12) {
    label = 2; break;
   }
   else {
   label = 3; break;
   }
  case 2: 
   label = 4; break;
  case 3: 
   var $6=$1;
   var $7=$1;
   var $8=_mrb_class_get($7, ((86624)|0));
   _mrb_raise($6, $8, ((106024)|0));
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _const_get($agg_result, $mrb, $base, $sym) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $c;
   var $v=sp;
   var $t;
   var $retry;
   var $cm;
   var $4=(sp)+(12);
   var $name=(sp)+(24);
   var $5=(sp)+(36);
   var $6=(sp)+(48);
   $1=$mrb;
   $2=$base;
   $3=$sym;
   var $7=$2;
   $c=$7;
   $retry=0;
   label = 2; break;
  case 2: 
   label = 3; break;
  case 3: 
   var $10=$c;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 4; break; } else { label = 9; break; }
  case 4: 
   var $13=$c;
   var $14=(($13+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))!=0;
   if ($16) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $18=$c;
   var $19=(($18+12)|0);
   var $20=HEAP32[(($19)>>2)];
   $t=$20;
   var $21=$1;
   var $22=$t;
   var $23=$3;
   var $24=_iv_get($21, $22, $23, $v);
   var $25=(($24 << 24) >> 24)!=0;
   if ($25) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $27=$agg_result;
   var $28=$v;
   assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
   label = 19; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $31=$c;
   var $32=(($31+20)|0);
   var $33=HEAP32[(($32)>>2)];
   $c=$33;
   label = 3; break;
  case 9: 
   var $35=$retry;
   var $36=(($35 << 24) >> 24)!=0;
   if ($36) { label = 13; break; } else { label = 10; break; }
  case 10: 
   var $38=$2;
   var $39=(($38)|(0))!=0;
   if ($39) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $41=$2;
   var $42=$41;
   var $43=HEAP32[(($42)>>2)];
   var $44=$43 & 255;
   var $45=(($44)|(0))==10;
   if ($45) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $47=$1;
   var $48=(($47+44)|0);
   var $49=HEAP32[(($48)>>2)];
   $c=$49;
   $retry=1;
   label = 2; break;
  case 13: 
   var $51=$2;
   $c=$51;
   var $52=$1;
   var $53=_mrb_intern2($52, ((88480)|0), 13);
   $cm=$53;
   label = 14; break;
  case 14: 
   var $55=$c;
   var $56=(($55)|(0))!=0;
   if ($56) { label = 15; break; } else { label = 18; break; }
  case 15: 
   var $58=$1;
   var $59=$c;
   var $60=$59;
   _mrb_obj_value116($4, $60);
   var $61=$cm;
   var $62=_mrb_respond_to($58, $4, $61);
   var $63=(($62 << 24) >> 24)!=0;
   if ($63) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $65=$3;
   _mrb_symbol_value118($name, $65);
   var $66=$1;
   var $67=$c;
   var $68=$67;
   _mrb_obj_value116($5, $68);
   var $69=$cm;
   _mrb_funcall_argv($agg_result, $66, $5, $69, 1, $name);
   label = 19; break;
  case 17: 
   var $71=$c;
   var $72=(($71+20)|0);
   var $73=HEAP32[(($72)>>2)];
   $c=$73;
   label = 14; break;
  case 18: 
   var $75=$1;
   var $76=$3;
   var $77=$1;
   var $78=$3;
   _mrb_sym2str($6, $77, $78);
   _mrb_name_error($75, $76, ((87408)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($6)+(8))>>2)],tempInt));
   _mrb_nil_value115($agg_result);
   label = 19; break;
  case 19: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _csym_i($mrb, $sym, $v, $p) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $a;
   var $c;
   $2=$mrb;
   $3=$sym;
   $4=$p;
   var $5=$4;
   var $6=$5;
   $a=$6;
   var $7=$a;
   var $8=(($7)|0);
   var $9=HEAP32[(($8)>>2)];
   $c=$9;
   var $10=(($v+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$c;
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=$14 & 255;
   var $16=(($11)|(0))==(($15)|(0));
   if ($16) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $18=(($v)|0);
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $21=$20;
   var $22=$c;
   var $23=(($21)|(0))==(($22)|(0));
   if ($23) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $25=$3;
   var $26=$a;
   var $27=(($26+4)|0);
   HEAP16[(($27)>>1)]=$25;
   $1=1;
   label = 5; break;
  case 4: 
   $1=0;
   label = 5; break;
  case 5: 
   var $30=$1;
   STACKTOP = sp;
   return $30;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_vm_const_get($agg_result, $mrb, $sym) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   var $c2;
   var $v=sp;
   $1=$mrb;
   $2=$sym;
   var $3=$1;
   var $4=(($3+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9+16)|0);
   var $11=HEAP32[(($10)>>2)];
   $c=$11;
   var $12=$c;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $15=$1;
   var $16=(($15+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17+16)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19+28)|0);
   var $21=HEAP32[(($20)>>2)];
   $c=$21;
   label = 3; break;
  case 3: 
   var $23=$c;
   var $24=(($23)|(0))!=0;
   if ($24) { label = 4; break; } else { label = 15; break; }
  case 4: 
   var $26=$c;
   var $27=(($26+12)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|(0))!=0;
   if ($29) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $31=$1;
   var $32=$c;
   var $33=(($32+12)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=$2;
   var $36=_iv_get($31, $34, $35, $v);
   var $37=(($36)&(255));
   var $38=(($37)|(0))!=0;
   if ($38) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $40=$agg_result;
   var $41=$v;
   assert(12 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];HEAP32[((($40)+(8))>>2)]=HEAP32[((($41)+(8))>>2)];
   label = 16; break;
  case 7: 
   var $43=$c;
   $c2=$43;
   label = 8; break;
  case 8: 
   var $45=$1;
   var $46=$c2;
   var $47=_mrb_class_outer_module($45, $46);
   $c2=$47;
   var $48=$c2;
   var $49=(($48)|(0))!=0;
   if ($49) { label = 10; break; } else { label = 9; break; }
  case 9: 
   label = 14; break;
  case 10: 
   var $52=$c2;
   var $53=(($52+12)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($54)|(0))!=0;
   if ($55) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $57=$1;
   var $58=$c2;
   var $59=(($58+12)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=$2;
   var $62=_iv_get($57, $60, $61, $v);
   var $63=(($62)&(255));
   var $64=(($63)|(0))!=0;
   if ($64) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $66=$agg_result;
   var $67=$v;
   assert(12 % 1 === 0);HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($67)+(4))>>2)];HEAP32[((($66)+(8))>>2)]=HEAP32[((($67)+(8))>>2)];
   label = 16; break;
  case 13: 
   label = 8; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $71=$1;
   var $72=$c;
   var $73=$2;
   _const_get($agg_result, $71, $72, $73);
   label = 16; break;
  case 16: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_const_set($mrb, $mod, $sym, $v) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 $1=$mrb;
 $2=$sym;
 var $3=$1;
 _mod_const_check($3, $mod);
 var $4=$1;
 var $5=$2;
 _mrb_iv_set($4, $mod, $5, $v);
 STACKTOP = sp;
 return;
}
function _mrb_vm_const_set($mrb, $sym, $v) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   $1=$mrb;
   $2=$sym;
   var $3=$1;
   var $4=(($3+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9+16)|0);
   var $11=HEAP32[(($10)>>2)];
   $c=$11;
   var $12=$c;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $15=$1;
   var $16=(($15+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17+16)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19+28)|0);
   var $21=HEAP32[(($20)>>2)];
   $c=$21;
   label = 3; break;
  case 3: 
   var $23=$1;
   var $24=$c;
   var $25=$24;
   var $26=$2;
   _mrb_obj_iv_set($23, $25, $26, $v);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_define_const($mrb, $mod, $name, $v) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 var $3;
 $1=$mrb;
 $2=$mod;
 $3=$name;
 var $4=$1;
 var $5=$2;
 var $6=$5;
 var $7=$1;
 var $8=$3;
 var $9=_mrb_intern_cstr($7, $8);
 _mrb_obj_iv_set($4, $6, $9, $v);
 STACKTOP = sp;
 return;
}
function _mrb_mod_constants($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ary=sp;
   var $c;
   var $2=(sp)+(12);
   $1=$mrb;
   var $3=(($mod)|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5;
   $c=$6;
   var $7=$1;
   _mrb_ary_new($2, $7);
   var $8=$ary;
   var $9=$2;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   label = 2; break;
  case 2: 
   var $11=$c;
   var $12=(($11)|(0))!=0;
   if ($12) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $14=$c;
   var $15=(($14+12)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))!=0;
   if ($17) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $19=$1;
   var $20=$c;
   var $21=(($20+12)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$ary;
   var $24=_iv_foreach($19, $22, 706, $23);
   label = 5; break;
  case 5: 
   var $26=$c;
   var $27=(($26+20)|0);
   var $28=HEAP32[(($27)>>2)];
   $c=$28;
   var $29=$c;
   var $30=$1;
   var $31=(($30+44)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($29)|(0))==(($32)|(0));
   if ($33) { label = 6; break; } else { label = 7; break; }
  case 6: 
   label = 8; break;
  case 7: 
   label = 2; break;
  case 8: 
   var $37=$agg_result;
   var $38=$ary;
   assert(12 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _const_i($mrb, $sym, $v, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $ary=sp;
   var $s;
   var $len=(sp)+(12);
   var $4=(sp)+(16);
   $1=$mrb;
   $2=$sym;
   $3=$p;
   var $5=$3;
   var $6=$5;
   var $7=$ary;
   var $8=$6;
   assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
   var $9=$1;
   var $10=$2;
   var $11=_mrb_sym2name_len($9, $10, $len);
   $s=$11;
   var $12=HEAP32[(($len)>>2)];
   var $13=(($12)>>>(0)) > 1;
   if ($13) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $15=$s;
   var $16=(($15)|0);
   var $17=HEAP8[($16)];
   var $18=(($17)&(255));
   var $19=_isupper($18);
   var $20=(($19)|(0))!=0;
   if ($20) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $22=$1;
   var $23=$2;
   _mrb_symbol_value118($4, $23);
   _mrb_ary_push($22, $ary, $4);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_gv_get($agg_result, $mrb, $sym) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $v=sp;
   $1=$mrb;
   $2=$sym;
   var $3=$1;
   var $4=(($3+20)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value115($agg_result);
   label = 6; break;
  case 3: 
   var $9=$1;
   var $10=$1;
   var $11=(($10+20)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$2;
   var $14=_iv_get($9, $12, $13, $v);
   var $15=(($14 << 24) >> 24)!=0;
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $17=$agg_result;
   var $18=$v;
   assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
   label = 6; break;
  case 5: 
   _mrb_nil_value115($agg_result);
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_gv_set($mrb, $sym, $v) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $t;
   $1=$mrb;
   $2=$sym;
   var $3=$1;
   var $4=(($3+20)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=$1;
   var $9=_iv_new($8);
   var $10=$1;
   var $11=(($10+20)|0);
   HEAP32[(($11)>>2)]=$9;
   $t=$9;
   label = 4; break;
  case 3: 
   var $13=$1;
   var $14=(($13+20)|0);
   var $15=HEAP32[(($14)>>2)];
   $t=$15;
   label = 4; break;
  case 4: 
   var $17=$1;
   var $18=$t;
   var $19=$2;
   _iv_put($17, $18, $19, $v);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_f_global_variables($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $t;
   var $ary=sp;
   var $i;
   var $buf=(sp)+(12);
   var $2=(sp)+(16);
   $1=$mrb;
   var $3=$1;
   var $4=(($3+20)|0);
   var $5=HEAP32[(($4)>>2)];
   $t=$5;
   var $6=$1;
   _mrb_ary_new($ary, $6);
   var $7=$t;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$1;
   var $11=$t;
   var $12=$ary;
   var $13=_iv_foreach($10, $11, 242, $12);
   label = 3; break;
  case 3: 
   var $15=(($buf)|0);
   HEAP8[($15)]=36;
   var $16=(($buf+2)|0);
   HEAP8[($16)]=0;
   $i=1;
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=(($18)>>>(0)) <= 9;
   if ($19) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $21=$i;
   var $22=((($21)+(48))|0);
   var $23=(($22) & 255);
   var $24=(($buf+1)|0);
   HEAP8[($24)]=$23;
   var $25=$1;
   var $26=$1;
   var $27=(($buf)|0);
   var $28=_mrb_intern2($26, $27, 2);
   _mrb_symbol_value118($2, $28);
   _mrb_ary_push($25, $ary, $2);
   label = 6; break;
  case 6: 
   var $30=$i;
   var $31=((($30)+(1))|0);
   $i=$31;
   label = 4; break;
  case 7: 
   var $33=$agg_result;
   var $34=$ary;
   assert(12 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];HEAP32[((($33)+(8))>>2)]=HEAP32[((($34)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _gv_i($mrb, $sym, $v, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 var $3;
 var $ary=sp;
 var $4=(sp)+(12);
 $1=$mrb;
 $2=$sym;
 $3=$p;
 var $5=$3;
 var $6=$5;
 var $7=$ary;
 var $8=$6;
 assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
 var $9=$1;
 var $10=$2;
 _mrb_symbol_value118($4, $10);
 _mrb_ary_push($9, $ary, $4);
 STACKTOP = sp;
 return 0;
}
function _mrb_symbol_value118($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=4;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP16[(($6)>>1)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_const_defined_at($mrb, $klass, $id) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$mrb;
 $2=$klass;
 $3=$id;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 var $7=_mrb_const_defined_0($4, $5, $6, 1, 0);
 var $8=(($7)&(255));
 return $8;
}
function _mrb_const_defined_0($mrb, $klass, $id, $exclude, $recurse) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $tmp;
   var $mod_retry;
   $2=$mrb;
   $3=$klass;
   $4=$id;
   $5=$exclude;
   $6=$recurse;
   $mod_retry=0;
   var $7=$3;
   $tmp=$7;
   label = 2; break;
  case 2: 
   label = 3; break;
  case 3: 
   var $10=$tmp;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 4; break; } else { label = 11; break; }
  case 4: 
   var $13=$tmp;
   var $14=(($13+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))!=0;
   if ($16) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $18=$2;
   var $19=$tmp;
   var $20=(($19+12)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$4;
   var $23=_iv_get($18, $21, $22, 0);
   var $24=(($23)&(255));
   var $25=(($24)|(0))!=0;
   if ($25) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $1=1;
   label = 16; break;
  case 7: 
   var $28=$6;
   var $29=(($28 << 24) >> 24)!=0;
   if ($29) { label = 10; break; } else { label = 8; break; }
  case 8: 
   var $31=$3;
   var $32=$2;
   var $33=(($32+44)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($31)|(0))!=(($34)|(0));
   if ($35) { label = 9; break; } else { label = 10; break; }
  case 9: 
   label = 11; break;
  case 10: 
   var $38=$tmp;
   var $39=(($38+20)|0);
   var $40=HEAP32[(($39)>>2)];
   $tmp=$40;
   label = 3; break;
  case 11: 
   var $42=$5;
   var $43=(($42 << 24) >> 24)!=0;
   if ($43) { label = 15; break; } else { label = 12; break; }
  case 12: 
   var $45=$mod_retry;
   var $46=(($45 << 24) >> 24)!=0;
   if ($46) { label = 15; break; } else { label = 13; break; }
  case 13: 
   var $48=$3;
   var $49=$48;
   var $50=HEAP32[(($49)>>2)];
   var $51=$50 & 255;
   var $52=(($51)|(0))==10;
   if ($52) { label = 14; break; } else { label = 15; break; }
  case 14: 
   $mod_retry=1;
   var $54=$2;
   var $55=(($54+44)|0);
   var $56=HEAP32[(($55)>>2)];
   $tmp=$56;
   label = 2; break;
  case 15: 
   $1=0;
   label = 16; break;
  case 16: 
   var $59=$1;
   return $59;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_attr_get($agg_result, $mrb, $obj, $id) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 $1=$mrb;
 $2=$id;
 var $3=$1;
 var $4=$2;
 _mrb_iv_get($agg_result, $3, $obj, $4);
 STACKTOP = sp;
 return;
}
function _mrb_class_sym($mrb, $c, $outer) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $name=sp;
   var $5=(sp)+(12);
   var $arg=(sp)+(24);
   $2=$mrb;
   $3=$c;
   $4=$outer;
   var $6=$2;
   var $7=$3;
   var $8=$7;
   var $9=$2;
   var $10=_mrb_intern2($9, ((89632)|0), 11);
   _mrb_obj_iv_get($5, $6, $8, $10);
   var $11=$name;
   var $12=$5;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   var $13=(($name+8)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0))==0;
   if ($15) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $17=(($name)|0);
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19)|(0))!=0;
   if ($20) { label = 6; break; } else { label = 3; break; }
  case 3: 
   var $22=$4;
   var $23=(($22)|(0))!=0;
   if ($23) { label = 5; break; } else { label = 4; break; }
  case 4: 
   $1=0;
   label = 7; break;
  case 5: 
   var $26=$3;
   var $27=(($arg)|0);
   HEAP32[(($27)>>2)]=$26;
   var $28=(($arg+4)|0);
   HEAP16[(($28)>>1)]=0;
   var $29=$2;
   var $30=$4;
   var $31=(($30+12)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$arg;
   var $34=_iv_foreach($29, $32, 316, $33);
   var $35=(($arg+4)|0);
   var $36=HEAP16[(($35)>>1)];
   $1=$36;
   label = 7; break;
  case 6: 
   var $38=(($name)|0);
   var $39=$38;
   var $40=HEAP16[(($39)>>1)];
   $1=$40;
   label = 7; break;
  case 7: 
   var $42=$1;
   STACKTOP = sp;
   return $42;
  default: assert(0, "bad label: " + label);
 }
}
function _iv_mark_i($mrb, $sym, $v, $p) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$mrb;
   $2=$sym;
   $3=$p;
   label = 2; break;
  case 2: 
   var $5=(($v+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)>>>(0)) >= 8;
   if ($7) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $9=$1;
   var $10=(($v)|0);
   var $11=$10;
   var $12=HEAP32[(($11)>>2)];
   var $13=$12;
   _mrb_gc_mark($9, $13);
   label = 4; break;
  case 4: 
   label = 5; break;
  case 5: 
   STACKTOP = sp;
   return 0;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_funcall($agg_result, $mrb, $self, $name, $argc, varrp) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 212)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $mid;
   var $v=sp;
   var $ap=(sp)+(12);
   var $argv=(sp)+(16);
   var $ap1=(sp)+(208);
   var $i;
   $1=$mrb;
   $2=$name;
   $3=$argc;
   var $4=$1;
   var $5=$2;
   var $6=_mrb_intern_cstr($4, $5);
   $mid=$6;
   var $7=$3;
   var $8=(($7)|(0))==0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$1;
   var $11=$mid;
   _mrb_funcall_argv($agg_result, $10, $self, $11, 0, 0);
   label = 12; break;
  case 3: 
   var $13=$3;
   var $14=(($13)|(0))==1;
   if ($14) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $16=$ap;
   HEAP32[(($16)>>2)]=varrp;
   var $17=HEAP32[(($ap)>>2)];
   var $18=$17;
   var $19=(($17+12)|0);
   HEAP32[(($ap)>>2)]=$19;
   var $20=$v;
   var $21=$18;
   assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
   var $22=$ap;
   var $23=$1;
   var $24=$mid;
   _mrb_funcall_argv($agg_result, $23, $self, $24, 1, $v);
   label = 12; break;
  case 5: 
   var $26=$3;
   var $27=(($26)|(0)) > 16;
   if ($27) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $29=$1;
   var $30=$1;
   var $31=_mrb_class_get($30, ((104740)|0));
   _mrb_raise($29, $31, ((105116)|0));
   label = 7; break;
  case 7: 
   var $33=$ap1;
   HEAP32[(($33)>>2)]=varrp;
   $i=0;
   label = 8; break;
  case 8: 
   var $35=$i;
   var $36=$3;
   var $37=(($35)|(0)) < (($36)|(0));
   if ($37) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $39=$i;
   var $40=(($argv+((($39)*(12))&-1))|0);
   var $41=HEAP32[(($ap1)>>2)];
   var $42=$41;
   var $43=(($41+12)|0);
   HEAP32[(($ap1)>>2)]=$43;
   var $44=$40;
   var $45=$42;
   assert(12 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];HEAP32[((($44)+(8))>>2)]=HEAP32[((($45)+(8))>>2)];
   label = 10; break;
  case 10: 
   var $47=$i;
   var $48=((($47)+(1))|0);
   $i=$48;
   label = 8; break;
  case 11: 
   var $50=$ap1;
   var $51=$1;
   var $52=$mid;
   var $53=$3;
   var $54=(($argv)|0);
   _mrb_funcall_argv($agg_result, $51, $self, $52, $53, $54);
   label = 12; break;
  case 12: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_funcall_argv($agg_result, $mrb, $self, $mid, $argc, $argv) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 $1=$mrb;
 $2=$mid;
 $3=$argc;
 $4=$argv;
 var $6=$1;
 var $7=$2;
 var $8=$3;
 var $9=$4;
 _mrb_nil_value144($5);
 _mrb_funcall_with_block($agg_result, $6, $self, $7, $8, $9, $5);
 STACKTOP = sp;
 return;
}
function _mrb_class($mrb, $v) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $2=$mrb;
   var $3=(($v+8)|0);
   var $4=HEAP32[(($3)>>2)];
   if ((($4)|(0))==0) {
    label = 2; break;
   }
   else if ((($4)|(0))==2) {
    label = 5; break;
   }
   else if ((($4)|(0))==4) {
    label = 6; break;
   }
   else if ((($4)|(0))==3) {
    label = 7; break;
   }
   else if ((($4)|(0))==6) {
    label = 8; break;
   }
   else {
   label = 9; break;
   }
  case 2: 
   var $6=(($v)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $11=$2;
   var $12=(($11+84)|0);
   var $13=HEAP32[(($12)>>2)];
   $1=$13;
   label = 10; break;
  case 4: 
   var $15=$2;
   var $16=(($15+88)|0);
   var $17=HEAP32[(($16)>>2)];
   $1=$17;
   label = 10; break;
  case 5: 
   var $19=$2;
   var $20=(($19+80)|0);
   var $21=HEAP32[(($20)>>2)];
   $1=$21;
   label = 10; break;
  case 6: 
   var $23=$2;
   var $24=(($23+92)|0);
   var $25=HEAP32[(($24)>>2)];
   $1=$25;
   label = 10; break;
  case 7: 
   var $27=$2;
   var $28=(($27+76)|0);
   var $29=HEAP32[(($28)>>2)];
   $1=$29;
   label = 10; break;
  case 8: 
   var $31=$2;
   var $32=(($31+72)|0);
   var $33=HEAP32[(($32)>>2)];
   $1=$33;
   label = 10; break;
  case 9: 
   var $35=(($v)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=$37;
   var $39=(($38+4)|0);
   var $40=HEAP32[(($39)>>2)];
   $1=$40;
   label = 10; break;
  case 10: 
   var $42=$1;
   STACKTOP = sp;
   return $42;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_funcall_with_block($agg_result, $mrb, $self, $mid, $argc, $argv, $blk) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $blk; $blk = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($blk)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($blk)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($blk)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 var mySetjmpIds = {};
 var setjmpTable = {"2": function(value) { label = 28; $22 = value },dummy: 0};
 while(1) try { switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $val=sp;
   var $c_jmp=(sp)+(12);
   var $old_ci;
   var $5=(sp)+(52);
   var $6=(sp)+(64);
   var $p;
   var $c=(sp)+(76);
   var $undef;
   var $ci;
   var $n;
   var $7=(sp)+(80);
   var $8=(sp)+(92);
   var $ai;
   var $9=(sp)+(104);
   var $10=(sp)+(116);
   $1=$mrb;
   $2=$mid;
   $3=$argc;
   $4=$argv;
   var $11=$1;
   var $12=(($11)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))!=0;
   if ($14) { label = 9; break; } else { label = 2; break; }
  case 2: 
   var $16=$1;
   var $17=(($16+8)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18+16)|0);
   var $20=HEAP32[(($19)>>2)];
   $old_ci=$20;
   var $21=(($c_jmp)|0);
   var $22=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($21)>>2)]=tempInt, 0);
   label = 28; break;
  case 28: 
   var $23=(($22)|(0))!=0;
   if ($23) { label = 3; break; } else { label = 7; break; }
  case 3: 
   label = 4; break;
  case 4: 
   var $26=$old_ci;
   var $27=$1;
   var $28=(($27+8)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($26)|(0))!=(($31)|(0));
   if ($32) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $34=$1;
   var $35=(($34+8)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36+8)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=$1;
   var $40=(($39+8)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($41+16)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43+8)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($38+((($45)*(12))&-1))|0);
   var $47=$1;
   var $48=(($47+8)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+4)|0);
   HEAP32[(($50)>>2)]=$46;
   var $51=$1;
   _cipop($51);
   label = 4; break;
  case 6: 
   var $53=$1;
   var $54=(($53)|0);
   HEAP32[(($54)>>2)]=0;
   var $55=$1;
   var $56=(($55+16)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=$57;
   _mrb_obj_value139($5, $58);
   var $59=$val;
   var $60=$5;
   assert(12 % 1 === 0);HEAP32[(($59)>>2)]=HEAP32[(($60)>>2)];HEAP32[((($59)+(4))>>2)]=HEAP32[((($60)+(4))>>2)];HEAP32[((($59)+(8))>>2)]=HEAP32[((($60)+(8))>>2)];
   label = 8; break;
  case 7: 
   var $62=$c_jmp;
   var $63=$1;
   var $64=(($63)|0);
   HEAP32[(($64)>>2)]=$62;
   var $65=$1;
   var $66=$2;
   var $67=$3;
   var $68=$4;
   _mrb_funcall_with_block($6, $65, $self, $66, $67, $68, $blk);
   var $69=$val;
   var $70=$6;
   assert(12 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($70)+(4))>>2)];HEAP32[((($69)+(8))>>2)]=HEAP32[((($70)+(8))>>2)];
   var $71=$1;
   var $72=(($71)|0);
   HEAP32[(($72)>>2)]=0;
   label = 8; break;
  case 8: 
   label = 27; break;
  case 9: 
   $undef=0;
   var $75=$1;
   var $76=(($75+8)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($77+4)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79)|(0))!=0;
   if ($80) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $82=$1;
   _stack_init($82);
   label = 11; break;
  case 11: 
   var $84=$1;
   var $85=(($84+8)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=(($86+16)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=(($88+12)|0);
   var $90=HEAP32[(($89)>>2)];
   $n=$90;
   var $91=$3;
   var $92=(($91)|(0)) < 0;
   if ($92) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $94=$1;
   var $95=$1;
   var $96=_mrb_class_get($95, ((104740)|0));
   var $97=$3;
   _mrb_fixnum_value140($7, $97);
   _mrb_raisef($94, $96, ((100400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($7)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($7)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($7)+(8))>>2)],tempInt));
   label = 13; break;
  case 13: 
   var $99=$1;
   var $100=_mrb_class($99, $self);
   HEAP32[(($c)>>2)]=$100;
   var $101=$1;
   var $102=$2;
   var $103=_mrb_method_search_vm($101, $c, $102);
   $p=$103;
   var $104=$p;
   var $105=(($104)|(0))!=0;
   if ($105) { label = 15; break; } else { label = 14; break; }
  case 14: 
   var $107=$2;
   $undef=$107;
   var $108=$1;
   var $109=_mrb_intern2($108, ((96784)|0), 14);
   $2=$109;
   var $110=$1;
   var $111=$2;
   var $112=_mrb_method_search_vm($110, $c, $111);
   $p=$112;
   var $113=$n;
   var $114=((($113)+(1))|0);
   $n=$114;
   var $115=$3;
   var $116=((($115)+(1))|0);
   $3=$116;
   label = 15; break;
  case 15: 
   var $118=$1;
   var $119=_cipush($118);
   $ci=$119;
   var $120=$2;
   var $121=$ci;
   var $122=(($121)|0);
   HEAP16[(($122)>>1)]=$120;
   var $123=$p;
   var $124=$ci;
   var $125=(($124+4)|0);
   HEAP32[(($125)>>2)]=$123;
   var $126=$1;
   var $127=(($126+8)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=(($128+4)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=$1;
   var $132=(($131+8)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=(($133+8)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=$130;
   var $137=$135;
   var $138=((($136)-($137))|0);
   var $139=((((($138)|(0)))/(12))&-1);
   var $140=$ci;
   var $141=(($140+8)|0);
   HEAP32[(($141)>>2)]=$139;
   var $142=$3;
   var $143=$ci;
   var $144=(($143+16)|0);
   HEAP32[(($144)>>2)]=$142;
   var $145=$p;
   var $146=(($145+16)|0);
   var $147=HEAP32[(($146)>>2)];
   var $148=$ci;
   var $149=(($148+28)|0);
   HEAP32[(($149)>>2)]=$147;
   var $150=$p;
   var $151=$150;
   var $152=HEAP32[(($151)>>2)];
   var $153=$152 >>> 11;
   var $154=$153 & 2097151;
   var $155=$154 & 128;
   var $156=(($155)|(0))!=0;
   if ($156) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $158=$3;
   var $159=((($158)+(2))|0);
   var $160=$ci;
   var $161=(($160+12)|0);
   HEAP32[(($161)>>2)]=$159;
   label = 18; break;
  case 17: 
   var $163=$p;
   var $164=(($163+12)|0);
   var $165=$164;
   var $166=HEAP32[(($165)>>2)];
   var $167=(($166+6)|0);
   var $168=HEAP16[(($167)>>1)];
   var $169=(($168)&(65535));
   var $170=$n;
   var $171=((($169)+($170))|0);
   var $172=$ci;
   var $173=(($172+12)|0);
   HEAP32[(($173)>>2)]=$171;
   label = 18; break;
  case 18: 
   var $175=$ci;
   var $176=(($175+24)|0);
   HEAP32[(($176)>>2)]=-1;
   var $177=$1;
   var $178=(($177+8)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($179+4)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=$n;
   var $183=(($181+((($182)*(12))&-1))|0);
   var $184=$1;
   var $185=(($184+8)|0);
   var $186=HEAP32[(($185)>>2)];
   var $187=(($186+4)|0);
   HEAP32[(($187)>>2)]=$183;
   var $188=$1;
   var $189=$ci;
   var $190=(($189+12)|0);
   var $191=HEAP32[(($190)>>2)];
   _stack_extend($188, $191, 0);
   var $192=$1;
   var $193=(($192+8)|0);
   var $194=HEAP32[(($193)>>2)];
   var $195=(($194+4)|0);
   var $196=HEAP32[(($195)>>2)];
   var $197=(($196)|0);
   var $198=$197;
   var $199=$self;
   assert(12 % 1 === 0);HEAP32[(($198)>>2)]=HEAP32[(($199)>>2)];HEAP32[((($198)+(4))>>2)]=HEAP32[((($199)+(4))>>2)];HEAP32[((($198)+(8))>>2)]=HEAP32[((($199)+(8))>>2)];
   var $200=$undef;
   var $201=(($200 << 16) >> 16)!=0;
   if ($201) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $203=$1;
   var $204=(($203+8)|0);
   var $205=HEAP32[(($204)>>2)];
   var $206=(($205+4)|0);
   var $207=HEAP32[(($206)>>2)];
   var $208=(($207+12)|0);
   var $209=$undef;
   _mrb_symbol_value141($8, $209);
   var $210=$208;
   var $211=$8;
   assert(12 % 1 === 0);HEAP32[(($210)>>2)]=HEAP32[(($211)>>2)];HEAP32[((($210)+(4))>>2)]=HEAP32[((($211)+(4))>>2)];HEAP32[((($210)+(8))>>2)]=HEAP32[((($211)+(8))>>2)];
   var $212=$1;
   var $213=(($212+8)|0);
   var $214=HEAP32[(($213)>>2)];
   var $215=(($214+4)|0);
   var $216=HEAP32[(($215)>>2)];
   var $217=(($216+24)|0);
   var $218=$4;
   var $219=$3;
   var $220=((($219)-(1))|0);
   _stack_copy($217, $218, $220);
   label = 23; break;
  case 20: 
   var $222=$3;
   var $223=(($222)|(0)) > 0;
   if ($223) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $225=$1;
   var $226=(($225+8)|0);
   var $227=HEAP32[(($226)>>2)];
   var $228=(($227+4)|0);
   var $229=HEAP32[(($228)>>2)];
   var $230=(($229+12)|0);
   var $231=$4;
   var $232=$3;
   _stack_copy($230, $231, $232);
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $235=$3;
   var $236=((($235)+(1))|0);
   var $237=$1;
   var $238=(($237+8)|0);
   var $239=HEAP32[(($238)>>2)];
   var $240=(($239+4)|0);
   var $241=HEAP32[(($240)>>2)];
   var $242=(($241+((($236)*(12))&-1))|0);
   var $243=$242;
   var $244=$blk;
   assert(12 % 1 === 0);HEAP32[(($243)>>2)]=HEAP32[(($244)>>2)];HEAP32[((($243)+(4))>>2)]=HEAP32[((($244)+(4))>>2)];HEAP32[((($243)+(8))>>2)]=HEAP32[((($244)+(8))>>2)];
   var $245=$p;
   var $246=$245;
   var $247=HEAP32[(($246)>>2)];
   var $248=$247 >>> 11;
   var $249=$248 & 2097151;
   var $250=$249 & 128;
   var $251=(($250)|(0))!=0;
   if ($251) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $253=$1;
   var $254=_mrb_gc_arena_save($253);
   $ai=$254;
   var $255=$p;
   var $256=(($255+12)|0);
   var $257=$256;
   var $258=HEAP32[(($257)>>2)];
   var $259=$1;
   FUNCTION_TABLE[$258]($9, $259, $self);
   var $260=$val;
   var $261=$9;
   assert(12 % 1 === 0);HEAP32[(($260)>>2)]=HEAP32[(($261)>>2)];HEAP32[((($260)+(4))>>2)]=HEAP32[((($261)+(4))>>2)];HEAP32[((($260)+(8))>>2)]=HEAP32[((($261)+(8))>>2)];
   var $262=$1;
   var $263=$ai;
   _mrb_gc_arena_restore($262, $263);
   var $264=$1;
   var $265=(($264+8)|0);
   var $266=HEAP32[(($265)>>2)];
   var $267=(($266+8)|0);
   var $268=HEAP32[(($267)>>2)];
   var $269=$1;
   var $270=(($269+8)|0);
   var $271=HEAP32[(($270)>>2)];
   var $272=(($271+16)|0);
   var $273=HEAP32[(($272)>>2)];
   var $274=(($273+8)|0);
   var $275=HEAP32[(($274)>>2)];
   var $276=(($268+((($275)*(12))&-1))|0);
   var $277=$1;
   var $278=(($277+8)|0);
   var $279=HEAP32[(($278)>>2)];
   var $280=(($279+4)|0);
   HEAP32[(($280)>>2)]=$276;
   var $281=$1;
   _cipop($281);
   label = 26; break;
  case 25: 
   var $283=$1;
   var $284=$p;
   _mrb_run($10, $283, $284, $self);
   var $285=$val;
   var $286=$10;
   assert(12 % 1 === 0);HEAP32[(($285)>>2)]=HEAP32[(($286)>>2)];HEAP32[((($285)+(4))>>2)]=HEAP32[((($286)+(4))>>2)];HEAP32[((($285)+(8))>>2)]=HEAP32[((($286)+(8))>>2)];
   label = 26; break;
  case 26: 
   label = 27; break;
  case 27: 
   var $289=$1;
   _mrb_gc_protect($289, $val);
   var $290=$agg_result;
   var $291=$val;
   assert(12 % 1 === 0);HEAP32[(($290)>>2)]=HEAP32[(($291)>>2)];HEAP32[((($290)+(4))>>2)]=HEAP32[((($291)+(4))>>2)];HEAP32[((($290)+(8))>>2)]=HEAP32[((($291)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function _cipop($mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $c;
   var $e;
   var $len;
   var $p;
   $1=$mrb;
   var $2=$1;
   var $3=(($2+8)|0);
   var $4=HEAP32[(($3)>>2)];
   $c=$4;
   var $5=$c;
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7+40)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$c;
   var $13=(($12+16)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14+40)|0);
   var $16=HEAP32[(($15)>>2)];
   $e=$16;
   var $17=$e;
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=$19 >>> 11;
   var $21=$20 & 2097151;
   $len=$21;
   var $22=$1;
   var $23=$len;
   var $24=((($23)*(12))&-1);
   var $25=_mrb_malloc($22, $24);
   var $26=$25;
   $p=$26;
   var $27=$e;
   var $28=(($27+20)|0);
   HEAP32[(($28)>>2)]=-1;
   var $29=$p;
   var $30=$e;
   var $31=(($30+12)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$len;
   _stack_copy($29, $32, $33);
   var $34=$p;
   var $35=$e;
   var $36=(($35+12)|0);
   HEAP32[(($36)>>2)]=$34;
   label = 3; break;
  case 3: 
   var $38=$c;
   var $39=(($38+16)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=((($40)-(44))|0);
   HEAP32[(($39)>>2)]=$41;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_value139($agg_result, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   var $b;
   $1=$p;
   var $2=$1;
   var $3=$2;
   $b=$3;
   label = 2; break;
  case 2: 
   var $5=$b;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 255;
   var $9=(($v+8)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=$1;
   var $11=(($v)|0);
   var $12=$11;
   HEAP32[(($12)>>2)]=$10;
   label = 3; break;
  case 3: 
   var $14=$agg_result;
   var $15=$v;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _stack_init($mrb) {
 var label = 0;
 var $1;
 var $c;
 $1=$mrb;
 var $2=$1;
 var $3=(($2+8)|0);
 var $4=HEAP32[(($3)>>2)];
 $c=$4;
 var $5=$1;
 var $6=_mrb_calloc($5, 128, 12);
 var $7=$6;
 var $8=$c;
 var $9=(($8+8)|0);
 HEAP32[(($9)>>2)]=$7;
 var $10=$c;
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+1536)|0);
 var $14=$c;
 var $15=(($14+12)|0);
 HEAP32[(($15)>>2)]=$13;
 var $16=$c;
 var $17=(($16+8)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=$c;
 var $20=(($19+4)|0);
 HEAP32[(($20)>>2)]=$18;
 var $21=$1;
 var $22=_mrb_calloc($21, 32, 44);
 var $23=$22;
 var $24=$c;
 var $25=(($24+20)|0);
 HEAP32[(($25)>>2)]=$23;
 var $26=$c;
 var $27=(($26+20)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+1408)|0);
 var $30=$c;
 var $31=(($30+24)|0);
 HEAP32[(($31)>>2)]=$29;
 var $32=$c;
 var $33=(($32+20)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$c;
 var $36=(($35+16)|0);
 HEAP32[(($36)>>2)]=$34;
 var $37=$1;
 var $38=(($37+44)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=$c;
 var $41=(($40+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+28)|0);
 HEAP32[(($43)>>2)]=$39;
 return;
}
function _mrb_fixnum_value140($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cipush($mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $c;
   var $ci;
   var $eidx;
   var $ridx;
   var $size;
   $1=$mrb;
   var $2=$1;
   var $3=(($2+8)|0);
   var $4=HEAP32[(($3)>>2)];
   $c=$4;
   var $5=$c;
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   $ci=$7;
   var $8=$ci;
   var $9=(($8+36)|0);
   var $10=HEAP32[(($9)>>2)];
   $eidx=$10;
   var $11=$ci;
   var $12=(($11+32)|0);
   var $13=HEAP32[(($12)>>2)];
   $ridx=$13;
   var $14=$ci;
   var $15=(($14+44)|0);
   var $16=$c;
   var $17=(($16+24)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($15)|(0))==(($18)|(0));
   if ($19) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $21=$ci;
   var $22=$c;
   var $23=(($22+20)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$21;
   var $26=$24;
   var $27=((($25)-($26))|0);
   var $28=((((($27)|(0)))/(44))&-1);
   $size=$28;
   var $29=$1;
   var $30=$c;
   var $31=(($30+20)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$32;
   var $34=$size;
   var $35=((($34)*(44))&-1);
   var $36=($35<<1);
   var $37=_mrb_realloc($29, $33, $36);
   var $38=$37;
   var $39=$c;
   var $40=(($39+20)|0);
   HEAP32[(($40)>>2)]=$38;
   var $41=$c;
   var $42=(($41+20)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=$size;
   var $45=(($43+((($44)*(44))&-1))|0);
   var $46=$c;
   var $47=(($46+16)|0);
   HEAP32[(($47)>>2)]=$45;
   var $48=$c;
   var $49=(($48+20)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=$size;
   var $52=($51<<1);
   var $53=(($50+((($52)*(44))&-1))|0);
   var $54=$c;
   var $55=(($54+24)|0);
   HEAP32[(($55)>>2)]=$53;
   label = 3; break;
  case 3: 
   var $57=$c;
   var $58=(($57+16)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=(($59+44)|0);
   HEAP32[(($58)>>2)]=$60;
   $ci=$60;
   var $61=$ci;
   var $62=(($61+12)|0);
   HEAP32[(($62)>>2)]=2;
   var $63=$eidx;
   var $64=$ci;
   var $65=(($64+36)|0);
   HEAP32[(($65)>>2)]=$63;
   var $66=$ridx;
   var $67=$ci;
   var $68=(($67+32)|0);
   HEAP32[(($68)>>2)]=$66;
   var $69=$ci;
   var $70=(($69+40)|0);
   HEAP32[(($70)>>2)]=0;
   var $71=$ci;
   return $71;
  default: assert(0, "bad label: " + label);
 }
}
function _stack_extend($mrb, $room, $keep) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $size;
   var $off;
   var $oldbase;
   $1=$mrb;
   $2=$room;
   $3=$keep;
   var $4=$1;
   var $5=(($4+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6+4)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$2;
   var $10=(($8+((($9)*(12))&-1))|0);
   var $11=$1;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($10)>>>(0)) >= (($15)>>>(0));
   if ($16) { label = 2; break; } else { label = 10; break; }
  case 2: 
   var $18=$1;
   var $19=(($18+8)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+8)|0);
   var $22=HEAP32[(($21)>>2)];
   $oldbase=$22;
   var $23=$1;
   var $24=(($23+8)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25+12)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$1;
   var $29=(($28+8)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30+8)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$27;
   var $34=$32;
   var $35=((($33)-($34))|0);
   var $36=((((($35)|(0)))/(12))&-1);
   $size=$36;
   var $37=$1;
   var $38=(($37+8)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39+4)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$1;
   var $43=(($42+8)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=(($44+8)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=$41;
   var $48=$46;
   var $49=((($47)-($48))|0);
   var $50=((((($49)|(0)))/(12))&-1);
   $off=$50;
   var $51=$3;
   var $52=$size;
   var $53=(($51)|(0)) > (($52)|(0));
   if ($53) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $55=$size;
   $3=$55;
   label = 4; break;
  case 4: 
   var $57=$2;
   var $58=$size;
   var $59=(($57)|(0)) <= (($58)|(0));
   if ($59) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $61=$size;
   var $62=((($61)+(128))|0);
   $size=$62;
   label = 7; break;
  case 6: 
   var $64=$2;
   var $65=$size;
   var $66=((($65)+($64))|0);
   $size=$66;
   label = 7; break;
  case 7: 
   var $68=$1;
   var $69=$1;
   var $70=(($69+8)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($71+8)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=$73;
   var $75=$size;
   var $76=((($75)*(12))&-1);
   var $77=_mrb_realloc($68, $74, $76);
   var $78=$77;
   var $79=$1;
   var $80=(($79+8)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($81+8)|0);
   HEAP32[(($82)>>2)]=$78;
   var $83=$1;
   var $84=(($83+8)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+8)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=$off;
   var $89=(($87+((($88)*(12))&-1))|0);
   var $90=$1;
   var $91=(($90+8)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=(($92+4)|0);
   HEAP32[(($93)>>2)]=$89;
   var $94=$1;
   var $95=(($94+8)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($96+8)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=$size;
   var $100=(($98+((($99)*(12))&-1))|0);
   var $101=$1;
   var $102=(($101+8)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=(($103+12)|0);
   HEAP32[(($104)>>2)]=$100;
   var $105=$1;
   var $106=$oldbase;
   var $107=$1;
   var $108=(($107+8)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=(($109+8)|0);
   var $111=HEAP32[(($110)>>2)];
   _envadjust($105, $106, $111);
   var $112=$size;
   var $113=(($112)|(0)) > 262016;
   if ($113) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $115=$1;
   var $116=$1;
   var $117=_mrb_class_get($116, ((87360)|0));
   _mrb_raise($115, $117, ((102984)|0));
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $120=$2;
   var $121=$3;
   var $122=(($120)|(0)) > (($121)|(0));
   if ($122) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $124=$3;
   var $125=$1;
   var $126=(($125+8)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=(($127+4)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=(($129+((($124)*(12))&-1))|0);
   var $131=$2;
   var $132=$3;
   var $133=((($131)-($132))|0);
   _stack_clear($130, $133);
   label = 12; break;
  case 12: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_symbol_value141($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=4;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP16[(($6)>>1)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _stack_copy($dst, $src, $size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$dst;
   $2=$src;
   $3=$size;
   label = 2; break;
  case 2: 
   var $5=$3;
   var $6=((($5)-(1))|0);
   $3=$6;
   var $7=(($5)>>>(0)) > 0;
   if ($7) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $9=$1;
   var $10=(($9+12)|0);
   $1=$10;
   var $11=$2;
   var $12=(($11+12)|0);
   $2=$12;
   var $13=$9;
   var $14=$11;
   assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_run($agg_result, $mrb, $proc, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 820)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 var mySetjmpIds = {};
 var setjmpTable = {"1": function(value) { label = 710; $67 = value },dummy: 0};
 while(1) try { switch(label) {
  case 1: 
   var $1;
   var $2;
   var $irep;
   var $pc;
   var $pool;
   var $syms;
   var $regs;
   var $i;
   var $ai;
   var $prev_jmp;
   var $c_jmp=sp;
   var $3=(sp)+(40);
   var $4=(sp)+(52);
   var $5=(sp)+(64);
   var $6=(sp)+(76);
   var $7=(sp)+(88);
   var $a;
   var $8=(sp)+(100);
   var $a1;
   var $regs_a;
   var $up;
   var $e;
   var $9=(sp)+(112);
   var $idx;
   var $up2;
   var $e3;
   var $regs_a4;
   var $idx5;
   var $a6;
   var $p;
   var $n;
   var $a7;
   var $a8;
   var $a9;
   var $n10;
   var $m;
   var $c=(sp)+(124);
   var $ci;
   var $recv=(sp)+(128);
   var $result=(sp)+(140);
   var $mid;
   var $sym=(sp)+(152);
   var $10=(sp)+(164);
   var $11=(sp)+(176);
   var $ci11;
   var $recv12=(sp)+(188);
   var $m13;
   var $12=(sp)+(200);
   var $13=(sp)+(212);
   var $recv14=(sp)+(224);
   var $ci15;
   var $m16;
   var $c17=(sp)+(236);
   var $mid18;
   var $a19;
   var $n20;
   var $14=(sp)+(240);
   var $15=(sp)+(252);
   var $16=(sp)+(264);
   var $a21;
   var $bx;
   var $m1;
   var $r;
   var $m2;
   var $lv;
   var $stack;
   var $e22;
   var $exc=(sp)+(276);
   var $17=(sp)+(288);
   var $18=(sp)+(300);
   var $pp;
   var $rest;
   var $len;
   var $ary;
   var $19=(sp)+(312);
   var $ax;
   var $m123;
   var $o;
   var $r24;
   var $m225;
   var $argc;
   var $argv;
   var $argv0;
   var $len26;
   var $blk;
   var $ary27;
   var $mlen;
   var $20=(sp)+(324);
   var $21=(sp)+(336);
   var $ci28;
   var $eidx;
   var $22=(sp)+(348);
   var $23=(sp)+(360);
   var $ci29;
   var $acc;
   var $eidx30;
   var $v=(sp)+(372);
   var $e31;
   var $exc32=(sp)+(384);
   var $24=(sp)+(396);
   var $a33;
   var $n34;
   var $m35;
   var $c36=(sp)+(408);
   var $ci37;
   var $recv38=(sp)+(412);
   var $mid39;
   var $sym40=(sp)+(424);
   var $25=(sp)+(436);
   var $26=(sp)+(448);
   var $a41;
   var $bx42;
   var $m143;
   var $r44;
   var $m245;
   var $lv46;
   var $stack47;
   var $e48;
   var $a49;
   var $x;
   var $y;
   var $z;
   var $regs_a50;
   var $x51;
   var $y52;
   var $27=(sp)+(460);
   var $a53;
   var $x54;
   var $y55;
   var $z56;
   var $x57;
   var $y58;
   var $a59;
   var $x60;
   var $y61;
   var $z62;
   var $x63;
   var $y64;
   var $a65;
   var $x66;
   var $y67;
   var $x68;
   var $y69;
   var $a70;
   var $x71;
   var $y72;
   var $z73;
   var $a74;
   var $regs_a75;
   var $x76;
   var $y77;
   var $z78;
   var $a79;
   var $a80;
   var $a81;
   var $a82;
   var $a83;
   var $a84;
   var $28=(sp)+(472);
   var $29=(sp)+(484);
   var $a85;
   var $c86;
   var $v87=(sp)+(496);
   var $30=(sp)+(508);
   var $a88;
   var $v89=(sp)+(520);
   var $pre;
   var $post;
   var $31=(sp)+(532);
   var $ary90;
   var $len91;
   var $i92;
   var $32=(sp)+(544);
   var $33=(sp)+(556);
   var $34=(sp)+(568);
   var $b;
   var $c93;
   var $lim;
   var $hash=(sp)+(580);
   var $p94;
   var $c95;
   var $35=(sp)+(592);
   var $36=(sp)+(604);
   var $c96;
   var $a97;
   var $base=(sp)+(616);
   var $super=(sp)+(628);
   var $id;
   var $37=(sp)+(640);
   var $38=(sp)+(652);
   var $c98;
   var $a99;
   var $base100=(sp)+(664);
   var $id101;
   var $39=(sp)+(676);
   var $40=(sp)+(688);
   var $a102;
   var $ci103;
   var $recv104=(sp)+(700);
   var $p105;
   var $41=(sp)+(712);
   var $a106;
   var $c107;
   var $42=(sp)+(724);
   var $exc108=(sp)+(736);
   var $43=(sp)+(748);
   var $b109;
   var $44=(sp)+(760);
   var $n110;
   var $msg=(sp)+(772);
   var $exc111=(sp)+(784);
   var $45=(sp)+(796);
   var $46=(sp)+(808);
   $1=$mrb;
   $2=$proc;
   var $47=$2;
   var $48=(($47+12)|0);
   var $49=$48;
   var $50=HEAP32[(($49)>>2)];
   $irep=$50;
   var $51=$irep;
   var $52=(($51+12)|0);
   var $53=HEAP32[(($52)>>2)];
   $pc=$53;
   var $54=$irep;
   var $55=(($54+16)|0);
   var $56=HEAP32[(($55)>>2)];
   $pool=$56;
   var $57=$irep;
   var $58=(($57+20)|0);
   var $59=HEAP32[(($58)>>2)];
   $syms=$59;
   $regs=0;
   var $60=$1;
   var $61=_mrb_gc_arena_save($60);
   $ai=$61;
   var $62=$1;
   var $63=(($62)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=$64;
   $prev_jmp=$65;
   var $66=(($c_jmp)|0);
   var $67=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($66)>>2)]=tempInt, 0);
   label = 710; break;
  case 710: 
   var $68=(($67)|(0))==0;
   if ($68) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $70=$c_jmp;
   var $71=$1;
   var $72=(($71)|0);
   HEAP32[(($72)>>2)]=$70;
   label = 4; break;
  case 3: 
   label = 222; break;
  case 4: 
   var $75=$1;
   var $76=(($75+8)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($77+4)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79)|(0))!=0;
   if ($80) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $82=$1;
   _stack_init($82);
   label = 6; break;
  case 6: 
   var $84=$1;
   var $85=$irep;
   var $86=(($85+6)|0);
   var $87=HEAP16[(($86)>>1)];
   var $88=(($87)&(65535));
   var $89=$irep;
   var $90=(($89+6)|0);
   var $91=HEAP16[(($90)>>1)];
   var $92=(($91)&(65535));
   _stack_extend($84, $88, $92);
   var $93=$2;
   var $94=$1;
   var $95=(($94+8)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($96+16)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=(($98+4)|0);
   HEAP32[(($99)>>2)]=$93;
   var $100=$irep;
   var $101=(($100+6)|0);
   var $102=HEAP16[(($101)>>1)];
   var $103=(($102)&(65535));
   var $104=((($103)+(1))|0);
   var $105=$1;
   var $106=(($105+8)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=(($107+16)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=(($109+12)|0);
   HEAP32[(($110)>>2)]=$104;
   var $111=$1;
   var $112=(($111+8)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=(($113+4)|0);
   var $115=HEAP32[(($114)>>2)];
   $regs=$115;
   var $116=$regs;
   var $117=(($116)|0);
   var $118=$117;
   var $119=$self;
   assert(12 % 1 === 0);HEAP32[(($118)>>2)]=HEAP32[(($119)>>2)];HEAP32[((($118)+(4))>>2)]=HEAP32[((($119)+(4))>>2)];HEAP32[((($118)+(8))>>2)]=HEAP32[((($119)+(8))>>2)];
   var $120=$pc;
   var $121=HEAP32[(($120)>>2)];
   $i=$121;
   var $122=$i;
   var $123=$122 & 127;
   var $124=((74668+($123<<2))|0);
   var $125=HEAP32[(($124)>>2)];
   var $5866 = $125;label = 709; break;
  case 7: 
   var $127=$pc;
   var $128=(($127+4)|0);
   $pc=$128;
   var $129=HEAP32[(($128)>>2)];
   $i=$129;
   var $130=$i;
   var $131=$130 & 127;
   var $132=((74668+($131<<2))|0);
   var $133=HEAP32[(($132)>>2)];
   var $5866 = $133;label = 709; break;
  case 8: 
   var $135=$i;
   var $136=$135 >>> 23;
   var $137=$136 & 511;
   var $138=$regs;
   var $139=(($138+((($137)*(12))&-1))|0);
   var $140=$i;
   var $141=$140 >>> 14;
   var $142=$141 & 511;
   var $143=$regs;
   var $144=(($143+((($142)*(12))&-1))|0);
   var $145=$139;
   var $146=$144;
   assert(12 % 1 === 0);HEAP32[(($145)>>2)]=HEAP32[(($146)>>2)];HEAP32[((($145)+(4))>>2)]=HEAP32[((($146)+(4))>>2)];HEAP32[((($145)+(8))>>2)]=HEAP32[((($146)+(8))>>2)];
   var $147=$pc;
   var $148=(($147+4)|0);
   $pc=$148;
   var $149=HEAP32[(($148)>>2)];
   $i=$149;
   var $150=$i;
   var $151=$150 & 127;
   var $152=((74668+($151<<2))|0);
   var $153=HEAP32[(($152)>>2)];
   var $5866 = $153;label = 709; break;
  case 9: 
   var $155=$i;
   var $156=$155 >>> 23;
   var $157=$156 & 511;
   var $158=$regs;
   var $159=(($158+((($157)*(12))&-1))|0);
   var $160=$i;
   var $161=$160 >>> 7;
   var $162=$161 & 65535;
   var $163=$pool;
   var $164=(($163+((($162)*(12))&-1))|0);
   var $165=$159;
   var $166=$164;
   assert(12 % 1 === 0);HEAP32[(($165)>>2)]=HEAP32[(($166)>>2)];HEAP32[((($165)+(4))>>2)]=HEAP32[((($166)+(4))>>2)];HEAP32[((($165)+(8))>>2)]=HEAP32[((($166)+(8))>>2)];
   var $167=$pc;
   var $168=(($167+4)|0);
   $pc=$168;
   var $169=HEAP32[(($168)>>2)];
   $i=$169;
   var $170=$i;
   var $171=$170 & 127;
   var $172=((74668+($171<<2))|0);
   var $173=HEAP32[(($172)>>2)];
   var $5866 = $173;label = 709; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $176=$i;
   var $177=$176 >>> 23;
   var $178=$177 & 511;
   var $179=$regs;
   var $180=(($179+((($178)*(12))&-1))|0);
   var $181=(($180+8)|0);
   HEAP32[(($181)>>2)]=3;
   var $182=$i;
   var $183=$182 >>> 7;
   var $184=$183 & 65535;
   var $185=((($184)-(32767))|0);
   var $186=$i;
   var $187=$186 >>> 23;
   var $188=$187 & 511;
   var $189=$regs;
   var $190=(($189+((($188)*(12))&-1))|0);
   var $191=(($190)|0);
   var $192=$191;
   HEAP32[(($192)>>2)]=$185;
   label = 12; break;
  case 12: 
   var $194=$pc;
   var $195=(($194+4)|0);
   $pc=$195;
   var $196=HEAP32[(($195)>>2)];
   $i=$196;
   var $197=$i;
   var $198=$197 & 127;
   var $199=((74668+($198<<2))|0);
   var $200=HEAP32[(($199)>>2)];
   var $5866 = $200;label = 709; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $203=$i;
   var $204=$203 >>> 23;
   var $205=$204 & 511;
   var $206=$regs;
   var $207=(($206+((($205)*(12))&-1))|0);
   var $208=(($207+8)|0);
   HEAP32[(($208)>>2)]=4;
   var $209=$i;
   var $210=$209 >>> 7;
   var $211=$210 & 65535;
   var $212=$syms;
   var $213=(($212+($211<<1))|0);
   var $214=HEAP16[(($213)>>1)];
   var $215=$i;
   var $216=$215 >>> 23;
   var $217=$216 & 511;
   var $218=$regs;
   var $219=(($218+((($217)*(12))&-1))|0);
   var $220=(($219)|0);
   var $221=$220;
   HEAP16[(($221)>>1)]=$214;
   label = 15; break;
  case 15: 
   var $223=$pc;
   var $224=(($223+4)|0);
   $pc=$224;
   var $225=HEAP32[(($224)>>2)];
   $i=$225;
   var $226=$i;
   var $227=$226 & 127;
   var $228=((74668+($227<<2))|0);
   var $229=HEAP32[(($228)>>2)];
   var $5866 = $229;label = 709; break;
  case 16: 
   var $231=$i;
   var $232=$231 >>> 23;
   var $233=$232 & 511;
   var $234=$regs;
   var $235=(($234+((($233)*(12))&-1))|0);
   var $236=$regs;
   var $237=(($236)|0);
   var $238=$235;
   var $239=$237;
   assert(12 % 1 === 0);HEAP32[(($238)>>2)]=HEAP32[(($239)>>2)];HEAP32[((($238)+(4))>>2)]=HEAP32[((($239)+(4))>>2)];HEAP32[((($238)+(8))>>2)]=HEAP32[((($239)+(8))>>2)];
   var $240=$pc;
   var $241=(($240+4)|0);
   $pc=$241;
   var $242=HEAP32[(($241)>>2)];
   $i=$242;
   var $243=$i;
   var $244=$243 & 127;
   var $245=((74668+($244<<2))|0);
   var $246=HEAP32[(($245)>>2)];
   var $5866 = $246;label = 709; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $249=$i;
   var $250=$249 >>> 23;
   var $251=$250 & 511;
   var $252=$regs;
   var $253=(($252+((($251)*(12))&-1))|0);
   var $254=(($253+8)|0);
   HEAP32[(($254)>>2)]=2;
   var $255=$i;
   var $256=$255 >>> 23;
   var $257=$256 & 511;
   var $258=$regs;
   var $259=(($258+((($257)*(12))&-1))|0);
   var $260=(($259)|0);
   var $261=$260;
   HEAP32[(($261)>>2)]=1;
   label = 19; break;
  case 19: 
   var $263=$pc;
   var $264=(($263+4)|0);
   $pc=$264;
   var $265=HEAP32[(($264)>>2)];
   $i=$265;
   var $266=$i;
   var $267=$266 & 127;
   var $268=((74668+($267<<2))|0);
   var $269=HEAP32[(($268)>>2)];
   var $5866 = $269;label = 709; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $272=$i;
   var $273=$272 >>> 23;
   var $274=$273 & 511;
   var $275=$regs;
   var $276=(($275+((($274)*(12))&-1))|0);
   var $277=(($276+8)|0);
   HEAP32[(($277)>>2)]=0;
   var $278=$i;
   var $279=$278 >>> 23;
   var $280=$279 & 511;
   var $281=$regs;
   var $282=(($281+((($280)*(12))&-1))|0);
   var $283=(($282)|0);
   var $284=$283;
   HEAP32[(($284)>>2)]=1;
   label = 22; break;
  case 22: 
   var $286=$pc;
   var $287=(($286+4)|0);
   $pc=$287;
   var $288=HEAP32[(($287)>>2)];
   $i=$288;
   var $289=$i;
   var $290=$289 & 127;
   var $291=((74668+($290<<2))|0);
   var $292=HEAP32[(($291)>>2)];
   var $5866 = $292;label = 709; break;
  case 23: 
   var $294=$i;
   var $295=$294 >>> 23;
   var $296=$295 & 511;
   var $297=$regs;
   var $298=(($297+((($296)*(12))&-1))|0);
   var $299=$1;
   var $300=$i;
   var $301=$300 >>> 7;
   var $302=$301 & 65535;
   var $303=$syms;
   var $304=(($303+($302<<1))|0);
   var $305=HEAP16[(($304)>>1)];
   _mrb_gv_get($3, $299, $305);
   var $306=$298;
   var $307=$3;
   assert(12 % 1 === 0);HEAP32[(($306)>>2)]=HEAP32[(($307)>>2)];HEAP32[((($306)+(4))>>2)]=HEAP32[((($307)+(4))>>2)];HEAP32[((($306)+(8))>>2)]=HEAP32[((($307)+(8))>>2)];
   var $308=$pc;
   var $309=(($308+4)|0);
   $pc=$309;
   var $310=HEAP32[(($309)>>2)];
   $i=$310;
   var $311=$i;
   var $312=$311 & 127;
   var $313=((74668+($312<<2))|0);
   var $314=HEAP32[(($313)>>2)];
   var $5866 = $314;label = 709; break;
  case 24: 
   var $316=$1;
   var $317=$i;
   var $318=$317 >>> 7;
   var $319=$318 & 65535;
   var $320=$syms;
   var $321=(($320+($319<<1))|0);
   var $322=HEAP16[(($321)>>1)];
   var $323=$i;
   var $324=$323 >>> 23;
   var $325=$324 & 511;
   var $326=$regs;
   var $327=(($326+((($325)*(12))&-1))|0);
   _mrb_gv_set($316, $322, $327);
   var $328=$pc;
   var $329=(($328+4)|0);
   $pc=$329;
   var $330=HEAP32[(($329)>>2)];
   $i=$330;
   var $331=$i;
   var $332=$331 & 127;
   var $333=((74668+($332<<2))|0);
   var $334=HEAP32[(($333)>>2)];
   var $5866 = $334;label = 709; break;
  case 25: 
   var $336=$i;
   var $337=$336 >>> 23;
   var $338=$337 & 511;
   var $339=$regs;
   var $340=(($339+((($338)*(12))&-1))|0);
   var $341=$1;
   var $342=$i;
   var $343=$342 >>> 7;
   var $344=$343 & 65535;
   var $345=(($344) & 65535);
   _mrb_vm_special_get($4, $341, $345);
   var $346=$340;
   var $347=$4;
   assert(12 % 1 === 0);HEAP32[(($346)>>2)]=HEAP32[(($347)>>2)];HEAP32[((($346)+(4))>>2)]=HEAP32[((($347)+(4))>>2)];HEAP32[((($346)+(8))>>2)]=HEAP32[((($347)+(8))>>2)];
   var $348=$pc;
   var $349=(($348+4)|0);
   $pc=$349;
   var $350=HEAP32[(($349)>>2)];
   $i=$350;
   var $351=$i;
   var $352=$351 & 127;
   var $353=((74668+($352<<2))|0);
   var $354=HEAP32[(($353)>>2)];
   var $5866 = $354;label = 709; break;
  case 26: 
   var $356=$1;
   var $357=$i;
   var $358=$357 >>> 7;
   var $359=$358 & 65535;
   var $360=(($359) & 65535);
   var $361=$i;
   var $362=$361 >>> 23;
   var $363=$362 & 511;
   var $364=$regs;
   var $365=(($364+((($363)*(12))&-1))|0);
   _mrb_vm_special_set($356, $360, $365);
   var $366=$pc;
   var $367=(($366+4)|0);
   $pc=$367;
   var $368=HEAP32[(($367)>>2)];
   $i=$368;
   var $369=$i;
   var $370=$369 & 127;
   var $371=((74668+($370<<2))|0);
   var $372=HEAP32[(($371)>>2)];
   var $5866 = $372;label = 709; break;
  case 27: 
   var $374=$i;
   var $375=$374 >>> 23;
   var $376=$375 & 511;
   var $377=$regs;
   var $378=(($377+((($376)*(12))&-1))|0);
   var $379=$1;
   var $380=$i;
   var $381=$380 >>> 7;
   var $382=$381 & 65535;
   var $383=$syms;
   var $384=(($383+($382<<1))|0);
   var $385=HEAP16[(($384)>>1)];
   _mrb_vm_iv_get($5, $379, $385);
   var $386=$378;
   var $387=$5;
   assert(12 % 1 === 0);HEAP32[(($386)>>2)]=HEAP32[(($387)>>2)];HEAP32[((($386)+(4))>>2)]=HEAP32[((($387)+(4))>>2)];HEAP32[((($386)+(8))>>2)]=HEAP32[((($387)+(8))>>2)];
   var $388=$pc;
   var $389=(($388+4)|0);
   $pc=$389;
   var $390=HEAP32[(($389)>>2)];
   $i=$390;
   var $391=$i;
   var $392=$391 & 127;
   var $393=((74668+($392<<2))|0);
   var $394=HEAP32[(($393)>>2)];
   var $5866 = $394;label = 709; break;
  case 28: 
   var $396=$1;
   var $397=$i;
   var $398=$397 >>> 7;
   var $399=$398 & 65535;
   var $400=$syms;
   var $401=(($400+($399<<1))|0);
   var $402=HEAP16[(($401)>>1)];
   var $403=$i;
   var $404=$403 >>> 23;
   var $405=$404 & 511;
   var $406=$regs;
   var $407=(($406+((($405)*(12))&-1))|0);
   _mrb_vm_iv_set($396, $402, $407);
   var $408=$pc;
   var $409=(($408+4)|0);
   $pc=$409;
   var $410=HEAP32[(($409)>>2)];
   $i=$410;
   var $411=$i;
   var $412=$411 & 127;
   var $413=((74668+($412<<2))|0);
   var $414=HEAP32[(($413)>>2)];
   var $5866 = $414;label = 709; break;
  case 29: 
   var $416=$i;
   var $417=$416 >>> 23;
   var $418=$417 & 511;
   var $419=$regs;
   var $420=(($419+((($418)*(12))&-1))|0);
   var $421=$1;
   var $422=$i;
   var $423=$422 >>> 7;
   var $424=$423 & 65535;
   var $425=$syms;
   var $426=(($425+($424<<1))|0);
   var $427=HEAP16[(($426)>>1)];
   _mrb_vm_cv_get($6, $421, $427);
   var $428=$420;
   var $429=$6;
   assert(12 % 1 === 0);HEAP32[(($428)>>2)]=HEAP32[(($429)>>2)];HEAP32[((($428)+(4))>>2)]=HEAP32[((($429)+(4))>>2)];HEAP32[((($428)+(8))>>2)]=HEAP32[((($429)+(8))>>2)];
   var $430=$pc;
   var $431=(($430+4)|0);
   $pc=$431;
   var $432=HEAP32[(($431)>>2)];
   $i=$432;
   var $433=$i;
   var $434=$433 & 127;
   var $435=((74668+($434<<2))|0);
   var $436=HEAP32[(($435)>>2)];
   var $5866 = $436;label = 709; break;
  case 30: 
   var $438=$1;
   var $439=$i;
   var $440=$439 >>> 7;
   var $441=$440 & 65535;
   var $442=$syms;
   var $443=(($442+($441<<1))|0);
   var $444=HEAP16[(($443)>>1)];
   var $445=$i;
   var $446=$445 >>> 23;
   var $447=$446 & 511;
   var $448=$regs;
   var $449=(($448+((($447)*(12))&-1))|0);
   _mrb_vm_cv_set($438, $444, $449);
   var $450=$pc;
   var $451=(($450+4)|0);
   $pc=$451;
   var $452=HEAP32[(($451)>>2)];
   $i=$452;
   var $453=$i;
   var $454=$453 & 127;
   var $455=((74668+($454<<2))|0);
   var $456=HEAP32[(($455)>>2)];
   var $5866 = $456;label = 709; break;
  case 31: 
   var $458=$i;
   var $459=$458 >>> 23;
   var $460=$459 & 511;
   var $461=$regs;
   var $462=(($461+((($460)*(12))&-1))|0);
   var $463=$1;
   var $464=$i;
   var $465=$464 >>> 7;
   var $466=$465 & 65535;
   var $467=$syms;
   var $468=(($467+($466<<1))|0);
   var $469=HEAP16[(($468)>>1)];
   _mrb_vm_const_get($7, $463, $469);
   var $470=$462;
   var $471=$7;
   assert(12 % 1 === 0);HEAP32[(($470)>>2)]=HEAP32[(($471)>>2)];HEAP32[((($470)+(4))>>2)]=HEAP32[((($471)+(4))>>2)];HEAP32[((($470)+(8))>>2)]=HEAP32[((($471)+(8))>>2)];
   var $472=$pc;
   var $473=(($472+4)|0);
   $pc=$473;
   var $474=HEAP32[(($473)>>2)];
   $i=$474;
   var $475=$i;
   var $476=$475 & 127;
   var $477=((74668+($476<<2))|0);
   var $478=HEAP32[(($477)>>2)];
   var $5866 = $478;label = 709; break;
  case 32: 
   var $480=$1;
   var $481=$i;
   var $482=$481 >>> 7;
   var $483=$482 & 65535;
   var $484=$syms;
   var $485=(($484+($483<<1))|0);
   var $486=HEAP16[(($485)>>1)];
   var $487=$i;
   var $488=$487 >>> 23;
   var $489=$488 & 511;
   var $490=$regs;
   var $491=(($490+((($489)*(12))&-1))|0);
   _mrb_vm_const_set($480, $486, $491);
   var $492=$pc;
   var $493=(($492+4)|0);
   $pc=$493;
   var $494=HEAP32[(($493)>>2)];
   $i=$494;
   var $495=$i;
   var $496=$495 & 127;
   var $497=((74668+($496<<2))|0);
   var $498=HEAP32[(($497)>>2)];
   var $5866 = $498;label = 709; break;
  case 33: 
   var $500=$i;
   var $501=$500 >>> 23;
   var $502=$501 & 511;
   $a=$502;
   var $503=$a;
   var $504=$regs;
   var $505=(($504+((($503)*(12))&-1))|0);
   var $506=$1;
   var $507=$a;
   var $508=$regs;
   var $509=(($508+((($507)*(12))&-1))|0);
   var $510=$i;
   var $511=$510 >>> 7;
   var $512=$511 & 65535;
   var $513=$syms;
   var $514=(($513+($512<<1))|0);
   var $515=HEAP16[(($514)>>1)];
   _mrb_const_get($8, $506, $509, $515);
   var $516=$505;
   var $517=$8;
   assert(12 % 1 === 0);HEAP32[(($516)>>2)]=HEAP32[(($517)>>2)];HEAP32[((($516)+(4))>>2)]=HEAP32[((($517)+(4))>>2)];HEAP32[((($516)+(8))>>2)]=HEAP32[((($517)+(8))>>2)];
   var $518=$pc;
   var $519=(($518+4)|0);
   $pc=$519;
   var $520=HEAP32[(($519)>>2)];
   $i=$520;
   var $521=$i;
   var $522=$521 & 127;
   var $523=((74668+($522<<2))|0);
   var $524=HEAP32[(($523)>>2)];
   var $5866 = $524;label = 709; break;
  case 34: 
   var $526=$i;
   var $527=$526 >>> 23;
   var $528=$527 & 511;
   $a1=$528;
   var $529=$1;
   var $530=$a1;
   var $531=((($530)+(1))|0);
   var $532=$regs;
   var $533=(($532+((($531)*(12))&-1))|0);
   var $534=$i;
   var $535=$534 >>> 7;
   var $536=$535 & 65535;
   var $537=$syms;
   var $538=(($537+($536<<1))|0);
   var $539=HEAP16[(($538)>>1)];
   var $540=$a1;
   var $541=$regs;
   var $542=(($541+((($540)*(12))&-1))|0);
   _mrb_const_set($529, $533, $539, $542);
   var $543=$pc;
   var $544=(($543+4)|0);
   $pc=$544;
   var $545=HEAP32[(($544)>>2)];
   $i=$545;
   var $546=$i;
   var $547=$546 & 127;
   var $548=((74668+($547<<2))|0);
   var $549=HEAP32[(($548)>>2)];
   var $5866 = $549;label = 709; break;
  case 35: 
   var $551=$regs;
   var $552=$i;
   var $553=$552 >>> 23;
   var $554=$553 & 511;
   var $555=(($551+((($554)*(12))&-1))|0);
   $regs_a=$555;
   var $556=$i;
   var $557=$556 >>> 7;
   var $558=$557 & 127;
   $up=$558;
   var $559=$1;
   var $560=$up;
   var $561=_uvenv($559, $560);
   $e=$561;
   var $562=$e;
   var $563=(($562)|(0))!=0;
   if ($563) { label = 37; break; } else { label = 36; break; }
  case 36: 
   var $565=$regs_a;
   _mrb_nil_value144($9);
   var $566=$565;
   var $567=$9;
   assert(12 % 1 === 0);HEAP32[(($566)>>2)]=HEAP32[(($567)>>2)];HEAP32[((($566)+(4))>>2)]=HEAP32[((($567)+(4))>>2)];HEAP32[((($566)+(8))>>2)]=HEAP32[((($567)+(8))>>2)];
   label = 38; break;
  case 37: 
   var $569=$i;
   var $570=$569 >>> 14;
   var $571=$570 & 511;
   $idx=$571;
   var $572=$regs_a;
   var $573=$idx;
   var $574=$e;
   var $575=(($574+12)|0);
   var $576=HEAP32[(($575)>>2)];
   var $577=(($576+((($573)*(12))&-1))|0);
   var $578=$572;
   var $579=$577;
   assert(12 % 1 === 0);HEAP32[(($578)>>2)]=HEAP32[(($579)>>2)];HEAP32[((($578)+(4))>>2)]=HEAP32[((($579)+(4))>>2)];HEAP32[((($578)+(8))>>2)]=HEAP32[((($579)+(8))>>2)];
   label = 38; break;
  case 38: 
   var $581=$pc;
   var $582=(($581+4)|0);
   $pc=$582;
   var $583=HEAP32[(($582)>>2)];
   $i=$583;
   var $584=$i;
   var $585=$584 & 127;
   var $586=((74668+($585<<2))|0);
   var $587=HEAP32[(($586)>>2)];
   var $5866 = $587;label = 709; break;
  case 39: 
   var $589=$i;
   var $590=$589 >>> 7;
   var $591=$590 & 127;
   $up2=$591;
   var $592=$1;
   var $593=$up2;
   var $594=_uvenv($592, $593);
   $e3=$594;
   var $595=$e3;
   var $596=(($595)|(0))!=0;
   if ($596) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $598=$regs;
   var $599=$i;
   var $600=$599 >>> 23;
   var $601=$600 & 511;
   var $602=(($598+((($601)*(12))&-1))|0);
   $regs_a4=$602;
   var $603=$i;
   var $604=$603 >>> 14;
   var $605=$604 & 511;
   $idx5=$605;
   var $606=$idx5;
   var $607=$e3;
   var $608=(($607+12)|0);
   var $609=HEAP32[(($608)>>2)];
   var $610=(($609+((($606)*(12))&-1))|0);
   var $611=$regs_a4;
   var $612=$610;
   var $613=$611;
   assert(12 % 1 === 0);HEAP32[(($612)>>2)]=HEAP32[(($613)>>2)];HEAP32[((($612)+(4))>>2)]=HEAP32[((($613)+(4))>>2)];HEAP32[((($612)+(8))>>2)]=HEAP32[((($613)+(8))>>2)];
   var $614=$1;
   var $615=$e3;
   var $616=$615;
   _mrb_write_barrier($614, $616);
   label = 41; break;
  case 41: 
   var $618=$pc;
   var $619=(($618+4)|0);
   $pc=$619;
   var $620=HEAP32[(($619)>>2)];
   $i=$620;
   var $621=$i;
   var $622=$621 & 127;
   var $623=((74668+($622<<2))|0);
   var $624=HEAP32[(($623)>>2)];
   var $5866 = $624;label = 709; break;
  case 42: 
   var $626=$i;
   var $627=$626 >>> 7;
   var $628=$627 & 65535;
   var $629=((($628)-(32767))|0);
   var $630=$pc;
   var $631=(($630+($629<<2))|0);
   $pc=$631;
   var $632=$pc;
   var $633=HEAP32[(($632)>>2)];
   $i=$633;
   var $634=$i;
   var $635=$634 & 127;
   var $636=((74668+($635<<2))|0);
   var $637=HEAP32[(($636)>>2)];
   var $5866 = $637;label = 709; break;
  case 43: 
   var $639=$i;
   var $640=$639 >>> 23;
   var $641=$640 & 511;
   var $642=$regs;
   var $643=(($642+((($641)*(12))&-1))|0);
   var $644=(($643+8)|0);
   var $645=HEAP32[(($644)>>2)];
   var $646=(($645)|(0))!=0;
   if ($646) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $648=$i;
   var $649=$648 >>> 7;
   var $650=$649 & 65535;
   var $651=((($650)-(32767))|0);
   var $652=$pc;
   var $653=(($652+($651<<2))|0);
   $pc=$653;
   var $654=$pc;
   var $655=HEAP32[(($654)>>2)];
   $i=$655;
   var $656=$i;
   var $657=$656 & 127;
   var $658=((74668+($657<<2))|0);
   var $659=HEAP32[(($658)>>2)];
   var $5866 = $659;label = 709; break;
  case 45: 
   var $661=$pc;
   var $662=(($661+4)|0);
   $pc=$662;
   var $663=HEAP32[(($662)>>2)];
   $i=$663;
   var $664=$i;
   var $665=$664 & 127;
   var $666=((74668+($665<<2))|0);
   var $667=HEAP32[(($666)>>2)];
   var $5866 = $667;label = 709; break;
  case 46: 
   var $669=$i;
   var $670=$669 >>> 23;
   var $671=$670 & 511;
   var $672=$regs;
   var $673=(($672+((($671)*(12))&-1))|0);
   var $674=(($673+8)|0);
   var $675=HEAP32[(($674)>>2)];
   var $676=(($675)|(0))!=0;
   if ($676) { label = 48; break; } else { label = 47; break; }
  case 47: 
   var $678=$i;
   var $679=$678 >>> 7;
   var $680=$679 & 65535;
   var $681=((($680)-(32767))|0);
   var $682=$pc;
   var $683=(($682+($681<<2))|0);
   $pc=$683;
   var $684=$pc;
   var $685=HEAP32[(($684)>>2)];
   $i=$685;
   var $686=$i;
   var $687=$686 & 127;
   var $688=((74668+($687<<2))|0);
   var $689=HEAP32[(($688)>>2)];
   var $5866 = $689;label = 709; break;
  case 48: 
   var $691=$pc;
   var $692=(($691+4)|0);
   $pc=$692;
   var $693=HEAP32[(($692)>>2)];
   $i=$693;
   var $694=$i;
   var $695=$694 & 127;
   var $696=((74668+($695<<2))|0);
   var $697=HEAP32[(($696)>>2)];
   var $5866 = $697;label = 709; break;
  case 49: 
   var $699=$1;
   var $700=(($699+8)|0);
   var $701=HEAP32[(($700)>>2)];
   var $702=(($701+32)|0);
   var $703=HEAP32[(($702)>>2)];
   var $704=$1;
   var $705=(($704+8)|0);
   var $706=HEAP32[(($705)>>2)];
   var $707=(($706+16)|0);
   var $708=HEAP32[(($707)>>2)];
   var $709=(($708+32)|0);
   var $710=HEAP32[(($709)>>2)];
   var $711=(($703)|(0)) <= (($710)|(0));
   if ($711) { label = 50; break; } else { label = 54; break; }
  case 50: 
   var $713=$1;
   var $714=(($713+8)|0);
   var $715=HEAP32[(($714)>>2)];
   var $716=(($715+32)|0);
   var $717=HEAP32[(($716)>>2)];
   var $718=(($717)|(0))==0;
   if ($718) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $720=$1;
   var $721=(($720+8)|0);
   var $722=HEAP32[(($721)>>2)];
   var $723=(($722+32)|0);
   HEAP32[(($723)>>2)]=16;
   label = 53; break;
  case 52: 
   var $725=$1;
   var $726=(($725+8)|0);
   var $727=HEAP32[(($726)>>2)];
   var $728=(($727+32)|0);
   var $729=HEAP32[(($728)>>2)];
   var $730=($729<<1);
   HEAP32[(($728)>>2)]=$730;
   label = 53; break;
  case 53: 
   var $732=$1;
   var $733=$1;
   var $734=(($733+8)|0);
   var $735=HEAP32[(($734)>>2)];
   var $736=(($735+28)|0);
   var $737=HEAP32[(($736)>>2)];
   var $738=$737;
   var $739=$1;
   var $740=(($739+8)|0);
   var $741=HEAP32[(($740)>>2)];
   var $742=(($741+32)|0);
   var $743=HEAP32[(($742)>>2)];
   var $744=($743<<2);
   var $745=_mrb_realloc($732, $738, $744);
   var $746=$745;
   var $747=$1;
   var $748=(($747+8)|0);
   var $749=HEAP32[(($748)>>2)];
   var $750=(($749+28)|0);
   HEAP32[(($750)>>2)]=$746;
   label = 54; break;
  case 54: 
   var $752=$pc;
   var $753=$i;
   var $754=$753 >>> 7;
   var $755=$754 & 65535;
   var $756=((($755)-(32767))|0);
   var $757=(($752+($756<<2))|0);
   var $758=$1;
   var $759=(($758+8)|0);
   var $760=HEAP32[(($759)>>2)];
   var $761=(($760+16)|0);
   var $762=HEAP32[(($761)>>2)];
   var $763=(($762+32)|0);
   var $764=HEAP32[(($763)>>2)];
   var $765=((($764)+(1))|0);
   HEAP32[(($763)>>2)]=$765;
   var $766=$1;
   var $767=(($766+8)|0);
   var $768=HEAP32[(($767)>>2)];
   var $769=(($768+28)|0);
   var $770=HEAP32[(($769)>>2)];
   var $771=(($770+($764<<2))|0);
   HEAP32[(($771)>>2)]=$757;
   var $772=$pc;
   var $773=(($772+4)|0);
   $pc=$773;
   var $774=HEAP32[(($773)>>2)];
   $i=$774;
   var $775=$i;
   var $776=$775 & 127;
   var $777=((74668+($776<<2))|0);
   var $778=HEAP32[(($777)>>2)];
   var $5866 = $778;label = 709; break;
  case 55: 
   label = 56; break;
  case 56: 
   var $781=$1;
   var $782=(($781+16)|0);
   var $783=HEAP32[(($782)>>2)];
   var $784=$783;
   var $785=HEAP32[(($784)>>2)];
   var $786=$785 & 255;
   var $787=$i;
   var $788=$787 >>> 23;
   var $789=$788 & 511;
   var $790=$regs;
   var $791=(($790+((($789)*(12))&-1))|0);
   var $792=(($791+8)|0);
   HEAP32[(($792)>>2)]=$786;
   var $793=$1;
   var $794=(($793+16)|0);
   var $795=HEAP32[(($794)>>2)];
   var $796=$795;
   var $797=$i;
   var $798=$797 >>> 23;
   var $799=$798 & 511;
   var $800=$regs;
   var $801=(($800+((($799)*(12))&-1))|0);
   var $802=(($801)|0);
   var $803=$802;
   HEAP32[(($803)>>2)]=$796;
   label = 57; break;
  case 57: 
   var $805=$1;
   var $806=(($805+16)|0);
   HEAP32[(($806)>>2)]=0;
   var $807=$pc;
   var $808=(($807+4)|0);
   $pc=$808;
   var $809=HEAP32[(($808)>>2)];
   $i=$809;
   var $810=$i;
   var $811=$810 & 127;
   var $812=((74668+($811<<2))|0);
   var $813=HEAP32[(($812)>>2)];
   var $5866 = $813;label = 709; break;
  case 58: 
   var $815=$i;
   var $816=$815 >>> 23;
   var $817=$816 & 511;
   $a6=$817;
   label = 59; break;
  case 59: 
   var $819=$a6;
   var $820=((($819)-(1))|0);
   $a6=$820;
   var $821=(($819)|(0))!=0;
   if ($821) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $823=$1;
   var $824=(($823+8)|0);
   var $825=HEAP32[(($824)>>2)];
   var $826=(($825+16)|0);
   var $827=HEAP32[(($826)>>2)];
   var $828=(($827+32)|0);
   var $829=HEAP32[(($828)>>2)];
   var $830=((($829)-(1))|0);
   HEAP32[(($828)>>2)]=$830;
   label = 59; break;
  case 61: 
   var $832=$pc;
   var $833=(($832+4)|0);
   $pc=$833;
   var $834=HEAP32[(($833)>>2)];
   $i=$834;
   var $835=$i;
   var $836=$835 & 127;
   var $837=((74668+($836<<2))|0);
   var $838=HEAP32[(($837)>>2)];
   var $5866 = $838;label = 709; break;
  case 62: 
   var $840=$i;
   var $841=$840 >>> 23;
   var $842=$841 & 511;
   var $843=$regs;
   var $844=(($843+((($842)*(12))&-1))|0);
   var $845=(($844)|0);
   var $846=$845;
   var $847=HEAP32[(($846)>>2)];
   var $848=$847;
   var $849=$1;
   var $850=(($849+16)|0);
   HEAP32[(($850)>>2)]=$848;
   label = 222; break;
  case 63: 
   var $852=$1;
   var $853=$irep;
   var $854=(($853)|0);
   var $855=HEAP32[(($854)>>2)];
   var $856=$i;
   var $857=$856 >>> 7;
   var $858=$857 & 65535;
   var $859=((($855)+($858))|0);
   var $860=$1;
   var $861=(($860+24)|0);
   var $862=HEAP32[(($861)>>2)];
   var $863=(($862+($859<<2))|0);
   var $864=HEAP32[(($863)>>2)];
   var $865=_mrb_closure_new($852, $864);
   $p=$865;
   var $866=$1;
   var $867=(($866+8)|0);
   var $868=HEAP32[(($867)>>2)];
   var $869=(($868+40)|0);
   var $870=HEAP32[(($869)>>2)];
   var $871=$1;
   var $872=(($871+8)|0);
   var $873=HEAP32[(($872)>>2)];
   var $874=(($873+16)|0);
   var $875=HEAP32[(($874)>>2)];
   var $876=(($875+36)|0);
   var $877=HEAP32[(($876)>>2)];
   var $878=(($870)|(0)) <= (($877)|(0));
   if ($878) { label = 64; break; } else { label = 68; break; }
  case 64: 
   var $880=$1;
   var $881=(($880+8)|0);
   var $882=HEAP32[(($881)>>2)];
   var $883=(($882+40)|0);
   var $884=HEAP32[(($883)>>2)];
   var $885=(($884)|(0))==0;
   if ($885) { label = 65; break; } else { label = 66; break; }
  case 65: 
   var $887=$1;
   var $888=(($887+8)|0);
   var $889=HEAP32[(($888)>>2)];
   var $890=(($889+40)|0);
   HEAP32[(($890)>>2)]=16;
   label = 67; break;
  case 66: 
   var $892=$1;
   var $893=(($892+8)|0);
   var $894=HEAP32[(($893)>>2)];
   var $895=(($894+40)|0);
   var $896=HEAP32[(($895)>>2)];
   var $897=($896<<1);
   HEAP32[(($895)>>2)]=$897;
   label = 67; break;
  case 67: 
   var $899=$1;
   var $900=$1;
   var $901=(($900+8)|0);
   var $902=HEAP32[(($901)>>2)];
   var $903=(($902+36)|0);
   var $904=HEAP32[(($903)>>2)];
   var $905=$904;
   var $906=$1;
   var $907=(($906+8)|0);
   var $908=HEAP32[(($907)>>2)];
   var $909=(($908+40)|0);
   var $910=HEAP32[(($909)>>2)];
   var $911=($910<<2);
   var $912=_mrb_realloc($899, $905, $911);
   var $913=$912;
   var $914=$1;
   var $915=(($914+8)|0);
   var $916=HEAP32[(($915)>>2)];
   var $917=(($916+36)|0);
   HEAP32[(($917)>>2)]=$913;
   label = 68; break;
  case 68: 
   var $919=$p;
   var $920=$1;
   var $921=(($920+8)|0);
   var $922=HEAP32[(($921)>>2)];
   var $923=(($922+16)|0);
   var $924=HEAP32[(($923)>>2)];
   var $925=(($924+36)|0);
   var $926=HEAP32[(($925)>>2)];
   var $927=((($926)+(1))|0);
   HEAP32[(($925)>>2)]=$927;
   var $928=$1;
   var $929=(($928+8)|0);
   var $930=HEAP32[(($929)>>2)];
   var $931=(($930+36)|0);
   var $932=HEAP32[(($931)>>2)];
   var $933=(($932+($926<<2))|0);
   HEAP32[(($933)>>2)]=$919;
   var $934=$1;
   var $935=$ai;
   _mrb_gc_arena_restore($934, $935);
   var $936=$pc;
   var $937=(($936+4)|0);
   $pc=$937;
   var $938=HEAP32[(($937)>>2)];
   $i=$938;
   var $939=$i;
   var $940=$939 & 127;
   var $941=((74668+($940<<2))|0);
   var $942=HEAP32[(($941)>>2)];
   var $5866 = $942;label = 709; break;
  case 69: 
   var $944=$i;
   var $945=$944 >>> 23;
   var $946=$945 & 511;
   $a7=$946;
   $n=0;
   label = 70; break;
  case 70: 
   var $948=$n;
   var $949=$a7;
   var $950=(($948)|(0)) < (($949)|(0));
   if ($950) { label = 71; break; } else { label = 73; break; }
  case 71: 
   var $952=$1;
   var $953=$1;
   var $954=(($953+8)|0);
   var $955=HEAP32[(($954)>>2)];
   var $956=(($955+16)|0);
   var $957=HEAP32[(($956)>>2)];
   var $958=(($957+36)|0);
   var $959=HEAP32[(($958)>>2)];
   var $960=((($959)-(1))|0);
   HEAP32[(($958)>>2)]=$960;
   _ecall($952, $960);
   label = 72; break;
  case 72: 
   var $962=$n;
   var $963=((($962)+(1))|0);
   $n=$963;
   label = 70; break;
  case 73: 
   var $965=$1;
   var $966=$ai;
   _mrb_gc_arena_restore($965, $966);
   var $967=$pc;
   var $968=(($967+4)|0);
   $pc=$968;
   var $969=HEAP32[(($968)>>2)];
   $i=$969;
   var $970=$i;
   var $971=$970 & 127;
   var $972=((74668+($971<<2))|0);
   var $973=HEAP32[(($972)>>2)];
   var $5866 = $973;label = 709; break;
  case 74: 
   var $975=$i;
   var $976=$975 >>> 23;
   var $977=$976 & 511;
   $a8=$977;
   label = 75; break;
  case 75: 
   var $979=$a8;
   var $980=$regs;
   var $981=(($980+((($979)*(12))&-1))|0);
   var $982=(($981+8)|0);
   HEAP32[(($982)>>2)]=0;
   var $983=$a8;
   var $984=$regs;
   var $985=(($984+((($983)*(12))&-1))|0);
   var $986=(($985)|0);
   var $987=$986;
   HEAP32[(($987)>>2)]=0;
   label = 76; break;
  case 76: 
   var $989=$pc;
   var $990=(($989+4)|0);
   $pc=$990;
   var $991=HEAP32[(($990)>>2)];
   $i=$991;
   var $992=$i;
   var $993=$992 & 127;
   var $994=((74668+($993<<2))|0);
   var $995=HEAP32[(($994)>>2)];
   var $5866 = $995;label = 709; break;
  case 77: 
   label = 78; break;
  case 78: 
   label = 79; break;
  case 79: 
   var $999=$i;
   var $1000=$999 >>> 23;
   var $1001=$1000 & 511;
   $a9=$1001;
   var $1002=$i;
   var $1003=$1002 >>> 7;
   var $1004=$1003 & 127;
   $n10=$1004;
   var $1005=$i;
   var $1006=$1005 >>> 14;
   var $1007=$1006 & 511;
   var $1008=$syms;
   var $1009=(($1008+($1007<<1))|0);
   var $1010=HEAP16[(($1009)>>1)];
   $mid=$1010;
   var $1011=$a9;
   var $1012=$regs;
   var $1013=(($1012+((($1011)*(12))&-1))|0);
   var $1014=$recv;
   var $1015=$1013;
   assert(12 % 1 === 0);HEAP32[(($1014)>>2)]=HEAP32[(($1015)>>2)];HEAP32[((($1014)+(4))>>2)]=HEAP32[((($1015)+(4))>>2)];HEAP32[((($1014)+(8))>>2)]=HEAP32[((($1015)+(8))>>2)];
   var $1016=$i;
   var $1017=$1016 & 127;
   var $1018=(($1017)|(0))!=33;
   if ($1018) { label = 80; break; } else { label = 88; break; }
  case 80: 
   var $1020=$n10;
   var $1021=(($1020)|(0))==127;
   if ($1021) { label = 81; break; } else { label = 84; break; }
  case 81: 
   label = 82; break;
  case 82: 
   var $1024=$a9;
   var $1025=((($1024)+(2))|0);
   var $1026=$regs;
   var $1027=(($1026+((($1025)*(12))&-1))|0);
   var $1028=(($1027+8)|0);
   HEAP32[(($1028)>>2)]=0;
   var $1029=$a9;
   var $1030=((($1029)+(2))|0);
   var $1031=$regs;
   var $1032=(($1031+((($1030)*(12))&-1))|0);
   var $1033=(($1032)|0);
   var $1034=$1033;
   HEAP32[(($1034)>>2)]=0;
   label = 83; break;
  case 83: 
   label = 87; break;
  case 84: 
   label = 85; break;
  case 85: 
   var $1038=$a9;
   var $1039=$n10;
   var $1040=((($1038)+($1039))|0);
   var $1041=((($1040)+(1))|0);
   var $1042=$regs;
   var $1043=(($1042+((($1041)*(12))&-1))|0);
   var $1044=(($1043+8)|0);
   HEAP32[(($1044)>>2)]=0;
   var $1045=$a9;
   var $1046=$n10;
   var $1047=((($1045)+($1046))|0);
   var $1048=((($1047)+(1))|0);
   var $1049=$regs;
   var $1050=(($1049+((($1048)*(12))&-1))|0);
   var $1051=(($1050)|0);
   var $1052=$1051;
   HEAP32[(($1052)>>2)]=0;
   label = 86; break;
  case 86: 
   label = 87; break;
  case 87: 
   label = 88; break;
  case 88: 
   var $1056=$1;
   var $1057=_mrb_class($1056, $recv);
   HEAP32[(($c)>>2)]=$1057;
   var $1058=$1;
   var $1059=$mid;
   var $1060=_mrb_method_search_vm($1058, $c, $1059);
   $m=$1060;
   var $1061=$m;
   var $1062=(($1061)|(0))!=0;
   if ($1062) { label = 93; break; } else { label = 89; break; }
  case 89: 
   var $1064=$mid;
   _mrb_symbol_value141($sym, $1064);
   var $1065=$1;
   var $1066=_mrb_intern2($1065, ((96784)|0), 14);
   $mid=$1066;
   var $1067=$1;
   var $1068=$mid;
   var $1069=_mrb_method_search_vm($1067, $c, $1068);
   $m=$1069;
   var $1070=$n10;
   var $1071=(($1070)|(0))==127;
   if ($1071) { label = 90; break; } else { label = 91; break; }
  case 90: 
   var $1073=$1;
   var $1074=$a9;
   var $1075=((($1074)+(1))|0);
   var $1076=$regs;
   var $1077=(($1076+((($1075)*(12))&-1))|0);
   _mrb_ary_unshift($10, $1073, $1077, $sym);
   label = 92; break;
  case 91: 
   var $1079=$regs;
   var $1080=$a9;
   var $1081=(($1079+((($1080)*(12))&-1))|0);
   var $1082=(($1081+24)|0);
   var $1083=$regs;
   var $1084=$a9;
   var $1085=(($1083+((($1084)*(12))&-1))|0);
   var $1086=(($1085+12)|0);
   var $1087=$n10;
   var $1088=((($1087)+(1))|0);
   $n10=$1088;
   _value_move($1082, $1086, $1088);
   var $1089=$a9;
   var $1090=((($1089)+(1))|0);
   var $1091=$regs;
   var $1092=(($1091+((($1090)*(12))&-1))|0);
   var $1093=$1092;
   var $1094=$sym;
   assert(12 % 1 === 0);HEAP32[(($1093)>>2)]=HEAP32[(($1094)>>2)];HEAP32[((($1093)+(4))>>2)]=HEAP32[((($1094)+(4))>>2)];HEAP32[((($1093)+(8))>>2)]=HEAP32[((($1094)+(8))>>2)];
   label = 92; break;
  case 92: 
   label = 93; break;
  case 93: 
   var $1097=$1;
   var $1098=_cipush($1097);
   $ci=$1098;
   var $1099=$mid;
   var $1100=$ci;
   var $1101=(($1100)|0);
   HEAP16[(($1101)>>1)]=$1099;
   var $1102=$m;
   var $1103=$ci;
   var $1104=(($1103+4)|0);
   HEAP32[(($1104)>>2)]=$1102;
   var $1105=$1;
   var $1106=(($1105+8)|0);
   var $1107=HEAP32[(($1106)>>2)];
   var $1108=(($1107+4)|0);
   var $1109=HEAP32[(($1108)>>2)];
   var $1110=$1;
   var $1111=(($1110+8)|0);
   var $1112=HEAP32[(($1111)>>2)];
   var $1113=(($1112+8)|0);
   var $1114=HEAP32[(($1113)>>2)];
   var $1115=$1109;
   var $1116=$1114;
   var $1117=((($1115)-($1116))|0);
   var $1118=((((($1117)|(0)))/(12))&-1);
   var $1119=$ci;
   var $1120=(($1119+8)|0);
   HEAP32[(($1120)>>2)]=$1118;
   var $1121=$n10;
   var $1122=(($1121)|(0))==127;
   if ($1122) { label = 94; break; } else { label = 95; break; }
  case 94: 
   var $1124=$ci;
   var $1125=(($1124+16)|0);
   HEAP32[(($1125)>>2)]=-1;
   label = 96; break;
  case 95: 
   var $1127=$n10;
   var $1128=$ci;
   var $1129=(($1128+16)|0);
   HEAP32[(($1129)>>2)]=$1127;
   label = 96; break;
  case 96: 
   var $1131=HEAP32[(($c)>>2)];
   var $1132=$1131;
   var $1133=HEAP32[(($1132)>>2)];
   var $1134=$1133 & 255;
   var $1135=(($1134)|(0))==11;
   if ($1135) { label = 97; break; } else { label = 98; break; }
  case 97: 
   var $1137=HEAP32[(($c)>>2)];
   var $1138=(($1137+4)|0);
   var $1139=HEAP32[(($1138)>>2)];
   var $1140=$ci;
   var $1141=(($1140+28)|0);
   HEAP32[(($1141)>>2)]=$1139;
   label = 99; break;
  case 98: 
   var $1143=HEAP32[(($c)>>2)];
   var $1144=$ci;
   var $1145=(($1144+28)|0);
   HEAP32[(($1145)>>2)]=$1143;
   label = 99; break;
  case 99: 
   var $1147=$pc;
   var $1148=(($1147+4)|0);
   var $1149=$ci;
   var $1150=(($1149+20)|0);
   HEAP32[(($1150)>>2)]=$1148;
   var $1151=$a9;
   var $1152=$ci;
   var $1153=(($1152+24)|0);
   HEAP32[(($1153)>>2)]=$1151;
   var $1154=$a9;
   var $1155=$1;
   var $1156=(($1155+8)|0);
   var $1157=HEAP32[(($1156)>>2)];
   var $1158=(($1157+4)|0);
   var $1159=HEAP32[(($1158)>>2)];
   var $1160=(($1159+((($1154)*(12))&-1))|0);
   HEAP32[(($1158)>>2)]=$1160;
   var $1161=$m;
   var $1162=$1161;
   var $1163=HEAP32[(($1162)>>2)];
   var $1164=$1163 >>> 11;
   var $1165=$1164 & 2097151;
   var $1166=$1165 & 128;
   var $1167=(($1166)|(0))!=0;
   if ($1167) { label = 100; break; } else { label = 110; break; }
  case 100: 
   var $1169=$n10;
   var $1170=(($1169)|(0))==127;
   if ($1170) { label = 101; break; } else { label = 102; break; }
  case 101: 
   var $1172=$ci;
   var $1173=(($1172+12)|0);
   HEAP32[(($1173)>>2)]=3;
   label = 103; break;
  case 102: 
   var $1175=$n10;
   var $1176=((($1175)+(2))|0);
   var $1177=$ci;
   var $1178=(($1177+12)|0);
   HEAP32[(($1178)>>2)]=$1176;
   label = 103; break;
  case 103: 
   var $1180=$m;
   var $1181=(($1180+12)|0);
   var $1182=$1181;
   var $1183=HEAP32[(($1182)>>2)];
   var $1184=$1;
   FUNCTION_TABLE[$1183]($11, $1184, $recv);
   var $1185=$result;
   var $1186=$11;
   assert(12 % 1 === 0);HEAP32[(($1185)>>2)]=HEAP32[(($1186)>>2)];HEAP32[((($1185)+(4))>>2)]=HEAP32[((($1186)+(4))>>2)];HEAP32[((($1185)+(8))>>2)]=HEAP32[((($1186)+(8))>>2)];
   var $1187=$1;
   var $1188=(($1187+8)|0);
   var $1189=HEAP32[(($1188)>>2)];
   var $1190=(($1189+4)|0);
   var $1191=HEAP32[(($1190)>>2)];
   var $1192=(($1191)|0);
   var $1193=$1192;
   var $1194=$result;
   assert(12 % 1 === 0);HEAP32[(($1193)>>2)]=HEAP32[(($1194)>>2)];HEAP32[((($1193)+(4))>>2)]=HEAP32[((($1194)+(4))>>2)];HEAP32[((($1193)+(8))>>2)]=HEAP32[((($1194)+(8))>>2)];
   var $1195=$1;
   var $1196=$ai;
   _mrb_gc_arena_restore($1195, $1196);
   var $1197=$1;
   var $1198=(($1197+16)|0);
   var $1199=HEAP32[(($1198)>>2)];
   var $1200=(($1199)|(0))!=0;
   if ($1200) { label = 104; break; } else { label = 105; break; }
  case 104: 
   label = 222; break;
  case 105: 
   var $1203=$1;
   var $1204=(($1203+8)|0);
   var $1205=HEAP32[(($1204)>>2)];
   var $1206=(($1205+16)|0);
   var $1207=HEAP32[(($1206)>>2)];
   $ci=$1207;
   var $1208=$ci;
   var $1209=(($1208+28)|0);
   var $1210=HEAP32[(($1209)>>2)];
   var $1211=(($1210)|(0))!=0;
   if ($1211) { label = 109; break; } else { label = 106; break; }
  case 106: 
   var $1213=$ci;
   var $1214=((($1213)-(44))|0);
   var $1215=(($1214+4)|0);
   var $1216=HEAP32[(($1215)>>2)];
   var $1217=$1216;
   var $1218=HEAP32[(($1217)>>2)];
   var $1219=$1218 >>> 11;
   var $1220=$1219 & 2097151;
   var $1221=$1220 & 128;
   var $1222=(($1221)|(0))!=0;
   if ($1222) { label = 108; break; } else { label = 107; break; }
  case 107: 
   var $1224=$ci;
   var $1225=((($1224)-(44))|0);
   var $1226=(($1225+4)|0);
   var $1227=HEAP32[(($1226)>>2)];
   var $1228=(($1227+12)|0);
   var $1229=$1228;
   var $1230=HEAP32[(($1229)>>2)];
   $irep=$1230;
   var $1231=$irep;
   var $1232=(($1231+16)|0);
   var $1233=HEAP32[(($1232)>>2)];
   $pool=$1233;
   var $1234=$irep;
   var $1235=(($1234+20)|0);
   var $1236=HEAP32[(($1235)>>2)];
   $syms=$1236;
   label = 108; break;
  case 108: 
   label = 109; break;
  case 109: 
   var $1239=$1;
   var $1240=(($1239+8)|0);
   var $1241=HEAP32[(($1240)>>2)];
   var $1242=(($1241+8)|0);
   var $1243=HEAP32[(($1242)>>2)];
   var $1244=$ci;
   var $1245=(($1244+8)|0);
   var $1246=HEAP32[(($1245)>>2)];
   var $1247=(($1243+((($1246)*(12))&-1))|0);
   var $1248=$1;
   var $1249=(($1248+8)|0);
   var $1250=HEAP32[(($1249)>>2)];
   var $1251=(($1250+4)|0);
   HEAP32[(($1251)>>2)]=$1247;
   $regs=$1247;
   var $1252=$ci;
   var $1253=(($1252+20)|0);
   var $1254=HEAP32[(($1253)>>2)];
   $pc=$1254;
   var $1255=$1;
   _cipop($1255);
   var $1256=$pc;
   var $1257=HEAP32[(($1256)>>2)];
   $i=$1257;
   var $1258=$i;
   var $1259=$1258 & 127;
   var $1260=((74668+($1259<<2))|0);
   var $1261=HEAP32[(($1260)>>2)];
   var $5866 = $1261;label = 709; break;
  case 110: 
   var $1263=$m;
   var $1264=$1;
   var $1265=(($1264+8)|0);
   var $1266=HEAP32[(($1265)>>2)];
   var $1267=(($1266+16)|0);
   var $1268=HEAP32[(($1267)>>2)];
   var $1269=(($1268+4)|0);
   HEAP32[(($1269)>>2)]=$1263;
   $2=$1263;
   var $1270=$m;
   var $1271=(($1270+12)|0);
   var $1272=$1271;
   var $1273=HEAP32[(($1272)>>2)];
   $irep=$1273;
   var $1274=$irep;
   var $1275=(($1274+16)|0);
   var $1276=HEAP32[(($1275)>>2)];
   $pool=$1276;
   var $1277=$irep;
   var $1278=(($1277+20)|0);
   var $1279=HEAP32[(($1278)>>2)];
   $syms=$1279;
   var $1280=$irep;
   var $1281=(($1280+6)|0);
   var $1282=HEAP16[(($1281)>>1)];
   var $1283=(($1282)&(65535));
   var $1284=$ci;
   var $1285=(($1284+12)|0);
   HEAP32[(($1285)>>2)]=$1283;
   var $1286=$ci;
   var $1287=(($1286+16)|0);
   var $1288=HEAP32[(($1287)>>2)];
   var $1289=(($1288)|(0)) < 0;
   if ($1289) { label = 111; break; } else { label = 115; break; }
  case 111: 
   var $1291=$1;
   var $1292=$irep;
   var $1293=(($1292+6)|0);
   var $1294=HEAP16[(($1293)>>1)];
   var $1295=(($1294)&(65535));
   var $1296=(($1295)|(0)) < 3;
   if ($1296) { label = 112; break; } else { label = 113; break; }
  case 112: 
   var $1304 = 3;label = 114; break;
  case 113: 
   var $1299=$irep;
   var $1300=(($1299+6)|0);
   var $1301=HEAP16[(($1300)>>1)];
   var $1302=(($1301)&(65535));
   var $1304 = $1302;label = 114; break;
  case 114: 
   var $1304;
   _stack_extend($1291, $1304, 3);
   label = 116; break;
  case 115: 
   var $1306=$1;
   var $1307=$irep;
   var $1308=(($1307+6)|0);
   var $1309=HEAP16[(($1308)>>1)];
   var $1310=(($1309)&(65535));
   var $1311=$ci;
   var $1312=(($1311+16)|0);
   var $1313=HEAP32[(($1312)>>2)];
   var $1314=((($1313)+(2))|0);
   _stack_extend($1306, $1310, $1314);
   label = 116; break;
  case 116: 
   var $1316=$1;
   var $1317=(($1316+8)|0);
   var $1318=HEAP32[(($1317)>>2)];
   var $1319=(($1318+4)|0);
   var $1320=HEAP32[(($1319)>>2)];
   $regs=$1320;
   var $1321=$irep;
   var $1322=(($1321+12)|0);
   var $1323=HEAP32[(($1322)>>2)];
   $pc=$1323;
   var $1324=$pc;
   var $1325=HEAP32[(($1324)>>2)];
   $i=$1325;
   var $1326=$i;
   var $1327=$1326 & 127;
   var $1328=((74668+($1327<<2))|0);
   var $1329=HEAP32[(($1328)>>2)];
   var $5866 = $1329;label = 709; break;
  case 117: 
   var $1331=$pc;
   var $1332=(($1331+4)|0);
   $pc=$1332;
   var $1333=HEAP32[(($1332)>>2)];
   $i=$1333;
   var $1334=$i;
   var $1335=$1334 & 127;
   var $1336=((74668+($1335<<2))|0);
   var $1337=HEAP32[(($1336)>>2)];
   var $5866 = $1337;label = 709; break;
  case 118: 
   var $1339=$1;
   var $1340=(($1339+8)|0);
   var $1341=HEAP32[(($1340)>>2)];
   var $1342=(($1341+4)|0);
   var $1343=HEAP32[(($1342)>>2)];
   var $1344=(($1343)|0);
   var $1345=$recv12;
   var $1346=$1344;
   assert(12 % 1 === 0);HEAP32[(($1345)>>2)]=HEAP32[(($1346)>>2)];HEAP32[((($1345)+(4))>>2)]=HEAP32[((($1346)+(4))>>2)];HEAP32[((($1345)+(8))>>2)]=HEAP32[((($1346)+(8))>>2)];
   var $1347=(($recv12)|0);
   var $1348=$1347;
   var $1349=HEAP32[(($1348)>>2)];
   var $1350=$1349;
   $m13=$1350;
   var $1351=$1;
   var $1352=(($1351+8)|0);
   var $1353=HEAP32[(($1352)>>2)];
   var $1354=(($1353+16)|0);
   var $1355=HEAP32[(($1354)>>2)];
   $ci11=$1355;
   var $1356=$m13;
   var $1357=(($1356+16)|0);
   var $1358=HEAP32[(($1357)>>2)];
   var $1359=$ci11;
   var $1360=(($1359+28)|0);
   HEAP32[(($1360)>>2)]=$1358;
   var $1361=$m13;
   var $1362=$ci11;
   var $1363=(($1362+4)|0);
   HEAP32[(($1363)>>2)]=$1361;
   var $1364=$m13;
   var $1365=(($1364+20)|0);
   var $1366=HEAP32[(($1365)>>2)];
   var $1367=(($1366)|(0))!=0;
   if ($1367) { label = 119; break; } else { label = 124; break; }
  case 119: 
   var $1369=$m13;
   var $1370=(($1369+20)|0);
   var $1371=HEAP32[(($1370)>>2)];
   var $1372=(($1371+16)|0);
   var $1373=HEAP16[(($1372)>>1)];
   var $1374=(($1373 << 16) >> 16)!=0;
   if ($1374) { label = 120; break; } else { label = 121; break; }
  case 120: 
   var $1376=$m13;
   var $1377=(($1376+20)|0);
   var $1378=HEAP32[(($1377)>>2)];
   var $1379=(($1378+16)|0);
   var $1380=HEAP16[(($1379)>>1)];
   var $1381=$ci11;
   var $1382=(($1381)|0);
   HEAP16[(($1382)>>1)]=$1380;
   label = 121; break;
  case 121: 
   var $1384=$m13;
   var $1385=(($1384+20)|0);
   var $1386=HEAP32[(($1385)>>2)];
   var $1387=(($1386+12)|0);
   var $1388=HEAP32[(($1387)>>2)];
   var $1389=(($1388)|(0))!=0;
   if ($1389) { label = 123; break; } else { label = 122; break; }
  case 122: 
   var $1391=$1;
   var $1392=(($1391+8)|0);
   var $1393=HEAP32[(($1392)>>2)];
   var $1394=(($1393+4)|0);
   var $1395=HEAP32[(($1394)>>2)];
   var $1396=$m13;
   var $1397=(($1396+20)|0);
   var $1398=HEAP32[(($1397)>>2)];
   var $1399=(($1398+12)|0);
   HEAP32[(($1399)>>2)]=$1395;
   label = 123; break;
  case 123: 
   label = 124; break;
  case 124: 
   var $1402=$m13;
   var $1403=$1402;
   var $1404=HEAP32[(($1403)>>2)];
   var $1405=$1404 >>> 11;
   var $1406=$1405 & 2097151;
   var $1407=$1406 & 128;
   var $1408=(($1407)|(0))!=0;
   if ($1408) { label = 125; break; } else { label = 128; break; }
  case 125: 
   var $1410=$m13;
   var $1411=(($1410+12)|0);
   var $1412=$1411;
   var $1413=HEAP32[(($1412)>>2)];
   var $1414=$1;
   FUNCTION_TABLE[$1413]($12, $1414, $recv12);
   var $1415=$recv12;
   var $1416=$12;
   assert(12 % 1 === 0);HEAP32[(($1415)>>2)]=HEAP32[(($1416)>>2)];HEAP32[((($1415)+(4))>>2)]=HEAP32[((($1416)+(4))>>2)];HEAP32[((($1415)+(8))>>2)]=HEAP32[((($1416)+(8))>>2)];
   var $1417=$1;
   var $1418=$ai;
   _mrb_gc_arena_restore($1417, $1418);
   var $1419=$1;
   var $1420=(($1419+16)|0);
   var $1421=HEAP32[(($1420)>>2)];
   var $1422=(($1421)|(0))!=0;
   if ($1422) { label = 126; break; } else { label = 127; break; }
  case 126: 
   label = 222; break;
  case 127: 
   var $1425=$1;
   var $1426=(($1425+8)|0);
   var $1427=HEAP32[(($1426)>>2)];
   var $1428=(($1427+16)|0);
   var $1429=HEAP32[(($1428)>>2)];
   $ci11=$1429;
   var $1430=$1;
   var $1431=(($1430+8)|0);
   var $1432=HEAP32[(($1431)>>2)];
   var $1433=(($1432+8)|0);
   var $1434=HEAP32[(($1433)>>2)];
   var $1435=$ci11;
   var $1436=(($1435+8)|0);
   var $1437=HEAP32[(($1436)>>2)];
   var $1438=(($1434+((($1437)*(12))&-1))|0);
   var $1439=$1;
   var $1440=(($1439+8)|0);
   var $1441=HEAP32[(($1440)>>2)];
   var $1442=(($1441+4)|0);
   HEAP32[(($1442)>>2)]=$1438;
   $regs=$1438;
   var $1443=$ci11;
   var $1444=(($1443+24)|0);
   var $1445=HEAP32[(($1444)>>2)];
   var $1446=$regs;
   var $1447=(($1446+((($1445)*(12))&-1))|0);
   var $1448=$1447;
   var $1449=$recv12;
   assert(12 % 1 === 0);HEAP32[(($1448)>>2)]=HEAP32[(($1449)>>2)];HEAP32[((($1448)+(4))>>2)]=HEAP32[((($1449)+(4))>>2)];HEAP32[((($1448)+(8))>>2)]=HEAP32[((($1449)+(8))>>2)];
   var $1450=$ci11;
   var $1451=(($1450+20)|0);
   var $1452=HEAP32[(($1451)>>2)];
   $pc=$1452;
   var $1453=$1;
   _cipop($1453);
   var $1454=$1;
   var $1455=(($1454+8)|0);
   var $1456=HEAP32[(($1455)>>2)];
   var $1457=(($1456+16)|0);
   var $1458=HEAP32[(($1457)>>2)];
   var $1459=(($1458+4)|0);
   var $1460=HEAP32[(($1459)>>2)];
   var $1461=(($1460+12)|0);
   var $1462=$1461;
   var $1463=HEAP32[(($1462)>>2)];
   $irep=$1463;
   var $1464=$irep;
   var $1465=(($1464+16)|0);
   var $1466=HEAP32[(($1465)>>2)];
   $pool=$1466;
   var $1467=$irep;
   var $1468=(($1467+20)|0);
   var $1469=HEAP32[(($1468)>>2)];
   $syms=$1469;
   var $1470=$pc;
   var $1471=HEAP32[(($1470)>>2)];
   $i=$1471;
   var $1472=$i;
   var $1473=$1472 & 127;
   var $1474=((74668+($1473<<2))|0);
   var $1475=HEAP32[(($1474)>>2)];
   var $5866 = $1475;label = 709; break;
  case 128: 
   var $1477=$m13;
   $2=$1477;
   var $1478=$m13;
   var $1479=(($1478+12)|0);
   var $1480=$1479;
   var $1481=HEAP32[(($1480)>>2)];
   $irep=$1481;
   var $1482=$irep;
   var $1483=(($1482)|(0))!=0;
   if ($1483) { label = 130; break; } else { label = 129; break; }
  case 129: 
   var $1485=$1;
   var $1486=(($1485+8)|0);
   var $1487=HEAP32[(($1486)>>2)];
   var $1488=(($1487+4)|0);
   var $1489=HEAP32[(($1488)>>2)];
   var $1490=(($1489)|0);
   _mrb_nil_value144($13);
   var $1491=$1490;
   var $1492=$13;
   assert(12 % 1 === 0);HEAP32[(($1491)>>2)]=HEAP32[(($1492)>>2)];HEAP32[((($1491)+(4))>>2)]=HEAP32[((($1492)+(4))>>2)];HEAP32[((($1491)+(8))>>2)]=HEAP32[((($1492)+(8))>>2)];
   label = 219; break;
  case 130: 
   var $1494=$irep;
   var $1495=(($1494+16)|0);
   var $1496=HEAP32[(($1495)>>2)];
   $pool=$1496;
   var $1497=$irep;
   var $1498=(($1497+20)|0);
   var $1499=HEAP32[(($1498)>>2)];
   $syms=$1499;
   var $1500=$irep;
   var $1501=(($1500+6)|0);
   var $1502=HEAP16[(($1501)>>1)];
   var $1503=(($1502)&(65535));
   var $1504=$ci11;
   var $1505=(($1504+12)|0);
   HEAP32[(($1505)>>2)]=$1503;
   var $1506=$ci11;
   var $1507=(($1506+16)|0);
   var $1508=HEAP32[(($1507)>>2)];
   var $1509=(($1508)|(0)) < 0;
   if ($1509) { label = 131; break; } else { label = 135; break; }
  case 131: 
   var $1511=$1;
   var $1512=$irep;
   var $1513=(($1512+6)|0);
   var $1514=HEAP16[(($1513)>>1)];
   var $1515=(($1514)&(65535));
   var $1516=(($1515)|(0)) < 3;
   if ($1516) { label = 132; break; } else { label = 133; break; }
  case 132: 
   var $1524 = 3;label = 134; break;
  case 133: 
   var $1519=$irep;
   var $1520=(($1519+6)|0);
   var $1521=HEAP16[(($1520)>>1)];
   var $1522=(($1521)&(65535));
   var $1524 = $1522;label = 134; break;
  case 134: 
   var $1524;
   _stack_extend($1511, $1524, 3);
   label = 136; break;
  case 135: 
   var $1526=$1;
   var $1527=$irep;
   var $1528=(($1527+6)|0);
   var $1529=HEAP16[(($1528)>>1)];
   var $1530=(($1529)&(65535));
   var $1531=$ci11;
   var $1532=(($1531+16)|0);
   var $1533=HEAP32[(($1532)>>2)];
   var $1534=((($1533)+(2))|0);
   _stack_extend($1526, $1530, $1534);
   label = 136; break;
  case 136: 
   var $1536=$1;
   var $1537=(($1536+8)|0);
   var $1538=HEAP32[(($1537)>>2)];
   var $1539=(($1538+4)|0);
   var $1540=HEAP32[(($1539)>>2)];
   $regs=$1540;
   var $1541=$regs;
   var $1542=(($1541)|0);
   var $1543=$m13;
   var $1544=(($1543+20)|0);
   var $1545=HEAP32[(($1544)>>2)];
   var $1546=(($1545+12)|0);
   var $1547=HEAP32[(($1546)>>2)];
   var $1548=(($1547)|0);
   var $1549=$1542;
   var $1550=$1548;
   assert(12 % 1 === 0);HEAP32[(($1549)>>2)]=HEAP32[(($1550)>>2)];HEAP32[((($1549)+(4))>>2)]=HEAP32[((($1550)+(4))>>2)];HEAP32[((($1549)+(8))>>2)]=HEAP32[((($1550)+(8))>>2)];
   var $1551=$m13;
   var $1552=(($1551+12)|0);
   var $1553=$1552;
   var $1554=HEAP32[(($1553)>>2)];
   var $1555=(($1554+12)|0);
   var $1556=HEAP32[(($1555)>>2)];
   $pc=$1556;
   var $1557=$pc;
   var $1558=HEAP32[(($1557)>>2)];
   $i=$1558;
   var $1559=$i;
   var $1560=$1559 & 127;
   var $1561=((74668+($1560<<2))|0);
   var $1562=HEAP32[(($1561)>>2)];
   var $5866 = $1562;label = 709; break;
  case 137: 
   var $1564=$1;
   var $1565=(($1564+8)|0);
   var $1566=HEAP32[(($1565)>>2)];
   var $1567=(($1566+16)|0);
   var $1568=HEAP32[(($1567)>>2)];
   $ci15=$1568;
   var $1569=$ci15;
   var $1570=(($1569)|0);
   var $1571=HEAP16[(($1570)>>1)];
   $mid18=$1571;
   var $1572=$i;
   var $1573=$1572 >>> 23;
   var $1574=$1573 & 511;
   $a19=$1574;
   var $1575=$i;
   var $1576=$1575 >>> 7;
   var $1577=$1576 & 127;
   $n20=$1577;
   var $1578=$regs;
   var $1579=(($1578)|0);
   var $1580=$recv14;
   var $1581=$1579;
   assert(12 % 1 === 0);HEAP32[(($1580)>>2)]=HEAP32[(($1581)>>2)];HEAP32[((($1580)+(4))>>2)]=HEAP32[((($1581)+(4))>>2)];HEAP32[((($1580)+(8))>>2)]=HEAP32[((($1581)+(8))>>2)];
   var $1582=$1;
   var $1583=(($1582+8)|0);
   var $1584=HEAP32[(($1583)>>2)];
   var $1585=(($1584+16)|0);
   var $1586=HEAP32[(($1585)>>2)];
   var $1587=(($1586+28)|0);
   var $1588=HEAP32[(($1587)>>2)];
   var $1589=(($1588+20)|0);
   var $1590=HEAP32[(($1589)>>2)];
   HEAP32[(($c17)>>2)]=$1590;
   var $1591=$1;
   var $1592=$mid18;
   var $1593=_mrb_method_search_vm($1591, $c17, $1592);
   $m16=$1593;
   var $1594=$m16;
   var $1595=(($1594)|(0))!=0;
   if ($1595) { label = 144; break; } else { label = 138; break; }
  case 138: 
   var $1597=$1;
   var $1598=_mrb_intern2($1597, ((96784)|0), 14);
   $mid18=$1598;
   var $1599=$1;
   var $1600=$mid18;
   var $1601=_mrb_method_search_vm($1599, $c17, $1600);
   $m16=$1601;
   var $1602=$n20;
   var $1603=(($1602)|(0))==127;
   if ($1603) { label = 139; break; } else { label = 140; break; }
  case 139: 
   var $1605=$1;
   var $1606=$a19;
   var $1607=((($1606)+(1))|0);
   var $1608=$regs;
   var $1609=(($1608+((($1607)*(12))&-1))|0);
   var $1610=$ci15;
   var $1611=(($1610)|0);
   var $1612=HEAP16[(($1611)>>1)];
   _mrb_symbol_value141($14, $1612);
   _mrb_ary_unshift($15, $1605, $1609, $14);
   label = 143; break;
  case 140: 
   var $1614=$regs;
   var $1615=$a19;
   var $1616=(($1614+((($1615)*(12))&-1))|0);
   var $1617=(($1616+24)|0);
   var $1618=$regs;
   var $1619=$a19;
   var $1620=(($1618+((($1619)*(12))&-1))|0);
   var $1621=(($1620+12)|0);
   var $1622=$n20;
   var $1623=((($1622)+(1))|0);
   $n20=$1623;
   _value_move($1617, $1621, $1623);
   label = 141; break;
  case 141: 
   var $1625=$a19;
   var $1626=((($1625)+(1))|0);
   var $1627=$regs;
   var $1628=(($1627+((($1626)*(12))&-1))|0);
   var $1629=(($1628+8)|0);
   HEAP32[(($1629)>>2)]=4;
   var $1630=$ci15;
   var $1631=(($1630)|0);
   var $1632=HEAP16[(($1631)>>1)];
   var $1633=$a19;
   var $1634=((($1633)+(1))|0);
   var $1635=$regs;
   var $1636=(($1635+((($1634)*(12))&-1))|0);
   var $1637=(($1636)|0);
   var $1638=$1637;
   HEAP16[(($1638)>>1)]=$1632;
   label = 142; break;
  case 142: 
   label = 143; break;
  case 143: 
   label = 144; break;
  case 144: 
   var $1642=$1;
   var $1643=_cipush($1642);
   $ci15=$1643;
   var $1644=$mid18;
   var $1645=$ci15;
   var $1646=(($1645)|0);
   HEAP16[(($1646)>>1)]=$1644;
   var $1647=$m16;
   var $1648=$ci15;
   var $1649=(($1648+4)|0);
   HEAP32[(($1649)>>2)]=$1647;
   var $1650=$1;
   var $1651=(($1650+8)|0);
   var $1652=HEAP32[(($1651)>>2)];
   var $1653=(($1652+4)|0);
   var $1654=HEAP32[(($1653)>>2)];
   var $1655=$1;
   var $1656=(($1655+8)|0);
   var $1657=HEAP32[(($1656)>>2)];
   var $1658=(($1657+8)|0);
   var $1659=HEAP32[(($1658)>>2)];
   var $1660=$1654;
   var $1661=$1659;
   var $1662=((($1660)-($1661))|0);
   var $1663=((((($1662)|(0)))/(12))&-1);
   var $1664=$ci15;
   var $1665=(($1664+8)|0);
   HEAP32[(($1665)>>2)]=$1663;
   var $1666=$n20;
   var $1667=(($1666)|(0))==127;
   if ($1667) { label = 145; break; } else { label = 146; break; }
  case 145: 
   var $1669=$ci15;
   var $1670=(($1669+16)|0);
   HEAP32[(($1670)>>2)]=-1;
   label = 147; break;
  case 146: 
   var $1672=$n20;
   var $1673=$ci15;
   var $1674=(($1673+16)|0);
   HEAP32[(($1674)>>2)]=$1672;
   label = 147; break;
  case 147: 
   var $1676=$m16;
   var $1677=(($1676+16)|0);
   var $1678=HEAP32[(($1677)>>2)];
   var $1679=$ci15;
   var $1680=(($1679+28)|0);
   HEAP32[(($1680)>>2)]=$1678;
   var $1681=$pc;
   var $1682=(($1681+4)|0);
   var $1683=$ci15;
   var $1684=(($1683+20)|0);
   HEAP32[(($1684)>>2)]=$1682;
   var $1685=$a19;
   var $1686=$1;
   var $1687=(($1686+8)|0);
   var $1688=HEAP32[(($1687)>>2)];
   var $1689=(($1688+4)|0);
   var $1690=HEAP32[(($1689)>>2)];
   var $1691=(($1690+((($1685)*(12))&-1))|0);
   HEAP32[(($1689)>>2)]=$1691;
   var $1692=$1;
   var $1693=(($1692+8)|0);
   var $1694=HEAP32[(($1693)>>2)];
   var $1695=(($1694+4)|0);
   var $1696=HEAP32[(($1695)>>2)];
   var $1697=(($1696)|0);
   var $1698=$1697;
   var $1699=$recv14;
   assert(12 % 1 === 0);HEAP32[(($1698)>>2)]=HEAP32[(($1699)>>2)];HEAP32[((($1698)+(4))>>2)]=HEAP32[((($1699)+(4))>>2)];HEAP32[((($1698)+(8))>>2)]=HEAP32[((($1699)+(8))>>2)];
   var $1700=$m16;
   var $1701=$1700;
   var $1702=HEAP32[(($1701)>>2)];
   var $1703=$1702 >>> 11;
   var $1704=$1703 & 2097151;
   var $1705=$1704 & 128;
   var $1706=(($1705)|(0))!=0;
   if ($1706) { label = 148; break; } else { label = 151; break; }
  case 148: 
   var $1708=$1;
   var $1709=(($1708+8)|0);
   var $1710=HEAP32[(($1709)>>2)];
   var $1711=(($1710+4)|0);
   var $1712=HEAP32[(($1711)>>2)];
   var $1713=(($1712)|0);
   var $1714=$m16;
   var $1715=(($1714+12)|0);
   var $1716=$1715;
   var $1717=HEAP32[(($1716)>>2)];
   var $1718=$1;
   FUNCTION_TABLE[$1717]($16, $1718, $recv14);
   var $1719=$1713;
   var $1720=$16;
   assert(12 % 1 === 0);HEAP32[(($1719)>>2)]=HEAP32[(($1720)>>2)];HEAP32[((($1719)+(4))>>2)]=HEAP32[((($1720)+(4))>>2)];HEAP32[((($1719)+(8))>>2)]=HEAP32[((($1720)+(8))>>2)];
   var $1721=$1;
   var $1722=$ai;
   _mrb_gc_arena_restore($1721, $1722);
   var $1723=$1;
   var $1724=(($1723+16)|0);
   var $1725=HEAP32[(($1724)>>2)];
   var $1726=(($1725)|(0))!=0;
   if ($1726) { label = 149; break; } else { label = 150; break; }
  case 149: 
   label = 222; break;
  case 150: 
   var $1729=$1;
   var $1730=(($1729+8)|0);
   var $1731=HEAP32[(($1730)>>2)];
   var $1732=(($1731+8)|0);
   var $1733=HEAP32[(($1732)>>2)];
   var $1734=$1;
   var $1735=(($1734+8)|0);
   var $1736=HEAP32[(($1735)>>2)];
   var $1737=(($1736+16)|0);
   var $1738=HEAP32[(($1737)>>2)];
   var $1739=(($1738+8)|0);
   var $1740=HEAP32[(($1739)>>2)];
   var $1741=(($1733+((($1740)*(12))&-1))|0);
   var $1742=$1;
   var $1743=(($1742+8)|0);
   var $1744=HEAP32[(($1743)>>2)];
   var $1745=(($1744+4)|0);
   HEAP32[(($1745)>>2)]=$1741;
   $regs=$1741;
   var $1746=$1;
   _cipop($1746);
   var $1747=$pc;
   var $1748=(($1747+4)|0);
   $pc=$1748;
   var $1749=HEAP32[(($1748)>>2)];
   $i=$1749;
   var $1750=$i;
   var $1751=$1750 & 127;
   var $1752=((74668+($1751<<2))|0);
   var $1753=HEAP32[(($1752)>>2)];
   var $5866 = $1753;label = 709; break;
  case 151: 
   var $1755=$a19;
   var $1756=$ci15;
   var $1757=(($1756+24)|0);
   HEAP32[(($1757)>>2)]=$1755;
   var $1758=$m16;
   var $1759=$ci15;
   var $1760=(($1759+4)|0);
   HEAP32[(($1760)>>2)]=$1758;
   var $1761=$m16;
   var $1762=(($1761+12)|0);
   var $1763=$1762;
   var $1764=HEAP32[(($1763)>>2)];
   $irep=$1764;
   var $1765=$irep;
   var $1766=(($1765+16)|0);
   var $1767=HEAP32[(($1766)>>2)];
   $pool=$1767;
   var $1768=$irep;
   var $1769=(($1768+20)|0);
   var $1770=HEAP32[(($1769)>>2)];
   $syms=$1770;
   var $1771=$irep;
   var $1772=(($1771+6)|0);
   var $1773=HEAP16[(($1772)>>1)];
   var $1774=(($1773)&(65535));
   var $1775=$ci15;
   var $1776=(($1775+12)|0);
   HEAP32[(($1776)>>2)]=$1774;
   var $1777=$n20;
   var $1778=(($1777)|(0))==127;
   if ($1778) { label = 152; break; } else { label = 156; break; }
  case 152: 
   var $1780=$1;
   var $1781=$irep;
   var $1782=(($1781+6)|0);
   var $1783=HEAP16[(($1782)>>1)];
   var $1784=(($1783)&(65535));
   var $1785=(($1784)|(0)) < 3;
   if ($1785) { label = 153; break; } else { label = 154; break; }
  case 153: 
   var $1793 = 3;label = 155; break;
  case 154: 
   var $1788=$irep;
   var $1789=(($1788+6)|0);
   var $1790=HEAP16[(($1789)>>1)];
   var $1791=(($1790)&(65535));
   var $1793 = $1791;label = 155; break;
  case 155: 
   var $1793;
   _stack_extend($1780, $1793, 3);
   label = 157; break;
  case 156: 
   var $1795=$1;
   var $1796=$irep;
   var $1797=(($1796+6)|0);
   var $1798=HEAP16[(($1797)>>1)];
   var $1799=(($1798)&(65535));
   var $1800=$ci15;
   var $1801=(($1800+16)|0);
   var $1802=HEAP32[(($1801)>>2)];
   var $1803=((($1802)+(2))|0);
   _stack_extend($1795, $1799, $1803);
   label = 157; break;
  case 157: 
   var $1805=$1;
   var $1806=(($1805+8)|0);
   var $1807=HEAP32[(($1806)>>2)];
   var $1808=(($1807+4)|0);
   var $1809=HEAP32[(($1808)>>2)];
   $regs=$1809;
   var $1810=$irep;
   var $1811=(($1810+12)|0);
   var $1812=HEAP32[(($1811)>>2)];
   $pc=$1812;
   var $1813=$pc;
   var $1814=HEAP32[(($1813)>>2)];
   $i=$1814;
   var $1815=$i;
   var $1816=$1815 & 127;
   var $1817=((74668+($1816<<2))|0);
   var $1818=HEAP32[(($1817)>>2)];
   var $5866 = $1818;label = 709; break;
  case 158: 
   var $1820=$i;
   var $1821=$1820 >>> 23;
   var $1822=$1821 & 511;
   $a21=$1822;
   var $1823=$i;
   var $1824=$1823 >>> 7;
   var $1825=$1824 & 65535;
   $bx=$1825;
   var $1826=$bx;
   var $1827=$1826 >> 10;
   var $1828=$1827 & 63;
   $m1=$1828;
   var $1829=$bx;
   var $1830=$1829 >> 9;
   var $1831=$1830 & 1;
   $r=$1831;
   var $1832=$bx;
   var $1833=$1832 >> 4;
   var $1834=$1833 & 31;
   $m2=$1834;
   var $1835=$bx;
   var $1836=$1835 >> 0;
   var $1837=$1836 & 15;
   $lv=$1837;
   var $1838=$lv;
   var $1839=(($1838)|(0))==0;
   if ($1839) { label = 159; break; } else { label = 160; break; }
  case 159: 
   var $1841=$regs;
   var $1842=(($1841+12)|0);
   $stack=$1842;
   label = 163; break;
  case 160: 
   var $1844=$1;
   var $1845=$lv;
   var $1846=((($1845)-(1))|0);
   var $1847=_uvenv($1844, $1846);
   $e22=$1847;
   var $1848=$e22;
   var $1849=(($1848)|(0))!=0;
   if ($1849) { label = 162; break; } else { label = 161; break; }
  case 161: 
   var $1851=$1;
   var $1852=$1;
   var $1853=_mrb_class_get($1852, ((91688)|0));
   _mrb_exc_new($17, $1851, $1853, ((75000)|0), 30);
   var $1854=$exc;
   var $1855=$17;
   assert(12 % 1 === 0);HEAP32[(($1854)>>2)]=HEAP32[(($1855)>>2)];HEAP32[((($1854)+(4))>>2)]=HEAP32[((($1855)+(4))>>2)];HEAP32[((($1854)+(8))>>2)]=HEAP32[((($1855)+(8))>>2)];
   var $1856=(($exc)|0);
   var $1857=$1856;
   var $1858=HEAP32[(($1857)>>2)];
   var $1859=$1858;
   var $1860=$1;
   var $1861=(($1860+16)|0);
   HEAP32[(($1861)>>2)]=$1859;
   label = 222; break;
  case 162: 
   var $1863=$e22;
   var $1864=(($1863+12)|0);
   var $1865=HEAP32[(($1864)>>2)];
   var $1866=(($1865+12)|0);
   $stack=$1866;
   label = 163; break;
  case 163: 
   var $1868=$r;
   var $1869=(($1868)|(0))==0;
   if ($1869) { label = 164; break; } else { label = 165; break; }
  case 164: 
   var $1871=$a21;
   var $1872=$regs;
   var $1873=(($1872+((($1871)*(12))&-1))|0);
   var $1874=$1;
   var $1875=$m1;
   var $1876=$m2;
   var $1877=((($1875)+($1876))|0);
   var $1878=$stack;
   _mrb_ary_new_from_values($18, $1874, $1877, $1878);
   var $1879=$1873;
   var $1880=$18;
   assert(12 % 1 === 0);HEAP32[(($1879)>>2)]=HEAP32[(($1880)>>2)];HEAP32[((($1879)+(4))>>2)]=HEAP32[((($1880)+(4))>>2)];HEAP32[((($1879)+(8))>>2)]=HEAP32[((($1880)+(8))>>2)];
   label = 172; break;
  case 165: 
   $pp=0;
   $len=0;
   var $1882=$m1;
   var $1883=$stack;
   var $1884=(($1883+((($1882)*(12))&-1))|0);
   var $1885=(($1884+8)|0);
   var $1886=HEAP32[(($1885)>>2)];
   var $1887=(($1886)|(0))==14;
   if ($1887) { label = 166; break; } else { label = 167; break; }
  case 166: 
   var $1889=$m1;
   var $1890=$stack;
   var $1891=(($1890+((($1889)*(12))&-1))|0);
   var $1892=(($1891)|0);
   var $1893=$1892;
   var $1894=HEAP32[(($1893)>>2)];
   var $1895=$1894;
   $ary=$1895;
   var $1896=$ary;
   var $1897=(($1896+20)|0);
   var $1898=HEAP32[(($1897)>>2)];
   $pp=$1898;
   var $1899=$ary;
   var $1900=(($1899+12)|0);
   var $1901=HEAP32[(($1900)>>2)];
   $len=$1901;
   label = 167; break;
  case 167: 
   var $1903=$a21;
   var $1904=$regs;
   var $1905=(($1904+((($1903)*(12))&-1))|0);
   var $1906=$1;
   var $1907=$m1;
   var $1908=$len;
   var $1909=((($1907)+($1908))|0);
   var $1910=$m2;
   var $1911=((($1909)+($1910))|0);
   _mrb_ary_new_capa($19, $1906, $1911);
   var $1912=$1905;
   var $1913=$19;
   assert(12 % 1 === 0);HEAP32[(($1912)>>2)]=HEAP32[(($1913)>>2)];HEAP32[((($1912)+(4))>>2)]=HEAP32[((($1913)+(4))>>2)];HEAP32[((($1912)+(8))>>2)]=HEAP32[((($1913)+(8))>>2)];
   var $1914=$a21;
   var $1915=$regs;
   var $1916=(($1915+((($1914)*(12))&-1))|0);
   var $1917=(($1916)|0);
   var $1918=$1917;
   var $1919=HEAP32[(($1918)>>2)];
   var $1920=$1919;
   $rest=$1920;
   var $1921=$rest;
   var $1922=(($1921+20)|0);
   var $1923=HEAP32[(($1922)>>2)];
   var $1924=$stack;
   var $1925=$m1;
   _stack_copy($1923, $1924, $1925);
   var $1926=$len;
   var $1927=(($1926)|(0)) > 0;
   if ($1927) { label = 168; break; } else { label = 169; break; }
  case 168: 
   var $1929=$rest;
   var $1930=(($1929+20)|0);
   var $1931=HEAP32[(($1930)>>2)];
   var $1932=$m1;
   var $1933=(($1931+((($1932)*(12))&-1))|0);
   var $1934=$pp;
   var $1935=$len;
   _stack_copy($1933, $1934, $1935);
   label = 169; break;
  case 169: 
   var $1937=$m2;
   var $1938=(($1937)|(0)) > 0;
   if ($1938) { label = 170; break; } else { label = 171; break; }
  case 170: 
   var $1940=$rest;
   var $1941=(($1940+20)|0);
   var $1942=HEAP32[(($1941)>>2)];
   var $1943=$m1;
   var $1944=(($1942+((($1943)*(12))&-1))|0);
   var $1945=$len;
   var $1946=(($1944+((($1945)*(12))&-1))|0);
   var $1947=$stack;
   var $1948=$m1;
   var $1949=(($1947+((($1948)*(12))&-1))|0);
   var $1950=(($1949+12)|0);
   var $1951=$m2;
   _stack_copy($1946, $1950, $1951);
   label = 171; break;
  case 171: 
   var $1953=$m1;
   var $1954=$len;
   var $1955=((($1953)+($1954))|0);
   var $1956=$m2;
   var $1957=((($1955)+($1956))|0);
   var $1958=$rest;
   var $1959=(($1958+12)|0);
   HEAP32[(($1959)>>2)]=$1957;
   label = 172; break;
  case 172: 
   var $1961=$a21;
   var $1962=((($1961)+(1))|0);
   var $1963=$regs;
   var $1964=(($1963+((($1962)*(12))&-1))|0);
   var $1965=$m1;
   var $1966=$r;
   var $1967=((($1965)+($1966))|0);
   var $1968=$m2;
   var $1969=((($1967)+($1968))|0);
   var $1970=$stack;
   var $1971=(($1970+((($1969)*(12))&-1))|0);
   var $1972=$1964;
   var $1973=$1971;
   assert(12 % 1 === 0);HEAP32[(($1972)>>2)]=HEAP32[(($1973)>>2)];HEAP32[((($1972)+(4))>>2)]=HEAP32[((($1973)+(4))>>2)];HEAP32[((($1972)+(8))>>2)]=HEAP32[((($1973)+(8))>>2)];
   var $1974=$1;
   var $1975=$ai;
   _mrb_gc_arena_restore($1974, $1975);
   var $1976=$pc;
   var $1977=(($1976+4)|0);
   $pc=$1977;
   var $1978=HEAP32[(($1977)>>2)];
   $i=$1978;
   var $1979=$i;
   var $1980=$1979 & 127;
   var $1981=((74668+($1980<<2))|0);
   var $1982=HEAP32[(($1981)>>2)];
   var $5866 = $1982;label = 709; break;
  case 173: 
   var $1984=$i;
   var $1985=$1984 >>> 7;
   var $1986=$1985 & 33554431;
   $ax=$1986;
   var $1987=$ax;
   var $1988=$1987 >>> 18;
   var $1989=$1988 & 31;
   $m123=$1989;
   var $1990=$ax;
   var $1991=$1990 >>> 13;
   var $1992=$1991 & 31;
   $o=$1992;
   var $1993=$ax;
   var $1994=$1993 >>> 12;
   var $1995=$1994 & 1;
   $r24=$1995;
   var $1996=$ax;
   var $1997=$1996 >>> 7;
   var $1998=$1997 & 31;
   $m225=$1998;
   var $1999=$1;
   var $2000=(($1999+8)|0);
   var $2001=HEAP32[(($2000)>>2)];
   var $2002=(($2001+16)|0);
   var $2003=HEAP32[(($2002)>>2)];
   var $2004=(($2003+16)|0);
   var $2005=HEAP32[(($2004)>>2)];
   $argc=$2005;
   var $2006=$regs;
   var $2007=(($2006+12)|0);
   $argv=$2007;
   var $2008=$argv;
   $argv0=$2008;
   var $2009=$m123;
   var $2010=$o;
   var $2011=((($2009)+($2010))|0);
   var $2012=$r24;
   var $2013=((($2011)+($2012))|0);
   var $2014=$m225;
   var $2015=((($2013)+($2014))|0);
   $len26=$2015;
   var $2016=$argc;
   var $2017=(($2016)|(0)) < 0;
   if ($2017) { label = 174; break; } else { label = 175; break; }
  case 174: 
   var $2022 = 1;label = 176; break;
  case 175: 
   var $2020=$argc;
   var $2022 = $2020;label = 176; break;
  case 176: 
   var $2022;
   var $2023=$argv;
   var $2024=(($2023+((($2022)*(12))&-1))|0);
   $blk=$2024;
   var $2025=$argc;
   var $2026=(($2025)|(0)) < 0;
   if ($2026) { label = 177; break; } else { label = 178; break; }
  case 177: 
   var $2028=$regs;
   var $2029=(($2028+12)|0);
   var $2030=(($2029)|0);
   var $2031=$2030;
   var $2032=HEAP32[(($2031)>>2)];
   var $2033=$2032;
   $ary27=$2033;
   var $2034=$ary27;
   var $2035=(($2034+20)|0);
   var $2036=HEAP32[(($2035)>>2)];
   $argv=$2036;
   var $2037=$ary27;
   var $2038=(($2037+12)|0);
   var $2039=HEAP32[(($2038)>>2)];
   $argc=$2039;
   var $2040=$1;
   var $2041=$regs;
   var $2042=(($2041+12)|0);
   _mrb_gc_protect($2040, $2042);
   label = 178; break;
  case 178: 
   var $2044=$1;
   var $2045=(($2044+8)|0);
   var $2046=HEAP32[(($2045)>>2)];
   var $2047=(($2046+16)|0);
   var $2048=HEAP32[(($2047)>>2)];
   var $2049=(($2048+4)|0);
   var $2050=HEAP32[(($2049)>>2)];
   var $2051=(($2050)|(0))!=0;
   if ($2051) { label = 179; break; } else { label = 187; break; }
  case 179: 
   var $2053=$1;
   var $2054=(($2053+8)|0);
   var $2055=HEAP32[(($2054)>>2)];
   var $2056=(($2055+16)|0);
   var $2057=HEAP32[(($2056)>>2)];
   var $2058=(($2057+4)|0);
   var $2059=HEAP32[(($2058)>>2)];
   var $2060=$2059;
   var $2061=HEAP32[(($2060)>>2)];
   var $2062=$2061 >>> 11;
   var $2063=$2062 & 2097151;
   var $2064=$2063 & 256;
   var $2065=(($2064)|(0))!=0;
   if ($2065) { label = 180; break; } else { label = 187; break; }
  case 180: 
   var $2067=$argc;
   var $2068=(($2067)|(0)) >= 0;
   if ($2068) { label = 181; break; } else { label = 186; break; }
  case 181: 
   var $2070=$argc;
   var $2071=$m123;
   var $2072=$m225;
   var $2073=((($2071)+($2072))|0);
   var $2074=(($2070)|(0)) < (($2073)|(0));
   if ($2074) { label = 184; break; } else { label = 182; break; }
  case 182: 
   var $2076=$r24;
   var $2077=(($2076)|(0))==0;
   if ($2077) { label = 183; break; } else { label = 185; break; }
  case 183: 
   var $2079=$argc;
   var $2080=$len26;
   var $2081=(($2079)|(0)) > (($2080)|(0));
   if ($2081) { label = 184; break; } else { label = 185; break; }
  case 184: 
   var $2083=$1;
   var $2084=$m123;
   var $2085=$m225;
   var $2086=((($2084)+($2085))|0);
   _argnum_error($2083, $2086);
   label = 222; break;
  case 185: 
   label = 186; break;
  case 186: 
   label = 192; break;
  case 187: 
   var $2090=$len26;
   var $2091=(($2090)|(0)) > 1;
   if ($2091) { label = 188; break; } else { label = 191; break; }
  case 188: 
   var $2093=$argc;
   var $2094=(($2093)|(0))==1;
   if ($2094) { label = 189; break; } else { label = 191; break; }
  case 189: 
   var $2096=$argv;
   var $2097=(($2096)|0);
   var $2098=(($2097+8)|0);
   var $2099=HEAP32[(($2098)>>2)];
   var $2100=(($2099)|(0))==14;
   if ($2100) { label = 190; break; } else { label = 191; break; }
  case 190: 
   var $2102=$argv;
   var $2103=(($2102)|0);
   var $2104=(($2103)|0);
   var $2105=$2104;
   var $2106=HEAP32[(($2105)>>2)];
   var $2107=$2106;
   var $2108=(($2107+12)|0);
   var $2109=HEAP32[(($2108)>>2)];
   $argc=$2109;
   var $2110=$argv;
   var $2111=(($2110)|0);
   var $2112=(($2111)|0);
   var $2113=$2112;
   var $2114=HEAP32[(($2113)>>2)];
   var $2115=$2114;
   var $2116=(($2115+20)|0);
   var $2117=HEAP32[(($2116)>>2)];
   $argv=$2117;
   label = 191; break;
  case 191: 
   label = 192; break;
  case 192: 
   var $2120=$len26;
   var $2121=$1;
   var $2122=(($2121+8)|0);
   var $2123=HEAP32[(($2122)>>2)];
   var $2124=(($2123+16)|0);
   var $2125=HEAP32[(($2124)>>2)];
   var $2126=(($2125+16)|0);
   HEAP32[(($2126)>>2)]=$2120;
   var $2127=$argc;
   var $2128=$len26;
   var $2129=(($2127)|(0)) < (($2128)|(0));
   if ($2129) { label = 193; break; } else { label = 205; break; }
  case 193: 
   var $2131=$len26;
   var $2132=((($2131)+(1))|0);
   var $2133=$regs;
   var $2134=(($2133+((($2132)*(12))&-1))|0);
   var $2135=$blk;
   var $2136=$2134;
   var $2137=$2135;
   assert(12 % 1 === 0);HEAP32[(($2136)>>2)]=HEAP32[(($2137)>>2)];HEAP32[((($2136)+(4))>>2)]=HEAP32[((($2137)+(4))>>2)];HEAP32[((($2136)+(8))>>2)]=HEAP32[((($2137)+(8))>>2)];
   var $2138=$argv0;
   var $2139=$argv;
   var $2140=(($2138)|(0))!=(($2139)|(0));
   if ($2140) { label = 194; break; } else { label = 195; break; }
  case 194: 
   var $2142=$regs;
   var $2143=(($2142+12)|0);
   var $2144=$argv;
   var $2145=$argc;
   var $2146=$m225;
   var $2147=((($2145)-($2146))|0);
   _value_move($2143, $2144, $2147);
   label = 195; break;
  case 195: 
   var $2149=$m225;
   var $2150=(($2149)|(0))!=0;
   if ($2150) { label = 196; break; } else { label = 199; break; }
  case 196: 
   var $2152=$m225;
   $mlen=$2152;
   var $2153=$argc;
   var $2154=$m225;
   var $2155=((($2153)-($2154))|0);
   var $2156=$m123;
   var $2157=(($2155)|(0)) <= (($2156)|(0));
   if ($2157) { label = 197; break; } else { label = 198; break; }
  case 197: 
   var $2159=$argc;
   var $2160=$m123;
   var $2161=((($2159)-($2160))|0);
   $mlen=$2161;
   label = 198; break;
  case 198: 
   var $2163=$len26;
   var $2164=$m225;
   var $2165=((($2163)-($2164))|0);
   var $2166=((($2165)+(1))|0);
   var $2167=$regs;
   var $2168=(($2167+((($2166)*(12))&-1))|0);
   var $2169=$argc;
   var $2170=$mlen;
   var $2171=((($2169)-($2170))|0);
   var $2172=$argv;
   var $2173=(($2172+((($2171)*(12))&-1))|0);
   var $2174=$mlen;
   _value_move($2168, $2173, $2174);
   label = 199; break;
  case 199: 
   var $2176=$r24;
   var $2177=(($2176)|(0))!=0;
   if ($2177) { label = 200; break; } else { label = 201; break; }
  case 200: 
   var $2179=$m123;
   var $2180=$o;
   var $2181=((($2179)+($2180))|0);
   var $2182=((($2181)+(1))|0);
   var $2183=$regs;
   var $2184=(($2183+((($2182)*(12))&-1))|0);
   var $2185=$1;
   _mrb_ary_new_capa($20, $2185, 0);
   var $2186=$2184;
   var $2187=$20;
   assert(12 % 1 === 0);HEAP32[(($2186)>>2)]=HEAP32[(($2187)>>2)];HEAP32[((($2186)+(4))>>2)]=HEAP32[((($2187)+(4))>>2)];HEAP32[((($2186)+(8))>>2)]=HEAP32[((($2187)+(8))>>2)];
   label = 201; break;
  case 201: 
   var $2189=$o;
   var $2190=(($2189)|(0))==0;
   if ($2190) { label = 202; break; } else { label = 203; break; }
  case 202: 
   var $2192=$pc;
   var $2193=(($2192+4)|0);
   $pc=$2193;
   label = 204; break;
  case 203: 
   var $2195=$argc;
   var $2196=$m123;
   var $2197=((($2195)-($2196))|0);
   var $2198=$m225;
   var $2199=((($2197)-($2198))|0);
   var $2200=((($2199)+(1))|0);
   var $2201=$pc;
   var $2202=(($2201+($2200<<2))|0);
   $pc=$2202;
   label = 204; break;
  case 204: 
   label = 216; break;
  case 205: 
   var $2205=$argv0;
   var $2206=$argv;
   var $2207=(($2205)|(0))!=(($2206)|(0));
   if ($2207) { label = 206; break; } else { label = 207; break; }
  case 206: 
   var $2209=$len26;
   var $2210=((($2209)+(1))|0);
   var $2211=$regs;
   var $2212=(($2211+((($2210)*(12))&-1))|0);
   var $2213=$blk;
   var $2214=$2212;
   var $2215=$2213;
   assert(12 % 1 === 0);HEAP32[(($2214)>>2)]=HEAP32[(($2215)>>2)];HEAP32[((($2214)+(4))>>2)]=HEAP32[((($2215)+(4))>>2)];HEAP32[((($2214)+(8))>>2)]=HEAP32[((($2215)+(8))>>2)];
   var $2216=$regs;
   var $2217=(($2216+12)|0);
   var $2218=$argv;
   var $2219=$m123;
   var $2220=$o;
   var $2221=((($2219)+($2220))|0);
   _value_move($2217, $2218, $2221);
   label = 207; break;
  case 207: 
   var $2223=$r24;
   var $2224=(($2223)|(0))!=0;
   if ($2224) { label = 208; break; } else { label = 209; break; }
  case 208: 
   var $2226=$m123;
   var $2227=$o;
   var $2228=((($2226)+($2227))|0);
   var $2229=((($2228)+(1))|0);
   var $2230=$regs;
   var $2231=(($2230+((($2229)*(12))&-1))|0);
   var $2232=$1;
   var $2233=$argc;
   var $2234=$m123;
   var $2235=((($2233)-($2234))|0);
   var $2236=$o;
   var $2237=((($2235)-($2236))|0);
   var $2238=$m225;
   var $2239=((($2237)-($2238))|0);
   var $2240=$argv;
   var $2241=$m123;
   var $2242=(($2240+((($2241)*(12))&-1))|0);
   var $2243=$o;
   var $2244=(($2242+((($2243)*(12))&-1))|0);
   _mrb_ary_new_from_values($21, $2232, $2239, $2244);
   var $2245=$2231;
   var $2246=$21;
   assert(12 % 1 === 0);HEAP32[(($2245)>>2)]=HEAP32[(($2246)>>2)];HEAP32[((($2245)+(4))>>2)]=HEAP32[((($2246)+(4))>>2)];HEAP32[((($2245)+(8))>>2)]=HEAP32[((($2246)+(8))>>2)];
   label = 209; break;
  case 209: 
   var $2248=$m225;
   var $2249=(($2248)|(0))!=0;
   if ($2249) { label = 210; break; } else { label = 213; break; }
  case 210: 
   var $2251=$argc;
   var $2252=$m225;
   var $2253=((($2251)-($2252))|0);
   var $2254=$m123;
   var $2255=(($2253)|(0)) > (($2254)|(0));
   if ($2255) { label = 211; break; } else { label = 212; break; }
  case 211: 
   var $2257=$m123;
   var $2258=$o;
   var $2259=((($2257)+($2258))|0);
   var $2260=$r24;
   var $2261=((($2259)+($2260))|0);
   var $2262=((($2261)+(1))|0);
   var $2263=$regs;
   var $2264=(($2263+((($2262)*(12))&-1))|0);
   var $2265=$argc;
   var $2266=$m225;
   var $2267=((($2265)-($2266))|0);
   var $2268=$argv;
   var $2269=(($2268+((($2267)*(12))&-1))|0);
   var $2270=$m225;
   _value_move($2264, $2269, $2270);
   label = 212; break;
  case 212: 
   label = 213; break;
  case 213: 
   var $2273=$argv0;
   var $2274=$argv;
   var $2275=(($2273)|(0))==(($2274)|(0));
   if ($2275) { label = 214; break; } else { label = 215; break; }
  case 214: 
   var $2277=$len26;
   var $2278=((($2277)+(1))|0);
   var $2279=$regs;
   var $2280=(($2279+((($2278)*(12))&-1))|0);
   var $2281=$blk;
   var $2282=$2280;
   var $2283=$2281;
   assert(12 % 1 === 0);HEAP32[(($2282)>>2)]=HEAP32[(($2283)>>2)];HEAP32[((($2282)+(4))>>2)]=HEAP32[((($2283)+(4))>>2)];HEAP32[((($2282)+(8))>>2)]=HEAP32[((($2283)+(8))>>2)];
   label = 215; break;
  case 215: 
   var $2285=$o;
   var $2286=((($2285)+(1))|0);
   var $2287=$pc;
   var $2288=(($2287+($2286<<2))|0);
   $pc=$2288;
   label = 216; break;
  case 216: 
   var $2290=$pc;
   var $2291=HEAP32[(($2290)>>2)];
   $i=$2291;
   var $2292=$i;
   var $2293=$2292 & 127;
   var $2294=((74668+($2293<<2))|0);
   var $2295=HEAP32[(($2294)>>2)];
   var $5866 = $2295;label = 709; break;
  case 217: 
   var $2297=$pc;
   var $2298=(($2297+4)|0);
   $pc=$2298;
   var $2299=HEAP32[(($2298)>>2)];
   $i=$2299;
   var $2300=$i;
   var $2301=$2300 & 127;
   var $2302=((74668+($2301<<2))|0);
   var $2303=HEAP32[(($2302)>>2)];
   var $5866 = $2303;label = 709; break;
  case 218: 
   var $2305=$pc;
   var $2306=(($2305+4)|0);
   $pc=$2306;
   var $2307=HEAP32[(($2306)>>2)];
   $i=$2307;
   var $2308=$i;
   var $2309=$2308 & 127;
   var $2310=((74668+($2309<<2))|0);
   var $2311=HEAP32[(($2310)>>2)];
   var $5866 = $2311;label = 709; break;
  case 219: 
   var $2313=$i;
   var $2314=$2313 >>> 23;
   var $2315=$2314 & 511;
   var $2316=$2315 & 511;
   var $2317=$2316 << 23;
   var $2318=41 | $2317;
   $i=$2318;
   label = 220; break;
  case 220: 
   var $2320=$1;
   var $2321=(($2320+16)|0);
   var $2322=HEAP32[(($2321)>>2)];
   var $2323=(($2322)|(0))!=0;
   if ($2323) { label = 221; break; } else { label = 244; break; }
  case 221: 
   label = 222; break;
  case 222: 
   var $2326=$1;
   var $2327=(($2326+8)|0);
   var $2328=HEAP32[(($2327)>>2)];
   var $2329=(($2328+16)|0);
   var $2330=HEAP32[(($2329)>>2)];
   $ci28=$2330;
   var $2331=$1;
   var $2332=$1;
   var $2333=(($2332+16)|0);
   var $2334=HEAP32[(($2333)>>2)];
   var $2335=$1;
   var $2336=_mrb_intern2($2335, ((89560)|0), 6);
   var $2337=$1;
   var $2338=$pc;
   var $2339=$2338;
   _mrb_voidp_value($22, $2337, $2339);
   _mrb_obj_iv_ifnone($2331, $2334, $2336, $22);
   var $2340=$1;
   var $2341=$1;
   var $2342=(($2341+16)|0);
   var $2343=HEAP32[(($2342)>>2)];
   var $2344=$1;
   var $2345=_mrb_intern2($2344, ((88344)|0), 5);
   var $2346=$ci28;
   var $2347=$1;
   var $2348=(($2347+8)|0);
   var $2349=HEAP32[(($2348)>>2)];
   var $2350=(($2349+20)|0);
   var $2351=HEAP32[(($2350)>>2)];
   var $2352=$2346;
   var $2353=$2351;
   var $2354=((($2352)-($2353))|0);
   var $2355=((((($2354)|(0)))/(44))&-1);
   _mrb_fixnum_value140($23, $2355);
   _mrb_obj_iv_ifnone($2340, $2343, $2345, $23);
   var $2356=$ci28;
   var $2357=(($2356+36)|0);
   var $2358=HEAP32[(($2357)>>2)];
   $eidx=$2358;
   var $2359=$ci28;
   var $2360=$1;
   var $2361=(($2360+8)|0);
   var $2362=HEAP32[(($2361)>>2)];
   var $2363=(($2362+20)|0);
   var $2364=HEAP32[(($2363)>>2)];
   var $2365=(($2359)|(0))==(($2364)|(0));
   if ($2365) { label = 223; break; } else { label = 226; break; }
  case 223: 
   var $2367=$ci28;
   var $2368=(($2367+32)|0);
   var $2369=HEAP32[(($2368)>>2)];
   var $2370=(($2369)|(0))==0;
   if ($2370) { label = 224; break; } else { label = 225; break; }
  case 224: 
   label = 698; break;
  case 225: 
   label = 243; break;
  case 226: 
   label = 227; break;
  case 227: 
   var $2375=$eidx;
   var $2376=$ci28;
   var $2377=((($2376)-(44))|0);
   var $2378=(($2377+36)|0);
   var $2379=HEAP32[(($2378)>>2)];
   var $2380=(($2375)|(0)) > (($2379)|(0));
   if ($2380) { label = 228; break; } else { label = 229; break; }
  case 228: 
   var $2382=$1;
   var $2383=$eidx;
   var $2384=((($2383)-(1))|0);
   $eidx=$2384;
   _ecall($2382, $2384);
   label = 227; break;
  case 229: 
   label = 230; break;
  case 230: 
   var $2387=$ci28;
   var $2388=(($2387)|0);
   var $2389=(($2388+32)|0);
   var $2390=HEAP32[(($2389)>>2)];
   var $2391=$ci28;
   var $2392=((($2391)-(44))|0);
   var $2393=(($2392+32)|0);
   var $2394=HEAP32[(($2393)>>2)];
   var $2395=(($2390)|(0))==(($2394)|(0));
   if ($2395) { label = 231; break; } else { label = 242; break; }
  case 231: 
   var $2397=$1;
   _cipop($2397);
   var $2398=$1;
   var $2399=(($2398+8)|0);
   var $2400=HEAP32[(($2399)>>2)];
   var $2401=(($2400+16)|0);
   var $2402=HEAP32[(($2401)>>2)];
   $ci28=$2402;
   var $2403=$1;
   var $2404=(($2403+8)|0);
   var $2405=HEAP32[(($2404)>>2)];
   var $2406=(($2405+8)|0);
   var $2407=HEAP32[(($2406)>>2)];
   var $2408=$ci28;
   var $2409=(($2408+44)|0);
   var $2410=(($2409+8)|0);
   var $2411=HEAP32[(($2410)>>2)];
   var $2412=(($2407+((($2411)*(12))&-1))|0);
   var $2413=$1;
   var $2414=(($2413+8)|0);
   var $2415=HEAP32[(($2414)>>2)];
   var $2416=(($2415+4)|0);
   HEAP32[(($2416)>>2)]=$2412;
   var $2417=$ci28;
   var $2418=(($2417+44)|0);
   var $2419=(($2418+24)|0);
   var $2420=HEAP32[(($2419)>>2)];
   var $2421=(($2420)|(0)) < 0;
   if ($2421) { label = 232; break; } else { label = 234; break; }
  case 232: 
   var $2423=$prev_jmp;
   var $2424=(($2423)|(0))!=0;
   if ($2424) { label = 233; break; } else { label = 234; break; }
  case 233: 
   var $2426=$prev_jmp;
   var $2427=$2426;
   var $2428=$1;
   var $2429=(($2428)|0);
   HEAP32[(($2429)>>2)]=$2427;
   var $2430=$1;
   var $2431=(($2430)|0);
   var $2432=HEAP32[(($2431)>>2)];
   var $2433=$2432;
   var $2434=(($2433)|0);
   _longjmp($2434, 1);
   throw "Reached an unreachable!";
  case 234: 
   label = 235; break;
  case 235: 
   var $2437=$eidx;
   var $2438=$ci28;
   var $2439=(($2438+36)|0);
   var $2440=HEAP32[(($2439)>>2)];
   var $2441=(($2437)|(0)) > (($2440)|(0));
   if ($2441) { label = 236; break; } else { label = 237; break; }
  case 236: 
   var $2443=$1;
   var $2444=$eidx;
   var $2445=((($2444)-(1))|0);
   $eidx=$2445;
   _ecall($2443, $2445);
   label = 235; break;
  case 237: 
   var $2447=$ci28;
   var $2448=$1;
   var $2449=(($2448+8)|0);
   var $2450=HEAP32[(($2449)>>2)];
   var $2451=(($2450+20)|0);
   var $2452=HEAP32[(($2451)>>2)];
   var $2453=(($2447)|(0))==(($2452)|(0));
   if ($2453) { label = 238; break; } else { label = 241; break; }
  case 238: 
   var $2455=$ci28;
   var $2456=(($2455+32)|0);
   var $2457=HEAP32[(($2456)>>2)];
   var $2458=(($2457)|(0))==0;
   if ($2458) { label = 239; break; } else { label = 240; break; }
  case 239: 
   var $2460=$1;
   var $2461=(($2460+8)|0);
   var $2462=HEAP32[(($2461)>>2)];
   var $2463=(($2462+8)|0);
   var $2464=HEAP32[(($2463)>>2)];
   var $2465=$1;
   var $2466=(($2465+8)|0);
   var $2467=HEAP32[(($2466)>>2)];
   var $2468=(($2467+4)|0);
   HEAP32[(($2468)>>2)]=$2464;
   $regs=$2464;
   label = 698; break;
  case 240: 
   label = 242; break;
  case 241: 
   label = 230; break;
  case 242: 
   label = 243; break;
  case 243: 
   var $2473=$ci28;
   var $2474=(($2473+4)|0);
   var $2475=HEAP32[(($2474)>>2)];
   var $2476=(($2475+12)|0);
   var $2477=$2476;
   var $2478=HEAP32[(($2477)>>2)];
   $irep=$2478;
   var $2479=$irep;
   var $2480=(($2479+16)|0);
   var $2481=HEAP32[(($2480)>>2)];
   $pool=$2481;
   var $2482=$irep;
   var $2483=(($2482+20)|0);
   var $2484=HEAP32[(($2483)>>2)];
   $syms=$2484;
   var $2485=$1;
   var $2486=(($2485+8)|0);
   var $2487=HEAP32[(($2486)>>2)];
   var $2488=(($2487+8)|0);
   var $2489=HEAP32[(($2488)>>2)];
   var $2490=$ci28;
   var $2491=(($2490+44)|0);
   var $2492=(($2491+8)|0);
   var $2493=HEAP32[(($2492)>>2)];
   var $2494=(($2489+((($2493)*(12))&-1))|0);
   var $2495=$1;
   var $2496=(($2495+8)|0);
   var $2497=HEAP32[(($2496)>>2)];
   var $2498=(($2497+4)|0);
   HEAP32[(($2498)>>2)]=$2494;
   $regs=$2494;
   var $2499=$ci28;
   var $2500=(($2499+32)|0);
   var $2501=HEAP32[(($2500)>>2)];
   var $2502=((($2501)-(1))|0);
   HEAP32[(($2500)>>2)]=$2502;
   var $2503=$1;
   var $2504=(($2503+8)|0);
   var $2505=HEAP32[(($2504)>>2)];
   var $2506=(($2505+28)|0);
   var $2507=HEAP32[(($2506)>>2)];
   var $2508=(($2507+($2502<<2))|0);
   var $2509=HEAP32[(($2508)>>2)];
   $pc=$2509;
   label = 270; break;
  case 244: 
   var $2511=$1;
   var $2512=(($2511+8)|0);
   var $2513=HEAP32[(($2512)>>2)];
   var $2514=(($2513+16)|0);
   var $2515=HEAP32[(($2514)>>2)];
   $ci29=$2515;
   var $2516=$1;
   var $2517=(($2516+8)|0);
   var $2518=HEAP32[(($2517)>>2)];
   var $2519=(($2518+16)|0);
   var $2520=HEAP32[(($2519)>>2)];
   var $2521=(($2520+36)|0);
   var $2522=HEAP32[(($2521)>>2)];
   $eidx30=$2522;
   var $2523=$i;
   var $2524=$2523 >>> 23;
   var $2525=$2524 & 511;
   var $2526=$regs;
   var $2527=(($2526+((($2525)*(12))&-1))|0);
   var $2528=$v;
   var $2529=$2527;
   assert(12 % 1 === 0);HEAP32[(($2528)>>2)]=HEAP32[(($2529)>>2)];HEAP32[((($2528)+(4))>>2)]=HEAP32[((($2529)+(4))>>2)];HEAP32[((($2528)+(8))>>2)]=HEAP32[((($2529)+(8))>>2)];
   var $2530=$i;
   var $2531=$2530 >>> 14;
   var $2532=$2531 & 511;
   if ((($2532)|(0))==2) {
    label = 245; break;
   }
   else if ((($2532)|(0))==0) {
    label = 253; break;
   }
   else if ((($2532)|(0))==1) {
    label = 260; break;
   }
   else {
   label = 263; break;
   }
  case 245: 
   var $2534=$2;
   var $2535=(($2534+20)|0);
   var $2536=HEAP32[(($2535)>>2)];
   var $2537=(($2536)|(0))!=0;
   if ($2537) { label = 246; break; } else { label = 252; break; }
  case 246: 
   var $2539=$2;
   var $2540=$2539;
   var $2541=HEAP32[(($2540)>>2)];
   var $2542=$2541 >>> 11;
   var $2543=$2542 & 2097151;
   var $2544=$2543 & 256;
   var $2545=(($2544)|(0))!=0;
   if ($2545) { label = 252; break; } else { label = 247; break; }
  case 247: 
   var $2547=$1;
   var $2548=$2;
   var $2549=_top_env($2547, $2548);
   $e31=$2549;
   var $2550=$e31;
   var $2551=(($2550+20)|0);
   var $2552=HEAP32[(($2551)>>2)];
   var $2553=(($2552)|(0)) < 0;
   if ($2553) { label = 248; break; } else { label = 249; break; }
  case 248: 
   var $2555=$1;
   _localjump_error($2555, 0);
   label = 222; break;
  case 249: 
   var $2557=$1;
   var $2558=(($2557+8)|0);
   var $2559=HEAP32[(($2558)>>2)];
   var $2560=(($2559+20)|0);
   var $2561=HEAP32[(($2560)>>2)];
   var $2562=$e31;
   var $2563=(($2562+20)|0);
   var $2564=HEAP32[(($2563)>>2)];
   var $2565=(($2561+((($2564)*(44))&-1))|0);
   $ci29=$2565;
   var $2566=$ci29;
   var $2567=$1;
   var $2568=(($2567+8)|0);
   var $2569=HEAP32[(($2568)>>2)];
   var $2570=(($2569+20)|0);
   var $2571=HEAP32[(($2570)>>2)];
   var $2572=(($2566)|(0))==(($2571)|(0));
   if ($2572) { label = 250; break; } else { label = 251; break; }
  case 250: 
   var $2574=$1;
   _localjump_error($2574, 0);
   label = 222; break;
  case 251: 
   var $2576=$ci29;
   var $2577=$1;
   var $2578=(($2577+8)|0);
   var $2579=HEAP32[(($2578)>>2)];
   var $2580=(($2579+16)|0);
   HEAP32[(($2580)>>2)]=$2576;
   label = 264; break;
  case 252: 
   label = 253; break;
  case 253: 
   var $2583=$ci29;
   var $2584=$1;
   var $2585=(($2584+8)|0);
   var $2586=HEAP32[(($2585)>>2)];
   var $2587=(($2586+20)|0);
   var $2588=HEAP32[(($2587)>>2)];
   var $2589=(($2583)|(0))==(($2588)|(0));
   if ($2589) { label = 254; break; } else { label = 259; break; }
  case 254: 
   var $2591=$1;
   var $2592=(($2591+8)|0);
   var $2593=HEAP32[(($2592)>>2)];
   var $2594=(($2593)|0);
   var $2595=HEAP32[(($2594)>>2)];
   var $2596=(($2595)|(0))!=0;
   if ($2596) { label = 256; break; } else { label = 255; break; }
  case 255: 
   var $2598=$1;
   _localjump_error($2598, 0);
   label = 222; break;
  case 256: 
   var $2600=$1;
   var $2601=(($2600+8)|0);
   var $2602=HEAP32[(($2601)>>2)];
   var $2603=(($2602)|0);
   var $2604=HEAP32[(($2603)>>2)];
   var $2605=(($2604+16)|0);
   var $2606=HEAP32[(($2605)>>2)];
   var $2607=$1;
   var $2608=(($2607+8)|0);
   var $2609=HEAP32[(($2608)>>2)];
   var $2610=(($2609)|0);
   var $2611=HEAP32[(($2610)>>2)];
   var $2612=(($2611+20)|0);
   var $2613=HEAP32[(($2612)>>2)];
   var $2614=(($2606)|(0))==(($2613)|(0));
   if ($2614) { label = 257; break; } else { label = 258; break; }
  case 257: 
   var $2616=$1;
   var $2617=$1;
   var $2618=_mrb_class_get($2617, ((87360)|0));
   var $2619=$1;
   _mrb_str_new($24, $2619, ((86564)|0), 13);
   _mrb_exc_new3($exc32, $2616, $2618, $24);
   var $2620=(($exc32)|0);
   var $2621=$2620;
   var $2622=HEAP32[(($2621)>>2)];
   var $2623=$2622;
   var $2624=$1;
   var $2625=(($2624+16)|0);
   HEAP32[(($2625)>>2)]=$2623;
   label = 222; break;
  case 258: 
   var $2627=$1;
   var $2628=(($2627+8)|0);
   var $2629=HEAP32[(($2628)>>2)];
   var $2630=(($2629+44)|0);
   HEAP8[($2630)]=3;
   var $2631=$1;
   var $2632=(($2631+8)|0);
   var $2633=HEAP32[(($2632)>>2)];
   var $2634=(($2633)|0);
   var $2635=HEAP32[(($2634)>>2)];
   var $2636=$1;
   var $2637=(($2636+8)|0);
   HEAP32[(($2637)>>2)]=$2635;
   label = 259; break;
  case 259: 
   var $2639=$1;
   var $2640=(($2639+8)|0);
   var $2641=HEAP32[(($2640)>>2)];
   var $2642=(($2641+16)|0);
   var $2643=HEAP32[(($2642)>>2)];
   $ci29=$2643;
   label = 264; break;
  case 260: 
   var $2645=$2;
   var $2646=(($2645+20)|0);
   var $2647=HEAP32[(($2646)>>2)];
   var $2648=(($2647+20)|0);
   var $2649=HEAP32[(($2648)>>2)];
   var $2650=(($2649)|(0)) < 0;
   if ($2650) { label = 261; break; } else { label = 262; break; }
  case 261: 
   var $2652=$1;
   _localjump_error($2652, 1);
   label = 222; break;
  case 262: 
   var $2654=$1;
   var $2655=(($2654+8)|0);
   var $2656=HEAP32[(($2655)>>2)];
   var $2657=(($2656+20)|0);
   var $2658=HEAP32[(($2657)>>2)];
   var $2659=$2;
   var $2660=(($2659+20)|0);
   var $2661=HEAP32[(($2660)>>2)];
   var $2662=(($2661+20)|0);
   var $2663=HEAP32[(($2662)>>2)];
   var $2664=(($2658+((($2663)*(44))&-1))|0);
   var $2665=(($2664+44)|0);
   var $2666=$1;
   var $2667=(($2666+8)|0);
   var $2668=HEAP32[(($2667)>>2)];
   var $2669=(($2668+16)|0);
   HEAP32[(($2669)>>2)]=$2665;
   $ci29=$2665;
   label = 264; break;
  case 263: 
   label = 264; break;
  case 264: 
   label = 265; break;
  case 265: 
   var $2673=$eidx30;
   var $2674=$1;
   var $2675=(($2674+8)|0);
   var $2676=HEAP32[(($2675)>>2)];
   var $2677=(($2676+16)|0);
   var $2678=HEAP32[(($2677)>>2)];
   var $2679=((($2678)-(44))|0);
   var $2680=(($2679+36)|0);
   var $2681=HEAP32[(($2680)>>2)];
   var $2682=(($2673)|(0)) > (($2681)|(0));
   if ($2682) { label = 266; break; } else { label = 267; break; }
  case 266: 
   var $2684=$1;
   var $2685=$eidx30;
   var $2686=((($2685)-(1))|0);
   $eidx30=$2686;
   _ecall($2684, $2686);
   label = 265; break;
  case 267: 
   var $2688=$1;
   _cipop($2688);
   var $2689=$ci29;
   var $2690=(($2689+24)|0);
   var $2691=HEAP32[(($2690)>>2)];
   $acc=$2691;
   var $2692=$ci29;
   var $2693=(($2692+20)|0);
   var $2694=HEAP32[(($2693)>>2)];
   $pc=$2694;
   var $2695=$1;
   var $2696=(($2695+8)|0);
   var $2697=HEAP32[(($2696)>>2)];
   var $2698=(($2697+8)|0);
   var $2699=HEAP32[(($2698)>>2)];
   var $2700=$ci29;
   var $2701=(($2700+8)|0);
   var $2702=HEAP32[(($2701)>>2)];
   var $2703=(($2699+((($2702)*(12))&-1))|0);
   var $2704=$1;
   var $2705=(($2704+8)|0);
   var $2706=HEAP32[(($2705)>>2)];
   var $2707=(($2706+4)|0);
   HEAP32[(($2707)>>2)]=$2703;
   $regs=$2703;
   var $2708=$acc;
   var $2709=(($2708)|(0)) < 0;
   if ($2709) { label = 268; break; } else { label = 269; break; }
  case 268: 
   var $2711=$prev_jmp;
   var $2712=$2711;
   var $2713=$1;
   var $2714=(($2713)|0);
   HEAP32[(($2714)>>2)]=$2712;
   var $2715=$agg_result;
   var $2716=$v;
   assert(12 % 1 === 0);HEAP32[(($2715)>>2)]=HEAP32[(($2716)>>2)];HEAP32[((($2715)+(4))>>2)]=HEAP32[((($2716)+(4))>>2)];HEAP32[((($2715)+(8))>>2)]=HEAP32[((($2716)+(8))>>2)];
   label = 708; break;
  case 269: 
   var $2718=$1;
   var $2719=(($2718+8)|0);
   var $2720=HEAP32[(($2719)>>2)];
   var $2721=(($2720+16)|0);
   var $2722=HEAP32[(($2721)>>2)];
   var $2723=(($2722+4)|0);
   var $2724=HEAP32[(($2723)>>2)];
   $2=$2724;
   var $2725=$2;
   var $2726=(($2725+12)|0);
   var $2727=$2726;
   var $2728=HEAP32[(($2727)>>2)];
   $irep=$2728;
   var $2729=$irep;
   var $2730=(($2729+16)|0);
   var $2731=HEAP32[(($2730)>>2)];
   $pool=$2731;
   var $2732=$irep;
   var $2733=(($2732+20)|0);
   var $2734=HEAP32[(($2733)>>2)];
   $syms=$2734;
   var $2735=$acc;
   var $2736=$regs;
   var $2737=(($2736+((($2735)*(12))&-1))|0);
   var $2738=$2737;
   var $2739=$v;
   assert(12 % 1 === 0);HEAP32[(($2738)>>2)]=HEAP32[(($2739)>>2)];HEAP32[((($2738)+(4))>>2)]=HEAP32[((($2739)+(4))>>2)];HEAP32[((($2738)+(8))>>2)]=HEAP32[((($2739)+(8))>>2)];
   label = 270; break;
  case 270: 
   var $2741=$pc;
   var $2742=HEAP32[(($2741)>>2)];
   $i=$2742;
   var $2743=$i;
   var $2744=$2743 & 127;
   var $2745=((74668+($2744<<2))|0);
   var $2746=HEAP32[(($2745)>>2)];
   var $5866 = $2746;label = 709; break;
  case 271: 
   var $2748=$i;
   var $2749=$2748 >>> 23;
   var $2750=$2749 & 511;
   $a33=$2750;
   var $2751=$i;
   var $2752=$2751 >>> 7;
   var $2753=$2752 & 127;
   $n34=$2753;
   var $2754=$i;
   var $2755=$2754 >>> 14;
   var $2756=$2755 & 511;
   var $2757=$syms;
   var $2758=(($2757+($2756<<1))|0);
   var $2759=HEAP16[(($2758)>>1)];
   $mid39=$2759;
   var $2760=$a33;
   var $2761=$regs;
   var $2762=(($2761+((($2760)*(12))&-1))|0);
   var $2763=$recv38;
   var $2764=$2762;
   assert(12 % 1 === 0);HEAP32[(($2763)>>2)]=HEAP32[(($2764)>>2)];HEAP32[((($2763)+(4))>>2)]=HEAP32[((($2764)+(4))>>2)];HEAP32[((($2763)+(8))>>2)]=HEAP32[((($2764)+(8))>>2)];
   var $2765=$1;
   var $2766=_mrb_class($2765, $recv38);
   HEAP32[(($c36)>>2)]=$2766;
   var $2767=$1;
   var $2768=$mid39;
   var $2769=_mrb_method_search_vm($2767, $c36, $2768);
   $m35=$2769;
   var $2770=$m35;
   var $2771=(($2770)|(0))!=0;
   if ($2771) { label = 276; break; } else { label = 272; break; }
  case 272: 
   var $2773=$mid39;
   _mrb_symbol_value141($sym40, $2773);
   var $2774=$1;
   var $2775=_mrb_intern2($2774, ((96784)|0), 14);
   $mid39=$2775;
   var $2776=$1;
   var $2777=$mid39;
   var $2778=_mrb_method_search_vm($2776, $c36, $2777);
   $m35=$2778;
   var $2779=$n34;
   var $2780=(($2779)|(0))==127;
   if ($2780) { label = 273; break; } else { label = 274; break; }
  case 273: 
   var $2782=$1;
   var $2783=$a33;
   var $2784=((($2783)+(1))|0);
   var $2785=$regs;
   var $2786=(($2785+((($2784)*(12))&-1))|0);
   _mrb_ary_unshift($25, $2782, $2786, $sym40);
   label = 275; break;
  case 274: 
   var $2788=$regs;
   var $2789=$a33;
   var $2790=(($2788+((($2789)*(12))&-1))|0);
   var $2791=(($2790+24)|0);
   var $2792=$regs;
   var $2793=$a33;
   var $2794=(($2792+((($2793)*(12))&-1))|0);
   var $2795=(($2794+12)|0);
   var $2796=$n34;
   var $2797=((($2796)+(1))|0);
   $n34=$2797;
   _value_move($2791, $2795, $2797);
   var $2798=$a33;
   var $2799=((($2798)+(1))|0);
   var $2800=$regs;
   var $2801=(($2800+((($2799)*(12))&-1))|0);
   var $2802=$2801;
   var $2803=$sym40;
   assert(12 % 1 === 0);HEAP32[(($2802)>>2)]=HEAP32[(($2803)>>2)];HEAP32[((($2802)+(4))>>2)]=HEAP32[((($2803)+(4))>>2)];HEAP32[((($2802)+(8))>>2)]=HEAP32[((($2803)+(8))>>2)];
   label = 275; break;
  case 275: 
   label = 276; break;
  case 276: 
   var $2806=$1;
   var $2807=(($2806+8)|0);
   var $2808=HEAP32[(($2807)>>2)];
   var $2809=(($2808+16)|0);
   var $2810=HEAP32[(($2809)>>2)];
   $ci37=$2810;
   var $2811=$mid39;
   var $2812=$ci37;
   var $2813=(($2812)|0);
   HEAP16[(($2813)>>1)]=$2811;
   var $2814=$m35;
   var $2815=(($2814+16)|0);
   var $2816=HEAP32[(($2815)>>2)];
   var $2817=$ci37;
   var $2818=(($2817+28)|0);
   HEAP32[(($2818)>>2)]=$2816;
   var $2819=$n34;
   var $2820=(($2819)|(0))==127;
   if ($2820) { label = 277; break; } else { label = 278; break; }
  case 277: 
   var $2822=$ci37;
   var $2823=(($2822+16)|0);
   HEAP32[(($2823)>>2)]=-1;
   label = 279; break;
  case 278: 
   var $2825=$n34;
   var $2826=$ci37;
   var $2827=(($2826+16)|0);
   HEAP32[(($2827)>>2)]=$2825;
   label = 279; break;
  case 279: 
   var $2829=$1;
   var $2830=(($2829+8)|0);
   var $2831=HEAP32[(($2830)>>2)];
   var $2832=(($2831+4)|0);
   var $2833=HEAP32[(($2832)>>2)];
   var $2834=$a33;
   var $2835=$regs;
   var $2836=(($2835+((($2834)*(12))&-1))|0);
   var $2837=$ci37;
   var $2838=(($2837+16)|0);
   var $2839=HEAP32[(($2838)>>2)];
   var $2840=((($2839)+(1))|0);
   _value_move($2833, $2836, $2840);
   var $2841=$m35;
   var $2842=$2841;
   var $2843=HEAP32[(($2842)>>2)];
   var $2844=$2843 >>> 11;
   var $2845=$2844 & 2097151;
   var $2846=$2845 & 128;
   var $2847=(($2846)|(0))!=0;
   if ($2847) { label = 280; break; } else { label = 281; break; }
  case 280: 
   var $2849=$1;
   var $2850=(($2849+8)|0);
   var $2851=HEAP32[(($2850)>>2)];
   var $2852=(($2851+4)|0);
   var $2853=HEAP32[(($2852)>>2)];
   var $2854=(($2853)|0);
   var $2855=$m35;
   var $2856=(($2855+12)|0);
   var $2857=$2856;
   var $2858=HEAP32[(($2857)>>2)];
   var $2859=$1;
   FUNCTION_TABLE[$2858]($26, $2859, $recv38);
   var $2860=$2854;
   var $2861=$26;
   assert(12 % 1 === 0);HEAP32[(($2860)>>2)]=HEAP32[(($2861)>>2)];HEAP32[((($2860)+(4))>>2)]=HEAP32[((($2861)+(4))>>2)];HEAP32[((($2860)+(8))>>2)]=HEAP32[((($2861)+(8))>>2)];
   var $2862=$1;
   var $2863=$ai;
   _mrb_gc_arena_restore($2862, $2863);
   label = 219; break;
  case 281: 
   var $2865=$m35;
   var $2866=(($2865+12)|0);
   var $2867=$2866;
   var $2868=HEAP32[(($2867)>>2)];
   $irep=$2868;
   var $2869=$irep;
   var $2870=(($2869+16)|0);
   var $2871=HEAP32[(($2870)>>2)];
   $pool=$2871;
   var $2872=$irep;
   var $2873=(($2872+20)|0);
   var $2874=HEAP32[(($2873)>>2)];
   $syms=$2874;
   var $2875=$ci37;
   var $2876=(($2875+16)|0);
   var $2877=HEAP32[(($2876)>>2)];
   var $2878=(($2877)|(0)) < 0;
   if ($2878) { label = 282; break; } else { label = 286; break; }
  case 282: 
   var $2880=$1;
   var $2881=$irep;
   var $2882=(($2881+6)|0);
   var $2883=HEAP16[(($2882)>>1)];
   var $2884=(($2883)&(65535));
   var $2885=(($2884)|(0)) < 3;
   if ($2885) { label = 283; break; } else { label = 284; break; }
  case 283: 
   var $2893 = 3;label = 285; break;
  case 284: 
   var $2888=$irep;
   var $2889=(($2888+6)|0);
   var $2890=HEAP16[(($2889)>>1)];
   var $2891=(($2890)&(65535));
   var $2893 = $2891;label = 285; break;
  case 285: 
   var $2893;
   _stack_extend($2880, $2893, 3);
   label = 287; break;
  case 286: 
   var $2895=$1;
   var $2896=$irep;
   var $2897=(($2896+6)|0);
   var $2898=HEAP16[(($2897)>>1)];
   var $2899=(($2898)&(65535));
   var $2900=$ci37;
   var $2901=(($2900+16)|0);
   var $2902=HEAP32[(($2901)>>2)];
   var $2903=((($2902)+(2))|0);
   _stack_extend($2895, $2899, $2903);
   label = 287; break;
  case 287: 
   var $2905=$1;
   var $2906=(($2905+8)|0);
   var $2907=HEAP32[(($2906)>>2)];
   var $2908=(($2907+4)|0);
   var $2909=HEAP32[(($2908)>>2)];
   $regs=$2909;
   var $2910=$irep;
   var $2911=(($2910+12)|0);
   var $2912=HEAP32[(($2911)>>2)];
   $pc=$2912;
   label = 288; break;
  case 288: 
   var $2914=$pc;
   var $2915=HEAP32[(($2914)>>2)];
   $i=$2915;
   var $2916=$i;
   var $2917=$2916 & 127;
   var $2918=((74668+($2917<<2))|0);
   var $2919=HEAP32[(($2918)>>2)];
   var $5866 = $2919;label = 709; break;
  case 289: 
   var $2921=$i;
   var $2922=$2921 >>> 23;
   var $2923=$2922 & 511;
   $a41=$2923;
   var $2924=$i;
   var $2925=$2924 >>> 7;
   var $2926=$2925 & 65535;
   $bx42=$2926;
   var $2927=$bx42;
   var $2928=$2927 >> 10;
   var $2929=$2928 & 63;
   $m143=$2929;
   var $2930=$bx42;
   var $2931=$2930 >> 9;
   var $2932=$2931 & 1;
   $r44=$2932;
   var $2933=$bx42;
   var $2934=$2933 >> 4;
   var $2935=$2934 & 31;
   $m245=$2935;
   var $2936=$bx42;
   var $2937=$2936 >> 0;
   var $2938=$2937 & 15;
   $lv46=$2938;
   var $2939=$lv46;
   var $2940=(($2939)|(0))==0;
   if ($2940) { label = 290; break; } else { label = 291; break; }
  case 290: 
   var $2942=$regs;
   var $2943=(($2942+12)|0);
   $stack47=$2943;
   label = 294; break;
  case 291: 
   var $2945=$1;
   var $2946=$lv46;
   var $2947=((($2946)-(1))|0);
   var $2948=_uvenv($2945, $2947);
   $e48=$2948;
   var $2949=$e48;
   var $2950=(($2949)|(0))!=0;
   if ($2950) { label = 293; break; } else { label = 292; break; }
  case 292: 
   var $2952=$1;
   _localjump_error($2952, 2);
   label = 222; break;
  case 293: 
   var $2954=$e48;
   var $2955=(($2954+12)|0);
   var $2956=HEAP32[(($2955)>>2)];
   var $2957=(($2956+12)|0);
   $stack47=$2957;
   label = 294; break;
  case 294: 
   var $2959=$a41;
   var $2960=$regs;
   var $2961=(($2960+((($2959)*(12))&-1))|0);
   var $2962=$m143;
   var $2963=$r44;
   var $2964=((($2962)+($2963))|0);
   var $2965=$m245;
   var $2966=((($2964)+($2965))|0);
   var $2967=$stack47;
   var $2968=(($2967+((($2966)*(12))&-1))|0);
   var $2969=$2961;
   var $2970=$2968;
   assert(12 % 1 === 0);HEAP32[(($2969)>>2)]=HEAP32[(($2970)>>2)];HEAP32[((($2969)+(4))>>2)]=HEAP32[((($2970)+(4))>>2)];HEAP32[((($2969)+(8))>>2)]=HEAP32[((($2970)+(8))>>2)];
   var $2971=$pc;
   var $2972=(($2971+4)|0);
   $pc=$2972;
   var $2973=HEAP32[(($2972)>>2)];
   $i=$2973;
   var $2974=$i;
   var $2975=$2974 & 127;
   var $2976=((74668+($2975<<2))|0);
   var $2977=HEAP32[(($2976)>>2)];
   var $5866 = $2977;label = 709; break;
  case 295: 
   var $2979=$i;
   var $2980=$2979 >>> 23;
   var $2981=$2980 & 511;
   $a49=$2981;
   var $2982=$a49;
   var $2983=$regs;
   var $2984=(($2983+((($2982)*(12))&-1))|0);
   var $2985=(($2984+8)|0);
   var $2986=HEAP32[(($2985)>>2)];
   var $2987=(($2986) & 65535);
   var $2988=(($2987)&(65535));
   var $2989=$2988 << 8;
   var $2990=$a49;
   var $2991=((($2990)+(1))|0);
   var $2992=$regs;
   var $2993=(($2992+((($2991)*(12))&-1))|0);
   var $2994=(($2993+8)|0);
   var $2995=HEAP32[(($2994)>>2)];
   var $2996=(($2995) & 65535);
   var $2997=(($2996)&(65535));
   var $2998=$2997 & 255;
   var $2999=$2989 | $2998;
   if ((($2999)|(0))==771) {
    label = 296; break;
   }
   else if ((($2999)|(0))==774) {
    label = 304; break;
   }
   else if ((($2999)|(0))==1539) {
    label = 307; break;
   }
   else if ((($2999)|(0))==1542) {
    label = 310; break;
   }
   else if ((($2999)|(0))==4112) {
    label = 313; break;
   }
   else {
   label = 314; break;
   }
  case 296: 
   var $3001=$regs;
   var $3002=$a49;
   var $3003=(($3001+((($3002)*(12))&-1))|0);
   $regs_a50=$3003;
   var $3004=$regs_a50;
   var $3005=(($3004)|0);
   var $3006=(($3005)|0);
   var $3007=$3006;
   var $3008=HEAP32[(($3007)>>2)];
   $x=$3008;
   var $3009=$regs_a50;
   var $3010=(($3009+12)|0);
   var $3011=(($3010)|0);
   var $3012=$3011;
   var $3013=HEAP32[(($3012)>>2)];
   $y=$3013;
   var $3014=$x;
   var $3015=$y;
   var $3016=((($3014)+($3015))|0);
   $z=$3016;
   var $3017=$x;
   var $3018=(($3017)|(0)) < 0;
   var $3019=(($3018)&(1));
   var $3020=$z;
   var $3021=(($3020)|(0)) < 0;
   var $3022=(($3021)&(1));
   var $3023=(($3019)|(0))!=(($3022)|(0));
   if ($3023) { label = 297; break; } else { label = 301; break; }
  case 297: 
   var $3025=$x;
   var $3026=(($3025)|(0)) < 0;
   var $3027=(($3026)&(1));
   var $3028=$y;
   var $3029=(($3028)|(0)) < 0;
   var $3030=(($3029)&(1));
   var $3031=$3027 ^ $3030;
   var $3032=(($3031)|(0))==0;
   if ($3032) { label = 298; break; } else { label = 301; break; }
  case 298: 
   label = 299; break;
  case 299: 
   var $3035=$regs_a50;
   var $3036=(($3035)|0);
   var $3037=(($3036+8)|0);
   HEAP32[(($3037)>>2)]=6;
   var $3038=$x;
   var $3039=(($3038)|(0));
   var $3040=$y;
   var $3041=(($3040)|(0));
   var $3042=($3039)+($3041);
   var $3043=$regs_a50;
   var $3044=(($3043)|0);
   var $3045=(($3044)|0);
   var $3046=$3045;
   (HEAPF64[(tempDoublePtr)>>3]=$3042,HEAP32[(($3046)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3046)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 300; break;
  case 300: 
   label = 315; break;
  case 301: 
   label = 302; break;
  case 302: 
   var $3050=$a49;
   var $3051=$regs;
   var $3052=(($3051+((($3050)*(12))&-1))|0);
   var $3053=(($3052+8)|0);
   HEAP32[(($3053)>>2)]=3;
   var $3054=$z;
   var $3055=$a49;
   var $3056=$regs;
   var $3057=(($3056+((($3055)*(12))&-1))|0);
   var $3058=(($3057)|0);
   var $3059=$3058;
   HEAP32[(($3059)>>2)]=$3054;
   label = 303; break;
  case 303: 
   label = 315; break;
  case 304: 
   var $3062=$a49;
   var $3063=$regs;
   var $3064=(($3063+((($3062)*(12))&-1))|0);
   var $3065=(($3064)|0);
   var $3066=$3065;
   var $3067=HEAP32[(($3066)>>2)];
   $x51=$3067;
   var $3068=$a49;
   var $3069=((($3068)+(1))|0);
   var $3070=$regs;
   var $3071=(($3070+((($3069)*(12))&-1))|0);
   var $3072=(($3071)|0);
   var $3073=$3072;
   var $3074=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3073)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3073)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   $y52=$3074;
   label = 305; break;
  case 305: 
   var $3076=$a49;
   var $3077=$regs;
   var $3078=(($3077+((($3076)*(12))&-1))|0);
   var $3079=(($3078+8)|0);
   HEAP32[(($3079)>>2)]=6;
   var $3080=$x51;
   var $3081=(($3080)|(0));
   var $3082=$y52;
   var $3083=($3081)+($3082);
   var $3084=$a49;
   var $3085=$regs;
   var $3086=(($3085+((($3084)*(12))&-1))|0);
   var $3087=(($3086)|0);
   var $3088=$3087;
   (HEAPF64[(tempDoublePtr)>>3]=$3083,HEAP32[(($3088)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3088)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 306; break;
  case 306: 
   label = 315; break;
  case 307: 
   label = 308; break;
  case 308: 
   var $3092=$a49;
   var $3093=$regs;
   var $3094=(($3093+((($3092)*(12))&-1))|0);
   var $3095=(($3094)|0);
   var $3096=$3095;
   var $3097=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3096)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3096)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $3098=$a49;
   var $3099=((($3098)+(1))|0);
   var $3100=$regs;
   var $3101=(($3100+((($3099)*(12))&-1))|0);
   var $3102=(($3101)|0);
   var $3103=$3102;
   var $3104=HEAP32[(($3103)>>2)];
   var $3105=(($3104)|(0));
   var $3106=($3097)+($3105);
   var $3107=$a49;
   var $3108=$regs;
   var $3109=(($3108+((($3107)*(12))&-1))|0);
   var $3110=(($3109)|0);
   var $3111=$3110;
   (HEAPF64[(tempDoublePtr)>>3]=$3106,HEAP32[(($3111)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3111)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 309; break;
  case 309: 
   label = 315; break;
  case 310: 
   label = 311; break;
  case 311: 
   var $3115=$a49;
   var $3116=$regs;
   var $3117=(($3116+((($3115)*(12))&-1))|0);
   var $3118=(($3117)|0);
   var $3119=$3118;
   var $3120=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3119)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3119)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $3121=$a49;
   var $3122=((($3121)+(1))|0);
   var $3123=$regs;
   var $3124=(($3123+((($3122)*(12))&-1))|0);
   var $3125=(($3124)|0);
   var $3126=$3125;
   var $3127=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3126)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3126)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $3128=($3120)+($3127);
   var $3129=$a49;
   var $3130=$regs;
   var $3131=(($3130+((($3129)*(12))&-1))|0);
   var $3132=(($3131)|0);
   var $3133=$3132;
   (HEAPF64[(tempDoublePtr)>>3]=$3128,HEAP32[(($3133)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3133)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 312; break;
  case 312: 
   label = 315; break;
  case 313: 
   var $3136=$a49;
   var $3137=$regs;
   var $3138=(($3137+((($3136)*(12))&-1))|0);
   var $3139=$1;
   var $3140=$a49;
   var $3141=$regs;
   var $3142=(($3141+((($3140)*(12))&-1))|0);
   var $3143=$a49;
   var $3144=((($3143)+(1))|0);
   var $3145=$regs;
   var $3146=(($3145+((($3144)*(12))&-1))|0);
   _mrb_str_plus($27, $3139, $3142, $3146);
   var $3147=$3138;
   var $3148=$27;
   assert(12 % 1 === 0);HEAP32[(($3147)>>2)]=HEAP32[(($3148)>>2)];HEAP32[((($3147)+(4))>>2)]=HEAP32[((($3148)+(4))>>2)];HEAP32[((($3147)+(8))>>2)]=HEAP32[((($3148)+(8))>>2)];
   label = 315; break;
  case 314: 
   label = 78; break;
  case 315: 
   var $3151=$1;
   var $3152=$ai;
   _mrb_gc_arena_restore($3151, $3152);
   var $3153=$pc;
   var $3154=(($3153+4)|0);
   $pc=$3154;
   var $3155=HEAP32[(($3154)>>2)];
   $i=$3155;
   var $3156=$i;
   var $3157=$3156 & 127;
   var $3158=((74668+($3157<<2))|0);
   var $3159=HEAP32[(($3158)>>2)];
   var $5866 = $3159;label = 709; break;
  case 316: 
   var $3161=$i;
   var $3162=$3161 >>> 23;
   var $3163=$3162 & 511;
   $a53=$3163;
   var $3164=$a53;
   var $3165=$regs;
   var $3166=(($3165+((($3164)*(12))&-1))|0);
   var $3167=(($3166+8)|0);
   var $3168=HEAP32[(($3167)>>2)];
   var $3169=(($3168) & 65535);
   var $3170=(($3169)&(65535));
   var $3171=$3170 << 8;
   var $3172=$a53;
   var $3173=((($3172)+(1))|0);
   var $3174=$regs;
   var $3175=(($3174+((($3173)*(12))&-1))|0);
   var $3176=(($3175+8)|0);
   var $3177=HEAP32[(($3176)>>2)];
   var $3178=(($3177) & 65535);
   var $3179=(($3178)&(65535));
   var $3180=$3179 & 255;
   var $3181=$3171 | $3180;
   if ((($3181)|(0))==771) {
    label = 317; break;
   }
   else if ((($3181)|(0))==774) {
    label = 325; break;
   }
   else if ((($3181)|(0))==1539) {
    label = 328; break;
   }
   else if ((($3181)|(0))==1542) {
    label = 331; break;
   }
   else {
   label = 334; break;
   }
  case 317: 
   var $3183=$a53;
   var $3184=$regs;
   var $3185=(($3184+((($3183)*(12))&-1))|0);
   var $3186=(($3185)|0);
   var $3187=$3186;
   var $3188=HEAP32[(($3187)>>2)];
   $x54=$3188;
   var $3189=$a53;
   var $3190=((($3189)+(1))|0);
   var $3191=$regs;
   var $3192=(($3191+((($3190)*(12))&-1))|0);
   var $3193=(($3192)|0);
   var $3194=$3193;
   var $3195=HEAP32[(($3194)>>2)];
   $y55=$3195;
   var $3196=$x54;
   var $3197=$y55;
   var $3198=((($3196)-($3197))|0);
   $z56=$3198;
   var $3199=$x54;
   var $3200=(($3199)|(0)) < 0;
   var $3201=(($3200)&(1));
   var $3202=$y55;
   var $3203=(($3202)|(0)) < 0;
   var $3204=(($3203)&(1));
   var $3205=$3201 ^ $3204;
   var $3206=(($3205)|(0))!=0;
   if ($3206) { label = 318; break; } else { label = 322; break; }
  case 318: 
   var $3208=$x54;
   var $3209=(($3208)|(0)) < 0;
   var $3210=(($3209)&(1));
   var $3211=$z56;
   var $3212=(($3211)|(0)) < 0;
   var $3213=(($3212)&(1));
   var $3214=(($3210)|(0))!=(($3213)|(0));
   if ($3214) { label = 319; break; } else { label = 322; break; }
  case 319: 
   label = 320; break;
  case 320: 
   var $3217=$a53;
   var $3218=$regs;
   var $3219=(($3218+((($3217)*(12))&-1))|0);
   var $3220=(($3219+8)|0);
   HEAP32[(($3220)>>2)]=6;
   var $3221=$x54;
   var $3222=(($3221)|(0));
   var $3223=$y55;
   var $3224=(($3223)|(0));
   var $3225=($3222)-($3224);
   var $3226=$a53;
   var $3227=$regs;
   var $3228=(($3227+((($3226)*(12))&-1))|0);
   var $3229=(($3228)|0);
   var $3230=$3229;
   (HEAPF64[(tempDoublePtr)>>3]=$3225,HEAP32[(($3230)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3230)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 321; break;
  case 321: 
   label = 335; break;
  case 322: 
   label = 323; break;
  case 323: 
   var $3234=$a53;
   var $3235=$regs;
   var $3236=(($3235+((($3234)*(12))&-1))|0);
   var $3237=(($3236+8)|0);
   HEAP32[(($3237)>>2)]=3;
   var $3238=$z56;
   var $3239=$a53;
   var $3240=$regs;
   var $3241=(($3240+((($3239)*(12))&-1))|0);
   var $3242=(($3241)|0);
   var $3243=$3242;
   HEAP32[(($3243)>>2)]=$3238;
   label = 324; break;
  case 324: 
   label = 335; break;
  case 325: 
   var $3246=$a53;
   var $3247=$regs;
   var $3248=(($3247+((($3246)*(12))&-1))|0);
   var $3249=(($3248)|0);
   var $3250=$3249;
   var $3251=HEAP32[(($3250)>>2)];
   $x57=$3251;
   var $3252=$a53;
   var $3253=((($3252)+(1))|0);
   var $3254=$regs;
   var $3255=(($3254+((($3253)*(12))&-1))|0);
   var $3256=(($3255)|0);
   var $3257=$3256;
   var $3258=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3257)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3257)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   $y58=$3258;
   label = 326; break;
  case 326: 
   var $3260=$a53;
   var $3261=$regs;
   var $3262=(($3261+((($3260)*(12))&-1))|0);
   var $3263=(($3262+8)|0);
   HEAP32[(($3263)>>2)]=6;
   var $3264=$x57;
   var $3265=(($3264)|(0));
   var $3266=$y58;
   var $3267=($3265)-($3266);
   var $3268=$a53;
   var $3269=$regs;
   var $3270=(($3269+((($3268)*(12))&-1))|0);
   var $3271=(($3270)|0);
   var $3272=$3271;
   (HEAPF64[(tempDoublePtr)>>3]=$3267,HEAP32[(($3272)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3272)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 327; break;
  case 327: 
   label = 335; break;
  case 328: 
   label = 329; break;
  case 329: 
   var $3276=$a53;
   var $3277=$regs;
   var $3278=(($3277+((($3276)*(12))&-1))|0);
   var $3279=(($3278)|0);
   var $3280=$3279;
   var $3281=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3280)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3280)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $3282=$a53;
   var $3283=((($3282)+(1))|0);
   var $3284=$regs;
   var $3285=(($3284+((($3283)*(12))&-1))|0);
   var $3286=(($3285)|0);
   var $3287=$3286;
   var $3288=HEAP32[(($3287)>>2)];
   var $3289=(($3288)|(0));
   var $3290=($3281)-($3289);
   var $3291=$a53;
   var $3292=$regs;
   var $3293=(($3292+((($3291)*(12))&-1))|0);
   var $3294=(($3293)|0);
   var $3295=$3294;
   (HEAPF64[(tempDoublePtr)>>3]=$3290,HEAP32[(($3295)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3295)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 330; break;
  case 330: 
   label = 335; break;
  case 331: 
   label = 332; break;
  case 332: 
   var $3299=$a53;
   var $3300=$regs;
   var $3301=(($3300+((($3299)*(12))&-1))|0);
   var $3302=(($3301)|0);
   var $3303=$3302;
   var $3304=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3303)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3303)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $3305=$a53;
   var $3306=((($3305)+(1))|0);
   var $3307=$regs;
   var $3308=(($3307+((($3306)*(12))&-1))|0);
   var $3309=(($3308)|0);
   var $3310=$3309;
   var $3311=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3310)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3310)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $3312=($3304)-($3311);
   var $3313=$a53;
   var $3314=$regs;
   var $3315=(($3314+((($3313)*(12))&-1))|0);
   var $3316=(($3315)|0);
   var $3317=$3316;
   (HEAPF64[(tempDoublePtr)>>3]=$3312,HEAP32[(($3317)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3317)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 333; break;
  case 333: 
   label = 335; break;
  case 334: 
   label = 78; break;
  case 335: 
   var $3321=$pc;
   var $3322=(($3321+4)|0);
   $pc=$3322;
   var $3323=HEAP32[(($3322)>>2)];
   $i=$3323;
   var $3324=$i;
   var $3325=$3324 & 127;
   var $3326=((74668+($3325<<2))|0);
   var $3327=HEAP32[(($3326)>>2)];
   var $5866 = $3327;label = 709; break;
  case 336: 
   var $3329=$i;
   var $3330=$3329 >>> 23;
   var $3331=$3330 & 511;
   $a59=$3331;
   var $3332=$a59;
   var $3333=$regs;
   var $3334=(($3333+((($3332)*(12))&-1))|0);
   var $3335=(($3334+8)|0);
   var $3336=HEAP32[(($3335)>>2)];
   var $3337=(($3336) & 65535);
   var $3338=(($3337)&(65535));
   var $3339=$3338 << 8;
   var $3340=$a59;
   var $3341=((($3340)+(1))|0);
   var $3342=$regs;
   var $3343=(($3342+((($3341)*(12))&-1))|0);
   var $3344=(($3343+8)|0);
   var $3345=HEAP32[(($3344)>>2)];
   var $3346=(($3345) & 65535);
   var $3347=(($3346)&(65535));
   var $3348=$3347 & 255;
   var $3349=$3339 | $3348;
   if ((($3349)|(0))==771) {
    label = 337; break;
   }
   else if ((($3349)|(0))==774) {
    label = 346; break;
   }
   else if ((($3349)|(0))==1539) {
    label = 349; break;
   }
   else if ((($3349)|(0))==1542) {
    label = 352; break;
   }
   else {
   label = 355; break;
   }
  case 337: 
   var $3351=$a59;
   var $3352=$regs;
   var $3353=(($3352+((($3351)*(12))&-1))|0);
   var $3354=(($3353)|0);
   var $3355=$3354;
   var $3356=HEAP32[(($3355)>>2)];
   $x60=$3356;
   var $3357=$a59;
   var $3358=((($3357)+(1))|0);
   var $3359=$regs;
   var $3360=(($3359+((($3358)*(12))&-1))|0);
   var $3361=(($3360)|0);
   var $3362=$3361;
   var $3363=HEAP32[(($3362)>>2)];
   $y61=$3363;
   var $3364=$x60;
   var $3365=$y61;
   var $3366=(Math.imul($3364,$3365)|0);
   $z62=$3366;
   var $3367=$x60;
   var $3368=(($3367)|(0))!=0;
   if ($3368) { label = 338; break; } else { label = 342; break; }
  case 338: 
   var $3370=$z62;
   var $3371=$x60;
   var $3372=((((($3370)|(0)))/((($3371)|(0))))&-1);
   var $3373=$y61;
   var $3374=(($3372)|(0))!=(($3373)|(0));
   if ($3374) { label = 339; break; } else { label = 342; break; }
  case 339: 
   label = 340; break;
  case 340: 
   var $3377=$a59;
   var $3378=$regs;
   var $3379=(($3378+((($3377)*(12))&-1))|0);
   var $3380=(($3379+8)|0);
   HEAP32[(($3380)>>2)]=6;
   var $3381=$x60;
   var $3382=(($3381)|(0));
   var $3383=$y61;
   var $3384=(($3383)|(0));
   var $3385=($3382)*($3384);
   var $3386=$a59;
   var $3387=$regs;
   var $3388=(($3387+((($3386)*(12))&-1))|0);
   var $3389=(($3388)|0);
   var $3390=$3389;
   (HEAPF64[(tempDoublePtr)>>3]=$3385,HEAP32[(($3390)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3390)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 341; break;
  case 341: 
   label = 345; break;
  case 342: 
   label = 343; break;
  case 343: 
   var $3394=$a59;
   var $3395=$regs;
   var $3396=(($3395+((($3394)*(12))&-1))|0);
   var $3397=(($3396+8)|0);
   HEAP32[(($3397)>>2)]=3;
   var $3398=$z62;
   var $3399=$a59;
   var $3400=$regs;
   var $3401=(($3400+((($3399)*(12))&-1))|0);
   var $3402=(($3401)|0);
   var $3403=$3402;
   HEAP32[(($3403)>>2)]=$3398;
   label = 344; break;
  case 344: 
   label = 345; break;
  case 345: 
   label = 356; break;
  case 346: 
   var $3407=$a59;
   var $3408=$regs;
   var $3409=(($3408+((($3407)*(12))&-1))|0);
   var $3410=(($3409)|0);
   var $3411=$3410;
   var $3412=HEAP32[(($3411)>>2)];
   $x63=$3412;
   var $3413=$a59;
   var $3414=((($3413)+(1))|0);
   var $3415=$regs;
   var $3416=(($3415+((($3414)*(12))&-1))|0);
   var $3417=(($3416)|0);
   var $3418=$3417;
   var $3419=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3418)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3418)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   $y64=$3419;
   label = 347; break;
  case 347: 
   var $3421=$a59;
   var $3422=$regs;
   var $3423=(($3422+((($3421)*(12))&-1))|0);
   var $3424=(($3423+8)|0);
   HEAP32[(($3424)>>2)]=6;
   var $3425=$x63;
   var $3426=(($3425)|(0));
   var $3427=$y64;
   var $3428=($3426)*($3427);
   var $3429=$a59;
   var $3430=$regs;
   var $3431=(($3430+((($3429)*(12))&-1))|0);
   var $3432=(($3431)|0);
   var $3433=$3432;
   (HEAPF64[(tempDoublePtr)>>3]=$3428,HEAP32[(($3433)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3433)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 348; break;
  case 348: 
   label = 356; break;
  case 349: 
   label = 350; break;
  case 350: 
   var $3437=$a59;
   var $3438=$regs;
   var $3439=(($3438+((($3437)*(12))&-1))|0);
   var $3440=(($3439)|0);
   var $3441=$3440;
   var $3442=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3441)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3441)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $3443=$a59;
   var $3444=((($3443)+(1))|0);
   var $3445=$regs;
   var $3446=(($3445+((($3444)*(12))&-1))|0);
   var $3447=(($3446)|0);
   var $3448=$3447;
   var $3449=HEAP32[(($3448)>>2)];
   var $3450=(($3449)|(0));
   var $3451=($3442)*($3450);
   var $3452=$a59;
   var $3453=$regs;
   var $3454=(($3453+((($3452)*(12))&-1))|0);
   var $3455=(($3454)|0);
   var $3456=$3455;
   (HEAPF64[(tempDoublePtr)>>3]=$3451,HEAP32[(($3456)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3456)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 351; break;
  case 351: 
   label = 356; break;
  case 352: 
   label = 353; break;
  case 353: 
   var $3460=$a59;
   var $3461=$regs;
   var $3462=(($3461+((($3460)*(12))&-1))|0);
   var $3463=(($3462)|0);
   var $3464=$3463;
   var $3465=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3464)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3464)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $3466=$a59;
   var $3467=((($3466)+(1))|0);
   var $3468=$regs;
   var $3469=(($3468+((($3467)*(12))&-1))|0);
   var $3470=(($3469)|0);
   var $3471=$3470;
   var $3472=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3471)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3471)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $3473=($3465)*($3472);
   var $3474=$a59;
   var $3475=$regs;
   var $3476=(($3475+((($3474)*(12))&-1))|0);
   var $3477=(($3476)|0);
   var $3478=$3477;
   (HEAPF64[(tempDoublePtr)>>3]=$3473,HEAP32[(($3478)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3478)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 354; break;
  case 354: 
   label = 356; break;
  case 355: 
   label = 78; break;
  case 356: 
   var $3482=$pc;
   var $3483=(($3482+4)|0);
   $pc=$3483;
   var $3484=HEAP32[(($3483)>>2)];
   $i=$3484;
   var $3485=$i;
   var $3486=$3485 & 127;
   var $3487=((74668+($3486<<2))|0);
   var $3488=HEAP32[(($3487)>>2)];
   var $5866 = $3488;label = 709; break;
  case 357: 
   var $3490=$i;
   var $3491=$3490 >>> 23;
   var $3492=$3491 & 511;
   $a65=$3492;
   var $3493=$a65;
   var $3494=$regs;
   var $3495=(($3494+((($3493)*(12))&-1))|0);
   var $3496=(($3495+8)|0);
   var $3497=HEAP32[(($3496)>>2)];
   var $3498=(($3497) & 65535);
   var $3499=(($3498)&(65535));
   var $3500=$3499 << 8;
   var $3501=$a65;
   var $3502=((($3501)+(1))|0);
   var $3503=$regs;
   var $3504=(($3503+((($3502)*(12))&-1))|0);
   var $3505=(($3504+8)|0);
   var $3506=HEAP32[(($3505)>>2)];
   var $3507=(($3506) & 65535);
   var $3508=(($3507)&(65535));
   var $3509=$3508 & 255;
   var $3510=$3500 | $3509;
   if ((($3510)|(0))==771) {
    label = 358; break;
   }
   else if ((($3510)|(0))==774) {
    label = 361; break;
   }
   else if ((($3510)|(0))==1539) {
    label = 364; break;
   }
   else if ((($3510)|(0))==1542) {
    label = 367; break;
   }
   else {
   label = 370; break;
   }
  case 358: 
   var $3512=$a65;
   var $3513=$regs;
   var $3514=(($3513+((($3512)*(12))&-1))|0);
   var $3515=(($3514)|0);
   var $3516=$3515;
   var $3517=HEAP32[(($3516)>>2)];
   $x66=$3517;
   var $3518=$a65;
   var $3519=((($3518)+(1))|0);
   var $3520=$regs;
   var $3521=(($3520+((($3519)*(12))&-1))|0);
   var $3522=(($3521)|0);
   var $3523=$3522;
   var $3524=HEAP32[(($3523)>>2)];
   $y67=$3524;
   label = 359; break;
  case 359: 
   var $3526=$a65;
   var $3527=$regs;
   var $3528=(($3527+((($3526)*(12))&-1))|0);
   var $3529=(($3528+8)|0);
   HEAP32[(($3529)>>2)]=6;
   var $3530=$x66;
   var $3531=(($3530)|(0));
   var $3532=$y67;
   var $3533=(($3532)|(0));
   var $3534=($3531)/($3533);
   var $3535=$a65;
   var $3536=$regs;
   var $3537=(($3536+((($3535)*(12))&-1))|0);
   var $3538=(($3537)|0);
   var $3539=$3538;
   (HEAPF64[(tempDoublePtr)>>3]=$3534,HEAP32[(($3539)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3539)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 360; break;
  case 360: 
   label = 371; break;
  case 361: 
   var $3542=$a65;
   var $3543=$regs;
   var $3544=(($3543+((($3542)*(12))&-1))|0);
   var $3545=(($3544)|0);
   var $3546=$3545;
   var $3547=HEAP32[(($3546)>>2)];
   $x68=$3547;
   var $3548=$a65;
   var $3549=((($3548)+(1))|0);
   var $3550=$regs;
   var $3551=(($3550+((($3549)*(12))&-1))|0);
   var $3552=(($3551)|0);
   var $3553=$3552;
   var $3554=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3553)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3553)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   $y69=$3554;
   label = 362; break;
  case 362: 
   var $3556=$a65;
   var $3557=$regs;
   var $3558=(($3557+((($3556)*(12))&-1))|0);
   var $3559=(($3558+8)|0);
   HEAP32[(($3559)>>2)]=6;
   var $3560=$x68;
   var $3561=(($3560)|(0));
   var $3562=$y69;
   var $3563=($3561)/($3562);
   var $3564=$a65;
   var $3565=$regs;
   var $3566=(($3565+((($3564)*(12))&-1))|0);
   var $3567=(($3566)|0);
   var $3568=$3567;
   (HEAPF64[(tempDoublePtr)>>3]=$3563,HEAP32[(($3568)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3568)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 363; break;
  case 363: 
   label = 371; break;
  case 364: 
   label = 365; break;
  case 365: 
   var $3572=$a65;
   var $3573=$regs;
   var $3574=(($3573+((($3572)*(12))&-1))|0);
   var $3575=(($3574)|0);
   var $3576=$3575;
   var $3577=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3576)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3576)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $3578=$a65;
   var $3579=((($3578)+(1))|0);
   var $3580=$regs;
   var $3581=(($3580+((($3579)*(12))&-1))|0);
   var $3582=(($3581)|0);
   var $3583=$3582;
   var $3584=HEAP32[(($3583)>>2)];
   var $3585=(($3584)|(0));
   var $3586=($3577)/($3585);
   var $3587=$a65;
   var $3588=$regs;
   var $3589=(($3588+((($3587)*(12))&-1))|0);
   var $3590=(($3589)|0);
   var $3591=$3590;
   (HEAPF64[(tempDoublePtr)>>3]=$3586,HEAP32[(($3591)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3591)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 366; break;
  case 366: 
   label = 371; break;
  case 367: 
   label = 368; break;
  case 368: 
   var $3595=$a65;
   var $3596=$regs;
   var $3597=(($3596+((($3595)*(12))&-1))|0);
   var $3598=(($3597)|0);
   var $3599=$3598;
   var $3600=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3599)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3599)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $3601=$a65;
   var $3602=((($3601)+(1))|0);
   var $3603=$regs;
   var $3604=(($3603+((($3602)*(12))&-1))|0);
   var $3605=(($3604)|0);
   var $3606=$3605;
   var $3607=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3606)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3606)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $3608=($3600)/($3607);
   var $3609=$a65;
   var $3610=$regs;
   var $3611=(($3610+((($3609)*(12))&-1))|0);
   var $3612=(($3611)|0);
   var $3613=$3612;
   (HEAPF64[(tempDoublePtr)>>3]=$3608,HEAP32[(($3613)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3613)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 369; break;
  case 369: 
   label = 371; break;
  case 370: 
   label = 78; break;
  case 371: 
   var $3617=$pc;
   var $3618=(($3617+4)|0);
   $pc=$3618;
   var $3619=HEAP32[(($3618)>>2)];
   $i=$3619;
   var $3620=$i;
   var $3621=$3620 & 127;
   var $3622=((74668+($3621<<2))|0);
   var $3623=HEAP32[(($3622)>>2)];
   var $5866 = $3623;label = 709; break;
  case 372: 
   var $3625=$i;
   var $3626=$3625 >>> 23;
   var $3627=$3626 & 511;
   $a70=$3627;
   var $3628=$a70;
   var $3629=$regs;
   var $3630=(($3629+((($3628)*(12))&-1))|0);
   var $3631=(($3630+8)|0);
   var $3632=HEAP32[(($3631)>>2)];
   if ((($3632)|(0))==3) {
    label = 373; break;
   }
   else if ((($3632)|(0))==6) {
    label = 379; break;
   }
   else {
   label = 380; break;
   }
  case 373: 
   var $3634=$a70;
   var $3635=$regs;
   var $3636=(($3635+((($3634)*(12))&-1))|0);
   var $3637=(($3636)|0);
   var $3638=$3637;
   var $3639=HEAP32[(($3638)>>2)];
   $x71=$3639;
   var $3640=$i;
   var $3641=$3640 >>> 7;
   var $3642=$3641 & 127;
   $y72=$3642;
   var $3643=$x71;
   var $3644=$y72;
   var $3645=((($3643)+($3644))|0);
   $z73=$3645;
   var $3646=$x71;
   var $3647=(($3646)|(0)) < 0;
   var $3648=(($3647)&(1));
   var $3649=$y72;
   var $3650=(($3649)|(0)) < 0;
   var $3651=(($3650)&(1));
   var $3652=$3648 ^ $3651;
   var $3653=(($3652)|(0))==0;
   if ($3653) { label = 374; break; } else { label = 378; break; }
  case 374: 
   var $3655=$x71;
   var $3656=(($3655)|(0)) < 0;
   var $3657=(($3656)&(1));
   var $3658=$z73;
   var $3659=(($3658)|(0)) < 0;
   var $3660=(($3659)&(1));
   var $3661=(($3657)|(0))!=(($3660)|(0));
   if ($3661) { label = 375; break; } else { label = 378; break; }
  case 375: 
   label = 376; break;
  case 376: 
   var $3664=$a70;
   var $3665=$regs;
   var $3666=(($3665+((($3664)*(12))&-1))|0);
   var $3667=(($3666+8)|0);
   HEAP32[(($3667)>>2)]=6;
   var $3668=$x71;
   var $3669=(($3668)|(0));
   var $3670=$y72;
   var $3671=(($3670)|(0));
   var $3672=($3669)+($3671);
   var $3673=$a70;
   var $3674=$regs;
   var $3675=(($3674+((($3673)*(12))&-1))|0);
   var $3676=(($3675)|0);
   var $3677=$3676;
   (HEAPF64[(tempDoublePtr)>>3]=$3672,HEAP32[(($3677)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3677)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 377; break;
  case 377: 
   label = 383; break;
  case 378: 
   var $3680=$z73;
   var $3681=$a70;
   var $3682=$regs;
   var $3683=(($3682+((($3681)*(12))&-1))|0);
   var $3684=(($3683)|0);
   var $3685=$3684;
   HEAP32[(($3685)>>2)]=$3680;
   label = 383; break;
  case 379: 
   var $3687=$i;
   var $3688=$3687 >>> 7;
   var $3689=$3688 & 127;
   var $3690=(($3689)|(0));
   var $3691=$a70;
   var $3692=$regs;
   var $3693=(($3692+((($3691)*(12))&-1))|0);
   var $3694=(($3693)|0);
   var $3695=$3694;
   var $3696=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3695)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3695)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $3697=($3696)+($3690);
   (HEAPF64[(tempDoublePtr)>>3]=$3697,HEAP32[(($3695)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3695)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 383; break;
  case 380: 
   label = 381; break;
  case 381: 
   var $3700=$a70;
   var $3701=((($3700)+(1))|0);
   var $3702=$regs;
   var $3703=(($3702+((($3701)*(12))&-1))|0);
   var $3704=(($3703+8)|0);
   HEAP32[(($3704)>>2)]=3;
   var $3705=$i;
   var $3706=$3705 >>> 7;
   var $3707=$3706 & 127;
   var $3708=$a70;
   var $3709=((($3708)+(1))|0);
   var $3710=$regs;
   var $3711=(($3710+((($3709)*(12))&-1))|0);
   var $3712=(($3711)|0);
   var $3713=$3712;
   HEAP32[(($3713)>>2)]=$3707;
   label = 382; break;
  case 382: 
   var $3715=$a70;
   var $3716=$3715 & 511;
   var $3717=$3716 << 23;
   var $3718=32 | $3717;
   var $3719=$i;
   var $3720=$3719 >>> 14;
   var $3721=$3720 & 511;
   var $3722=$3721 & 511;
   var $3723=$3722 << 14;
   var $3724=$3718 | $3723;
   var $3725=$3724 | 128;
   $i=$3725;
   label = 78; break;
  case 383: 
   var $3727=$pc;
   var $3728=(($3727+4)|0);
   $pc=$3728;
   var $3729=HEAP32[(($3728)>>2)];
   $i=$3729;
   var $3730=$i;
   var $3731=$3730 & 127;
   var $3732=((74668+($3731<<2))|0);
   var $3733=HEAP32[(($3732)>>2)];
   var $5866 = $3733;label = 709; break;
  case 384: 
   var $3735=$i;
   var $3736=$3735 >>> 23;
   var $3737=$3736 & 511;
   $a74=$3737;
   var $3738=$regs;
   var $3739=$a74;
   var $3740=(($3738+((($3739)*(12))&-1))|0);
   $regs_a75=$3740;
   var $3741=$regs_a75;
   var $3742=(($3741)|0);
   var $3743=(($3742+8)|0);
   var $3744=HEAP32[(($3743)>>2)];
   if ((($3744)|(0))==3) {
    label = 385; break;
   }
   else if ((($3744)|(0))==6) {
    label = 392; break;
   }
   else {
   label = 393; break;
   }
  case 385: 
   var $3746=$regs_a75;
   var $3747=(($3746)|0);
   var $3748=(($3747)|0);
   var $3749=$3748;
   var $3750=HEAP32[(($3749)>>2)];
   $x76=$3750;
   var $3751=$i;
   var $3752=$3751 >>> 7;
   var $3753=$3752 & 127;
   $y77=$3753;
   var $3754=$x76;
   var $3755=$y77;
   var $3756=((($3754)-($3755))|0);
   $z78=$3756;
   var $3757=$x76;
   var $3758=(($3757)|(0)) < 0;
   var $3759=(($3758)&(1));
   var $3760=$z78;
   var $3761=(($3760)|(0)) < 0;
   var $3762=(($3761)&(1));
   var $3763=(($3759)|(0))!=(($3762)|(0));
   if ($3763) { label = 386; break; } else { label = 390; break; }
  case 386: 
   var $3765=$x76;
   var $3766=(($3765)|(0)) < 0;
   var $3767=(($3766)&(1));
   var $3768=$y77;
   var $3769=(($3768)|(0)) < 0;
   var $3770=(($3769)&(1));
   var $3771=$3767 ^ $3770;
   var $3772=(($3771)|(0))!=0;
   if ($3772) { label = 387; break; } else { label = 390; break; }
  case 387: 
   label = 388; break;
  case 388: 
   var $3775=$regs_a75;
   var $3776=(($3775)|0);
   var $3777=(($3776+8)|0);
   HEAP32[(($3777)>>2)]=6;
   var $3778=$x76;
   var $3779=(($3778)|(0));
   var $3780=$y77;
   var $3781=(($3780)|(0));
   var $3782=($3779)-($3781);
   var $3783=$regs_a75;
   var $3784=(($3783)|0);
   var $3785=(($3784)|0);
   var $3786=$3785;
   (HEAPF64[(tempDoublePtr)>>3]=$3782,HEAP32[(($3786)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3786)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 389; break;
  case 389: 
   label = 391; break;
  case 390: 
   var $3789=$z78;
   var $3790=$regs_a75;
   var $3791=(($3790)|0);
   var $3792=(($3791)|0);
   var $3793=$3792;
   HEAP32[(($3793)>>2)]=$3789;
   label = 391; break;
  case 391: 
   label = 396; break;
  case 392: 
   var $3796=$i;
   var $3797=$3796 >>> 7;
   var $3798=$3797 & 127;
   var $3799=(($3798)|(0));
   var $3800=$regs_a75;
   var $3801=(($3800)|0);
   var $3802=(($3801)|0);
   var $3803=$3802;
   var $3804=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3803)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3803)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $3805=($3804)-($3799);
   (HEAPF64[(tempDoublePtr)>>3]=$3805,HEAP32[(($3803)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3803)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 396; break;
  case 393: 
   label = 394; break;
  case 394: 
   var $3808=$regs_a75;
   var $3809=(($3808+12)|0);
   var $3810=(($3809+8)|0);
   HEAP32[(($3810)>>2)]=3;
   var $3811=$i;
   var $3812=$3811 >>> 7;
   var $3813=$3812 & 127;
   var $3814=$regs_a75;
   var $3815=(($3814+12)|0);
   var $3816=(($3815)|0);
   var $3817=$3816;
   HEAP32[(($3817)>>2)]=$3813;
   label = 395; break;
  case 395: 
   var $3819=$a74;
   var $3820=$3819 & 511;
   var $3821=$3820 << 23;
   var $3822=32 | $3821;
   var $3823=$i;
   var $3824=$3823 >>> 14;
   var $3825=$3824 & 511;
   var $3826=$3825 & 511;
   var $3827=$3826 << 14;
   var $3828=$3822 | $3827;
   var $3829=$3828 | 128;
   $i=$3829;
   label = 78; break;
  case 396: 
   var $3831=$pc;
   var $3832=(($3831+4)|0);
   $pc=$3832;
   var $3833=HEAP32[(($3832)>>2)];
   $i=$3833;
   var $3834=$i;
   var $3835=$3834 & 127;
   var $3836=((74668+($3835<<2))|0);
   var $3837=HEAP32[(($3836)>>2)];
   var $5866 = $3837;label = 709; break;
  case 397: 
   var $3839=$i;
   var $3840=$3839 >>> 23;
   var $3841=$3840 & 511;
   $a79=$3841;
   var $3842=$1;
   var $3843=$a79;
   var $3844=$regs;
   var $3845=(($3844+((($3843)*(12))&-1))|0);
   var $3846=$a79;
   var $3847=((($3846)+(1))|0);
   var $3848=$regs;
   var $3849=(($3848+((($3847)*(12))&-1))|0);
   var $3850=_mrb_obj_eq($3842, $3845, $3849);
   var $3851=(($3850 << 24) >> 24)!=0;
   if ($3851) { label = 398; break; } else { label = 401; break; }
  case 398: 
   label = 399; break;
  case 399: 
   var $3854=$a79;
   var $3855=$regs;
   var $3856=(($3855+((($3854)*(12))&-1))|0);
   var $3857=(($3856+8)|0);
   HEAP32[(($3857)>>2)]=2;
   var $3858=$a79;
   var $3859=$regs;
   var $3860=(($3859+((($3858)*(12))&-1))|0);
   var $3861=(($3860)|0);
   var $3862=$3861;
   HEAP32[(($3862)>>2)]=1;
   label = 400; break;
  case 400: 
   label = 446; break;
  case 401: 
   label = 402; break;
  case 402: 
   var $3866=$i;
   var $3867=$3866 >>> 23;
   var $3868=$3867 & 511;
   $a80=$3868;
   var $3869=$a80;
   var $3870=$regs;
   var $3871=(($3870+((($3869)*(12))&-1))|0);
   var $3872=(($3871+8)|0);
   var $3873=HEAP32[(($3872)>>2)];
   var $3874=(($3873) & 65535);
   var $3875=(($3874)&(65535));
   var $3876=$3875 << 8;
   var $3877=$a80;
   var $3878=((($3877)+(1))|0);
   var $3879=$regs;
   var $3880=(($3879+((($3878)*(12))&-1))|0);
   var $3881=(($3880+8)|0);
   var $3882=HEAP32[(($3881)>>2)];
   var $3883=(($3882) & 65535);
   var $3884=(($3883)&(65535));
   var $3885=$3884 & 255;
   var $3886=$3876 | $3885;
   if ((($3886)|(0))==771) {
    label = 403; break;
   }
   else if ((($3886)|(0))==774) {
    label = 413; break;
   }
   else if ((($3886)|(0))==1539) {
    label = 423; break;
   }
   else if ((($3886)|(0))==1542) {
    label = 433; break;
   }
   else {
   label = 443; break;
   }
  case 403: 
   label = 404; break;
  case 404: 
   var $3889=$a80;
   var $3890=$regs;
   var $3891=(($3890+((($3889)*(12))&-1))|0);
   var $3892=(($3891)|0);
   var $3893=$3892;
   var $3894=HEAP32[(($3893)>>2)];
   var $3895=$a80;
   var $3896=((($3895)+(1))|0);
   var $3897=$regs;
   var $3898=(($3897+((($3896)*(12))&-1))|0);
   var $3899=(($3898)|0);
   var $3900=$3899;
   var $3901=HEAP32[(($3900)>>2)];
   var $3902=(($3894)|(0))==(($3901)|(0));
   if ($3902) { label = 405; break; } else { label = 408; break; }
  case 405: 
   label = 406; break;
  case 406: 
   var $3905=$a80;
   var $3906=$regs;
   var $3907=(($3906+((($3905)*(12))&-1))|0);
   var $3908=(($3907+8)|0);
   HEAP32[(($3908)>>2)]=2;
   var $3909=$a80;
   var $3910=$regs;
   var $3911=(($3910+((($3909)*(12))&-1))|0);
   var $3912=(($3911)|0);
   var $3913=$3912;
   HEAP32[(($3913)>>2)]=1;
   label = 407; break;
  case 407: 
   label = 411; break;
  case 408: 
   label = 409; break;
  case 409: 
   var $3917=$a80;
   var $3918=$regs;
   var $3919=(($3918+((($3917)*(12))&-1))|0);
   var $3920=(($3919+8)|0);
   HEAP32[(($3920)>>2)]=0;
   var $3921=$a80;
   var $3922=$regs;
   var $3923=(($3922+((($3921)*(12))&-1))|0);
   var $3924=(($3923)|0);
   var $3925=$3924;
   HEAP32[(($3925)>>2)]=1;
   label = 410; break;
  case 410: 
   label = 411; break;
  case 411: 
   label = 412; break;
  case 412: 
   label = 444; break;
  case 413: 
   label = 414; break;
  case 414: 
   var $3931=$a80;
   var $3932=$regs;
   var $3933=(($3932+((($3931)*(12))&-1))|0);
   var $3934=(($3933)|0);
   var $3935=$3934;
   var $3936=HEAP32[(($3935)>>2)];
   var $3937=(($3936)|(0));
   var $3938=$a80;
   var $3939=((($3938)+(1))|0);
   var $3940=$regs;
   var $3941=(($3940+((($3939)*(12))&-1))|0);
   var $3942=(($3941)|0);
   var $3943=$3942;
   var $3944=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3943)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3943)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $3945=$3937 == $3944;
   if ($3945) { label = 415; break; } else { label = 418; break; }
  case 415: 
   label = 416; break;
  case 416: 
   var $3948=$a80;
   var $3949=$regs;
   var $3950=(($3949+((($3948)*(12))&-1))|0);
   var $3951=(($3950+8)|0);
   HEAP32[(($3951)>>2)]=2;
   var $3952=$a80;
   var $3953=$regs;
   var $3954=(($3953+((($3952)*(12))&-1))|0);
   var $3955=(($3954)|0);
   var $3956=$3955;
   HEAP32[(($3956)>>2)]=1;
   label = 417; break;
  case 417: 
   label = 421; break;
  case 418: 
   label = 419; break;
  case 419: 
   var $3960=$a80;
   var $3961=$regs;
   var $3962=(($3961+((($3960)*(12))&-1))|0);
   var $3963=(($3962+8)|0);
   HEAP32[(($3963)>>2)]=0;
   var $3964=$a80;
   var $3965=$regs;
   var $3966=(($3965+((($3964)*(12))&-1))|0);
   var $3967=(($3966)|0);
   var $3968=$3967;
   HEAP32[(($3968)>>2)]=1;
   label = 420; break;
  case 420: 
   label = 421; break;
  case 421: 
   label = 422; break;
  case 422: 
   label = 444; break;
  case 423: 
   label = 424; break;
  case 424: 
   var $3974=$a80;
   var $3975=$regs;
   var $3976=(($3975+((($3974)*(12))&-1))|0);
   var $3977=(($3976)|0);
   var $3978=$3977;
   var $3979=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3978)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3978)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $3980=$a80;
   var $3981=((($3980)+(1))|0);
   var $3982=$regs;
   var $3983=(($3982+((($3981)*(12))&-1))|0);
   var $3984=(($3983)|0);
   var $3985=$3984;
   var $3986=HEAP32[(($3985)>>2)];
   var $3987=(($3986)|(0));
   var $3988=$3979 == $3987;
   if ($3988) { label = 425; break; } else { label = 428; break; }
  case 425: 
   label = 426; break;
  case 426: 
   var $3991=$a80;
   var $3992=$regs;
   var $3993=(($3992+((($3991)*(12))&-1))|0);
   var $3994=(($3993+8)|0);
   HEAP32[(($3994)>>2)]=2;
   var $3995=$a80;
   var $3996=$regs;
   var $3997=(($3996+((($3995)*(12))&-1))|0);
   var $3998=(($3997)|0);
   var $3999=$3998;
   HEAP32[(($3999)>>2)]=1;
   label = 427; break;
  case 427: 
   label = 431; break;
  case 428: 
   label = 429; break;
  case 429: 
   var $4003=$a80;
   var $4004=$regs;
   var $4005=(($4004+((($4003)*(12))&-1))|0);
   var $4006=(($4005+8)|0);
   HEAP32[(($4006)>>2)]=0;
   var $4007=$a80;
   var $4008=$regs;
   var $4009=(($4008+((($4007)*(12))&-1))|0);
   var $4010=(($4009)|0);
   var $4011=$4010;
   HEAP32[(($4011)>>2)]=1;
   label = 430; break;
  case 430: 
   label = 431; break;
  case 431: 
   label = 432; break;
  case 432: 
   label = 444; break;
  case 433: 
   label = 434; break;
  case 434: 
   var $4017=$a80;
   var $4018=$regs;
   var $4019=(($4018+((($4017)*(12))&-1))|0);
   var $4020=(($4019)|0);
   var $4021=$4020;
   var $4022=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4021)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4021)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $4023=$a80;
   var $4024=((($4023)+(1))|0);
   var $4025=$regs;
   var $4026=(($4025+((($4024)*(12))&-1))|0);
   var $4027=(($4026)|0);
   var $4028=$4027;
   var $4029=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4028)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4028)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $4030=$4022 == $4029;
   if ($4030) { label = 435; break; } else { label = 438; break; }
  case 435: 
   label = 436; break;
  case 436: 
   var $4033=$a80;
   var $4034=$regs;
   var $4035=(($4034+((($4033)*(12))&-1))|0);
   var $4036=(($4035+8)|0);
   HEAP32[(($4036)>>2)]=2;
   var $4037=$a80;
   var $4038=$regs;
   var $4039=(($4038+((($4037)*(12))&-1))|0);
   var $4040=(($4039)|0);
   var $4041=$4040;
   HEAP32[(($4041)>>2)]=1;
   label = 437; break;
  case 437: 
   label = 441; break;
  case 438: 
   label = 439; break;
  case 439: 
   var $4045=$a80;
   var $4046=$regs;
   var $4047=(($4046+((($4045)*(12))&-1))|0);
   var $4048=(($4047+8)|0);
   HEAP32[(($4048)>>2)]=0;
   var $4049=$a80;
   var $4050=$regs;
   var $4051=(($4050+((($4049)*(12))&-1))|0);
   var $4052=(($4051)|0);
   var $4053=$4052;
   HEAP32[(($4053)>>2)]=1;
   label = 440; break;
  case 440: 
   label = 441; break;
  case 441: 
   label = 442; break;
  case 442: 
   label = 444; break;
  case 443: 
   label = 78; break;
  case 444: 
   label = 445; break;
  case 445: 
   label = 446; break;
  case 446: 
   var $4061=$pc;
   var $4062=(($4061+4)|0);
   $pc=$4062;
   var $4063=HEAP32[(($4062)>>2)];
   $i=$4063;
   var $4064=$i;
   var $4065=$4064 & 127;
   var $4066=((74668+($4065<<2))|0);
   var $4067=HEAP32[(($4066)>>2)];
   var $5866 = $4067;label = 709; break;
  case 447: 
   label = 448; break;
  case 448: 
   var $4070=$i;
   var $4071=$4070 >>> 23;
   var $4072=$4071 & 511;
   $a81=$4072;
   var $4073=$a81;
   var $4074=$regs;
   var $4075=(($4074+((($4073)*(12))&-1))|0);
   var $4076=(($4075+8)|0);
   var $4077=HEAP32[(($4076)>>2)];
   var $4078=(($4077) & 65535);
   var $4079=(($4078)&(65535));
   var $4080=$4079 << 8;
   var $4081=$a81;
   var $4082=((($4081)+(1))|0);
   var $4083=$regs;
   var $4084=(($4083+((($4082)*(12))&-1))|0);
   var $4085=(($4084+8)|0);
   var $4086=HEAP32[(($4085)>>2)];
   var $4087=(($4086) & 65535);
   var $4088=(($4087)&(65535));
   var $4089=$4088 & 255;
   var $4090=$4080 | $4089;
   if ((($4090)|(0))==771) {
    label = 449; break;
   }
   else if ((($4090)|(0))==774) {
    label = 459; break;
   }
   else if ((($4090)|(0))==1539) {
    label = 469; break;
   }
   else if ((($4090)|(0))==1542) {
    label = 479; break;
   }
   else {
   label = 489; break;
   }
  case 449: 
   label = 450; break;
  case 450: 
   var $4093=$a81;
   var $4094=$regs;
   var $4095=(($4094+((($4093)*(12))&-1))|0);
   var $4096=(($4095)|0);
   var $4097=$4096;
   var $4098=HEAP32[(($4097)>>2)];
   var $4099=$a81;
   var $4100=((($4099)+(1))|0);
   var $4101=$regs;
   var $4102=(($4101+((($4100)*(12))&-1))|0);
   var $4103=(($4102)|0);
   var $4104=$4103;
   var $4105=HEAP32[(($4104)>>2)];
   var $4106=(($4098)|(0)) < (($4105)|(0));
   if ($4106) { label = 451; break; } else { label = 454; break; }
  case 451: 
   label = 452; break;
  case 452: 
   var $4109=$a81;
   var $4110=$regs;
   var $4111=(($4110+((($4109)*(12))&-1))|0);
   var $4112=(($4111+8)|0);
   HEAP32[(($4112)>>2)]=2;
   var $4113=$a81;
   var $4114=$regs;
   var $4115=(($4114+((($4113)*(12))&-1))|0);
   var $4116=(($4115)|0);
   var $4117=$4116;
   HEAP32[(($4117)>>2)]=1;
   label = 453; break;
  case 453: 
   label = 457; break;
  case 454: 
   label = 455; break;
  case 455: 
   var $4121=$a81;
   var $4122=$regs;
   var $4123=(($4122+((($4121)*(12))&-1))|0);
   var $4124=(($4123+8)|0);
   HEAP32[(($4124)>>2)]=0;
   var $4125=$a81;
   var $4126=$regs;
   var $4127=(($4126+((($4125)*(12))&-1))|0);
   var $4128=(($4127)|0);
   var $4129=$4128;
   HEAP32[(($4129)>>2)]=1;
   label = 456; break;
  case 456: 
   label = 457; break;
  case 457: 
   label = 458; break;
  case 458: 
   label = 490; break;
  case 459: 
   label = 460; break;
  case 460: 
   var $4135=$a81;
   var $4136=$regs;
   var $4137=(($4136+((($4135)*(12))&-1))|0);
   var $4138=(($4137)|0);
   var $4139=$4138;
   var $4140=HEAP32[(($4139)>>2)];
   var $4141=(($4140)|(0));
   var $4142=$a81;
   var $4143=((($4142)+(1))|0);
   var $4144=$regs;
   var $4145=(($4144+((($4143)*(12))&-1))|0);
   var $4146=(($4145)|0);
   var $4147=$4146;
   var $4148=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4147)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4147)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $4149=$4141 < $4148;
   if ($4149) { label = 461; break; } else { label = 464; break; }
  case 461: 
   label = 462; break;
  case 462: 
   var $4152=$a81;
   var $4153=$regs;
   var $4154=(($4153+((($4152)*(12))&-1))|0);
   var $4155=(($4154+8)|0);
   HEAP32[(($4155)>>2)]=2;
   var $4156=$a81;
   var $4157=$regs;
   var $4158=(($4157+((($4156)*(12))&-1))|0);
   var $4159=(($4158)|0);
   var $4160=$4159;
   HEAP32[(($4160)>>2)]=1;
   label = 463; break;
  case 463: 
   label = 467; break;
  case 464: 
   label = 465; break;
  case 465: 
   var $4164=$a81;
   var $4165=$regs;
   var $4166=(($4165+((($4164)*(12))&-1))|0);
   var $4167=(($4166+8)|0);
   HEAP32[(($4167)>>2)]=0;
   var $4168=$a81;
   var $4169=$regs;
   var $4170=(($4169+((($4168)*(12))&-1))|0);
   var $4171=(($4170)|0);
   var $4172=$4171;
   HEAP32[(($4172)>>2)]=1;
   label = 466; break;
  case 466: 
   label = 467; break;
  case 467: 
   label = 468; break;
  case 468: 
   label = 490; break;
  case 469: 
   label = 470; break;
  case 470: 
   var $4178=$a81;
   var $4179=$regs;
   var $4180=(($4179+((($4178)*(12))&-1))|0);
   var $4181=(($4180)|0);
   var $4182=$4181;
   var $4183=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4182)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4182)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $4184=$a81;
   var $4185=((($4184)+(1))|0);
   var $4186=$regs;
   var $4187=(($4186+((($4185)*(12))&-1))|0);
   var $4188=(($4187)|0);
   var $4189=$4188;
   var $4190=HEAP32[(($4189)>>2)];
   var $4191=(($4190)|(0));
   var $4192=$4183 < $4191;
   if ($4192) { label = 471; break; } else { label = 474; break; }
  case 471: 
   label = 472; break;
  case 472: 
   var $4195=$a81;
   var $4196=$regs;
   var $4197=(($4196+((($4195)*(12))&-1))|0);
   var $4198=(($4197+8)|0);
   HEAP32[(($4198)>>2)]=2;
   var $4199=$a81;
   var $4200=$regs;
   var $4201=(($4200+((($4199)*(12))&-1))|0);
   var $4202=(($4201)|0);
   var $4203=$4202;
   HEAP32[(($4203)>>2)]=1;
   label = 473; break;
  case 473: 
   label = 477; break;
  case 474: 
   label = 475; break;
  case 475: 
   var $4207=$a81;
   var $4208=$regs;
   var $4209=(($4208+((($4207)*(12))&-1))|0);
   var $4210=(($4209+8)|0);
   HEAP32[(($4210)>>2)]=0;
   var $4211=$a81;
   var $4212=$regs;
   var $4213=(($4212+((($4211)*(12))&-1))|0);
   var $4214=(($4213)|0);
   var $4215=$4214;
   HEAP32[(($4215)>>2)]=1;
   label = 476; break;
  case 476: 
   label = 477; break;
  case 477: 
   label = 478; break;
  case 478: 
   label = 490; break;
  case 479: 
   label = 480; break;
  case 480: 
   var $4221=$a81;
   var $4222=$regs;
   var $4223=(($4222+((($4221)*(12))&-1))|0);
   var $4224=(($4223)|0);
   var $4225=$4224;
   var $4226=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4225)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4225)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $4227=$a81;
   var $4228=((($4227)+(1))|0);
   var $4229=$regs;
   var $4230=(($4229+((($4228)*(12))&-1))|0);
   var $4231=(($4230)|0);
   var $4232=$4231;
   var $4233=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4232)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4232)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $4234=$4226 < $4233;
   if ($4234) { label = 481; break; } else { label = 484; break; }
  case 481: 
   label = 482; break;
  case 482: 
   var $4237=$a81;
   var $4238=$regs;
   var $4239=(($4238+((($4237)*(12))&-1))|0);
   var $4240=(($4239+8)|0);
   HEAP32[(($4240)>>2)]=2;
   var $4241=$a81;
   var $4242=$regs;
   var $4243=(($4242+((($4241)*(12))&-1))|0);
   var $4244=(($4243)|0);
   var $4245=$4244;
   HEAP32[(($4245)>>2)]=1;
   label = 483; break;
  case 483: 
   label = 487; break;
  case 484: 
   label = 485; break;
  case 485: 
   var $4249=$a81;
   var $4250=$regs;
   var $4251=(($4250+((($4249)*(12))&-1))|0);
   var $4252=(($4251+8)|0);
   HEAP32[(($4252)>>2)]=0;
   var $4253=$a81;
   var $4254=$regs;
   var $4255=(($4254+((($4253)*(12))&-1))|0);
   var $4256=(($4255)|0);
   var $4257=$4256;
   HEAP32[(($4257)>>2)]=1;
   label = 486; break;
  case 486: 
   label = 487; break;
  case 487: 
   label = 488; break;
  case 488: 
   label = 490; break;
  case 489: 
   label = 78; break;
  case 490: 
   label = 491; break;
  case 491: 
   var $4264=$pc;
   var $4265=(($4264+4)|0);
   $pc=$4265;
   var $4266=HEAP32[(($4265)>>2)];
   $i=$4266;
   var $4267=$i;
   var $4268=$4267 & 127;
   var $4269=((74668+($4268<<2))|0);
   var $4270=HEAP32[(($4269)>>2)];
   var $5866 = $4270;label = 709; break;
  case 492: 
   label = 493; break;
  case 493: 
   var $4273=$i;
   var $4274=$4273 >>> 23;
   var $4275=$4274 & 511;
   $a82=$4275;
   var $4276=$a82;
   var $4277=$regs;
   var $4278=(($4277+((($4276)*(12))&-1))|0);
   var $4279=(($4278+8)|0);
   var $4280=HEAP32[(($4279)>>2)];
   var $4281=(($4280) & 65535);
   var $4282=(($4281)&(65535));
   var $4283=$4282 << 8;
   var $4284=$a82;
   var $4285=((($4284)+(1))|0);
   var $4286=$regs;
   var $4287=(($4286+((($4285)*(12))&-1))|0);
   var $4288=(($4287+8)|0);
   var $4289=HEAP32[(($4288)>>2)];
   var $4290=(($4289) & 65535);
   var $4291=(($4290)&(65535));
   var $4292=$4291 & 255;
   var $4293=$4283 | $4292;
   if ((($4293)|(0))==771) {
    label = 494; break;
   }
   else if ((($4293)|(0))==774) {
    label = 504; break;
   }
   else if ((($4293)|(0))==1539) {
    label = 514; break;
   }
   else if ((($4293)|(0))==1542) {
    label = 524; break;
   }
   else {
   label = 534; break;
   }
  case 494: 
   label = 495; break;
  case 495: 
   var $4296=$a82;
   var $4297=$regs;
   var $4298=(($4297+((($4296)*(12))&-1))|0);
   var $4299=(($4298)|0);
   var $4300=$4299;
   var $4301=HEAP32[(($4300)>>2)];
   var $4302=$a82;
   var $4303=((($4302)+(1))|0);
   var $4304=$regs;
   var $4305=(($4304+((($4303)*(12))&-1))|0);
   var $4306=(($4305)|0);
   var $4307=$4306;
   var $4308=HEAP32[(($4307)>>2)];
   var $4309=(($4301)|(0)) <= (($4308)|(0));
   if ($4309) { label = 496; break; } else { label = 499; break; }
  case 496: 
   label = 497; break;
  case 497: 
   var $4312=$a82;
   var $4313=$regs;
   var $4314=(($4313+((($4312)*(12))&-1))|0);
   var $4315=(($4314+8)|0);
   HEAP32[(($4315)>>2)]=2;
   var $4316=$a82;
   var $4317=$regs;
   var $4318=(($4317+((($4316)*(12))&-1))|0);
   var $4319=(($4318)|0);
   var $4320=$4319;
   HEAP32[(($4320)>>2)]=1;
   label = 498; break;
  case 498: 
   label = 502; break;
  case 499: 
   label = 500; break;
  case 500: 
   var $4324=$a82;
   var $4325=$regs;
   var $4326=(($4325+((($4324)*(12))&-1))|0);
   var $4327=(($4326+8)|0);
   HEAP32[(($4327)>>2)]=0;
   var $4328=$a82;
   var $4329=$regs;
   var $4330=(($4329+((($4328)*(12))&-1))|0);
   var $4331=(($4330)|0);
   var $4332=$4331;
   HEAP32[(($4332)>>2)]=1;
   label = 501; break;
  case 501: 
   label = 502; break;
  case 502: 
   label = 503; break;
  case 503: 
   label = 535; break;
  case 504: 
   label = 505; break;
  case 505: 
   var $4338=$a82;
   var $4339=$regs;
   var $4340=(($4339+((($4338)*(12))&-1))|0);
   var $4341=(($4340)|0);
   var $4342=$4341;
   var $4343=HEAP32[(($4342)>>2)];
   var $4344=(($4343)|(0));
   var $4345=$a82;
   var $4346=((($4345)+(1))|0);
   var $4347=$regs;
   var $4348=(($4347+((($4346)*(12))&-1))|0);
   var $4349=(($4348)|0);
   var $4350=$4349;
   var $4351=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4350)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4350)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $4352=$4344 <= $4351;
   if ($4352) { label = 506; break; } else { label = 509; break; }
  case 506: 
   label = 507; break;
  case 507: 
   var $4355=$a82;
   var $4356=$regs;
   var $4357=(($4356+((($4355)*(12))&-1))|0);
   var $4358=(($4357+8)|0);
   HEAP32[(($4358)>>2)]=2;
   var $4359=$a82;
   var $4360=$regs;
   var $4361=(($4360+((($4359)*(12))&-1))|0);
   var $4362=(($4361)|0);
   var $4363=$4362;
   HEAP32[(($4363)>>2)]=1;
   label = 508; break;
  case 508: 
   label = 512; break;
  case 509: 
   label = 510; break;
  case 510: 
   var $4367=$a82;
   var $4368=$regs;
   var $4369=(($4368+((($4367)*(12))&-1))|0);
   var $4370=(($4369+8)|0);
   HEAP32[(($4370)>>2)]=0;
   var $4371=$a82;
   var $4372=$regs;
   var $4373=(($4372+((($4371)*(12))&-1))|0);
   var $4374=(($4373)|0);
   var $4375=$4374;
   HEAP32[(($4375)>>2)]=1;
   label = 511; break;
  case 511: 
   label = 512; break;
  case 512: 
   label = 513; break;
  case 513: 
   label = 535; break;
  case 514: 
   label = 515; break;
  case 515: 
   var $4381=$a82;
   var $4382=$regs;
   var $4383=(($4382+((($4381)*(12))&-1))|0);
   var $4384=(($4383)|0);
   var $4385=$4384;
   var $4386=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4385)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4385)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $4387=$a82;
   var $4388=((($4387)+(1))|0);
   var $4389=$regs;
   var $4390=(($4389+((($4388)*(12))&-1))|0);
   var $4391=(($4390)|0);
   var $4392=$4391;
   var $4393=HEAP32[(($4392)>>2)];
   var $4394=(($4393)|(0));
   var $4395=$4386 <= $4394;
   if ($4395) { label = 516; break; } else { label = 519; break; }
  case 516: 
   label = 517; break;
  case 517: 
   var $4398=$a82;
   var $4399=$regs;
   var $4400=(($4399+((($4398)*(12))&-1))|0);
   var $4401=(($4400+8)|0);
   HEAP32[(($4401)>>2)]=2;
   var $4402=$a82;
   var $4403=$regs;
   var $4404=(($4403+((($4402)*(12))&-1))|0);
   var $4405=(($4404)|0);
   var $4406=$4405;
   HEAP32[(($4406)>>2)]=1;
   label = 518; break;
  case 518: 
   label = 522; break;
  case 519: 
   label = 520; break;
  case 520: 
   var $4410=$a82;
   var $4411=$regs;
   var $4412=(($4411+((($4410)*(12))&-1))|0);
   var $4413=(($4412+8)|0);
   HEAP32[(($4413)>>2)]=0;
   var $4414=$a82;
   var $4415=$regs;
   var $4416=(($4415+((($4414)*(12))&-1))|0);
   var $4417=(($4416)|0);
   var $4418=$4417;
   HEAP32[(($4418)>>2)]=1;
   label = 521; break;
  case 521: 
   label = 522; break;
  case 522: 
   label = 523; break;
  case 523: 
   label = 535; break;
  case 524: 
   label = 525; break;
  case 525: 
   var $4424=$a82;
   var $4425=$regs;
   var $4426=(($4425+((($4424)*(12))&-1))|0);
   var $4427=(($4426)|0);
   var $4428=$4427;
   var $4429=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4428)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4428)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $4430=$a82;
   var $4431=((($4430)+(1))|0);
   var $4432=$regs;
   var $4433=(($4432+((($4431)*(12))&-1))|0);
   var $4434=(($4433)|0);
   var $4435=$4434;
   var $4436=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4435)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4435)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $4437=$4429 <= $4436;
   if ($4437) { label = 526; break; } else { label = 529; break; }
  case 526: 
   label = 527; break;
  case 527: 
   var $4440=$a82;
   var $4441=$regs;
   var $4442=(($4441+((($4440)*(12))&-1))|0);
   var $4443=(($4442+8)|0);
   HEAP32[(($4443)>>2)]=2;
   var $4444=$a82;
   var $4445=$regs;
   var $4446=(($4445+((($4444)*(12))&-1))|0);
   var $4447=(($4446)|0);
   var $4448=$4447;
   HEAP32[(($4448)>>2)]=1;
   label = 528; break;
  case 528: 
   label = 532; break;
  case 529: 
   label = 530; break;
  case 530: 
   var $4452=$a82;
   var $4453=$regs;
   var $4454=(($4453+((($4452)*(12))&-1))|0);
   var $4455=(($4454+8)|0);
   HEAP32[(($4455)>>2)]=0;
   var $4456=$a82;
   var $4457=$regs;
   var $4458=(($4457+((($4456)*(12))&-1))|0);
   var $4459=(($4458)|0);
   var $4460=$4459;
   HEAP32[(($4460)>>2)]=1;
   label = 531; break;
  case 531: 
   label = 532; break;
  case 532: 
   label = 533; break;
  case 533: 
   label = 535; break;
  case 534: 
   label = 78; break;
  case 535: 
   label = 536; break;
  case 536: 
   var $4467=$pc;
   var $4468=(($4467+4)|0);
   $pc=$4468;
   var $4469=HEAP32[(($4468)>>2)];
   $i=$4469;
   var $4470=$i;
   var $4471=$4470 & 127;
   var $4472=((74668+($4471<<2))|0);
   var $4473=HEAP32[(($4472)>>2)];
   var $5866 = $4473;label = 709; break;
  case 537: 
   label = 538; break;
  case 538: 
   var $4476=$i;
   var $4477=$4476 >>> 23;
   var $4478=$4477 & 511;
   $a83=$4478;
   var $4479=$a83;
   var $4480=$regs;
   var $4481=(($4480+((($4479)*(12))&-1))|0);
   var $4482=(($4481+8)|0);
   var $4483=HEAP32[(($4482)>>2)];
   var $4484=(($4483) & 65535);
   var $4485=(($4484)&(65535));
   var $4486=$4485 << 8;
   var $4487=$a83;
   var $4488=((($4487)+(1))|0);
   var $4489=$regs;
   var $4490=(($4489+((($4488)*(12))&-1))|0);
   var $4491=(($4490+8)|0);
   var $4492=HEAP32[(($4491)>>2)];
   var $4493=(($4492) & 65535);
   var $4494=(($4493)&(65535));
   var $4495=$4494 & 255;
   var $4496=$4486 | $4495;
   if ((($4496)|(0))==771) {
    label = 539; break;
   }
   else if ((($4496)|(0))==774) {
    label = 549; break;
   }
   else if ((($4496)|(0))==1539) {
    label = 559; break;
   }
   else if ((($4496)|(0))==1542) {
    label = 569; break;
   }
   else {
   label = 579; break;
   }
  case 539: 
   label = 540; break;
  case 540: 
   var $4499=$a83;
   var $4500=$regs;
   var $4501=(($4500+((($4499)*(12))&-1))|0);
   var $4502=(($4501)|0);
   var $4503=$4502;
   var $4504=HEAP32[(($4503)>>2)];
   var $4505=$a83;
   var $4506=((($4505)+(1))|0);
   var $4507=$regs;
   var $4508=(($4507+((($4506)*(12))&-1))|0);
   var $4509=(($4508)|0);
   var $4510=$4509;
   var $4511=HEAP32[(($4510)>>2)];
   var $4512=(($4504)|(0)) > (($4511)|(0));
   if ($4512) { label = 541; break; } else { label = 544; break; }
  case 541: 
   label = 542; break;
  case 542: 
   var $4515=$a83;
   var $4516=$regs;
   var $4517=(($4516+((($4515)*(12))&-1))|0);
   var $4518=(($4517+8)|0);
   HEAP32[(($4518)>>2)]=2;
   var $4519=$a83;
   var $4520=$regs;
   var $4521=(($4520+((($4519)*(12))&-1))|0);
   var $4522=(($4521)|0);
   var $4523=$4522;
   HEAP32[(($4523)>>2)]=1;
   label = 543; break;
  case 543: 
   label = 547; break;
  case 544: 
   label = 545; break;
  case 545: 
   var $4527=$a83;
   var $4528=$regs;
   var $4529=(($4528+((($4527)*(12))&-1))|0);
   var $4530=(($4529+8)|0);
   HEAP32[(($4530)>>2)]=0;
   var $4531=$a83;
   var $4532=$regs;
   var $4533=(($4532+((($4531)*(12))&-1))|0);
   var $4534=(($4533)|0);
   var $4535=$4534;
   HEAP32[(($4535)>>2)]=1;
   label = 546; break;
  case 546: 
   label = 547; break;
  case 547: 
   label = 548; break;
  case 548: 
   label = 580; break;
  case 549: 
   label = 550; break;
  case 550: 
   var $4541=$a83;
   var $4542=$regs;
   var $4543=(($4542+((($4541)*(12))&-1))|0);
   var $4544=(($4543)|0);
   var $4545=$4544;
   var $4546=HEAP32[(($4545)>>2)];
   var $4547=(($4546)|(0));
   var $4548=$a83;
   var $4549=((($4548)+(1))|0);
   var $4550=$regs;
   var $4551=(($4550+((($4549)*(12))&-1))|0);
   var $4552=(($4551)|0);
   var $4553=$4552;
   var $4554=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4553)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4553)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $4555=$4547 > $4554;
   if ($4555) { label = 551; break; } else { label = 554; break; }
  case 551: 
   label = 552; break;
  case 552: 
   var $4558=$a83;
   var $4559=$regs;
   var $4560=(($4559+((($4558)*(12))&-1))|0);
   var $4561=(($4560+8)|0);
   HEAP32[(($4561)>>2)]=2;
   var $4562=$a83;
   var $4563=$regs;
   var $4564=(($4563+((($4562)*(12))&-1))|0);
   var $4565=(($4564)|0);
   var $4566=$4565;
   HEAP32[(($4566)>>2)]=1;
   label = 553; break;
  case 553: 
   label = 557; break;
  case 554: 
   label = 555; break;
  case 555: 
   var $4570=$a83;
   var $4571=$regs;
   var $4572=(($4571+((($4570)*(12))&-1))|0);
   var $4573=(($4572+8)|0);
   HEAP32[(($4573)>>2)]=0;
   var $4574=$a83;
   var $4575=$regs;
   var $4576=(($4575+((($4574)*(12))&-1))|0);
   var $4577=(($4576)|0);
   var $4578=$4577;
   HEAP32[(($4578)>>2)]=1;
   label = 556; break;
  case 556: 
   label = 557; break;
  case 557: 
   label = 558; break;
  case 558: 
   label = 580; break;
  case 559: 
   label = 560; break;
  case 560: 
   var $4584=$a83;
   var $4585=$regs;
   var $4586=(($4585+((($4584)*(12))&-1))|0);
   var $4587=(($4586)|0);
   var $4588=$4587;
   var $4589=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4588)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4588)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $4590=$a83;
   var $4591=((($4590)+(1))|0);
   var $4592=$regs;
   var $4593=(($4592+((($4591)*(12))&-1))|0);
   var $4594=(($4593)|0);
   var $4595=$4594;
   var $4596=HEAP32[(($4595)>>2)];
   var $4597=(($4596)|(0));
   var $4598=$4589 > $4597;
   if ($4598) { label = 561; break; } else { label = 564; break; }
  case 561: 
   label = 562; break;
  case 562: 
   var $4601=$a83;
   var $4602=$regs;
   var $4603=(($4602+((($4601)*(12))&-1))|0);
   var $4604=(($4603+8)|0);
   HEAP32[(($4604)>>2)]=2;
   var $4605=$a83;
   var $4606=$regs;
   var $4607=(($4606+((($4605)*(12))&-1))|0);
   var $4608=(($4607)|0);
   var $4609=$4608;
   HEAP32[(($4609)>>2)]=1;
   label = 563; break;
  case 563: 
   label = 567; break;
  case 564: 
   label = 565; break;
  case 565: 
   var $4613=$a83;
   var $4614=$regs;
   var $4615=(($4614+((($4613)*(12))&-1))|0);
   var $4616=(($4615+8)|0);
   HEAP32[(($4616)>>2)]=0;
   var $4617=$a83;
   var $4618=$regs;
   var $4619=(($4618+((($4617)*(12))&-1))|0);
   var $4620=(($4619)|0);
   var $4621=$4620;
   HEAP32[(($4621)>>2)]=1;
   label = 566; break;
  case 566: 
   label = 567; break;
  case 567: 
   label = 568; break;
  case 568: 
   label = 580; break;
  case 569: 
   label = 570; break;
  case 570: 
   var $4627=$a83;
   var $4628=$regs;
   var $4629=(($4628+((($4627)*(12))&-1))|0);
   var $4630=(($4629)|0);
   var $4631=$4630;
   var $4632=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4631)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4631)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $4633=$a83;
   var $4634=((($4633)+(1))|0);
   var $4635=$regs;
   var $4636=(($4635+((($4634)*(12))&-1))|0);
   var $4637=(($4636)|0);
   var $4638=$4637;
   var $4639=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4638)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4638)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $4640=$4632 > $4639;
   if ($4640) { label = 571; break; } else { label = 574; break; }
  case 571: 
   label = 572; break;
  case 572: 
   var $4643=$a83;
   var $4644=$regs;
   var $4645=(($4644+((($4643)*(12))&-1))|0);
   var $4646=(($4645+8)|0);
   HEAP32[(($4646)>>2)]=2;
   var $4647=$a83;
   var $4648=$regs;
   var $4649=(($4648+((($4647)*(12))&-1))|0);
   var $4650=(($4649)|0);
   var $4651=$4650;
   HEAP32[(($4651)>>2)]=1;
   label = 573; break;
  case 573: 
   label = 577; break;
  case 574: 
   label = 575; break;
  case 575: 
   var $4655=$a83;
   var $4656=$regs;
   var $4657=(($4656+((($4655)*(12))&-1))|0);
   var $4658=(($4657+8)|0);
   HEAP32[(($4658)>>2)]=0;
   var $4659=$a83;
   var $4660=$regs;
   var $4661=(($4660+((($4659)*(12))&-1))|0);
   var $4662=(($4661)|0);
   var $4663=$4662;
   HEAP32[(($4663)>>2)]=1;
   label = 576; break;
  case 576: 
   label = 577; break;
  case 577: 
   label = 578; break;
  case 578: 
   label = 580; break;
  case 579: 
   label = 78; break;
  case 580: 
   label = 581; break;
  case 581: 
   var $4670=$pc;
   var $4671=(($4670+4)|0);
   $pc=$4671;
   var $4672=HEAP32[(($4671)>>2)];
   $i=$4672;
   var $4673=$i;
   var $4674=$4673 & 127;
   var $4675=((74668+($4674<<2))|0);
   var $4676=HEAP32[(($4675)>>2)];
   var $5866 = $4676;label = 709; break;
  case 582: 
   label = 583; break;
  case 583: 
   var $4679=$i;
   var $4680=$4679 >>> 23;
   var $4681=$4680 & 511;
   $a84=$4681;
   var $4682=$a84;
   var $4683=$regs;
   var $4684=(($4683+((($4682)*(12))&-1))|0);
   var $4685=(($4684+8)|0);
   var $4686=HEAP32[(($4685)>>2)];
   var $4687=(($4686) & 65535);
   var $4688=(($4687)&(65535));
   var $4689=$4688 << 8;
   var $4690=$a84;
   var $4691=((($4690)+(1))|0);
   var $4692=$regs;
   var $4693=(($4692+((($4691)*(12))&-1))|0);
   var $4694=(($4693+8)|0);
   var $4695=HEAP32[(($4694)>>2)];
   var $4696=(($4695) & 65535);
   var $4697=(($4696)&(65535));
   var $4698=$4697 & 255;
   var $4699=$4689 | $4698;
   if ((($4699)|(0))==771) {
    label = 584; break;
   }
   else if ((($4699)|(0))==774) {
    label = 594; break;
   }
   else if ((($4699)|(0))==1539) {
    label = 604; break;
   }
   else if ((($4699)|(0))==1542) {
    label = 614; break;
   }
   else {
   label = 624; break;
   }
  case 584: 
   label = 585; break;
  case 585: 
   var $4702=$a84;
   var $4703=$regs;
   var $4704=(($4703+((($4702)*(12))&-1))|0);
   var $4705=(($4704)|0);
   var $4706=$4705;
   var $4707=HEAP32[(($4706)>>2)];
   var $4708=$a84;
   var $4709=((($4708)+(1))|0);
   var $4710=$regs;
   var $4711=(($4710+((($4709)*(12))&-1))|0);
   var $4712=(($4711)|0);
   var $4713=$4712;
   var $4714=HEAP32[(($4713)>>2)];
   var $4715=(($4707)|(0)) >= (($4714)|(0));
   if ($4715) { label = 586; break; } else { label = 589; break; }
  case 586: 
   label = 587; break;
  case 587: 
   var $4718=$a84;
   var $4719=$regs;
   var $4720=(($4719+((($4718)*(12))&-1))|0);
   var $4721=(($4720+8)|0);
   HEAP32[(($4721)>>2)]=2;
   var $4722=$a84;
   var $4723=$regs;
   var $4724=(($4723+((($4722)*(12))&-1))|0);
   var $4725=(($4724)|0);
   var $4726=$4725;
   HEAP32[(($4726)>>2)]=1;
   label = 588; break;
  case 588: 
   label = 592; break;
  case 589: 
   label = 590; break;
  case 590: 
   var $4730=$a84;
   var $4731=$regs;
   var $4732=(($4731+((($4730)*(12))&-1))|0);
   var $4733=(($4732+8)|0);
   HEAP32[(($4733)>>2)]=0;
   var $4734=$a84;
   var $4735=$regs;
   var $4736=(($4735+((($4734)*(12))&-1))|0);
   var $4737=(($4736)|0);
   var $4738=$4737;
   HEAP32[(($4738)>>2)]=1;
   label = 591; break;
  case 591: 
   label = 592; break;
  case 592: 
   label = 593; break;
  case 593: 
   label = 625; break;
  case 594: 
   label = 595; break;
  case 595: 
   var $4744=$a84;
   var $4745=$regs;
   var $4746=(($4745+((($4744)*(12))&-1))|0);
   var $4747=(($4746)|0);
   var $4748=$4747;
   var $4749=HEAP32[(($4748)>>2)];
   var $4750=(($4749)|(0));
   var $4751=$a84;
   var $4752=((($4751)+(1))|0);
   var $4753=$regs;
   var $4754=(($4753+((($4752)*(12))&-1))|0);
   var $4755=(($4754)|0);
   var $4756=$4755;
   var $4757=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4756)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4756)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $4758=$4750 >= $4757;
   if ($4758) { label = 596; break; } else { label = 599; break; }
  case 596: 
   label = 597; break;
  case 597: 
   var $4761=$a84;
   var $4762=$regs;
   var $4763=(($4762+((($4761)*(12))&-1))|0);
   var $4764=(($4763+8)|0);
   HEAP32[(($4764)>>2)]=2;
   var $4765=$a84;
   var $4766=$regs;
   var $4767=(($4766+((($4765)*(12))&-1))|0);
   var $4768=(($4767)|0);
   var $4769=$4768;
   HEAP32[(($4769)>>2)]=1;
   label = 598; break;
  case 598: 
   label = 602; break;
  case 599: 
   label = 600; break;
  case 600: 
   var $4773=$a84;
   var $4774=$regs;
   var $4775=(($4774+((($4773)*(12))&-1))|0);
   var $4776=(($4775+8)|0);
   HEAP32[(($4776)>>2)]=0;
   var $4777=$a84;
   var $4778=$regs;
   var $4779=(($4778+((($4777)*(12))&-1))|0);
   var $4780=(($4779)|0);
   var $4781=$4780;
   HEAP32[(($4781)>>2)]=1;
   label = 601; break;
  case 601: 
   label = 602; break;
  case 602: 
   label = 603; break;
  case 603: 
   label = 625; break;
  case 604: 
   label = 605; break;
  case 605: 
   var $4787=$a84;
   var $4788=$regs;
   var $4789=(($4788+((($4787)*(12))&-1))|0);
   var $4790=(($4789)|0);
   var $4791=$4790;
   var $4792=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4791)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4791)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $4793=$a84;
   var $4794=((($4793)+(1))|0);
   var $4795=$regs;
   var $4796=(($4795+((($4794)*(12))&-1))|0);
   var $4797=(($4796)|0);
   var $4798=$4797;
   var $4799=HEAP32[(($4798)>>2)];
   var $4800=(($4799)|(0));
   var $4801=$4792 >= $4800;
   if ($4801) { label = 606; break; } else { label = 609; break; }
  case 606: 
   label = 607; break;
  case 607: 
   var $4804=$a84;
   var $4805=$regs;
   var $4806=(($4805+((($4804)*(12))&-1))|0);
   var $4807=(($4806+8)|0);
   HEAP32[(($4807)>>2)]=2;
   var $4808=$a84;
   var $4809=$regs;
   var $4810=(($4809+((($4808)*(12))&-1))|0);
   var $4811=(($4810)|0);
   var $4812=$4811;
   HEAP32[(($4812)>>2)]=1;
   label = 608; break;
  case 608: 
   label = 612; break;
  case 609: 
   label = 610; break;
  case 610: 
   var $4816=$a84;
   var $4817=$regs;
   var $4818=(($4817+((($4816)*(12))&-1))|0);
   var $4819=(($4818+8)|0);
   HEAP32[(($4819)>>2)]=0;
   var $4820=$a84;
   var $4821=$regs;
   var $4822=(($4821+((($4820)*(12))&-1))|0);
   var $4823=(($4822)|0);
   var $4824=$4823;
   HEAP32[(($4824)>>2)]=1;
   label = 611; break;
  case 611: 
   label = 612; break;
  case 612: 
   label = 613; break;
  case 613: 
   label = 625; break;
  case 614: 
   label = 615; break;
  case 615: 
   var $4830=$a84;
   var $4831=$regs;
   var $4832=(($4831+((($4830)*(12))&-1))|0);
   var $4833=(($4832)|0);
   var $4834=$4833;
   var $4835=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4834)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4834)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $4836=$a84;
   var $4837=((($4836)+(1))|0);
   var $4838=$regs;
   var $4839=(($4838+((($4837)*(12))&-1))|0);
   var $4840=(($4839)|0);
   var $4841=$4840;
   var $4842=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4841)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4841)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $4843=$4835 >= $4842;
   if ($4843) { label = 616; break; } else { label = 619; break; }
  case 616: 
   label = 617; break;
  case 617: 
   var $4846=$a84;
   var $4847=$regs;
   var $4848=(($4847+((($4846)*(12))&-1))|0);
   var $4849=(($4848+8)|0);
   HEAP32[(($4849)>>2)]=2;
   var $4850=$a84;
   var $4851=$regs;
   var $4852=(($4851+((($4850)*(12))&-1))|0);
   var $4853=(($4852)|0);
   var $4854=$4853;
   HEAP32[(($4854)>>2)]=1;
   label = 618; break;
  case 618: 
   label = 622; break;
  case 619: 
   label = 620; break;
  case 620: 
   var $4858=$a84;
   var $4859=$regs;
   var $4860=(($4859+((($4858)*(12))&-1))|0);
   var $4861=(($4860+8)|0);
   HEAP32[(($4861)>>2)]=0;
   var $4862=$a84;
   var $4863=$regs;
   var $4864=(($4863+((($4862)*(12))&-1))|0);
   var $4865=(($4864)|0);
   var $4866=$4865;
   HEAP32[(($4866)>>2)]=1;
   label = 621; break;
  case 621: 
   label = 622; break;
  case 622: 
   label = 623; break;
  case 623: 
   label = 625; break;
  case 624: 
   label = 78; break;
  case 625: 
   label = 626; break;
  case 626: 
   var $4873=$pc;
   var $4874=(($4873+4)|0);
   $pc=$4874;
   var $4875=HEAP32[(($4874)>>2)];
   $i=$4875;
   var $4876=$i;
   var $4877=$4876 & 127;
   var $4878=((74668+($4877<<2))|0);
   var $4879=HEAP32[(($4878)>>2)];
   var $5866 = $4879;label = 709; break;
  case 627: 
   var $4881=$i;
   var $4882=$4881 >>> 23;
   var $4883=$4882 & 511;
   var $4884=$regs;
   var $4885=(($4884+((($4883)*(12))&-1))|0);
   var $4886=$1;
   var $4887=$i;
   var $4888=$4887 >>> 7;
   var $4889=$4888 & 127;
   var $4890=$i;
   var $4891=$4890 >>> 14;
   var $4892=$4891 & 511;
   var $4893=$regs;
   var $4894=(($4893+((($4892)*(12))&-1))|0);
   _mrb_ary_new_from_values($28, $4886, $4889, $4894);
   var $4895=$4885;
   var $4896=$28;
   assert(12 % 1 === 0);HEAP32[(($4895)>>2)]=HEAP32[(($4896)>>2)];HEAP32[((($4895)+(4))>>2)]=HEAP32[((($4896)+(4))>>2)];HEAP32[((($4895)+(8))>>2)]=HEAP32[((($4896)+(8))>>2)];
   var $4897=$1;
   var $4898=$ai;
   _mrb_gc_arena_restore($4897, $4898);
   var $4899=$pc;
   var $4900=(($4899+4)|0);
   $pc=$4900;
   var $4901=HEAP32[(($4900)>>2)];
   $i=$4901;
   var $4902=$i;
   var $4903=$4902 & 127;
   var $4904=((74668+($4903<<2))|0);
   var $4905=HEAP32[(($4904)>>2)];
   var $5866 = $4905;label = 709; break;
  case 628: 
   var $4907=$1;
   var $4908=$i;
   var $4909=$4908 >>> 23;
   var $4910=$4909 & 511;
   var $4911=$regs;
   var $4912=(($4911+((($4910)*(12))&-1))|0);
   var $4913=$1;
   var $4914=$i;
   var $4915=$4914 >>> 14;
   var $4916=$4915 & 511;
   var $4917=$regs;
   var $4918=(($4917+((($4916)*(12))&-1))|0);
   _mrb_ary_splat($29, $4913, $4918);
   _mrb_ary_concat($4907, $4912, $29);
   var $4919=$1;
   var $4920=$ai;
   _mrb_gc_arena_restore($4919, $4920);
   var $4921=$pc;
   var $4922=(($4921+4)|0);
   $pc=$4922;
   var $4923=HEAP32[(($4922)>>2)];
   $i=$4923;
   var $4924=$i;
   var $4925=$4924 & 127;
   var $4926=((74668+($4925<<2))|0);
   var $4927=HEAP32[(($4926)>>2)];
   var $5866 = $4927;label = 709; break;
  case 629: 
   var $4929=$1;
   var $4930=$i;
   var $4931=$4930 >>> 23;
   var $4932=$4931 & 511;
   var $4933=$regs;
   var $4934=(($4933+((($4932)*(12))&-1))|0);
   var $4935=$i;
   var $4936=$4935 >>> 14;
   var $4937=$4936 & 511;
   var $4938=$regs;
   var $4939=(($4938+((($4937)*(12))&-1))|0);
   _mrb_ary_push($4929, $4934, $4939);
   var $4940=$pc;
   var $4941=(($4940+4)|0);
   $pc=$4941;
   var $4942=HEAP32[(($4941)>>2)];
   $i=$4942;
   var $4943=$i;
   var $4944=$4943 & 127;
   var $4945=((74668+($4944<<2))|0);
   var $4946=HEAP32[(($4945)>>2)];
   var $5866 = $4946;label = 709; break;
  case 630: 
   var $4948=$i;
   var $4949=$4948 >>> 23;
   var $4950=$4949 & 511;
   $a85=$4950;
   var $4951=$i;
   var $4952=$4951 >>> 7;
   var $4953=$4952 & 127;
   $c86=$4953;
   var $4954=$i;
   var $4955=$4954 >>> 14;
   var $4956=$4955 & 511;
   var $4957=$regs;
   var $4958=(($4957+((($4956)*(12))&-1))|0);
   var $4959=$v87;
   var $4960=$4958;
   assert(12 % 1 === 0);HEAP32[(($4959)>>2)]=HEAP32[(($4960)>>2)];HEAP32[((($4959)+(4))>>2)]=HEAP32[((($4960)+(4))>>2)];HEAP32[((($4959)+(8))>>2)]=HEAP32[((($4960)+(8))>>2)];
   var $4961=(($v87+8)|0);
   var $4962=HEAP32[(($4961)>>2)];
   var $4963=(($4962)|(0))==14;
   if ($4963) { label = 637; break; } else { label = 631; break; }
  case 631: 
   var $4965=$c86;
   var $4966=(($4965)|(0))==0;
   if ($4966) { label = 632; break; } else { label = 633; break; }
  case 632: 
   var $4968=$i;
   var $4969=$4968 >>> 23;
   var $4970=$4969 & 511;
   var $4971=$regs;
   var $4972=(($4971+((($4970)*(12))&-1))|0);
   var $4973=$4972;
   var $4974=$v87;
   assert(12 % 1 === 0);HEAP32[(($4973)>>2)]=HEAP32[(($4974)>>2)];HEAP32[((($4973)+(4))>>2)]=HEAP32[((($4974)+(4))>>2)];HEAP32[((($4973)+(8))>>2)]=HEAP32[((($4974)+(8))>>2)];
   label = 636; break;
  case 633: 
   label = 634; break;
  case 634: 
   var $4977=$a85;
   var $4978=$regs;
   var $4979=(($4978+((($4977)*(12))&-1))|0);
   var $4980=(($4979+8)|0);
   HEAP32[(($4980)>>2)]=0;
   var $4981=$a85;
   var $4982=$regs;
   var $4983=(($4982+((($4981)*(12))&-1))|0);
   var $4984=(($4983)|0);
   var $4985=$4984;
   HEAP32[(($4985)>>2)]=0;
   label = 635; break;
  case 635: 
   label = 636; break;
  case 636: 
   label = 638; break;
  case 637: 
   var $4989=$i;
   var $4990=$4989 >>> 23;
   var $4991=$4990 & 511;
   var $4992=$regs;
   var $4993=(($4992+((($4991)*(12))&-1))|0);
   var $4994=$1;
   var $4995=$c86;
   _mrb_ary_ref($30, $4994, $v87, $4995);
   var $4996=$4993;
   var $4997=$30;
   assert(12 % 1 === 0);HEAP32[(($4996)>>2)]=HEAP32[(($4997)>>2)];HEAP32[((($4996)+(4))>>2)]=HEAP32[((($4997)+(4))>>2)];HEAP32[((($4996)+(8))>>2)]=HEAP32[((($4997)+(8))>>2)];
   label = 638; break;
  case 638: 
   var $4999=$pc;
   var $5000=(($4999+4)|0);
   $pc=$5000;
   var $5001=HEAP32[(($5000)>>2)];
   $i=$5001;
   var $5002=$i;
   var $5003=$5002 & 127;
   var $5004=((74668+($5003<<2))|0);
   var $5005=HEAP32[(($5004)>>2)];
   var $5866 = $5005;label = 709; break;
  case 639: 
   var $5007=$1;
   var $5008=$i;
   var $5009=$5008 >>> 14;
   var $5010=$5009 & 511;
   var $5011=$regs;
   var $5012=(($5011+((($5010)*(12))&-1))|0);
   var $5013=$i;
   var $5014=$5013 >>> 7;
   var $5015=$5014 & 127;
   var $5016=$i;
   var $5017=$5016 >>> 23;
   var $5018=$5017 & 511;
   var $5019=$regs;
   var $5020=(($5019+((($5018)*(12))&-1))|0);
   _mrb_ary_set($5007, $5012, $5015, $5020);
   var $5021=$pc;
   var $5022=(($5021+4)|0);
   $pc=$5022;
   var $5023=HEAP32[(($5022)>>2)];
   $i=$5023;
   var $5024=$i;
   var $5025=$5024 & 127;
   var $5026=((74668+($5025<<2))|0);
   var $5027=HEAP32[(($5026)>>2)];
   var $5866 = $5027;label = 709; break;
  case 640: 
   var $5029=$i;
   var $5030=$5029 >>> 23;
   var $5031=$5030 & 511;
   $a88=$5031;
   var $5032=$a88;
   var $5033=$regs;
   var $5034=(($5033+((($5032)*(12))&-1))|0);
   var $5035=$v89;
   var $5036=$5034;
   assert(12 % 1 === 0);HEAP32[(($5035)>>2)]=HEAP32[(($5036)>>2)];HEAP32[((($5035)+(4))>>2)]=HEAP32[((($5036)+(4))>>2)];HEAP32[((($5035)+(8))>>2)]=HEAP32[((($5036)+(8))>>2)];
   var $5037=$i;
   var $5038=$5037 >>> 14;
   var $5039=$5038 & 511;
   $pre=$5039;
   var $5040=$i;
   var $5041=$5040 >>> 7;
   var $5042=$5041 & 127;
   $post=$5042;
   var $5043=(($v89+8)|0);
   var $5044=HEAP32[(($5043)>>2)];
   var $5045=(($5044)|(0))==14;
   if ($5045) { label = 647; break; } else { label = 641; break; }
  case 641: 
   var $5047=$a88;
   var $5048=((($5047)+(1))|0);
   $a88=$5048;
   var $5049=$regs;
   var $5050=(($5049+((($5047)*(12))&-1))|0);
   var $5051=$1;
   _mrb_ary_new_capa($31, $5051, 0);
   var $5052=$5050;
   var $5053=$31;
   assert(12 % 1 === 0);HEAP32[(($5052)>>2)]=HEAP32[(($5053)>>2)];HEAP32[((($5052)+(4))>>2)]=HEAP32[((($5053)+(4))>>2)];HEAP32[((($5052)+(8))>>2)]=HEAP32[((($5053)+(8))>>2)];
   label = 642; break;
  case 642: 
   var $5055=$post;
   var $5056=((($5055)-(1))|0);
   $post=$5056;
   var $5057=(($5055)|(0))!=0;
   if ($5057) { label = 643; break; } else { label = 646; break; }
  case 643: 
   label = 644; break;
  case 644: 
   var $5060=$a88;
   var $5061=$regs;
   var $5062=(($5061+((($5060)*(12))&-1))|0);
   var $5063=(($5062+8)|0);
   HEAP32[(($5063)>>2)]=0;
   var $5064=$a88;
   var $5065=$regs;
   var $5066=(($5065+((($5064)*(12))&-1))|0);
   var $5067=(($5066)|0);
   var $5068=$5067;
   HEAP32[(($5068)>>2)]=0;
   label = 645; break;
  case 645: 
   var $5070=$a88;
   var $5071=((($5070)+(1))|0);
   $a88=$5071;
   label = 642; break;
  case 646: 
   label = 663; break;
  case 647: 
   var $5074=(($v89)|0);
   var $5075=$5074;
   var $5076=HEAP32[(($5075)>>2)];
   var $5077=$5076;
   $ary90=$5077;
   var $5078=$ary90;
   var $5079=(($5078+12)|0);
   var $5080=HEAP32[(($5079)>>2)];
   $len91=$5080;
   var $5081=$len91;
   var $5082=$pre;
   var $5083=$post;
   var $5084=((($5082)+($5083))|0);
   var $5085=(($5081)|(0)) > (($5084)|(0));
   if ($5085) { label = 648; break; } else { label = 652; break; }
  case 648: 
   var $5087=$a88;
   var $5088=((($5087)+(1))|0);
   $a88=$5088;
   var $5089=$regs;
   var $5090=(($5089+((($5087)*(12))&-1))|0);
   var $5091=$1;
   var $5092=$len91;
   var $5093=$pre;
   var $5094=((($5092)-($5093))|0);
   var $5095=$post;
   var $5096=((($5094)-($5095))|0);
   var $5097=$ary90;
   var $5098=(($5097+20)|0);
   var $5099=HEAP32[(($5098)>>2)];
   var $5100=$pre;
   var $5101=(($5099+((($5100)*(12))&-1))|0);
   _mrb_ary_new_from_values($32, $5091, $5096, $5101);
   var $5102=$5090;
   var $5103=$32;
   assert(12 % 1 === 0);HEAP32[(($5102)>>2)]=HEAP32[(($5103)>>2)];HEAP32[((($5102)+(4))>>2)]=HEAP32[((($5103)+(4))>>2)];HEAP32[((($5102)+(8))>>2)]=HEAP32[((($5103)+(8))>>2)];
   label = 649; break;
  case 649: 
   var $5105=$post;
   var $5106=((($5105)-(1))|0);
   $post=$5106;
   var $5107=(($5105)|(0))!=0;
   if ($5107) { label = 650; break; } else { label = 651; break; }
  case 650: 
   var $5109=$a88;
   var $5110=((($5109)+(1))|0);
   $a88=$5110;
   var $5111=$regs;
   var $5112=(($5111+((($5109)*(12))&-1))|0);
   var $5113=$len91;
   var $5114=$post;
   var $5115=((($5113)-($5114))|0);
   var $5116=((($5115)-(1))|0);
   var $5117=$ary90;
   var $5118=(($5117+20)|0);
   var $5119=HEAP32[(($5118)>>2)];
   var $5120=(($5119+((($5116)*(12))&-1))|0);
   var $5121=$5112;
   var $5122=$5120;
   assert(12 % 1 === 0);HEAP32[(($5121)>>2)]=HEAP32[(($5122)>>2)];HEAP32[((($5121)+(4))>>2)]=HEAP32[((($5122)+(4))>>2)];HEAP32[((($5121)+(8))>>2)]=HEAP32[((($5122)+(8))>>2)];
   label = 649; break;
  case 651: 
   label = 662; break;
  case 652: 
   var $5125=$a88;
   var $5126=((($5125)+(1))|0);
   $a88=$5126;
   var $5127=$regs;
   var $5128=(($5127+((($5125)*(12))&-1))|0);
   var $5129=$1;
   _mrb_ary_new_capa($33, $5129, 0);
   var $5130=$5128;
   var $5131=$33;
   assert(12 % 1 === 0);HEAP32[(($5130)>>2)]=HEAP32[(($5131)>>2)];HEAP32[((($5130)+(4))>>2)]=HEAP32[((($5131)+(4))>>2)];HEAP32[((($5130)+(8))>>2)]=HEAP32[((($5131)+(8))>>2)];
   $i92=0;
   label = 653; break;
  case 653: 
   var $5133=$i92;
   var $5134=$pre;
   var $5135=((($5133)+($5134))|0);
   var $5136=$len91;
   var $5137=(($5135)|(0)) < (($5136)|(0));
   if ($5137) { label = 654; break; } else { label = 656; break; }
  case 654: 
   var $5139=$a88;
   var $5140=$i92;
   var $5141=((($5139)+($5140))|0);
   var $5142=$regs;
   var $5143=(($5142+((($5141)*(12))&-1))|0);
   var $5144=$pre;
   var $5145=$i92;
   var $5146=((($5144)+($5145))|0);
   var $5147=$ary90;
   var $5148=(($5147+20)|0);
   var $5149=HEAP32[(($5148)>>2)];
   var $5150=(($5149+((($5146)*(12))&-1))|0);
   var $5151=$5143;
   var $5152=$5150;
   assert(12 % 1 === 0);HEAP32[(($5151)>>2)]=HEAP32[(($5152)>>2)];HEAP32[((($5151)+(4))>>2)]=HEAP32[((($5152)+(4))>>2)];HEAP32[((($5151)+(8))>>2)]=HEAP32[((($5152)+(8))>>2)];
   label = 655; break;
  case 655: 
   var $5154=$i92;
   var $5155=((($5154)+(1))|0);
   $i92=$5155;
   label = 653; break;
  case 656: 
   label = 657; break;
  case 657: 
   var $5158=$i92;
   var $5159=$post;
   var $5160=(($5158)|(0)) < (($5159)|(0));
   if ($5160) { label = 658; break; } else { label = 661; break; }
  case 658: 
   label = 659; break;
  case 659: 
   var $5163=$a88;
   var $5164=$i92;
   var $5165=((($5163)+($5164))|0);
   var $5166=$regs;
   var $5167=(($5166+((($5165)*(12))&-1))|0);
   var $5168=(($5167+8)|0);
   HEAP32[(($5168)>>2)]=0;
   var $5169=$a88;
   var $5170=$i92;
   var $5171=((($5169)+($5170))|0);
   var $5172=$regs;
   var $5173=(($5172+((($5171)*(12))&-1))|0);
   var $5174=(($5173)|0);
   var $5175=$5174;
   HEAP32[(($5175)>>2)]=0;
   label = 660; break;
  case 660: 
   var $5177=$i92;
   var $5178=((($5177)+(1))|0);
   $i92=$5178;
   label = 657; break;
  case 661: 
   label = 662; break;
  case 662: 
   label = 663; break;
  case 663: 
   var $5182=$1;
   var $5183=$ai;
   _mrb_gc_arena_restore($5182, $5183);
   var $5184=$pc;
   var $5185=(($5184+4)|0);
   $pc=$5185;
   var $5186=HEAP32[(($5185)>>2)];
   $i=$5186;
   var $5187=$i;
   var $5188=$5187 & 127;
   var $5189=((74668+($5188<<2))|0);
   var $5190=HEAP32[(($5189)>>2)];
   var $5866 = $5190;label = 709; break;
  case 664: 
   var $5192=$i;
   var $5193=$5192 >>> 23;
   var $5194=$5193 & 511;
   var $5195=$regs;
   var $5196=(($5195+((($5194)*(12))&-1))|0);
   var $5197=$1;
   var $5198=$i;
   var $5199=$5198 >>> 7;
   var $5200=$5199 & 65535;
   var $5201=$pool;
   var $5202=(($5201+((($5200)*(12))&-1))|0);
   _mrb_str_literal($34, $5197, $5202);
   var $5203=$5196;
   var $5204=$34;
   assert(12 % 1 === 0);HEAP32[(($5203)>>2)]=HEAP32[(($5204)>>2)];HEAP32[((($5203)+(4))>>2)]=HEAP32[((($5204)+(4))>>2)];HEAP32[((($5203)+(8))>>2)]=HEAP32[((($5204)+(8))>>2)];
   var $5205=$1;
   var $5206=$ai;
   _mrb_gc_arena_restore($5205, $5206);
   var $5207=$pc;
   var $5208=(($5207+4)|0);
   $pc=$5208;
   var $5209=HEAP32[(($5208)>>2)];
   $i=$5209;
   var $5210=$i;
   var $5211=$5210 & 127;
   var $5212=((74668+($5211<<2))|0);
   var $5213=HEAP32[(($5212)>>2)];
   var $5866 = $5213;label = 709; break;
  case 665: 
   var $5215=$1;
   var $5216=$i;
   var $5217=$5216 >>> 23;
   var $5218=$5217 & 511;
   var $5219=$regs;
   var $5220=(($5219+((($5218)*(12))&-1))|0);
   var $5221=$i;
   var $5222=$5221 >>> 14;
   var $5223=$5222 & 511;
   var $5224=$regs;
   var $5225=(($5224+((($5223)*(12))&-1))|0);
   _mrb_str_concat($5215, $5220, $5225);
   var $5226=$pc;
   var $5227=(($5226+4)|0);
   $pc=$5227;
   var $5228=HEAP32[(($5227)>>2)];
   $i=$5228;
   var $5229=$i;
   var $5230=$5229 & 127;
   var $5231=((74668+($5230<<2))|0);
   var $5232=HEAP32[(($5231)>>2)];
   var $5866 = $5232;label = 709; break;
  case 666: 
   var $5234=$i;
   var $5235=$5234 >>> 14;
   var $5236=$5235 & 511;
   $b=$5236;
   var $5237=$i;
   var $5238=$5237 >>> 7;
   var $5239=$5238 & 127;
   $c93=$5239;
   var $5240=$b;
   var $5241=$c93;
   var $5242=($5241<<1);
   var $5243=((($5240)+($5242))|0);
   $lim=$5243;
   var $5244=$1;
   var $5245=$c93;
   _mrb_hash_new_capa($hash, $5244, $5245);
   label = 667; break;
  case 667: 
   var $5247=$b;
   var $5248=$lim;
   var $5249=(($5247)|(0)) < (($5248)|(0));
   if ($5249) { label = 668; break; } else { label = 669; break; }
  case 668: 
   var $5251=$1;
   var $5252=$b;
   var $5253=$regs;
   var $5254=(($5253+((($5252)*(12))&-1))|0);
   var $5255=$b;
   var $5256=((($5255)+(1))|0);
   var $5257=$regs;
   var $5258=(($5257+((($5256)*(12))&-1))|0);
   _mrb_hash_set($5251, $hash, $5254, $5258);
   var $5259=$b;
   var $5260=((($5259)+(2))|0);
   $b=$5260;
   label = 667; break;
  case 669: 
   var $5262=$i;
   var $5263=$5262 >>> 23;
   var $5264=$5263 & 511;
   var $5265=$regs;
   var $5266=(($5265+((($5264)*(12))&-1))|0);
   var $5267=$5266;
   var $5268=$hash;
   assert(12 % 1 === 0);HEAP32[(($5267)>>2)]=HEAP32[(($5268)>>2)];HEAP32[((($5267)+(4))>>2)]=HEAP32[((($5268)+(4))>>2)];HEAP32[((($5267)+(8))>>2)]=HEAP32[((($5268)+(8))>>2)];
   var $5269=$1;
   var $5270=$ai;
   _mrb_gc_arena_restore($5269, $5270);
   var $5271=$pc;
   var $5272=(($5271+4)|0);
   $pc=$5272;
   var $5273=HEAP32[(($5272)>>2)];
   $i=$5273;
   var $5274=$i;
   var $5275=$5274 & 127;
   var $5276=((74668+($5275<<2))|0);
   var $5277=HEAP32[(($5276)>>2)];
   var $5866 = $5277;label = 709; break;
  case 670: 
   var $5279=$i;
   var $5280=$5279 >>> 7;
   var $5281=$5280 & 3;
   $c95=$5281;
   var $5282=$c95;
   var $5283=$5282 & 2;
   var $5284=(($5283)|(0))!=0;
   if ($5284) { label = 671; break; } else { label = 672; break; }
  case 671: 
   var $5286=$1;
   var $5287=$irep;
   var $5288=(($5287)|0);
   var $5289=HEAP32[(($5288)>>2)];
   var $5290=$i;
   var $5291=$5290 >>> 9;
   var $5292=$5291 & 16383;
   var $5293=((($5289)+($5292))|0);
   var $5294=$1;
   var $5295=(($5294+24)|0);
   var $5296=HEAP32[(($5295)>>2)];
   var $5297=(($5296+($5293<<2))|0);
   var $5298=HEAP32[(($5297)>>2)];
   var $5299=_mrb_closure_new($5286, $5298);
   $p94=$5299;
   label = 673; break;
  case 672: 
   var $5301=$1;
   var $5302=$irep;
   var $5303=(($5302)|0);
   var $5304=HEAP32[(($5303)>>2)];
   var $5305=$i;
   var $5306=$5305 >>> 9;
   var $5307=$5306 & 16383;
   var $5308=((($5304)+($5307))|0);
   var $5309=$1;
   var $5310=(($5309+24)|0);
   var $5311=HEAP32[(($5310)>>2)];
   var $5312=(($5311+($5308<<2))|0);
   var $5313=HEAP32[(($5312)>>2)];
   var $5314=_mrb_proc_new($5301, $5313);
   $p94=$5314;
   label = 673; break;
  case 673: 
   var $5316=$c95;
   var $5317=$5316 & 1;
   var $5318=(($5317)|(0))!=0;
   if ($5318) { label = 674; break; } else { label = 675; break; }
  case 674: 
   var $5320=$p94;
   var $5321=$5320;
   var $5322=HEAP32[(($5321)>>2)];
   var $5323=$5322 >>> 11;
   var $5324=$5323 & 2097151;
   var $5325=$5324 | 256;
   var $5326=$5325 & 2097151;
   var $5327=$5320;
   var $5328=$5326 & 2097151;
   var $5329=$5328 << 11;
   var $5330=HEAP32[(($5327)>>2)];
   var $5331=$5330 & 2047;
   var $5332=$5331 | $5329;
   HEAP32[(($5327)>>2)]=$5332;
   label = 675; break;
  case 675: 
   var $5334=$i;
   var $5335=$5334 >>> 23;
   var $5336=$5335 & 511;
   var $5337=$regs;
   var $5338=(($5337+((($5336)*(12))&-1))|0);
   var $5339=$p94;
   var $5340=$5339;
   _mrb_obj_value139($35, $5340);
   var $5341=$5338;
   var $5342=$35;
   assert(12 % 1 === 0);HEAP32[(($5341)>>2)]=HEAP32[(($5342)>>2)];HEAP32[((($5341)+(4))>>2)]=HEAP32[((($5342)+(4))>>2)];HEAP32[((($5341)+(8))>>2)]=HEAP32[((($5342)+(8))>>2)];
   var $5343=$1;
   var $5344=$ai;
   _mrb_gc_arena_restore($5343, $5344);
   var $5345=$pc;
   var $5346=(($5345+4)|0);
   $pc=$5346;
   var $5347=HEAP32[(($5346)>>2)];
   $i=$5347;
   var $5348=$i;
   var $5349=$5348 & 127;
   var $5350=((74668+($5349<<2))|0);
   var $5351=HEAP32[(($5350)>>2)];
   var $5866 = $5351;label = 709; break;
  case 676: 
   var $5353=$i;
   var $5354=$5353 >>> 23;
   var $5355=$5354 & 511;
   var $5356=$regs;
   var $5357=(($5356+((($5355)*(12))&-1))|0);
   var $5358=$1;
   var $5359=(($5358+44)|0);
   var $5360=HEAP32[(($5359)>>2)];
   var $5361=$5360;
   _mrb_obj_value139($36, $5361);
   var $5362=$5357;
   var $5363=$36;
   assert(12 % 1 === 0);HEAP32[(($5362)>>2)]=HEAP32[(($5363)>>2)];HEAP32[((($5362)+(4))>>2)]=HEAP32[((($5363)+(4))>>2)];HEAP32[((($5362)+(8))>>2)]=HEAP32[((($5363)+(8))>>2)];
   var $5364=$pc;
   var $5365=(($5364+4)|0);
   $pc=$5365;
   var $5366=HEAP32[(($5365)>>2)];
   $i=$5366;
   var $5367=$i;
   var $5368=$5367 & 127;
   var $5369=((74668+($5368<<2))|0);
   var $5370=HEAP32[(($5369)>>2)];
   var $5866 = $5370;label = 709; break;
  case 677: 
   $c96=0;
   var $5372=$i;
   var $5373=$5372 >>> 23;
   var $5374=$5373 & 511;
   $a97=$5374;
   var $5375=$i;
   var $5376=$5375 >>> 14;
   var $5377=$5376 & 511;
   var $5378=$syms;
   var $5379=(($5378+($5377<<1))|0);
   var $5380=HEAP16[(($5379)>>1)];
   $id=$5380;
   var $5381=$a97;
   var $5382=$regs;
   var $5383=(($5382+((($5381)*(12))&-1))|0);
   var $5384=$base;
   var $5385=$5383;
   assert(12 % 1 === 0);HEAP32[(($5384)>>2)]=HEAP32[(($5385)>>2)];HEAP32[((($5384)+(4))>>2)]=HEAP32[((($5385)+(4))>>2)];HEAP32[((($5384)+(8))>>2)]=HEAP32[((($5385)+(8))>>2)];
   var $5386=$a97;
   var $5387=((($5386)+(1))|0);
   var $5388=$regs;
   var $5389=(($5388+((($5387)*(12))&-1))|0);
   var $5390=$super;
   var $5391=$5389;
   assert(12 % 1 === 0);HEAP32[(($5390)>>2)]=HEAP32[(($5391)>>2)];HEAP32[((($5390)+(4))>>2)]=HEAP32[((($5391)+(4))>>2)];HEAP32[((($5390)+(8))>>2)]=HEAP32[((($5391)+(8))>>2)];
   var $5392=(($base+8)|0);
   var $5393=HEAP32[(($5392)>>2)];
   var $5394=(($5393)|(0))==0;
   if ($5394) { label = 678; break; } else { label = 680; break; }
  case 678: 
   var $5396=(($base)|0);
   var $5397=$5396;
   var $5398=HEAP32[(($5397)>>2)];
   var $5399=(($5398)|(0))!=0;
   if ($5399) { label = 680; break; } else { label = 679; break; }
  case 679: 
   var $5401=$1;
   var $5402=(($5401+8)|0);
   var $5403=HEAP32[(($5402)>>2)];
   var $5404=(($5403+16)|0);
   var $5405=HEAP32[(($5404)>>2)];
   var $5406=(($5405+28)|0);
   var $5407=HEAP32[(($5406)>>2)];
   var $5408=$5407;
   _mrb_obj_value139($37, $5408);
   var $5409=$base;
   var $5410=$37;
   assert(12 % 1 === 0);HEAP32[(($5409)>>2)]=HEAP32[(($5410)>>2)];HEAP32[((($5409)+(4))>>2)]=HEAP32[((($5410)+(4))>>2)];HEAP32[((($5409)+(8))>>2)]=HEAP32[((($5410)+(8))>>2)];
   label = 680; break;
  case 680: 
   var $5412=$1;
   var $5413=$id;
   var $5414=_mrb_vm_define_class($5412, $base, $super, $5413);
   $c96=$5414;
   var $5415=$a97;
   var $5416=$regs;
   var $5417=(($5416+((($5415)*(12))&-1))|0);
   var $5418=$c96;
   var $5419=$5418;
   _mrb_obj_value139($38, $5419);
   var $5420=$5417;
   var $5421=$38;
   assert(12 % 1 === 0);HEAP32[(($5420)>>2)]=HEAP32[(($5421)>>2)];HEAP32[((($5420)+(4))>>2)]=HEAP32[((($5421)+(4))>>2)];HEAP32[((($5420)+(8))>>2)]=HEAP32[((($5421)+(8))>>2)];
   var $5422=$1;
   var $5423=$ai;
   _mrb_gc_arena_restore($5422, $5423);
   var $5424=$pc;
   var $5425=(($5424+4)|0);
   $pc=$5425;
   var $5426=HEAP32[(($5425)>>2)];
   $i=$5426;
   var $5427=$i;
   var $5428=$5427 & 127;
   var $5429=((74668+($5428<<2))|0);
   var $5430=HEAP32[(($5429)>>2)];
   var $5866 = $5430;label = 709; break;
  case 681: 
   $c98=0;
   var $5432=$i;
   var $5433=$5432 >>> 23;
   var $5434=$5433 & 511;
   $a99=$5434;
   var $5435=$i;
   var $5436=$5435 >>> 14;
   var $5437=$5436 & 511;
   var $5438=$syms;
   var $5439=(($5438+($5437<<1))|0);
   var $5440=HEAP16[(($5439)>>1)];
   $id101=$5440;
   var $5441=$a99;
   var $5442=$regs;
   var $5443=(($5442+((($5441)*(12))&-1))|0);
   var $5444=$base100;
   var $5445=$5443;
   assert(12 % 1 === 0);HEAP32[(($5444)>>2)]=HEAP32[(($5445)>>2)];HEAP32[((($5444)+(4))>>2)]=HEAP32[((($5445)+(4))>>2)];HEAP32[((($5444)+(8))>>2)]=HEAP32[((($5445)+(8))>>2)];
   var $5446=(($base100+8)|0);
   var $5447=HEAP32[(($5446)>>2)];
   var $5448=(($5447)|(0))==0;
   if ($5448) { label = 682; break; } else { label = 684; break; }
  case 682: 
   var $5450=(($base100)|0);
   var $5451=$5450;
   var $5452=HEAP32[(($5451)>>2)];
   var $5453=(($5452)|(0))!=0;
   if ($5453) { label = 684; break; } else { label = 683; break; }
  case 683: 
   var $5455=$1;
   var $5456=(($5455+8)|0);
   var $5457=HEAP32[(($5456)>>2)];
   var $5458=(($5457+16)|0);
   var $5459=HEAP32[(($5458)>>2)];
   var $5460=(($5459+28)|0);
   var $5461=HEAP32[(($5460)>>2)];
   var $5462=$5461;
   _mrb_obj_value139($39, $5462);
   var $5463=$base100;
   var $5464=$39;
   assert(12 % 1 === 0);HEAP32[(($5463)>>2)]=HEAP32[(($5464)>>2)];HEAP32[((($5463)+(4))>>2)]=HEAP32[((($5464)+(4))>>2)];HEAP32[((($5463)+(8))>>2)]=HEAP32[((($5464)+(8))>>2)];
   label = 684; break;
  case 684: 
   var $5466=$1;
   var $5467=$id101;
   var $5468=_mrb_vm_define_module($5466, $base100, $5467);
   $c98=$5468;
   var $5469=$a99;
   var $5470=$regs;
   var $5471=(($5470+((($5469)*(12))&-1))|0);
   var $5472=$c98;
   var $5473=$5472;
   _mrb_obj_value139($40, $5473);
   var $5474=$5471;
   var $5475=$40;
   assert(12 % 1 === 0);HEAP32[(($5474)>>2)]=HEAP32[(($5475)>>2)];HEAP32[((($5474)+(4))>>2)]=HEAP32[((($5475)+(4))>>2)];HEAP32[((($5474)+(8))>>2)]=HEAP32[((($5475)+(8))>>2)];
   var $5476=$1;
   var $5477=$ai;
   _mrb_gc_arena_restore($5476, $5477);
   var $5478=$pc;
   var $5479=(($5478+4)|0);
   $pc=$5479;
   var $5480=HEAP32[(($5479)>>2)];
   $i=$5480;
   var $5481=$i;
   var $5482=$5481 & 127;
   var $5483=((74668+($5482<<2))|0);
   var $5484=HEAP32[(($5483)>>2)];
   var $5866 = $5484;label = 709; break;
  case 685: 
   var $5486=$i;
   var $5487=$5486 >>> 23;
   var $5488=$5487 & 511;
   $a102=$5488;
   var $5489=$a102;
   var $5490=$regs;
   var $5491=(($5490+((($5489)*(12))&-1))|0);
   var $5492=$recv104;
   var $5493=$5491;
   assert(12 % 1 === 0);HEAP32[(($5492)>>2)]=HEAP32[(($5493)>>2)];HEAP32[((($5492)+(4))>>2)]=HEAP32[((($5493)+(4))>>2)];HEAP32[((($5492)+(8))>>2)]=HEAP32[((($5493)+(8))>>2)];
   var $5494=$1;
   var $5495=_cipush($5494);
   $ci103=$5495;
   var $5496=$pc;
   var $5497=(($5496+4)|0);
   var $5498=$ci103;
   var $5499=(($5498+20)|0);
   HEAP32[(($5499)>>2)]=$5497;
   var $5500=$a102;
   var $5501=$ci103;
   var $5502=(($5501+24)|0);
   HEAP32[(($5502)>>2)]=$5500;
   var $5503=$ci103;
   var $5504=(($5503)|0);
   HEAP16[(($5504)>>1)]=0;
   var $5505=$1;
   var $5506=(($5505+8)|0);
   var $5507=HEAP32[(($5506)>>2)];
   var $5508=(($5507+4)|0);
   var $5509=HEAP32[(($5508)>>2)];
   var $5510=$1;
   var $5511=(($5510+8)|0);
   var $5512=HEAP32[(($5511)>>2)];
   var $5513=(($5512+8)|0);
   var $5514=HEAP32[(($5513)>>2)];
   var $5515=$5509;
   var $5516=$5514;
   var $5517=((($5515)-($5516))|0);
   var $5518=((((($5517)|(0)))/(12))&-1);
   var $5519=$ci103;
   var $5520=(($5519+8)|0);
   HEAP32[(($5520)>>2)]=$5518;
   var $5521=$ci103;
   var $5522=(($5521+16)|0);
   HEAP32[(($5522)>>2)]=0;
   var $5523=(($recv104)|0);
   var $5524=$5523;
   var $5525=HEAP32[(($5524)>>2)];
   var $5526=$5525;
   var $5527=$ci103;
   var $5528=(($5527+28)|0);
   HEAP32[(($5528)>>2)]=$5526;
   var $5529=$a102;
   var $5530=$1;
   var $5531=(($5530+8)|0);
   var $5532=HEAP32[(($5531)>>2)];
   var $5533=(($5532+4)|0);
   var $5534=HEAP32[(($5533)>>2)];
   var $5535=(($5534+((($5529)*(12))&-1))|0);
   HEAP32[(($5533)>>2)]=$5535;
   var $5536=$1;
   var $5537=$irep;
   var $5538=(($5537)|0);
   var $5539=HEAP32[(($5538)>>2)];
   var $5540=$i;
   var $5541=$5540 >>> 7;
   var $5542=$5541 & 65535;
   var $5543=((($5539)+($5542))|0);
   var $5544=$1;
   var $5545=(($5544+24)|0);
   var $5546=HEAP32[(($5545)>>2)];
   var $5547=(($5546+($5543<<2))|0);
   var $5548=HEAP32[(($5547)>>2)];
   var $5549=_mrb_proc_new($5536, $5548);
   $p105=$5549;
   var $5550=$ci103;
   var $5551=(($5550+28)|0);
   var $5552=HEAP32[(($5551)>>2)];
   var $5553=$p105;
   var $5554=(($5553+16)|0);
   HEAP32[(($5554)>>2)]=$5552;
   var $5555=$p105;
   var $5556=$ci103;
   var $5557=(($5556+4)|0);
   HEAP32[(($5557)>>2)]=$5555;
   var $5558=$p105;
   var $5559=$5558;
   var $5560=HEAP32[(($5559)>>2)];
   var $5561=$5560 >>> 11;
   var $5562=$5561 & 2097151;
   var $5563=$5562 & 128;
   var $5564=(($5563)|(0))!=0;
   if ($5564) { label = 686; break; } else { label = 689; break; }
  case 686: 
   var $5566=$1;
   var $5567=(($5566+8)|0);
   var $5568=HEAP32[(($5567)>>2)];
   var $5569=(($5568+4)|0);
   var $5570=HEAP32[(($5569)>>2)];
   var $5571=(($5570)|0);
   var $5572=$p105;
   var $5573=(($5572+12)|0);
   var $5574=$5573;
   var $5575=HEAP32[(($5574)>>2)];
   var $5576=$1;
   FUNCTION_TABLE[$5575]($41, $5576, $recv104);
   var $5577=$5571;
   var $5578=$41;
   assert(12 % 1 === 0);HEAP32[(($5577)>>2)]=HEAP32[(($5578)>>2)];HEAP32[((($5577)+(4))>>2)]=HEAP32[((($5578)+(4))>>2)];HEAP32[((($5577)+(8))>>2)]=HEAP32[((($5578)+(8))>>2)];
   var $5579=$1;
   var $5580=$ai;
   _mrb_gc_arena_restore($5579, $5580);
   var $5581=$1;
   var $5582=(($5581+16)|0);
   var $5583=HEAP32[(($5582)>>2)];
   var $5584=(($5583)|(0))!=0;
   if ($5584) { label = 687; break; } else { label = 688; break; }
  case 687: 
   label = 222; break;
  case 688: 
   var $5587=$1;
   var $5588=(($5587+8)|0);
   var $5589=HEAP32[(($5588)>>2)];
   var $5590=(($5589+8)|0);
   var $5591=HEAP32[(($5590)>>2)];
   var $5592=$1;
   var $5593=(($5592+8)|0);
   var $5594=HEAP32[(($5593)>>2)];
   var $5595=(($5594+16)|0);
   var $5596=HEAP32[(($5595)>>2)];
   var $5597=(($5596+8)|0);
   var $5598=HEAP32[(($5597)>>2)];
   var $5599=(($5591+((($5598)*(12))&-1))|0);
   var $5600=$1;
   var $5601=(($5600+8)|0);
   var $5602=HEAP32[(($5601)>>2)];
   var $5603=(($5602+4)|0);
   HEAP32[(($5603)>>2)]=$5599;
   $regs=$5599;
   var $5604=$1;
   _cipop($5604);
   var $5605=$pc;
   var $5606=(($5605+4)|0);
   $pc=$5606;
   var $5607=HEAP32[(($5606)>>2)];
   $i=$5607;
   var $5608=$i;
   var $5609=$5608 & 127;
   var $5610=((74668+($5609<<2))|0);
   var $5611=HEAP32[(($5610)>>2)];
   var $5866 = $5611;label = 709; break;
  case 689: 
   var $5613=$p105;
   var $5614=(($5613+12)|0);
   var $5615=$5614;
   var $5616=HEAP32[(($5615)>>2)];
   $irep=$5616;
   var $5617=$irep;
   var $5618=(($5617+16)|0);
   var $5619=HEAP32[(($5618)>>2)];
   $pool=$5619;
   var $5620=$irep;
   var $5621=(($5620+20)|0);
   var $5622=HEAP32[(($5621)>>2)];
   $syms=$5622;
   var $5623=$1;
   var $5624=$irep;
   var $5625=(($5624+6)|0);
   var $5626=HEAP16[(($5625)>>1)];
   var $5627=(($5626)&(65535));
   _stack_extend($5623, $5627, 1);
   var $5628=$irep;
   var $5629=(($5628+6)|0);
   var $5630=HEAP16[(($5629)>>1)];
   var $5631=(($5630)&(65535));
   var $5632=$ci103;
   var $5633=(($5632+12)|0);
   HEAP32[(($5633)>>2)]=$5631;
   var $5634=$1;
   var $5635=(($5634+8)|0);
   var $5636=HEAP32[(($5635)>>2)];
   var $5637=(($5636+4)|0);
   var $5638=HEAP32[(($5637)>>2)];
   $regs=$5638;
   var $5639=$irep;
   var $5640=(($5639+12)|0);
   var $5641=HEAP32[(($5640)>>2)];
   $pc=$5641;
   var $5642=$pc;
   var $5643=HEAP32[(($5642)>>2)];
   $i=$5643;
   var $5644=$i;
   var $5645=$5644 & 127;
   var $5646=((74668+($5645<<2))|0);
   var $5647=HEAP32[(($5646)>>2)];
   var $5866 = $5647;label = 709; break;
  case 690: 
   var $5649=$i;
   var $5650=$5649 >>> 23;
   var $5651=$5650 & 511;
   $a106=$5651;
   var $5652=$a106;
   var $5653=$regs;
   var $5654=(($5653+((($5652)*(12))&-1))|0);
   var $5655=(($5654)|0);
   var $5656=$5655;
   var $5657=HEAP32[(($5656)>>2)];
   var $5658=$5657;
   $c107=$5658;
   var $5659=$1;
   var $5660=$c107;
   var $5661=$i;
   var $5662=$5661 >>> 14;
   var $5663=$5662 & 511;
   var $5664=$syms;
   var $5665=(($5664+($5663<<1))|0);
   var $5666=HEAP16[(($5665)>>1)];
   var $5667=$a106;
   var $5668=((($5667)+(1))|0);
   var $5669=$regs;
   var $5670=(($5669+((($5668)*(12))&-1))|0);
   _mrb_define_method_vm($5659, $5660, $5666, $5670);
   var $5671=$1;
   var $5672=$ai;
   _mrb_gc_arena_restore($5671, $5672);
   var $5673=$pc;
   var $5674=(($5673+4)|0);
   $pc=$5674;
   var $5675=HEAP32[(($5674)>>2)];
   $i=$5675;
   var $5676=$i;
   var $5677=$5676 & 127;
   var $5678=((74668+($5677<<2))|0);
   var $5679=HEAP32[(($5678)>>2)];
   var $5866 = $5679;label = 709; break;
  case 691: 
   var $5681=$i;
   var $5682=$5681 >>> 23;
   var $5683=$5682 & 511;
   var $5684=$regs;
   var $5685=(($5684+((($5683)*(12))&-1))|0);
   var $5686=$1;
   var $5687=$i;
   var $5688=$5687 >>> 14;
   var $5689=$5688 & 511;
   var $5690=$regs;
   var $5691=(($5690+((($5689)*(12))&-1))|0);
   _mrb_singleton_class($42, $5686, $5691);
   var $5692=$5685;
   var $5693=$42;
   assert(12 % 1 === 0);HEAP32[(($5692)>>2)]=HEAP32[(($5693)>>2)];HEAP32[((($5692)+(4))>>2)]=HEAP32[((($5693)+(4))>>2)];HEAP32[((($5692)+(8))>>2)]=HEAP32[((($5693)+(8))>>2)];
   var $5694=$1;
   var $5695=$ai;
   _mrb_gc_arena_restore($5694, $5695);
   var $5696=$pc;
   var $5697=(($5696+4)|0);
   $pc=$5697;
   var $5698=HEAP32[(($5697)>>2)];
   $i=$5698;
   var $5699=$i;
   var $5700=$5699 & 127;
   var $5701=((74668+($5700<<2))|0);
   var $5702=HEAP32[(($5701)>>2)];
   var $5866 = $5702;label = 709; break;
  case 692: 
   var $5704=$1;
   var $5705=(($5704+8)|0);
   var $5706=HEAP32[(($5705)>>2)];
   var $5707=(($5706+16)|0);
   var $5708=HEAP32[(($5707)>>2)];
   var $5709=(($5708+28)|0);
   var $5710=HEAP32[(($5709)>>2)];
   var $5711=(($5710)|(0))!=0;
   if ($5711) { label = 694; break; } else { label = 693; break; }
  case 693: 
   var $5713=$1;
   var $5714=$1;
   var $5715=_mrb_class_get($5714, ((105944)|0));
   _mrb_exc_new($exc108, $5713, $5715, ((74972)|0), 25);
   var $5716=(($exc108)|0);
   var $5717=$5716;
   var $5718=HEAP32[(($5717)>>2)];
   var $5719=$5718;
   var $5720=$1;
   var $5721=(($5720+16)|0);
   HEAP32[(($5721)>>2)]=$5719;
   label = 222; break;
  case 694: 
   var $5723=$i;
   var $5724=$5723 >>> 23;
   var $5725=$5724 & 511;
   var $5726=$regs;
   var $5727=(($5726+((($5725)*(12))&-1))|0);
   var $5728=$1;
   var $5729=(($5728+8)|0);
   var $5730=HEAP32[(($5729)>>2)];
   var $5731=(($5730+16)|0);
   var $5732=HEAP32[(($5731)>>2)];
   var $5733=(($5732+28)|0);
   var $5734=HEAP32[(($5733)>>2)];
   var $5735=$5734;
   _mrb_obj_value139($43, $5735);
   var $5736=$5727;
   var $5737=$43;
   assert(12 % 1 === 0);HEAP32[(($5736)>>2)]=HEAP32[(($5737)>>2)];HEAP32[((($5736)+(4))>>2)]=HEAP32[((($5737)+(4))>>2)];HEAP32[((($5736)+(8))>>2)]=HEAP32[((($5737)+(8))>>2)];
   var $5738=$pc;
   var $5739=(($5738+4)|0);
   $pc=$5739;
   var $5740=HEAP32[(($5739)>>2)];
   $i=$5740;
   var $5741=$i;
   var $5742=$5741 & 127;
   var $5743=((74668+($5742<<2))|0);
   var $5744=HEAP32[(($5743)>>2)];
   var $5866 = $5744;label = 709; break;
  case 695: 
   var $5746=$i;
   var $5747=$5746 >>> 14;
   var $5748=$5747 & 511;
   $b109=$5748;
   var $5749=$i;
   var $5750=$5749 >>> 23;
   var $5751=$5750 & 511;
   var $5752=$regs;
   var $5753=(($5752+((($5751)*(12))&-1))|0);
   var $5754=$1;
   var $5755=$b109;
   var $5756=$regs;
   var $5757=(($5756+((($5755)*(12))&-1))|0);
   var $5758=$b109;
   var $5759=((($5758)+(1))|0);
   var $5760=$regs;
   var $5761=(($5760+((($5759)*(12))&-1))|0);
   var $5762=$i;
   var $5763=$5762 >>> 7;
   var $5764=$5763 & 127;
   _mrb_range_new($44, $5754, $5757, $5761, $5764);
   var $5765=$5753;
   var $5766=$44;
   assert(12 % 1 === 0);HEAP32[(($5765)>>2)]=HEAP32[(($5766)>>2)];HEAP32[((($5765)+(4))>>2)]=HEAP32[((($5766)+(4))>>2)];HEAP32[((($5765)+(8))>>2)]=HEAP32[((($5766)+(8))>>2)];
   var $5767=$1;
   var $5768=$ai;
   _mrb_gc_arena_restore($5767, $5768);
   var $5769=$pc;
   var $5770=(($5769+4)|0);
   $pc=$5770;
   var $5771=HEAP32[(($5770)>>2)];
   $i=$5771;
   var $5772=$i;
   var $5773=$5772 & 127;
   var $5774=((74668+($5773<<2))|0);
   var $5775=HEAP32[(($5774)>>2)];
   var $5866 = $5775;label = 709; break;
  case 696: 
   var $5777=$i;
   var $5778=$5777 >>> 23;
   var $5779=$5778 & 511;
   var $5780=$i;
   var $5781=$5780 >>> 14;
   var $5782=$5781 & 511;
   var $5783=$i;
   var $5784=$5783 >>> 7;
   var $5785=$5784 & 127;
   var $5786=_printf(((105324)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$5779,HEAP32[(((tempInt)+(4))>>2)]=$5782,HEAP32[(((tempInt)+(8))>>2)]=$5785,tempInt));
   var $5787=$pc;
   var $5788=(($5787+4)|0);
   $pc=$5788;
   var $5789=HEAP32[(($5788)>>2)];
   $i=$5789;
   var $5790=$i;
   var $5791=$5790 & 127;
   var $5792=((74668+($5791<<2))|0);
   var $5793=HEAP32[(($5792)>>2)];
   var $5866 = $5793;label = 709; break;
  case 697: 
   label = 698; break;
  case 698: 
   var $5796=$1;
   var $5797=(($5796+8)|0);
   var $5798=HEAP32[(($5797)>>2)];
   var $5799=(($5798+16)|0);
   var $5800=HEAP32[(($5799)>>2)];
   var $5801=(($5800+36)|0);
   var $5802=HEAP32[(($5801)>>2)];
   $n110=$5802;
   label = 699; break;
  case 699: 
   var $5804=$n110;
   var $5805=((($5804)-(1))|0);
   $n110=$5805;
   var $5806=(($5804)|(0))!=0;
   if ($5806) { label = 700; break; } else { label = 701; break; }
  case 700: 
   var $5808=$1;
   var $5809=$n110;
   _ecall($5808, $5809);
   label = 699; break;
  case 701: 
   var $5811=$prev_jmp;
   var $5812=$5811;
   var $5813=$1;
   var $5814=(($5813)|0);
   HEAP32[(($5814)>>2)]=$5812;
   var $5815=$1;
   var $5816=(($5815+16)|0);
   var $5817=HEAP32[(($5816)>>2)];
   var $5818=(($5817)|(0))!=0;
   if ($5818) { label = 702; break; } else { label = 703; break; }
  case 702: 
   var $5820=$1;
   var $5821=(($5820+16)|0);
   var $5822=HEAP32[(($5821)>>2)];
   var $5823=$5822;
   _mrb_obj_value139($agg_result, $5823);
   label = 708; break;
  case 703: 
   var $5825=$irep;
   var $5826=(($5825+4)|0);
   var $5827=HEAP16[(($5826)>>1)];
   var $5828=(($5827)&(65535));
   var $5829=$regs;
   var $5830=(($5829+((($5828)*(12))&-1))|0);
   var $5831=$agg_result;
   var $5832=$5830;
   assert(12 % 1 === 0);HEAP32[(($5831)>>2)]=HEAP32[(($5832)>>2)];HEAP32[((($5831)+(4))>>2)]=HEAP32[((($5832)+(4))>>2)];HEAP32[((($5831)+(8))>>2)]=HEAP32[((($5832)+(8))>>2)];
   label = 708; break;
  case 704: 
   var $5834=$i;
   var $5835=$5834 >>> 7;
   var $5836=$5835 & 65535;
   var $5837=$pool;
   var $5838=(($5837+((($5836)*(12))&-1))|0);
   var $5839=$msg;
   var $5840=$5838;
   assert(12 % 1 === 0);HEAP32[(($5839)>>2)]=HEAP32[(($5840)>>2)];HEAP32[((($5839)+(4))>>2)]=HEAP32[((($5840)+(4))>>2)];HEAP32[((($5839)+(8))>>2)]=HEAP32[((($5840)+(8))>>2)];
   var $5841=$i;
   var $5842=$5841 >>> 23;
   var $5843=$5842 & 511;
   var $5844=(($5843)|(0))==0;
   if ($5844) { label = 705; break; } else { label = 706; break; }
  case 705: 
   var $5846=$1;
   var $5847=$1;
   var $5848=_mrb_class_get($5847, ((87360)|0));
   _mrb_exc_new3($45, $5846, $5848, $msg);
   var $5849=$exc111;
   var $5850=$45;
   assert(12 % 1 === 0);HEAP32[(($5849)>>2)]=HEAP32[(($5850)>>2)];HEAP32[((($5849)+(4))>>2)]=HEAP32[((($5850)+(4))>>2)];HEAP32[((($5849)+(8))>>2)]=HEAP32[((($5850)+(8))>>2)];
   label = 707; break;
  case 706: 
   var $5852=$1;
   var $5853=$1;
   var $5854=_mrb_class_get($5853, ((104548)|0));
   _mrb_exc_new3($46, $5852, $5854, $msg);
   var $5855=$exc111;
   var $5856=$46;
   assert(12 % 1 === 0);HEAP32[(($5855)>>2)]=HEAP32[(($5856)>>2)];HEAP32[((($5855)+(4))>>2)]=HEAP32[((($5856)+(4))>>2)];HEAP32[((($5855)+(8))>>2)]=HEAP32[((($5856)+(8))>>2)];
   label = 707; break;
  case 707: 
   var $5858=(($exc111)|0);
   var $5859=$5858;
   var $5860=HEAP32[(($5859)>>2)];
   var $5861=$5860;
   var $5862=$1;
   var $5863=(($5862+16)|0);
   HEAP32[(($5863)>>2)]=$5861;
   label = 222; break;
  case 708: 
   STACKTOP = sp;
   return;
  case 709: 
   var $5866;
   var ibr = $5866;
   label = ibr; break;
  default: assert(0, "bad label: " + label);
 }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function _uvenv($mrb, $up) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $e;
   $2=$mrb;
   $3=$up;
   var $4=$2;
   var $5=(($4+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6+16)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10+20)|0);
   var $12=HEAP32[(($11)>>2)];
   $e=$12;
   label = 2; break;
  case 2: 
   var $14=$3;
   var $15=((($14)-(1))|0);
   $3=$15;
   var $16=(($14)|(0))!=0;
   if ($16) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $18=$e;
   var $19=(($18)|(0))!=0;
   if ($19) { label = 5; break; } else { label = 4; break; }
  case 4: 
   $1=0;
   label = 7; break;
  case 5: 
   var $22=$e;
   var $23=(($22+4)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$24;
   $e=$25;
   label = 2; break;
  case 6: 
   var $27=$e;
   $1=$27;
   label = 7; break;
  case 7: 
   var $29=$1;
   return $29;
  default: assert(0, "bad label: " + label);
 }
}
function _is_strict($mrb, $e) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $cioff;
   $2=$mrb;
   $3=$e;
   var $4=$3;
   var $5=(($4+20)|0);
   var $6=HEAP32[(($5)>>2)];
   $cioff=$6;
   var $7=$cioff;
   var $8=(($7)|(0)) >= 0;
   if ($8) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $10=$cioff;
   var $11=$2;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13+20)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15+((($10)*(44))&-1))|0);
   var $17=(($16+4)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18)|(0))!=0;
   if ($19) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $21=$cioff;
   var $22=$2;
   var $23=(($22+8)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24+20)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26+((($21)*(44))&-1))|0);
   var $28=(($27+4)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$29;
   var $31=HEAP32[(($30)>>2)];
   var $32=$31 >>> 11;
   var $33=$32 & 2097151;
   var $34=$33 & 256;
   var $35=(($34)|(0))!=0;
   if ($35) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $1=1;
   label = 6; break;
  case 5: 
   $1=0;
   label = 6; break;
  case 6: 
   var $39=$1;
   return $39;
  default: assert(0, "bad label: " + label);
 }
}
function _envadjust($mrb, $oldbase, $newbase) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $ci;
   var $e;
   var $off;
   $1=$mrb;
   $2=$oldbase;
   $3=$newbase;
   var $4=$1;
   var $5=(($4+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6+20)|0);
   var $8=HEAP32[(($7)>>2)];
   $ci=$8;
   label = 2; break;
  case 2: 
   var $10=$ci;
   var $11=$1;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13+16)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($10)>>>(0)) <= (($15)>>>(0));
   if ($16) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $18=$ci;
   var $19=(($18+40)|0);
   var $20=HEAP32[(($19)>>2)];
   $e=$20;
   var $21=$e;
   var $22=(($21)|(0))!=0;
   if ($22) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $24=$e;
   var $25=(($24+20)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|(0)) >= 0;
   if ($27) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $29=$e;
   var $30=(($29+12)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$2;
   var $33=$31;
   var $34=$32;
   var $35=((($33)-($34))|0);
   var $36=((((($35)|(0)))/(12))&-1);
   $off=$36;
   var $37=$3;
   var $38=$off;
   var $39=(($37+((($38)*(12))&-1))|0);
   var $40=$e;
   var $41=(($40+12)|0);
   HEAP32[(($41)>>2)]=$39;
   label = 6; break;
  case 6: 
   var $43=$ci;
   var $44=(($43+44)|0);
   $ci=$44;
   label = 2; break;
  case 7: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _parsing_heredoc_inf($p) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $nd;
   $2=$p;
   var $3=$2;
   var $4=(($3+1116)|0);
   var $5=HEAP32[(($4)>>2)];
   $nd=$5;
   var $6=$nd;
   var $7=(($6)|(0))==0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=0;
   label = 4; break;
  case 3: 
   var $10=$nd;
   var $11=(($10)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$14;
   $1=$15;
   label = 4; break;
  case 4: 
   var $17=$1;
   return $17;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value144($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_yield_internal($agg_result, $mrb, $b, $argc, $argv, $self, $c) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $p;
   var $mid;
   var $ci;
   var $n;
   var $val=sp;
   var $5=(sp)+(12);
   var $6=(sp)+(24);
   var $7=(sp)+(36);
   $1=$mrb;
   $2=$argc;
   $3=$argv;
   $4=$c;
   var $8=$1;
   var $9=(($8+8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10+16)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|0);
   var $14=HEAP16[(($13)>>1)];
   $mid=$14;
   var $15=$1;
   var $16=(($15+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17+16)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19+12)|0);
   var $21=HEAP32[(($20)>>2)];
   $n=$21;
   var $22=(($b+8)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0))==0;
   if ($24) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $26=(($b)|0);
   var $27=$26;
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|(0))!=0;
   if ($29) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $31=$1;
   var $32=$1;
   var $33=_mrb_class_get($32, ((104740)|0));
   _mrb_raise($31, $33, ((94212)|0));
   label = 4; break;
  case 4: 
   var $35=(($b)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=$37;
   $p=$38;
   var $39=$1;
   var $40=_cipush($39);
   $ci=$40;
   var $41=$mid;
   var $42=$ci;
   var $43=(($42)|0);
   HEAP16[(($43)>>1)]=$41;
   var $44=$p;
   var $45=$ci;
   var $46=(($45+4)|0);
   HEAP32[(($46)>>2)]=$44;
   var $47=$1;
   var $48=(($47+8)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+4)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$1;
   var $53=(($52+8)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($54+8)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=$51;
   var $58=$56;
   var $59=((($57)-($58))|0);
   var $60=((((($59)|(0)))/(12))&-1);
   var $61=$ci;
   var $62=(($61+8)|0);
   HEAP32[(($62)>>2)]=$60;
   var $63=$2;
   var $64=$ci;
   var $65=(($64+16)|0);
   HEAP32[(($65)>>2)]=$63;
   var $66=$4;
   var $67=$ci;
   var $68=(($67+28)|0);
   HEAP32[(($68)>>2)]=$66;
   var $69=$p;
   var $70=$69;
   var $71=HEAP32[(($70)>>2)];
   var $72=$71 >>> 11;
   var $73=$72 & 2097151;
   var $74=$73 & 128;
   var $75=(($74)|(0))!=0;
   if ($75) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $77=$2;
   var $78=((($77)+(2))|0);
   var $79=$ci;
   var $80=(($79+12)|0);
   HEAP32[(($80)>>2)]=$78;
   label = 7; break;
  case 6: 
   var $82=$p;
   var $83=(($82+12)|0);
   var $84=$83;
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+6)|0);
   var $87=HEAP16[(($86)>>1)];
   var $88=(($87)&(65535));
   var $89=((($88)+(1))|0);
   var $90=$ci;
   var $91=(($90+12)|0);
   HEAP32[(($91)>>2)]=$89;
   label = 7; break;
  case 7: 
   var $93=$ci;
   var $94=(($93+24)|0);
   HEAP32[(($94)>>2)]=-1;
   var $95=$1;
   var $96=(($95+8)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=(($97+4)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=$n;
   var $101=(($99+((($100)*(12))&-1))|0);
   var $102=$1;
   var $103=(($102+8)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104+4)|0);
   HEAP32[(($105)>>2)]=$101;
   var $106=$1;
   var $107=$ci;
   var $108=(($107+12)|0);
   var $109=HEAP32[(($108)>>2)];
   _stack_extend($106, $109, 0);
   var $110=$1;
   var $111=(($110+8)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=(($112+4)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($114)|0);
   var $116=$115;
   var $117=$self;
   assert(12 % 1 === 0);HEAP32[(($116)>>2)]=HEAP32[(($117)>>2)];HEAP32[((($116)+(4))>>2)]=HEAP32[((($117)+(4))>>2)];HEAP32[((($116)+(8))>>2)]=HEAP32[((($117)+(8))>>2)];
   var $118=$2;
   var $119=(($118)|(0)) > 0;
   if ($119) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $121=$1;
   var $122=(($121+8)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124=(($123+4)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=(($125+12)|0);
   var $127=$3;
   var $128=$2;
   _stack_copy($126, $127, $128);
   label = 9; break;
  case 9: 
   var $130=$2;
   var $131=((($130)+(1))|0);
   var $132=$1;
   var $133=(($132+8)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135=(($134+4)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136+((($131)*(12))&-1))|0);
   _mrb_nil_value144($5);
   var $138=$137;
   var $139=$5;
   assert(12 % 1 === 0);HEAP32[(($138)>>2)]=HEAP32[(($139)>>2)];HEAP32[((($138)+(4))>>2)]=HEAP32[((($139)+(4))>>2)];HEAP32[((($138)+(8))>>2)]=HEAP32[((($139)+(8))>>2)];
   var $140=$p;
   var $141=$140;
   var $142=HEAP32[(($141)>>2)];
   var $143=$142 >>> 11;
   var $144=$143 & 2097151;
   var $145=$144 & 128;
   var $146=(($145)|(0))!=0;
   if ($146) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $148=$p;
   var $149=(($148+12)|0);
   var $150=$149;
   var $151=HEAP32[(($150)>>2)];
   var $152=$1;
   FUNCTION_TABLE[$151]($6, $152, $self);
   var $153=$val;
   var $154=$6;
   assert(12 % 1 === 0);HEAP32[(($153)>>2)]=HEAP32[(($154)>>2)];HEAP32[((($153)+(4))>>2)]=HEAP32[((($154)+(4))>>2)];HEAP32[((($153)+(8))>>2)]=HEAP32[((($154)+(8))>>2)];
   var $155=$1;
   var $156=(($155+8)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=(($157+8)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=$1;
   var $161=(($160+8)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=(($162+16)|0);
   var $164=HEAP32[(($163)>>2)];
   var $165=(($164+8)|0);
   var $166=HEAP32[(($165)>>2)];
   var $167=(($159+((($166)*(12))&-1))|0);
   var $168=$1;
   var $169=(($168+8)|0);
   var $170=HEAP32[(($169)>>2)];
   var $171=(($170+4)|0);
   HEAP32[(($171)>>2)]=$167;
   var $172=$1;
   _cipop($172);
   label = 12; break;
  case 11: 
   var $174=$1;
   var $175=$p;
   _mrb_run($7, $174, $175, $self);
   var $176=$val;
   var $177=$7;
   assert(12 % 1 === 0);HEAP32[(($176)>>2)]=HEAP32[(($177)>>2)];HEAP32[((($176)+(4))>>2)]=HEAP32[((($177)+(4))>>2)];HEAP32[((($176)+(8))>>2)]=HEAP32[((($177)+(8))>>2)];
   label = 12; break;
  case 12: 
   var $179=$agg_result;
   var $180=$val;
   assert(12 % 1 === 0);HEAP32[(($179)>>2)]=HEAP32[(($180)>>2)];HEAP32[((($179)+(4))>>2)]=HEAP32[((($180)+(4))>>2)];HEAP32[((($179)+(8))>>2)]=HEAP32[((($180)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _ecall($mrb, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $p;
   var $ci;
   var $self;
   var $exc;
   var $3=sp;
   $1=$mrb;
   $2=$i;
   var $4=$1;
   var $5=(($4+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6+4)|0);
   var $8=HEAP32[(($7)>>2)];
   $self=$8;
   var $9=$2;
   var $10=$1;
   var $11=(($10+8)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12+36)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14+($9<<2))|0);
   var $16=HEAP32[(($15)>>2)];
   $p=$16;
   var $17=$p;
   var $18=(($17)|(0))!=0;
   if ($18) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 5; break;
  case 3: 
   var $21=$1;
   var $22=_cipush($21);
   $ci=$22;
   var $23=$1;
   var $24=(($23+8)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25+4)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$1;
   var $29=(($28+8)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30+8)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$27;
   var $34=$32;
   var $35=((($33)-($34))|0);
   var $36=((((($35)|(0)))/(12))&-1);
   var $37=$ci;
   var $38=(($37+8)|0);
   HEAP32[(($38)>>2)]=$36;
   var $39=$ci;
   var $40=((($39)-(44))|0);
   var $41=(($40)|0);
   var $42=HEAP16[(($41)>>1)];
   var $43=$ci;
   var $44=(($43)|0);
   HEAP16[(($44)>>1)]=$42;
   var $45=$ci;
   var $46=(($45+24)|0);
   HEAP32[(($46)>>2)]=-1;
   var $47=$ci;
   var $48=(($47+16)|0);
   HEAP32[(($48)>>2)]=0;
   var $49=$p;
   var $50=$ci;
   var $51=(($50+4)|0);
   HEAP32[(($51)>>2)]=$49;
   var $52=$p;
   var $53=(($52+12)|0);
   var $54=$53;
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+6)|0);
   var $57=HEAP16[(($56)>>1)];
   var $58=(($57)&(65535));
   var $59=$ci;
   var $60=(($59+12)|0);
   HEAP32[(($60)>>2)]=$58;
   var $61=$p;
   var $62=(($61+16)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=$ci;
   var $65=(($64+28)|0);
   HEAP32[(($65)>>2)]=$63;
   var $66=$1;
   var $67=(($66+8)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=(($68+4)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=$ci;
   var $72=((($71)-(44))|0);
   var $73=(($72+12)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=(($70+((($74)*(12))&-1))|0);
   var $76=$1;
   var $77=(($76+8)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=(($78+4)|0);
   HEAP32[(($79)>>2)]=$75;
   var $80=$1;
   var $81=(($80+16)|0);
   var $82=HEAP32[(($81)>>2)];
   $exc=$82;
   var $83=$1;
   var $84=(($83+16)|0);
   HEAP32[(($84)>>2)]=0;
   var $85=$1;
   var $86=$p;
   var $87=$self;
   _mrb_run($3, $85, $86, $87);
   var $88=$2;
   var $89=$1;
   var $90=(($89+8)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=(($91+36)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=(($93+($88<<2))|0);
   HEAP32[(($94)>>2)]=0;
   var $95=$1;
   var $96=(($95+16)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=(($97)|(0))!=0;
   if ($98) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $100=$exc;
   var $101=$1;
   var $102=(($101+16)|0);
   HEAP32[(($102)>>2)]=$100;
   label = 5; break;
  case 5: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _value_move($s1, $s2, $n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$s1;
   $2=$s2;
   $3=$n;
   var $4=$1;
   var $5=$2;
   var $6=(($4)>>>(0)) > (($5)>>>(0));
   if ($6) { label = 2; break; } else { label = 7; break; }
  case 2: 
   var $8=$1;
   var $9=$2;
   var $10=$3;
   var $11=(($9+((($10)*(12))&-1))|0);
   var $12=(($8)>>>(0)) < (($11)>>>(0));
   if ($12) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $14=$3;
   var $15=$1;
   var $16=(($15+((($14)*(12))&-1))|0);
   $1=$16;
   var $17=$3;
   var $18=$2;
   var $19=(($18+((($17)*(12))&-1))|0);
   $2=$19;
   label = 4; break;
  case 4: 
   var $21=$3;
   var $22=((($21)-(1))|0);
   $3=$22;
   var $23=(($21)>>>(0)) > 0;
   if ($23) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $25=$1;
   var $26=((($25)-(12))|0);
   $1=$26;
   var $27=$2;
   var $28=((($27)-(12))|0);
   $2=$28;
   var $29=$26;
   var $30=$28;
   assert(12 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($29)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];
   label = 4; break;
  case 6: 
   label = 14; break;
  case 7: 
   var $33=$1;
   var $34=$2;
   var $35=(($33)|(0))!=(($34)|(0));
   if ($35) { label = 8; break; } else { label = 12; break; }
  case 8: 
   label = 9; break;
  case 9: 
   var $38=$3;
   var $39=((($38)-(1))|0);
   $3=$39;
   var $40=(($38)>>>(0)) > 0;
   if ($40) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $42=$1;
   var $43=(($42+12)|0);
   $1=$43;
   var $44=$2;
   var $45=(($44+12)|0);
   $2=$45;
   var $46=$42;
   var $47=$44;
   assert(12 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($46)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];
   label = 9; break;
  case 11: 
   label = 13; break;
  case 12: 
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _argnum_error($mrb, $num) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $exc=sp;
   var $str=(sp)+(12);
   var $3=(sp)+(24);
   var $4=(sp)+(36);
   var $5=(sp)+(48);
   var $6=(sp)+(60);
   var $7=(sp)+(72);
   var $8=(sp)+(84);
   var $9=(sp)+(96);
   var $10=(sp)+(108);
   $1=$mrb;
   $2=$num;
   var $11=$1;
   var $12=(($11+8)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13+16)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|0);
   var $17=HEAP16[(($16)>>1)];
   var $18=(($17 << 16) >> 16)!=0;
   if ($18) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $20=$1;
   var $21=$1;
   var $22=$1;
   var $23=(($22+8)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24+16)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|0);
   var $28=HEAP16[(($27)>>1)];
   _mrb_sym2str($3, $21, $28);
   var $29=$1;
   var $30=(($29+8)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31+16)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33+16)|0);
   var $35=HEAP32[(($34)>>2)];
   _mrb_fixnum_value140($4, $35);
   var $36=$2;
   _mrb_fixnum_value140($5, $36);
   _mrb_format($6, $20, ((104048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 36)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($4)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(24))>>2)]=HEAP32[(($5)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[((((tempInt)+(24))+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
   var $37=$str;
   var $38=$6;
   assert(12 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];
   label = 4; break;
  case 3: 
   var $40=$1;
   var $41=$1;
   var $42=(($41+8)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43+16)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($45+16)|0);
   var $47=HEAP32[(($46)>>2)];
   _mrb_fixnum_value140($7, $47);
   var $48=$2;
   _mrb_fixnum_value140($8, $48);
   _mrb_format($9, $40, ((103484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($7)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($7)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($7)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($8)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($8)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($8)+(8))>>2)],tempInt));
   var $49=$str;
   var $50=$9;
   assert(12 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];HEAP32[((($49)+(4))>>2)]=HEAP32[((($50)+(4))>>2)];HEAP32[((($49)+(8))>>2)]=HEAP32[((($50)+(8))>>2)];
   label = 4; break;
  case 4: 
   var $52=$1;
   var $53=$1;
   var $54=_mrb_class_get($53, ((104740)|0));
   _mrb_exc_new3($10, $52, $54, $str);
   var $55=$exc;
   var $56=$10;
   assert(12 % 1 === 0);HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];HEAP32[((($55)+(4))>>2)]=HEAP32[((($56)+(4))>>2)];HEAP32[((($55)+(8))>>2)]=HEAP32[((($56)+(8))>>2)];
   var $57=(($exc)|0);
   var $58=$57;
   var $59=HEAP32[(($58)>>2)];
   var $60=$59;
   var $61=$1;
   var $62=(($61+16)|0);
   HEAP32[(($62)>>2)]=$60;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_voidp_value($agg_result, $mrb, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $v=sp;
   $1=$mrb;
   $2=$p;
   label = 2; break;
  case 2: 
   var $4=(($v+8)|0);
   HEAP32[(($4)>>2)]=7;
   var $5=$2;
   var $6=(($v)|0);
   var $7=$6;
   HEAP32[(($7)>>2)]=$5;
   label = 3; break;
  case 3: 
   var $9=$agg_result;
   var $10=$v;
   assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _top_env($mrb, $proc) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $e;
   $2=$mrb;
   $3=$proc;
   var $4=$3;
   var $5=(($4+20)|0);
   var $6=HEAP32[(($5)>>2)];
   $e=$6;
   var $7=$2;
   var $8=$e;
   var $9=_is_strict($7, $8);
   var $10=(($9 << 24) >> 24)!=0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$e;
   $1=$12;
   label = 9; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $15=$e;
   var $16=(($15+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0))!=0;
   if ($18) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $20=$e;
   var $21=(($20+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$22;
   $e=$23;
   var $24=$2;
   var $25=$e;
   var $26=_is_strict($24, $25);
   var $27=(($26 << 24) >> 24)!=0;
   if ($27) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $29=$e;
   $1=$29;
   label = 9; break;
  case 7: 
   label = 4; break;
  case 8: 
   var $32=$e;
   $1=$32;
   label = 9; break;
  case 9: 
   var $34=$1;
   return $34;
  default: assert(0, "bad label: " + label);
 }
}
function _localjump_error($mrb, $kind) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 100)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $kind_str=sp;
 var $kind_str_len=(sp)+(24);
 var $msg=(sp)+(28);
 var $exc=(sp)+(40);
 var $3=(sp)+(52);
 var $4=(sp)+(64);
 var $5=(sp)+(76);
 var $6=(sp)+(88);
 $1=$mrb;
 $2=$kind;
 var $7=$kind_str;
 assert(21 % 1 === 0);(_memcpy($7, ((75168)|0), 21)|0);
 var $8=$kind_str_len;
 assert(3 % 1 === 0);HEAP8[($8)]=HEAP8[((((75164)|0))|0)];HEAP8[((($8)+(1))|0)]=HEAP8[(((((75164)|0))+(1))|0)];HEAP8[((($8)+(2))|0)]=HEAP8[(((((75164)|0))+(2))|0)];
 var $9=$1;
 _mrb_str_buf_new($3, $9, 19);
 var $10=$msg;
 var $11=$3;
 assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
 var $12=$1;
 _mrb_str_buf_cat($4, $12, $msg, ((75152)|0), 11);
 var $13=$1;
 var $14=$2;
 var $15=(($kind_str+((($14)*(7))&-1))|0);
 var $16=(($15)|0);
 var $17=$2;
 var $18=(($kind_str_len+$17)|0);
 var $19=HEAP8[($18)];
 var $20=(($19 << 24) >> 24);
 _mrb_str_buf_cat($5, $13, $msg, $16, $20);
 var $21=$1;
 var $22=$1;
 var $23=_mrb_class_get($22, ((104548)|0));
 _mrb_exc_new3($6, $21, $23, $msg);
 var $24=$exc;
 var $25=$6;
 assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
 var $26=(($exc)|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=$1;
 var $31=(($30+16)|0);
 HEAP32[(($31)>>2)]=$29;
 STACKTOP = sp;
 return;
}
function _stack_clear($from, $count) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$from;
   $2=$count;
   label = 2; break;
  case 2: 
   var $4=$2;
   var $5=((($4)-(1))|0);
   $2=$5;
   var $6=(($4)>>>(0)) > 0;
   if ($6) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $8=$1;
   var $9=(($8+12)|0);
   $1=$9;
   var $10=$8;
   assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[((106280)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((106284)>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((106288)>>2)];
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
// WARNING: content after a branch in a label, line: 33256
// WARNING: content after a branch in a label, line: 33257
// WARNING: content after a branch in a label, line: 33258
// WARNING: content after a branch in a label, line: 33259
// WARNING: content after a branch in a label, line: 33260
// WARNING: content after a branch in a label, line: 33261
// WARNING: content after a branch in a label, line: 33262
// WARNING: content after a branch in a label, line: 33263
// WARNING: content after a branch in a label, line: 33264
// WARNING: content after a branch in a label, line: 33265
// WARNING: content after a branch in a label, line: 33266
// WARNING: content after a branch in a label, line: 33267
function _yyparse($p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 1360)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $yychar;
   var $yylval=sp;
   var $yynerrs;
   var $yystate;
   var $yyerrstatus;
   var $yyssa=(sp)+(4);
   var $yyss;
   var $yyssp;
   var $yyvsa=(sp)+(404);
   var $yyvs;
   var $yyvsp;
   var $yystacksize;
   var $yyn;
   var $yyresult;
   var $yytoken;
   var $yyval=(sp)+(1204);
   var $yymsgbuf=(sp)+(1208);
   var $yymsg=(sp)+(1336);
   var $yymsg_alloc=(sp)+(1340);
   var $yylen;
   var $yysize;
   var $yyss1;
   var $yyptr;
   var $yynewbytes;
   var $yynewbytes1;
   var $buf=(sp)+(1344);
   var $yymsgp;
   var $yysyntax_error_status;
   $1=$p;
   var $2=(($yymsgbuf)|0);
   HEAP32[(($yymsg)>>2)]=$2;
   HEAP32[(($yymsg_alloc)>>2)]=128;
   $yylen=0;
   $yytoken=0;
   var $3=(($yyssa)|0);
   $yyss=$3;
   var $4=(($yyvsa)|0);
   $yyvs=$4;
   $yystacksize=200;
   label = 2; break;
  case 2: 
   var $6=HEAP32[((106276)>>2)];
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $9=HEAP32[((_stderr)>>2)];
   var $10=_fprintf($9, ((103280)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 4; break;
  case 4: 
   label = 5; break;
  case 5: 
   $yystate=0;
   $yyerrstatus=0;
   $yynerrs=0;
   $yychar=-2;
   var $13=$yyss;
   $yyssp=$13;
   var $14=$yyvs;
   $yyvsp=$14;
   label = 7; break;
  case 6: 
   var $16=$yyssp;
   var $17=(($16+2)|0);
   $yyssp=$17;
   label = 7; break;
  case 7: 
   var $19=$yystate;
   var $20=(($19) & 65535);
   var $21=$yyssp;
   HEAP16[(($21)>>1)]=$20;
   var $22=$yyss;
   var $23=$yystacksize;
   var $24=(($22+($23<<1))|0);
   var $25=((($24)-(2))|0);
   var $26=$yyssp;
   var $27=(($25)>>>(0)) <= (($26)>>>(0));
   if ($27) { label = 8; break; } else { label = 27; break; }
  case 8: 
   var $29=$yyssp;
   var $30=$yyss;
   var $31=$29;
   var $32=$30;
   var $33=((($31)-($32))|0);
   var $34=((((($33)|(0)))/(2))&-1);
   var $35=((($34)+(1))|0);
   $yysize=$35;
   var $36=$yystacksize;
   var $37=10000 <= (($36)>>>(0));
   if ($37) { label = 9; break; } else { label = 10; break; }
  case 9: 
   label = 611; break;
  case 10: 
   var $40=$yystacksize;
   var $41=($40<<1);
   $yystacksize=$41;
   var $42=$yystacksize;
   var $43=10000 < (($42)>>>(0));
   if ($43) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $yystacksize=10000;
   label = 12; break;
  case 12: 
   var $46=$yyss;
   $yyss1=$46;
   var $47=$1;
   var $48=(($47)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=$yystacksize;
   var $51=((($50)*(6))&-1);
   var $52=((($51)+(3))|0);
   var $53=_mrb_malloc($49, $52);
   var $54=$53;
   $yyptr=$54;
   var $55=$yyptr;
   var $56=(($55)|(0))!=0;
   if ($56) { label = 14; break; } else { label = 13; break; }
  case 13: 
   label = 611; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $60=$yyptr;
   var $61=$60;
   var $62=$61;
   var $63=$yyss;
   var $64=$63;
   var $65=$yysize;
   var $66=($65<<1);
   assert($66 % 1 === 0);(_memcpy($62, $64, $66)|0);
   var $67=$yyptr;
   var $68=$67;
   $yyss=$68;
   var $69=$yystacksize;
   var $70=($69<<1);
   var $71=((($70)+(3))|0);
   $yynewbytes=$71;
   var $72=$yynewbytes;
   var $73=((((($72)>>>(0)))/(4))&-1);
   var $74=$yyptr;
   var $75=(($74+($73<<2))|0);
   $yyptr=$75;
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $78=$yyptr;
   var $79=$78;
   var $80=$79;
   var $81=$yyvs;
   var $82=$81;
   var $83=$yysize;
   var $84=($83<<2);
   assert($84 % 1 === 0);(_memcpy($80, $82, $84)|0);
   var $85=$yyptr;
   var $86=$85;
   $yyvs=$86;
   var $87=$yystacksize;
   var $88=($87<<2);
   var $89=((($88)+(3))|0);
   $yynewbytes1=$89;
   var $90=$yynewbytes1;
   var $91=((((($90)>>>(0)))/(4))&-1);
   var $92=$yyptr;
   var $93=(($92+($91<<2))|0);
   $yyptr=$93;
   label = 18; break;
  case 18: 
   var $95=$yyss1;
   var $96=(($yyssa)|0);
   var $97=(($95)|(0))!=(($96)|(0));
   if ($97) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $99=$1;
   var $100=(($99)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=$yyss1;
   var $103=$102;
   _mrb_free($101, $103);
   label = 20; break;
  case 20: 
   var $105=$yyss;
   var $106=$yysize;
   var $107=(($105+($106<<1))|0);
   var $108=((($107)-(2))|0);
   $yyssp=$108;
   var $109=$yyvs;
   var $110=$yysize;
   var $111=(($109+($110<<2))|0);
   var $112=((($111)-(4))|0);
   $yyvsp=$112;
   label = 21; break;
  case 21: 
   var $114=HEAP32[((106276)>>2)];
   var $115=(($114)|(0))!=0;
   if ($115) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $117=HEAP32[((_stderr)>>2)];
   var $118=$yystacksize;
   var $119=_fprintf($117, ((104976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$118,tempInt));
   label = 23; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $122=$yyss;
   var $123=$yystacksize;
   var $124=(($122+($123<<1))|0);
   var $125=((($124)-(2))|0);
   var $126=$yyssp;
   var $127=(($125)>>>(0)) <= (($126)>>>(0));
   if ($127) { label = 25; break; } else { label = 26; break; }
  case 25: 
   label = 610; break;
  case 26: 
   label = 27; break;
  case 27: 
   label = 28; break;
  case 28: 
   var $132=HEAP32[((106276)>>2)];
   var $133=(($132)|(0))!=0;
   if ($133) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $135=HEAP32[((_stderr)>>2)];
   var $136=$yystate;
   var $137=_fprintf($135, ((100332)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$136,tempInt));
   label = 30; break;
  case 30: 
   label = 31; break;
  case 31: 
   var $140=$yystate;
   var $141=(($140)|(0))==3;
   if ($141) { label = 32; break; } else { label = 33; break; }
  case 32: 
   label = 609; break;
  case 33: 
   label = 34; break;
  case 34: 
   var $145=$yystate;
   var $146=((32852+($145<<1))|0);
   var $147=HEAP16[(($146)>>1)];
   var $148=(($147 << 16) >> 16);
   $yyn=$148;
   var $149=$yyn;
   var $150=(($149)|(0))==-745;
   if ($150) { label = 35; break; } else { label = 36; break; }
  case 35: 
   label = 71; break;
  case 36: 
   var $153=$yychar;
   var $154=(($153)|(0))==-2;
   if ($154) { label = 37; break; } else { label = 42; break; }
  case 37: 
   label = 38; break;
  case 38: 
   var $157=HEAP32[((106276)>>2)];
   var $158=(($157)|(0))!=0;
   if ($158) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $160=HEAP32[((_stderr)>>2)];
   var $161=_fprintf($160, ((96692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 40; break;
  case 40: 
   label = 41; break;
  case 41: 
   var $164=$yylval;
   var $165=$1;
   var $166=_yylex($164, $165);
   $yychar=$166;
   label = 42; break;
  case 42: 
   var $168=$yychar;
   var $169=(($168)|(0)) <= 0;
   if ($169) { label = 43; break; } else { label = 48; break; }
  case 43: 
   $yytoken=0;
   $yychar=0;
   label = 44; break;
  case 44: 
   var $172=HEAP32[((106276)>>2)];
   var $173=(($172)|(0))!=0;
   if ($173) { label = 45; break; } else { label = 46; break; }
  case 45: 
   var $175=HEAP32[((_stderr)>>2)];
   var $176=_fprintf($175, ((94136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 46; break;
  case 46: 
   label = 47; break;
  case 47: 
   label = 56; break;
  case 48: 
   var $180=$yychar;
   var $181=(($180)>>>(0)) <= 379;
   if ($181) { label = 49; break; } else { label = 50; break; }
  case 49: 
   var $183=$yychar;
   var $184=((4+$183)|0);
   var $185=HEAP8[($184)];
   var $186=(($185)&(255));
   var $189 = $186;label = 51; break;
  case 50: 
   var $189 = 2;label = 51; break;
  case 51: 
   var $189;
   $yytoken=$189;
   label = 52; break;
  case 52: 
   var $191=HEAP32[((106276)>>2)];
   var $192=(($191)|(0))!=0;
   if ($192) { label = 53; break; } else { label = 54; break; }
  case 53: 
   var $194=HEAP32[((_stderr)>>2)];
   var $195=_fprintf($194, ((91620)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=((89464)|0),tempInt));
   var $196=HEAP32[((_stderr)>>2)];
   var $197=$yytoken;
   var $198=$1;
   _yy_symbol_print($196, $197, $yylval, $198);
   var $199=HEAP32[((_stderr)>>2)];
   var $200=_fprintf($199, ((88316)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 54; break;
  case 54: 
   label = 55; break;
  case 55: 
   label = 56; break;
  case 56: 
   var $204=$yytoken;
   var $205=$yyn;
   var $206=((($205)+($204))|0);
   $yyn=$206;
   var $207=$yyn;
   var $208=(($207)|(0)) < 0;
   if ($208) { label = 59; break; } else { label = 57; break; }
  case 57: 
   var $210=$yyn;
   var $211=10895 < (($210)|(0));
   if ($211) { label = 59; break; } else { label = 58; break; }
  case 58: 
   var $213=$yyn;
   var $214=((36984+($213<<1))|0);
   var $215=HEAP16[(($214)>>1)];
   var $216=(($215 << 16) >> 16);
   var $217=$yytoken;
   var $218=(($216)|(0))!=(($217)|(0));
   if ($218) { label = 59; break; } else { label = 60; break; }
  case 59: 
   label = 71; break;
  case 60: 
   var $221=$yyn;
   var $222=((1608+($221<<1))|0);
   var $223=HEAP16[(($222)>>1)];
   var $224=(($223 << 16) >> 16);
   $yyn=$224;
   var $225=$yyn;
   var $226=(($225)|(0)) <= 0;
   if ($226) { label = 61; break; } else { label = 64; break; }
  case 61: 
   var $228=$yyn;
   var $229=(($228)|(0))==-545;
   if ($229) { label = 62; break; } else { label = 63; break; }
  case 62: 
   label = 556; break;
  case 63: 
   var $232=$yyn;
   var $233=(((-$232))|0);
   $yyn=$233;
   label = 74; break;
  case 64: 
   var $235=$yyerrstatus;
   var $236=(($235)|(0))!=0;
   if ($236) { label = 65; break; } else { label = 66; break; }
  case 65: 
   var $238=$yyerrstatus;
   var $239=((($238)-(1))|0);
   $yyerrstatus=$239;
   label = 66; break;
  case 66: 
   label = 67; break;
  case 67: 
   var $242=HEAP32[((106276)>>2)];
   var $243=(($242)|(0))!=0;
   if ($243) { label = 68; break; } else { label = 69; break; }
  case 68: 
   var $245=HEAP32[((_stderr)>>2)];
   var $246=_fprintf($245, ((91620)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=((87296)|0),tempInt));
   var $247=HEAP32[((_stderr)>>2)];
   var $248=$yytoken;
   var $249=$1;
   _yy_symbol_print($247, $248, $yylval, $249);
   var $250=HEAP32[((_stderr)>>2)];
   var $251=_fprintf($250, ((88316)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 69; break;
  case 69: 
   label = 70; break;
  case 70: 
   $yychar=-2;
   var $254=$yyn;
   $yystate=$254;
   var $255=$yyvsp;
   var $256=(($255+4)|0);
   $yyvsp=$256;
   var $257=$256;
   var $258=$yylval;
   assert(4 % 1 === 0);HEAP32[(($257)>>2)]=HEAP32[(($258)>>2)];
   label = 6; break;
  case 71: 
   var $260=$yystate;
   var $261=((35072+($260<<1))|0);
   var $262=HEAP16[(($261)>>1)];
   var $263=(($262)&(65535));
   $yyn=$263;
   var $264=$yyn;
   var $265=(($264)|(0))==0;
   if ($265) { label = 72; break; } else { label = 73; break; }
  case 72: 
   label = 556; break;
  case 73: 
   label = 74; break;
  case 74: 
   var $269=$yyn;
   var $270=((29812+$269)|0);
   var $271=HEAP8[($270)];
   var $272=(($271)&(255));
   $yylen=$272;
   var $273=$yylen;
   var $274=(((1)-($273))|0);
   var $275=$yyvsp;
   var $276=(($275+($274<<2))|0);
   var $277=$yyval;
   var $278=$276;
   assert(4 % 1 === 0);HEAP32[(($277)>>2)]=HEAP32[(($278)>>2)];
   label = 75; break;
  case 75: 
   var $280=HEAP32[((106276)>>2)];
   var $281=(($280)|(0))!=0;
   if ($281) { label = 76; break; } else { label = 77; break; }
  case 76: 
   var $283=$yyvsp;
   var $284=$yyn;
   var $285=$1;
   _yy_reduce_print($283, $284, $285);
   label = 77; break;
  case 77: 
   label = 78; break;
  case 78: 
   var $288=$yyn;
   if ((($288)|(0))==2) {
    label = 79; break;
   }
   else if ((($288)|(0))==3) {
    label = 82; break;
   }
   else if ((($288)|(0))==4) {
    label = 83; break;
   }
   else if ((($288)|(0))==5) {
    label = 84; break;
   }
   else if ((($288)|(0))==6) {
    label = 85; break;
   }
   else if ((($288)|(0))==7) {
    label = 86; break;
   }
   else if ((($288)|(0))==8) {
    label = 87; break;
   }
   else if ((($288)|(0))==10) {
    label = 88; break;
   }
   else if ((($288)|(0))==11) {
    label = 89; break;
   }
   else if ((($288)|(0))==12) {
    label = 90; break;
   }
   else if ((($288)|(0))==13) {
    label = 102; break;
   }
   else if ((($288)|(0))==14) {
    label = 103; break;
   }
   else if ((($288)|(0))==15) {
    label = 104; break;
   }
   else if ((($288)|(0))==16) {
    label = 105; break;
   }
   else if ((($288)|(0))==17) {
    label = 106; break;
   }
   else if ((($288)|(0))==18) {
    label = 107; break;
   }
   else if ((($288)|(0))==19) {
    label = 108; break;
   }
   else if ((($288)|(0))==20) {
    label = 109; break;
   }
   else if ((($288)|(0))==21) {
    label = 110; break;
   }
   else if ((($288)|(0))==22) {
    label = 111; break;
   }
   else if ((($288)|(0))==23) {
    label = 112; break;
   }
   else if ((($288)|(0))==24) {
    label = 113; break;
   }
   else if ((($288)|(0))==25) {
    label = 114; break;
   }
   else if ((($288)|(0))==26) {
    label = 115; break;
   }
   else if ((($288)|(0))==28) {
    label = 116; break;
   }
   else if ((($288)|(0))==29) {
    label = 117; break;
   }
   else if ((($288)|(0))==30) {
    label = 118; break;
   }
   else if ((($288)|(0))==31) {
    label = 119; break;
   }
   else if ((($288)|(0))==32) {
    label = 120; break;
   }
   else if ((($288)|(0))==33) {
    label = 121; break;
   }
   else if ((($288)|(0))==34) {
    label = 122; break;
   }
   else if ((($288)|(0))==35) {
    label = 123; break;
   }
   else if ((($288)|(0))==36) {
    label = 124; break;
   }
   else if ((($288)|(0))==37) {
    label = 125; break;
   }
   else if ((($288)|(0))==38) {
    label = 126; break;
   }
   else if ((($288)|(0))==40) {
    label = 127; break;
   }
   else if ((($288)|(0))==41) {
    label = 128; break;
   }
   else if ((($288)|(0))==43) {
    label = 129; break;
   }
   else if ((($288)|(0))==44) {
    label = 130; break;
   }
   else if ((($288)|(0))==45) {
    label = 131; break;
   }
   else if ((($288)|(0))==46) {
    label = 132; break;
   }
   else if ((($288)|(0))==48) {
    label = 133; break;
   }
   else if ((($288)|(0))==53) {
    label = 137; break;
   }
   else if ((($288)|(0))==54) {
    label = 138; break;
   }
   else if ((($288)|(0))==55) {
    label = 139; break;
   }
   else if ((($288)|(0))==56) {
    label = 140; break;
   }
   else if ((($288)|(0))==57) {
    label = 141; break;
   }
   else if ((($288)|(0))==58) {
    label = 142; break;
   }
   else if ((($288)|(0))==59) {
    label = 143; break;
   }
   else if ((($288)|(0))==60) {
    label = 144; break;
   }
   else if ((($288)|(0))==61) {
    label = 145; break;
   }
   else if ((($288)|(0))==62) {
    label = 146; break;
   }
   else if ((($288)|(0))==63) {
    label = 147; break;
   }
   else if ((($288)|(0))==64) {
    label = 148; break;
   }
   else if ((($288)|(0))==65) {
    label = 149; break;
   }
   else if ((($288)|(0))==66) {
    label = 150; break;
   }
   else if ((($288)|(0))==67) {
    label = 151; break;
   }
   else if ((($288)|(0))==69) {
    label = 152; break;
   }
   else if ((($288)|(0))==70) {
    label = 153; break;
   }
   else if ((($288)|(0))==71) {
    label = 154; break;
   }
   else if ((($288)|(0))==72) {
    label = 155; break;
   }
   else if ((($288)|(0))==73) {
    label = 156; break;
   }
   else if ((($288)|(0))==74) {
    label = 157; break;
   }
   else if ((($288)|(0))==75) {
    label = 158; break;
   }
   else if ((($288)|(0))==76) {
    label = 159; break;
   }
   else if ((($288)|(0))==77) {
    label = 160; break;
   }
   else if ((($288)|(0))==78) {
    label = 161; break;
   }
   else if ((($288)|(0))==79) {
    label = 162; break;
   }
   else if ((($288)|(0))==81) {
    label = 163; break;
   }
   else if ((($288)|(0))==82) {
    label = 164; break;
   }
   else if ((($288)|(0))==83) {
    label = 165; break;
   }
   else if ((($288)|(0))==84) {
    label = 166; break;
   }
   else if ((($288)|(0))==85) {
    label = 167; break;
   }
   else if ((($288)|(0))==86) {
    label = 168; break;
   }
   else if ((($288)|(0))==87) {
    label = 169; break;
   }
   else if ((($288)|(0))==88) {
    label = 170; break;
   }
   else if ((($288)|(0))==89) {
    label = 171; break;
   }
   else if ((($288)|(0))==90) {
    label = 172; break;
   }
   else if ((($288)|(0))==91) {
    label = 173; break;
   }
   else if ((($288)|(0))==92) {
    label = 177; break;
   }
   else if ((($288)|(0))==93) {
    label = 181; break;
   }
   else if ((($288)|(0))==94) {
    label = 182; break;
   }
   else if ((($288)|(0))==95) {
    label = 183; break;
   }
   else if ((($288)|(0))==96) {
    label = 184; break;
   }
   else if ((($288)|(0))==97) {
    label = 185; break;
   }
   else if ((($288)|(0))==98) {
    label = 186; break;
   }
   else if ((($288)|(0))==99) {
    label = 187; break;
   }
   else if ((($288)|(0))==100) {
    label = 191; break;
   }
   else if ((($288)|(0))==101) {
    label = 195; break;
   }
   else if ((($288)|(0))==102) {
    label = 196; break;
   }
   else if ((($288)|(0))==104) {
    label = 197; break;
   }
   else if ((($288)|(0))==105) {
    label = 198; break;
   }
   else if ((($288)|(0))==106) {
    label = 199; break;
   }
   else if ((($288)|(0))==110) {
    label = 200; break;
   }
   else if ((($288)|(0))==111) {
    label = 201; break;
   }
   else if ((($288)|(0))==114) {
    label = 202; break;
   }
   else if ((($288)|(0))==115) {
    label = 203; break;
   }
   else if ((($288)|(0))==116) {
    label = 204; break;
   }
   else if ((($288)|(0))==117) {
    label = 205; break;
   }
   else if ((($288)|(0))==118) {
    label = 206; break;
   }
   else if ((($288)|(0))==119) {
    label = 207; break;
   }
   else if ((($288)|(0))==120) {
    label = 208; break;
   }
   else if ((($288)|(0))==121) {
    label = 209; break;
   }
   else if ((($288)|(0))==122) {
    label = 210; break;
   }
   else if ((($288)|(0))==123) {
    label = 211; break;
   }
   else if ((($288)|(0))==124) {
    label = 212; break;
   }
   else if ((($288)|(0))==125) {
    label = 213; break;
   }
   else if ((($288)|(0))==126) {
    label = 214; break;
   }
   else if ((($288)|(0))==127) {
    label = 215; break;
   }
   else if ((($288)|(0))==128) {
    label = 216; break;
   }
   else if ((($288)|(0))==129) {
    label = 217; break;
   }
   else if ((($288)|(0))==130) {
    label = 218; break;
   }
   else if ((($288)|(0))==131) {
    label = 219; break;
   }
   else if ((($288)|(0))==132) {
    label = 220; break;
   }
   else if ((($288)|(0))==133) {
    label = 221; break;
   }
   else if ((($288)|(0))==134) {
    label = 222; break;
   }
   else if ((($288)|(0))==135) {
    label = 223; break;
   }
   else if ((($288)|(0))==136) {
    label = 224; break;
   }
   else if ((($288)|(0))==137) {
    label = 225; break;
   }
   else if ((($288)|(0))==138) {
    label = 226; break;
   }
   else if ((($288)|(0))==139) {
    label = 227; break;
   }
   else if ((($288)|(0))==140) {
    label = 228; break;
   }
   else if ((($288)|(0))==141) {
    label = 229; break;
   }
   else if ((($288)|(0))==142) {
    label = 230; break;
   }
   else if ((($288)|(0))==143) {
    label = 231; break;
   }
   else if ((($288)|(0))==144) {
    label = 232; break;
   }
   else if ((($288)|(0))==145) {
    label = 233; break;
   }
   else if ((($288)|(0))==186) {
    label = 234; break;
   }
   else if ((($288)|(0))==187) {
    label = 235; break;
   }
   else if ((($288)|(0))==188) {
    label = 236; break;
   }
   else if ((($288)|(0))==189) {
    label = 237; break;
   }
   else if ((($288)|(0))==190) {
    label = 238; break;
   }
   else if ((($288)|(0))==191) {
    label = 239; break;
   }
   else if ((($288)|(0))==192) {
    label = 240; break;
   }
   else if ((($288)|(0))==193) {
    label = 241; break;
   }
   else if ((($288)|(0))==194) {
    label = 242; break;
   }
   else if ((($288)|(0))==195) {
    label = 243; break;
   }
   else if ((($288)|(0))==196) {
    label = 244; break;
   }
   else if ((($288)|(0))==197) {
    label = 245; break;
   }
   else if ((($288)|(0))==198) {
    label = 246; break;
   }
   else if ((($288)|(0))==199) {
    label = 247; break;
   }
   else if ((($288)|(0))==200) {
    label = 248; break;
   }
   else if ((($288)|(0))==201) {
    label = 249; break;
   }
   else if ((($288)|(0))==202) {
    label = 250; break;
   }
   else if ((($288)|(0))==203) {
    label = 251; break;
   }
   else if ((($288)|(0))==204) {
    label = 252; break;
   }
   else if ((($288)|(0))==205) {
    label = 253; break;
   }
   else if ((($288)|(0))==206) {
    label = 254; break;
   }
   else if ((($288)|(0))==207) {
    label = 255; break;
   }
   else if ((($288)|(0))==208) {
    label = 256; break;
   }
   else if ((($288)|(0))==209) {
    label = 257; break;
   }
   else if ((($288)|(0))==210) {
    label = 258; break;
   }
   else if ((($288)|(0))==211) {
    label = 259; break;
   }
   else if ((($288)|(0))==212) {
    label = 260; break;
   }
   else if ((($288)|(0))==213) {
    label = 261; break;
   }
   else if ((($288)|(0))==214) {
    label = 262; break;
   }
   else if ((($288)|(0))==215) {
    label = 263; break;
   }
   else if ((($288)|(0))==216) {
    label = 264; break;
   }
   else if ((($288)|(0))==217) {
    label = 265; break;
   }
   else if ((($288)|(0))==218) {
    label = 266; break;
   }
   else if ((($288)|(0))==219) {
    label = 267; break;
   }
   else if ((($288)|(0))==220) {
    label = 268; break;
   }
   else if ((($288)|(0))==221) {
    label = 269; break;
   }
   else if ((($288)|(0))==222) {
    label = 270; break;
   }
   else if ((($288)|(0))==223) {
    label = 271; break;
   }
   else if ((($288)|(0))==224) {
    label = 272; break;
   }
   else if ((($288)|(0))==225) {
    label = 273; break;
   }
   else if ((($288)|(0))==226) {
    label = 274; break;
   }
   else if ((($288)|(0))==227) {
    label = 275; break;
   }
   else if ((($288)|(0))==228) {
    label = 276; break;
   }
   else if ((($288)|(0))==229) {
    label = 277; break;
   }
   else if ((($288)|(0))==230) {
    label = 278; break;
   }
   else if ((($288)|(0))==232) {
    label = 281; break;
   }
   else if ((($288)|(0))==233) {
    label = 282; break;
   }
   else if ((($288)|(0))==234) {
    label = 283; break;
   }
   else if ((($288)|(0))==235) {
    label = 284; break;
   }
   else if ((($288)|(0))==240) {
    label = 285; break;
   }
   else if ((($288)|(0))==241) {
    label = 286; break;
   }
   else if ((($288)|(0))==242) {
    label = 287; break;
   }
   else if ((($288)|(0))==243) {
    label = 288; break;
   }
   else if ((($288)|(0))==244) {
    label = 289; break;
   }
   else if ((($288)|(0))==245) {
    label = 290; break;
   }
   else if ((($288)|(0))==246) {
    label = 291; break;
   }
   else if ((($288)|(0))==247) {
    label = 292; break;
   }
   else if ((($288)|(0))==248) {
    label = 293; break;
   }
   else if ((($288)|(0))==249) {
    label = 294; break;
   }
   else if ((($288)|(0))==250) {
    label = 295; break;
   }
   else if ((($288)|(0))==251) {
    label = 296; break;
   }
   else if ((($288)|(0))==252) {
    label = 297; break;
   }
   else if ((($288)|(0))==253) {
    label = 298; break;
   }
   else if ((($288)|(0))==254) {
    label = 299; break;
   }
   else if ((($288)|(0))==255) {
    label = 300; break;
   }
   else if ((($288)|(0))==256) {
    label = 301; break;
   }
   else if ((($288)|(0))==257) {
    label = 302; break;
   }
   else if ((($288)|(0))==258) {
    label = 303; break;
   }
   else if ((($288)|(0))==259) {
    label = 304; break;
   }
   else if ((($288)|(0))==267) {
    label = 305; break;
   }
   else if ((($288)|(0))==268) {
    label = 306; break;
   }
   else if ((($288)|(0))==269) {
    label = 307; break;
   }
   else if ((($288)|(0))==270) {
    label = 308; break;
   }
   else if ((($288)|(0))==271) {
    label = 309; break;
   }
   else if ((($288)|(0))==272) {
    label = 310; break;
   }
   else if ((($288)|(0))==273) {
    label = 311; break;
   }
   else if ((($288)|(0))==274) {
    label = 312; break;
   }
   else if ((($288)|(0))==275) {
    label = 313; break;
   }
   else if ((($288)|(0))==276) {
    label = 314; break;
   }
   else if ((($288)|(0))==277) {
    label = 315; break;
   }
   else if ((($288)|(0))==278) {
    label = 316; break;
   }
   else if ((($288)|(0))==279) {
    label = 317; break;
   }
   else if ((($288)|(0))==280) {
    label = 318; break;
   }
   else if ((($288)|(0))==281) {
    label = 319; break;
   }
   else if ((($288)|(0))==282) {
    label = 320; break;
   }
   else if ((($288)|(0))==283) {
    label = 321; break;
   }
   else if ((($288)|(0))==284) {
    label = 322; break;
   }
   else if ((($288)|(0))==285) {
    label = 323; break;
   }
   else if ((($288)|(0))==287) {
    label = 324; break;
   }
   else if ((($288)|(0))==288) {
    label = 325; break;
   }
   else if ((($288)|(0))==289) {
    label = 326; break;
   }
   else if ((($288)|(0))==290) {
    label = 327; break;
   }
   else if ((($288)|(0))==291) {
    label = 328; break;
   }
   else if ((($288)|(0))==292) {
    label = 329; break;
   }
   else if ((($288)|(0))==293) {
    label = 330; break;
   }
   else if ((($288)|(0))==294) {
    label = 331; break;
   }
   else if ((($288)|(0))==295) {
    label = 332; break;
   }
   else if ((($288)|(0))==296) {
    label = 333; break;
   }
   else if ((($288)|(0))==297) {
    label = 334; break;
   }
   else if ((($288)|(0))==298) {
    label = 335; break;
   }
   else if ((($288)|(0))==299) {
    label = 336; break;
   }
   else if ((($288)|(0))==300) {
    label = 337; break;
   }
   else if ((($288)|(0))==301) {
    label = 338; break;
   }
   else if ((($288)|(0))==302) {
    label = 339; break;
   }
   else if ((($288)|(0))==303) {
    label = 340; break;
   }
   else if ((($288)|(0))==304) {
    label = 344; break;
   }
   else if ((($288)|(0))==305) {
    label = 345; break;
   }
   else if ((($288)|(0))==306) {
    label = 346; break;
   }
   else if ((($288)|(0))==307) {
    label = 347; break;
   }
   else if ((($288)|(0))==308) {
    label = 348; break;
   }
   else if ((($288)|(0))==309) {
    label = 352; break;
   }
   else if ((($288)|(0))==310) {
    label = 353; break;
   }
   else if ((($288)|(0))==311) {
    label = 354; break;
   }
   else if ((($288)|(0))==312) {
    label = 355; break;
   }
   else if ((($288)|(0))==313) {
    label = 356; break;
   }
   else if ((($288)|(0))==314) {
    label = 357; break;
   }
   else if ((($288)|(0))==315) {
    label = 358; break;
   }
   else if ((($288)|(0))==316) {
    label = 359; break;
   }
   else if ((($288)|(0))==317) {
    label = 360; break;
   }
   else if ((($288)|(0))==318) {
    label = 361; break;
   }
   else if ((($288)|(0))==319) {
    label = 362; break;
   }
   else if ((($288)|(0))==326) {
    label = 365; break;
   }
   else if ((($288)|(0))==328) {
    label = 366; break;
   }
   else if ((($288)|(0))==329) {
    label = 367; break;
   }
   else if ((($288)|(0))==331) {
    label = 368; break;
   }
   else if ((($288)|(0))==332) {
    label = 369; break;
   }
   else if ((($288)|(0))==333) {
    label = 370; break;
   }
   else if ((($288)|(0))==334) {
    label = 371; break;
   }
   else if ((($288)|(0))==335) {
    label = 372; break;
   }
   else if ((($288)|(0))==336) {
    label = 373; break;
   }
   else if ((($288)|(0))==337) {
    label = 374; break;
   }
   else if ((($288)|(0))==338) {
    label = 375; break;
   }
   else if ((($288)|(0))==339) {
    label = 376; break;
   }
   else if ((($288)|(0))==340) {
    label = 377; break;
   }
   else if ((($288)|(0))==341) {
    label = 378; break;
   }
   else if ((($288)|(0))==342) {
    label = 379; break;
   }
   else if ((($288)|(0))==343) {
    label = 380; break;
   }
   else if ((($288)|(0))==344) {
    label = 381; break;
   }
   else if ((($288)|(0))==345) {
    label = 382; break;
   }
   else if ((($288)|(0))==346) {
    label = 383; break;
   }
   else if ((($288)|(0))==347) {
    label = 384; break;
   }
   else if ((($288)|(0))==348) {
    label = 385; break;
   }
   else if ((($288)|(0))==349) {
    label = 386; break;
   }
   else if ((($288)|(0))==350) {
    label = 387; break;
   }
   else if ((($288)|(0))==351) {
    label = 388; break;
   }
   else if ((($288)|(0))==352) {
    label = 389; break;
   }
   else if ((($288)|(0))==353) {
    label = 390; break;
   }
   else if ((($288)|(0))==354) {
    label = 391; break;
   }
   else if ((($288)|(0))==355) {
    label = 392; break;
   }
   else if ((($288)|(0))==356) {
    label = 393; break;
   }
   else if ((($288)|(0))==357) {
    label = 394; break;
   }
   else if ((($288)|(0))==358) {
    label = 395; break;
   }
   else if ((($288)|(0))==360) {
    label = 396; break;
   }
   else if ((($288)|(0))==361) {
    label = 397; break;
   }
   else if ((($288)|(0))==362) {
    label = 398; break;
   }
   else if ((($288)|(0))==363) {
    label = 399; break;
   }
   else if ((($288)|(0))==364) {
    label = 400; break;
   }
   else if ((($288)|(0))==365) {
    label = 401; break;
   }
   else if ((($288)|(0))==368) {
    label = 402; break;
   }
   else if ((($288)|(0))==370) {
    label = 403; break;
   }
   else if ((($288)|(0))==371) {
    label = 404; break;
   }
   else if ((($288)|(0))==372) {
    label = 405; break;
   }
   else if ((($288)|(0))==373) {
    label = 406; break;
   }
   else if ((($288)|(0))==374) {
    label = 407; break;
   }
   else if ((($288)|(0))==375) {
    label = 408; break;
   }
   else if ((($288)|(0))==376) {
    label = 409; break;
   }
   else if ((($288)|(0))==377) {
    label = 413; break;
   }
   else if ((($288)|(0))==378) {
    label = 414; break;
   }
   else if ((($288)|(0))==379) {
    label = 415; break;
   }
   else if ((($288)|(0))==380) {
    label = 416; break;
   }
   else if ((($288)|(0))==381) {
    label = 417; break;
   }
   else if ((($288)|(0))==382) {
    label = 418; break;
   }
   else if ((($288)|(0))==383) {
    label = 419; break;
   }
   else if ((($288)|(0))==384) {
    label = 420; break;
   }
   else if ((($288)|(0))==385) {
    label = 421; break;
   }
   else if ((($288)|(0))==386) {
    label = 422; break;
   }
   else if ((($288)|(0))==387) {
    label = 423; break;
   }
   else if ((($288)|(0))==388) {
    label = 424; break;
   }
   else if ((($288)|(0))==389) {
    label = 425; break;
   }
   else if ((($288)|(0))==390) {
    label = 426; break;
   }
   else if ((($288)|(0))==391) {
    label = 427; break;
   }
   else if ((($288)|(0))==392) {
    label = 428; break;
   }
   else if ((($288)|(0))==393) {
    label = 429; break;
   }
   else if ((($288)|(0))==394) {
    label = 430; break;
   }
   else if ((($288)|(0))==396) {
    label = 434; break;
   }
   else if ((($288)|(0))==398) {
    label = 437; break;
   }
   else if ((($288)|(0))==401) {
    label = 438; break;
   }
   else if ((($288)|(0))==403) {
    label = 439; break;
   }
   else if ((($288)|(0))==411) {
    label = 440; break;
   }
   else if ((($288)|(0))==412) {
    label = 441; break;
   }
   else if ((($288)|(0))==414) {
    label = 442; break;
   }
   else if ((($288)|(0))==415) {
    label = 443; break;
   }
   else if ((($288)|(0))==416) {
    label = 444; break;
   }
   else if ((($288)|(0))==417) {
    label = 445; break;
   }
   else if ((($288)|(0))==418) {
    label = 446; break;
   }
   else if ((($288)|(0))==419) {
    label = 447; break;
   }
   else if ((($288)|(0))==420) {
    label = 448; break;
   }
   else if ((($288)|(0))==421) {
    label = 449; break;
   }
   else if ((($288)|(0))==422) {
    label = 450; break;
   }
   else if ((($288)|(0))==428) {
    label = 451; break;
   }
   else if ((($288)|(0))==429) {
    label = 452; break;
   }
   else if ((($288)|(0))==430) {
    label = 453; break;
   }
   else if ((($288)|(0))==431) {
    label = 454; break;
   }
   else if ((($288)|(0))==432) {
    label = 455; break;
   }
   else if ((($288)|(0))==433) {
    label = 456; break;
   }
   else if ((($288)|(0))==434) {
    label = 457; break;
   }
   else if ((($288)|(0))==439) {
    label = 458; break;
   }
   else if ((($288)|(0))==440) {
    label = 459; break;
   }
   else if ((($288)|(0))==441) {
    label = 460; break;
   }
   else if ((($288)|(0))==442) {
    label = 461; break;
   }
   else if ((($288)|(0))==445) {
    label = 462; break;
   }
   else if ((($288)|(0))==446) {
    label = 463; break;
   }
   else if ((($288)|(0))==447) {
    label = 464; break;
   }
   else if ((($288)|(0))==448) {
    label = 465; break;
   }
   else if ((($288)|(0))==449) {
    label = 466; break;
   }
   else if ((($288)|(0))==450) {
    label = 467; break;
   }
   else if ((($288)|(0))==451) {
    label = 468; break;
   }
   else if ((($288)|(0))==452) {
    label = 469; break;
   }
   else if ((($288)|(0))==453) {
    label = 470; break;
   }
   else if ((($288)|(0))==454) {
    label = 471; break;
   }
   else if ((($288)|(0))==455) {
    label = 472; break;
   }
   else if ((($288)|(0))==456) {
    label = 473; break;
   }
   else if ((($288)|(0))==457) {
    label = 474; break;
   }
   else if ((($288)|(0))==458) {
    label = 475; break;
   }
   else if ((($288)|(0))==459) {
    label = 478; break;
   }
   else if ((($288)|(0))==462) {
    label = 479; break;
   }
   else if ((($288)|(0))==463) {
    label = 480; break;
   }
   else if ((($288)|(0))==464) {
    label = 481; break;
   }
   else if ((($288)|(0))==465) {
    label = 482; break;
   }
   else if ((($288)|(0))==466) {
    label = 483; break;
   }
   else if ((($288)|(0))==467) {
    label = 484; break;
   }
   else if ((($288)|(0))==468) {
    label = 485; break;
   }
   else if ((($288)|(0))==469) {
    label = 486; break;
   }
   else if ((($288)|(0))==470) {
    label = 487; break;
   }
   else if ((($288)|(0))==471) {
    label = 488; break;
   }
   else if ((($288)|(0))==472) {
    label = 489; break;
   }
   else if ((($288)|(0))==473) {
    label = 490; break;
   }
   else if ((($288)|(0))==474) {
    label = 491; break;
   }
   else if ((($288)|(0))==475) {
    label = 492; break;
   }
   else if ((($288)|(0))==476) {
    label = 493; break;
   }
   else if ((($288)|(0))==477) {
    label = 494; break;
   }
   else if ((($288)|(0))==478) {
    label = 495; break;
   }
   else if ((($288)|(0))==479) {
    label = 496; break;
   }
   else if ((($288)|(0))==480) {
    label = 497; break;
   }
   else if ((($288)|(0))==481) {
    label = 498; break;
   }
   else if ((($288)|(0))==482) {
    label = 499; break;
   }
   else if ((($288)|(0))==483) {
    label = 500; break;
   }
   else if ((($288)|(0))==484) {
    label = 501; break;
   }
   else if ((($288)|(0))==485) {
    label = 502; break;
   }
   else if ((($288)|(0))==486) {
    label = 503; break;
   }
   else if ((($288)|(0))==487) {
    label = 504; break;
   }
   else if ((($288)|(0))==488) {
    label = 505; break;
   }
   else if ((($288)|(0))==489) {
    label = 506; break;
   }
   else if ((($288)|(0))==490) {
    label = 507; break;
   }
   else if ((($288)|(0))==491) {
    label = 508; break;
   }
   else if ((($288)|(0))==492) {
    label = 509; break;
   }
   else if ((($288)|(0))==493) {
    label = 510; break;
   }
   else if ((($288)|(0))==494) {
    label = 511; break;
   }
   else if ((($288)|(0))==495) {
    label = 512; break;
   }
   else if ((($288)|(0))==496) {
    label = 513; break;
   }
   else if ((($288)|(0))==497) {
    label = 514; break;
   }
   else if ((($288)|(0))==498) {
    label = 515; break;
   }
   else if ((($288)|(0))==501) {
    label = 516; break;
   }
   else if ((($288)|(0))==502) {
    label = 517; break;
   }
   else if ((($288)|(0))==505) {
    label = 518; break;
   }
   else if ((($288)|(0))==506) {
    label = 519; break;
   }
   else if ((($288)|(0))==507) {
    label = 520; break;
   }
   else if ((($288)|(0))==508) {
    label = 521; break;
   }
   else if ((($288)|(0))==509) {
    label = 524; break;
   }
   else if ((($288)|(0))==510) {
    label = 525; break;
   }
   else if ((($288)|(0))==512) {
    label = 532; break;
   }
   else if ((($288)|(0))==513) {
    label = 533; break;
   }
   else if ((($288)|(0))==514) {
    label = 534; break;
   }
   else if ((($288)|(0))==515) {
    label = 535; break;
   }
   else if ((($288)|(0))==516) {
    label = 536; break;
   }
   else if ((($288)|(0))==538) {
    label = 537; break;
   }
   else if ((($288)|(0))==540) {
    label = 538; break;
   }
   else if ((($288)|(0))==543) {
    label = 539; break;
   }
   else if ((($288)|(0))==544) {
    label = 540; break;
   }
   else {
   label = 541; break;
   }
  case 79: 
   var $290=$1;
   var $291=(($290+40)|0);
   HEAP32[(($291)>>2)]=0;
   var $292=$1;
   var $293=(($292+76)|0);
   var $294=HEAP32[(($293)>>2)];
   var $295=(($294)|(0))!=0;
   if ($295) { label = 81; break; } else { label = 80; break; }
  case 80: 
   var $297=$1;
   var $298=_cons_gen($297, 0, 0);
   var $299=$1;
   var $300=(($299+76)|0);
   HEAP32[(($300)>>2)]=$298;
   label = 81; break;
  case 81: 
   label = 542; break;
  case 82: 
   var $303=$1;
   var $304=$yyvsp;
   var $305=(($304)|0);
   var $306=$305;
   var $307=HEAP32[(($306)>>2)];
   var $308=_new_scope($303, $307);
   var $309=$1;
   var $310=(($309+1136)|0);
   HEAP32[(($310)>>2)]=$308;
   label = 542; break;
  case 83: 
   var $312=$yyvsp;
   var $313=((($312)-(4))|0);
   var $314=$313;
   var $315=HEAP32[(($314)>>2)];
   var $316=$yyval;
   HEAP32[(($316)>>2)]=$315;
   label = 542; break;
  case 84: 
   var $318=$1;
   var $319=_new_begin($318, 0);
   var $320=$yyval;
   HEAP32[(($320)>>2)]=$319;
   label = 542; break;
  case 85: 
   var $322=$1;
   var $323=$yyvsp;
   var $324=(($323)|0);
   var $325=$324;
   var $326=HEAP32[(($325)>>2)];
   var $327=_new_begin($322, $326);
   var $328=$yyval;
   HEAP32[(($328)>>2)]=$327;
   label = 542; break;
  case 86: 
   var $330=$1;
   var $331=$yyvsp;
   var $332=((($331)-(8))|0);
   var $333=$332;
   var $334=HEAP32[(($333)>>2)];
   var $335=$1;
   var $336=$yyvsp;
   var $337=(($336)|0);
   var $338=$337;
   var $339=HEAP32[(($338)>>2)];
   var $340=_list1_gen($335, $339);
   var $341=_append_gen($330, $334, $340);
   var $342=$yyval;
   HEAP32[(($342)>>2)]=$341;
   label = 542; break;
  case 87: 
   var $344=$1;
   var $345=_new_begin($344, 0);
   var $346=$yyval;
   HEAP32[(($346)>>2)]=$345;
   label = 542; break;
  case 88: 
   var $348=$1;
   var $349=_local_switch($348);
   var $350=$yyval;
   HEAP32[(($350)>>2)]=$349;
   label = 542; break;
  case 89: 
   var $352=$1;
   _yyerror($352, ((86500)|0));
   var $353=$1;
   var $354=$yyvsp;
   var $355=((($354)-(12))|0);
   var $356=$355;
   var $357=HEAP32[(($356)>>2)];
   _local_resume($353, $357);
   var $358=$yyval;
   HEAP32[(($358)>>2)]=0;
   label = 542; break;
  case 90: 
   var $360=$yyvsp;
   var $361=((($360)-(8))|0);
   var $362=$361;
   var $363=HEAP32[(($362)>>2)];
   var $364=(($363)|(0))!=0;
   if ($364) { label = 91; break; } else { label = 92; break; }
  case 91: 
   var $366=$1;
   var $367=$yyvsp;
   var $368=((($367)-(12))|0);
   var $369=$368;
   var $370=HEAP32[(($369)>>2)];
   var $371=$yyvsp;
   var $372=((($371)-(8))|0);
   var $373=$372;
   var $374=HEAP32[(($373)>>2)];
   var $375=$yyvsp;
   var $376=((($375)-(4))|0);
   var $377=$376;
   var $378=HEAP32[(($377)>>2)];
   var $379=_new_rescue($366, $370, $374, $378);
   var $380=$yyval;
   HEAP32[(($380)>>2)]=$379;
   label = 96; break;
  case 92: 
   var $382=$yyvsp;
   var $383=((($382)-(4))|0);
   var $384=$383;
   var $385=HEAP32[(($384)>>2)];
   var $386=(($385)|(0))!=0;
   if ($386) { label = 93; break; } else { label = 94; break; }
  case 93: 
   var $388=$1;
   _yywarn($388, ((105868)|0));
   var $389=$1;
   var $390=$yyvsp;
   var $391=((($390)-(12))|0);
   var $392=$391;
   var $393=HEAP32[(($392)>>2)];
   var $394=$1;
   var $395=$yyvsp;
   var $396=((($395)-(4))|0);
   var $397=$396;
   var $398=HEAP32[(($397)>>2)];
   var $399=_list1_gen($394, $398);
   var $400=_append_gen($389, $393, $399);
   var $401=$yyval;
   HEAP32[(($401)>>2)]=$400;
   label = 95; break;
  case 94: 
   var $403=$yyvsp;
   var $404=((($403)-(12))|0);
   var $405=$404;
   var $406=HEAP32[(($405)>>2)];
   var $407=$yyval;
   HEAP32[(($407)>>2)]=$406;
   label = 95; break;
  case 95: 
   label = 96; break;
  case 96: 
   var $410=$yyvsp;
   var $411=(($410)|0);
   var $412=$411;
   var $413=HEAP32[(($412)>>2)];
   var $414=(($413)|(0))!=0;
   if ($414) { label = 97; break; } else { label = 101; break; }
  case 97: 
   var $416=$yyval;
   var $417=HEAP32[(($416)>>2)];
   var $418=(($417)|(0))!=0;
   if ($418) { label = 98; break; } else { label = 99; break; }
  case 98: 
   var $420=$1;
   var $421=$yyval;
   var $422=HEAP32[(($421)>>2)];
   var $423=$yyvsp;
   var $424=(($423)|0);
   var $425=$424;
   var $426=HEAP32[(($425)>>2)];
   var $427=_new_ensure($420, $422, $426);
   var $428=$yyval;
   HEAP32[(($428)>>2)]=$427;
   label = 100; break;
  case 99: 
   var $430=$1;
   var $431=$yyvsp;
   var $432=(($431)|0);
   var $433=$432;
   var $434=HEAP32[(($433)>>2)];
   var $435=$1;
   var $436=$1;
   var $437=_new_nil($436);
   var $438=_list1_gen($435, $437);
   var $439=_append_gen($430, $434, $438);
   var $440=$yyval;
   HEAP32[(($440)>>2)]=$439;
   label = 100; break;
  case 100: 
   label = 101; break;
  case 101: 
   label = 542; break;
  case 102: 
   var $444=$yyvsp;
   var $445=((($444)-(4))|0);
   var $446=$445;
   var $447=HEAP32[(($446)>>2)];
   var $448=$yyval;
   HEAP32[(($448)>>2)]=$447;
   label = 542; break;
  case 103: 
   var $450=$1;
   var $451=_new_begin($450, 0);
   var $452=$yyval;
   HEAP32[(($452)>>2)]=$451;
   label = 542; break;
  case 104: 
   var $454=$1;
   var $455=$yyvsp;
   var $456=(($455)|0);
   var $457=$456;
   var $458=HEAP32[(($457)>>2)];
   var $459=_new_begin($454, $458);
   var $460=$yyval;
   HEAP32[(($460)>>2)]=$459;
   label = 542; break;
  case 105: 
   var $462=$1;
   var $463=$yyvsp;
   var $464=((($463)-(8))|0);
   var $465=$464;
   var $466=HEAP32[(($465)>>2)];
   var $467=$1;
   var $468=$yyvsp;
   var $469=(($468)|0);
   var $470=$469;
   var $471=HEAP32[(($470)>>2)];
   var $472=_list1_gen($467, $471);
   var $473=_append_gen($462, $466, $472);
   var $474=$yyval;
   HEAP32[(($474)>>2)]=$473;
   label = 542; break;
  case 106: 
   var $476=$1;
   var $477=$yyvsp;
   var $478=(($477)|0);
   var $479=$478;
   var $480=HEAP32[(($479)>>2)];
   var $481=_new_begin($476, $480);
   var $482=$yyval;
   HEAP32[(($482)>>2)]=$481;
   label = 542; break;
  case 107: 
   var $484=$1;
   var $485=(($484+40)|0);
   HEAP32[(($485)>>2)]=7;
   label = 542; break;
  case 108: 
   var $487=$1;
   var $488=$yyvsp;
   var $489=((($488)-(8))|0);
   var $490=$489;
   var $491=HEAP16[(($490)>>1)];
   var $492=$yyvsp;
   var $493=(($492)|0);
   var $494=$493;
   var $495=HEAP16[(($494)>>1)];
   var $496=_new_alias($487, $491, $495);
   var $497=$yyval;
   HEAP32[(($497)>>2)]=$496;
   label = 542; break;
  case 109: 
   var $499=$yyvsp;
   var $500=(($499)|0);
   var $501=$500;
   var $502=HEAP32[(($501)>>2)];
   var $503=$yyval;
   HEAP32[(($503)>>2)]=$502;
   label = 542; break;
  case 110: 
   var $505=$1;
   var $506=$yyvsp;
   var $507=(($506)|0);
   var $508=$507;
   var $509=HEAP32[(($508)>>2)];
   var $510=_cond($509);
   var $511=$yyvsp;
   var $512=((($511)-(8))|0);
   var $513=$512;
   var $514=HEAP32[(($513)>>2)];
   var $515=_new_if($505, $510, $514, 0);
   var $516=$yyval;
   HEAP32[(($516)>>2)]=$515;
   label = 542; break;
  case 111: 
   var $518=$1;
   var $519=$yyvsp;
   var $520=(($519)|0);
   var $521=$520;
   var $522=HEAP32[(($521)>>2)];
   var $523=_cond($522);
   var $524=$yyvsp;
   var $525=((($524)-(8))|0);
   var $526=$525;
   var $527=HEAP32[(($526)>>2)];
   var $528=_new_unless($518, $523, $527, 0);
   var $529=$yyval;
   HEAP32[(($529)>>2)]=$528;
   label = 542; break;
  case 112: 
   var $531=$1;
   var $532=$yyvsp;
   var $533=(($532)|0);
   var $534=$533;
   var $535=HEAP32[(($534)>>2)];
   var $536=_cond($535);
   var $537=$yyvsp;
   var $538=((($537)-(8))|0);
   var $539=$538;
   var $540=HEAP32[(($539)>>2)];
   var $541=_new_while($531, $536, $540);
   var $542=$yyval;
   HEAP32[(($542)>>2)]=$541;
   label = 542; break;
  case 113: 
   var $544=$1;
   var $545=$yyvsp;
   var $546=(($545)|0);
   var $547=$546;
   var $548=HEAP32[(($547)>>2)];
   var $549=_cond($548);
   var $550=$yyvsp;
   var $551=((($550)-(8))|0);
   var $552=$551;
   var $553=HEAP32[(($552)>>2)];
   var $554=_new_until($544, $549, $553);
   var $555=$yyval;
   HEAP32[(($555)>>2)]=$554;
   label = 542; break;
  case 114: 
   var $557=$1;
   var $558=$yyvsp;
   var $559=((($558)-(8))|0);
   var $560=$559;
   var $561=HEAP32[(($560)>>2)];
   var $562=$1;
   var $563=$1;
   var $564=$yyvsp;
   var $565=(($564)|0);
   var $566=$565;
   var $567=HEAP32[(($566)>>2)];
   var $568=_list3_gen($563, 0, 0, $567);
   var $569=_list1_gen($562, $568);
   var $570=_new_rescue($557, $561, $569, 0);
   var $571=$yyval;
   HEAP32[(($571)>>2)]=$570;
   label = 542; break;
  case 115: 
   var $573=$1;
   _yyerror($573, ((105252)|0));
   var $574=$1;
   var $575=$yyvsp;
   var $576=((($575)-(4))|0);
   var $577=$576;
   var $578=HEAP32[(($577)>>2)];
   var $579=_new_postexe($574, $578);
   var $580=$yyval;
   HEAP32[(($580)>>2)]=$579;
   label = 542; break;
  case 116: 
   var $582=$1;
   var $583=$yyvsp;
   var $584=((($583)-(8))|0);
   var $585=$584;
   var $586=HEAP32[(($585)>>2)];
   var $587=$yyvsp;
   var $588=(($587)|0);
   var $589=$588;
   var $590=HEAP32[(($589)>>2)];
   var $591=_new_masgn($582, $586, $590);
   var $592=$yyval;
   HEAP32[(($592)>>2)]=$591;
   label = 542; break;
  case 117: 
   var $594=$1;
   var $595=$yyvsp;
   var $596=((($595)-(8))|0);
   var $597=$596;
   var $598=HEAP32[(($597)>>2)];
   var $599=$yyvsp;
   var $600=((($599)-(4))|0);
   var $601=$600;
   var $602=HEAP16[(($601)>>1)];
   var $603=$yyvsp;
   var $604=(($603)|0);
   var $605=$604;
   var $606=HEAP32[(($605)>>2)];
   var $607=_new_op_asgn($594, $598, $602, $606);
   var $608=$yyval;
   HEAP32[(($608)>>2)]=$607;
   label = 542; break;
  case 118: 
   var $610=$1;
   var $611=$1;
   var $612=$yyvsp;
   var $613=((($612)-(20))|0);
   var $614=$613;
   var $615=HEAP32[(($614)>>2)];
   var $616=$1;
   var $617=_intern_gen2($616, ((104500)|0), 2);
   var $618=$yyvsp;
   var $619=((($618)-(12))|0);
   var $620=$619;
   var $621=HEAP32[(($620)>>2)];
   var $622=_new_call($611, $615, $617, $621);
   var $623=$yyvsp;
   var $624=((($623)-(4))|0);
   var $625=$624;
   var $626=HEAP16[(($625)>>1)];
   var $627=$yyvsp;
   var $628=(($627)|0);
   var $629=$628;
   var $630=HEAP32[(($629)>>2)];
   var $631=_new_op_asgn($610, $622, $626, $630);
   var $632=$yyval;
   HEAP32[(($632)>>2)]=$631;
   label = 542; break;
  case 119: 
   var $634=$1;
   var $635=$1;
   var $636=$yyvsp;
   var $637=((($636)-(16))|0);
   var $638=$637;
   var $639=HEAP32[(($638)>>2)];
   var $640=$yyvsp;
   var $641=((($640)-(8))|0);
   var $642=$641;
   var $643=HEAP16[(($642)>>1)];
   var $644=_new_call($635, $639, $643, 0);
   var $645=$yyvsp;
   var $646=((($645)-(4))|0);
   var $647=$646;
   var $648=HEAP16[(($647)>>1)];
   var $649=$yyvsp;
   var $650=(($649)|0);
   var $651=$650;
   var $652=HEAP32[(($651)>>2)];
   var $653=_new_op_asgn($634, $644, $648, $652);
   var $654=$yyval;
   HEAP32[(($654)>>2)]=$653;
   label = 542; break;
  case 120: 
   var $656=$1;
   var $657=$1;
   var $658=$yyvsp;
   var $659=((($658)-(16))|0);
   var $660=$659;
   var $661=HEAP32[(($660)>>2)];
   var $662=$yyvsp;
   var $663=((($662)-(8))|0);
   var $664=$663;
   var $665=HEAP16[(($664)>>1)];
   var $666=_new_call($657, $661, $665, 0);
   var $667=$yyvsp;
   var $668=((($667)-(4))|0);
   var $669=$668;
   var $670=HEAP16[(($669)>>1)];
   var $671=$yyvsp;
   var $672=(($671)|0);
   var $673=$672;
   var $674=HEAP32[(($673)>>2)];
   var $675=_new_op_asgn($656, $666, $670, $674);
   var $676=$yyval;
   HEAP32[(($676)>>2)]=$675;
   label = 542; break;
  case 121: 
   var $678=$1;
   _yyerror($678, ((103940)|0));
   var $679=$yyval;
   HEAP32[(($679)>>2)]=0;
   label = 542; break;
  case 122: 
   var $681=$1;
   var $682=$1;
   var $683=$yyvsp;
   var $684=((($683)-(16))|0);
   var $685=$684;
   var $686=HEAP32[(($685)>>2)];
   var $687=$yyvsp;
   var $688=((($687)-(8))|0);
   var $689=$688;
   var $690=HEAP16[(($689)>>1)];
   var $691=_new_call($682, $686, $690, 0);
   var $692=$yyvsp;
   var $693=((($692)-(4))|0);
   var $694=$693;
   var $695=HEAP16[(($694)>>1)];
   var $696=$yyvsp;
   var $697=(($696)|0);
   var $698=$697;
   var $699=HEAP32[(($698)>>2)];
   var $700=_new_op_asgn($681, $691, $695, $699);
   var $701=$yyval;
   HEAP32[(($701)>>2)]=$700;
   label = 542; break;
  case 123: 
   var $703=$1;
   var $704=$yyvsp;
   var $705=((($704)-(8))|0);
   var $706=$705;
   var $707=HEAP32[(($706)>>2)];
   _backref_error($703, $707);
   var $708=$1;
   var $709=_new_begin($708, 0);
   var $710=$yyval;
   HEAP32[(($710)>>2)]=$709;
   label = 542; break;
  case 124: 
   var $712=$1;
   var $713=$yyvsp;
   var $714=((($713)-(8))|0);
   var $715=$714;
   var $716=HEAP32[(($715)>>2)];
   var $717=$1;
   var $718=$yyvsp;
   var $719=(($718)|0);
   var $720=$719;
   var $721=HEAP32[(($720)>>2)];
   var $722=_new_array($717, $721);
   var $723=_new_asgn($712, $716, $722);
   var $724=$yyval;
   HEAP32[(($724)>>2)]=$723;
   label = 542; break;
  case 125: 
   var $726=$1;
   var $727=$yyvsp;
   var $728=((($727)-(8))|0);
   var $729=$728;
   var $730=HEAP32[(($729)>>2)];
   var $731=$yyvsp;
   var $732=(($731)|0);
   var $733=$732;
   var $734=HEAP32[(($733)>>2)];
   var $735=_new_masgn($726, $730, $734);
   var $736=$yyval;
   HEAP32[(($736)>>2)]=$735;
   label = 542; break;
  case 126: 
   var $738=$1;
   var $739=$yyvsp;
   var $740=((($739)-(8))|0);
   var $741=$740;
   var $742=HEAP32[(($741)>>2)];
   var $743=$1;
   var $744=$yyvsp;
   var $745=(($744)|0);
   var $746=$745;
   var $747=HEAP32[(($746)>>2)];
   var $748=_new_array($743, $747);
   var $749=_new_masgn($738, $742, $748);
   var $750=$yyval;
   HEAP32[(($750)>>2)]=$749;
   label = 542; break;
  case 127: 
   var $752=$1;
   var $753=$yyvsp;
   var $754=((($753)-(8))|0);
   var $755=$754;
   var $756=HEAP32[(($755)>>2)];
   var $757=$yyvsp;
   var $758=(($757)|0);
   var $759=$758;
   var $760=HEAP32[(($759)>>2)];
   var $761=_new_asgn($752, $756, $760);
   var $762=$yyval;
   HEAP32[(($762)>>2)]=$761;
   label = 542; break;
  case 128: 
   var $764=$1;
   var $765=$yyvsp;
   var $766=((($765)-(8))|0);
   var $767=$766;
   var $768=HEAP32[(($767)>>2)];
   var $769=$yyvsp;
   var $770=(($769)|0);
   var $771=$770;
   var $772=HEAP32[(($771)>>2)];
   var $773=_new_asgn($764, $768, $772);
   var $774=$yyval;
   HEAP32[(($774)>>2)]=$773;
   label = 542; break;
  case 129: 
   var $776=$1;
   var $777=$yyvsp;
   var $778=((($777)-(8))|0);
   var $779=$778;
   var $780=HEAP32[(($779)>>2)];
   var $781=$yyvsp;
   var $782=(($781)|0);
   var $783=$782;
   var $784=HEAP32[(($783)>>2)];
   var $785=_new_and($776, $780, $784);
   var $786=$yyval;
   HEAP32[(($786)>>2)]=$785;
   label = 542; break;
  case 130: 
   var $788=$1;
   var $789=$yyvsp;
   var $790=((($789)-(8))|0);
   var $791=$790;
   var $792=HEAP32[(($791)>>2)];
   var $793=$yyvsp;
   var $794=(($793)|0);
   var $795=$794;
   var $796=HEAP32[(($795)>>2)];
   var $797=_new_or($788, $792, $796);
   var $798=$yyval;
   HEAP32[(($798)>>2)]=$797;
   label = 542; break;
  case 131: 
   var $800=$1;
   var $801=$yyvsp;
   var $802=(($801)|0);
   var $803=$802;
   var $804=HEAP32[(($803)>>2)];
   var $805=_cond($804);
   var $806=_call_uni_op($800, $805, ((103400)|0));
   var $807=$yyval;
   HEAP32[(($807)>>2)]=$806;
   label = 542; break;
  case 132: 
   var $809=$1;
   var $810=$yyvsp;
   var $811=(($810)|0);
   var $812=$811;
   var $813=HEAP32[(($812)>>2)];
   var $814=_cond($813);
   var $815=_call_uni_op($809, $814, ((103400)|0));
   var $816=$yyval;
   HEAP32[(($816)>>2)]=$815;
   label = 542; break;
  case 133: 
   var $818=$yyvsp;
   var $819=(($818)|0);
   var $820=$819;
   var $821=HEAP32[(($820)>>2)];
   var $822=(($821)|(0))!=0;
   if ($822) { label = 135; break; } else { label = 134; break; }
  case 134: 
   var $824=$1;
   var $825=_new_nil($824);
   var $826=$yyval;
   HEAP32[(($826)>>2)]=$825;
   label = 136; break;
  case 135: 
   var $828=$yyvsp;
   var $829=(($828)|0);
   var $830=$829;
   var $831=HEAP32[(($830)>>2)];
   var $832=$yyval;
   HEAP32[(($832)>>2)]=$831;
   label = 136; break;
  case 136: 
   label = 542; break;
  case 137: 
   var $835=$1;
   _local_nest($835);
   label = 542; break;
  case 138: 
   var $837=$1;
   var $838=$yyvsp;
   var $839=((($838)-(8))|0);
   var $840=$839;
   var $841=HEAP32[(($840)>>2)];
   var $842=$yyvsp;
   var $843=((($842)-(4))|0);
   var $844=$843;
   var $845=HEAP32[(($844)>>2)];
   var $846=_new_block($837, $841, $845);
   var $847=$yyval;
   HEAP32[(($847)>>2)]=$846;
   var $848=$1;
   _local_unnest($848);
   label = 542; break;
  case 139: 
   var $850=$1;
   var $851=$yyvsp;
   var $852=((($851)-(4))|0);
   var $853=$852;
   var $854=HEAP16[(($853)>>1)];
   var $855=$yyvsp;
   var $856=(($855)|0);
   var $857=$856;
   var $858=HEAP32[(($857)>>2)];
   var $859=_new_fcall($850, $854, $858);
   var $860=$yyval;
   HEAP32[(($860)>>2)]=$859;
   label = 542; break;
  case 140: 
   var $862=$1;
   var $863=$yyvsp;
   var $864=((($863)-(4))|0);
   var $865=$864;
   var $866=HEAP32[(($865)>>2)];
   var $867=$yyvsp;
   var $868=(($867)|0);
   var $869=$868;
   var $870=HEAP32[(($869)>>2)];
   _args_with_block($862, $866, $870);
   var $871=$1;
   var $872=$yyvsp;
   var $873=((($872)-(8))|0);
   var $874=$873;
   var $875=HEAP16[(($874)>>1)];
   var $876=$yyvsp;
   var $877=((($876)-(4))|0);
   var $878=$877;
   var $879=HEAP32[(($878)>>2)];
   var $880=_new_fcall($871, $875, $879);
   var $881=$yyval;
   HEAP32[(($881)>>2)]=$880;
   label = 542; break;
  case 141: 
   var $883=$1;
   var $884=$yyvsp;
   var $885=((($884)-(12))|0);
   var $886=$885;
   var $887=HEAP32[(($886)>>2)];
   var $888=$yyvsp;
   var $889=((($888)-(4))|0);
   var $890=$889;
   var $891=HEAP16[(($890)>>1)];
   var $892=$yyvsp;
   var $893=(($892)|0);
   var $894=$893;
   var $895=HEAP32[(($894)>>2)];
   var $896=_new_call($883, $887, $891, $895);
   var $897=$yyval;
   HEAP32[(($897)>>2)]=$896;
   label = 542; break;
  case 142: 
   var $899=$1;
   var $900=$yyvsp;
   var $901=((($900)-(4))|0);
   var $902=$901;
   var $903=HEAP32[(($902)>>2)];
   var $904=$yyvsp;
   var $905=(($904)|0);
   var $906=$905;
   var $907=HEAP32[(($906)>>2)];
   _args_with_block($899, $903, $907);
   var $908=$1;
   var $909=$yyvsp;
   var $910=((($909)-(16))|0);
   var $911=$910;
   var $912=HEAP32[(($911)>>2)];
   var $913=$yyvsp;
   var $914=((($913)-(8))|0);
   var $915=$914;
   var $916=HEAP16[(($915)>>1)];
   var $917=$yyvsp;
   var $918=((($917)-(4))|0);
   var $919=$918;
   var $920=HEAP32[(($919)>>2)];
   var $921=_new_call($908, $912, $916, $920);
   var $922=$yyval;
   HEAP32[(($922)>>2)]=$921;
   label = 542; break;
  case 143: 
   var $924=$1;
   var $925=$yyvsp;
   var $926=((($925)-(12))|0);
   var $927=$926;
   var $928=HEAP32[(($927)>>2)];
   var $929=$yyvsp;
   var $930=((($929)-(4))|0);
   var $931=$930;
   var $932=HEAP16[(($931)>>1)];
   var $933=$yyvsp;
   var $934=(($933)|0);
   var $935=$934;
   var $936=HEAP32[(($935)>>2)];
   var $937=_new_call($924, $928, $932, $936);
   var $938=$yyval;
   HEAP32[(($938)>>2)]=$937;
   label = 542; break;
  case 144: 
   var $940=$1;
   var $941=$yyvsp;
   var $942=((($941)-(4))|0);
   var $943=$942;
   var $944=HEAP32[(($943)>>2)];
   var $945=$yyvsp;
   var $946=(($945)|0);
   var $947=$946;
   var $948=HEAP32[(($947)>>2)];
   _args_with_block($940, $944, $948);
   var $949=$1;
   var $950=$yyvsp;
   var $951=((($950)-(16))|0);
   var $952=$951;
   var $953=HEAP32[(($952)>>2)];
   var $954=$yyvsp;
   var $955=((($954)-(8))|0);
   var $956=$955;
   var $957=HEAP16[(($956)>>1)];
   var $958=$yyvsp;
   var $959=((($958)-(4))|0);
   var $960=$959;
   var $961=HEAP32[(($960)>>2)];
   var $962=_new_call($949, $953, $957, $961);
   var $963=$yyval;
   HEAP32[(($963)>>2)]=$962;
   label = 542; break;
  case 145: 
   var $965=$1;
   var $966=$yyvsp;
   var $967=(($966)|0);
   var $968=$967;
   var $969=HEAP32[(($968)>>2)];
   var $970=_new_super($965, $969);
   var $971=$yyval;
   HEAP32[(($971)>>2)]=$970;
   label = 542; break;
  case 146: 
   var $973=$1;
   var $974=$yyvsp;
   var $975=(($974)|0);
   var $976=$975;
   var $977=HEAP32[(($976)>>2)];
   var $978=_new_yield($973, $977);
   var $979=$yyval;
   HEAP32[(($979)>>2)]=$978;
   label = 542; break;
  case 147: 
   var $981=$1;
   var $982=$1;
   var $983=$yyvsp;
   var $984=(($983)|0);
   var $985=$984;
   var $986=HEAP32[(($985)>>2)];
   var $987=_ret_args($982, $986);
   var $988=_new_return($981, $987);
   var $989=$yyval;
   HEAP32[(($989)>>2)]=$988;
   label = 542; break;
  case 148: 
   var $991=$1;
   var $992=$1;
   var $993=$yyvsp;
   var $994=(($993)|0);
   var $995=$994;
   var $996=HEAP32[(($995)>>2)];
   var $997=_ret_args($992, $996);
   var $998=_new_break($991, $997);
   var $999=$yyval;
   HEAP32[(($999)>>2)]=$998;
   label = 542; break;
  case 149: 
   var $1001=$1;
   var $1002=$1;
   var $1003=$yyvsp;
   var $1004=(($1003)|0);
   var $1005=$1004;
   var $1006=HEAP32[(($1005)>>2)];
   var $1007=_ret_args($1002, $1006);
   var $1008=_new_next($1001, $1007);
   var $1009=$yyval;
   HEAP32[(($1009)>>2)]=$1008;
   label = 542; break;
  case 150: 
   var $1011=$yyvsp;
   var $1012=(($1011)|0);
   var $1013=$1012;
   var $1014=HEAP32[(($1013)>>2)];
   var $1015=$yyval;
   HEAP32[(($1015)>>2)]=$1014;
   label = 542; break;
  case 151: 
   var $1017=$yyvsp;
   var $1018=((($1017)-(4))|0);
   var $1019=$1018;
   var $1020=HEAP32[(($1019)>>2)];
   var $1021=$yyval;
   HEAP32[(($1021)>>2)]=$1020;
   label = 542; break;
  case 152: 
   var $1023=$1;
   var $1024=$yyvsp;
   var $1025=((($1024)-(4))|0);
   var $1026=$1025;
   var $1027=HEAP32[(($1026)>>2)];
   var $1028=_list1_gen($1023, $1027);
   var $1029=$yyval;
   HEAP32[(($1029)>>2)]=$1028;
   label = 542; break;
  case 153: 
   var $1031=$1;
   var $1032=$yyvsp;
   var $1033=(($1032)|0);
   var $1034=$1033;
   var $1035=HEAP32[(($1034)>>2)];
   var $1036=_list1_gen($1031, $1035);
   var $1037=$yyval;
   HEAP32[(($1037)>>2)]=$1036;
   label = 542; break;
  case 154: 
   var $1039=$1;
   var $1040=$1;
   var $1041=$yyvsp;
   var $1042=((($1041)-(4))|0);
   var $1043=$1042;
   var $1044=HEAP32[(($1043)>>2)];
   var $1045=$1;
   var $1046=$yyvsp;
   var $1047=(($1046)|0);
   var $1048=$1047;
   var $1049=HEAP32[(($1048)>>2)];
   var $1050=_list1_gen($1045, $1049);
   var $1051=_append_gen($1040, $1044, $1050);
   var $1052=_list1_gen($1039, $1051);
   var $1053=$yyval;
   HEAP32[(($1053)>>2)]=$1052;
   label = 542; break;
  case 155: 
   var $1055=$1;
   var $1056=$yyvsp;
   var $1057=((($1056)-(8))|0);
   var $1058=$1057;
   var $1059=HEAP32[(($1058)>>2)];
   var $1060=$yyvsp;
   var $1061=(($1060)|0);
   var $1062=$1061;
   var $1063=HEAP32[(($1062)>>2)];
   var $1064=_list2_gen($1055, $1059, $1063);
   var $1065=$yyval;
   HEAP32[(($1065)>>2)]=$1064;
   label = 542; break;
  case 156: 
   var $1067=$1;
   var $1068=$yyvsp;
   var $1069=((($1068)-(16))|0);
   var $1070=$1069;
   var $1071=HEAP32[(($1070)>>2)];
   var $1072=$yyvsp;
   var $1073=((($1072)-(8))|0);
   var $1074=$1073;
   var $1075=HEAP32[(($1074)>>2)];
   var $1076=$yyvsp;
   var $1077=(($1076)|0);
   var $1078=$1077;
   var $1079=HEAP32[(($1078)>>2)];
   var $1080=_list3_gen($1067, $1071, $1075, $1079);
   var $1081=$yyval;
   HEAP32[(($1081)>>2)]=$1080;
   label = 542; break;
  case 157: 
   var $1083=$1;
   var $1084=$yyvsp;
   var $1085=((($1084)-(4))|0);
   var $1086=$1085;
   var $1087=HEAP32[(($1086)>>2)];
   var $1088=$1;
   var $1089=_new_nil($1088);
   var $1090=_list2_gen($1083, $1087, $1089);
   var $1091=$yyval;
   HEAP32[(($1091)>>2)]=$1090;
   label = 542; break;
  case 158: 
   var $1093=$1;
   var $1094=$yyvsp;
   var $1095=((($1094)-(12))|0);
   var $1096=$1095;
   var $1097=HEAP32[(($1096)>>2)];
   var $1098=$1;
   var $1099=_new_nil($1098);
   var $1100=$yyvsp;
   var $1101=(($1100)|0);
   var $1102=$1101;
   var $1103=HEAP32[(($1102)>>2)];
   var $1104=_list3_gen($1093, $1097, $1099, $1103);
   var $1105=$yyval;
   HEAP32[(($1105)>>2)]=$1104;
   label = 542; break;
  case 159: 
   var $1107=$1;
   var $1108=$yyvsp;
   var $1109=(($1108)|0);
   var $1110=$1109;
   var $1111=HEAP32[(($1110)>>2)];
   var $1112=_list2_gen($1107, 0, $1111);
   var $1113=$yyval;
   HEAP32[(($1113)>>2)]=$1112;
   label = 542; break;
  case 160: 
   var $1115=$1;
   var $1116=$yyvsp;
   var $1117=((($1116)-(8))|0);
   var $1118=$1117;
   var $1119=HEAP32[(($1118)>>2)];
   var $1120=$yyvsp;
   var $1121=(($1120)|0);
   var $1122=$1121;
   var $1123=HEAP32[(($1122)>>2)];
   var $1124=_list3_gen($1115, 0, $1119, $1123);
   var $1125=$yyval;
   HEAP32[(($1125)>>2)]=$1124;
   label = 542; break;
  case 161: 
   var $1127=$1;
   var $1128=$1;
   var $1129=_new_nil($1128);
   var $1130=_list2_gen($1127, 0, $1129);
   var $1131=$yyval;
   HEAP32[(($1131)>>2)]=$1130;
   label = 542; break;
  case 162: 
   var $1133=$1;
   var $1134=$1;
   var $1135=_new_nil($1134);
   var $1136=$yyvsp;
   var $1137=(($1136)|0);
   var $1138=$1137;
   var $1139=HEAP32[(($1138)>>2)];
   var $1140=_list3_gen($1133, 0, $1135, $1139);
   var $1141=$yyval;
   HEAP32[(($1141)>>2)]=$1140;
   label = 542; break;
  case 163: 
   var $1143=$yyvsp;
   var $1144=((($1143)-(4))|0);
   var $1145=$1144;
   var $1146=HEAP32[(($1145)>>2)];
   var $1147=$yyval;
   HEAP32[(($1147)>>2)]=$1146;
   label = 542; break;
  case 164: 
   var $1149=$1;
   var $1150=$yyvsp;
   var $1151=((($1150)-(4))|0);
   var $1152=$1151;
   var $1153=HEAP32[(($1152)>>2)];
   var $1154=_list1_gen($1149, $1153);
   var $1155=$yyval;
   HEAP32[(($1155)>>2)]=$1154;
   label = 542; break;
  case 165: 
   var $1157=$1;
   var $1158=$yyvsp;
   var $1159=((($1158)-(8))|0);
   var $1160=$1159;
   var $1161=HEAP32[(($1160)>>2)];
   var $1162=$1;
   var $1163=$yyvsp;
   var $1164=((($1163)-(4))|0);
   var $1165=$1164;
   var $1166=HEAP32[(($1165)>>2)];
   var $1167=_list1_gen($1162, $1166);
   var $1168=_append_gen($1157, $1161, $1167);
   var $1169=$yyval;
   HEAP32[(($1169)>>2)]=$1168;
   label = 542; break;
  case 166: 
   var $1171=$1;
   var $1172=$yyvsp;
   var $1173=(($1172)|0);
   var $1174=$1173;
   var $1175=HEAP32[(($1174)>>2)];
   var $1176=_list1_gen($1171, $1175);
   var $1177=$yyval;
   HEAP32[(($1177)>>2)]=$1176;
   label = 542; break;
  case 167: 
   var $1179=$1;
   var $1180=$yyvsp;
   var $1181=((($1180)-(4))|0);
   var $1182=$1181;
   var $1183=HEAP32[(($1182)>>2)];
   var $1184=$1;
   var $1185=$yyvsp;
   var $1186=(($1185)|0);
   var $1187=$1186;
   var $1188=HEAP32[(($1187)>>2)];
   var $1189=_list1_gen($1184, $1188);
   var $1190=_append_gen($1179, $1183, $1189);
   var $1191=$yyval;
   HEAP32[(($1191)>>2)]=$1190;
   label = 542; break;
  case 168: 
   var $1193=$1;
   var $1194=$yyvsp;
   var $1195=(($1194)|0);
   var $1196=$1195;
   var $1197=HEAP32[(($1196)>>2)];
   _assignable($1193, $1197);
   label = 542; break;
  case 169: 
   var $1199=$1;
   var $1200=$yyvsp;
   var $1201=((($1200)-(12))|0);
   var $1202=$1201;
   var $1203=HEAP32[(($1202)>>2)];
   var $1204=$1;
   var $1205=_intern_gen2($1204, ((104500)|0), 2);
   var $1206=$yyvsp;
   var $1207=((($1206)-(4))|0);
   var $1208=$1207;
   var $1209=HEAP32[(($1208)>>2)];
   var $1210=_new_call($1199, $1203, $1205, $1209);
   var $1211=$yyval;
   HEAP32[(($1211)>>2)]=$1210;
   label = 542; break;
  case 170: 
   var $1213=$1;
   var $1214=$yyvsp;
   var $1215=((($1214)-(8))|0);
   var $1216=$1215;
   var $1217=HEAP32[(($1216)>>2)];
   var $1218=$yyvsp;
   var $1219=(($1218)|0);
   var $1220=$1219;
   var $1221=HEAP16[(($1220)>>1)];
   var $1222=_new_call($1213, $1217, $1221, 0);
   var $1223=$yyval;
   HEAP32[(($1223)>>2)]=$1222;
   label = 542; break;
  case 171: 
   var $1225=$1;
   var $1226=$yyvsp;
   var $1227=((($1226)-(8))|0);
   var $1228=$1227;
   var $1229=HEAP32[(($1228)>>2)];
   var $1230=$yyvsp;
   var $1231=(($1230)|0);
   var $1232=$1231;
   var $1233=HEAP16[(($1232)>>1)];
   var $1234=_new_call($1225, $1229, $1233, 0);
   var $1235=$yyval;
   HEAP32[(($1235)>>2)]=$1234;
   label = 542; break;
  case 172: 
   var $1237=$1;
   var $1238=$yyvsp;
   var $1239=((($1238)-(8))|0);
   var $1240=$1239;
   var $1241=HEAP32[(($1240)>>2)];
   var $1242=$yyvsp;
   var $1243=(($1242)|0);
   var $1244=$1243;
   var $1245=HEAP16[(($1244)>>1)];
   var $1246=_new_call($1237, $1241, $1245, 0);
   var $1247=$yyval;
   HEAP32[(($1247)>>2)]=$1246;
   label = 542; break;
  case 173: 
   var $1249=$1;
   var $1250=(($1249+64)|0);
   var $1251=HEAP32[(($1250)>>2)];
   var $1252=(($1251)|(0))!=0;
   if ($1252) { label = 175; break; } else { label = 174; break; }
  case 174: 
   var $1254=$1;
   var $1255=(($1254+68)|0);
   var $1256=HEAP32[(($1255)>>2)];
   var $1257=(($1256)|(0))!=0;
   if ($1257) { label = 175; break; } else { label = 176; break; }
  case 175: 
   var $1259=$1;
   _yyerror($1259, ((102916)|0));
   label = 176; break;
  case 176: 
   var $1261=$1;
   var $1262=$yyvsp;
   var $1263=((($1262)-(8))|0);
   var $1264=$1263;
   var $1265=HEAP32[(($1264)>>2)];
   var $1266=$yyvsp;
   var $1267=(($1266)|0);
   var $1268=$1267;
   var $1269=HEAP16[(($1268)>>1)];
   var $1270=_new_colon2($1261, $1265, $1269);
   var $1271=$yyval;
   HEAP32[(($1271)>>2)]=$1270;
   label = 542; break;
  case 177: 
   var $1273=$1;
   var $1274=(($1273+64)|0);
   var $1275=HEAP32[(($1274)>>2)];
   var $1276=(($1275)|(0))!=0;
   if ($1276) { label = 179; break; } else { label = 178; break; }
  case 178: 
   var $1278=$1;
   var $1279=(($1278+68)|0);
   var $1280=HEAP32[(($1279)>>2)];
   var $1281=(($1280)|(0))!=0;
   if ($1281) { label = 179; break; } else { label = 180; break; }
  case 179: 
   var $1283=$1;
   _yyerror($1283, ((102916)|0));
   label = 180; break;
  case 180: 
   var $1285=$1;
   var $1286=$yyvsp;
   var $1287=(($1286)|0);
   var $1288=$1287;
   var $1289=HEAP16[(($1288)>>1)];
   var $1290=_new_colon3($1285, $1289);
   var $1291=$yyval;
   HEAP32[(($1291)>>2)]=$1290;
   label = 542; break;
  case 181: 
   var $1293=$1;
   var $1294=$yyvsp;
   var $1295=(($1294)|0);
   var $1296=$1295;
   var $1297=HEAP32[(($1296)>>2)];
   _backref_error($1293, $1297);
   var $1298=$yyval;
   HEAP32[(($1298)>>2)]=0;
   label = 542; break;
  case 182: 
   var $1300=$1;
   var $1301=$yyvsp;
   var $1302=(($1301)|0);
   var $1303=$1302;
   var $1304=HEAP32[(($1303)>>2)];
   _assignable($1300, $1304);
   label = 542; break;
  case 183: 
   var $1306=$1;
   var $1307=$yyvsp;
   var $1308=((($1307)-(12))|0);
   var $1309=$1308;
   var $1310=HEAP32[(($1309)>>2)];
   var $1311=$1;
   var $1312=_intern_gen2($1311, ((104500)|0), 2);
   var $1313=$yyvsp;
   var $1314=((($1313)-(4))|0);
   var $1315=$1314;
   var $1316=HEAP32[(($1315)>>2)];
   var $1317=_new_call($1306, $1310, $1312, $1316);
   var $1318=$yyval;
   HEAP32[(($1318)>>2)]=$1317;
   label = 542; break;
  case 184: 
   var $1320=$1;
   var $1321=$yyvsp;
   var $1322=((($1321)-(8))|0);
   var $1323=$1322;
   var $1324=HEAP32[(($1323)>>2)];
   var $1325=$yyvsp;
   var $1326=(($1325)|0);
   var $1327=$1326;
   var $1328=HEAP16[(($1327)>>1)];
   var $1329=_new_call($1320, $1324, $1328, 0);
   var $1330=$yyval;
   HEAP32[(($1330)>>2)]=$1329;
   label = 542; break;
  case 185: 
   var $1332=$1;
   var $1333=$yyvsp;
   var $1334=((($1333)-(8))|0);
   var $1335=$1334;
   var $1336=HEAP32[(($1335)>>2)];
   var $1337=$yyvsp;
   var $1338=(($1337)|0);
   var $1339=$1338;
   var $1340=HEAP16[(($1339)>>1)];
   var $1341=_new_call($1332, $1336, $1340, 0);
   var $1342=$yyval;
   HEAP32[(($1342)>>2)]=$1341;
   label = 542; break;
  case 186: 
   var $1344=$1;
   var $1345=$yyvsp;
   var $1346=((($1345)-(8))|0);
   var $1347=$1346;
   var $1348=HEAP32[(($1347)>>2)];
   var $1349=$yyvsp;
   var $1350=(($1349)|0);
   var $1351=$1350;
   var $1352=HEAP16[(($1351)>>1)];
   var $1353=_new_call($1344, $1348, $1352, 0);
   var $1354=$yyval;
   HEAP32[(($1354)>>2)]=$1353;
   label = 542; break;
  case 187: 
   var $1356=$1;
   var $1357=(($1356+64)|0);
   var $1358=HEAP32[(($1357)>>2)];
   var $1359=(($1358)|(0))!=0;
   if ($1359) { label = 189; break; } else { label = 188; break; }
  case 188: 
   var $1361=$1;
   var $1362=(($1361+68)|0);
   var $1363=HEAP32[(($1362)>>2)];
   var $1364=(($1363)|(0))!=0;
   if ($1364) { label = 189; break; } else { label = 190; break; }
  case 189: 
   var $1366=$1;
   _yyerror($1366, ((102916)|0));
   label = 190; break;
  case 190: 
   var $1368=$1;
   var $1369=$yyvsp;
   var $1370=((($1369)-(8))|0);
   var $1371=$1370;
   var $1372=HEAP32[(($1371)>>2)];
   var $1373=$yyvsp;
   var $1374=(($1373)|0);
   var $1375=$1374;
   var $1376=HEAP16[(($1375)>>1)];
   var $1377=_new_colon2($1368, $1372, $1376);
   var $1378=$yyval;
   HEAP32[(($1378)>>2)]=$1377;
   label = 542; break;
  case 191: 
   var $1380=$1;
   var $1381=(($1380+64)|0);
   var $1382=HEAP32[(($1381)>>2)];
   var $1383=(($1382)|(0))!=0;
   if ($1383) { label = 193; break; } else { label = 192; break; }
  case 192: 
   var $1385=$1;
   var $1386=(($1385+68)|0);
   var $1387=HEAP32[(($1386)>>2)];
   var $1388=(($1387)|(0))!=0;
   if ($1388) { label = 193; break; } else { label = 194; break; }
  case 193: 
   var $1390=$1;
   _yyerror($1390, ((102916)|0));
   label = 194; break;
  case 194: 
   var $1392=$1;
   var $1393=$yyvsp;
   var $1394=(($1393)|0);
   var $1395=$1394;
   var $1396=HEAP16[(($1395)>>1)];
   var $1397=_new_colon3($1392, $1396);
   var $1398=$yyval;
   HEAP32[(($1398)>>2)]=$1397;
   label = 542; break;
  case 195: 
   var $1400=$1;
   var $1401=$yyvsp;
   var $1402=(($1401)|0);
   var $1403=$1402;
   var $1404=HEAP32[(($1403)>>2)];
   _backref_error($1400, $1404);
   var $1405=$yyval;
   HEAP32[(($1405)>>2)]=0;
   label = 542; break;
  case 196: 
   var $1407=$1;
   _yyerror($1407, ((102544)|0));
   label = 542; break;
  case 197: 
   var $1409=$1;
   var $1410=$yyvsp;
   var $1411=(($1410)|0);
   var $1412=$1411;
   var $1413=HEAP16[(($1412)>>1)];
   var $1414=(($1413 << 16) >> 16);
   var $1415=$1414;
   var $1416=_cons_gen($1409, 1, $1415);
   var $1417=$yyval;
   HEAP32[(($1417)>>2)]=$1416;
   label = 542; break;
  case 198: 
   var $1419=$1;
   var $1420=$yyvsp;
   var $1421=(($1420)|0);
   var $1422=$1421;
   var $1423=HEAP16[(($1422)>>1)];
   var $1424=(($1423 << 16) >> 16);
   var $1425=$1424;
   var $1426=_cons_gen($1419, 0, $1425);
   var $1427=$yyval;
   HEAP32[(($1427)>>2)]=$1426;
   label = 542; break;
  case 199: 
   var $1429=$1;
   var $1430=$yyvsp;
   var $1431=((($1430)-(8))|0);
   var $1432=$1431;
   var $1433=HEAP32[(($1432)>>2)];
   var $1434=$yyvsp;
   var $1435=(($1434)|0);
   var $1436=$1435;
   var $1437=HEAP16[(($1436)>>1)];
   var $1438=(($1437 << 16) >> 16);
   var $1439=$1438;
   var $1440=_cons_gen($1429, $1433, $1439);
   var $1441=$yyval;
   HEAP32[(($1441)>>2)]=$1440;
   label = 542; break;
  case 200: 
   var $1443=$1;
   var $1444=(($1443+40)|0);
   HEAP32[(($1444)>>2)]=3;
   var $1445=$yyvsp;
   var $1446=(($1445)|0);
   var $1447=$1446;
   var $1448=HEAP16[(($1447)>>1)];
   var $1449=$yyval;
   HEAP16[(($1449)>>1)]=$1448;
   label = 542; break;
  case 201: 
   var $1451=$1;
   var $1452=(($1451+40)|0);
   HEAP32[(($1452)>>2)]=3;
   var $1453=$yyvsp;
   var $1454=(($1453)|0);
   var $1455=$1454;
   var $1456=HEAP16[(($1455)>>1)];
   var $1457=$yyval;
   HEAP16[(($1457)>>1)]=$1456;
   label = 542; break;
  case 202: 
   var $1459=$1;
   var $1460=$yyvsp;
   var $1461=(($1460)|0);
   var $1462=$1461;
   var $1463=HEAP16[(($1462)>>1)];
   var $1464=_new_undef($1459, $1463);
   var $1465=$yyval;
   HEAP32[(($1465)>>2)]=$1464;
   label = 542; break;
  case 203: 
   var $1467=$1;
   var $1468=(($1467+40)|0);
   HEAP32[(($1468)>>2)]=7;
   label = 542; break;
  case 204: 
   var $1470=$1;
   var $1471=$yyvsp;
   var $1472=((($1471)-(12))|0);
   var $1473=$1472;
   var $1474=HEAP32[(($1473)>>2)];
   var $1475=$1;
   var $1476=$yyvsp;
   var $1477=(($1476)|0);
   var $1478=$1477;
   var $1479=HEAP16[(($1478)>>1)];
   var $1480=(($1479 << 16) >> 16);
   var $1481=$1480;
   var $1482=_list1_gen($1475, $1481);
   var $1483=_append_gen($1470, $1474, $1482);
   var $1484=$yyval;
   HEAP32[(($1484)>>2)]=$1483;
   label = 542; break;
  case 205: 
   var $1486=$1;
   var $1487=_intern_gen_c($1486, 124);
   var $1488=$yyval;
   HEAP16[(($1488)>>1)]=$1487;
   label = 542; break;
  case 206: 
   var $1490=$1;
   var $1491=_intern_gen_c($1490, 94);
   var $1492=$yyval;
   HEAP16[(($1492)>>1)]=$1491;
   label = 542; break;
  case 207: 
   var $1494=$1;
   var $1495=_intern_gen_c($1494, 38);
   var $1496=$yyval;
   HEAP16[(($1496)>>1)]=$1495;
   label = 542; break;
  case 208: 
   var $1498=$1;
   var $1499=_intern_gen2($1498, ((102200)|0), 3);
   var $1500=$yyval;
   HEAP16[(($1500)>>1)]=$1499;
   label = 542; break;
  case 209: 
   var $1502=$1;
   var $1503=_intern_gen2($1502, ((101788)|0), 2);
   var $1504=$yyval;
   HEAP16[(($1504)>>1)]=$1503;
   label = 542; break;
  case 210: 
   var $1506=$1;
   var $1507=_intern_gen2($1506, ((101320)|0), 3);
   var $1508=$yyval;
   HEAP16[(($1508)>>1)]=$1507;
   label = 542; break;
  case 211: 
   var $1510=$1;
   var $1511=_intern_gen2($1510, ((100824)|0), 2);
   var $1512=$yyval;
   HEAP16[(($1512)>>1)]=$1511;
   label = 542; break;
  case 212: 
   var $1514=$1;
   var $1515=_intern_gen2($1514, ((100516)|0), 2);
   var $1516=$yyval;
   HEAP16[(($1516)>>1)]=$1515;
   label = 542; break;
  case 213: 
   var $1518=$1;
   var $1519=_intern_gen_c($1518, 62);
   var $1520=$yyval;
   HEAP16[(($1520)>>1)]=$1519;
   label = 542; break;
  case 214: 
   var $1522=$1;
   var $1523=_intern_gen2($1522, ((99992)|0), 2);
   var $1524=$yyval;
   HEAP16[(($1524)>>1)]=$1523;
   label = 542; break;
  case 215: 
   var $1526=$1;
   var $1527=_intern_gen_c($1526, 60);
   var $1528=$yyval;
   HEAP16[(($1528)>>1)]=$1527;
   label = 542; break;
  case 216: 
   var $1530=$1;
   var $1531=_intern_gen2($1530, ((99740)|0), 2);
   var $1532=$yyval;
   HEAP16[(($1532)>>1)]=$1531;
   label = 542; break;
  case 217: 
   var $1534=$1;
   var $1535=_intern_gen2($1534, ((99328)|0), 2);
   var $1536=$yyval;
   HEAP16[(($1536)>>1)]=$1535;
   label = 542; break;
  case 218: 
   var $1538=$1;
   var $1539=_intern_gen2($1538, ((98908)|0), 2);
   var $1540=$yyval;
   HEAP16[(($1540)>>1)]=$1539;
   label = 542; break;
  case 219: 
   var $1542=$1;
   var $1543=_intern_gen2($1542, ((98348)|0), 2);
   var $1544=$yyval;
   HEAP16[(($1544)>>1)]=$1543;
   label = 542; break;
  case 220: 
   var $1546=$1;
   var $1547=_intern_gen_c($1546, 43);
   var $1548=$yyval;
   HEAP16[(($1548)>>1)]=$1547;
   label = 542; break;
  case 221: 
   var $1550=$1;
   var $1551=_intern_gen_c($1550, 45);
   var $1552=$yyval;
   HEAP16[(($1552)>>1)]=$1551;
   label = 542; break;
  case 222: 
   var $1554=$1;
   var $1555=_intern_gen_c($1554, 42);
   var $1556=$yyval;
   HEAP16[(($1556)>>1)]=$1555;
   label = 542; break;
  case 223: 
   var $1558=$1;
   var $1559=_intern_gen_c($1558, 42);
   var $1560=$yyval;
   HEAP16[(($1560)>>1)]=$1559;
   label = 542; break;
  case 224: 
   var $1562=$1;
   var $1563=_intern_gen_c($1562, 47);
   var $1564=$yyval;
   HEAP16[(($1564)>>1)]=$1563;
   label = 542; break;
  case 225: 
   var $1566=$1;
   var $1567=_intern_gen_c($1566, 37);
   var $1568=$yyval;
   HEAP16[(($1568)>>1)]=$1567;
   label = 542; break;
  case 226: 
   var $1570=$1;
   var $1571=_intern_gen2($1570, ((98048)|0), 2);
   var $1572=$yyval;
   HEAP16[(($1572)>>1)]=$1571;
   label = 542; break;
  case 227: 
   var $1574=$1;
   var $1575=_intern_gen_c($1574, 33);
   var $1576=$yyval;
   HEAP16[(($1576)>>1)]=$1575;
   label = 542; break;
  case 228: 
   var $1578=$1;
   var $1579=_intern_gen_c($1578, 126);
   var $1580=$yyval;
   HEAP16[(($1580)>>1)]=$1579;
   label = 542; break;
  case 229: 
   var $1582=$1;
   var $1583=_intern_gen2($1582, ((97756)|0), 2);
   var $1584=$yyval;
   HEAP16[(($1584)>>1)]=$1583;
   label = 542; break;
  case 230: 
   var $1586=$1;
   var $1587=_intern_gen2($1586, ((97440)|0), 2);
   var $1588=$yyval;
   HEAP16[(($1588)>>1)]=$1587;
   label = 542; break;
  case 231: 
   var $1590=$1;
   var $1591=_intern_gen2($1590, ((104500)|0), 2);
   var $1592=$yyval;
   HEAP16[(($1592)>>1)]=$1591;
   label = 542; break;
  case 232: 
   var $1594=$1;
   var $1595=_intern_gen2($1594, ((97144)|0), 3);
   var $1596=$yyval;
   HEAP16[(($1596)>>1)]=$1595;
   label = 542; break;
  case 233: 
   var $1598=$1;
   var $1599=_intern_gen_c($1598, 96);
   var $1600=$yyval;
   HEAP16[(($1600)>>1)]=$1599;
   label = 542; break;
  case 234: 
   var $1602=$1;
   var $1603=$yyvsp;
   var $1604=((($1603)-(8))|0);
   var $1605=$1604;
   var $1606=HEAP32[(($1605)>>2)];
   var $1607=$yyvsp;
   var $1608=(($1607)|0);
   var $1609=$1608;
   var $1610=HEAP32[(($1609)>>2)];
   var $1611=_new_asgn($1602, $1606, $1610);
   var $1612=$yyval;
   HEAP32[(($1612)>>2)]=$1611;
   label = 542; break;
  case 235: 
   var $1614=$1;
   var $1615=$yyvsp;
   var $1616=((($1615)-(16))|0);
   var $1617=$1616;
   var $1618=HEAP32[(($1617)>>2)];
   var $1619=$1;
   var $1620=$yyvsp;
   var $1621=((($1620)-(8))|0);
   var $1622=$1621;
   var $1623=HEAP32[(($1622)>>2)];
   var $1624=$1;
   var $1625=$1;
   var $1626=$yyvsp;
   var $1627=(($1626)|0);
   var $1628=$1627;
   var $1629=HEAP32[(($1628)>>2)];
   var $1630=_list3_gen($1625, 0, 0, $1629);
   var $1631=_list1_gen($1624, $1630);
   var $1632=_new_rescue($1619, $1623, $1631, 0);
   var $1633=_new_asgn($1614, $1618, $1632);
   var $1634=$yyval;
   HEAP32[(($1634)>>2)]=$1633;
   label = 542; break;
  case 236: 
   var $1636=$1;
   var $1637=$yyvsp;
   var $1638=((($1637)-(8))|0);
   var $1639=$1638;
   var $1640=HEAP32[(($1639)>>2)];
   var $1641=$yyvsp;
   var $1642=((($1641)-(4))|0);
   var $1643=$1642;
   var $1644=HEAP16[(($1643)>>1)];
   var $1645=$yyvsp;
   var $1646=(($1645)|0);
   var $1647=$1646;
   var $1648=HEAP32[(($1647)>>2)];
   var $1649=_new_op_asgn($1636, $1640, $1644, $1648);
   var $1650=$yyval;
   HEAP32[(($1650)>>2)]=$1649;
   label = 542; break;
  case 237: 
   var $1652=$1;
   var $1653=$yyvsp;
   var $1654=((($1653)-(16))|0);
   var $1655=$1654;
   var $1656=HEAP32[(($1655)>>2)];
   var $1657=$yyvsp;
   var $1658=((($1657)-(12))|0);
   var $1659=$1658;
   var $1660=HEAP16[(($1659)>>1)];
   var $1661=$1;
   var $1662=$yyvsp;
   var $1663=((($1662)-(8))|0);
   var $1664=$1663;
   var $1665=HEAP32[(($1664)>>2)];
   var $1666=$1;
   var $1667=$1;
   var $1668=$yyvsp;
   var $1669=(($1668)|0);
   var $1670=$1669;
   var $1671=HEAP32[(($1670)>>2)];
   var $1672=_list3_gen($1667, 0, 0, $1671);
   var $1673=_list1_gen($1666, $1672);
   var $1674=_new_rescue($1661, $1665, $1673, 0);
   var $1675=_new_op_asgn($1652, $1656, $1660, $1674);
   var $1676=$yyval;
   HEAP32[(($1676)>>2)]=$1675;
   label = 542; break;
  case 238: 
   var $1678=$1;
   var $1679=$1;
   var $1680=$yyvsp;
   var $1681=((($1680)-(20))|0);
   var $1682=$1681;
   var $1683=HEAP32[(($1682)>>2)];
   var $1684=$1;
   var $1685=_intern_gen2($1684, ((104500)|0), 2);
   var $1686=$yyvsp;
   var $1687=((($1686)-(12))|0);
   var $1688=$1687;
   var $1689=HEAP32[(($1688)>>2)];
   var $1690=_new_call($1679, $1683, $1685, $1689);
   var $1691=$yyvsp;
   var $1692=((($1691)-(4))|0);
   var $1693=$1692;
   var $1694=HEAP16[(($1693)>>1)];
   var $1695=$yyvsp;
   var $1696=(($1695)|0);
   var $1697=$1696;
   var $1698=HEAP32[(($1697)>>2)];
   var $1699=_new_op_asgn($1678, $1690, $1694, $1698);
   var $1700=$yyval;
   HEAP32[(($1700)>>2)]=$1699;
   label = 542; break;
  case 239: 
   var $1702=$1;
   var $1703=$1;
   var $1704=$yyvsp;
   var $1705=((($1704)-(16))|0);
   var $1706=$1705;
   var $1707=HEAP32[(($1706)>>2)];
   var $1708=$yyvsp;
   var $1709=((($1708)-(8))|0);
   var $1710=$1709;
   var $1711=HEAP16[(($1710)>>1)];
   var $1712=_new_call($1703, $1707, $1711, 0);
   var $1713=$yyvsp;
   var $1714=((($1713)-(4))|0);
   var $1715=$1714;
   var $1716=HEAP16[(($1715)>>1)];
   var $1717=$yyvsp;
   var $1718=(($1717)|0);
   var $1719=$1718;
   var $1720=HEAP32[(($1719)>>2)];
   var $1721=_new_op_asgn($1702, $1712, $1716, $1720);
   var $1722=$yyval;
   HEAP32[(($1722)>>2)]=$1721;
   label = 542; break;
  case 240: 
   var $1724=$1;
   var $1725=$1;
   var $1726=$yyvsp;
   var $1727=((($1726)-(16))|0);
   var $1728=$1727;
   var $1729=HEAP32[(($1728)>>2)];
   var $1730=$yyvsp;
   var $1731=((($1730)-(8))|0);
   var $1732=$1731;
   var $1733=HEAP16[(($1732)>>1)];
   var $1734=_new_call($1725, $1729, $1733, 0);
   var $1735=$yyvsp;
   var $1736=((($1735)-(4))|0);
   var $1737=$1736;
   var $1738=HEAP16[(($1737)>>1)];
   var $1739=$yyvsp;
   var $1740=(($1739)|0);
   var $1741=$1740;
   var $1742=HEAP32[(($1741)>>2)];
   var $1743=_new_op_asgn($1724, $1734, $1738, $1742);
   var $1744=$yyval;
   HEAP32[(($1744)>>2)]=$1743;
   label = 542; break;
  case 241: 
   var $1746=$1;
   var $1747=$1;
   var $1748=$yyvsp;
   var $1749=((($1748)-(16))|0);
   var $1750=$1749;
   var $1751=HEAP32[(($1750)>>2)];
   var $1752=$yyvsp;
   var $1753=((($1752)-(8))|0);
   var $1754=$1753;
   var $1755=HEAP16[(($1754)>>1)];
   var $1756=_new_call($1747, $1751, $1755, 0);
   var $1757=$yyvsp;
   var $1758=((($1757)-(4))|0);
   var $1759=$1758;
   var $1760=HEAP16[(($1759)>>1)];
   var $1761=$yyvsp;
   var $1762=(($1761)|0);
   var $1763=$1762;
   var $1764=HEAP32[(($1763)>>2)];
   var $1765=_new_op_asgn($1746, $1756, $1760, $1764);
   var $1766=$yyval;
   HEAP32[(($1766)>>2)]=$1765;
   label = 542; break;
  case 242: 
   var $1768=$1;
   _yyerror($1768, ((103940)|0));
   var $1769=$1;
   var $1770=_new_begin($1769, 0);
   var $1771=$yyval;
   HEAP32[(($1771)>>2)]=$1770;
   label = 542; break;
  case 243: 
   var $1773=$1;
   _yyerror($1773, ((103940)|0));
   var $1774=$1;
   var $1775=_new_begin($1774, 0);
   var $1776=$yyval;
   HEAP32[(($1776)>>2)]=$1775;
   label = 542; break;
  case 244: 
   var $1778=$1;
   var $1779=$yyvsp;
   var $1780=((($1779)-(8))|0);
   var $1781=$1780;
   var $1782=HEAP32[(($1781)>>2)];
   _backref_error($1778, $1782);
   var $1783=$1;
   var $1784=_new_begin($1783, 0);
   var $1785=$yyval;
   HEAP32[(($1785)>>2)]=$1784;
   label = 542; break;
  case 245: 
   var $1787=$1;
   var $1788=$yyvsp;
   var $1789=((($1788)-(8))|0);
   var $1790=$1789;
   var $1791=HEAP32[(($1790)>>2)];
   var $1792=$yyvsp;
   var $1793=(($1792)|0);
   var $1794=$1793;
   var $1795=HEAP32[(($1794)>>2)];
   var $1796=_new_dot2($1787, $1791, $1795);
   var $1797=$yyval;
   HEAP32[(($1797)>>2)]=$1796;
   label = 542; break;
  case 246: 
   var $1799=$1;
   var $1800=$yyvsp;
   var $1801=((($1800)-(8))|0);
   var $1802=$1801;
   var $1803=HEAP32[(($1802)>>2)];
   var $1804=$yyvsp;
   var $1805=(($1804)|0);
   var $1806=$1805;
   var $1807=HEAP32[(($1806)>>2)];
   var $1808=_new_dot3($1799, $1803, $1807);
   var $1809=$yyval;
   HEAP32[(($1809)>>2)]=$1808;
   label = 542; break;
  case 247: 
   var $1811=$1;
   var $1812=$yyvsp;
   var $1813=((($1812)-(8))|0);
   var $1814=$1813;
   var $1815=HEAP32[(($1814)>>2)];
   var $1816=$yyvsp;
   var $1817=(($1816)|0);
   var $1818=$1817;
   var $1819=HEAP32[(($1818)>>2)];
   var $1820=_call_bin_op($1811, $1815, ((96836)|0), $1819);
   var $1821=$yyval;
   HEAP32[(($1821)>>2)]=$1820;
   label = 542; break;
  case 248: 
   var $1823=$1;
   var $1824=$yyvsp;
   var $1825=((($1824)-(8))|0);
   var $1826=$1825;
   var $1827=HEAP32[(($1826)>>2)];
   var $1828=$yyvsp;
   var $1829=(($1828)|0);
   var $1830=$1829;
   var $1831=HEAP32[(($1830)>>2)];
   var $1832=_call_bin_op($1823, $1827, ((96320)|0), $1831);
   var $1833=$yyval;
   HEAP32[(($1833)>>2)]=$1832;
   label = 542; break;
  case 249: 
   var $1835=$1;
   var $1836=$yyvsp;
   var $1837=((($1836)-(8))|0);
   var $1838=$1837;
   var $1839=HEAP32[(($1838)>>2)];
   var $1840=$yyvsp;
   var $1841=(($1840)|0);
   var $1842=$1841;
   var $1843=HEAP32[(($1842)>>2)];
   var $1844=_call_bin_op($1835, $1839, ((96104)|0), $1843);
   var $1845=$yyval;
   HEAP32[(($1845)>>2)]=$1844;
   label = 542; break;
  case 250: 
   var $1847=$1;
   var $1848=$yyvsp;
   var $1849=((($1848)-(8))|0);
   var $1850=$1849;
   var $1851=HEAP32[(($1850)>>2)];
   var $1852=$yyvsp;
   var $1853=(($1852)|0);
   var $1854=$1853;
   var $1855=HEAP32[(($1854)>>2)];
   var $1856=_call_bin_op($1847, $1851, ((95928)|0), $1855);
   var $1857=$yyval;
   HEAP32[(($1857)>>2)]=$1856;
   label = 542; break;
  case 251: 
   var $1859=$1;
   var $1860=$yyvsp;
   var $1861=((($1860)-(8))|0);
   var $1862=$1861;
   var $1863=HEAP32[(($1862)>>2)];
   var $1864=$yyvsp;
   var $1865=(($1864)|0);
   var $1866=$1865;
   var $1867=HEAP32[(($1866)>>2)];
   var $1868=_call_bin_op($1859, $1863, ((95712)|0), $1867);
   var $1869=$yyval;
   HEAP32[(($1869)>>2)]=$1868;
   label = 542; break;
  case 252: 
   var $1871=$1;
   var $1872=$yyvsp;
   var $1873=((($1872)-(8))|0);
   var $1874=$1873;
   var $1875=HEAP32[(($1874)>>2)];
   var $1876=$yyvsp;
   var $1877=(($1876)|0);
   var $1878=$1877;
   var $1879=HEAP32[(($1878)>>2)];
   var $1880=_call_bin_op($1871, $1875, ((98048)|0), $1879);
   var $1881=$yyval;
   HEAP32[(($1881)>>2)]=$1880;
   label = 542; break;
  case 253: 
   var $1883=$1;
   var $1884=$1;
   var $1885=$yyvsp;
   var $1886=((($1885)-(8))|0);
   var $1887=$1886;
   var $1888=HEAP32[(($1887)>>2)];
   var $1889=$yyvsp;
   var $1890=(($1889)|0);
   var $1891=$1890;
   var $1892=HEAP32[(($1891)>>2)];
   var $1893=_call_bin_op($1884, $1888, ((98048)|0), $1892);
   var $1894=_call_uni_op($1883, $1893, ((97440)|0));
   var $1895=$yyval;
   HEAP32[(($1895)>>2)]=$1894;
   label = 542; break;
  case 254: 
   var $1897=$1;
   var $1898=$1;
   var $1899=$yyvsp;
   var $1900=((($1899)-(8))|0);
   var $1901=$1900;
   var $1902=HEAP32[(($1901)>>2)];
   var $1903=$yyvsp;
   var $1904=(($1903)|0);
   var $1905=$1904;
   var $1906=HEAP32[(($1905)>>2)];
   var $1907=_call_bin_op($1898, $1902, ((98048)|0), $1906);
   var $1908=_call_uni_op($1897, $1907, ((97440)|0));
   var $1909=$yyval;
   HEAP32[(($1909)>>2)]=$1908;
   label = 542; break;
  case 255: 
   var $1911=$1;
   var $1912=$yyvsp;
   var $1913=(($1912)|0);
   var $1914=$1913;
   var $1915=HEAP32[(($1914)>>2)];
   var $1916=_call_uni_op($1911, $1915, ((97756)|0));
   var $1917=$yyval;
   HEAP32[(($1917)>>2)]=$1916;
   label = 542; break;
  case 256: 
   var $1919=$1;
   var $1920=$yyvsp;
   var $1921=(($1920)|0);
   var $1922=$1921;
   var $1923=HEAP32[(($1922)>>2)];
   var $1924=_call_uni_op($1919, $1923, ((97440)|0));
   var $1925=$yyval;
   HEAP32[(($1925)>>2)]=$1924;
   label = 542; break;
  case 257: 
   var $1927=$1;
   var $1928=$yyvsp;
   var $1929=((($1928)-(8))|0);
   var $1930=$1929;
   var $1931=HEAP32[(($1930)>>2)];
   var $1932=$yyvsp;
   var $1933=(($1932)|0);
   var $1934=$1933;
   var $1935=HEAP32[(($1934)>>2)];
   var $1936=_call_bin_op($1927, $1931, ((95496)|0), $1935);
   var $1937=$yyval;
   HEAP32[(($1937)>>2)]=$1936;
   label = 542; break;
  case 258: 
   var $1939=$1;
   var $1940=$yyvsp;
   var $1941=((($1940)-(8))|0);
   var $1942=$1941;
   var $1943=HEAP32[(($1942)>>2)];
   var $1944=$yyvsp;
   var $1945=(($1944)|0);
   var $1946=$1945;
   var $1947=HEAP32[(($1946)>>2)];
   var $1948=_call_bin_op($1939, $1943, ((95216)|0), $1947);
   var $1949=$yyval;
   HEAP32[(($1949)>>2)]=$1948;
   label = 542; break;
  case 259: 
   var $1951=$1;
   var $1952=$yyvsp;
   var $1953=((($1952)-(8))|0);
   var $1954=$1953;
   var $1955=HEAP32[(($1954)>>2)];
   var $1956=$yyvsp;
   var $1957=(($1956)|0);
   var $1958=$1957;
   var $1959=HEAP32[(($1958)>>2)];
   var $1960=_call_bin_op($1951, $1955, ((95008)|0), $1959);
   var $1961=$yyval;
   HEAP32[(($1961)>>2)]=$1960;
   label = 542; break;
  case 260: 
   var $1963=$1;
   var $1964=$yyvsp;
   var $1965=((($1964)-(8))|0);
   var $1966=$1965;
   var $1967=HEAP32[(($1966)>>2)];
   var $1968=$yyvsp;
   var $1969=(($1968)|0);
   var $1970=$1969;
   var $1971=HEAP32[(($1970)>>2)];
   var $1972=_call_bin_op($1963, $1967, ((102200)|0), $1971);
   var $1973=$yyval;
   HEAP32[(($1973)>>2)]=$1972;
   label = 542; break;
  case 261: 
   var $1975=$1;
   var $1976=$yyvsp;
   var $1977=((($1976)-(8))|0);
   var $1978=$1977;
   var $1979=HEAP32[(($1978)>>2)];
   var $1980=$yyvsp;
   var $1981=(($1980)|0);
   var $1982=$1981;
   var $1983=HEAP32[(($1982)>>2)];
   var $1984=_call_bin_op($1975, $1979, ((94808)|0), $1983);
   var $1985=$yyval;
   HEAP32[(($1985)>>2)]=$1984;
   label = 542; break;
  case 262: 
   var $1987=$1;
   var $1988=$yyvsp;
   var $1989=((($1988)-(8))|0);
   var $1990=$1989;
   var $1991=HEAP32[(($1990)>>2)];
   var $1992=$yyvsp;
   var $1993=(($1992)|0);
   var $1994=$1993;
   var $1995=HEAP32[(($1994)>>2)];
   var $1996=_call_bin_op($1987, $1991, ((99992)|0), $1995);
   var $1997=$yyval;
   HEAP32[(($1997)>>2)]=$1996;
   label = 542; break;
  case 263: 
   var $1999=$1;
   var $2000=$yyvsp;
   var $2001=((($2000)-(8))|0);
   var $2002=$2001;
   var $2003=HEAP32[(($2002)>>2)];
   var $2004=$yyvsp;
   var $2005=(($2004)|0);
   var $2006=$2005;
   var $2007=HEAP32[(($2006)>>2)];
   var $2008=_call_bin_op($1999, $2003, ((94456)|0), $2007);
   var $2009=$yyval;
   HEAP32[(($2009)>>2)]=$2008;
   label = 542; break;
  case 264: 
   var $2011=$1;
   var $2012=$yyvsp;
   var $2013=((($2012)-(8))|0);
   var $2014=$2013;
   var $2015=HEAP32[(($2014)>>2)];
   var $2016=$yyvsp;
   var $2017=(($2016)|0);
   var $2018=$2017;
   var $2019=HEAP32[(($2018)>>2)];
   var $2020=_call_bin_op($2011, $2015, ((99740)|0), $2019);
   var $2021=$yyval;
   HEAP32[(($2021)>>2)]=$2020;
   label = 542; break;
  case 265: 
   var $2023=$1;
   var $2024=$yyvsp;
   var $2025=((($2024)-(8))|0);
   var $2026=$2025;
   var $2027=HEAP32[(($2026)>>2)];
   var $2028=$yyvsp;
   var $2029=(($2028)|0);
   var $2030=$2029;
   var $2031=HEAP32[(($2030)>>2)];
   var $2032=_call_bin_op($2023, $2027, ((101788)|0), $2031);
   var $2033=$yyval;
   HEAP32[(($2033)>>2)]=$2032;
   label = 542; break;
  case 266: 
   var $2035=$1;
   var $2036=$yyvsp;
   var $2037=((($2036)-(8))|0);
   var $2038=$2037;
   var $2039=HEAP32[(($2038)>>2)];
   var $2040=$yyvsp;
   var $2041=(($2040)|0);
   var $2042=$2041;
   var $2043=HEAP32[(($2042)>>2)];
   var $2044=_call_bin_op($2035, $2039, ((101320)|0), $2043);
   var $2045=$yyval;
   HEAP32[(($2045)>>2)]=$2044;
   label = 542; break;
  case 267: 
   var $2047=$1;
   var $2048=$yyvsp;
   var $2049=((($2048)-(8))|0);
   var $2050=$2049;
   var $2051=HEAP32[(($2050)>>2)];
   var $2052=$yyvsp;
   var $2053=(($2052)|0);
   var $2054=$2053;
   var $2055=HEAP32[(($2054)>>2)];
   var $2056=_call_bin_op($2047, $2051, ((99328)|0), $2055);
   var $2057=$yyval;
   HEAP32[(($2057)>>2)]=$2056;
   label = 542; break;
  case 268: 
   var $2059=$1;
   var $2060=$yyvsp;
   var $2061=((($2060)-(8))|0);
   var $2062=$2061;
   var $2063=HEAP32[(($2062)>>2)];
   var $2064=$yyvsp;
   var $2065=(($2064)|0);
   var $2066=$2065;
   var $2067=HEAP32[(($2066)>>2)];
   var $2068=_call_bin_op($2059, $2063, ((100824)|0), $2067);
   var $2069=$yyval;
   HEAP32[(($2069)>>2)]=$2068;
   label = 542; break;
  case 269: 
   var $2071=$1;
   var $2072=$yyvsp;
   var $2073=((($2072)-(8))|0);
   var $2074=$2073;
   var $2075=HEAP32[(($2074)>>2)];
   var $2076=$yyvsp;
   var $2077=(($2076)|0);
   var $2078=$2077;
   var $2079=HEAP32[(($2078)>>2)];
   var $2080=_call_bin_op($2071, $2075, ((100516)|0), $2079);
   var $2081=$yyval;
   HEAP32[(($2081)>>2)]=$2080;
   label = 542; break;
  case 270: 
   var $2083=$1;
   var $2084=$yyvsp;
   var $2085=(($2084)|0);
   var $2086=$2085;
   var $2087=HEAP32[(($2086)>>2)];
   var $2088=_cond($2087);
   var $2089=_call_uni_op($2083, $2088, ((103400)|0));
   var $2090=$yyval;
   HEAP32[(($2090)>>2)]=$2089;
   label = 542; break;
  case 271: 
   var $2092=$1;
   var $2093=$yyvsp;
   var $2094=(($2093)|0);
   var $2095=$2094;
   var $2096=HEAP32[(($2095)>>2)];
   var $2097=_cond($2096);
   var $2098=_call_uni_op($2092, $2097, ((94240)|0));
   var $2099=$yyval;
   HEAP32[(($2099)>>2)]=$2098;
   label = 542; break;
  case 272: 
   var $2101=$1;
   var $2102=$yyvsp;
   var $2103=((($2102)-(8))|0);
   var $2104=$2103;
   var $2105=HEAP32[(($2104)>>2)];
   var $2106=$yyvsp;
   var $2107=(($2106)|0);
   var $2108=$2107;
   var $2109=HEAP32[(($2108)>>2)];
   var $2110=_call_bin_op($2101, $2105, ((98908)|0), $2109);
   var $2111=$yyval;
   HEAP32[(($2111)>>2)]=$2110;
   label = 542; break;
  case 273: 
   var $2113=$1;
   var $2114=$yyvsp;
   var $2115=((($2114)-(8))|0);
   var $2116=$2115;
   var $2117=HEAP32[(($2116)>>2)];
   var $2118=$yyvsp;
   var $2119=(($2118)|0);
   var $2120=$2119;
   var $2121=HEAP32[(($2120)>>2)];
   var $2122=_call_bin_op($2113, $2117, ((98348)|0), $2121);
   var $2123=$yyval;
   HEAP32[(($2123)>>2)]=$2122;
   label = 542; break;
  case 274: 
   var $2125=$1;
   var $2126=$yyvsp;
   var $2127=((($2126)-(8))|0);
   var $2128=$2127;
   var $2129=HEAP32[(($2128)>>2)];
   var $2130=$yyvsp;
   var $2131=(($2130)|0);
   var $2132=$2131;
   var $2133=HEAP32[(($2132)>>2)];
   var $2134=_new_and($2125, $2129, $2133);
   var $2135=$yyval;
   HEAP32[(($2135)>>2)]=$2134;
   label = 542; break;
  case 275: 
   var $2137=$1;
   var $2138=$yyvsp;
   var $2139=((($2138)-(8))|0);
   var $2140=$2139;
   var $2141=HEAP32[(($2140)>>2)];
   var $2142=$yyvsp;
   var $2143=(($2142)|0);
   var $2144=$2143;
   var $2145=HEAP32[(($2144)>>2)];
   var $2146=_new_or($2137, $2141, $2145);
   var $2147=$yyval;
   HEAP32[(($2147)>>2)]=$2146;
   label = 542; break;
  case 276: 
   var $2149=$1;
   var $2150=$yyvsp;
   var $2151=((($2150)-(20))|0);
   var $2152=$2151;
   var $2153=HEAP32[(($2152)>>2)];
   var $2154=_cond($2153);
   var $2155=$yyvsp;
   var $2156=((($2155)-(12))|0);
   var $2157=$2156;
   var $2158=HEAP32[(($2157)>>2)];
   var $2159=$yyvsp;
   var $2160=(($2159)|0);
   var $2161=$2160;
   var $2162=HEAP32[(($2161)>>2)];
   var $2163=_new_if($2149, $2154, $2158, $2162);
   var $2164=$yyval;
   HEAP32[(($2164)>>2)]=$2163;
   label = 542; break;
  case 277: 
   var $2166=$yyvsp;
   var $2167=(($2166)|0);
   var $2168=$2167;
   var $2169=HEAP32[(($2168)>>2)];
   var $2170=$yyval;
   HEAP32[(($2170)>>2)]=$2169;
   label = 542; break;
  case 278: 
   var $2172=$yyvsp;
   var $2173=(($2172)|0);
   var $2174=$2173;
   var $2175=HEAP32[(($2174)>>2)];
   var $2176=$yyval;
   HEAP32[(($2176)>>2)]=$2175;
   var $2177=$yyval;
   var $2178=HEAP32[(($2177)>>2)];
   var $2179=(($2178)|(0))!=0;
   if ($2179) { label = 280; break; } else { label = 279; break; }
  case 279: 
   var $2181=$1;
   var $2182=_new_nil($2181);
   var $2183=$yyval;
   HEAP32[(($2183)>>2)]=$2182;
   label = 280; break;
  case 280: 
   label = 542; break;
  case 281: 
   var $2186=$yyvsp;
   var $2187=((($2186)-(4))|0);
   var $2188=$2187;
   var $2189=HEAP32[(($2188)>>2)];
   var $2190=$yyval;
   HEAP32[(($2190)>>2)]=$2189;
   label = 542; break;
  case 282: 
   var $2192=$1;
   var $2193=$yyvsp;
   var $2194=((($2193)-(12))|0);
   var $2195=$2194;
   var $2196=HEAP32[(($2195)>>2)];
   var $2197=$1;
   var $2198=$1;
   var $2199=$yyvsp;
   var $2200=((($2199)-(4))|0);
   var $2201=$2200;
   var $2202=HEAP32[(($2201)>>2)];
   var $2203=_new_hash($2198, $2202);
   var $2204=_list1_gen($2197, $2203);
   var $2205=_append_gen($2192, $2196, $2204);
   var $2206=$yyval;
   HEAP32[(($2206)>>2)]=$2205;
   label = 542; break;
  case 283: 
   var $2208=$1;
   var $2209=$1;
   var $2210=$yyvsp;
   var $2211=((($2210)-(4))|0);
   var $2212=$2211;
   var $2213=HEAP32[(($2212)>>2)];
   var $2214=_new_hash($2209, $2213);
   var $2215=_cons_gen($2208, $2214, 0);
   var $2216=$yyval;
   HEAP32[(($2216)>>2)]=$2215;
   label = 542; break;
  case 284: 
   var $2218=$yyvsp;
   var $2219=((($2218)-(4))|0);
   var $2220=$2219;
   var $2221=HEAP32[(($2220)>>2)];
   var $2222=$yyval;
   HEAP32[(($2222)>>2)]=$2221;
   label = 542; break;
  case 285: 
   var $2224=$1;
   var $2225=$yyvsp;
   var $2226=((($2225)-(4))|0);
   var $2227=$2226;
   var $2228=HEAP32[(($2227)>>2)];
   var $2229=_cons_gen($2224, $2228, 0);
   var $2230=$yyval;
   HEAP32[(($2230)>>2)]=$2229;
   label = 542; break;
  case 286: 
   var $2232=$1;
   var $2233=$1;
   var $2234=$yyvsp;
   var $2235=((($2234)-(12))|0);
   var $2236=$2235;
   var $2237=HEAP32[(($2236)>>2)];
   var $2238=$1;
   var $2239=$1;
   var $2240=$yyvsp;
   var $2241=((($2240)-(4))|0);
   var $2242=$2241;
   var $2243=HEAP32[(($2242)>>2)];
   var $2244=_new_hash($2239, $2243);
   var $2245=_list1_gen($2238, $2244);
   var $2246=_append_gen($2233, $2237, $2245);
   var $2247=_cons_gen($2232, $2246, 0);
   var $2248=$yyval;
   HEAP32[(($2248)>>2)]=$2247;
   label = 542; break;
  case 287: 
   var $2250=$1;
   var $2251=$1;
   var $2252=$1;
   var $2253=$yyvsp;
   var $2254=((($2253)-(4))|0);
   var $2255=$2254;
   var $2256=HEAP32[(($2255)>>2)];
   var $2257=_new_hash($2252, $2256);
   var $2258=_list1_gen($2251, $2257);
   var $2259=_cons_gen($2250, $2258, 0);
   var $2260=$yyval;
   HEAP32[(($2260)>>2)]=$2259;
   label = 542; break;
  case 288: 
   var $2262=$1;
   var $2263=$1;
   var $2264=$yyvsp;
   var $2265=(($2264)|0);
   var $2266=$2265;
   var $2267=HEAP32[(($2266)>>2)];
   var $2268=_list1_gen($2263, $2267);
   var $2269=_cons_gen($2262, $2268, 0);
   var $2270=$yyval;
   HEAP32[(($2270)>>2)]=$2269;
   label = 542; break;
  case 289: 
   var $2272=$1;
   var $2273=$yyvsp;
   var $2274=((($2273)-(4))|0);
   var $2275=$2274;
   var $2276=HEAP32[(($2275)>>2)];
   var $2277=$yyvsp;
   var $2278=(($2277)|0);
   var $2279=$2278;
   var $2280=HEAP32[(($2279)>>2)];
   var $2281=_cons_gen($2272, $2276, $2280);
   var $2282=$yyval;
   HEAP32[(($2282)>>2)]=$2281;
   label = 542; break;
  case 290: 
   var $2284=$1;
   var $2285=$1;
   var $2286=$1;
   var $2287=$yyvsp;
   var $2288=((($2287)-(4))|0);
   var $2289=$2288;
   var $2290=HEAP32[(($2289)>>2)];
   var $2291=_new_hash($2286, $2290);
   var $2292=_list1_gen($2285, $2291);
   var $2293=$yyvsp;
   var $2294=(($2293)|0);
   var $2295=$2294;
   var $2296=HEAP32[(($2295)>>2)];
   var $2297=_cons_gen($2284, $2292, $2296);
   var $2298=$yyval;
   HEAP32[(($2298)>>2)]=$2297;
   label = 542; break;
  case 291: 
   var $2300=$1;
   var $2301=$1;
   var $2302=$yyvsp;
   var $2303=((($2302)-(12))|0);
   var $2304=$2303;
   var $2305=HEAP32[(($2304)>>2)];
   var $2306=$1;
   var $2307=$1;
   var $2308=$yyvsp;
   var $2309=((($2308)-(4))|0);
   var $2310=$2309;
   var $2311=HEAP32[(($2310)>>2)];
   var $2312=_new_hash($2307, $2311);
   var $2313=_list1_gen($2306, $2312);
   var $2314=_append_gen($2301, $2305, $2313);
   var $2315=$yyvsp;
   var $2316=(($2315)|0);
   var $2317=$2316;
   var $2318=HEAP32[(($2317)>>2)];
   var $2319=_cons_gen($2300, $2314, $2318);
   var $2320=$yyval;
   HEAP32[(($2320)>>2)]=$2319;
   label = 542; break;
  case 292: 
   var $2322=$1;
   var $2323=$yyvsp;
   var $2324=(($2323)|0);
   var $2325=$2324;
   var $2326=HEAP32[(($2325)>>2)];
   var $2327=_cons_gen($2322, 0, $2326);
   var $2328=$yyval;
   HEAP32[(($2328)>>2)]=$2327;
   label = 542; break;
  case 293: 
   var $2330=$1;
   var $2331=(($2330+52)|0);
   var $2332=HEAP32[(($2331)>>2)];
   var $2333=$yyval;
   HEAP32[(($2333)>>2)]=$2332;
   var $2334=$1;
   var $2335=(($2334+52)|0);
   var $2336=HEAP32[(($2335)>>2)];
   var $2337=$2336 << 1;
   var $2338=$2337 | 1;
   var $2339=$1;
   var $2340=(($2339+52)|0);
   HEAP32[(($2340)>>2)]=$2338;
   label = 542; break;
  case 294: 
   var $2342=$yyvsp;
   var $2343=((($2342)-(4))|0);
   var $2344=$2343;
   var $2345=HEAP32[(($2344)>>2)];
   var $2346=$1;
   var $2347=(($2346+52)|0);
   HEAP32[(($2347)>>2)]=$2345;
   var $2348=$yyvsp;
   var $2349=(($2348)|0);
   var $2350=$2349;
   var $2351=HEAP32[(($2350)>>2)];
   var $2352=$yyval;
   HEAP32[(($2352)>>2)]=$2351;
   label = 542; break;
  case 295: 
   var $2354=$1;
   var $2355=$yyvsp;
   var $2356=(($2355)|0);
   var $2357=$2356;
   var $2358=HEAP32[(($2357)>>2)];
   var $2359=_new_block_arg($2354, $2358);
   var $2360=$yyval;
   HEAP32[(($2360)>>2)]=$2359;
   label = 542; break;
  case 296: 
   var $2362=$yyvsp;
   var $2363=(($2362)|0);
   var $2364=$2363;
   var $2365=HEAP32[(($2364)>>2)];
   var $2366=$yyval;
   HEAP32[(($2366)>>2)]=$2365;
   label = 542; break;
  case 297: 
   var $2368=$yyval;
   HEAP32[(($2368)>>2)]=0;
   label = 542; break;
  case 298: 
   var $2370=$1;
   var $2371=$yyvsp;
   var $2372=(($2371)|0);
   var $2373=$2372;
   var $2374=HEAP32[(($2373)>>2)];
   var $2375=_cons_gen($2370, $2374, 0);
   var $2376=$yyval;
   HEAP32[(($2376)>>2)]=$2375;
   label = 542; break;
  case 299: 
   var $2378=$1;
   var $2379=$1;
   var $2380=$yyvsp;
   var $2381=(($2380)|0);
   var $2382=$2381;
   var $2383=HEAP32[(($2382)>>2)];
   var $2384=_new_splat($2379, $2383);
   var $2385=_cons_gen($2378, $2384, 0);
   var $2386=$yyval;
   HEAP32[(($2386)>>2)]=$2385;
   label = 542; break;
  case 300: 
   var $2388=$1;
   var $2389=$yyvsp;
   var $2390=((($2389)-(8))|0);
   var $2391=$2390;
   var $2392=HEAP32[(($2391)>>2)];
   var $2393=$1;
   var $2394=$yyvsp;
   var $2395=(($2394)|0);
   var $2396=$2395;
   var $2397=HEAP32[(($2396)>>2)];
   var $2398=_list1_gen($2393, $2397);
   var $2399=_append_gen($2388, $2392, $2398);
   var $2400=$yyval;
   HEAP32[(($2400)>>2)]=$2399;
   label = 542; break;
  case 301: 
   var $2402=$1;
   var $2403=$yyvsp;
   var $2404=((($2403)-(12))|0);
   var $2405=$2404;
   var $2406=HEAP32[(($2405)>>2)];
   var $2407=$1;
   var $2408=$1;
   var $2409=$yyvsp;
   var $2410=(($2409)|0);
   var $2411=$2410;
   var $2412=HEAP32[(($2411)>>2)];
   var $2413=_new_splat($2408, $2412);
   var $2414=_list1_gen($2407, $2413);
   var $2415=_append_gen($2402, $2406, $2414);
   var $2416=$yyval;
   HEAP32[(($2416)>>2)]=$2415;
   label = 542; break;
  case 302: 
   var $2418=$1;
   var $2419=$yyvsp;
   var $2420=((($2419)-(8))|0);
   var $2421=$2420;
   var $2422=HEAP32[(($2421)>>2)];
   var $2423=$1;
   var $2424=$yyvsp;
   var $2425=(($2424)|0);
   var $2426=$2425;
   var $2427=HEAP32[(($2426)>>2)];
   var $2428=_list1_gen($2423, $2427);
   var $2429=_append_gen($2418, $2422, $2428);
   var $2430=$yyval;
   HEAP32[(($2430)>>2)]=$2429;
   label = 542; break;
  case 303: 
   var $2432=$1;
   var $2433=$yyvsp;
   var $2434=((($2433)-(12))|0);
   var $2435=$2434;
   var $2436=HEAP32[(($2435)>>2)];
   var $2437=$1;
   var $2438=$1;
   var $2439=$yyvsp;
   var $2440=(($2439)|0);
   var $2441=$2440;
   var $2442=HEAP32[(($2441)>>2)];
   var $2443=_new_splat($2438, $2442);
   var $2444=_list1_gen($2437, $2443);
   var $2445=_append_gen($2432, $2436, $2444);
   var $2446=$yyval;
   HEAP32[(($2446)>>2)]=$2445;
   label = 542; break;
  case 304: 
   var $2448=$1;
   var $2449=$1;
   var $2450=$yyvsp;
   var $2451=(($2450)|0);
   var $2452=$2451;
   var $2453=HEAP32[(($2452)>>2)];
   var $2454=_new_splat($2449, $2453);
   var $2455=_list1_gen($2448, $2454);
   var $2456=$yyval;
   HEAP32[(($2456)>>2)]=$2455;
   label = 542; break;
  case 305: 
   var $2458=$1;
   var $2459=$yyvsp;
   var $2460=(($2459)|0);
   var $2461=$2460;
   var $2462=HEAP16[(($2461)>>1)];
   var $2463=_new_fcall($2458, $2462, 0);
   var $2464=$yyval;
   HEAP32[(($2464)>>2)]=$2463;
   label = 542; break;
  case 306: 
   var $2466=$1;
   var $2467=(($2466+52)|0);
   var $2468=HEAP32[(($2467)>>2)];
   var $2469=$yyvsp;
   var $2470=(($2469)|0);
   var $2471=$2470;
   HEAP32[(($2471)>>2)]=$2468;
   var $2472=$1;
   var $2473=(($2472+52)|0);
   HEAP32[(($2473)>>2)]=0;
   label = 542; break;
  case 307: 
   var $2475=$yyvsp;
   var $2476=((($2475)-(12))|0);
   var $2477=$2476;
   var $2478=HEAP32[(($2477)>>2)];
   var $2479=$1;
   var $2480=(($2479+52)|0);
   HEAP32[(($2480)>>2)]=$2478;
   var $2481=$yyvsp;
   var $2482=((($2481)-(4))|0);
   var $2483=$2482;
   var $2484=HEAP32[(($2483)>>2)];
   var $2485=$yyval;
   HEAP32[(($2485)>>2)]=$2484;
   label = 542; break;
  case 308: 
   var $2487=$1;
   var $2488=(($2487+40)|0);
   HEAP32[(($2488)>>2)]=2;
   label = 542; break;
  case 309: 
   var $2490=$yyvsp;
   var $2491=((($2490)-(8))|0);
   var $2492=$2491;
   var $2493=HEAP32[(($2492)>>2)];
   var $2494=$yyval;
   HEAP32[(($2494)>>2)]=$2493;
   label = 542; break;
  case 310: 
   var $2496=$1;
   var $2497=(($2496+40)|0);
   HEAP32[(($2497)>>2)]=2;
   label = 542; break;
  case 311: 
   var $2499=$yyval;
   HEAP32[(($2499)>>2)]=0;
   label = 542; break;
  case 312: 
   var $2501=$yyvsp;
   var $2502=((($2501)-(4))|0);
   var $2503=$2502;
   var $2504=HEAP32[(($2503)>>2)];
   var $2505=$yyval;
   HEAP32[(($2505)>>2)]=$2504;
   label = 542; break;
  case 313: 
   var $2507=$1;
   var $2508=$yyvsp;
   var $2509=((($2508)-(8))|0);
   var $2510=$2509;
   var $2511=HEAP32[(($2510)>>2)];
   var $2512=$yyvsp;
   var $2513=(($2512)|0);
   var $2514=$2513;
   var $2515=HEAP16[(($2514)>>1)];
   var $2516=_new_colon2($2507, $2511, $2515);
   var $2517=$yyval;
   HEAP32[(($2517)>>2)]=$2516;
   label = 542; break;
  case 314: 
   var $2519=$1;
   var $2520=$yyvsp;
   var $2521=(($2520)|0);
   var $2522=$2521;
   var $2523=HEAP16[(($2522)>>1)];
   var $2524=_new_colon3($2519, $2523);
   var $2525=$yyval;
   HEAP32[(($2525)>>2)]=$2524;
   label = 542; break;
  case 315: 
   var $2527=$1;
   var $2528=$yyvsp;
   var $2529=((($2528)-(4))|0);
   var $2530=$2529;
   var $2531=HEAP32[(($2530)>>2)];
   var $2532=_new_array($2527, $2531);
   var $2533=$yyval;
   HEAP32[(($2533)>>2)]=$2532;
   label = 542; break;
  case 316: 
   var $2535=$1;
   var $2536=$yyvsp;
   var $2537=((($2536)-(4))|0);
   var $2538=$2537;
   var $2539=HEAP32[(($2538)>>2)];
   var $2540=_new_hash($2535, $2539);
   var $2541=$yyval;
   HEAP32[(($2541)>>2)]=$2540;
   label = 542; break;
  case 317: 
   var $2543=$1;
   var $2544=_new_return($2543, 0);
   var $2545=$yyval;
   HEAP32[(($2545)>>2)]=$2544;
   label = 542; break;
  case 318: 
   var $2547=$1;
   var $2548=$yyvsp;
   var $2549=((($2548)-(4))|0);
   var $2550=$2549;
   var $2551=HEAP32[(($2550)>>2)];
   var $2552=_new_yield($2547, $2551);
   var $2553=$yyval;
   HEAP32[(($2553)>>2)]=$2552;
   label = 542; break;
  case 319: 
   var $2555=$1;
   var $2556=_new_yield($2555, 0);
   var $2557=$yyval;
   HEAP32[(($2557)>>2)]=$2556;
   label = 542; break;
  case 320: 
   var $2559=$1;
   var $2560=_new_yield($2559, 0);
   var $2561=$yyval;
   HEAP32[(($2561)>>2)]=$2560;
   label = 542; break;
  case 321: 
   var $2563=$1;
   var $2564=$yyvsp;
   var $2565=((($2564)-(4))|0);
   var $2566=$2565;
   var $2567=HEAP32[(($2566)>>2)];
   var $2568=_cond($2567);
   var $2569=_call_uni_op($2563, $2568, ((103400)|0));
   var $2570=$yyval;
   HEAP32[(($2570)>>2)]=$2569;
   label = 542; break;
  case 322: 
   var $2572=$1;
   var $2573=$1;
   var $2574=_new_nil($2573);
   var $2575=_call_uni_op($2572, $2574, ((103400)|0));
   var $2576=$yyval;
   HEAP32[(($2576)>>2)]=$2575;
   label = 542; break;
  case 323: 
   var $2578=$1;
   var $2579=$yyvsp;
   var $2580=((($2579)-(4))|0);
   var $2581=$2580;
   var $2582=HEAP16[(($2581)>>1)];
   var $2583=$1;
   var $2584=$yyvsp;
   var $2585=(($2584)|0);
   var $2586=$2585;
   var $2587=HEAP32[(($2586)>>2)];
   var $2588=_cons_gen($2583, 0, $2587);
   var $2589=_new_fcall($2578, $2582, $2588);
   var $2590=$yyval;
   HEAP32[(($2590)>>2)]=$2589;
   label = 542; break;
  case 324: 
   var $2592=$1;
   var $2593=$yyvsp;
   var $2594=((($2593)-(4))|0);
   var $2595=$2594;
   var $2596=HEAP32[(($2595)>>2)];
   var $2597=$yyvsp;
   var $2598=(($2597)|0);
   var $2599=$2598;
   var $2600=HEAP32[(($2599)>>2)];
   _call_with_block($2592, $2596, $2600);
   var $2601=$yyvsp;
   var $2602=((($2601)-(4))|0);
   var $2603=$2602;
   var $2604=HEAP32[(($2603)>>2)];
   var $2605=$yyval;
   HEAP32[(($2605)>>2)]=$2604;
   label = 542; break;
  case 325: 
   var $2607=$1;
   _local_nest($2607);
   var $2608=$1;
   var $2609=(($2608+60)|0);
   var $2610=HEAP32[(($2609)>>2)];
   var $2611=$yyval;
   HEAP32[(($2611)>>2)]=$2610;
   var $2612=$1;
   var $2613=(($2612+56)|0);
   var $2614=HEAP32[(($2613)>>2)];
   var $2615=((($2614)+(1))|0);
   HEAP32[(($2613)>>2)]=$2615;
   var $2616=$1;
   var $2617=(($2616+60)|0);
   HEAP32[(($2617)>>2)]=$2615;
   label = 542; break;
  case 326: 
   var $2619=$yyvsp;
   var $2620=((($2619)-(8))|0);
   var $2621=$2620;
   var $2622=HEAP32[(($2621)>>2)];
   var $2623=$1;
   var $2624=(($2623+60)|0);
   HEAP32[(($2624)>>2)]=$2622;
   var $2625=$1;
   var $2626=$yyvsp;
   var $2627=((($2626)-(4))|0);
   var $2628=$2627;
   var $2629=HEAP32[(($2628)>>2)];
   var $2630=$yyvsp;
   var $2631=(($2630)|0);
   var $2632=$2631;
   var $2633=HEAP32[(($2632)>>2)];
   var $2634=_new_lambda($2625, $2629, $2633);
   var $2635=$yyval;
   HEAP32[(($2635)>>2)]=$2634;
   var $2636=$1;
   _local_unnest($2636);
   label = 542; break;
  case 327: 
   var $2638=$1;
   var $2639=$yyvsp;
   var $2640=((($2639)-(16))|0);
   var $2641=$2640;
   var $2642=HEAP32[(($2641)>>2)];
   var $2643=_cond($2642);
   var $2644=$yyvsp;
   var $2645=((($2644)-(8))|0);
   var $2646=$2645;
   var $2647=HEAP32[(($2646)>>2)];
   var $2648=$yyvsp;
   var $2649=((($2648)-(4))|0);
   var $2650=$2649;
   var $2651=HEAP32[(($2650)>>2)];
   var $2652=_new_if($2638, $2643, $2647, $2651);
   var $2653=$yyval;
   HEAP32[(($2653)>>2)]=$2652;
   label = 542; break;
  case 328: 
   var $2655=$1;
   var $2656=$yyvsp;
   var $2657=((($2656)-(16))|0);
   var $2658=$2657;
   var $2659=HEAP32[(($2658)>>2)];
   var $2660=_cond($2659);
   var $2661=$yyvsp;
   var $2662=((($2661)-(8))|0);
   var $2663=$2662;
   var $2664=HEAP32[(($2663)>>2)];
   var $2665=$yyvsp;
   var $2666=((($2665)-(4))|0);
   var $2667=$2666;
   var $2668=HEAP32[(($2667)>>2)];
   var $2669=_new_unless($2655, $2660, $2664, $2668);
   var $2670=$yyval;
   HEAP32[(($2670)>>2)]=$2669;
   label = 542; break;
  case 329: 
   var $2672=$1;
   var $2673=(($2672+48)|0);
   var $2674=HEAP32[(($2673)>>2)];
   var $2675=$2674 << 1;
   var $2676=$2675 | 1;
   var $2677=$1;
   var $2678=(($2677+48)|0);
   HEAP32[(($2678)>>2)]=$2676;
   label = 542; break;
  case 330: 
   var $2680=$1;
   var $2681=(($2680+48)|0);
   var $2682=HEAP32[(($2681)>>2)];
   var $2683=$2682 >>> 1;
   var $2684=$1;
   var $2685=(($2684+48)|0);
   HEAP32[(($2685)>>2)]=$2683;
   label = 542; break;
  case 331: 
   var $2687=$1;
   var $2688=$yyvsp;
   var $2689=((($2688)-(16))|0);
   var $2690=$2689;
   var $2691=HEAP32[(($2690)>>2)];
   var $2692=_cond($2691);
   var $2693=$yyvsp;
   var $2694=((($2693)-(4))|0);
   var $2695=$2694;
   var $2696=HEAP32[(($2695)>>2)];
   var $2697=_new_while($2687, $2692, $2696);
   var $2698=$yyval;
   HEAP32[(($2698)>>2)]=$2697;
   label = 542; break;
  case 332: 
   var $2700=$1;
   var $2701=(($2700+48)|0);
   var $2702=HEAP32[(($2701)>>2)];
   var $2703=$2702 << 1;
   var $2704=$2703 | 1;
   var $2705=$1;
   var $2706=(($2705+48)|0);
   HEAP32[(($2706)>>2)]=$2704;
   label = 542; break;
  case 333: 
   var $2708=$1;
   var $2709=(($2708+48)|0);
   var $2710=HEAP32[(($2709)>>2)];
   var $2711=$2710 >>> 1;
   var $2712=$1;
   var $2713=(($2712+48)|0);
   HEAP32[(($2713)>>2)]=$2711;
   label = 542; break;
  case 334: 
   var $2715=$1;
   var $2716=$yyvsp;
   var $2717=((($2716)-(16))|0);
   var $2718=$2717;
   var $2719=HEAP32[(($2718)>>2)];
   var $2720=_cond($2719);
   var $2721=$yyvsp;
   var $2722=((($2721)-(4))|0);
   var $2723=$2722;
   var $2724=HEAP32[(($2723)>>2)];
   var $2725=_new_until($2715, $2720, $2724);
   var $2726=$yyval;
   HEAP32[(($2726)>>2)]=$2725;
   label = 542; break;
  case 335: 
   var $2728=$1;
   var $2729=$yyvsp;
   var $2730=((($2729)-(12))|0);
   var $2731=$2730;
   var $2732=HEAP32[(($2731)>>2)];
   var $2733=$yyvsp;
   var $2734=((($2733)-(4))|0);
   var $2735=$2734;
   var $2736=HEAP32[(($2735)>>2)];
   var $2737=_new_case($2728, $2732, $2736);
   var $2738=$yyval;
   HEAP32[(($2738)>>2)]=$2737;
   label = 542; break;
  case 336: 
   var $2740=$1;
   var $2741=$yyvsp;
   var $2742=((($2741)-(4))|0);
   var $2743=$2742;
   var $2744=HEAP32[(($2743)>>2)];
   var $2745=_new_case($2740, 0, $2744);
   var $2746=$yyval;
   HEAP32[(($2746)>>2)]=$2745;
   label = 542; break;
  case 337: 
   var $2748=$1;
   var $2749=(($2748+48)|0);
   var $2750=HEAP32[(($2749)>>2)];
   var $2751=$2750 << 1;
   var $2752=$2751 | 1;
   var $2753=$1;
   var $2754=(($2753+48)|0);
   HEAP32[(($2754)>>2)]=$2752;
   label = 542; break;
  case 338: 
   var $2756=$1;
   var $2757=(($2756+48)|0);
   var $2758=HEAP32[(($2757)>>2)];
   var $2759=$2758 >>> 1;
   var $2760=$1;
   var $2761=(($2760+48)|0);
   HEAP32[(($2761)>>2)]=$2759;
   label = 542; break;
  case 339: 
   var $2763=$1;
   var $2764=$yyvsp;
   var $2765=((($2764)-(28))|0);
   var $2766=$2765;
   var $2767=HEAP32[(($2766)>>2)];
   var $2768=$yyvsp;
   var $2769=((($2768)-(16))|0);
   var $2770=$2769;
   var $2771=HEAP32[(($2770)>>2)];
   var $2772=$yyvsp;
   var $2773=((($2772)-(4))|0);
   var $2774=$2773;
   var $2775=HEAP32[(($2774)>>2)];
   var $2776=_new_for($2763, $2767, $2771, $2775);
   var $2777=$yyval;
   HEAP32[(($2777)>>2)]=$2776;
   label = 542; break;
  case 340: 
   var $2779=$1;
   var $2780=(($2779+64)|0);
   var $2781=HEAP32[(($2780)>>2)];
   var $2782=(($2781)|(0))!=0;
   if ($2782) { label = 342; break; } else { label = 341; break; }
  case 341: 
   var $2784=$1;
   var $2785=(($2784+68)|0);
   var $2786=HEAP32[(($2785)>>2)];
   var $2787=(($2786)|(0))!=0;
   if ($2787) { label = 342; break; } else { label = 343; break; }
  case 342: 
   var $2789=$1;
   _yyerror($2789, ((93808)|0));
   label = 343; break;
  case 343: 
   var $2791=$1;
   var $2792=_local_switch($2791);
   var $2793=$yyval;
   HEAP32[(($2793)>>2)]=$2792;
   label = 542; break;
  case 344: 
   var $2795=$1;
   var $2796=$yyvsp;
   var $2797=((($2796)-(16))|0);
   var $2798=$2797;
   var $2799=HEAP32[(($2798)>>2)];
   var $2800=$yyvsp;
   var $2801=((($2800)-(12))|0);
   var $2802=$2801;
   var $2803=HEAP32[(($2802)>>2)];
   var $2804=$yyvsp;
   var $2805=((($2804)-(4))|0);
   var $2806=$2805;
   var $2807=HEAP32[(($2806)>>2)];
   var $2808=_new_class($2795, $2799, $2803, $2807);
   var $2809=$yyval;
   HEAP32[(($2809)>>2)]=$2808;
   var $2810=$1;
   var $2811=$yyvsp;
   var $2812=((($2811)-(8))|0);
   var $2813=$2812;
   var $2814=HEAP32[(($2813)>>2)];
   _local_resume($2810, $2814);
   label = 542; break;
  case 345: 
   var $2816=$1;
   var $2817=(($2816+64)|0);
   var $2818=HEAP32[(($2817)>>2)];
   var $2819=$yyval;
   HEAP32[(($2819)>>2)]=$2818;
   var $2820=$1;
   var $2821=(($2820+64)|0);
   HEAP32[(($2821)>>2)]=0;
   label = 542; break;
  case 346: 
   var $2823=$1;
   var $2824=$1;
   var $2825=_local_switch($2824);
   var $2826=$1;
   var $2827=(($2826+68)|0);
   var $2828=HEAP32[(($2827)>>2)];
   var $2829=$2828;
   var $2830=_cons_gen($2823, $2825, $2829);
   var $2831=$yyval;
   HEAP32[(($2831)>>2)]=$2830;
   var $2832=$1;
   var $2833=(($2832+68)|0);
   HEAP32[(($2833)>>2)]=0;
   label = 542; break;
  case 347: 
   var $2835=$1;
   var $2836=$yyvsp;
   var $2837=((($2836)-(20))|0);
   var $2838=$2837;
   var $2839=HEAP32[(($2838)>>2)];
   var $2840=$yyvsp;
   var $2841=((($2840)-(4))|0);
   var $2842=$2841;
   var $2843=HEAP32[(($2842)>>2)];
   var $2844=_new_sclass($2835, $2839, $2843);
   var $2845=$yyval;
   HEAP32[(($2845)>>2)]=$2844;
   var $2846=$1;
   var $2847=$yyvsp;
   var $2848=((($2847)-(8))|0);
   var $2849=$2848;
   var $2850=HEAP32[(($2849)>>2)];
   var $2851=(($2850)|0);
   var $2852=HEAP32[(($2851)>>2)];
   _local_resume($2846, $2852);
   var $2853=$yyvsp;
   var $2854=((($2853)-(16))|0);
   var $2855=$2854;
   var $2856=HEAP32[(($2855)>>2)];
   var $2857=$1;
   var $2858=(($2857+64)|0);
   HEAP32[(($2858)>>2)]=$2856;
   var $2859=$yyvsp;
   var $2860=((($2859)-(8))|0);
   var $2861=$2860;
   var $2862=HEAP32[(($2861)>>2)];
   var $2863=(($2862+4)|0);
   var $2864=HEAP32[(($2863)>>2)];
   var $2865=$2864;
   var $2866=$1;
   var $2867=(($2866+68)|0);
   HEAP32[(($2867)>>2)]=$2865;
   label = 542; break;
  case 348: 
   var $2869=$1;
   var $2870=(($2869+64)|0);
   var $2871=HEAP32[(($2870)>>2)];
   var $2872=(($2871)|(0))!=0;
   if ($2872) { label = 350; break; } else { label = 349; break; }
  case 349: 
   var $2874=$1;
   var $2875=(($2874+68)|0);
   var $2876=HEAP32[(($2875)>>2)];
   var $2877=(($2876)|(0))!=0;
   if ($2877) { label = 350; break; } else { label = 351; break; }
  case 350: 
   var $2879=$1;
   _yyerror($2879, ((93524)|0));
   label = 351; break;
  case 351: 
   var $2881=$1;
   var $2882=_local_switch($2881);
   var $2883=$yyval;
   HEAP32[(($2883)>>2)]=$2882;
   label = 542; break;
  case 352: 
   var $2885=$1;
   var $2886=$yyvsp;
   var $2887=((($2886)-(12))|0);
   var $2888=$2887;
   var $2889=HEAP32[(($2888)>>2)];
   var $2890=$yyvsp;
   var $2891=((($2890)-(4))|0);
   var $2892=$2891;
   var $2893=HEAP32[(($2892)>>2)];
   var $2894=_new_module($2885, $2889, $2893);
   var $2895=$yyval;
   HEAP32[(($2895)>>2)]=$2894;
   var $2896=$1;
   var $2897=$yyvsp;
   var $2898=((($2897)-(8))|0);
   var $2899=$2898;
   var $2900=HEAP32[(($2899)>>2)];
   _local_resume($2896, $2900);
   label = 542; break;
  case 353: 
   var $2902=$1;
   var $2903=(($2902+64)|0);
   var $2904=HEAP32[(($2903)>>2)];
   var $2905=((($2904)+(1))|0);
   HEAP32[(($2903)>>2)]=$2905;
   var $2906=$1;
   var $2907=_local_switch($2906);
   var $2908=$yyval;
   HEAP32[(($2908)>>2)]=$2907;
   label = 542; break;
  case 354: 
   var $2910=$1;
   var $2911=$yyvsp;
   var $2912=((($2911)-(16))|0);
   var $2913=$2912;
   var $2914=HEAP16[(($2913)>>1)];
   var $2915=$yyvsp;
   var $2916=((($2915)-(8))|0);
   var $2917=$2916;
   var $2918=HEAP32[(($2917)>>2)];
   var $2919=$yyvsp;
   var $2920=((($2919)-(4))|0);
   var $2921=$2920;
   var $2922=HEAP32[(($2921)>>2)];
   var $2923=_new_def($2910, $2914, $2918, $2922);
   var $2924=$yyval;
   HEAP32[(($2924)>>2)]=$2923;
   var $2925=$1;
   var $2926=$yyvsp;
   var $2927=((($2926)-(12))|0);
   var $2928=$2927;
   var $2929=HEAP32[(($2928)>>2)];
   _local_resume($2925, $2929);
   var $2930=$1;
   var $2931=(($2930+64)|0);
   var $2932=HEAP32[(($2931)>>2)];
   var $2933=((($2932)-(1))|0);
   HEAP32[(($2931)>>2)]=$2933;
   label = 542; break;
  case 355: 
   var $2935=$1;
   var $2936=(($2935+40)|0);
   HEAP32[(($2936)>>2)]=7;
   label = 542; break;
  case 356: 
   var $2938=$1;
   var $2939=(($2938+68)|0);
   var $2940=HEAP32[(($2939)>>2)];
   var $2941=((($2940)+(1))|0);
   HEAP32[(($2939)>>2)]=$2941;
   var $2942=$1;
   var $2943=(($2942+40)|0);
   HEAP32[(($2943)>>2)]=3;
   var $2944=$1;
   var $2945=_local_switch($2944);
   var $2946=$yyval;
   HEAP32[(($2946)>>2)]=$2945;
   label = 542; break;
  case 357: 
   var $2948=$1;
   var $2949=$yyvsp;
   var $2950=((($2949)-(28))|0);
   var $2951=$2950;
   var $2952=HEAP32[(($2951)>>2)];
   var $2953=$yyvsp;
   var $2954=((($2953)-(16))|0);
   var $2955=$2954;
   var $2956=HEAP16[(($2955)>>1)];
   var $2957=$yyvsp;
   var $2958=((($2957)-(8))|0);
   var $2959=$2958;
   var $2960=HEAP32[(($2959)>>2)];
   var $2961=$yyvsp;
   var $2962=((($2961)-(4))|0);
   var $2963=$2962;
   var $2964=HEAP32[(($2963)>>2)];
   var $2965=_new_sdef($2948, $2952, $2956, $2960, $2964);
   var $2966=$yyval;
   HEAP32[(($2966)>>2)]=$2965;
   var $2967=$1;
   var $2968=$yyvsp;
   var $2969=((($2968)-(12))|0);
   var $2970=$2969;
   var $2971=HEAP32[(($2970)>>2)];
   _local_resume($2967, $2971);
   var $2972=$1;
   var $2973=(($2972+68)|0);
   var $2974=HEAP32[(($2973)>>2)];
   var $2975=((($2974)-(1))|0);
   HEAP32[(($2973)>>2)]=$2975;
   label = 542; break;
  case 358: 
   var $2977=$1;
   var $2978=_new_break($2977, 0);
   var $2979=$yyval;
   HEAP32[(($2979)>>2)]=$2978;
   label = 542; break;
  case 359: 
   var $2981=$1;
   var $2982=_new_next($2981, 0);
   var $2983=$yyval;
   HEAP32[(($2983)>>2)]=$2982;
   label = 542; break;
  case 360: 
   var $2985=$1;
   var $2986=_new_redo($2985);
   var $2987=$yyval;
   HEAP32[(($2987)>>2)]=$2986;
   label = 542; break;
  case 361: 
   var $2989=$1;
   var $2990=_new_retry($2989);
   var $2991=$yyval;
   HEAP32[(($2991)>>2)]=$2990;
   label = 542; break;
  case 362: 
   var $2993=$yyvsp;
   var $2994=(($2993)|0);
   var $2995=$2994;
   var $2996=HEAP32[(($2995)>>2)];
   var $2997=$yyval;
   HEAP32[(($2997)>>2)]=$2996;
   var $2998=$yyval;
   var $2999=HEAP32[(($2998)>>2)];
   var $3000=(($2999)|(0))!=0;
   if ($3000) { label = 364; break; } else { label = 363; break; }
  case 363: 
   var $3002=$1;
   var $3003=_new_nil($3002);
   var $3004=$yyval;
   HEAP32[(($3004)>>2)]=$3003;
   label = 364; break;
  case 364: 
   label = 542; break;
  case 365: 
   var $3007=$1;
   var $3008=$yyvsp;
   var $3009=((($3008)-(12))|0);
   var $3010=$3009;
   var $3011=HEAP32[(($3010)>>2)];
   var $3012=_cond($3011);
   var $3013=$yyvsp;
   var $3014=((($3013)-(4))|0);
   var $3015=$3014;
   var $3016=HEAP32[(($3015)>>2)];
   var $3017=$yyvsp;
   var $3018=(($3017)|0);
   var $3019=$3018;
   var $3020=HEAP32[(($3019)>>2)];
   var $3021=_new_if($3007, $3012, $3016, $3020);
   var $3022=$yyval;
   HEAP32[(($3022)>>2)]=$3021;
   label = 542; break;
  case 366: 
   var $3024=$yyvsp;
   var $3025=(($3024)|0);
   var $3026=$3025;
   var $3027=HEAP32[(($3026)>>2)];
   var $3028=$yyval;
   HEAP32[(($3028)>>2)]=$3027;
   label = 542; break;
  case 367: 
   var $3030=$1;
   var $3031=$1;
   var $3032=$yyvsp;
   var $3033=(($3032)|0);
   var $3034=$3033;
   var $3035=HEAP32[(($3034)>>2)];
   var $3036=_list1_gen($3031, $3035);
   var $3037=_list1_gen($3030, $3036);
   var $3038=$yyval;
   HEAP32[(($3038)>>2)]=$3037;
   label = 542; break;
  case 368: 
   var $3040=$1;
   var $3041=$yyvsp;
   var $3042=(($3041)|0);
   var $3043=$3042;
   var $3044=HEAP16[(($3043)>>1)];
   var $3045=_new_arg($3040, $3044);
   var $3046=$yyval;
   HEAP32[(($3046)>>2)]=$3045;
   label = 542; break;
  case 369: 
   var $3048=$1;
   var $3049=$yyvsp;
   var $3050=((($3049)-(4))|0);
   var $3051=$3050;
   var $3052=HEAP32[(($3051)>>2)];
   var $3053=_new_masgn($3048, $3052, 0);
   var $3054=$yyval;
   HEAP32[(($3054)>>2)]=$3053;
   label = 542; break;
  case 370: 
   var $3056=$1;
   var $3057=$yyvsp;
   var $3058=(($3057)|0);
   var $3059=$3058;
   var $3060=HEAP32[(($3059)>>2)];
   var $3061=_list1_gen($3056, $3060);
   var $3062=$yyval;
   HEAP32[(($3062)>>2)]=$3061;
   label = 542; break;
  case 371: 
   var $3064=$1;
   var $3065=$yyvsp;
   var $3066=((($3065)-(8))|0);
   var $3067=$3066;
   var $3068=HEAP32[(($3067)>>2)];
   var $3069=$1;
   var $3070=$yyvsp;
   var $3071=(($3070)|0);
   var $3072=$3071;
   var $3073=HEAP32[(($3072)>>2)];
   var $3074=_list1_gen($3069, $3073);
   var $3075=_append_gen($3064, $3068, $3074);
   var $3076=$yyval;
   HEAP32[(($3076)>>2)]=$3075;
   label = 542; break;
  case 372: 
   var $3078=$1;
   var $3079=$yyvsp;
   var $3080=(($3079)|0);
   var $3081=$3080;
   var $3082=HEAP32[(($3081)>>2)];
   var $3083=_list3_gen($3078, $3082, 0, 0);
   var $3084=$yyval;
   HEAP32[(($3084)>>2)]=$3083;
   label = 542; break;
  case 373: 
   var $3086=$1;
   var $3087=$yyvsp;
   var $3088=((($3087)-(12))|0);
   var $3089=$3088;
   var $3090=HEAP32[(($3089)>>2)];
   var $3091=$1;
   var $3092=$yyvsp;
   var $3093=(($3092)|0);
   var $3094=$3093;
   var $3095=HEAP16[(($3094)>>1)];
   var $3096=_new_arg($3091, $3095);
   var $3097=_list3_gen($3086, $3090, $3096, 0);
   var $3098=$yyval;
   HEAP32[(($3098)>>2)]=$3097;
   label = 542; break;
  case 374: 
   var $3100=$1;
   var $3101=$yyvsp;
   var $3102=((($3101)-(20))|0);
   var $3103=$3102;
   var $3104=HEAP32[(($3103)>>2)];
   var $3105=$1;
   var $3106=$yyvsp;
   var $3107=((($3106)-(8))|0);
   var $3108=$3107;
   var $3109=HEAP16[(($3108)>>1)];
   var $3110=_new_arg($3105, $3109);
   var $3111=$yyvsp;
   var $3112=(($3111)|0);
   var $3113=$3112;
   var $3114=HEAP32[(($3113)>>2)];
   var $3115=_list3_gen($3100, $3104, $3110, $3114);
   var $3116=$yyval;
   HEAP32[(($3116)>>2)]=$3115;
   label = 542; break;
  case 375: 
   var $3118=$1;
   var $3119=$yyvsp;
   var $3120=((($3119)-(8))|0);
   var $3121=$3120;
   var $3122=HEAP32[(($3121)>>2)];
   var $3123=_list3_gen($3118, $3122, -1, 0);
   var $3124=$yyval;
   HEAP32[(($3124)>>2)]=$3123;
   label = 542; break;
  case 376: 
   var $3126=$1;
   var $3127=$yyvsp;
   var $3128=((($3127)-(16))|0);
   var $3129=$3128;
   var $3130=HEAP32[(($3129)>>2)];
   var $3131=$yyvsp;
   var $3132=(($3131)|0);
   var $3133=$3132;
   var $3134=HEAP32[(($3133)>>2)];
   var $3135=_list3_gen($3126, $3130, -1, $3134);
   var $3136=$yyval;
   HEAP32[(($3136)>>2)]=$3135;
   label = 542; break;
  case 377: 
   var $3138=$1;
   var $3139=$1;
   var $3140=$yyvsp;
   var $3141=(($3140)|0);
   var $3142=$3141;
   var $3143=HEAP16[(($3142)>>1)];
   var $3144=_new_arg($3139, $3143);
   var $3145=_list3_gen($3138, 0, $3144, 0);
   var $3146=$yyval;
   HEAP32[(($3146)>>2)]=$3145;
   label = 542; break;
  case 378: 
   var $3148=$1;
   var $3149=$1;
   var $3150=$yyvsp;
   var $3151=((($3150)-(8))|0);
   var $3152=$3151;
   var $3153=HEAP16[(($3152)>>1)];
   var $3154=_new_arg($3149, $3153);
   var $3155=$yyvsp;
   var $3156=(($3155)|0);
   var $3157=$3156;
   var $3158=HEAP32[(($3157)>>2)];
   var $3159=_list3_gen($3148, 0, $3154, $3158);
   var $3160=$yyval;
   HEAP32[(($3160)>>2)]=$3159;
   label = 542; break;
  case 379: 
   var $3162=$1;
   var $3163=_list3_gen($3162, 0, -1, 0);
   var $3164=$yyval;
   HEAP32[(($3164)>>2)]=$3163;
   label = 542; break;
  case 380: 
   var $3166=$1;
   var $3167=$yyvsp;
   var $3168=(($3167)|0);
   var $3169=$3168;
   var $3170=HEAP32[(($3169)>>2)];
   var $3171=_list3_gen($3166, 0, -1, $3170);
   var $3172=$yyval;
   HEAP32[(($3172)>>2)]=$3171;
   label = 542; break;
  case 381: 
   var $3174=$1;
   var $3175=$yyvsp;
   var $3176=((($3175)-(20))|0);
   var $3177=$3176;
   var $3178=HEAP32[(($3177)>>2)];
   var $3179=$yyvsp;
   var $3180=((($3179)-(12))|0);
   var $3181=$3180;
   var $3182=HEAP32[(($3181)>>2)];
   var $3183=$yyvsp;
   var $3184=((($3183)-(4))|0);
   var $3185=$3184;
   var $3186=HEAP16[(($3185)>>1)];
   var $3187=$yyvsp;
   var $3188=(($3187)|0);
   var $3189=$3188;
   var $3190=HEAP16[(($3189)>>1)];
   var $3191=_new_args($3174, $3178, $3182, $3186, 0, $3190);
   var $3192=$yyval;
   HEAP32[(($3192)>>2)]=$3191;
   label = 542; break;
  case 382: 
   var $3194=$1;
   var $3195=$yyvsp;
   var $3196=((($3195)-(28))|0);
   var $3197=$3196;
   var $3198=HEAP32[(($3197)>>2)];
   var $3199=$yyvsp;
   var $3200=((($3199)-(20))|0);
   var $3201=$3200;
   var $3202=HEAP32[(($3201)>>2)];
   var $3203=$yyvsp;
   var $3204=((($3203)-(12))|0);
   var $3205=$3204;
   var $3206=HEAP16[(($3205)>>1)];
   var $3207=$yyvsp;
   var $3208=((($3207)-(4))|0);
   var $3209=$3208;
   var $3210=HEAP32[(($3209)>>2)];
   var $3211=$yyvsp;
   var $3212=(($3211)|0);
   var $3213=$3212;
   var $3214=HEAP16[(($3213)>>1)];
   var $3215=_new_args($3194, $3198, $3202, $3206, $3210, $3214);
   var $3216=$yyval;
   HEAP32[(($3216)>>2)]=$3215;
   label = 542; break;
  case 383: 
   var $3218=$1;
   var $3219=$yyvsp;
   var $3220=((($3219)-(12))|0);
   var $3221=$3220;
   var $3222=HEAP32[(($3221)>>2)];
   var $3223=$yyvsp;
   var $3224=((($3223)-(4))|0);
   var $3225=$3224;
   var $3226=HEAP32[(($3225)>>2)];
   var $3227=$yyvsp;
   var $3228=(($3227)|0);
   var $3229=$3228;
   var $3230=HEAP16[(($3229)>>1)];
   var $3231=_new_args($3218, $3222, $3226, 0, 0, $3230);
   var $3232=$yyval;
   HEAP32[(($3232)>>2)]=$3231;
   label = 542; break;
  case 384: 
   var $3234=$1;
   var $3235=$yyvsp;
   var $3236=((($3235)-(20))|0);
   var $3237=$3236;
   var $3238=HEAP32[(($3237)>>2)];
   var $3239=$yyvsp;
   var $3240=((($3239)-(12))|0);
   var $3241=$3240;
   var $3242=HEAP32[(($3241)>>2)];
   var $3243=$yyvsp;
   var $3244=((($3243)-(4))|0);
   var $3245=$3244;
   var $3246=HEAP32[(($3245)>>2)];
   var $3247=$yyvsp;
   var $3248=(($3247)|0);
   var $3249=$3248;
   var $3250=HEAP16[(($3249)>>1)];
   var $3251=_new_args($3234, $3238, $3242, 0, $3246, $3250);
   var $3252=$yyval;
   HEAP32[(($3252)>>2)]=$3251;
   label = 542; break;
  case 385: 
   var $3254=$1;
   var $3255=$yyvsp;
   var $3256=((($3255)-(12))|0);
   var $3257=$3256;
   var $3258=HEAP32[(($3257)>>2)];
   var $3259=$yyvsp;
   var $3260=((($3259)-(4))|0);
   var $3261=$3260;
   var $3262=HEAP16[(($3261)>>1)];
   var $3263=$yyvsp;
   var $3264=(($3263)|0);
   var $3265=$3264;
   var $3266=HEAP16[(($3265)>>1)];
   var $3267=_new_args($3254, $3258, 0, $3262, 0, $3266);
   var $3268=$yyval;
   HEAP32[(($3268)>>2)]=$3267;
   label = 542; break;
  case 386: 
   var $3270=$1;
   var $3271=$yyvsp;
   var $3272=((($3271)-(4))|0);
   var $3273=$3272;
   var $3274=HEAP32[(($3273)>>2)];
   var $3275=_new_args($3270, $3274, 0, 1, 0, 0);
   var $3276=$yyval;
   HEAP32[(($3276)>>2)]=$3275;
   label = 542; break;
  case 387: 
   var $3278=$1;
   var $3279=$yyvsp;
   var $3280=((($3279)-(20))|0);
   var $3281=$3280;
   var $3282=HEAP32[(($3281)>>2)];
   var $3283=$yyvsp;
   var $3284=((($3283)-(12))|0);
   var $3285=$3284;
   var $3286=HEAP16[(($3285)>>1)];
   var $3287=$yyvsp;
   var $3288=((($3287)-(4))|0);
   var $3289=$3288;
   var $3290=HEAP32[(($3289)>>2)];
   var $3291=$yyvsp;
   var $3292=(($3291)|0);
   var $3293=$3292;
   var $3294=HEAP16[(($3293)>>1)];
   var $3295=_new_args($3278, $3282, 0, $3286, $3290, $3294);
   var $3296=$yyval;
   HEAP32[(($3296)>>2)]=$3295;
   label = 542; break;
  case 388: 
   var $3298=$1;
   var $3299=$yyvsp;
   var $3300=((($3299)-(4))|0);
   var $3301=$3300;
   var $3302=HEAP32[(($3301)>>2)];
   var $3303=$yyvsp;
   var $3304=(($3303)|0);
   var $3305=$3304;
   var $3306=HEAP16[(($3305)>>1)];
   var $3307=_new_args($3298, $3302, 0, 0, 0, $3306);
   var $3308=$yyval;
   HEAP32[(($3308)>>2)]=$3307;
   label = 542; break;
  case 389: 
   var $3310=$1;
   var $3311=$yyvsp;
   var $3312=((($3311)-(12))|0);
   var $3313=$3312;
   var $3314=HEAP32[(($3313)>>2)];
   var $3315=$yyvsp;
   var $3316=((($3315)-(4))|0);
   var $3317=$3316;
   var $3318=HEAP16[(($3317)>>1)];
   var $3319=$yyvsp;
   var $3320=(($3319)|0);
   var $3321=$3320;
   var $3322=HEAP16[(($3321)>>1)];
   var $3323=_new_args($3310, 0, $3314, $3318, 0, $3322);
   var $3324=$yyval;
   HEAP32[(($3324)>>2)]=$3323;
   label = 542; break;
  case 390: 
   var $3326=$1;
   var $3327=$yyvsp;
   var $3328=((($3327)-(20))|0);
   var $3329=$3328;
   var $3330=HEAP32[(($3329)>>2)];
   var $3331=$yyvsp;
   var $3332=((($3331)-(12))|0);
   var $3333=$3332;
   var $3334=HEAP16[(($3333)>>1)];
   var $3335=$yyvsp;
   var $3336=((($3335)-(4))|0);
   var $3337=$3336;
   var $3338=HEAP32[(($3337)>>2)];
   var $3339=$yyvsp;
   var $3340=(($3339)|0);
   var $3341=$3340;
   var $3342=HEAP16[(($3341)>>1)];
   var $3343=_new_args($3326, 0, $3330, $3334, $3338, $3342);
   var $3344=$yyval;
   HEAP32[(($3344)>>2)]=$3343;
   label = 542; break;
  case 391: 
   var $3346=$1;
   var $3347=$yyvsp;
   var $3348=((($3347)-(4))|0);
   var $3349=$3348;
   var $3350=HEAP32[(($3349)>>2)];
   var $3351=$yyvsp;
   var $3352=(($3351)|0);
   var $3353=$3352;
   var $3354=HEAP16[(($3353)>>1)];
   var $3355=_new_args($3346, 0, $3350, 0, 0, $3354);
   var $3356=$yyval;
   HEAP32[(($3356)>>2)]=$3355;
   label = 542; break;
  case 392: 
   var $3358=$1;
   var $3359=$yyvsp;
   var $3360=((($3359)-(12))|0);
   var $3361=$3360;
   var $3362=HEAP32[(($3361)>>2)];
   var $3363=$yyvsp;
   var $3364=((($3363)-(4))|0);
   var $3365=$3364;
   var $3366=HEAP32[(($3365)>>2)];
   var $3367=$yyvsp;
   var $3368=(($3367)|0);
   var $3369=$3368;
   var $3370=HEAP16[(($3369)>>1)];
   var $3371=_new_args($3358, 0, $3362, 0, $3366, $3370);
   var $3372=$yyval;
   HEAP32[(($3372)>>2)]=$3371;
   label = 542; break;
  case 393: 
   var $3374=$1;
   var $3375=$yyvsp;
   var $3376=((($3375)-(4))|0);
   var $3377=$3376;
   var $3378=HEAP16[(($3377)>>1)];
   var $3379=$yyvsp;
   var $3380=(($3379)|0);
   var $3381=$3380;
   var $3382=HEAP16[(($3381)>>1)];
   var $3383=_new_args($3374, 0, 0, $3378, 0, $3382);
   var $3384=$yyval;
   HEAP32[(($3384)>>2)]=$3383;
   label = 542; break;
  case 394: 
   var $3386=$1;
   var $3387=$yyvsp;
   var $3388=((($3387)-(12))|0);
   var $3389=$3388;
   var $3390=HEAP16[(($3389)>>1)];
   var $3391=$yyvsp;
   var $3392=((($3391)-(4))|0);
   var $3393=$3392;
   var $3394=HEAP32[(($3393)>>2)];
   var $3395=$yyvsp;
   var $3396=(($3395)|0);
   var $3397=$3396;
   var $3398=HEAP16[(($3397)>>1)];
   var $3399=_new_args($3386, 0, 0, $3390, $3394, $3398);
   var $3400=$yyval;
   HEAP32[(($3400)>>2)]=$3399;
   label = 542; break;
  case 395: 
   var $3402=$1;
   var $3403=$yyvsp;
   var $3404=(($3403)|0);
   var $3405=$3404;
   var $3406=HEAP16[(($3405)>>1)];
   var $3407=_new_args($3402, 0, 0, 0, 0, $3406);
   var $3408=$yyval;
   HEAP32[(($3408)>>2)]=$3407;
   label = 542; break;
  case 396: 
   var $3410=$1;
   var $3411=(($3410+72)|0);
   HEAP32[(($3411)>>2)]=1;
   var $3412=$yyvsp;
   var $3413=(($3412)|0);
   var $3414=$3413;
   var $3415=HEAP32[(($3414)>>2)];
   var $3416=$yyval;
   HEAP32[(($3416)>>2)]=$3415;
   label = 542; break;
  case 397: 
   var $3418=$1;
   _local_add_f($3418, 0);
   var $3419=$yyval;
   HEAP32[(($3419)>>2)]=0;
   label = 542; break;
  case 398: 
   var $3421=$1;
   _local_add_f($3421, 0);
   var $3422=$yyval;
   HEAP32[(($3422)>>2)]=0;
   label = 542; break;
  case 399: 
   var $3424=$yyvsp;
   var $3425=((($3424)-(8))|0);
   var $3426=$3425;
   var $3427=HEAP32[(($3426)>>2)];
   var $3428=$yyval;
   HEAP32[(($3428)>>2)]=$3427;
   label = 542; break;
  case 400: 
   var $3430=$yyval;
   HEAP32[(($3430)>>2)]=0;
   label = 542; break;
  case 401: 
   var $3432=$yyval;
   HEAP32[(($3432)>>2)]=0;
   label = 542; break;
  case 402: 
   var $3434=$1;
   var $3435=$yyvsp;
   var $3436=(($3435)|0);
   var $3437=$3436;
   var $3438=HEAP16[(($3437)>>1)];
   _local_add_f($3434, $3438);
   var $3439=$1;
   var $3440=$yyvsp;
   var $3441=(($3440)|0);
   var $3442=$3441;
   var $3443=HEAP16[(($3442)>>1)];
   _new_bv($3439, $3443);
   label = 542; break;
  case 403: 
   var $3445=$yyvsp;
   var $3446=((($3445)-(8))|0);
   var $3447=$3446;
   var $3448=HEAP32[(($3447)>>2)];
   var $3449=$yyval;
   HEAP32[(($3449)>>2)]=$3448;
   label = 542; break;
  case 404: 
   var $3451=$yyvsp;
   var $3452=(($3451)|0);
   var $3453=$3452;
   var $3454=HEAP32[(($3453)>>2)];
   var $3455=$yyval;
   HEAP32[(($3455)>>2)]=$3454;
   label = 542; break;
  case 405: 
   var $3457=$yyvsp;
   var $3458=((($3457)-(4))|0);
   var $3459=$3458;
   var $3460=HEAP32[(($3459)>>2)];
   var $3461=$yyval;
   HEAP32[(($3461)>>2)]=$3460;
   label = 542; break;
  case 406: 
   var $3463=$yyvsp;
   var $3464=((($3463)-(4))|0);
   var $3465=$3464;
   var $3466=HEAP32[(($3465)>>2)];
   var $3467=$yyval;
   HEAP32[(($3467)>>2)]=$3466;
   label = 542; break;
  case 407: 
   var $3469=$1;
   _local_nest($3469);
   label = 542; break;
  case 408: 
   var $3471=$1;
   var $3472=$yyvsp;
   var $3473=((($3472)-(8))|0);
   var $3474=$3473;
   var $3475=HEAP32[(($3474)>>2)];
   var $3476=$yyvsp;
   var $3477=((($3476)-(4))|0);
   var $3478=$3477;
   var $3479=HEAP32[(($3478)>>2)];
   var $3480=_new_block($3471, $3475, $3479);
   var $3481=$yyval;
   HEAP32[(($3481)>>2)]=$3480;
   var $3482=$1;
   _local_unnest($3482);
   label = 542; break;
  case 409: 
   var $3484=$yyvsp;
   var $3485=((($3484)-(4))|0);
   var $3486=$3485;
   var $3487=HEAP32[(($3486)>>2)];
   var $3488=(($3487)|0);
   var $3489=HEAP32[(($3488)>>2)];
   var $3490=(($3489)|(0))==38;
   if ($3490) { label = 410; break; } else { label = 411; break; }
  case 410: 
   var $3492=$1;
   _yyerror($3492, ((93256)|0));
   label = 412; break;
  case 411: 
   var $3494=$1;
   var $3495=$yyvsp;
   var $3496=((($3495)-(4))|0);
   var $3497=$3496;
   var $3498=HEAP32[(($3497)>>2)];
   var $3499=$yyvsp;
   var $3500=(($3499)|0);
   var $3501=$3500;
   var $3502=HEAP32[(($3501)>>2)];
   _call_with_block($3494, $3498, $3502);
   label = 412; break;
  case 412: 
   var $3504=$yyvsp;
   var $3505=((($3504)-(4))|0);
   var $3506=$3505;
   var $3507=HEAP32[(($3506)>>2)];
   var $3508=$yyval;
   HEAP32[(($3508)>>2)]=$3507;
   label = 542; break;
  case 413: 
   var $3510=$1;
   var $3511=$yyvsp;
   var $3512=((($3511)-(12))|0);
   var $3513=$3512;
   var $3514=HEAP32[(($3513)>>2)];
   var $3515=$yyvsp;
   var $3516=((($3515)-(4))|0);
   var $3517=$3516;
   var $3518=HEAP16[(($3517)>>1)];
   var $3519=$yyvsp;
   var $3520=(($3519)|0);
   var $3521=$3520;
   var $3522=HEAP32[(($3521)>>2)];
   var $3523=_new_call($3510, $3514, $3518, $3522);
   var $3524=$yyval;
   HEAP32[(($3524)>>2)]=$3523;
   label = 542; break;
  case 414: 
   var $3526=$1;
   var $3527=$yyvsp;
   var $3528=((($3527)-(16))|0);
   var $3529=$3528;
   var $3530=HEAP32[(($3529)>>2)];
   var $3531=$yyvsp;
   var $3532=((($3531)-(8))|0);
   var $3533=$3532;
   var $3534=HEAP16[(($3533)>>1)];
   var $3535=$yyvsp;
   var $3536=((($3535)-(4))|0);
   var $3537=$3536;
   var $3538=HEAP32[(($3537)>>2)];
   var $3539=_new_call($3526, $3530, $3534, $3538);
   var $3540=$yyval;
   HEAP32[(($3540)>>2)]=$3539;
   var $3541=$1;
   var $3542=$yyval;
   var $3543=HEAP32[(($3542)>>2)];
   var $3544=$yyvsp;
   var $3545=(($3544)|0);
   var $3546=$3545;
   var $3547=HEAP32[(($3546)>>2)];
   _call_with_block($3541, $3543, $3547);
   label = 542; break;
  case 415: 
   var $3549=$1;
   var $3550=$yyvsp;
   var $3551=((($3550)-(16))|0);
   var $3552=$3551;
   var $3553=HEAP32[(($3552)>>2)];
   var $3554=$yyvsp;
   var $3555=((($3554)-(8))|0);
   var $3556=$3555;
   var $3557=HEAP16[(($3556)>>1)];
   var $3558=$yyvsp;
   var $3559=((($3558)-(4))|0);
   var $3560=$3559;
   var $3561=HEAP32[(($3560)>>2)];
   var $3562=_new_call($3549, $3553, $3557, $3561);
   var $3563=$yyval;
   HEAP32[(($3563)>>2)]=$3562;
   var $3564=$1;
   var $3565=$yyval;
   var $3566=HEAP32[(($3565)>>2)];
   var $3567=$yyvsp;
   var $3568=(($3567)|0);
   var $3569=$3568;
   var $3570=HEAP32[(($3569)>>2)];
   _call_with_block($3564, $3566, $3570);
   label = 542; break;
  case 416: 
   var $3572=$1;
   var $3573=$yyvsp;
   var $3574=((($3573)-(4))|0);
   var $3575=$3574;
   var $3576=HEAP16[(($3575)>>1)];
   var $3577=$yyvsp;
   var $3578=(($3577)|0);
   var $3579=$3578;
   var $3580=HEAP32[(($3579)>>2)];
   var $3581=_new_fcall($3572, $3576, $3580);
   var $3582=$yyval;
   HEAP32[(($3582)>>2)]=$3581;
   label = 542; break;
  case 417: 
   var $3584=$1;
   var $3585=$yyvsp;
   var $3586=((($3585)-(12))|0);
   var $3587=$3586;
   var $3588=HEAP32[(($3587)>>2)];
   var $3589=$yyvsp;
   var $3590=((($3589)-(4))|0);
   var $3591=$3590;
   var $3592=HEAP16[(($3591)>>1)];
   var $3593=$yyvsp;
   var $3594=(($3593)|0);
   var $3595=$3594;
   var $3596=HEAP32[(($3595)>>2)];
   var $3597=_new_call($3584, $3588, $3592, $3596);
   var $3598=$yyval;
   HEAP32[(($3598)>>2)]=$3597;
   label = 542; break;
  case 418: 
   var $3600=$1;
   var $3601=$yyvsp;
   var $3602=((($3601)-(12))|0);
   var $3603=$3602;
   var $3604=HEAP32[(($3603)>>2)];
   var $3605=$yyvsp;
   var $3606=((($3605)-(4))|0);
   var $3607=$3606;
   var $3608=HEAP16[(($3607)>>1)];
   var $3609=$yyvsp;
   var $3610=(($3609)|0);
   var $3611=$3610;
   var $3612=HEAP32[(($3611)>>2)];
   var $3613=_new_call($3600, $3604, $3608, $3612);
   var $3614=$yyval;
   HEAP32[(($3614)>>2)]=$3613;
   label = 542; break;
  case 419: 
   var $3616=$1;
   var $3617=$yyvsp;
   var $3618=((($3617)-(8))|0);
   var $3619=$3618;
   var $3620=HEAP32[(($3619)>>2)];
   var $3621=$yyvsp;
   var $3622=(($3621)|0);
   var $3623=$3622;
   var $3624=HEAP16[(($3623)>>1)];
   var $3625=_new_call($3616, $3620, $3624, 0);
   var $3626=$yyval;
   HEAP32[(($3626)>>2)]=$3625;
   label = 542; break;
  case 420: 
   var $3628=$1;
   var $3629=$yyvsp;
   var $3630=((($3629)-(8))|0);
   var $3631=$3630;
   var $3632=HEAP32[(($3631)>>2)];
   var $3633=$1;
   var $3634=_intern_gen2($3633, ((93036)|0), 4);
   var $3635=$yyvsp;
   var $3636=(($3635)|0);
   var $3637=$3636;
   var $3638=HEAP32[(($3637)>>2)];
   var $3639=_new_call($3628, $3632, $3634, $3638);
   var $3640=$yyval;
   HEAP32[(($3640)>>2)]=$3639;
   label = 542; break;
  case 421: 
   var $3642=$1;
   var $3643=$yyvsp;
   var $3644=((($3643)-(8))|0);
   var $3645=$3644;
   var $3646=HEAP32[(($3645)>>2)];
   var $3647=$1;
   var $3648=_intern_gen2($3647, ((93036)|0), 4);
   var $3649=$yyvsp;
   var $3650=(($3649)|0);
   var $3651=$3650;
   var $3652=HEAP32[(($3651)>>2)];
   var $3653=_new_call($3642, $3646, $3648, $3652);
   var $3654=$yyval;
   HEAP32[(($3654)>>2)]=$3653;
   label = 542; break;
  case 422: 
   var $3656=$1;
   var $3657=$yyvsp;
   var $3658=(($3657)|0);
   var $3659=$3658;
   var $3660=HEAP32[(($3659)>>2)];
   var $3661=_new_super($3656, $3660);
   var $3662=$yyval;
   HEAP32[(($3662)>>2)]=$3661;
   label = 542; break;
  case 423: 
   var $3664=$1;
   var $3665=_new_zsuper($3664);
   var $3666=$yyval;
   HEAP32[(($3666)>>2)]=$3665;
   label = 542; break;
  case 424: 
   var $3668=$1;
   var $3669=$yyvsp;
   var $3670=((($3669)-(12))|0);
   var $3671=$3670;
   var $3672=HEAP32[(($3671)>>2)];
   var $3673=$1;
   var $3674=_intern_gen2($3673, ((104500)|0), 2);
   var $3675=$yyvsp;
   var $3676=((($3675)-(4))|0);
   var $3677=$3676;
   var $3678=HEAP32[(($3677)>>2)];
   var $3679=_new_call($3668, $3672, $3674, $3678);
   var $3680=$yyval;
   HEAP32[(($3680)>>2)]=$3679;
   label = 542; break;
  case 425: 
   var $3682=$1;
   _local_nest($3682);
   label = 542; break;
  case 426: 
   var $3684=$1;
   var $3685=$yyvsp;
   var $3686=((($3685)-(8))|0);
   var $3687=$3686;
   var $3688=HEAP32[(($3687)>>2)];
   var $3689=$yyvsp;
   var $3690=((($3689)-(4))|0);
   var $3691=$3690;
   var $3692=HEAP32[(($3691)>>2)];
   var $3693=_new_block($3684, $3688, $3692);
   var $3694=$yyval;
   HEAP32[(($3694)>>2)]=$3693;
   var $3695=$1;
   _local_unnest($3695);
   label = 542; break;
  case 427: 
   var $3697=$1;
   _local_nest($3697);
   label = 542; break;
  case 428: 
   var $3699=$1;
   var $3700=$yyvsp;
   var $3701=((($3700)-(8))|0);
   var $3702=$3701;
   var $3703=HEAP32[(($3702)>>2)];
   var $3704=$yyvsp;
   var $3705=((($3704)-(4))|0);
   var $3706=$3705;
   var $3707=HEAP32[(($3706)>>2)];
   var $3708=_new_block($3699, $3703, $3707);
   var $3709=$yyval;
   HEAP32[(($3709)>>2)]=$3708;
   var $3710=$1;
   _local_unnest($3710);
   label = 542; break;
  case 429: 
   var $3712=$1;
   var $3713=$1;
   var $3714=$yyvsp;
   var $3715=((($3714)-(12))|0);
   var $3716=$3715;
   var $3717=HEAP32[(($3716)>>2)];
   var $3718=$yyvsp;
   var $3719=((($3718)-(4))|0);
   var $3720=$3719;
   var $3721=HEAP32[(($3720)>>2)];
   var $3722=_cons_gen($3713, $3717, $3721);
   var $3723=$yyvsp;
   var $3724=(($3723)|0);
   var $3725=$3724;
   var $3726=HEAP32[(($3725)>>2)];
   var $3727=_cons_gen($3712, $3722, $3726);
   var $3728=$yyval;
   HEAP32[(($3728)>>2)]=$3727;
   label = 542; break;
  case 430: 
   var $3730=$yyvsp;
   var $3731=(($3730)|0);
   var $3732=$3731;
   var $3733=HEAP32[(($3732)>>2)];
   var $3734=(($3733)|(0))!=0;
   if ($3734) { label = 431; break; } else { label = 432; break; }
  case 431: 
   var $3736=$1;
   var $3737=$1;
   var $3738=$yyvsp;
   var $3739=(($3738)|0);
   var $3740=$3739;
   var $3741=HEAP32[(($3740)>>2)];
   var $3742=_cons_gen($3737, 0, $3741);
   var $3743=_cons_gen($3736, $3742, 0);
   var $3744=$yyval;
   HEAP32[(($3744)>>2)]=$3743;
   label = 433; break;
  case 432: 
   var $3746=$yyval;
   HEAP32[(($3746)>>2)]=0;
   label = 433; break;
  case 433: 
   label = 542; break;
  case 434: 
   var $3749=$1;
   var $3750=$1;
   var $3751=$yyvsp;
   var $3752=((($3751)-(16))|0);
   var $3753=$3752;
   var $3754=HEAP32[(($3753)>>2)];
   var $3755=$yyvsp;
   var $3756=((($3755)-(12))|0);
   var $3757=$3756;
   var $3758=HEAP32[(($3757)>>2)];
   var $3759=$yyvsp;
   var $3760=((($3759)-(4))|0);
   var $3761=$3760;
   var $3762=HEAP32[(($3761)>>2)];
   var $3763=_list3_gen($3750, $3754, $3758, $3762);
   var $3764=_list1_gen($3749, $3763);
   var $3765=$yyval;
   HEAP32[(($3765)>>2)]=$3764;
   var $3766=$yyvsp;
   var $3767=(($3766)|0);
   var $3768=$3767;
   var $3769=HEAP32[(($3768)>>2)];
   var $3770=(($3769)|(0))!=0;
   if ($3770) { label = 435; break; } else { label = 436; break; }
  case 435: 
   var $3772=$1;
   var $3773=$yyval;
   var $3774=HEAP32[(($3773)>>2)];
   var $3775=$yyvsp;
   var $3776=(($3775)|0);
   var $3777=$3776;
   var $3778=HEAP32[(($3777)>>2)];
   var $3779=_append_gen($3772, $3774, $3778);
   var $3780=$yyval;
   HEAP32[(($3780)>>2)]=$3779;
   label = 436; break;
  case 436: 
   label = 542; break;
  case 437: 
   var $3783=$1;
   var $3784=$yyvsp;
   var $3785=(($3784)|0);
   var $3786=$3785;
   var $3787=HEAP32[(($3786)>>2)];
   var $3788=_list1_gen($3783, $3787);
   var $3789=$yyval;
   HEAP32[(($3789)>>2)]=$3788;
   label = 542; break;
  case 438: 
   var $3791=$yyvsp;
   var $3792=(($3791)|0);
   var $3793=$3792;
   var $3794=HEAP32[(($3793)>>2)];
   var $3795=$yyval;
   HEAP32[(($3795)>>2)]=$3794;
   label = 542; break;
  case 439: 
   var $3797=$yyvsp;
   var $3798=(($3797)|0);
   var $3799=$3798;
   var $3800=HEAP32[(($3799)>>2)];
   var $3801=$yyval;
   HEAP32[(($3801)>>2)]=$3800;
   label = 542; break;
  case 440: 
   var $3803=$yyvsp;
   var $3804=(($3803)|0);
   var $3805=$3804;
   var $3806=HEAP32[(($3805)>>2)];
   var $3807=$yyval;
   HEAP32[(($3807)>>2)]=$3806;
   label = 542; break;
  case 441: 
   var $3809=$1;
   var $3810=$1;
   var $3811=$yyvsp;
   var $3812=((($3811)-(4))|0);
   var $3813=$3812;
   var $3814=HEAP32[(($3813)>>2)];
   var $3815=$1;
   var $3816=$yyvsp;
   var $3817=(($3816)|0);
   var $3818=$3817;
   var $3819=HEAP32[(($3818)>>2)];
   var $3820=_list1_gen($3815, $3819);
   var $3821=_append_gen($3810, $3814, $3820);
   var $3822=_new_dstr($3809, $3821);
   var $3823=$yyval;
   HEAP32[(($3823)>>2)]=$3822;
   label = 542; break;
  case 442: 
   var $3825=$1;
   var $3826=$yyvsp;
   var $3827=((($3826)-(4))|0);
   var $3828=$3827;
   var $3829=HEAP32[(($3828)>>2)];
   var $3830=$yyvsp;
   var $3831=(($3830)|0);
   var $3832=$3831;
   var $3833=HEAP32[(($3832)>>2)];
   var $3834=_append_gen($3825, $3829, $3833);
   var $3835=$yyval;
   HEAP32[(($3835)>>2)]=$3834;
   label = 542; break;
  case 443: 
   var $3837=$1;
   var $3838=$yyvsp;
   var $3839=(($3838)|0);
   var $3840=$3839;
   var $3841=HEAP32[(($3840)>>2)];
   var $3842=_list1_gen($3837, $3841);
   var $3843=$yyval;
   HEAP32[(($3843)>>2)]=$3842;
   label = 542; break;
  case 444: 
   var $3845=$1;
   var $3846=(($3845+44)|0);
   var $3847=HEAP32[(($3846)>>2)];
   var $3848=$yyval;
   HEAP32[(($3848)>>2)]=$3847;
   var $3849=$1;
   var $3850=(($3849+44)|0);
   HEAP32[(($3850)>>2)]=0;
   label = 542; break;
  case 445: 
   var $3852=$yyvsp;
   var $3853=((($3852)-(8))|0);
   var $3854=$3853;
   var $3855=HEAP32[(($3854)>>2)];
   var $3856=$1;
   var $3857=(($3856+44)|0);
   HEAP32[(($3857)>>2)]=$3855;
   var $3858=$1;
   var $3859=$yyvsp;
   var $3860=((($3859)-(12))|0);
   var $3861=$3860;
   var $3862=HEAP32[(($3861)>>2)];
   var $3863=$yyvsp;
   var $3864=((($3863)-(4))|0);
   var $3865=$3864;
   var $3866=HEAP32[(($3865)>>2)];
   var $3867=_list2_gen($3858, $3862, $3866);
   var $3868=$yyval;
   HEAP32[(($3868)>>2)]=$3867;
   label = 542; break;
  case 446: 
   var $3870=$1;
   var $3871=$1;
   var $3872=_new_literal_delim($3871);
   var $3873=_list1_gen($3870, $3872);
   var $3874=$yyval;
   HEAP32[(($3874)>>2)]=$3873;
   label = 542; break;
  case 447: 
   var $3876=$yyvsp;
   var $3877=(($3876)|0);
   var $3878=$3877;
   var $3879=HEAP32[(($3878)>>2)];
   var $3880=$yyval;
   HEAP32[(($3880)>>2)]=$3879;
   label = 542; break;
  case 448: 
   var $3882=$1;
   var $3883=$1;
   var $3884=$yyvsp;
   var $3885=((($3884)-(4))|0);
   var $3886=$3885;
   var $3887=HEAP32[(($3886)>>2)];
   var $3888=$1;
   var $3889=$yyvsp;
   var $3890=(($3889)|0);
   var $3891=$3890;
   var $3892=HEAP32[(($3891)>>2)];
   var $3893=_list1_gen($3888, $3892);
   var $3894=_append_gen($3883, $3887, $3893);
   var $3895=_new_dxstr($3882, $3894);
   var $3896=$yyval;
   HEAP32[(($3896)>>2)]=$3895;
   label = 542; break;
  case 449: 
   var $3898=$yyvsp;
   var $3899=(($3898)|0);
   var $3900=$3899;
   var $3901=HEAP32[(($3900)>>2)];
   var $3902=$yyval;
   HEAP32[(($3902)>>2)]=$3901;
   label = 542; break;
  case 450: 
   var $3904=$1;
   var $3905=$yyvsp;
   var $3906=((($3905)-(4))|0);
   var $3907=$3906;
   var $3908=HEAP32[(($3907)>>2)];
   var $3909=$yyvsp;
   var $3910=(($3909)|0);
   var $3911=$3910;
   var $3912=HEAP32[(($3911)>>2)];
   var $3913=_new_dregx($3904, $3908, $3912);
   var $3914=$yyval;
   HEAP32[(($3914)>>2)]=$3913;
   label = 542; break;
  case 451: 
   var $3916=$1;
   var $3917=$1;
   var $3918=_new_str($3917, ((111144)|0), 0);
   var $3919=_list1_gen($3916, $3918);
   var $3920=$1;
   var $3921=_parsing_heredoc_inf($3920);
   var $3922=(($3921+16)|0);
   HEAP32[(($3922)>>2)]=$3919;
   var $3923=$1;
   _heredoc_end($3923);
   label = 542; break;
  case 452: 
   var $3925=$yyvsp;
   var $3926=((($3925)-(4))|0);
   var $3927=$3926;
   var $3928=HEAP32[(($3927)>>2)];
   var $3929=$1;
   var $3930=_parsing_heredoc_inf($3929);
   var $3931=(($3930+16)|0);
   HEAP32[(($3931)>>2)]=$3928;
   var $3932=$1;
   _heredoc_end($3932);
   label = 542; break;
  case 453: 
   var $3934=$1;
   var $3935=$1;
   var $3936=$yyvsp;
   var $3937=(($3936)|0);
   var $3938=$3937;
   var $3939=HEAP32[(($3938)>>2)];
   var $3940=_list1_gen($3935, $3939);
   var $3941=_new_words($3934, $3940);
   var $3942=$yyval;
   HEAP32[(($3942)>>2)]=$3941;
   label = 542; break;
  case 454: 
   var $3944=$1;
   var $3945=$1;
   var $3946=$yyvsp;
   var $3947=((($3946)-(4))|0);
   var $3948=$3947;
   var $3949=HEAP32[(($3948)>>2)];
   var $3950=$1;
   var $3951=$yyvsp;
   var $3952=(($3951)|0);
   var $3953=$3952;
   var $3954=HEAP32[(($3953)>>2)];
   var $3955=_list1_gen($3950, $3954);
   var $3956=_append_gen($3945, $3949, $3955);
   var $3957=_new_words($3944, $3956);
   var $3958=$yyval;
   HEAP32[(($3958)>>2)]=$3957;
   label = 542; break;
  case 455: 
   var $3960=$1;
   var $3961=$yyvsp;
   var $3962=(($3961)|0);
   var $3963=$3962;
   var $3964=HEAP16[(($3963)>>1)];
   var $3965=_new_sym($3960, $3964);
   var $3966=$yyval;
   HEAP32[(($3966)>>2)]=$3965;
   label = 542; break;
  case 456: 
   var $3968=$1;
   var $3969=(($3968+40)|0);
   HEAP32[(($3969)>>2)]=1;
   var $3970=$1;
   var $3971=$1;
   var $3972=$yyvsp;
   var $3973=((($3972)-(4))|0);
   var $3974=$3973;
   var $3975=HEAP32[(($3974)>>2)];
   var $3976=$1;
   var $3977=$yyvsp;
   var $3978=(($3977)|0);
   var $3979=$3978;
   var $3980=HEAP32[(($3979)>>2)];
   var $3981=_list1_gen($3976, $3980);
   var $3982=_append_gen($3971, $3975, $3981);
   var $3983=_new_dsym($3970, $3982);
   var $3984=$yyval;
   HEAP32[(($3984)>>2)]=$3983;
   label = 542; break;
  case 457: 
   var $3986=$1;
   var $3987=(($3986+40)|0);
   HEAP32[(($3987)>>2)]=1;
   var $3988=$yyvsp;
   var $3989=(($3988)|0);
   var $3990=$3989;
   var $3991=HEAP16[(($3990)>>1)];
   var $3992=$yyval;
   HEAP16[(($3992)>>1)]=$3991;
   label = 542; break;
  case 458: 
   var $3994=$1;
   var $3995=$yyvsp;
   var $3996=(($3995)|0);
   var $3997=$3996;
   var $3998=HEAP32[(($3997)>>2)];
   var $3999=_new_strsym($3994, $3998);
   var $4000=$yyval;
   HEAP16[(($4000)>>1)]=$3999;
   label = 542; break;
  case 459: 
   var $4002=$1;
   var $4003=$yyvsp;
   var $4004=(($4003)|0);
   var $4005=$4004;
   var $4006=HEAP32[(($4005)>>2)];
   var $4007=_new_strsym($4002, $4006);
   var $4008=$yyval;
   HEAP16[(($4008)>>1)]=$4007;
   label = 542; break;
  case 460: 
   var $4010=$1;
   var $4011=$1;
   var $4012=$yyvsp;
   var $4013=(($4012)|0);
   var $4014=$4013;
   var $4015=HEAP32[(($4014)>>2)];
   var $4016=_list1_gen($4011, $4015);
   var $4017=_new_symbols($4010, $4016);
   var $4018=$yyval;
   HEAP32[(($4018)>>2)]=$4017;
   label = 542; break;
  case 461: 
   var $4020=$1;
   var $4021=$1;
   var $4022=$yyvsp;
   var $4023=((($4022)-(4))|0);
   var $4024=$4023;
   var $4025=HEAP32[(($4024)>>2)];
   var $4026=$1;
   var $4027=$yyvsp;
   var $4028=(($4027)|0);
   var $4029=$4028;
   var $4030=HEAP32[(($4029)>>2)];
   var $4031=_list1_gen($4026, $4030);
   var $4032=_append_gen($4021, $4025, $4031);
   var $4033=_new_symbols($4020, $4032);
   var $4034=$yyval;
   HEAP32[(($4034)>>2)]=$4033;
   label = 542; break;
  case 462: 
   var $4036=$1;
   var $4037=$yyvsp;
   var $4038=(($4037)|0);
   var $4039=$4038;
   var $4040=HEAP32[(($4039)>>2)];
   var $4041=_negate_lit($4036, $4040);
   var $4042=$yyval;
   HEAP32[(($4042)>>2)]=$4041;
   label = 542; break;
  case 463: 
   var $4044=$1;
   var $4045=$yyvsp;
   var $4046=(($4045)|0);
   var $4047=$4046;
   var $4048=HEAP32[(($4047)>>2)];
   var $4049=_negate_lit($4044, $4048);
   var $4050=$yyval;
   HEAP32[(($4050)>>2)]=$4049;
   label = 542; break;
  case 464: 
   var $4052=$1;
   var $4053=$yyvsp;
   var $4054=(($4053)|0);
   var $4055=$4054;
   var $4056=HEAP16[(($4055)>>1)];
   var $4057=_new_lvar($4052, $4056);
   var $4058=$yyval;
   HEAP32[(($4058)>>2)]=$4057;
   label = 542; break;
  case 465: 
   var $4060=$1;
   var $4061=$yyvsp;
   var $4062=(($4061)|0);
   var $4063=$4062;
   var $4064=HEAP16[(($4063)>>1)];
   var $4065=_new_ivar($4060, $4064);
   var $4066=$yyval;
   HEAP32[(($4066)>>2)]=$4065;
   label = 542; break;
  case 466: 
   var $4068=$1;
   var $4069=$yyvsp;
   var $4070=(($4069)|0);
   var $4071=$4070;
   var $4072=HEAP16[(($4071)>>1)];
   var $4073=_new_gvar($4068, $4072);
   var $4074=$yyval;
   HEAP32[(($4074)>>2)]=$4073;
   label = 542; break;
  case 467: 
   var $4076=$1;
   var $4077=$yyvsp;
   var $4078=(($4077)|0);
   var $4079=$4078;
   var $4080=HEAP16[(($4079)>>1)];
   var $4081=_new_cvar($4076, $4080);
   var $4082=$yyval;
   HEAP32[(($4082)>>2)]=$4081;
   label = 542; break;
  case 468: 
   var $4084=$1;
   var $4085=$yyvsp;
   var $4086=(($4085)|0);
   var $4087=$4086;
   var $4088=HEAP16[(($4087)>>1)];
   var $4089=_new_const($4084, $4088);
   var $4090=$yyval;
   HEAP32[(($4090)>>2)]=$4089;
   label = 542; break;
  case 469: 
   var $4092=$1;
   var $4093=$yyvsp;
   var $4094=(($4093)|0);
   var $4095=$4094;
   var $4096=HEAP32[(($4095)>>2)];
   _assignable($4092, $4096);
   label = 542; break;
  case 470: 
   var $4098=$1;
   var $4099=$yyvsp;
   var $4100=(($4099)|0);
   var $4101=$4100;
   var $4102=HEAP32[(($4101)>>2)];
   var $4103=_var_reference($4098, $4102);
   var $4104=$yyval;
   HEAP32[(($4104)>>2)]=$4103;
   label = 542; break;
  case 471: 
   var $4106=$1;
   var $4107=_new_nil($4106);
   var $4108=$yyval;
   HEAP32[(($4108)>>2)]=$4107;
   label = 542; break;
  case 472: 
   var $4110=$1;
   var $4111=_new_self($4110);
   var $4112=$yyval;
   HEAP32[(($4112)>>2)]=$4111;
   label = 542; break;
  case 473: 
   var $4114=$1;
   var $4115=_new_true($4114);
   var $4116=$yyval;
   HEAP32[(($4116)>>2)]=$4115;
   label = 542; break;
  case 474: 
   var $4118=$1;
   var $4119=_new_false($4118);
   var $4120=$yyval;
   HEAP32[(($4120)>>2)]=$4119;
   label = 542; break;
  case 475: 
   var $4122=$1;
   var $4123=(($4122+28)|0);
   var $4124=HEAP32[(($4123)>>2)];
   var $4125=(($4124)|(0))!=0;
   if ($4125) { label = 477; break; } else { label = 476; break; }
  case 476: 
   var $4127=$1;
   var $4128=(($4127+28)|0);
   HEAP32[(($4128)>>2)]=((92616)|0);
   label = 477; break;
  case 477: 
   var $4130=$1;
   var $4131=$1;
   var $4132=(($4131+28)|0);
   var $4133=HEAP32[(($4132)>>2)];
   var $4134=$1;
   var $4135=(($4134+28)|0);
   var $4136=HEAP32[(($4135)>>2)];
   var $4137=_strlen($4136);
   var $4138=_new_str($4130, $4133, $4137);
   var $4139=$yyval;
   HEAP32[(($4139)>>2)]=$4138;
   label = 542; break;
  case 478: 
   var $4141=(($buf)|0);
   var $4142=$1;
   var $4143=(($4142+32)|0);
   var $4144=HEAP32[(($4143)>>2)];
   var $4145=_snprintf($4141, 16, ((92460)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$4144,tempInt));
   var $4146=$1;
   var $4147=(($buf)|0);
   var $4148=_new_int($4146, $4147, 10);
   var $4149=$yyval;
   HEAP32[(($4149)>>2)]=$4148;
   label = 542; break;
  case 479: 
   var $4151=$yyval;
   HEAP32[(($4151)>>2)]=0;
   label = 542; break;
  case 480: 
   var $4153=$1;
   var $4154=(($4153+40)|0);
   HEAP32[(($4154)>>2)]=0;
   var $4155=$1;
   var $4156=(($4155+72)|0);
   HEAP32[(($4156)>>2)]=1;
   label = 542; break;
  case 481: 
   var $4158=$yyvsp;
   var $4159=((($4158)-(4))|0);
   var $4160=$4159;
   var $4161=HEAP32[(($4160)>>2)];
   var $4162=$yyval;
   HEAP32[(($4162)>>2)]=$4161;
   label = 542; break;
  case 482: 
   $yyerrstatus=0;
   var $4164=$yyval;
   HEAP32[(($4164)>>2)]=0;
   label = 542; break;
  case 483: 
   var $4166=$yyvsp;
   var $4167=((($4166)-(4))|0);
   var $4168=$4167;
   var $4169=HEAP32[(($4168)>>2)];
   var $4170=$yyval;
   HEAP32[(($4170)>>2)]=$4169;
   var $4171=$1;
   var $4172=(($4171+40)|0);
   HEAP32[(($4172)>>2)]=0;
   var $4173=$1;
   var $4174=(($4173+72)|0);
   HEAP32[(($4174)>>2)]=1;
   label = 542; break;
  case 484: 
   var $4176=$yyvsp;
   var $4177=((($4176)-(4))|0);
   var $4178=$4177;
   var $4179=HEAP32[(($4178)>>2)];
   var $4180=$yyval;
   HEAP32[(($4180)>>2)]=$4179;
   label = 542; break;
  case 485: 
   var $4182=$1;
   var $4183=$yyvsp;
   var $4184=((($4183)-(20))|0);
   var $4185=$4184;
   var $4186=HEAP32[(($4185)>>2)];
   var $4187=$yyvsp;
   var $4188=((($4187)-(12))|0);
   var $4189=$4188;
   var $4190=HEAP32[(($4189)>>2)];
   var $4191=$yyvsp;
   var $4192=((($4191)-(4))|0);
   var $4193=$4192;
   var $4194=HEAP16[(($4193)>>1)];
   var $4195=$yyvsp;
   var $4196=(($4195)|0);
   var $4197=$4196;
   var $4198=HEAP16[(($4197)>>1)];
   var $4199=_new_args($4182, $4186, $4190, $4194, 0, $4198);
   var $4200=$yyval;
   HEAP32[(($4200)>>2)]=$4199;
   label = 542; break;
  case 486: 
   var $4202=$1;
   var $4203=$yyvsp;
   var $4204=((($4203)-(28))|0);
   var $4205=$4204;
   var $4206=HEAP32[(($4205)>>2)];
   var $4207=$yyvsp;
   var $4208=((($4207)-(20))|0);
   var $4209=$4208;
   var $4210=HEAP32[(($4209)>>2)];
   var $4211=$yyvsp;
   var $4212=((($4211)-(12))|0);
   var $4213=$4212;
   var $4214=HEAP16[(($4213)>>1)];
   var $4215=$yyvsp;
   var $4216=((($4215)-(4))|0);
   var $4217=$4216;
   var $4218=HEAP32[(($4217)>>2)];
   var $4219=$yyvsp;
   var $4220=(($4219)|0);
   var $4221=$4220;
   var $4222=HEAP16[(($4221)>>1)];
   var $4223=_new_args($4202, $4206, $4210, $4214, $4218, $4222);
   var $4224=$yyval;
   HEAP32[(($4224)>>2)]=$4223;
   label = 542; break;
  case 487: 
   var $4226=$1;
   var $4227=$yyvsp;
   var $4228=((($4227)-(12))|0);
   var $4229=$4228;
   var $4230=HEAP32[(($4229)>>2)];
   var $4231=$yyvsp;
   var $4232=((($4231)-(4))|0);
   var $4233=$4232;
   var $4234=HEAP32[(($4233)>>2)];
   var $4235=$yyvsp;
   var $4236=(($4235)|0);
   var $4237=$4236;
   var $4238=HEAP16[(($4237)>>1)];
   var $4239=_new_args($4226, $4230, $4234, 0, 0, $4238);
   var $4240=$yyval;
   HEAP32[(($4240)>>2)]=$4239;
   label = 542; break;
  case 488: 
   var $4242=$1;
   var $4243=$yyvsp;
   var $4244=((($4243)-(20))|0);
   var $4245=$4244;
   var $4246=HEAP32[(($4245)>>2)];
   var $4247=$yyvsp;
   var $4248=((($4247)-(12))|0);
   var $4249=$4248;
   var $4250=HEAP32[(($4249)>>2)];
   var $4251=$yyvsp;
   var $4252=((($4251)-(4))|0);
   var $4253=$4252;
   var $4254=HEAP32[(($4253)>>2)];
   var $4255=$yyvsp;
   var $4256=(($4255)|0);
   var $4257=$4256;
   var $4258=HEAP16[(($4257)>>1)];
   var $4259=_new_args($4242, $4246, $4250, 0, $4254, $4258);
   var $4260=$yyval;
   HEAP32[(($4260)>>2)]=$4259;
   label = 542; break;
  case 489: 
   var $4262=$1;
   var $4263=$yyvsp;
   var $4264=((($4263)-(12))|0);
   var $4265=$4264;
   var $4266=HEAP32[(($4265)>>2)];
   var $4267=$yyvsp;
   var $4268=((($4267)-(4))|0);
   var $4269=$4268;
   var $4270=HEAP16[(($4269)>>1)];
   var $4271=$yyvsp;
   var $4272=(($4271)|0);
   var $4273=$4272;
   var $4274=HEAP16[(($4273)>>1)];
   var $4275=_new_args($4262, $4266, 0, $4270, 0, $4274);
   var $4276=$yyval;
   HEAP32[(($4276)>>2)]=$4275;
   label = 542; break;
  case 490: 
   var $4278=$1;
   var $4279=$yyvsp;
   var $4280=((($4279)-(20))|0);
   var $4281=$4280;
   var $4282=HEAP32[(($4281)>>2)];
   var $4283=$yyvsp;
   var $4284=((($4283)-(12))|0);
   var $4285=$4284;
   var $4286=HEAP16[(($4285)>>1)];
   var $4287=$yyvsp;
   var $4288=((($4287)-(4))|0);
   var $4289=$4288;
   var $4290=HEAP32[(($4289)>>2)];
   var $4291=$yyvsp;
   var $4292=(($4291)|0);
   var $4293=$4292;
   var $4294=HEAP16[(($4293)>>1)];
   var $4295=_new_args($4278, $4282, 0, $4286, $4290, $4294);
   var $4296=$yyval;
   HEAP32[(($4296)>>2)]=$4295;
   label = 542; break;
  case 491: 
   var $4298=$1;
   var $4299=$yyvsp;
   var $4300=((($4299)-(4))|0);
   var $4301=$4300;
   var $4302=HEAP32[(($4301)>>2)];
   var $4303=$yyvsp;
   var $4304=(($4303)|0);
   var $4305=$4304;
   var $4306=HEAP16[(($4305)>>1)];
   var $4307=_new_args($4298, $4302, 0, 0, 0, $4306);
   var $4308=$yyval;
   HEAP32[(($4308)>>2)]=$4307;
   label = 542; break;
  case 492: 
   var $4310=$1;
   var $4311=$yyvsp;
   var $4312=((($4311)-(12))|0);
   var $4313=$4312;
   var $4314=HEAP32[(($4313)>>2)];
   var $4315=$yyvsp;
   var $4316=((($4315)-(4))|0);
   var $4317=$4316;
   var $4318=HEAP16[(($4317)>>1)];
   var $4319=$yyvsp;
   var $4320=(($4319)|0);
   var $4321=$4320;
   var $4322=HEAP16[(($4321)>>1)];
   var $4323=_new_args($4310, 0, $4314, $4318, 0, $4322);
   var $4324=$yyval;
   HEAP32[(($4324)>>2)]=$4323;
   label = 542; break;
  case 493: 
   var $4326=$1;
   var $4327=$yyvsp;
   var $4328=((($4327)-(20))|0);
   var $4329=$4328;
   var $4330=HEAP32[(($4329)>>2)];
   var $4331=$yyvsp;
   var $4332=((($4331)-(12))|0);
   var $4333=$4332;
   var $4334=HEAP16[(($4333)>>1)];
   var $4335=$yyvsp;
   var $4336=((($4335)-(4))|0);
   var $4337=$4336;
   var $4338=HEAP32[(($4337)>>2)];
   var $4339=$yyvsp;
   var $4340=(($4339)|0);
   var $4341=$4340;
   var $4342=HEAP16[(($4341)>>1)];
   var $4343=_new_args($4326, 0, $4330, $4334, $4338, $4342);
   var $4344=$yyval;
   HEAP32[(($4344)>>2)]=$4343;
   label = 542; break;
  case 494: 
   var $4346=$1;
   var $4347=$yyvsp;
   var $4348=((($4347)-(4))|0);
   var $4349=$4348;
   var $4350=HEAP32[(($4349)>>2)];
   var $4351=$yyvsp;
   var $4352=(($4351)|0);
   var $4353=$4352;
   var $4354=HEAP16[(($4353)>>1)];
   var $4355=_new_args($4346, 0, $4350, 0, 0, $4354);
   var $4356=$yyval;
   HEAP32[(($4356)>>2)]=$4355;
   label = 542; break;
  case 495: 
   var $4358=$1;
   var $4359=$yyvsp;
   var $4360=((($4359)-(12))|0);
   var $4361=$4360;
   var $4362=HEAP32[(($4361)>>2)];
   var $4363=$yyvsp;
   var $4364=((($4363)-(4))|0);
   var $4365=$4364;
   var $4366=HEAP32[(($4365)>>2)];
   var $4367=$yyvsp;
   var $4368=(($4367)|0);
   var $4369=$4368;
   var $4370=HEAP16[(($4369)>>1)];
   var $4371=_new_args($4358, 0, $4362, 0, $4366, $4370);
   var $4372=$yyval;
   HEAP32[(($4372)>>2)]=$4371;
   label = 542; break;
  case 496: 
   var $4374=$1;
   var $4375=$yyvsp;
   var $4376=((($4375)-(4))|0);
   var $4377=$4376;
   var $4378=HEAP16[(($4377)>>1)];
   var $4379=$yyvsp;
   var $4380=(($4379)|0);
   var $4381=$4380;
   var $4382=HEAP16[(($4381)>>1)];
   var $4383=_new_args($4374, 0, 0, $4378, 0, $4382);
   var $4384=$yyval;
   HEAP32[(($4384)>>2)]=$4383;
   label = 542; break;
  case 497: 
   var $4386=$1;
   var $4387=$yyvsp;
   var $4388=((($4387)-(12))|0);
   var $4389=$4388;
   var $4390=HEAP16[(($4389)>>1)];
   var $4391=$yyvsp;
   var $4392=((($4391)-(4))|0);
   var $4393=$4392;
   var $4394=HEAP32[(($4393)>>2)];
   var $4395=$yyvsp;
   var $4396=(($4395)|0);
   var $4397=$4396;
   var $4398=HEAP16[(($4397)>>1)];
   var $4399=_new_args($4386, 0, 0, $4390, $4394, $4398);
   var $4400=$yyval;
   HEAP32[(($4400)>>2)]=$4399;
   label = 542; break;
  case 498: 
   var $4402=$1;
   var $4403=$yyvsp;
   var $4404=(($4403)|0);
   var $4405=$4404;
   var $4406=HEAP16[(($4405)>>1)];
   var $4407=_new_args($4402, 0, 0, 0, 0, $4406);
   var $4408=$yyval;
   HEAP32[(($4408)>>2)]=$4407;
   label = 542; break;
  case 499: 
   var $4410=$1;
   _local_add_f($4410, 0);
   var $4411=$1;
   var $4412=_new_args($4411, 0, 0, 0, 0, 0);
   var $4413=$yyval;
   HEAP32[(($4413)>>2)]=$4412;
   label = 542; break;
  case 500: 
   var $4415=$1;
   _yyerror($4415, ((92216)|0));
   var $4416=$yyval;
   HEAP32[(($4416)>>2)]=0;
   label = 542; break;
  case 501: 
   var $4418=$1;
   _yyerror($4418, ((91964)|0));
   var $4419=$yyval;
   HEAP32[(($4419)>>2)]=0;
   label = 542; break;
  case 502: 
   var $4421=$1;
   _yyerror($4421, ((91712)|0));
   var $4422=$yyval;
   HEAP32[(($4422)>>2)]=0;
   label = 542; break;
  case 503: 
   var $4424=$1;
   _yyerror($4424, ((91268)|0));
   var $4425=$yyval;
   HEAP32[(($4425)>>2)]=0;
   label = 542; break;
  case 504: 
   var $4427=$yyval;
   HEAP16[(($4427)>>1)]=0;
   label = 542; break;
  case 505: 
   var $4429=$1;
   var $4430=$yyvsp;
   var $4431=(($4430)|0);
   var $4432=$4431;
   var $4433=HEAP16[(($4432)>>1)];
   _local_add_f($4429, $4433);
   var $4434=$yyvsp;
   var $4435=(($4434)|0);
   var $4436=$4435;
   var $4437=HEAP16[(($4436)>>1)];
   var $4438=$yyval;
   HEAP16[(($4438)>>1)]=$4437;
   label = 542; break;
  case 506: 
   var $4440=$1;
   var $4441=$yyvsp;
   var $4442=(($4441)|0);
   var $4443=$4442;
   var $4444=HEAP16[(($4443)>>1)];
   var $4445=_new_arg($4440, $4444);
   var $4446=$yyval;
   HEAP32[(($4446)>>2)]=$4445;
   label = 542; break;
  case 507: 
   var $4448=$1;
   var $4449=$yyvsp;
   var $4450=((($4449)-(4))|0);
   var $4451=$4450;
   var $4452=HEAP32[(($4451)>>2)];
   var $4453=_new_masgn($4448, $4452, 0);
   var $4454=$yyval;
   HEAP32[(($4454)>>2)]=$4453;
   label = 542; break;
  case 508: 
   var $4456=$1;
   var $4457=$yyvsp;
   var $4458=(($4457)|0);
   var $4459=$4458;
   var $4460=HEAP32[(($4459)>>2)];
   var $4461=_list1_gen($4456, $4460);
   var $4462=$yyval;
   HEAP32[(($4462)>>2)]=$4461;
   label = 542; break;
  case 509: 
   var $4464=$1;
   var $4465=$yyvsp;
   var $4466=((($4465)-(8))|0);
   var $4467=$4466;
   var $4468=HEAP32[(($4467)>>2)];
   var $4469=$1;
   var $4470=$yyvsp;
   var $4471=(($4470)|0);
   var $4472=$4471;
   var $4473=HEAP32[(($4472)>>2)];
   var $4474=_list1_gen($4469, $4473);
   var $4475=_append_gen($4464, $4468, $4474);
   var $4476=$yyval;
   HEAP32[(($4476)>>2)]=$4475;
   label = 542; break;
  case 510: 
   var $4478=$1;
   var $4479=$yyvsp;
   var $4480=((($4479)-(8))|0);
   var $4481=$4480;
   var $4482=HEAP16[(($4481)>>1)];
   _local_add_f($4478, $4482);
   var $4483=$1;
   var $4484=$yyvsp;
   var $4485=((($4484)-(8))|0);
   var $4486=$4485;
   var $4487=HEAP16[(($4486)>>1)];
   var $4488=(($4487 << 16) >> 16);
   var $4489=$4488;
   var $4490=$yyvsp;
   var $4491=(($4490)|0);
   var $4492=$4491;
   var $4493=HEAP32[(($4492)>>2)];
   var $4494=_cons_gen($4483, $4489, $4493);
   var $4495=$yyval;
   HEAP32[(($4495)>>2)]=$4494;
   label = 542; break;
  case 511: 
   var $4497=$1;
   var $4498=$yyvsp;
   var $4499=((($4498)-(8))|0);
   var $4500=$4499;
   var $4501=HEAP16[(($4500)>>1)];
   _local_add_f($4497, $4501);
   var $4502=$1;
   var $4503=$yyvsp;
   var $4504=((($4503)-(8))|0);
   var $4505=$4504;
   var $4506=HEAP16[(($4505)>>1)];
   var $4507=(($4506 << 16) >> 16);
   var $4508=$4507;
   var $4509=$yyvsp;
   var $4510=(($4509)|0);
   var $4511=$4510;
   var $4512=HEAP32[(($4511)>>2)];
   var $4513=_cons_gen($4502, $4508, $4512);
   var $4514=$yyval;
   HEAP32[(($4514)>>2)]=$4513;
   label = 542; break;
  case 512: 
   var $4516=$1;
   var $4517=$yyvsp;
   var $4518=(($4517)|0);
   var $4519=$4518;
   var $4520=HEAP32[(($4519)>>2)];
   var $4521=_list1_gen($4516, $4520);
   var $4522=$yyval;
   HEAP32[(($4522)>>2)]=$4521;
   label = 542; break;
  case 513: 
   var $4524=$1;
   var $4525=$yyvsp;
   var $4526=((($4525)-(8))|0);
   var $4527=$4526;
   var $4528=HEAP32[(($4527)>>2)];
   var $4529=$1;
   var $4530=$yyvsp;
   var $4531=(($4530)|0);
   var $4532=$4531;
   var $4533=HEAP32[(($4532)>>2)];
   var $4534=_list1_gen($4529, $4533);
   var $4535=_append_gen($4524, $4528, $4534);
   var $4536=$yyval;
   HEAP32[(($4536)>>2)]=$4535;
   label = 542; break;
  case 514: 
   var $4538=$1;
   var $4539=$yyvsp;
   var $4540=(($4539)|0);
   var $4541=$4540;
   var $4542=HEAP32[(($4541)>>2)];
   var $4543=_list1_gen($4538, $4542);
   var $4544=$yyval;
   HEAP32[(($4544)>>2)]=$4543;
   label = 542; break;
  case 515: 
   var $4546=$1;
   var $4547=$yyvsp;
   var $4548=((($4547)-(8))|0);
   var $4549=$4548;
   var $4550=HEAP32[(($4549)>>2)];
   var $4551=$1;
   var $4552=$yyvsp;
   var $4553=(($4552)|0);
   var $4554=$4553;
   var $4555=HEAP32[(($4554)>>2)];
   var $4556=_list1_gen($4551, $4555);
   var $4557=_append_gen($4546, $4550, $4556);
   var $4558=$yyval;
   HEAP32[(($4558)>>2)]=$4557;
   label = 542; break;
  case 516: 
   var $4560=$1;
   var $4561=$yyvsp;
   var $4562=(($4561)|0);
   var $4563=$4562;
   var $4564=HEAP16[(($4563)>>1)];
   _local_add_f($4560, $4564);
   var $4565=$yyvsp;
   var $4566=(($4565)|0);
   var $4567=$4566;
   var $4568=HEAP16[(($4567)>>1)];
   var $4569=$yyval;
   HEAP16[(($4569)>>1)]=$4568;
   label = 542; break;
  case 517: 
   var $4571=$1;
   _local_add_f($4571, 0);
   var $4572=$yyval;
   HEAP16[(($4572)>>1)]=-1;
   label = 542; break;
  case 518: 
   var $4574=$1;
   var $4575=$yyvsp;
   var $4576=(($4575)|0);
   var $4577=$4576;
   var $4578=HEAP16[(($4577)>>1)];
   _local_add_f($4574, $4578);
   var $4579=$yyvsp;
   var $4580=(($4579)|0);
   var $4581=$4580;
   var $4582=HEAP16[(($4581)>>1)];
   var $4583=$yyval;
   HEAP16[(($4583)>>1)]=$4582;
   label = 542; break;
  case 519: 
   var $4585=$yyvsp;
   var $4586=(($4585)|0);
   var $4587=$4586;
   var $4588=HEAP16[(($4587)>>1)];
   var $4589=$yyval;
   HEAP16[(($4589)>>1)]=$4588;
   label = 542; break;
  case 520: 
   var $4591=$1;
   _local_add_f($4591, 0);
   var $4592=$yyval;
   HEAP16[(($4592)>>1)]=0;
   label = 542; break;
  case 521: 
   var $4594=$yyvsp;
   var $4595=(($4594)|0);
   var $4596=$4595;
   var $4597=HEAP32[(($4596)>>2)];
   var $4598=$yyval;
   HEAP32[(($4598)>>2)]=$4597;
   var $4599=$yyval;
   var $4600=HEAP32[(($4599)>>2)];
   var $4601=(($4600)|(0))!=0;
   if ($4601) { label = 523; break; } else { label = 522; break; }
  case 522: 
   var $4603=$1;
   var $4604=_new_nil($4603);
   var $4605=$yyval;
   HEAP32[(($4605)>>2)]=$4604;
   label = 523; break;
  case 523: 
   label = 542; break;
  case 524: 
   var $4608=$1;
   var $4609=(($4608+40)|0);
   HEAP32[(($4609)>>2)]=0;
   label = 542; break;
  case 525: 
   var $4611=$yyvsp;
   var $4612=((($4611)-(4))|0);
   var $4613=$4612;
   var $4614=HEAP32[(($4613)>>2)];
   var $4615=(($4614)|(0))==0;
   if ($4615) { label = 526; break; } else { label = 527; break; }
  case 526: 
   var $4617=$1;
   _yyerror($4617, ((91032)|0));
   label = 531; break;
  case 527: 
   var $4619=$yyvsp;
   var $4620=((($4619)-(4))|0);
   var $4621=$4620;
   var $4622=HEAP32[(($4621)>>2)];
   var $4623=(($4622)|0);
   var $4624=HEAP32[(($4623)>>2)];
   var $4625=$4624;
   if ((($4625)|(0))==55 | (($4625)|(0))==56 | (($4625)|(0))==57 | (($4625)|(0))==58 | (($4625)|(0))==60 | (($4625)|(0))==47 | (($4625)|(0))==51 | (($4625)|(0))==34 | (($4625)|(0))==99) {
    label = 528; break;
   }
   else {
   label = 529; break;
   }
  case 528: 
   var $4627=$1;
   _yyerror($4627, ((90768)|0));
   label = 529; break;
  case 529: 
   label = 530; break;
  case 530: 
   label = 531; break;
  case 531: 
   var $4631=$yyvsp;
   var $4632=((($4631)-(4))|0);
   var $4633=$4632;
   var $4634=HEAP32[(($4633)>>2)];
   var $4635=$yyval;
   HEAP32[(($4635)>>2)]=$4634;
   label = 542; break;
  case 532: 
   var $4637=$yyvsp;
   var $4638=((($4637)-(4))|0);
   var $4639=$4638;
   var $4640=HEAP32[(($4639)>>2)];
   var $4641=$yyval;
   HEAP32[(($4641)>>2)]=$4640;
   label = 542; break;
  case 533: 
   var $4643=$1;
   var $4644=$yyvsp;
   var $4645=(($4644)|0);
   var $4646=$4645;
   var $4647=HEAP32[(($4646)>>2)];
   var $4648=_list1_gen($4643, $4647);
   var $4649=$yyval;
   HEAP32[(($4649)>>2)]=$4648;
   label = 542; break;
  case 534: 
   var $4651=$1;
   var $4652=$yyvsp;
   var $4653=((($4652)-(8))|0);
   var $4654=$4653;
   var $4655=HEAP32[(($4654)>>2)];
   var $4656=$1;
   var $4657=$yyvsp;
   var $4658=(($4657)|0);
   var $4659=$4658;
   var $4660=HEAP32[(($4659)>>2)];
   var $4661=_list1_gen($4656, $4660);
   var $4662=_append_gen($4651, $4655, $4661);
   var $4663=$yyval;
   HEAP32[(($4663)>>2)]=$4662;
   label = 542; break;
  case 535: 
   var $4665=$1;
   var $4666=$yyvsp;
   var $4667=((($4666)-(8))|0);
   var $4668=$4667;
   var $4669=HEAP32[(($4668)>>2)];
   var $4670=$yyvsp;
   var $4671=(($4670)|0);
   var $4672=$4671;
   var $4673=HEAP32[(($4672)>>2)];
   var $4674=_cons_gen($4665, $4669, $4673);
   var $4675=$yyval;
   HEAP32[(($4675)>>2)]=$4674;
   label = 542; break;
  case 536: 
   var $4677=$1;
   var $4678=$1;
   var $4679=$yyvsp;
   var $4680=((($4679)-(4))|0);
   var $4681=$4680;
   var $4682=HEAP16[(($4681)>>1)];
   var $4683=_new_sym($4678, $4682);
   var $4684=$yyvsp;
   var $4685=(($4684)|0);
   var $4686=$4685;
   var $4687=HEAP32[(($4686)>>2)];
   var $4688=_cons_gen($4677, $4683, $4687);
   var $4689=$yyval;
   HEAP32[(($4689)>>2)]=$4688;
   label = 542; break;
  case 537: 
   $yyerrstatus=0;
   label = 542; break;
  case 538: 
   var $4692=$1;
   var $4693=(($4692+32)|0);
   var $4694=HEAP32[(($4693)>>2)];
   var $4695=((($4694)+(1))|0);
   HEAP32[(($4693)>>2)]=$4695;
   var $4696=$1;
   var $4697=(($4696+36)|0);
   HEAP32[(($4697)>>2)]=0;
   label = 542; break;
  case 539: 
   $yyerrstatus=0;
   label = 542; break;
  case 540: 
   var $4700=$yyval;
   HEAP32[(($4700)>>2)]=0;
   label = 542; break;
  case 541: 
   label = 542; break;
  case 542: 
   label = 543; break;
  case 543: 
   var $4704=HEAP32[((106276)>>2)];
   var $4705=(($4704)|(0))!=0;
   if ($4705) { label = 544; break; } else { label = 545; break; }
  case 544: 
   var $4707=HEAP32[((_stderr)>>2)];
   var $4708=_fprintf($4707, ((91620)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=((90536)|0),tempInt));
   var $4709=HEAP32[((_stderr)>>2)];
   var $4710=$yyn;
   var $4711=((30360+($4710<<1))|0);
   var $4712=HEAP16[(($4711)>>1)];
   var $4713=(($4712)&(65535));
   var $4714=$1;
   _yy_symbol_print($4709, $4713, $yyval, $4714);
   var $4715=HEAP32[((_stderr)>>2)];
   var $4716=_fprintf($4715, ((88316)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 545; break;
  case 545: 
   label = 546; break;
  case 546: 
   var $4719=$yylen;
   var $4720=$yyvsp;
   var $4721=(((-$4719))|0);
   var $4722=(($4720+($4721<<2))|0);
   $yyvsp=$4722;
   var $4723=$yylen;
   var $4724=$yyssp;
   var $4725=(((-$4723))|0);
   var $4726=(($4724+($4725<<1))|0);
   $yyssp=$4726;
   $yylen=0;
   label = 547; break;
  case 547: 
   var $4728=HEAP32[((106276)>>2)];
   var $4729=(($4728)|(0))!=0;
   if ($4729) { label = 548; break; } else { label = 549; break; }
  case 548: 
   var $4731=$yyss;
   var $4732=$yyssp;
   _yy_stack_print($4731, $4732);
   label = 549; break;
  case 549: 
   label = 550; break;
  case 550: 
   var $4735=$yyvsp;
   var $4736=(($4735+4)|0);
   $yyvsp=$4736;
   var $4737=$4736;
   var $4738=$yyval;
   assert(4 % 1 === 0);HEAP32[(($4737)>>2)]=HEAP32[(($4738)>>2)];
   var $4739=$yyn;
   var $4740=((30360+($4739<<1))|0);
   var $4741=HEAP16[(($4740)>>1)];
   var $4742=(($4741)&(65535));
   $yyn=$4742;
   var $4743=$yyn;
   var $4744=((($4743)-(151))|0);
   var $4745=((32544+($4744<<1))|0);
   var $4746=HEAP16[(($4745)>>1)];
   var $4747=(($4746 << 16) >> 16);
   var $4748=$yyssp;
   var $4749=HEAP16[(($4748)>>1)];
   var $4750=(($4749 << 16) >> 16);
   var $4751=((($4747)+($4750))|0);
   $yystate=$4751;
   var $4752=$yystate;
   var $4753=0 <= (($4752)|(0));
   if ($4753) { label = 551; break; } else { label = 554; break; }
  case 551: 
   var $4755=$yystate;
   var $4756=(($4755)|(0)) <= 10895;
   if ($4756) { label = 552; break; } else { label = 554; break; }
  case 552: 
   var $4758=$yystate;
   var $4759=((36984+($4758<<1))|0);
   var $4760=HEAP16[(($4759)>>1)];
   var $4761=(($4760 << 16) >> 16);
   var $4762=$yyssp;
   var $4763=HEAP16[(($4762)>>1)];
   var $4764=(($4763 << 16) >> 16);
   var $4765=(($4761)|(0))==(($4764)|(0));
   if ($4765) { label = 553; break; } else { label = 554; break; }
  case 553: 
   var $4767=$yystate;
   var $4768=((1608+($4767<<1))|0);
   var $4769=HEAP16[(($4768)>>1)];
   var $4770=(($4769 << 16) >> 16);
   $yystate=$4770;
   label = 555; break;
  case 554: 
   var $4772=$yyn;
   var $4773=((($4772)-(151))|0);
   var $4774=((34764+($4773<<1))|0);
   var $4775=HEAP16[(($4774)>>1)];
   var $4776=(($4775 << 16) >> 16);
   $yystate=$4776;
   label = 555; break;
  case 555: 
   label = 6; break;
  case 556: 
   var $4779=$yychar;
   var $4780=(($4779)|(0))==-2;
   if ($4780) { label = 557; break; } else { label = 558; break; }
  case 557: 
   var $4794 = -2;label = 562; break;
  case 558: 
   var $4783=$yychar;
   var $4784=(($4783)>>>(0)) <= 379;
   if ($4784) { label = 559; break; } else { label = 560; break; }
  case 559: 
   var $4786=$yychar;
   var $4787=((4+$4786)|0);
   var $4788=HEAP8[($4787)];
   var $4789=(($4788)&(255));
   var $4792 = $4789;label = 561; break;
  case 560: 
   var $4792 = 2;label = 561; break;
  case 561: 
   var $4792;
   var $4794 = $4792;label = 562; break;
  case 562: 
   var $4794;
   $yytoken=$4794;
   var $4795=$yyerrstatus;
   var $4796=(($4795)|(0))!=0;
   if ($4796) { label = 576; break; } else { label = 563; break; }
  case 563: 
   var $4798=$yynerrs;
   var $4799=((($4798)+(1))|0);
   $yynerrs=$4799;
   $yymsgp=((90352)|0);
   var $4800=$yyssp;
   var $4801=$yytoken;
   var $4802=_yysyntax_error($yymsg_alloc, $yymsg, $4800, $4801);
   $yysyntax_error_status=$4802;
   var $4803=$yysyntax_error_status;
   var $4804=(($4803)|(0))==0;
   if ($4804) { label = 564; break; } else { label = 565; break; }
  case 564: 
   var $4806=HEAP32[(($yymsg)>>2)];
   $yymsgp=$4806;
   label = 573; break;
  case 565: 
   var $4808=$yysyntax_error_status;
   var $4809=(($4808)|(0))==1;
   if ($4809) { label = 566; break; } else { label = 572; break; }
  case 566: 
   var $4811=HEAP32[(($yymsg)>>2)];
   var $4812=(($yymsgbuf)|0);
   var $4813=(($4811)|(0))!=(($4812)|(0));
   if ($4813) { label = 567; break; } else { label = 568; break; }
  case 567: 
   var $4815=$1;
   var $4816=(($4815)|0);
   var $4817=HEAP32[(($4816)>>2)];
   var $4818=HEAP32[(($yymsg)>>2)];
   _mrb_free($4817, $4818);
   label = 568; break;
  case 568: 
   var $4820=$1;
   var $4821=(($4820)|0);
   var $4822=HEAP32[(($4821)>>2)];
   var $4823=HEAP32[(($yymsg_alloc)>>2)];
   var $4824=_mrb_malloc($4822, $4823);
   HEAP32[(($yymsg)>>2)]=$4824;
   var $4825=HEAP32[(($yymsg)>>2)];
   var $4826=(($4825)|(0))!=0;
   if ($4826) { label = 570; break; } else { label = 569; break; }
  case 569: 
   var $4828=(($yymsgbuf)|0);
   HEAP32[(($yymsg)>>2)]=$4828;
   HEAP32[(($yymsg_alloc)>>2)]=128;
   $yysyntax_error_status=2;
   label = 571; break;
  case 570: 
   var $4830=$yyssp;
   var $4831=$yytoken;
   var $4832=_yysyntax_error($yymsg_alloc, $yymsg, $4830, $4831);
   $yysyntax_error_status=$4832;
   var $4833=HEAP32[(($yymsg)>>2)];
   $yymsgp=$4833;
   label = 571; break;
  case 571: 
   label = 572; break;
  case 572: 
   label = 573; break;
  case 573: 
   var $4837=$1;
   var $4838=$yymsgp;
   _yyerror($4837, $4838);
   var $4839=$yysyntax_error_status;
   var $4840=(($4839)|(0))==2;
   if ($4840) { label = 574; break; } else { label = 575; break; }
  case 574: 
   label = 611; break;
  case 575: 
   label = 576; break;
  case 576: 
   var $4844=$yyerrstatus;
   var $4845=(($4844)|(0))==3;
   if ($4845) { label = 577; break; } else { label = 583; break; }
  case 577: 
   var $4847=$yychar;
   var $4848=(($4847)|(0)) <= 0;
   if ($4848) { label = 578; break; } else { label = 581; break; }
  case 578: 
   var $4850=$yychar;
   var $4851=(($4850)|(0))==0;
   if ($4851) { label = 579; break; } else { label = 580; break; }
  case 579: 
   label = 610; break;
  case 580: 
   label = 582; break;
  case 581: 
   var $4855=$yytoken;
   var $4856=$1;
   _yydestruct(((90028)|0), $4855, $yylval, $4856);
   $yychar=-2;
   label = 582; break;
  case 582: 
   label = 583; break;
  case 583: 
   label = 588; break;
  case 584: 
   var $4869=HEAP32[((106276)>>2)];
   var $4870=(($4869)|(0))!=0;
   if ($4870) { label = 585; break; } else { label = 586; break; }
  case 585: 
   var $4872=$yyss;
   var $4873=$yyssp;
   _yy_stack_print($4872, $4873);
   label = 586; break;
  case 586: 
   label = 587; break;
  case 587: 
   var $4876=$yyssp;
   var $4877=HEAP16[(($4876)>>1)];
   var $4878=(($4877 << 16) >> 16);
   $yystate=$4878;
   label = 588; break;
  case 588: 
   $yyerrstatus=3;
   label = 589; break;
  case 589: 
   var $4881=$yystate;
   var $4882=((32852+($4881<<1))|0);
   var $4883=HEAP16[(($4882)>>1)];
   var $4884=(($4883 << 16) >> 16);
   $yyn=$4884;
   var $4885=$yyn;
   var $4886=(($4885)|(0))==-745;
   if ($4886) { label = 597; break; } else { label = 590; break; }
  case 590: 
   var $4888=$yyn;
   var $4889=((($4888)+(1))|0);
   $yyn=$4889;
   var $4890=$yyn;
   var $4891=0 <= (($4890)|(0));
   if ($4891) { label = 591; break; } else { label = 596; break; }
  case 591: 
   var $4893=$yyn;
   var $4894=(($4893)|(0)) <= 10895;
   if ($4894) { label = 592; break; } else { label = 596; break; }
  case 592: 
   var $4896=$yyn;
   var $4897=((36984+($4896<<1))|0);
   var $4898=HEAP16[(($4897)>>1)];
   var $4899=(($4898 << 16) >> 16);
   var $4900=(($4899)|(0))==1;
   if ($4900) { label = 593; break; } else { label = 596; break; }
  case 593: 
   var $4902=$yyn;
   var $4903=((1608+($4902<<1))|0);
   var $4904=HEAP16[(($4903)>>1)];
   var $4905=(($4904 << 16) >> 16);
   $yyn=$4905;
   var $4906=$yyn;
   var $4907=0 < (($4906)|(0));
   if ($4907) { label = 594; break; } else { label = 595; break; }
  case 594: 
   label = 604; break;
  case 595: 
   label = 596; break;
  case 596: 
   label = 597; break;
  case 597: 
   var $4912=$yyssp;
   var $4913=$yyss;
   var $4914=(($4912)|(0))==(($4913)|(0));
   if ($4914) { label = 598; break; } else { label = 599; break; }
  case 598: 
   label = 610; break;
  case 599: 
   var $4917=$yystate;
   var $4918=((23400+($4917<<1))|0);
   var $4919=HEAP16[(($4918)>>1)];
   var $4920=(($4919)&(65535));
   var $4921=$yyvsp;
   var $4922=$1;
   _yydestruct(((89908)|0), $4920, $4921, $4922);
   var $4923=$yyvsp;
   var $4924=((($4923)-(4))|0);
   $yyvsp=$4924;
   var $4925=$yyssp;
   var $4926=((($4925)-(2))|0);
   $yyssp=$4926;
   var $4927=$yyssp;
   var $4928=HEAP16[(($4927)>>1)];
   var $4929=(($4928 << 16) >> 16);
   $yystate=$4929;
   label = 600; break;
  case 600: 
   var $4931=HEAP32[((106276)>>2)];
   var $4932=(($4931)|(0))!=0;
   if ($4932) { label = 601; break; } else { label = 602; break; }
  case 601: 
   var $4934=$yyss;
   var $4935=$yyssp;
   _yy_stack_print($4934, $4935);
   label = 602; break;
  case 602: 
   label = 603; break;
  case 603: 
   label = 589; break;
  case 604: 
   var $4939=$yyvsp;
   var $4940=(($4939+4)|0);
   $yyvsp=$4940;
   var $4941=$4940;
   var $4942=$yylval;
   assert(4 % 1 === 0);HEAP32[(($4941)>>2)]=HEAP32[(($4942)>>2)];
   label = 605; break;
  case 605: 
   var $4944=HEAP32[((106276)>>2)];
   var $4945=(($4944)|(0))!=0;
   if ($4945) { label = 606; break; } else { label = 607; break; }
  case 606: 
   var $4947=HEAP32[((_stderr)>>2)];
   var $4948=_fprintf($4947, ((91620)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=((87296)|0),tempInt));
   var $4949=HEAP32[((_stderr)>>2)];
   var $4950=$yyn;
   var $4951=((23400+($4950<<1))|0);
   var $4952=HEAP16[(($4951)>>1)];
   var $4953=(($4952)&(65535));
   var $4954=$yyvsp;
   var $4955=$1;
   _yy_symbol_print($4949, $4953, $4954, $4955);
   var $4956=HEAP32[((_stderr)>>2)];
   var $4957=_fprintf($4956, ((88316)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 607; break;
  case 607: 
   label = 608; break;
  case 608: 
   var $4960=$yyn;
   $yystate=$4960;
   label = 6; break;
  case 609: 
   $yyresult=0;
   label = 612; break;
  case 610: 
   $yyresult=1;
   label = 612; break;
  case 611: 
   var $4964=$1;
   _yyerror($4964, ((89840)|0));
   $yyresult=2;
   label = 612; break;
  case 612: 
   var $4966=$yychar;
   var $4967=(($4966)|(0))!=-2;
   if ($4967) { label = 613; break; } else { label = 617; break; }
  case 613: 
   var $4969=$yychar;
   var $4970=(($4969)>>>(0)) <= 379;
   if ($4970) { label = 614; break; } else { label = 615; break; }
  case 614: 
   var $4972=$yychar;
   var $4973=((4+$4972)|0);
   var $4974=HEAP8[($4973)];
   var $4975=(($4974)&(255));
   var $4978 = $4975;label = 616; break;
  case 615: 
   var $4978 = 2;label = 616; break;
  case 616: 
   var $4978;
   $yytoken=$4978;
   var $4979=$yytoken;
   var $4980=$1;
   _yydestruct(((89688)|0), $4979, $yylval, $4980);
   label = 617; break;
  case 617: 
   var $4982=$yylen;
   var $4983=$yyvsp;
   var $4984=(((-$4982))|0);
   var $4985=(($4983+($4984<<2))|0);
   $yyvsp=$4985;
   var $4986=$yylen;
   var $4987=$yyssp;
   var $4988=(((-$4986))|0);
   var $4989=(($4987+($4988<<1))|0);
   $yyssp=$4989;
   label = 618; break;
  case 618: 
   var $4991=HEAP32[((106276)>>2)];
   var $4992=(($4991)|(0))!=0;
   if ($4992) { label = 619; break; } else { label = 620; break; }
  case 619: 
   var $4994=$yyss;
   var $4995=$yyssp;
   _yy_stack_print($4994, $4995);
   label = 620; break;
  case 620: 
   label = 621; break;
  case 621: 
   label = 622; break;
  case 622: 
   var $4999=$yyssp;
   var $5000=$yyss;
   var $5001=(($4999)|(0))!=(($5000)|(0));
   if ($5001) { label = 623; break; } else { label = 624; break; }
  case 623: 
   var $5003=$yyssp;
   var $5004=HEAP16[(($5003)>>1)];
   var $5005=(($5004 << 16) >> 16);
   var $5006=((23400+($5005<<1))|0);
   var $5007=HEAP16[(($5006)>>1)];
   var $5008=(($5007)&(65535));
   var $5009=$yyvsp;
   var $5010=$1;
   _yydestruct(((89568)|0), $5008, $5009, $5010);
   var $5011=$yyvsp;
   var $5012=((($5011)-(4))|0);
   $yyvsp=$5012;
   var $5013=$yyssp;
   var $5014=((($5013)-(2))|0);
   $yyssp=$5014;
   label = 622; break;
  case 624: 
   var $5016=$yyss;
   var $5017=(($yyssa)|0);
   var $5018=(($5016)|(0))!=(($5017)|(0));
   if ($5018) { label = 625; break; } else { label = 626; break; }
  case 625: 
   var $5020=$1;
   var $5021=(($5020)|0);
   var $5022=HEAP32[(($5021)>>2)];
   var $5023=$yyss;
   var $5024=$5023;
   _mrb_free($5022, $5024);
   label = 626; break;
  case 626: 
   var $5026=HEAP32[(($yymsg)>>2)];
   var $5027=(($yymsgbuf)|0);
   var $5028=(($5026)|(0))!=(($5027)|(0));
   if ($5028) { label = 627; break; } else { label = 628; break; }
  case 627: 
   var $5030=$1;
   var $5031=(($5030)|0);
   var $5032=HEAP32[(($5031)>>2)];
   var $5033=HEAP32[(($yymsg)>>2)];
   _mrb_free($5032, $5033);
   label = 628; break;
  case 628: 
   var $5035=$yyresult;
   STACKTOP = sp;
   return $5035;
  default: assert(0, "bad label: " + label);
 }
}
function _cond($n) {
 var label = 0;
 var $1;
 $1=$n;
 var $2=$1;
 return $2;
}
function _append_gen($p, $a, $b) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $c;
   $2=$p;
   $3=$a;
   $4=$b;
   var $5=$3;
   $c=$5;
   var $6=$3;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $9=$4;
   $1=$9;
   label = 9; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $12=$c;
   var $13=(($12+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0))!=0;
   if ($15) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $17=$c;
   var $18=(($17+4)|0);
   var $19=HEAP32[(($18)>>2)];
   $c=$19;
   label = 4; break;
  case 6: 
   var $21=$4;
   var $22=(($21)|(0))!=0;
   if ($22) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $24=$4;
   var $25=$c;
   var $26=(($25+4)|0);
   HEAP32[(($26)>>2)]=$24;
   label = 8; break;
  case 8: 
   var $28=$3;
   $1=$28;
   label = 9; break;
  case 9: 
   var $30=$1;
   return $30;
  default: assert(0, "bad label: " + label);
 }
}
function _local_resume($p, $prev) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$prev;
 var $3=$2;
 var $4=$1;
 var $5=(($4+76)|0);
 HEAP32[(($5)>>2)]=$3;
 return;
}
function _local_unnest($p) {
 var label = 0;
 var $1;
 $1=$p;
 var $2=$1;
 var $3=(($2+76)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$1;
 var $8=(($7+76)|0);
 HEAP32[(($8)>>2)]=$6;
 return;
}
function _yylex($lval, $p) {
 var label = 0;
 var $1;
 var $2;
 var $t;
 $1=$lval;
 $2=$p;
 var $3=$1;
 var $4=$2;
 var $5=(($4+1124)|0);
 HEAP32[(($5)>>2)]=$3;
 var $6=$2;
 var $7=_parser_yylex($6);
 $t=$7;
 var $8=$t;
 return $8;
}
function _yy_symbol_print($yyoutput, $yytype, $yyvaluep, $p) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$yyoutput;
   $2=$yytype;
   $3=$yyvaluep;
   $4=$p;
   var $5=$2;
   var $6=(($5)|(0)) < 151;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$1;
   var $9=$2;
   var $10=((384+($9<<2))|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=_fprintf($8, ((90120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$11,tempInt));
   label = 4; break;
  case 3: 
   var $14=$1;
   var $15=$2;
   var $16=((384+($15<<2))|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=_fprintf($14, ((90108)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$17,tempInt));
   label = 4; break;
  case 4: 
   var $20=$1;
   var $21=$2;
   var $22=$3;
   var $23=$4;
   _yy_symbol_value_print($20, $21, $22, $23);
   var $24=$1;
   var $25=_fprintf($24, ((90048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _yy_reduce_print($yyvsp, $yyrule, $p) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $yynrhs;
   var $yyi;
   var $yylno;
   $1=$yyvsp;
   $2=$yyrule;
   $3=$p;
   var $4=$2;
   var $5=((29812+$4)|0);
   var $6=HEAP8[($5)];
   var $7=(($6)&(255));
   $yynrhs=$7;
   var $8=$2;
   var $9=((25312+($8<<1))|0);
   var $10=HEAP16[(($9)>>1)];
   var $11=(($10)&(65535));
   $yylno=$11;
   var $12=HEAP32[((_stderr)>>2)];
   var $13=$2;
   var $14=((($13)-(1))|0);
   var $15=$yylno;
   var $16=_fprintf($12, ((90184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$15,tempInt));
   $yyi=0;
   label = 2; break;
  case 2: 
   var $18=$yyi;
   var $19=$yynrhs;
   var $20=(($18)|(0)) < (($19)|(0));
   if ($20) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $22=HEAP32[((_stderr)>>2)];
   var $23=$yyi;
   var $24=((($23)+(1))|0);
   var $25=_fprintf($22, ((90140)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$24,tempInt));
   var $26=HEAP32[((_stderr)>>2)];
   var $27=$2;
   var $28=((31452+($27<<1))|0);
   var $29=HEAP16[(($28)>>1)];
   var $30=(($29)&(65535));
   var $31=$yyi;
   var $32=((($30)+($31))|0);
   var $33=((26404+($32<<1))|0);
   var $34=HEAP16[(($33)>>1)];
   var $35=(($34 << 16) >> 16);
   var $36=$yyi;
   var $37=((($36)+(1))|0);
   var $38=$yynrhs;
   var $39=((($37)-($38))|0);
   var $40=$1;
   var $41=(($40+($39<<2))|0);
   var $42=$3;
   _yy_symbol_print($26, $35, $41, $42);
   var $43=HEAP32[((_stderr)>>2)];
   var $44=_fprintf($43, ((88316)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 4; break;
  case 4: 
   var $46=$yyi;
   var $47=((($46)+(1))|0);
   $yyi=$47;
   label = 2; break;
  case 5: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _cons_gen($p, $car, $cdr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $c;
   $1=$p;
   $2=$car;
   $3=$cdr;
   var $4=$1;
   var $5=(($4+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))!=0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$1;
   var $10=(($9+8)|0);
   var $11=HEAP32[(($10)>>2)];
   $c=$11;
   var $12=$1;
   var $13=(($12+8)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14+4)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$1;
   var $18=(($17+8)|0);
   HEAP32[(($18)>>2)]=$16;
   label = 4; break;
  case 3: 
   var $20=$1;
   var $21=_parser_palloc($20, 12);
   var $22=$21;
   $c=$22;
   label = 4; break;
  case 4: 
   var $24=$2;
   var $25=$c;
   var $26=(($25)|0);
   HEAP32[(($26)>>2)]=$24;
   var $27=$3;
   var $28=$c;
   var $29=(($28+4)|0);
   HEAP32[(($29)>>2)]=$27;
   var $30=$1;
   var $31=(($30+32)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32) & 65535);
   var $34=$c;
   var $35=(($34+8)|0);
   HEAP16[(($35)>>1)]=$33;
   var $36=$c;
   return $36;
  default: assert(0, "bad label: " + label);
 }
}
function _new_scope($p, $body) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$body;
 var $3=$1;
 var $4=$1;
 var $5=$1;
 var $6=(($5+76)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$2;
 var $11=_cons_gen($4, $9, $10);
 var $12=_cons_gen($3, 3, $11);
 return $12;
}
function _new_begin($p, $body) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $2=$p;
   $3=$body;
   var $4=$3;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$2;
   var $8=$3;
   var $9=_list2_gen($7, 17, $8);
   $1=$9;
   label = 4; break;
  case 3: 
   var $11=$2;
   var $12=_cons_gen($11, 17, 0);
   $1=$12;
   label = 4; break;
  case 4: 
   var $14=$1;
   return $14;
  default: assert(0, "bad label: " + label);
 }
}
function _list1_gen($p, $a) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$a;
 var $3=$1;
 var $4=$2;
 var $5=_cons_gen($3, $4, 0);
 return $5;
}
function _local_switch($p) {
 var label = 0;
 var $1;
 var $prev;
 $1=$p;
 var $2=$1;
 var $3=(($2+76)|0);
 var $4=HEAP32[(($3)>>2)];
 $prev=$4;
 var $5=$1;
 var $6=_cons_gen($5, 0, 0);
 var $7=$1;
 var $8=(($7+76)|0);
 HEAP32[(($8)>>2)]=$6;
 var $9=$prev;
 return $9;
}
function _yyerror($p, $s) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   var $n;
   $1=$p;
   $2=$s;
   var $3=$1;
   var $4=(($3+1140)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))!=0;
   if ($6) { label = 6; break; } else { label = 2; break; }
  case 2: 
   var $8=$1;
   var $9=(($8+28)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $13=HEAP32[((_stderr)>>2)];
   var $14=$1;
   var $15=(($14+28)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$1;
   var $18=(($17+32)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$1;
   var $21=(($20+36)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$2;
   var $24=_fprintf($13, ((98812)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$16,HEAP32[(((tempInt)+(4))>>2)]=$19,HEAP32[(((tempInt)+(8))>>2)]=$22,HEAP32[(((tempInt)+(12))>>2)]=$23,tempInt));
   label = 5; break;
  case 4: 
   var $26=HEAP32[((_stderr)>>2)];
   var $27=$1;
   var $28=(($27+32)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$1;
   var $31=(($30+36)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$2;
   var $34=_fprintf($26, ((98796)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$29,HEAP32[(((tempInt)+(4))>>2)]=$32,HEAP32[(((tempInt)+(8))>>2)]=$33,tempInt));
   label = 5; break;
  case 5: 
   label = 9; break;
  case 6: 
   var $37=$1;
   var $38=(($37+1128)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39)>>>(0)) < 10;
   if ($40) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $42=$2;
   var $43=_strlen($42);
   $n=$43;
   var $44=$1;
   var $45=$n;
   var $46=((($45)+(1))|0);
   var $47=_parser_palloc($44, $46);
   $c=$47;
   var $48=$c;
   var $49=$2;
   var $50=$n;
   var $51=((($50)+(1))|0);
   assert($51 % 1 === 0);(_memcpy($48, $49, $51)|0);
   var $52=$c;
   var $53=$1;
   var $54=(($53+1128)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=$1;
   var $57=(($56+1144)|0);
   var $58=(($57+((($55)*(12))&-1))|0);
   var $59=(($58+8)|0);
   HEAP32[(($59)>>2)]=$52;
   var $60=$1;
   var $61=(($60+32)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=$1;
   var $64=(($63+1128)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=$1;
   var $67=(($66+1144)|0);
   var $68=(($67+((($65)*(12))&-1))|0);
   var $69=(($68)|0);
   HEAP32[(($69)>>2)]=$62;
   var $70=$1;
   var $71=(($70+36)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=$1;
   var $74=(($73+1128)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=$1;
   var $77=(($76+1144)|0);
   var $78=(($77+((($75)*(12))&-1))|0);
   var $79=(($78+4)|0);
   HEAP32[(($79)>>2)]=$72;
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $82=$1;
   var $83=(($82+1128)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=((($84)+(1))|0);
   HEAP32[(($83)>>2)]=$85;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _new_rescue($p, $body, $resq, $els) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$p;
 $2=$body;
 $3=$resq;
 $4=$els;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=$4;
 var $9=_list4_gen($5, 18, $6, $7, $8);
 return $9;
}
function _yywarn($p, $s) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   var $n;
   $1=$p;
   $2=$s;
   var $3=$1;
   var $4=(($3+1140)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))!=0;
   if ($6) { label = 6; break; } else { label = 2; break; }
  case 2: 
   var $8=$1;
   var $9=(($8+28)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $13=HEAP32[((_stderr)>>2)];
   var $14=$1;
   var $15=(($14+28)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$1;
   var $18=(($17+32)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$1;
   var $21=(($20+36)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$2;
   var $24=_fprintf($13, ((98812)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$16,HEAP32[(((tempInt)+(4))>>2)]=$19,HEAP32[(((tempInt)+(8))>>2)]=$22,HEAP32[(((tempInt)+(12))>>2)]=$23,tempInt));
   label = 5; break;
  case 4: 
   var $26=HEAP32[((_stderr)>>2)];
   var $27=$1;
   var $28=(($27+32)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$1;
   var $31=(($30+36)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$2;
   var $34=_fprintf($26, ((98796)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$29,HEAP32[(((tempInt)+(4))>>2)]=$32,HEAP32[(((tempInt)+(8))>>2)]=$33,tempInt));
   label = 5; break;
  case 5: 
   label = 9; break;
  case 6: 
   var $37=$1;
   var $38=(($37+1132)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39)>>>(0)) < 10;
   if ($40) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $42=$2;
   var $43=_strlen($42);
   $n=$43;
   var $44=$1;
   var $45=$n;
   var $46=((($45)+(1))|0);
   var $47=_parser_palloc($44, $46);
   $c=$47;
   var $48=$c;
   var $49=$2;
   var $50=$n;
   var $51=((($50)+(1))|0);
   assert($51 % 1 === 0);(_memcpy($48, $49, $51)|0);
   var $52=$c;
   var $53=$1;
   var $54=(($53+1132)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=$1;
   var $57=(($56+1264)|0);
   var $58=(($57+((($55)*(12))&-1))|0);
   var $59=(($58+8)|0);
   HEAP32[(($59)>>2)]=$52;
   var $60=$1;
   var $61=(($60+32)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=$1;
   var $64=(($63+1132)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=$1;
   var $67=(($66+1264)|0);
   var $68=(($67+((($65)*(12))&-1))|0);
   var $69=(($68)|0);
   HEAP32[(($69)>>2)]=$62;
   var $70=$1;
   var $71=(($70+36)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=$1;
   var $74=(($73+1132)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=$1;
   var $77=(($76+1264)|0);
   var $78=(($77+((($75)*(12))&-1))|0);
   var $79=(($78+4)|0);
   HEAP32[(($79)>>2)]=$72;
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $82=$1;
   var $83=(($82+1132)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=((($84)+(1))|0);
   HEAP32[(($83)>>2)]=$85;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _new_ensure($p, $a, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$a;
 $3=$b;
 var $4=$1;
 var $5=$1;
 var $6=$2;
 var $7=$1;
 var $8=$3;
 var $9=_cons_gen($7, 0, $8);
 var $10=_cons_gen($5, $6, $9);
 var $11=_cons_gen($4, 19, $10);
 return $11;
}
function _new_nil($p) {
 var label = 0;
 var $1;
 $1=$p;
 var $2=$1;
 var $3=_list1_gen($2, 86);
 return $3;
}
function _new_alias($p, $a, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$a;
 $3=$b;
 var $4=$1;
 var $5=$1;
 var $6=$2;
 var $7=(($6 << 16) >> 16);
 var $8=$7;
 var $9=$3;
 var $10=(($9 << 16) >> 16);
 var $11=$10;
 var $12=_cons_gen($5, $8, $11);
 var $13=_cons_gen($4, 72, $12);
 return $13;
}
function _new_if($p, $a, $b, $c) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$p;
 $2=$a;
 $3=$b;
 $4=$c;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=$4;
 var $9=_list4_gen($5, 5, $6, $7, $8);
 return $9;
}
function _new_unless($p, $a, $b, $c) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$p;
 $2=$a;
 $3=$b;
 $4=$c;
 var $5=$1;
 var $6=$2;
 var $7=$4;
 var $8=$3;
 var $9=_list4_gen($5, 5, $6, $7, $8);
 return $9;
}
function _new_while($p, $a, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$a;
 $3=$b;
 var $4=$1;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=_cons_gen($5, $6, $7);
 var $9=_cons_gen($4, 9, $8);
 return $9;
}
function _new_until($p, $a, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$a;
 $3=$b;
 var $4=$1;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=_cons_gen($5, $6, $7);
 var $9=_cons_gen($4, 10, $8);
 return $9;
}
function _list3_gen($p, $a, $b, $c) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$p;
 $2=$a;
 $3=$b;
 $4=$c;
 var $5=$1;
 var $6=$2;
 var $7=$1;
 var $8=$3;
 var $9=$1;
 var $10=$4;
 var $11=_cons_gen($9, $10, 0);
 var $12=_cons_gen($7, $8, $11);
 var $13=_cons_gen($5, $6, $12);
 return $13;
}
function _new_postexe($p, $a) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$a;
 var $3=$1;
 var $4=$2;
 var $5=_cons_gen($3, 91, $4);
 return $5;
}
function _new_masgn($p, $a, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$a;
 $3=$b;
 var $4=$1;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=_cons_gen($5, $6, $7);
 var $9=_cons_gen($4, 23, $8);
 return $9;
}
function _new_op_asgn($p, $a, $op, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$p;
 $2=$a;
 $3=$op;
 $4=$b;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=(($7 << 16) >> 16);
 var $9=$8;
 var $10=$4;
 var $11=_list4_gen($5, 28, $6, $9, $10);
 return $11;
}
function _new_call($p, $a, $b, $c) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$p;
 $2=$a;
 $3=$b;
 $4=$c;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=(($7 << 16) >> 16);
 var $9=$8;
 var $10=$4;
 var $11=_list4_gen($5, 29, $6, $9, $10);
 return $11;
}
function _intern_gen2($p, $s, $len) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$s;
 $3=$len;
 var $4=$1;
 var $5=(($4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$2;
 var $8=$3;
 var $9=_mrb_intern2($6, $7, $8);
 return $9;
}
function _backref_error($p, $n) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   $1=$p;
   $2=$n;
   var $3=$2;
   var $4=(($3)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$5;
   $c=$6;
   var $7=$c;
   var $8=(($7)|(0))==45;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$1;
   var $11=$2;
   var $12=(($11+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$13;
   _yyerror_i($10, ((99012)|0), $14);
   label = 7; break;
  case 3: 
   var $16=$c;
   var $17=(($16)|(0))==46;
   if ($17) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $19=$1;
   var $20=$2;
   var $21=(($20+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$22;
   _yyerror_i($19, ((98988)|0), $23);
   label = 6; break;
  case 5: 
   var $25=$1;
   var $26=(($25)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$c;
   _mrb_bug($27, ((98828)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$28,tempInt));
   label = 6; break;
  case 6: 
   label = 7; break;
  case 7: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _new_asgn($p, $a, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$a;
 $3=$b;
 var $4=$1;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=_cons_gen($5, $6, $7);
 var $9=_cons_gen($4, 24, $8);
 return $9;
}
function _new_array($p, $a) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$a;
 var $3=$1;
 var $4=$2;
 var $5=_cons_gen($3, 34, $4);
 return $5;
}
function _new_and($p, $a, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$a;
 $3=$b;
 var $4=$1;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=_cons_gen($5, $6, $7);
 var $9=_cons_gen($4, 20, $8);
 return $9;
}
function _new_or($p, $a, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$a;
 $3=$b;
 var $4=$1;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=_cons_gen($5, $6, $7);
 var $9=_cons_gen($4, 21, $8);
 return $9;
}
function _call_uni_op($p, $recv, $m) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$recv;
 $3=$m;
 var $4=$1;
 var $5=$2;
 var $6=$1;
 var $7=$3;
 var $8=_intern_gen($6, $7);
 var $9=_new_call($4, $5, $8, 0);
 return $9;
}
function _local_nest($p) {
 var label = 0;
 var $1;
 $1=$p;
 var $2=$1;
 var $3=$1;
 var $4=(($3+76)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_cons_gen($2, 0, $5);
 var $7=$1;
 var $8=(($7+76)|0);
 HEAP32[(($8)>>2)]=$6;
 return;
}
function _new_block($p, $a, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$a;
 $3=$b;
 var $4=$1;
 var $5=$1;
 var $6=(($5+76)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$2;
 var $11=$3;
 var $12=_list4_gen($4, 4, $9, $10, $11);
 return $12;
}
function _new_fcall($p, $b, $c) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$b;
 $3=$c;
 var $4=$1;
 var $5=$1;
 var $6=_new_self($5);
 var $7=$2;
 var $8=(($7 << 16) >> 16);
 var $9=$8;
 var $10=$3;
 var $11=_list4_gen($4, 30, $6, $9, $10);
 return $11;
}
function _args_with_block($p, $a, $b) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$p;
   $2=$a;
   $3=$b;
   var $4=$3;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $7=$2;
   var $8=(($7+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))!=0;
   if ($10) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $12=$1;
   _yyerror($12, ((90248)|0));
   label = 4; break;
  case 4: 
   var $14=$3;
   var $15=$2;
   var $16=(($15+4)|0);
   HEAP32[(($16)>>2)]=$14;
   label = 5; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _new_super($p, $c) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$c;
 var $3=$1;
 var $4=$2;
 var $5=_cons_gen($3, 32, $4);
 return $5;
}
function _new_bv($p, $id) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$id;
 return;
}
function _new_yield($p, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $2=$p;
   $3=$c;
   var $4=$3;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $7=$3;
   var $8=(($7+4)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))!=0;
   if ($10) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $12=$2;
   _yyerror($12, ((90248)|0));
   label = 4; break;
  case 4: 
   var $14=$2;
   var $15=$3;
   var $16=(($15)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=_cons_gen($14, 38, $17);
   $1=$18;
   label = 6; break;
  case 5: 
   var $20=$2;
   var $21=_cons_gen($20, 38, 0);
   $1=$21;
   label = 6; break;
  case 6: 
   var $23=$1;
   return $23;
  default: assert(0, "bad label: " + label);
 }
}
function _new_return($p, $c) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$c;
 var $3=$1;
 var $4=$2;
 var $5=_cons_gen($3, 37, $4);
 return $5;
}
function _ret_args($p, $n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $2=$p;
   $3=$n;
   var $4=$3;
   var $5=(($4+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))!=0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$2;
   _yyerror($9, ((90288)|0));
   label = 3; break;
  case 3: 
   var $11=$3;
   var $12=(($11)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13+4)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))!=0;
   if ($16) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $18=$3;
   var $19=(($18)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|0);
   var $22=HEAP32[(($21)>>2)];
   $1=$22;
   label = 6; break;
  case 5: 
   var $24=$2;
   var $25=$3;
   var $26=(($25)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=_new_array($24, $27);
   $1=$28;
   label = 6; break;
  case 6: 
   var $30=$1;
   return $30;
  default: assert(0, "bad label: " + label);
 }
}
function _new_break($p, $c) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$c;
 var $3=$1;
 var $4=$2;
 var $5=_cons_gen($3, 13, $4);
 return $5;
}
function _new_next($p, $c) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$c;
 var $3=$1;
 var $4=$2;
 var $5=_cons_gen($3, 14, $4);
 return $5;
}
function _list2_gen($p, $a, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$a;
 $3=$b;
 var $4=$1;
 var $5=$2;
 var $6=$1;
 var $7=$3;
 var $8=_cons_gen($6, $7, 0);
 var $9=_cons_gen($4, $5, $8);
 return $9;
}
function _assignable($p, $lhs) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$p;
   $2=$lhs;
   var $3=$2;
   var $4=(($3)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$5;
   var $7=(($6)|(0))==39;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$1;
   var $10=$2;
   var $11=(($10+4)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$12;
   var $14=(($13) & 65535);
   _local_add($9, $14);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _new_colon2($p, $b, $c) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$b;
 $3=$c;
 var $4=$1;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=(($7 << 16) >> 16);
 var $9=$8;
 var $10=_cons_gen($5, $6, $9);
 var $11=_cons_gen($4, 77, $10);
 return $11;
}
function _new_colon3($p, $c) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$c;
 var $3=$1;
 var $4=$2;
 var $5=(($4 << 16) >> 16);
 var $6=$5;
 var $7=_cons_gen($3, 78, $6);
 return $7;
}
function _new_undef($p, $sym) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$sym;
 var $3=$1;
 var $4=$2;
 var $5=(($4 << 16) >> 16);
 var $6=$5;
 var $7=_list2_gen($3, 73, $6);
 return $7;
}
function _intern_gen_c($p, $c) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2=sp;
 $1=$p;
 HEAP8[($2)]=$c;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_mrb_intern2($5, $2, 1);
 STACKTOP = sp;
 return $6;
}
function _new_dot2($p, $a, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$a;
 $3=$b;
 var $4=$1;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=_cons_gen($5, $6, $7);
 var $9=_cons_gen($4, 80, $8);
 return $9;
}
function _new_dot3($p, $a, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$a;
 $3=$b;
 var $4=$1;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=_cons_gen($5, $6, $7);
 var $9=_cons_gen($4, 81, $8);
 return $9;
}
function _call_bin_op($p, $recv, $m, $arg1) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$p;
 $2=$recv;
 $3=$m;
 $4=$arg1;
 var $5=$1;
 var $6=$2;
 var $7=$1;
 var $8=$3;
 var $9=_intern_gen($7, $8);
 var $10=$1;
 var $11=$1;
 var $12=$4;
 var $13=_list1_gen($11, $12);
 var $14=_list1_gen($10, $13);
 var $15=_new_call($5, $6, $9, $14);
 return $15;
}
function _new_hash($p, $a) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$a;
 var $3=$1;
 var $4=$2;
 var $5=_cons_gen($3, 36, $4);
 return $5;
}
function _new_block_arg($p, $a) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$a;
 var $3=$1;
 var $4=$2;
 var $5=_cons_gen($3, 69, $4);
 return $5;
}
function _new_splat($p, $a) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$a;
 var $3=$1;
 var $4=$2;
 var $5=_cons_gen($3, 66, $4);
 return $5;
}
function _call_with_block($p, $a, $b) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $n;
   $1=$p;
   $2=$a;
   $3=$b;
   var $4=$2;
   var $5=(($4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==32;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $9=$2;
   var $10=(($9)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))==33;
   if ($12) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $14=$2;
   var $15=(($14+4)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))!=0;
   if ($17) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $19=$1;
   var $20=$3;
   var $21=_cons_gen($19, 0, $20);
   var $22=$2;
   var $23=(($22+4)|0);
   HEAP32[(($23)>>2)]=$21;
   label = 6; break;
  case 5: 
   var $25=$1;
   var $26=$2;
   var $27=(($26+4)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=$3;
   _args_with_block($25, $28, $29);
   label = 6; break;
  case 6: 
   label = 11; break;
  case 7: 
   var $32=$2;
   var $33=(($32+4)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34+4)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36+4)|0);
   var $38=HEAP32[(($37)>>2)];
   $n=$38;
   var $39=$n;
   var $40=(($39)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($41)|(0))!=0;
   if ($42) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $44=$1;
   var $45=$3;
   var $46=_cons_gen($44, 0, $45);
   var $47=$n;
   var $48=(($47)|0);
   HEAP32[(($48)>>2)]=$46;
   label = 10; break;
  case 9: 
   var $50=$1;
   var $51=$n;
   var $52=(($51)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=$3;
   _args_with_block($50, $53, $54);
   label = 10; break;
  case 10: 
   label = 11; break;
  case 11: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _new_lambda($p, $a, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$a;
 $3=$b;
 var $4=$1;
 var $5=$1;
 var $6=(($5+76)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$2;
 var $11=$3;
 var $12=_list4_gen($4, 53, $9, $10, $11);
 return $12;
}
function _new_case($p, $a, $b) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $n;
   var $n2;
   $1=$p;
   $2=$a;
   $3=$b;
   var $4=$1;
   var $5=$2;
   var $6=_list2_gen($4, 6, $5);
   $n=$6;
   var $7=$n;
   $n2=$7;
   label = 2; break;
  case 2: 
   var $9=$n2;
   var $10=(($9+4)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))!=0;
   if ($12) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $14=$n2;
   var $15=(($14+4)|0);
   var $16=HEAP32[(($15)>>2)];
   $n2=$16;
   label = 2; break;
  case 4: 
   var $18=$3;
   var $19=$n2;
   var $20=(($19+4)|0);
   HEAP32[(($20)>>2)]=$18;
   var $21=$n;
   return $21;
  default: assert(0, "bad label: " + label);
 }
}
function _new_for($p, $v, $o, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$p;
 $2=$v;
 $3=$o;
 $4=$b;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=$4;
 var $9=_list4_gen($5, 12, $6, $7, $8);
 return $9;
}
function _new_class($p, $c, $s, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$p;
 $2=$c;
 $3=$s;
 $4=$b;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=$1;
 var $9=$1;
 var $10=(($9+76)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$4;
 var $15=_cons_gen($8, $13, $14);
 var $16=_list4_gen($5, 74, $6, $7, $15);
 return $16;
}
function _new_sclass($p, $o, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$o;
 $3=$b;
 var $4=$1;
 var $5=$2;
 var $6=$1;
 var $7=$1;
 var $8=(($7+76)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$3;
 var $13=_cons_gen($6, $11, $12);
 var $14=_list3_gen($4, 76, $5, $13);
 return $14;
}
function _new_module($p, $m, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$m;
 $3=$b;
 var $4=$1;
 var $5=$2;
 var $6=$1;
 var $7=$1;
 var $8=(($7+76)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$3;
 var $13=_cons_gen($6, $11, $12);
 var $14=_list3_gen($4, 75, $5, $13);
 return $14;
}
function _new_def($p, $m, $a, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$p;
 $2=$m;
 $3=$a;
 $4=$b;
 var $5=$1;
 var $6=$2;
 var $7=(($6 << 16) >> 16);
 var $8=$7;
 var $9=$1;
 var $10=(($9+76)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$3;
 var $15=$4;
 var $16=_list5_gen($5, 70, $8, $13, $14, $15);
 return $16;
}
function _new_sdef($p, $o, $m, $a, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$p;
 $2=$o;
 $3=$m;
 $4=$a;
 $5=$b;
 var $6=$1;
 var $7=$2;
 var $8=$3;
 var $9=(($8 << 16) >> 16);
 var $10=$9;
 var $11=$1;
 var $12=(($11+76)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$4;
 var $17=$5;
 var $18=_list6_gen($6, 71, $7, $10, $15, $16, $17);
 return $18;
}
function _new_redo($p) {
 var label = 0;
 var $1;
 $1=$p;
 var $2=$1;
 var $3=_list1_gen($2, 15);
 return $3;
}
function _new_retry($p) {
 var label = 0;
 var $1;
 $1=$p;
 var $2=$1;
 var $3=_list1_gen($2, 16);
 return $3;
}
function _new_arg($p, $sym) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$sym;
 var $3=$1;
 var $4=$2;
 var $5=(($4 << 16) >> 16);
 var $6=$5;
 var $7=_cons_gen($3, 63, $6);
 return $7;
}
function _new_args($p, $m, $opt, $rest, $m2, $blk) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $n;
 $1=$p;
 $2=$m;
 $3=$opt;
 $4=$rest;
 $5=$m2;
 $6=$blk;
 var $7=$1;
 var $8=$5;
 var $9=$6;
 var $10=(($9 << 16) >> 16);
 var $11=$10;
 var $12=_cons_gen($7, $8, $11);
 $n=$12;
 var $13=$1;
 var $14=$4;
 var $15=(($14 << 16) >> 16);
 var $16=$15;
 var $17=$n;
 var $18=_cons_gen($13, $16, $17);
 $n=$18;
 var $19=$1;
 var $20=$3;
 var $21=$n;
 var $22=_cons_gen($19, $20, $21);
 $n=$22;
 var $23=$1;
 var $24=$2;
 var $25=$n;
 var $26=_cons_gen($23, $24, $25);
 return $26;
}
function _local_add_f($p, $sym) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$sym;
 var $3=$1;
 var $4=$1;
 var $5=(($4+76)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$1;
 var $10=$2;
 var $11=(($10 << 16) >> 16);
 var $12=$11;
 var $13=_list1_gen($9, $12);
 var $14=_append_gen($3, $8, $13);
 var $15=$1;
 var $16=(($15+76)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 HEAP32[(($18)>>2)]=$14;
 return;
}
function _new_zsuper($p) {
 var label = 0;
 var $1;
 $1=$p;
 var $2=$1;
 var $3=_list1_gen($2, 33);
 return $3;
}
function _new_dstr($p, $a) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$a;
 var $3=$1;
 var $4=$2;
 var $5=_cons_gen($3, 56, $4);
 return $5;
}
function _new_literal_delim($p) {
 var label = 0;
 var $1;
 $1=$p;
 var $2=$1;
 var $3=_cons_gen($2, 100, 0);
 return $3;
}
function _new_dxstr($p, $a) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$a;
 var $3=$1;
 var $4=$2;
 var $5=_cons_gen($3, 58, $4);
 return $5;
}
function _new_dregx($p, $a, $b) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$a;
 $3=$b;
 var $4=$1;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 var $8=_cons_gen($5, $6, $7);
 var $9=_cons_gen($4, 60, $8);
 return $9;
}
function _new_str($p, $s, $len) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$s;
 $3=$len;
 var $4=$1;
 var $5=$1;
 var $6=$1;
 var $7=$2;
 var $8=$3;
 var $9=_parser_strndup($6, $7, $8);
 var $10=$9;
 var $11=$3;
 var $12=$11;
 var $13=_cons_gen($5, $10, $12);
 var $14=_cons_gen($4, 55, $13);
 return $14;
}
function _heredoc_end($p) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$p;
   var $2=$1;
   var $3=(($2+1116)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$1;
   var $8=(($7+1116)|0);
   HEAP32[(($8)>>2)]=$6;
   var $9=$1;
   var $10=(($9+1116)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))==0;
   if ($12) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $14=$1;
   var $15=(($14+40)|0);
   HEAP32[(($15)>>2)]=0;
   var $16=$1;
   var $17=(($16+72)|0);
   HEAP32[(($17)>>2)]=1;
   var $18=$1;
   _end_strterm($18);
   var $19=$1;
   var $20=$19;
   var $21=(($20+1120)|0);
   var $22=HEAP8[($21)];
   var $23=$22 & -3;
   var $24=$23 | 2;
   HEAP8[($21)]=$24;
   label = 4; break;
  case 3: 
   var $26=$1;
   var $27=_parsing_heredoc_inf($26);
   var $28=(($27+4)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$29;
   var $31=$1;
   var $32=(($31+44)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33)|0);
   HEAP32[(($34)>>2)]=$30;
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _new_words($p, $a) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$a;
 var $3=$1;
 var $4=$2;
 var $5=_cons_gen($3, 101, $4);
 return $5;
}
function _new_sym($p, $sym) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$sym;
 var $3=$1;
 var $4=$2;
 var $5=(($4 << 16) >> 16);
 var $6=$5;
 var $7=_cons_gen($3, 54, $6);
 return $7;
}
function _new_dsym($p, $a) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$a;
 var $3=$1;
 var $4=$1;
 var $5=$2;
 var $6=_new_dstr($4, $5);
 var $7=_cons_gen($3, 97, $6);
 return $7;
}
function _new_strsym($p, $str) {
 var label = 0;
 var $1;
 var $2;
 var $s;
 var $len;
 $1=$p;
 $2=$str;
 var $3=$2;
 var $4=(($3+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 $s=$8;
 var $9=$2;
 var $10=(($9+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$13;
 $len=$14;
 var $15=$1;
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$s;
 var $19=$len;
 var $20=_mrb_intern2($17, $18, $19);
 return $20;
}
function _new_symbols($p, $a) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$a;
 var $3=$1;
 var $4=$2;
 var $5=_cons_gen($3, 102, $4);
 return $5;
}
function _negate_lit($p, $n) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$n;
 var $3=$1;
 var $4=$2;
 var $5=_cons_gen($3, 52, $4);
 return $5;
}
function _new_lvar($p, $sym) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$sym;
 var $3=$1;
 var $4=$2;
 var $5=(($4 << 16) >> 16);
 var $6=$5;
 var $7=_cons_gen($3, 39, $6);
 return $7;
}
function _new_ivar($p, $sym) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$sym;
 var $3=$1;
 var $4=$2;
 var $5=(($4 << 16) >> 16);
 var $6=$5;
 var $7=_cons_gen($3, 42, $6);
 return $7;
}
function _new_gvar($p, $sym) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$sym;
 var $3=$1;
 var $4=$2;
 var $5=(($4 << 16) >> 16);
 var $6=$5;
 var $7=_cons_gen($3, 41, $6);
 return $7;
}
function _new_cvar($p, $sym) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$sym;
 var $3=$1;
 var $4=$2;
 var $5=(($4 << 16) >> 16);
 var $6=$5;
 var $7=_cons_gen($3, 44, $6);
 return $7;
}
function _new_const($p, $sym) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$sym;
 var $3=$1;
 var $4=$2;
 var $5=(($4 << 16) >> 16);
 var $6=$5;
 var $7=_cons_gen($3, 43, $6);
 return $7;
}
function _var_reference($p, $lhs) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $n;
   $2=$p;
   $3=$lhs;
   var $4=$3;
   var $5=(($4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$6;
   var $8=(($7)|(0))==39;
   if ($8) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $10=$2;
   var $11=$3;
   var $12=(($11+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$13;
   var $15=(($14) & 65535);
   var $16=_local_var_p($10, $15);
   var $17=(($16)|(0))!=0;
   if ($17) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $19=$2;
   var $20=$3;
   var $21=(($20+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$22;
   var $24=(($23) & 65535);
   var $25=_new_fcall($19, $24, 0);
   $n=$25;
   var $26=$2;
   var $27=$3;
   _cons_free_gen($26, $27);
   var $28=$n;
   $1=$28;
   label = 6; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $31=$3;
   $1=$31;
   label = 6; break;
  case 6: 
   var $33=$1;
   return $33;
  default: assert(0, "bad label: " + label);
 }
}
function _new_self($p) {
 var label = 0;
 var $1;
 $1=$p;
 var $2=$1;
 var $3=_list1_gen($2, 85);
 return $3;
}
function _new_true($p) {
 var label = 0;
 var $1;
 $1=$p;
 var $2=$1;
 var $3=_list1_gen($2, 87);
 return $3;
}
function _new_false($p) {
 var label = 0;
 var $1;
 $1=$p;
 var $2=$1;
 var $3=_list1_gen($2, 88);
 return $3;
}
function _new_int($p, $s, $base) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$s;
 $3=$base;
 var $4=$1;
 var $5=$1;
 var $6=$2;
 var $7=_parser_strdup($5, $6);
 var $8=$7;
 var $9=$3;
 var $10=$9;
 var $11=_list3_gen($4, 50, $8, $10);
 return $11;
}
function _yy_stack_print($yybottom, $yytop) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $yybot;
   $1=$yybottom;
   $2=$yytop;
   var $3=HEAP32[((_stderr)>>2)];
   var $4=_fprintf($3, ((90332)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 2; break;
  case 2: 
   var $6=$1;
   var $7=$2;
   var $8=(($6)>>>(0)) <= (($7)>>>(0));
   if ($8) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $10=$1;
   var $11=HEAP16[(($10)>>1)];
   var $12=(($11 << 16) >> 16);
   $yybot=$12;
   var $13=HEAP32[((_stderr)>>2)];
   var $14=$yybot;
   var $15=_fprintf($13, ((90328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$14,tempInt));
   label = 4; break;
  case 4: 
   var $17=$1;
   var $18=(($17+2)|0);
   $1=$18;
   label = 2; break;
  case 5: 
   var $20=HEAP32[((_stderr)>>2)];
   var $21=_fprintf($20, ((88316)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _yysyntax_error($yymsg_alloc, $yymsg, $yyssp, $yytoken) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $yysize0;
   var $yysize;
   var $yysize1;
   var $yyformat;
   var $yyarg=sp;
   var $yycount;
   var $yyn;
   var $yyxbegin;
   var $yychecklim;
   var $yyxend;
   var $yyx;
   var $yyp;
   var $yyi;
   $2=$yymsg_alloc;
   $3=$yymsg;
   $4=$yyssp;
   $5=$yytoken;
   var $6=$5;
   var $7=((384+($6<<2))|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=_yytnamerr(0, $8);
   $yysize0=$9;
   var $10=$yysize0;
   $yysize=$10;
   $yyformat=0;
   $yycount=0;
   var $11=$5;
   var $12=(($11)|(0))!=-2;
   if ($12) { label = 2; break; } else { label = 24; break; }
  case 2: 
   var $14=$4;
   var $15=HEAP16[(($14)>>1)];
   var $16=(($15 << 16) >> 16);
   var $17=((32852+($16<<1))|0);
   var $18=HEAP16[(($17)>>1)];
   var $19=(($18 << 16) >> 16);
   $yyn=$19;
   var $20=$5;
   var $21=((384+($20<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$yycount;
   var $24=((($23)+(1))|0);
   $yycount=$24;
   var $25=(($yyarg+($23<<2))|0);
   HEAP32[(($25)>>2)]=$22;
   var $26=$yyn;
   var $27=(($26)|(0))==-745;
   if ($27) { label = 23; break; } else { label = 3; break; }
  case 3: 
   var $29=$yyn;
   var $30=(($29)|(0)) < 0;
   if ($30) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $32=$yyn;
   var $33=(((-$32))|0);
   var $36 = $33;label = 6; break;
  case 5: 
   var $36 = 0;label = 6; break;
  case 6: 
   var $36;
   $yyxbegin=$36;
   var $37=$yyn;
   var $38=(((10895)-($37))|0);
   var $39=((($38)+(1))|0);
   $yychecklim=$39;
   var $40=$yychecklim;
   var $41=(($40)|(0)) < 151;
   if ($41) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $43=$yychecklim;
   var $46 = $43;label = 9; break;
  case 8: 
   var $46 = 151;label = 9; break;
  case 9: 
   var $46;
   $yyxend=$46;
   var $47=$yyxbegin;
   $yyx=$47;
   label = 10; break;
  case 10: 
   var $49=$yyx;
   var $50=$yyxend;
   var $51=(($49)|(0)) < (($50)|(0));
   if ($51) { label = 11; break; } else { label = 22; break; }
  case 11: 
   var $53=$yyx;
   var $54=$yyn;
   var $55=((($53)+($54))|0);
   var $56=((36984+($55<<1))|0);
   var $57=HEAP16[(($56)>>1)];
   var $58=(($57 << 16) >> 16);
   var $59=$yyx;
   var $60=(($58)|(0))==(($59)|(0));
   if ($60) { label = 12; break; } else { label = 20; break; }
  case 12: 
   var $62=$yyx;
   var $63=(($62)|(0))!=1;
   if ($63) { label = 13; break; } else { label = 20; break; }
  case 13: 
   var $65=$yyx;
   var $66=$yyn;
   var $67=((($65)+($66))|0);
   var $68=((1608+($67<<1))|0);
   var $69=HEAP16[(($68)>>1)];
   var $70=(($69 << 16) >> 16);
   var $71=(($70)|(0))==-545;
   if ($71) { label = 20; break; } else { label = 14; break; }
  case 14: 
   var $73=$yycount;
   var $74=(($73)|(0))==5;
   if ($74) { label = 15; break; } else { label = 16; break; }
  case 15: 
   $yycount=1;
   var $76=$yysize0;
   $yysize=$76;
   label = 22; break;
  case 16: 
   var $78=$yyx;
   var $79=((384+($78<<2))|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=$yycount;
   var $82=((($81)+(1))|0);
   $yycount=$82;
   var $83=(($yyarg+($81<<2))|0);
   HEAP32[(($83)>>2)]=$80;
   var $84=$yysize;
   var $85=$yyx;
   var $86=((384+($85<<2))|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=_yytnamerr(0, $87);
   var $89=((($84)+($88))|0);
   $yysize1=$89;
   var $90=$yysize;
   var $91=$yysize1;
   var $92=(($90)>>>(0)) <= (($91)>>>(0));
   if ($92) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $94=$yysize1;
   var $95=(($94)>>>(0)) <= 4294967295;
   if ($95) { label = 19; break; } else { label = 18; break; }
  case 18: 
   $1=2;
   label = 48; break;
  case 19: 
   var $98=$yysize1;
   $yysize=$98;
   label = 20; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $101=$yyx;
   var $102=((($101)+(1))|0);
   $yyx=$102;
   label = 10; break;
  case 22: 
   label = 23; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $106=$yycount;
   if ((($106)|(0))==0) {
    label = 25; break;
   }
   else if ((($106)|(0))==1) {
    label = 26; break;
   }
   else if ((($106)|(0))==2) {
    label = 27; break;
   }
   else if ((($106)|(0))==3) {
    label = 28; break;
   }
   else if ((($106)|(0))==4) {
    label = 29; break;
   }
   else if ((($106)|(0))==5) {
    label = 30; break;
   }
   else {
   label = 31; break;
   }
  case 25: 
   $yyformat=((90352)|0);
   label = 31; break;
  case 26: 
   $yyformat=((98748)|0);
   label = 31; break;
  case 27: 
   $yyformat=((98680)|0);
   label = 31; break;
  case 28: 
   $yyformat=((98628)|0);
   label = 31; break;
  case 29: 
   $yyformat=((98524)|0);
   label = 31; break;
  case 30: 
   $yyformat=((98444)|0);
   label = 31; break;
  case 31: 
   var $114=$yysize;
   var $115=$yyformat;
   var $116=_yystrlen($115);
   var $117=((($114)+($116))|0);
   $yysize1=$117;
   var $118=$yysize;
   var $119=$yysize1;
   var $120=(($118)>>>(0)) <= (($119)>>>(0));
   if ($120) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $122=$yysize1;
   var $123=(($122)>>>(0)) <= 4294967295;
   if ($123) { label = 34; break; } else { label = 33; break; }
  case 33: 
   $1=2;
   label = 48; break;
  case 34: 
   var $126=$yysize1;
   $yysize=$126;
   var $127=$2;
   var $128=HEAP32[(($127)>>2)];
   var $129=$yysize;
   var $130=(($128)>>>(0)) < (($129)>>>(0));
   if ($130) { label = 35; break; } else { label = 39; break; }
  case 35: 
   var $132=$yysize;
   var $133=($132<<1);
   var $134=$2;
   HEAP32[(($134)>>2)]=$133;
   var $135=$yysize;
   var $136=$2;
   var $137=HEAP32[(($136)>>2)];
   var $138=(($135)>>>(0)) <= (($137)>>>(0));
   if ($138) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $140=$2;
   var $141=HEAP32[(($140)>>2)];
   var $142=(($141)>>>(0)) <= 4294967295;
   if ($142) { label = 38; break; } else { label = 37; break; }
  case 37: 
   var $144=$2;
   HEAP32[(($144)>>2)]=-1;
   label = 38; break;
  case 38: 
   $1=1;
   label = 48; break;
  case 39: 
   var $147=$3;
   var $148=HEAP32[(($147)>>2)];
   $yyp=$148;
   $yyi=0;
   label = 40; break;
  case 40: 
   var $150=$yyformat;
   var $151=HEAP8[($150)];
   var $152=$yyp;
   HEAP8[($152)]=$151;
   var $153=(($151 << 24) >> 24);
   var $154=(($153)|(0))!=0;
   if ($154) { label = 41; break; } else { label = 47; break; }
  case 41: 
   var $156=$yyp;
   var $157=HEAP8[($156)];
   var $158=(($157 << 24) >> 24);
   var $159=(($158)|(0))==37;
   if ($159) { label = 42; break; } else { label = 45; break; }
  case 42: 
   var $161=$yyformat;
   var $162=(($161+1)|0);
   var $163=HEAP8[($162)];
   var $164=(($163 << 24) >> 24);
   var $165=(($164)|(0))==115;
   if ($165) { label = 43; break; } else { label = 45; break; }
  case 43: 
   var $167=$yyi;
   var $168=$yycount;
   var $169=(($167)|(0)) < (($168)|(0));
   if ($169) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $171=$yyp;
   var $172=$yyi;
   var $173=((($172)+(1))|0);
   $yyi=$173;
   var $174=(($yyarg+($172<<2))|0);
   var $175=HEAP32[(($174)>>2)];
   var $176=_yytnamerr($171, $175);
   var $177=$yyp;
   var $178=(($177+$176)|0);
   $yyp=$178;
   var $179=$yyformat;
   var $180=(($179+2)|0);
   $yyformat=$180;
   label = 46; break;
  case 45: 
   var $182=$yyp;
   var $183=(($182+1)|0);
   $yyp=$183;
   var $184=$yyformat;
   var $185=(($184+1)|0);
   $yyformat=$185;
   label = 46; break;
  case 46: 
   label = 40; break;
  case 47: 
   $1=0;
   label = 48; break;
  case 48: 
   var $189=$1;
   STACKTOP = sp;
   return $189;
  default: assert(0, "bad label: " + label);
 }
}
function _yydestruct($yymsg, $yytype, $yyvaluep, $p) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$yymsg;
   $2=$yytype;
   $3=$yyvaluep;
   $4=$p;
   var $5=$3;
   var $6=$4;
   var $7=$1;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=((98784)|0);
   label = 3; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $12=HEAP32[((106276)>>2)];
   var $13=(($12)|(0))!=0;
   if ($13) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $15=HEAP32[((_stderr)>>2)];
   var $16=$1;
   var $17=_fprintf($15, ((91620)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$16,tempInt));
   var $18=HEAP32[((_stderr)>>2)];
   var $19=$2;
   var $20=$3;
   var $21=$4;
   _yy_symbol_print($18, $19, $20, $21);
   var $22=HEAP32[((_stderr)>>2)];
   var $23=_fprintf($22, ((88316)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 6; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $26=$2;
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_parser_parse($p, $c) {
 var label = 0;
 label = 1; 
 var mySetjmpIds = {};
 var setjmpTable = {"1": function(value) { label = 9; $6 = value },dummy: 0};
 while(1) try { switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$p;
   $2=$c;
   var $3=$1;
   var $4=(($3+1384)|0);
   var $5=(($4)|0);
   var $6=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($5)>>2)]=tempInt, 0);
   label = 9; break;
  case 9: 
   var $7=(($6)|(0))!=0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$1;
   _yyerror($9, ((89260)|0));
   var $10=$1;
   var $11=(($10+1128)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=((($12)+(1))|0);
   HEAP32[(($11)>>2)]=$13;
   var $14=$1;
   var $15=(($14+1136)|0);
   HEAP32[(($15)>>2)]=0;
   label = 8; break;
  case 3: 
   var $17=$1;
   var $18=(($17+72)|0);
   HEAP32[(($18)>>2)]=1;
   var $19=$1;
   var $20=(($19+68)|0);
   HEAP32[(($20)>>2)]=0;
   var $21=$1;
   var $22=(($21+64)|0);
   HEAP32[(($22)>>2)]=0;
   var $23=$1;
   var $24=(($23+1132)|0);
   HEAP32[(($24)>>2)]=0;
   var $25=$1;
   var $26=(($25+1128)|0);
   HEAP32[(($26)>>2)]=0;
   var $27=$1;
   var $28=(($27+44)|0);
   HEAP32[(($28)>>2)]=0;
   var $29=$1;
   var $30=$2;
   _parser_init_cxt($29, $30);
   var $31=$1;
   var $32=_yyparse($31);
   var $33=$1;
   var $34=(($33+1136)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35)|(0))!=0;
   if ($36) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $38=$1;
   var $39=_new_nil($38);
   var $40=$1;
   var $41=(($40+1136)|0);
   HEAP32[(($41)>>2)]=$39;
   label = 5; break;
  case 5: 
   var $43=$1;
   var $44=$2;
   _parser_update_cxt($43, $44);
   var $45=$2;
   var $46=(($45)|(0))!=0;
   if ($46) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $48=$2;
   var $49=$48;
   var $50=(($49+24)|0);
   var $51=HEAP8[($50)];
   var $52=(($51)&(255)) >>> 1;
   var $53=$52 & 1;
   var $54=(($53)&(255));
   var $55=(($54)|(0))!=0;
   if ($55) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $57=$1;
   var $58=(($57)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=$1;
   var $61=(($60+1136)|0);
   var $62=HEAP32[(($61)>>2)];
   _parser_dump($59, $62, 0);
   label = 8; break;
  case 8: 
   return;
  default: assert(0, "bad label: " + label);
 }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function _parser_init_cxt($p, $cxt) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $i;
   $1=$p;
   $2=$cxt;
   var $3=$2;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 15; break;
  case 3: 
   var $7=$2;
   var $8=(($7+12)|0);
   var $9=HEAP16[(($8)>>1)];
   var $10=(($9 << 16) >> 16)!=0;
   if ($10) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $12=$2;
   var $13=(($12+12)|0);
   var $14=HEAP16[(($13)>>1)];
   var $15=(($14 << 16) >> 16);
   var $16=$1;
   var $17=(($16+32)|0);
   HEAP32[(($17)>>2)]=$15;
   label = 5; break;
  case 5: 
   var $19=$2;
   var $20=(($19+8)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21)|(0))!=0;
   if ($22) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $24=$2;
   var $25=(($24+8)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$1;
   var $28=(($27+28)|0);
   HEAP32[(($28)>>2)]=$26;
   label = 7; break;
  case 7: 
   var $30=$2;
   var $31=(($30)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)|(0))!=0;
   if ($33) { label = 8; break; } else { label = 13; break; }
  case 8: 
   var $35=$1;
   var $36=_cons_gen($35, 0, 0);
   var $37=$1;
   var $38=(($37+76)|0);
   HEAP32[(($38)>>2)]=$36;
   $i=0;
   label = 9; break;
  case 9: 
   var $40=$i;
   var $41=$2;
   var $42=(($41+4)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($40)|(0)) < (($43)|(0));
   if ($44) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $46=$1;
   var $47=$i;
   var $48=$2;
   var $49=(($48)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($50+($47<<1))|0);
   var $52=HEAP16[(($51)>>1)];
   _local_add_f($46, $52);
   label = 11; break;
  case 11: 
   var $54=$i;
   var $55=((($54)+(1))|0);
   $i=$55;
   label = 9; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $58=$2;
   var $59=$58;
   var $60=(($59+24)|0);
   var $61=HEAP8[($60)];
   var $62=$61 & 1;
   var $63=(($62)&(255));
   var $64=$1;
   var $65=(($64+1140)|0);
   HEAP32[(($65)>>2)]=$63;
   var $66=$2;
   var $67=(($66+16)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=(($68)|(0))!=0;
   if ($69) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $71=$2;
   var $72=$1;
   var $73=(($72+24)|0);
   HEAP32[(($73)>>2)]=$71;
   label = 15; break;
  case 15: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _parser_update_cxt($p, $cxt) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $n;
   var $n0;
   var $i;
   $1=$p;
   $2=$cxt;
   $i=0;
   var $3=$2;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 12; break;
  case 3: 
   var $7=$1;
   var $8=(($7+1136)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$11;
   var $13=(($12)|(0))!=3;
   if ($13) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 12; break;
  case 5: 
   var $16=$1;
   var $17=(($16+1136)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18+4)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|0);
   var $22=HEAP32[(($21)>>2)];
   $n=$22;
   $n0=$22;
   label = 6; break;
  case 6: 
   var $24=$n;
   var $25=(($24)|(0))!=0;
   if ($25) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $27=$i;
   var $28=((($27)+(1))|0);
   $i=$28;
   var $29=$n;
   var $30=(($29+4)|0);
   var $31=HEAP32[(($30)>>2)];
   $n=$31;
   label = 6; break;
  case 8: 
   var $33=$1;
   var $34=(($33)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$2;
   var $37=(($36)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=$38;
   var $40=$i;
   var $41=($40<<1);
   var $42=_mrb_realloc($35, $39, $41);
   var $43=$42;
   var $44=$2;
   var $45=(($44)|0);
   HEAP32[(($45)>>2)]=$43;
   var $46=$i;
   var $47=$2;
   var $48=(($47+4)|0);
   HEAP32[(($48)>>2)]=$46;
   $i=0;
   var $49=$n0;
   $n=$49;
   label = 9; break;
  case 9: 
   var $51=$n;
   var $52=(($51)|(0))!=0;
   if ($52) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $54=$n;
   var $55=(($54)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=$56;
   var $58=(($57) & 65535);
   var $59=$i;
   var $60=$2;
   var $61=(($60)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62+($59<<1))|0);
   HEAP16[(($63)>>1)]=$58;
   label = 11; break;
  case 11: 
   var $65=$i;
   var $66=((($65)+(1))|0);
   $i=$66;
   var $67=$n;
   var $68=(($67+4)|0);
   var $69=HEAP32[(($68)>>2)];
   $n=$69;
   label = 9; break;
  case 12: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _parser_dump($mrb, $tree, $offset) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $n;
   var $n2;
   var $n3;
   var $n1;
   var $n22;
   var $n23;
   var $n24;
   var $n25;
   var $t;
   var $n26;
   var $n7;
   var $n28;
   var $n9;
   var $n210;
   $1=$mrb;
   $2=$tree;
   $3=$offset;
   var $4=$2;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 212; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $9=$3;
   _dump_prefix($9);
   var $10=$2;
   var $11=(($10)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$12;
   $n=$13;
   var $14=$2;
   var $15=(($14+4)|0);
   var $16=HEAP32[(($15)>>2)];
   $2=$16;
   var $17=$n;
   if ((($17)|(0))==17) {
    label = 5; break;
   }
   else if ((($17)|(0))==18) {
    label = 6; break;
   }
   else if ((($17)|(0))==19) {
    label = 22; break;
   }
   else if ((($17)|(0))==53) {
    label = 23; break;
   }
   else if ((($17)|(0))==4) {
    label = 24; break;
   }
   else if ((($17)|(0))==5) {
    label = 41; break;
   }
   else if ((($17)|(0))==20) {
    label = 44; break;
   }
   else if ((($17)|(0))==21) {
    label = 45; break;
   }
   else if ((($17)|(0))==6) {
    label = 46; break;
   }
   else if ((($17)|(0))==9) {
    label = 52; break;
   }
   else if ((($17)|(0))==10) {
    label = 53; break;
   }
   else if ((($17)|(0))==12) {
    label = 54; break;
   }
   else if ((($17)|(0))==3) {
    label = 65; break;
   }
   else if ((($17)|(0))==30 | (($17)|(0))==29) {
    label = 77; break;
   }
   else if ((($17)|(0))==80) {
    label = 82; break;
   }
   else if ((($17)|(0))==81) {
    label = 83; break;
   }
   else if ((($17)|(0))==77) {
    label = 84; break;
   }
   else if ((($17)|(0))==78) {
    label = 85; break;
   }
   else if ((($17)|(0))==34) {
    label = 86; break;
   }
   else if ((($17)|(0))==36) {
    label = 87; break;
   }
   else if ((($17)|(0))==66) {
    label = 91; break;
   }
   else if ((($17)|(0))==24) {
    label = 92; break;
   }
   else if ((($17)|(0))==23) {
    label = 93; break;
   }
   else if ((($17)|(0))==28) {
    label = 107; break;
   }
   else if ((($17)|(0))==32) {
    label = 108; break;
   }
   else if ((($17)|(0))==33) {
    label = 113; break;
   }
   else if ((($17)|(0))==37) {
    label = 114; break;
   }
   else if ((($17)|(0))==38) {
    label = 115; break;
   }
   else if ((($17)|(0))==13) {
    label = 116; break;
   }
   else if ((($17)|(0))==14) {
    label = 117; break;
   }
   else if ((($17)|(0))==15) {
    label = 118; break;
   }
   else if ((($17)|(0))==16) {
    label = 119; break;
   }
   else if ((($17)|(0))==39) {
    label = 120; break;
   }
   else if ((($17)|(0))==41) {
    label = 121; break;
   }
   else if ((($17)|(0))==42) {
    label = 122; break;
   }
   else if ((($17)|(0))==44) {
    label = 123; break;
   }
   else if ((($17)|(0))==43) {
    label = 124; break;
   }
   else if ((($17)|(0))==47) {
    label = 125; break;
   }
   else if ((($17)|(0))==46) {
    label = 126; break;
   }
   else if ((($17)|(0))==45) {
    label = 127; break;
   }
   else if ((($17)|(0))==63) {
    label = 128; break;
   }
   else if ((($17)|(0))==69) {
    label = 129; break;
   }
   else if ((($17)|(0))==50) {
    label = 130; break;
   }
   else if ((($17)|(0))==51) {
    label = 131; break;
   }
   else if ((($17)|(0))==52) {
    label = 132; break;
   }
   else if ((($17)|(0))==55) {
    label = 133; break;
   }
   else if ((($17)|(0))==56) {
    label = 134; break;
   }
   else if ((($17)|(0))==57) {
    label = 135; break;
   }
   else if ((($17)|(0))==58) {
    label = 136; break;
   }
   else if ((($17)|(0))==59) {
    label = 137; break;
   }
   else if ((($17)|(0))==60) {
    label = 138; break;
   }
   else if ((($17)|(0))==54) {
    label = 139; break;
   }
   else if ((($17)|(0))==85) {
    label = 140; break;
   }
   else if ((($17)|(0))==86) {
    label = 141; break;
   }
   else if ((($17)|(0))==87) {
    label = 142; break;
   }
   else if ((($17)|(0))==88) {
    label = 143; break;
   }
   else if ((($17)|(0))==72) {
    label = 144; break;
   }
   else if ((($17)|(0))==73) {
    label = 145; break;
   }
   else if ((($17)|(0))==74) {
    label = 149; break;
   }
   else if ((($17)|(0))==75) {
    label = 158; break;
   }
   else if ((($17)|(0))==76) {
    label = 165; break;
   }
   else if ((($17)|(0))==70) {
    label = 166; break;
   }
   else if ((($17)|(0))==71) {
    label = 193; break;
   }
   else if ((($17)|(0))==91) {
    label = 209; break;
   }
   else if ((($17)|(0))==99) {
    label = 210; break;
   }
   else {
   label = 211; break;
   }
  case 5: 
   var $19=_printf(((89172)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $20=$1;
   var $21=$2;
   var $22=$3;
   var $23=((($22)+(1))|0);
   _dump_recur($20, $21, $23);
   label = 212; break;
  case 6: 
   var $25=_printf(((89080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $26=$2;
   var $27=(($26)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|(0))!=0;
   if ($29) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $31=$3;
   var $32=((($31)+(1))|0);
   _dump_prefix($32);
   var $33=_printf(((89024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $34=$1;
   var $35=$2;
   var $36=(($35)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=$3;
   var $39=((($38)+(2))|0);
   _parser_dump($34, $37, $39);
   label = 8; break;
  case 8: 
   var $41=$2;
   var $42=(($41+4)|0);
   var $43=HEAP32[(($42)>>2)];
   $2=$43;
   var $44=$2;
   var $45=(($44)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($46)|(0))!=0;
   if ($47) { label = 9; break; } else { label = 19; break; }
  case 9: 
   var $49=$2;
   var $50=(($49)|0);
   var $51=HEAP32[(($50)>>2)];
   $n2=$51;
   var $52=$3;
   var $53=((($52)+(1))|0);
   _dump_prefix($53);
   var $54=_printf(((88948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 10; break;
  case 10: 
   var $56=$n2;
   var $57=(($56)|(0))!=0;
   if ($57) { label = 11; break; } else { label = 18; break; }
  case 11: 
   var $59=$n2;
   var $60=(($59)|0);
   var $61=HEAP32[(($60)>>2)];
   $n3=$61;
   var $62=$n3;
   var $63=(($62)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64)|(0))!=0;
   if ($65) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $67=$3;
   var $68=((($67)+(2))|0);
   _dump_prefix($68);
   var $69=_printf(((88796)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $70=$1;
   var $71=$n3;
   var $72=(($71)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=$3;
   var $75=((($74)+(3))|0);
   _dump_recur($70, $73, $75);
   label = 13; break;
  case 13: 
   var $77=$n3;
   var $78=(($77+4)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($81)|(0))!=0;
   if ($82) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $84=$3;
   var $85=((($84)+(2))|0);
   _dump_prefix($85);
   var $86=_printf(((88724)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $87=$1;
   var $88=$n3;
   var $89=(($88+4)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=$3;
   var $94=((($93)+(3))|0);
   _parser_dump($87, $92, $94);
   label = 15; break;
  case 15: 
   var $96=$n3;
   var $97=(($96+4)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=(($98+4)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($100)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102)|(0))!=0;
   if ($103) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $105=$3;
   var $106=((($105)+(2))|0);
   _dump_prefix($106);
   var $107=_printf(((88628)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $108=$1;
   var $109=$n3;
   var $110=(($109+4)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=(($111+4)|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=(($113)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=$3;
   var $117=((($116)+(3))|0);
   _parser_dump($108, $115, $117);
   label = 17; break;
  case 17: 
   var $119=$n2;
   var $120=(($119+4)|0);
   var $121=HEAP32[(($120)>>2)];
   $n2=$121;
   label = 10; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $124=$2;
   var $125=(($124+4)|0);
   var $126=HEAP32[(($125)>>2)];
   $2=$126;
   var $127=$2;
   var $128=(($127)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=(($129)|(0))!=0;
   if ($130) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $132=$3;
   var $133=((($132)+(1))|0);
   _dump_prefix($133);
   var $134=_printf(((88536)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $135=$1;
   var $136=$2;
   var $137=(($136)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=$3;
   var $140=((($139)+(2))|0);
   _parser_dump($135, $138, $140);
   label = 21; break;
  case 21: 
   label = 212; break;
  case 22: 
   var $143=_printf(((88360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $144=$3;
   var $145=((($144)+(1))|0);
   _dump_prefix($145);
   var $146=_printf(((89024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $147=$1;
   var $148=$2;
   var $149=(($148)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=$3;
   var $152=((($151)+(2))|0);
   _parser_dump($147, $150, $152);
   var $153=$3;
   var $154=((($153)+(1))|0);
   _dump_prefix($154);
   var $155=_printf(((88080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $156=$1;
   var $157=$2;
   var $158=(($157+4)|0);
   var $159=HEAP32[(($158)>>2)];
   var $160=(($159+4)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=$3;
   var $163=((($162)+(2))|0);
   _parser_dump($156, $161, $163);
   label = 212; break;
  case 23: 
   var $165=_printf(((88000)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 25; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $168=_printf(((88000)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $169=$2;
   var $170=(($169+4)|0);
   var $171=HEAP32[(($170)>>2)];
   $2=$171;
   var $172=$2;
   var $173=(($172)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=(($174)|(0))!=0;
   if ($175) { label = 26; break; } else { label = 40; break; }
  case 26: 
   var $177=$2;
   var $178=(($177)|0);
   var $179=HEAP32[(($178)>>2)];
   $n1=$179;
   var $180=$n1;
   var $181=(($180)|0);
   var $182=HEAP32[(($181)>>2)];
   var $183=(($182)|(0))!=0;
   if ($183) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $185=$3;
   var $186=((($185)+(1))|0);
   _dump_prefix($186);
   var $187=_printf(((87932)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $188=$1;
   var $189=$n1;
   var $190=(($189)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192=$3;
   var $193=((($192)+(2))|0);
   _dump_recur($188, $191, $193);
   label = 28; break;
  case 28: 
   var $195=$n1;
   var $196=(($195+4)|0);
   var $197=HEAP32[(($196)>>2)];
   $n1=$197;
   var $198=$n1;
   var $199=(($198)|0);
   var $200=HEAP32[(($199)>>2)];
   var $201=(($200)|(0))!=0;
   if ($201) { label = 29; break; } else { label = 33; break; }
  case 29: 
   var $203=$3;
   var $204=((($203)+(1))|0);
   _dump_prefix($204);
   var $205=_printf(((87880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $206=$n1;
   var $207=(($206)|0);
   var $208=HEAP32[(($207)>>2)];
   $n22=$208;
   label = 30; break;
  case 30: 
   var $210=$n22;
   var $211=(($210)|(0))!=0;
   if ($211) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $213=$3;
   var $214=((($213)+(2))|0);
   _dump_prefix($214);
   var $215=$1;
   var $216=$n22;
   var $217=(($216)|0);
   var $218=HEAP32[(($217)>>2)];
   var $219=(($218)|0);
   var $220=HEAP32[(($219)>>2)];
   var $221=$220;
   var $222=(($221) & 65535);
   var $223=_mrb_sym2name($215, $222);
   var $224=_printf(((87820)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$223,tempInt));
   var $225=$1;
   var $226=$n22;
   var $227=(($226)|0);
   var $228=HEAP32[(($227)>>2)];
   var $229=(($228+4)|0);
   var $230=HEAP32[(($229)>>2)];
   _parser_dump($225, $230, 0);
   var $231=$n22;
   var $232=(($231+4)|0);
   var $233=HEAP32[(($232)>>2)];
   $n22=$233;
   label = 30; break;
  case 32: 
   label = 33; break;
  case 33: 
   var $236=$n1;
   var $237=(($236+4)|0);
   var $238=HEAP32[(($237)>>2)];
   $n1=$238;
   var $239=$n1;
   var $240=(($239)|0);
   var $241=HEAP32[(($240)>>2)];
   var $242=(($241)|(0))!=0;
   if ($242) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $244=$3;
   var $245=((($244)+(1))|0);
   _dump_prefix($245);
   var $246=$1;
   var $247=$n1;
   var $248=(($247)|0);
   var $249=HEAP32[(($248)>>2)];
   var $250=$249;
   var $251=(($250) & 65535);
   var $252=_mrb_sym2name($246, $251);
   var $253=_printf(((87712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$252,tempInt));
   label = 35; break;
  case 35: 
   var $255=$n1;
   var $256=(($255+4)|0);
   var $257=HEAP32[(($256)>>2)];
   $n1=$257;
   var $258=$n1;
   var $259=(($258)|0);
   var $260=HEAP32[(($259)>>2)];
   var $261=(($260)|(0))!=0;
   if ($261) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $263=$3;
   var $264=((($263)+(1))|0);
   _dump_prefix($264);
   var $265=_printf(((87664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $266=$1;
   var $267=$n1;
   var $268=(($267)|0);
   var $269=HEAP32[(($268)>>2)];
   var $270=$3;
   var $271=((($270)+(2))|0);
   _dump_recur($266, $269, $271);
   label = 37; break;
  case 37: 
   var $273=$n1;
   var $274=(($273+4)|0);
   var $275=HEAP32[(($274)>>2)];
   $n1=$275;
   var $276=$n1;
   var $277=(($276)|(0))!=0;
   if ($277) { label = 38; break; } else { label = 39; break; }
  case 38: 
   var $279=$3;
   var $280=((($279)+(1))|0);
   _dump_prefix($280);
   var $281=$1;
   var $282=$n1;
   var $283=$282;
   var $284=(($283) & 65535);
   var $285=_mrb_sym2name($281, $284);
   var $286=_printf(((87584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$285,tempInt));
   label = 39; break;
  case 39: 
   label = 40; break;
  case 40: 
   var $289=$3;
   var $290=((($289)+(1))|0);
   _dump_prefix($290);
   var $291=_printf(((89024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $292=$1;
   var $293=$2;
   var $294=(($293+4)|0);
   var $295=HEAP32[(($294)>>2)];
   var $296=(($295)|0);
   var $297=HEAP32[(($296)>>2)];
   var $298=$3;
   var $299=((($298)+(2))|0);
   _parser_dump($292, $297, $299);
   label = 212; break;
  case 41: 
   var $301=_printf(((87492)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $302=$3;
   var $303=((($302)+(1))|0);
   _dump_prefix($303);
   var $304=_printf(((87448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $305=$1;
   var $306=$2;
   var $307=(($306)|0);
   var $308=HEAP32[(($307)>>2)];
   var $309=$3;
   var $310=((($309)+(2))|0);
   _parser_dump($305, $308, $310);
   var $311=$3;
   var $312=((($311)+(1))|0);
   _dump_prefix($312);
   var $313=_printf(((87188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $314=$1;
   var $315=$2;
   var $316=(($315+4)|0);
   var $317=HEAP32[(($316)>>2)];
   var $318=(($317)|0);
   var $319=HEAP32[(($318)>>2)];
   var $320=$3;
   var $321=((($320)+(2))|0);
   _parser_dump($314, $319, $321);
   var $322=$2;
   var $323=(($322+4)|0);
   var $324=HEAP32[(($323)>>2)];
   var $325=(($324+4)|0);
   var $326=HEAP32[(($325)>>2)];
   var $327=(($326)|0);
   var $328=HEAP32[(($327)>>2)];
   var $329=(($328)|(0))!=0;
   if ($329) { label = 42; break; } else { label = 43; break; }
  case 42: 
   var $331=$3;
   var $332=((($331)+(1))|0);
   _dump_prefix($332);
   var $333=_printf(((88536)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $334=$1;
   var $335=$2;
   var $336=(($335+4)|0);
   var $337=HEAP32[(($336)>>2)];
   var $338=(($337+4)|0);
   var $339=HEAP32[(($338)>>2)];
   var $340=(($339)|0);
   var $341=HEAP32[(($340)>>2)];
   var $342=$3;
   var $343=((($342)+(2))|0);
   _parser_dump($334, $341, $343);
   label = 43; break;
  case 43: 
   label = 212; break;
  case 44: 
   var $346=_printf(((87152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $347=$1;
   var $348=$2;
   var $349=(($348)|0);
   var $350=HEAP32[(($349)>>2)];
   var $351=$3;
   var $352=((($351)+(1))|0);
   _parser_dump($347, $350, $352);
   var $353=$1;
   var $354=$2;
   var $355=(($354+4)|0);
   var $356=HEAP32[(($355)>>2)];
   var $357=$3;
   var $358=((($357)+(1))|0);
   _parser_dump($353, $356, $358);
   label = 212; break;
  case 45: 
   var $360=_printf(((87064)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $361=$1;
   var $362=$2;
   var $363=(($362)|0);
   var $364=HEAP32[(($363)>>2)];
   var $365=$3;
   var $366=((($365)+(1))|0);
   _parser_dump($361, $364, $366);
   var $367=$1;
   var $368=$2;
   var $369=(($368+4)|0);
   var $370=HEAP32[(($369)>>2)];
   var $371=$3;
   var $372=((($371)+(1))|0);
   _parser_dump($367, $370, $372);
   label = 212; break;
  case 46: 
   var $374=_printf(((87028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $375=$2;
   var $376=(($375)|0);
   var $377=HEAP32[(($376)>>2)];
   var $378=(($377)|(0))!=0;
   if ($378) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $380=$1;
   var $381=$2;
   var $382=(($381)|0);
   var $383=HEAP32[(($382)>>2)];
   var $384=$3;
   var $385=((($384)+(1))|0);
   _parser_dump($380, $383, $385);
   label = 48; break;
  case 48: 
   var $387=$2;
   var $388=(($387+4)|0);
   var $389=HEAP32[(($388)>>2)];
   $2=$389;
   label = 49; break;
  case 49: 
   var $391=$2;
   var $392=(($391)|(0))!=0;
   if ($392) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $394=$3;
   var $395=((($394)+(1))|0);
   _dump_prefix($395);
   var $396=_printf(((86984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $397=$1;
   var $398=$2;
   var $399=(($398)|0);
   var $400=HEAP32[(($399)>>2)];
   var $401=(($400)|0);
   var $402=HEAP32[(($401)>>2)];
   var $403=$3;
   var $404=((($403)+(2))|0);
   _dump_recur($397, $402, $404);
   var $405=$3;
   var $406=((($405)+(1))|0);
   _dump_prefix($406);
   var $407=_printf(((89024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $408=$1;
   var $409=$2;
   var $410=(($409)|0);
   var $411=HEAP32[(($410)>>2)];
   var $412=(($411+4)|0);
   var $413=HEAP32[(($412)>>2)];
   var $414=$3;
   var $415=((($414)+(2))|0);
   _parser_dump($408, $413, $415);
   var $416=$2;
   var $417=(($416+4)|0);
   var $418=HEAP32[(($417)>>2)];
   $2=$418;
   label = 49; break;
  case 51: 
   label = 212; break;
  case 52: 
   var $421=_printf(((86904)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $422=$3;
   var $423=((($422)+(1))|0);
   _dump_prefix($423);
   var $424=_printf(((87448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $425=$1;
   var $426=$2;
   var $427=(($426)|0);
   var $428=HEAP32[(($427)>>2)];
   var $429=$3;
   var $430=((($429)+(2))|0);
   _parser_dump($425, $428, $430);
   var $431=$3;
   var $432=((($431)+(1))|0);
   _dump_prefix($432);
   var $433=_printf(((89024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $434=$1;
   var $435=$2;
   var $436=(($435+4)|0);
   var $437=HEAP32[(($436)>>2)];
   var $438=$3;
   var $439=((($438)+(2))|0);
   _parser_dump($434, $437, $439);
   label = 212; break;
  case 53: 
   var $441=_printf(((86852)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $442=$3;
   var $443=((($442)+(1))|0);
   _dump_prefix($443);
   var $444=_printf(((87448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $445=$1;
   var $446=$2;
   var $447=(($446)|0);
   var $448=HEAP32[(($447)>>2)];
   var $449=$3;
   var $450=((($449)+(2))|0);
   _parser_dump($445, $448, $450);
   var $451=$3;
   var $452=((($451)+(1))|0);
   _dump_prefix($452);
   var $453=_printf(((89024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $454=$1;
   var $455=$2;
   var $456=(($455+4)|0);
   var $457=HEAP32[(($456)>>2)];
   var $458=$3;
   var $459=((($458)+(2))|0);
   _parser_dump($454, $457, $459);
   label = 212; break;
  case 54: 
   var $461=_printf(((86800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $462=$3;
   var $463=((($462)+(1))|0);
   _dump_prefix($463);
   var $464=_printf(((86672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $465=$2;
   var $466=(($465)|0);
   var $467=HEAP32[(($466)>>2)];
   $n23=$467;
   var $468=$n23;
   var $469=(($468)|0);
   var $470=HEAP32[(($469)>>2)];
   var $471=(($470)|(0))!=0;
   if ($471) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $473=$3;
   var $474=((($473)+(2))|0);
   _dump_prefix($474);
   var $475=_printf(((86640)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $476=$1;
   var $477=$n23;
   var $478=(($477)|0);
   var $479=HEAP32[(($478)>>2)];
   var $480=$3;
   var $481=((($480)+(3))|0);
   _dump_recur($476, $479, $481);
   label = 56; break;
  case 56: 
   var $483=$n23;
   var $484=(($483+4)|0);
   var $485=HEAP32[(($484)>>2)];
   $n23=$485;
   var $486=$n23;
   var $487=(($486)|(0))!=0;
   if ($487) { label = 57; break; } else { label = 64; break; }
  case 57: 
   var $489=$n23;
   var $490=(($489)|0);
   var $491=HEAP32[(($490)>>2)];
   var $492=(($491)|(0))!=0;
   if ($492) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $494=$3;
   var $495=((($494)+(2))|0);
   _dump_prefix($495);
   var $496=_printf(((86348)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $497=$1;
   var $498=$n23;
   var $499=(($498)|0);
   var $500=HEAP32[(($499)>>2)];
   var $501=$3;
   var $502=((($501)+(3))|0);
   _parser_dump($497, $500, $502);
   label = 59; break;
  case 59: 
   var $504=$n23;
   var $505=(($504+4)|0);
   var $506=HEAP32[(($505)>>2)];
   $n23=$506;
   var $507=$n23;
   var $508=(($507)|(0))!=0;
   if ($508) { label = 60; break; } else { label = 63; break; }
  case 60: 
   var $510=$n23;
   var $511=(($510)|0);
   var $512=HEAP32[(($511)>>2)];
   var $513=(($512)|(0))!=0;
   if ($513) { label = 61; break; } else { label = 62; break; }
  case 61: 
   var $515=$3;
   var $516=((($515)+(2))|0);
   _dump_prefix($516);
   var $517=_printf(((86320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $518=$1;
   var $519=$n23;
   var $520=(($519)|0);
   var $521=HEAP32[(($520)>>2)];
   var $522=$3;
   var $523=((($522)+(3))|0);
   _dump_recur($518, $521, $523);
   label = 62; break;
  case 62: 
   label = 63; break;
  case 63: 
   label = 64; break;
  case 64: 
   var $527=$2;
   var $528=(($527+4)|0);
   var $529=HEAP32[(($528)>>2)];
   $2=$529;
   var $530=$3;
   var $531=((($530)+(1))|0);
   _dump_prefix($531);
   var $532=_printf(((86272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $533=$1;
   var $534=$2;
   var $535=(($534)|0);
   var $536=HEAP32[(($535)>>2)];
   var $537=$3;
   var $538=((($537)+(2))|0);
   _parser_dump($533, $536, $538);
   var $539=$2;
   var $540=(($539+4)|0);
   var $541=HEAP32[(($540)>>2)];
   $2=$541;
   var $542=$3;
   var $543=((($542)+(1))|0);
   _dump_prefix($543);
   var $544=_printf(((86184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $545=$1;
   var $546=$2;
   var $547=(($546)|0);
   var $548=HEAP32[(($547)>>2)];
   var $549=$3;
   var $550=((($549)+(2))|0);
   _parser_dump($545, $548, $550);
   label = 212; break;
  case 65: 
   var $552=_printf(((86104)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $553=$2;
   var $554=(($553)|0);
   var $555=HEAP32[(($554)>>2)];
   $n24=$555;
   var $556=$n24;
   var $557=(($556)|(0))!=0;
   if ($557) { label = 66; break; } else { label = 76; break; }
  case 66: 
   var $559=$n24;
   var $560=(($559)|0);
   var $561=HEAP32[(($560)>>2)];
   var $562=(($561)|(0))!=0;
   if ($562) { label = 68; break; } else { label = 67; break; }
  case 67: 
   var $564=$n24;
   var $565=(($564+4)|0);
   var $566=HEAP32[(($565)>>2)];
   var $567=(($566)|(0))!=0;
   if ($567) { label = 68; break; } else { label = 76; break; }
  case 68: 
   var $569=$3;
   var $570=((($569)+(1))|0);
   _dump_prefix($570);
   var $571=_printf(((85992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $572=$3;
   var $573=((($572)+(2))|0);
   _dump_prefix($573);
   label = 69; break;
  case 69: 
   var $575=$n24;
   var $576=(($575)|(0))!=0;
   if ($576) { label = 70; break; } else { label = 75; break; }
  case 70: 
   var $578=$n24;
   var $579=(($578)|0);
   var $580=HEAP32[(($579)>>2)];
   var $581=(($580)|(0))!=0;
   if ($581) { label = 71; break; } else { label = 74; break; }
  case 71: 
   var $583=$n24;
   var $584=$2;
   var $585=(($584)|0);
   var $586=HEAP32[(($585)>>2)];
   var $587=(($583)|(0))!=(($586)|(0));
   if ($587) { label = 72; break; } else { label = 73; break; }
  case 72: 
   var $589=_printf(((85932)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 73; break;
  case 73: 
   var $591=$1;
   var $592=$n24;
   var $593=(($592)|0);
   var $594=HEAP32[(($593)>>2)];
   var $595=$594;
   var $596=(($595) & 65535);
   var $597=_mrb_sym2name($591, $596);
   var $598=_printf(((85884)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$597,tempInt));
   label = 74; break;
  case 74: 
   var $600=$n24;
   var $601=(($600+4)|0);
   var $602=HEAP32[(($601)>>2)];
   $n24=$602;
   label = 69; break;
  case 75: 
   var $604=_printf(((88316)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 76; break;
  case 76: 
   var $606=$2;
   var $607=(($606+4)|0);
   var $608=HEAP32[(($607)>>2)];
   $2=$608;
   var $609=$3;
   var $610=((($609)+(1))|0);
   $3=$610;
   label = 4; break;
  case 77: 
   var $612=_printf(((106128)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $613=$1;
   var $614=$2;
   var $615=(($614)|0);
   var $616=HEAP32[(($615)>>2)];
   var $617=$3;
   var $618=((($617)+(1))|0);
   _parser_dump($613, $616, $618);
   var $619=$3;
   var $620=((($619)+(1))|0);
   _dump_prefix($620);
   var $621=$1;
   var $622=$2;
   var $623=(($622+4)|0);
   var $624=HEAP32[(($623)>>2)];
   var $625=(($624)|0);
   var $626=HEAP32[(($625)>>2)];
   var $627=$626;
   var $628=(($627) & 65535);
   var $629=_mrb_sym2name($621, $628);
   var $630=$2;
   var $631=(($630+4)|0);
   var $632=HEAP32[(($631)>>2)];
   var $633=(($632)|0);
   var $634=HEAP32[(($633)>>2)];
   var $635=$634;
   var $636=_printf(((106068)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$629,HEAP32[(((tempInt)+(4))>>2)]=$635,tempInt));
   var $637=$2;
   var $638=(($637+4)|0);
   var $639=HEAP32[(($638)>>2)];
   var $640=(($639+4)|0);
   var $641=HEAP32[(($640)>>2)];
   var $642=(($641)|0);
   var $643=HEAP32[(($642)>>2)];
   $2=$643;
   var $644=$2;
   var $645=(($644)|(0))!=0;
   if ($645) { label = 78; break; } else { label = 81; break; }
  case 78: 
   var $647=$3;
   var $648=((($647)+(1))|0);
   _dump_prefix($648);
   var $649=_printf(((105748)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $650=$1;
   var $651=$2;
   var $652=(($651)|0);
   var $653=HEAP32[(($652)>>2)];
   var $654=$3;
   var $655=((($654)+(2))|0);
   _dump_recur($650, $653, $655);
   var $656=$2;
   var $657=(($656+4)|0);
   var $658=HEAP32[(($657)>>2)];
   var $659=(($658)|(0))!=0;
   if ($659) { label = 79; break; } else { label = 80; break; }
  case 79: 
   var $661=$3;
   var $662=((($661)+(1))|0);
   _dump_prefix($662);
   var $663=_printf(((105732)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $664=$1;
   var $665=$2;
   var $666=(($665+4)|0);
   var $667=HEAP32[(($666)>>2)];
   var $668=$3;
   var $669=((($668)+(2))|0);
   _parser_dump($664, $667, $669);
   label = 80; break;
  case 80: 
   label = 81; break;
  case 81: 
   label = 212; break;
  case 82: 
   var $673=_printf(((105704)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $674=$1;
   var $675=$2;
   var $676=(($675)|0);
   var $677=HEAP32[(($676)>>2)];
   var $678=$3;
   var $679=((($678)+(1))|0);
   _parser_dump($674, $677, $679);
   var $680=$1;
   var $681=$2;
   var $682=(($681+4)|0);
   var $683=HEAP32[(($682)>>2)];
   var $684=$3;
   var $685=((($684)+(1))|0);
   _parser_dump($680, $683, $685);
   label = 212; break;
  case 83: 
   var $687=_printf(((105652)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $688=$1;
   var $689=$2;
   var $690=(($689)|0);
   var $691=HEAP32[(($690)>>2)];
   var $692=$3;
   var $693=((($692)+(1))|0);
   _parser_dump($688, $691, $693);
   var $694=$1;
   var $695=$2;
   var $696=(($695+4)|0);
   var $697=HEAP32[(($696)>>2)];
   var $698=$3;
   var $699=((($698)+(1))|0);
   _parser_dump($694, $697, $699);
   label = 212; break;
  case 84: 
   var $701=_printf(((105584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $702=$1;
   var $703=$2;
   var $704=(($703)|0);
   var $705=HEAP32[(($704)>>2)];
   var $706=$3;
   var $707=((($706)+(1))|0);
   _parser_dump($702, $705, $707);
   var $708=$3;
   var $709=((($708)+(1))|0);
   _dump_prefix($709);
   var $710=$1;
   var $711=$2;
   var $712=(($711+4)|0);
   var $713=HEAP32[(($712)>>2)];
   var $714=$713;
   var $715=(($714) & 65535);
   var $716=_mrb_sym2name($710, $715);
   var $717=_printf(((105556)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$716,tempInt));
   label = 212; break;
  case 85: 
   var $719=_printf(((105540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $720=$3;
   var $721=((($720)+(1))|0);
   _dump_prefix($721);
   var $722=$1;
   var $723=$2;
   var $724=$723;
   var $725=(($724) & 65535);
   var $726=_mrb_sym2name($722, $725);
   var $727=_printf(((105556)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$726,tempInt));
   label = 212; break;
  case 86: 
   var $729=_printf(((105516)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $730=$1;
   var $731=$2;
   var $732=$3;
   var $733=((($732)+(1))|0);
   _dump_recur($730, $731, $733);
   label = 212; break;
  case 87: 
   var $735=_printf(((105432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 88; break;
  case 88: 
   var $737=$2;
   var $738=(($737)|(0))!=0;
   if ($738) { label = 89; break; } else { label = 90; break; }
  case 89: 
   var $740=$3;
   var $741=((($740)+(1))|0);
   _dump_prefix($741);
   var $742=_printf(((105352)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $743=$1;
   var $744=$2;
   var $745=(($744)|0);
   var $746=HEAP32[(($745)>>2)];
   var $747=(($746)|0);
   var $748=HEAP32[(($747)>>2)];
   var $749=$3;
   var $750=((($749)+(2))|0);
   _parser_dump($743, $748, $750);
   var $751=$3;
   var $752=((($751)+(1))|0);
   _dump_prefix($752);
   var $753=_printf(((105148)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $754=$1;
   var $755=$2;
   var $756=(($755)|0);
   var $757=HEAP32[(($756)>>2)];
   var $758=(($757+4)|0);
   var $759=HEAP32[(($758)>>2)];
   var $760=$3;
   var $761=((($760)+(2))|0);
   _parser_dump($754, $759, $761);
   var $762=$2;
   var $763=(($762+4)|0);
   var $764=HEAP32[(($763)>>2)];
   $2=$764;
   label = 88; break;
  case 90: 
   label = 212; break;
  case 91: 
   var $767=_printf(((105088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $768=$1;
   var $769=$2;
   var $770=$3;
   var $771=((($770)+(1))|0);
   _parser_dump($768, $769, $771);
   label = 212; break;
  case 92: 
   var $773=_printf(((105060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $774=$3;
   var $775=((($774)+(1))|0);
   _dump_prefix($775);
   var $776=_printf(((104956)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $777=$1;
   var $778=$2;
   var $779=(($778)|0);
   var $780=HEAP32[(($779)>>2)];
   var $781=$3;
   var $782=((($781)+(2))|0);
   _parser_dump($777, $780, $782);
   var $783=$3;
   var $784=((($783)+(1))|0);
   _dump_prefix($784);
   var $785=_printf(((104896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $786=$1;
   var $787=$2;
   var $788=(($787+4)|0);
   var $789=HEAP32[(($788)>>2)];
   var $790=$3;
   var $791=((($790)+(2))|0);
   _parser_dump($786, $789, $791);
   label = 212; break;
  case 93: 
   var $793=_printf(((104804)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $794=$3;
   var $795=((($794)+(1))|0);
   _dump_prefix($795);
   var $796=_printf(((104772)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $797=$2;
   var $798=(($797)|0);
   var $799=HEAP32[(($798)>>2)];
   $n25=$799;
   var $800=$n25;
   var $801=(($800)|0);
   var $802=HEAP32[(($801)>>2)];
   var $803=(($802)|(0))!=0;
   if ($803) { label = 94; break; } else { label = 95; break; }
  case 94: 
   var $805=$3;
   var $806=((($805)+(2))|0);
   _dump_prefix($806);
   var $807=_printf(((86640)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $808=$1;
   var $809=$n25;
   var $810=(($809)|0);
   var $811=HEAP32[(($810)>>2)];
   var $812=$3;
   var $813=((($812)+(3))|0);
   _dump_recur($808, $811, $813);
   label = 95; break;
  case 95: 
   var $815=$n25;
   var $816=(($815+4)|0);
   var $817=HEAP32[(($816)>>2)];
   $n25=$817;
   var $818=$n25;
   var $819=(($818)|(0))!=0;
   if ($819) { label = 96; break; } else { label = 106; break; }
  case 96: 
   var $821=$n25;
   var $822=(($821)|0);
   var $823=HEAP32[(($822)>>2)];
   var $824=(($823)|(0))!=0;
   if ($824) { label = 97; break; } else { label = 101; break; }
  case 97: 
   var $826=$3;
   var $827=((($826)+(2))|0);
   _dump_prefix($827);
   var $828=_printf(((86348)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $829=$n25;
   var $830=(($829)|0);
   var $831=HEAP32[(($830)>>2)];
   var $832=(($831)|(0))==-1;
   if ($832) { label = 98; break; } else { label = 99; break; }
  case 98: 
   var $834=$3;
   var $835=((($834)+(2))|0);
   _dump_prefix($835);
   var $836=_printf(((104728)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 100; break;
  case 99: 
   var $838=$1;
   var $839=$n25;
   var $840=(($839)|0);
   var $841=HEAP32[(($840)>>2)];
   var $842=$3;
   var $843=((($842)+(3))|0);
   _parser_dump($838, $841, $843);
   label = 100; break;
  case 100: 
   label = 101; break;
  case 101: 
   var $846=$n25;
   var $847=(($846+4)|0);
   var $848=HEAP32[(($847)>>2)];
   $n25=$848;
   var $849=$n25;
   var $850=(($849)|(0))!=0;
   if ($850) { label = 102; break; } else { label = 105; break; }
  case 102: 
   var $852=$n25;
   var $853=(($852)|0);
   var $854=HEAP32[(($853)>>2)];
   var $855=(($854)|(0))!=0;
   if ($855) { label = 103; break; } else { label = 104; break; }
  case 103: 
   var $857=$3;
   var $858=((($857)+(2))|0);
   _dump_prefix($858);
   var $859=_printf(((86320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $860=$1;
   var $861=$n25;
   var $862=(($861)|0);
   var $863=HEAP32[(($862)>>2)];
   var $864=$3;
   var $865=((($864)+(3))|0);
   _dump_recur($860, $863, $865);
   label = 104; break;
  case 104: 
   label = 105; break;
  case 105: 
   label = 106; break;
  case 106: 
   var $869=$3;
   var $870=((($869)+(1))|0);
   _dump_prefix($870);
   var $871=_printf(((104896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $872=$1;
   var $873=$2;
   var $874=(($873+4)|0);
   var $875=HEAP32[(($874)>>2)];
   var $876=$3;
   var $877=((($876)+(2))|0);
   _parser_dump($872, $875, $877);
   label = 212; break;
  case 107: 
   var $879=_printf(((104628)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $880=$3;
   var $881=((($880)+(1))|0);
   _dump_prefix($881);
   var $882=_printf(((104956)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $883=$1;
   var $884=$2;
   var $885=(($884)|0);
   var $886=HEAP32[(($885)>>2)];
   var $887=$3;
   var $888=((($887)+(2))|0);
   _parser_dump($883, $886, $888);
   var $889=$2;
   var $890=(($889+4)|0);
   var $891=HEAP32[(($890)>>2)];
   $2=$891;
   var $892=$3;
   var $893=((($892)+(1))|0);
   _dump_prefix($893);
   var $894=$1;
   var $895=$2;
   var $896=(($895)|0);
   var $897=HEAP32[(($896)>>2)];
   var $898=$897;
   var $899=(($898) & 65535);
   var $900=_mrb_sym2name($894, $899);
   var $901=$2;
   var $902=(($901)|0);
   var $903=HEAP32[(($902)>>2)];
   var $904=$903;
   var $905=_printf(((104612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$900,HEAP32[(((tempInt)+(4))>>2)]=$904,tempInt));
   var $906=$2;
   var $907=(($906+4)|0);
   var $908=HEAP32[(($907)>>2)];
   $2=$908;
   var $909=$1;
   var $910=$2;
   var $911=(($910)|0);
   var $912=HEAP32[(($911)>>2)];
   var $913=$3;
   var $914=((($913)+(1))|0);
   _parser_dump($909, $912, $914);
   label = 212; break;
  case 108: 
   var $916=_printf(((104360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $917=$2;
   var $918=(($917)|(0))!=0;
   if ($918) { label = 109; break; } else { label = 112; break; }
  case 109: 
   var $920=$3;
   var $921=((($920)+(1))|0);
   _dump_prefix($921);
   var $922=_printf(((105748)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $923=$1;
   var $924=$2;
   var $925=(($924)|0);
   var $926=HEAP32[(($925)>>2)];
   var $927=$3;
   var $928=((($927)+(2))|0);
   _dump_recur($923, $926, $928);
   var $929=$2;
   var $930=(($929+4)|0);
   var $931=HEAP32[(($930)>>2)];
   var $932=(($931)|(0))!=0;
   if ($932) { label = 110; break; } else { label = 111; break; }
  case 110: 
   var $934=$3;
   var $935=((($934)+(1))|0);
   _dump_prefix($935);
   var $936=_printf(((105732)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $937=$1;
   var $938=$2;
   var $939=(($938+4)|0);
   var $940=HEAP32[(($939)>>2)];
   var $941=$3;
   var $942=((($941)+(2))|0);
   _parser_dump($937, $940, $942);
   label = 111; break;
  case 111: 
   label = 112; break;
  case 112: 
   label = 212; break;
  case 113: 
   var $946=_printf(((104344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 212; break;
  case 114: 
   var $948=_printf(((104328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $949=$1;
   var $950=$2;
   var $951=$3;
   var $952=((($951)+(1))|0);
   _parser_dump($949, $950, $952);
   label = 212; break;
  case 115: 
   var $954=_printf(((104312)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $955=$1;
   var $956=$2;
   var $957=$3;
   var $958=((($957)+(1))|0);
   _dump_recur($955, $956, $958);
   label = 212; break;
  case 116: 
   var $960=_printf(((104280)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $961=$1;
   var $962=$2;
   var $963=$3;
   var $964=((($963)+(1))|0);
   _parser_dump($961, $962, $964);
   label = 212; break;
  case 117: 
   var $966=_printf(((104260)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $967=$1;
   var $968=$2;
   var $969=$3;
   var $970=((($969)+(1))|0);
   _parser_dump($967, $968, $970);
   label = 212; break;
  case 118: 
   var $972=_printf(((104248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 212; break;
  case 119: 
   var $974=_printf(((104228)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 212; break;
  case 120: 
   var $976=$1;
   var $977=$2;
   var $978=$977;
   var $979=(($978) & 65535);
   var $980=_mrb_sym2name($976, $979);
   var $981=_printf(((104168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$980,tempInt));
   label = 212; break;
  case 121: 
   var $983=$1;
   var $984=$2;
   var $985=$984;
   var $986=(($985) & 65535);
   var $987=_mrb_sym2name($983, $986);
   var $988=_printf(((104152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$987,tempInt));
   label = 212; break;
  case 122: 
   var $990=$1;
   var $991=$2;
   var $992=$991;
   var $993=(($992) & 65535);
   var $994=_mrb_sym2name($990, $993);
   var $995=_printf(((103812)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$994,tempInt));
   label = 212; break;
  case 123: 
   var $997=$1;
   var $998=$2;
   var $999=$998;
   var $1000=(($999) & 65535);
   var $1001=_mrb_sym2name($997, $1000);
   var $1002=_printf(((103796)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1001,tempInt));
   label = 212; break;
  case 124: 
   var $1004=$1;
   var $1005=$2;
   var $1006=$1005;
   var $1007=(($1006) & 65535);
   var $1008=_mrb_sym2name($1004, $1007);
   var $1009=_printf(((103772)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1008,tempInt));
   label = 212; break;
  case 125: 
   var $1011=_printf(((103756)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1012=$3;
   var $1013=((($1012)+(1))|0);
   _dump_prefix($1013);
   var $1014=_printf(((104956)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1015=$1;
   var $1016=$2;
   var $1017=(($1016)|0);
   var $1018=HEAP32[(($1017)>>2)];
   var $1019=$3;
   var $1020=((($1019)+(2))|0);
   _parser_dump($1015, $1018, $1020);
   var $1021=$3;
   var $1022=((($1021)+(1))|0);
   _dump_prefix($1022);
   var $1023=_printf(((104896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1024=$1;
   var $1025=$2;
   var $1026=(($1025+4)|0);
   var $1027=HEAP32[(($1026)>>2)];
   var $1028=$3;
   var $1029=((($1028)+(2))|0);
   _parser_dump($1024, $1027, $1029);
   label = 212; break;
  case 126: 
   var $1031=$2;
   var $1032=$1031;
   var $1033=_printf(((103720)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1032,tempInt));
   label = 212; break;
  case 127: 
   var $1035=$2;
   var $1036=$1035;
   var $1037=_printf(((103692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1036,tempInt));
   label = 212; break;
  case 128: 
   var $1039=$1;
   var $1040=$2;
   var $1041=$1040;
   var $1042=(($1041) & 65535);
   var $1043=_mrb_sym2name($1039, $1042);
   var $1044=_printf(((103676)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1043,tempInt));
   label = 212; break;
  case 129: 
   var $1046=_printf(((103636)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1047=$1;
   var $1048=$2;
   var $1049=$3;
   var $1050=((($1049)+(1))|0);
   _parser_dump($1047, $1048, $1050);
   label = 212; break;
  case 130: 
   var $1052=$2;
   var $1053=(($1052)|0);
   var $1054=HEAP32[(($1053)>>2)];
   var $1055=$1054;
   var $1056=$2;
   var $1057=(($1056+4)|0);
   var $1058=HEAP32[(($1057)>>2)];
   var $1059=(($1058)|0);
   var $1060=HEAP32[(($1059)>>2)];
   var $1061=$1060;
   var $1062=_printf(((103604)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1055,HEAP32[(((tempInt)+(4))>>2)]=$1061,tempInt));
   label = 212; break;
  case 131: 
   var $1064=$2;
   var $1065=$1064;
   var $1066=_printf(((103580)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1065,tempInt));
   label = 212; break;
  case 132: 
   var $1068=_printf(((103352)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1069=$1;
   var $1070=$2;
   var $1071=$3;
   var $1072=((($1071)+(1))|0);
   _parser_dump($1069, $1070, $1072);
   label = 212; break;
  case 133: 
   var $1074=$2;
   var $1075=(($1074)|0);
   var $1076=HEAP32[(($1075)>>2)];
   var $1077=$1076;
   var $1078=$2;
   var $1079=(($1078+4)|0);
   var $1080=HEAP32[(($1079)>>2)];
   var $1081=$1080;
   var $1082=_printf(((103328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1077,HEAP32[(((tempInt)+(4))>>2)]=$1081,tempInt));
   label = 212; break;
  case 134: 
   var $1084=_printf(((103304)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1085=$1;
   var $1086=$2;
   var $1087=$3;
   var $1088=((($1087)+(1))|0);
   _dump_recur($1085, $1086, $1088);
   label = 212; break;
  case 135: 
   var $1090=$2;
   var $1091=(($1090)|0);
   var $1092=HEAP32[(($1091)>>2)];
   var $1093=$1092;
   var $1094=$2;
   var $1095=(($1094+4)|0);
   var $1096=HEAP32[(($1095)>>2)];
   var $1097=$1096;
   var $1098=_printf(((103256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1093,HEAP32[(((tempInt)+(4))>>2)]=$1097,tempInt));
   label = 212; break;
  case 136: 
   var $1100=_printf(((103216)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1101=$1;
   var $1102=$2;
   var $1103=$3;
   var $1104=((($1103)+(1))|0);
   _dump_recur($1101, $1102, $1104);
   label = 212; break;
  case 137: 
   var $1106=$2;
   var $1107=(($1106)|0);
   var $1108=HEAP32[(($1107)>>2)];
   var $1109=$1108;
   var $1110=$2;
   var $1111=(($1110+4)|0);
   var $1112=HEAP32[(($1111)>>2)];
   var $1113=$1112;
   var $1114=_printf(((103184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1109,HEAP32[(((tempInt)+(4))>>2)]=$1113,tempInt));
   label = 212; break;
  case 138: 
   var $1116=_printf(((103172)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1117=$1;
   var $1118=$2;
   var $1119=(($1118)|0);
   var $1120=HEAP32[(($1119)>>2)];
   var $1121=$3;
   var $1122=((($1121)+(1))|0);
   _dump_recur($1117, $1120, $1122);
   var $1123=$3;
   _dump_prefix($1123);
   var $1124=$2;
   var $1125=(($1124+4)|0);
   var $1126=HEAP32[(($1125)>>2)];
   var $1127=(($1126+4)|0);
   var $1128=HEAP32[(($1127)>>2)];
   var $1129=(($1128)|0);
   var $1130=HEAP32[(($1129)>>2)];
   var $1131=$1130;
   var $1132=_printf(((103136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1131,tempInt));
   var $1133=$3;
   _dump_prefix($1133);
   var $1134=$2;
   var $1135=(($1134+4)|0);
   var $1136=HEAP32[(($1135)>>2)];
   var $1137=(($1136+4)|0);
   var $1138=HEAP32[(($1137)>>2)];
   var $1139=(($1138+4)|0);
   var $1140=HEAP32[(($1139)>>2)];
   var $1141=$1140;
   var $1142=_printf(((103092)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1141,tempInt));
   label = 212; break;
  case 139: 
   var $1144=$1;
   var $1145=$2;
   var $1146=$1145;
   var $1147=(($1146) & 65535);
   var $1148=_mrb_sym2name($1144, $1147);
   var $1149=_printf(((103076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1148,tempInt));
   label = 212; break;
  case 140: 
   var $1151=_printf(((102860)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 212; break;
  case 141: 
   var $1153=_printf(((102848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 212; break;
  case 142: 
   var $1155=_printf(((102836)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 212; break;
  case 143: 
   var $1157=_printf(((102824)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 212; break;
  case 144: 
   var $1159=$1;
   var $1160=$2;
   var $1161=(($1160)|0);
   var $1162=HEAP32[(($1161)>>2)];
   var $1163=$1162;
   var $1164=(($1163) & 65535);
   var $1165=_mrb_sym2name($1159, $1164);
   var $1166=$1;
   var $1167=$2;
   var $1168=(($1167+4)|0);
   var $1169=HEAP32[(($1168)>>2)];
   var $1170=$1169;
   var $1171=(($1170) & 65535);
   var $1172=_mrb_sym2name($1166, $1171);
   var $1173=_printf(((102764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1165,HEAP32[(((tempInt)+(4))>>2)]=$1172,tempInt));
   label = 212; break;
  case 145: 
   var $1175=_printf(((102720)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1176=$2;
   $t=$1176;
   label = 146; break;
  case 146: 
   var $1178=$t;
   var $1179=(($1178)|(0))!=0;
   if ($1179) { label = 147; break; } else { label = 148; break; }
  case 147: 
   var $1181=$1;
   var $1182=$t;
   var $1183=(($1182)|0);
   var $1184=HEAP32[(($1183)>>2)];
   var $1185=$1184;
   var $1186=(($1185) & 65535);
   var $1187=_mrb_sym2name($1181, $1186);
   var $1188=_printf(((102712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1187,tempInt));
   var $1189=$t;
   var $1190=(($1189+4)|0);
   var $1191=HEAP32[(($1190)>>2)];
   $t=$1191;
   label = 146; break;
  case 148: 
   var $1193=_printf(((102684)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 212; break;
  case 149: 
   var $1195=_printf(((102652)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1196=$2;
   var $1197=(($1196)|0);
   var $1198=HEAP32[(($1197)>>2)];
   var $1199=(($1198)|0);
   var $1200=HEAP32[(($1199)>>2)];
   var $1201=(($1200)|(0))==0;
   if ($1201) { label = 150; break; } else { label = 151; break; }
  case 150: 
   var $1203=$3;
   var $1204=((($1203)+(1))|0);
   _dump_prefix($1204);
   var $1205=$1;
   var $1206=$2;
   var $1207=(($1206)|0);
   var $1208=HEAP32[(($1207)>>2)];
   var $1209=(($1208+4)|0);
   var $1210=HEAP32[(($1209)>>2)];
   var $1211=$1210;
   var $1212=(($1211) & 65535);
   var $1213=_mrb_sym2name($1205, $1212);
   var $1214=_printf(((102644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1213,tempInt));
   label = 155; break;
  case 151: 
   var $1216=$2;
   var $1217=(($1216)|0);
   var $1218=HEAP32[(($1217)>>2)];
   var $1219=(($1218)|0);
   var $1220=HEAP32[(($1219)>>2)];
   var $1221=(($1220)|(0))==1;
   if ($1221) { label = 152; break; } else { label = 153; break; }
  case 152: 
   var $1223=$3;
   var $1224=((($1223)+(1))|0);
   _dump_prefix($1224);
   var $1225=$1;
   var $1226=$2;
   var $1227=(($1226)|0);
   var $1228=HEAP32[(($1227)>>2)];
   var $1229=(($1228+4)|0);
   var $1230=HEAP32[(($1229)>>2)];
   var $1231=$1230;
   var $1232=(($1231) & 65535);
   var $1233=_mrb_sym2name($1225, $1232);
   var $1234=_printf(((105556)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1233,tempInt));
   label = 154; break;
  case 153: 
   var $1236=$1;
   var $1237=$2;
   var $1238=(($1237)|0);
   var $1239=HEAP32[(($1238)>>2)];
   var $1240=(($1239)|0);
   var $1241=HEAP32[(($1240)>>2)];
   var $1242=$3;
   var $1243=((($1242)+(1))|0);
   _parser_dump($1236, $1241, $1243);
   var $1244=$3;
   var $1245=((($1244)+(1))|0);
   _dump_prefix($1245);
   var $1246=$1;
   var $1247=$2;
   var $1248=(($1247)|0);
   var $1249=HEAP32[(($1248)>>2)];
   var $1250=(($1249+4)|0);
   var $1251=HEAP32[(($1250)>>2)];
   var $1252=$1251;
   var $1253=(($1252) & 65535);
   var $1254=_mrb_sym2name($1246, $1253);
   var $1255=_printf(((105556)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1254,tempInt));
   label = 154; break;
  case 154: 
   label = 155; break;
  case 155: 
   var $1258=$2;
   var $1259=(($1258+4)|0);
   var $1260=HEAP32[(($1259)>>2)];
   var $1261=(($1260)|0);
   var $1262=HEAP32[(($1261)>>2)];
   var $1263=(($1262)|(0))!=0;
   if ($1263) { label = 156; break; } else { label = 157; break; }
  case 156: 
   var $1265=$3;
   var $1266=((($1265)+(1))|0);
   _dump_prefix($1266);
   var $1267=_printf(((102504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1268=$1;
   var $1269=$2;
   var $1270=(($1269+4)|0);
   var $1271=HEAP32[(($1270)>>2)];
   var $1272=(($1271)|0);
   var $1273=HEAP32[(($1272)>>2)];
   var $1274=$3;
   var $1275=((($1274)+(2))|0);
   _parser_dump($1268, $1273, $1275);
   label = 157; break;
  case 157: 
   var $1277=$3;
   var $1278=((($1277)+(1))|0);
   _dump_prefix($1278);
   var $1279=_printf(((89024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1280=$1;
   var $1281=$2;
   var $1282=(($1281+4)|0);
   var $1283=HEAP32[(($1282)>>2)];
   var $1284=(($1283+4)|0);
   var $1285=HEAP32[(($1284)>>2)];
   var $1286=(($1285)|0);
   var $1287=HEAP32[(($1286)>>2)];
   var $1288=(($1287+4)|0);
   var $1289=HEAP32[(($1288)>>2)];
   var $1290=$3;
   var $1291=((($1290)+(2))|0);
   _parser_dump($1280, $1289, $1291);
   label = 212; break;
  case 158: 
   var $1293=_printf(((102488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1294=$2;
   var $1295=(($1294)|0);
   var $1296=HEAP32[(($1295)>>2)];
   var $1297=(($1296)|0);
   var $1298=HEAP32[(($1297)>>2)];
   var $1299=(($1298)|(0))==0;
   if ($1299) { label = 159; break; } else { label = 160; break; }
  case 159: 
   var $1301=$3;
   var $1302=((($1301)+(1))|0);
   _dump_prefix($1302);
   var $1303=$1;
   var $1304=$2;
   var $1305=(($1304)|0);
   var $1306=HEAP32[(($1305)>>2)];
   var $1307=(($1306+4)|0);
   var $1308=HEAP32[(($1307)>>2)];
   var $1309=$1308;
   var $1310=(($1309) & 65535);
   var $1311=_mrb_sym2name($1303, $1310);
   var $1312=_printf(((102644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1311,tempInt));
   label = 164; break;
  case 160: 
   var $1314=$2;
   var $1315=(($1314)|0);
   var $1316=HEAP32[(($1315)>>2)];
   var $1317=(($1316)|0);
   var $1318=HEAP32[(($1317)>>2)];
   var $1319=(($1318)|(0))==1;
   if ($1319) { label = 161; break; } else { label = 162; break; }
  case 161: 
   var $1321=$3;
   var $1322=((($1321)+(1))|0);
   _dump_prefix($1322);
   var $1323=$1;
   var $1324=$2;
   var $1325=(($1324)|0);
   var $1326=HEAP32[(($1325)>>2)];
   var $1327=(($1326+4)|0);
   var $1328=HEAP32[(($1327)>>2)];
   var $1329=$1328;
   var $1330=(($1329) & 65535);
   var $1331=_mrb_sym2name($1323, $1330);
   var $1332=_printf(((105556)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1331,tempInt));
   label = 163; break;
  case 162: 
   var $1334=$1;
   var $1335=$2;
   var $1336=(($1335)|0);
   var $1337=HEAP32[(($1336)>>2)];
   var $1338=(($1337)|0);
   var $1339=HEAP32[(($1338)>>2)];
   var $1340=$3;
   var $1341=((($1340)+(1))|0);
   _parser_dump($1334, $1339, $1341);
   var $1342=$3;
   var $1343=((($1342)+(1))|0);
   _dump_prefix($1343);
   var $1344=$1;
   var $1345=$2;
   var $1346=(($1345)|0);
   var $1347=HEAP32[(($1346)>>2)];
   var $1348=(($1347+4)|0);
   var $1349=HEAP32[(($1348)>>2)];
   var $1350=$1349;
   var $1351=(($1350) & 65535);
   var $1352=_mrb_sym2name($1344, $1351);
   var $1353=_printf(((105556)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1352,tempInt));
   label = 163; break;
  case 163: 
   label = 164; break;
  case 164: 
   var $1356=$3;
   var $1357=((($1356)+(1))|0);
   _dump_prefix($1357);
   var $1358=_printf(((89024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1359=$1;
   var $1360=$2;
   var $1361=(($1360+4)|0);
   var $1362=HEAP32[(($1361)>>2)];
   var $1363=(($1362)|0);
   var $1364=HEAP32[(($1363)>>2)];
   var $1365=(($1364+4)|0);
   var $1366=HEAP32[(($1365)>>2)];
   var $1367=$3;
   var $1368=((($1367)+(2))|0);
   _parser_dump($1359, $1366, $1368);
   label = 212; break;
  case 165: 
   var $1370=_printf(((102464)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1371=$1;
   var $1372=$2;
   var $1373=(($1372)|0);
   var $1374=HEAP32[(($1373)>>2)];
   var $1375=$3;
   var $1376=((($1375)+(1))|0);
   _parser_dump($1371, $1374, $1376);
   var $1377=$3;
   var $1378=((($1377)+(1))|0);
   _dump_prefix($1378);
   var $1379=_printf(((89024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1380=$1;
   var $1381=$2;
   var $1382=(($1381+4)|0);
   var $1383=HEAP32[(($1382)>>2)];
   var $1384=(($1383)|0);
   var $1385=HEAP32[(($1384)>>2)];
   var $1386=(($1385+4)|0);
   var $1387=HEAP32[(($1386)>>2)];
   var $1388=$3;
   var $1389=((($1388)+(2))|0);
   _parser_dump($1380, $1387, $1389);
   label = 212; break;
  case 166: 
   var $1391=_printf(((102448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1392=$3;
   var $1393=((($1392)+(1))|0);
   _dump_prefix($1393);
   var $1394=$1;
   var $1395=$2;
   var $1396=(($1395)|0);
   var $1397=HEAP32[(($1396)>>2)];
   var $1398=$1397;
   var $1399=(($1398) & 65535);
   var $1400=_mrb_sym2name($1394, $1399);
   var $1401=_printf(((102432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1400,tempInt));
   var $1402=$2;
   var $1403=(($1402+4)|0);
   var $1404=HEAP32[(($1403)>>2)];
   $2=$1404;
   var $1405=$2;
   var $1406=(($1405)|0);
   var $1407=HEAP32[(($1406)>>2)];
   $n26=$1407;
   var $1408=$n26;
   var $1409=(($1408)|(0))!=0;
   if ($1409) { label = 167; break; } else { label = 177; break; }
  case 167: 
   var $1411=$n26;
   var $1412=(($1411)|0);
   var $1413=HEAP32[(($1412)>>2)];
   var $1414=(($1413)|(0))!=0;
   if ($1414) { label = 169; break; } else { label = 168; break; }
  case 168: 
   var $1416=$n26;
   var $1417=(($1416+4)|0);
   var $1418=HEAP32[(($1417)>>2)];
   var $1419=(($1418)|(0))!=0;
   if ($1419) { label = 169; break; } else { label = 177; break; }
  case 169: 
   var $1421=$3;
   var $1422=((($1421)+(1))|0);
   _dump_prefix($1422);
   var $1423=_printf(((85992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1424=$3;
   var $1425=((($1424)+(2))|0);
   _dump_prefix($1425);
   label = 170; break;
  case 170: 
   var $1427=$n26;
   var $1428=(($1427)|(0))!=0;
   if ($1428) { label = 171; break; } else { label = 176; break; }
  case 171: 
   var $1430=$n26;
   var $1431=(($1430)|0);
   var $1432=HEAP32[(($1431)>>2)];
   var $1433=(($1432)|(0))!=0;
   if ($1433) { label = 172; break; } else { label = 175; break; }
  case 172: 
   var $1435=$n26;
   var $1436=$2;
   var $1437=(($1436)|0);
   var $1438=HEAP32[(($1437)>>2)];
   var $1439=(($1435)|(0))!=(($1438)|(0));
   if ($1439) { label = 173; break; } else { label = 174; break; }
  case 173: 
   var $1441=_printf(((85932)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 174; break;
  case 174: 
   var $1443=$1;
   var $1444=$n26;
   var $1445=(($1444)|0);
   var $1446=HEAP32[(($1445)>>2)];
   var $1447=$1446;
   var $1448=(($1447) & 65535);
   var $1449=_mrb_sym2name($1443, $1448);
   var $1450=_printf(((85884)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1449,tempInt));
   label = 175; break;
  case 175: 
   var $1452=$n26;
   var $1453=(($1452+4)|0);
   var $1454=HEAP32[(($1453)>>2)];
   $n26=$1454;
   label = 170; break;
  case 176: 
   var $1456=_printf(((88316)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 177; break;
  case 177: 
   var $1458=$2;
   var $1459=(($1458+4)|0);
   var $1460=HEAP32[(($1459)>>2)];
   $2=$1460;
   var $1461=$2;
   var $1462=(($1461)|0);
   var $1463=HEAP32[(($1462)>>2)];
   var $1464=(($1463)|(0))!=0;
   if ($1464) { label = 178; break; } else { label = 192; break; }
  case 178: 
   var $1466=$2;
   var $1467=(($1466)|0);
   var $1468=HEAP32[(($1467)>>2)];
   $n7=$1468;
   var $1469=$n7;
   var $1470=(($1469)|0);
   var $1471=HEAP32[(($1470)>>2)];
   var $1472=(($1471)|(0))!=0;
   if ($1472) { label = 179; break; } else { label = 180; break; }
  case 179: 
   var $1474=$3;
   var $1475=((($1474)+(1))|0);
   _dump_prefix($1475);
   var $1476=_printf(((87932)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1477=$1;
   var $1478=$n7;
   var $1479=(($1478)|0);
   var $1480=HEAP32[(($1479)>>2)];
   var $1481=$3;
   var $1482=((($1481)+(2))|0);
   _dump_recur($1477, $1480, $1482);
   label = 180; break;
  case 180: 
   var $1484=$n7;
   var $1485=(($1484+4)|0);
   var $1486=HEAP32[(($1485)>>2)];
   $n7=$1486;
   var $1487=$n7;
   var $1488=(($1487)|0);
   var $1489=HEAP32[(($1488)>>2)];
   var $1490=(($1489)|(0))!=0;
   if ($1490) { label = 181; break; } else { label = 185; break; }
  case 181: 
   var $1492=$3;
   var $1493=((($1492)+(1))|0);
   _dump_prefix($1493);
   var $1494=_printf(((87880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1495=$n7;
   var $1496=(($1495)|0);
   var $1497=HEAP32[(($1496)>>2)];
   $n28=$1497;
   label = 182; break;
  case 182: 
   var $1499=$n28;
   var $1500=(($1499)|(0))!=0;
   if ($1500) { label = 183; break; } else { label = 184; break; }
  case 183: 
   var $1502=$3;
   var $1503=((($1502)+(2))|0);
   _dump_prefix($1503);
   var $1504=$1;
   var $1505=$n28;
   var $1506=(($1505)|0);
   var $1507=HEAP32[(($1506)>>2)];
   var $1508=(($1507)|0);
   var $1509=HEAP32[(($1508)>>2)];
   var $1510=$1509;
   var $1511=(($1510) & 65535);
   var $1512=_mrb_sym2name($1504, $1511);
   var $1513=_printf(((87820)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1512,tempInt));
   var $1514=$1;
   var $1515=$n28;
   var $1516=(($1515)|0);
   var $1517=HEAP32[(($1516)>>2)];
   var $1518=(($1517+4)|0);
   var $1519=HEAP32[(($1518)>>2)];
   _parser_dump($1514, $1519, 0);
   var $1520=$n28;
   var $1521=(($1520+4)|0);
   var $1522=HEAP32[(($1521)>>2)];
   $n28=$1522;
   label = 182; break;
  case 184: 
   label = 185; break;
  case 185: 
   var $1525=$n7;
   var $1526=(($1525+4)|0);
   var $1527=HEAP32[(($1526)>>2)];
   $n7=$1527;
   var $1528=$n7;
   var $1529=(($1528)|0);
   var $1530=HEAP32[(($1529)>>2)];
   var $1531=(($1530)|(0))!=0;
   if ($1531) { label = 186; break; } else { label = 187; break; }
  case 186: 
   var $1533=$3;
   var $1534=((($1533)+(1))|0);
   _dump_prefix($1534);
   var $1535=$1;
   var $1536=$n7;
   var $1537=(($1536)|0);
   var $1538=HEAP32[(($1537)>>2)];
   var $1539=$1538;
   var $1540=(($1539) & 65535);
   var $1541=_mrb_sym2name($1535, $1540);
   var $1542=_printf(((87712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1541,tempInt));
   label = 187; break;
  case 187: 
   var $1544=$n7;
   var $1545=(($1544+4)|0);
   var $1546=HEAP32[(($1545)>>2)];
   $n7=$1546;
   var $1547=$n7;
   var $1548=(($1547)|0);
   var $1549=HEAP32[(($1548)>>2)];
   var $1550=(($1549)|(0))!=0;
   if ($1550) { label = 188; break; } else { label = 189; break; }
  case 188: 
   var $1552=$3;
   var $1553=((($1552)+(1))|0);
   _dump_prefix($1553);
   var $1554=_printf(((87664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1555=$1;
   var $1556=$n7;
   var $1557=(($1556)|0);
   var $1558=HEAP32[(($1557)>>2)];
   var $1559=$3;
   var $1560=((($1559)+(2))|0);
   _dump_recur($1555, $1558, $1560);
   label = 189; break;
  case 189: 
   var $1562=$n7;
   var $1563=(($1562+4)|0);
   var $1564=HEAP32[(($1563)>>2)];
   $n7=$1564;
   var $1565=$n7;
   var $1566=(($1565)|(0))!=0;
   if ($1566) { label = 190; break; } else { label = 191; break; }
  case 190: 
   var $1568=$3;
   var $1569=((($1568)+(1))|0);
   _dump_prefix($1569);
   var $1570=$1;
   var $1571=$n7;
   var $1572=$1571;
   var $1573=(($1572) & 65535);
   var $1574=_mrb_sym2name($1570, $1573);
   var $1575=_printf(((87584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1574,tempInt));
   label = 191; break;
  case 191: 
   label = 192; break;
  case 192: 
   var $1578=$1;
   var $1579=$2;
   var $1580=(($1579+4)|0);
   var $1581=HEAP32[(($1580)>>2)];
   var $1582=(($1581)|0);
   var $1583=HEAP32[(($1582)>>2)];
   var $1584=$3;
   var $1585=((($1584)+(1))|0);
   _parser_dump($1578, $1583, $1585);
   label = 212; break;
  case 193: 
   var $1587=_printf(((102400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1588=$1;
   var $1589=$2;
   var $1590=(($1589)|0);
   var $1591=HEAP32[(($1590)>>2)];
   var $1592=$3;
   var $1593=((($1592)+(1))|0);
   _parser_dump($1588, $1591, $1593);
   var $1594=$2;
   var $1595=(($1594+4)|0);
   var $1596=HEAP32[(($1595)>>2)];
   $2=$1596;
   var $1597=$3;
   var $1598=((($1597)+(1))|0);
   _dump_prefix($1598);
   var $1599=$1;
   var $1600=$2;
   var $1601=(($1600)|0);
   var $1602=HEAP32[(($1601)>>2)];
   var $1603=$1602;
   var $1604=(($1603) & 65535);
   var $1605=_mrb_sym2name($1599, $1604);
   var $1606=_printf(((102644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1605,tempInt));
   var $1607=$2;
   var $1608=(($1607+4)|0);
   var $1609=HEAP32[(($1608)>>2)];
   var $1610=(($1609+4)|0);
   var $1611=HEAP32[(($1610)>>2)];
   $2=$1611;
   var $1612=$2;
   var $1613=(($1612)|0);
   var $1614=HEAP32[(($1613)>>2)];
   var $1615=(($1614)|(0))!=0;
   if ($1615) { label = 194; break; } else { label = 208; break; }
  case 194: 
   var $1617=$2;
   var $1618=(($1617)|0);
   var $1619=HEAP32[(($1618)>>2)];
   $n9=$1619;
   var $1620=$n9;
   var $1621=(($1620)|0);
   var $1622=HEAP32[(($1621)>>2)];
   var $1623=(($1622)|(0))!=0;
   if ($1623) { label = 195; break; } else { label = 196; break; }
  case 195: 
   var $1625=$3;
   var $1626=((($1625)+(1))|0);
   _dump_prefix($1626);
   var $1627=_printf(((87932)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1628=$1;
   var $1629=$n9;
   var $1630=(($1629)|0);
   var $1631=HEAP32[(($1630)>>2)];
   var $1632=$3;
   var $1633=((($1632)+(2))|0);
   _dump_recur($1628, $1631, $1633);
   label = 196; break;
  case 196: 
   var $1635=$n9;
   var $1636=(($1635+4)|0);
   var $1637=HEAP32[(($1636)>>2)];
   $n9=$1637;
   var $1638=$n9;
   var $1639=(($1638)|0);
   var $1640=HEAP32[(($1639)>>2)];
   var $1641=(($1640)|(0))!=0;
   if ($1641) { label = 197; break; } else { label = 201; break; }
  case 197: 
   var $1643=$3;
   var $1644=((($1643)+(1))|0);
   _dump_prefix($1644);
   var $1645=_printf(((87880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1646=$n9;
   var $1647=(($1646)|0);
   var $1648=HEAP32[(($1647)>>2)];
   $n210=$1648;
   label = 198; break;
  case 198: 
   var $1650=$n210;
   var $1651=(($1650)|(0))!=0;
   if ($1651) { label = 199; break; } else { label = 200; break; }
  case 199: 
   var $1653=$3;
   var $1654=((($1653)+(2))|0);
   _dump_prefix($1654);
   var $1655=$1;
   var $1656=$n210;
   var $1657=(($1656)|0);
   var $1658=HEAP32[(($1657)>>2)];
   var $1659=(($1658)|0);
   var $1660=HEAP32[(($1659)>>2)];
   var $1661=$1660;
   var $1662=(($1661) & 65535);
   var $1663=_mrb_sym2name($1655, $1662);
   var $1664=_printf(((87820)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1663,tempInt));
   var $1665=$1;
   var $1666=$n210;
   var $1667=(($1666)|0);
   var $1668=HEAP32[(($1667)>>2)];
   var $1669=(($1668+4)|0);
   var $1670=HEAP32[(($1669)>>2)];
   _parser_dump($1665, $1670, 0);
   var $1671=$n210;
   var $1672=(($1671+4)|0);
   var $1673=HEAP32[(($1672)>>2)];
   $n210=$1673;
   label = 198; break;
  case 200: 
   label = 201; break;
  case 201: 
   var $1676=$n9;
   var $1677=(($1676+4)|0);
   var $1678=HEAP32[(($1677)>>2)];
   $n9=$1678;
   var $1679=$n9;
   var $1680=(($1679)|0);
   var $1681=HEAP32[(($1680)>>2)];
   var $1682=(($1681)|(0))!=0;
   if ($1682) { label = 202; break; } else { label = 203; break; }
  case 202: 
   var $1684=$3;
   var $1685=((($1684)+(1))|0);
   _dump_prefix($1685);
   var $1686=$1;
   var $1687=$n9;
   var $1688=(($1687)|0);
   var $1689=HEAP32[(($1688)>>2)];
   var $1690=$1689;
   var $1691=(($1690) & 65535);
   var $1692=_mrb_sym2name($1686, $1691);
   var $1693=_printf(((87712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1692,tempInt));
   label = 203; break;
  case 203: 
   var $1695=$n9;
   var $1696=(($1695+4)|0);
   var $1697=HEAP32[(($1696)>>2)];
   $n9=$1697;
   var $1698=$n9;
   var $1699=(($1698)|0);
   var $1700=HEAP32[(($1699)>>2)];
   var $1701=(($1700)|(0))!=0;
   if ($1701) { label = 204; break; } else { label = 205; break; }
  case 204: 
   var $1703=$3;
   var $1704=((($1703)+(1))|0);
   _dump_prefix($1704);
   var $1705=_printf(((87664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1706=$1;
   var $1707=$n9;
   var $1708=(($1707)|0);
   var $1709=HEAP32[(($1708)>>2)];
   var $1710=$3;
   var $1711=((($1710)+(2))|0);
   _dump_recur($1706, $1709, $1711);
   label = 205; break;
  case 205: 
   var $1713=$n9;
   var $1714=(($1713+4)|0);
   var $1715=HEAP32[(($1714)>>2)];
   $n9=$1715;
   var $1716=$n9;
   var $1717=(($1716)|(0))!=0;
   if ($1717) { label = 206; break; } else { label = 207; break; }
  case 206: 
   var $1719=$3;
   var $1720=((($1719)+(1))|0);
   _dump_prefix($1720);
   var $1721=$1;
   var $1722=$n9;
   var $1723=$1722;
   var $1724=(($1723) & 65535);
   var $1725=_mrb_sym2name($1721, $1724);
   var $1726=_printf(((87584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1725,tempInt));
   label = 207; break;
  case 207: 
   label = 208; break;
  case 208: 
   var $1729=$2;
   var $1730=(($1729+4)|0);
   var $1731=HEAP32[(($1730)>>2)];
   $2=$1731;
   var $1732=$1;
   var $1733=$2;
   var $1734=(($1733)|0);
   var $1735=HEAP32[(($1734)>>2)];
   var $1736=$3;
   var $1737=((($1736)+(1))|0);
   _parser_dump($1732, $1735, $1737);
   label = 212; break;
  case 209: 
   var $1739=_printf(((102384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1740=$1;
   var $1741=$2;
   var $1742=$3;
   var $1743=((($1742)+(1))|0);
   _parser_dump($1740, $1741, $1743);
   label = 212; break;
  case 210: 
   var $1745=_printf(((102360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $1746=$1;
   var $1747=$2;
   var $1748=$1747;
   var $1749=(($1748+16)|0);
   var $1750=HEAP32[(($1749)>>2)];
   var $1751=$3;
   var $1752=((($1751)+(1))|0);
   _parser_dump($1746, $1750, $1752);
   label = 212; break;
  case 211: 
   var $1754=$n;
   var $1755=$n;
   var $1756=_printf(((102312)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1754,HEAP32[(((tempInt)+(4))>>2)]=$1755,tempInt));
   label = 212; break;
  case 212: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_parser_new($mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $pool;
   var $p;
   $2=$mrb;
   var $3=$2;
   var $4=_mrb_pool_open($3);
   $pool=$4;
   var $5=$pool;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 6; break;
  case 3: 
   var $9=$pool;
   var $10=_mrb_pool_alloc($9, 1424);
   var $11=$10;
   $p=$11;
   var $12=$p;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 5; break; } else { label = 4; break; }
  case 4: 
   $1=0;
   label = 6; break;
  case 5: 
   var $16=$p;
   var $17=$16;
   assert(1424 % 1 === 0);(_memcpy($17, 108916, 1424)|0);
   var $18=$2;
   var $19=$p;
   var $20=(($19)|0);
   HEAP32[(($20)>>2)]=$18;
   var $21=$pool;
   var $22=$p;
   var $23=(($22+4)|0);
   HEAP32[(($23)>>2)]=$21;
   var $24=$p;
   var $25=(($24+68)|0);
   HEAP32[(($25)>>2)]=0;
   var $26=$p;
   var $27=(($26+64)|0);
   HEAP32[(($27)>>2)]=0;
   var $28=$p;
   var $29=(($28+16)|0);
   HEAP32[(($29)>>2)]=0;
   var $30=$p;
   var $31=(($30+12)|0);
   HEAP32[(($31)>>2)]=0;
   var $32=$p;
   var $33=(($32+20)|0);
   HEAP32[(($33)>>2)]=0;
   var $34=$p;
   var $35=(($34+72)|0);
   HEAP32[(($35)>>2)]=1;
   var $36=$p;
   var $37=(($36+68)|0);
   HEAP32[(($37)>>2)]=0;
   var $38=$p;
   var $39=(($38+64)|0);
   HEAP32[(($39)>>2)]=0;
   var $40=$p;
   var $41=(($40+1140)|0);
   HEAP32[(($41)>>2)]=0;
   var $42=$p;
   var $43=(($42+32)|0);
   HEAP32[(($43)>>2)]=1;
   var $44=$p;
   var $45=(($44+36)|0);
   HEAP32[(($45)>>2)]=0;
   var $46=$p;
   var $47=(($46+44)|0);
   HEAP32[(($47)>>2)]=0;
   var $48=$p;
   var $49=(($48+1116)|0);
   HEAP32[(($49)>>2)]=0;
   var $50=$p;
   var $51=(($50+1112)|0);
   HEAP32[(($51)>>2)]=0;
   var $52=$p;
   $1=$52;
   label = 6; break;
  case 6: 
   var $54=$1;
   return $54;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_parser_free($p) {
 var label = 0;
 var $1;
 $1=$p;
 var $2=$1;
 var $3=(($2+4)|0);
 var $4=HEAP32[(($3)>>2)];
 _mrb_pool_close($4);
 return;
}
function _mrb_parse_nstring($mrb, $s, $len, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $p;
   $2=$mrb;
   $3=$s;
   $4=$len;
   $5=$c;
   var $6=$2;
   var $7=_mrb_parser_new($6);
   $p=$7;
   var $8=$p;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 4; break;
  case 3: 
   var $12=$3;
   var $13=$p;
   var $14=(($13+12)|0);
   HEAP32[(($14)>>2)]=$12;
   var $15=$3;
   var $16=$4;
   var $17=(($15+$16)|0);
   var $18=$p;
   var $19=(($18+16)|0);
   HEAP32[(($19)>>2)]=$17;
   var $20=$p;
   var $21=$5;
   _mrb_parser_parse($20, $21);
   var $22=$p;
   $1=$22;
   label = 4; break;
  case 4: 
   var $24=$1;
   return $24;
  default: assert(0, "bad label: " + label);
 }
}
function _load_exec($agg_result, $mrb, $p, $c) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 328)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $n;
   var $v=sp;
   var $buf=(sp)+(12);
   var $4=(sp)+(268);
   var $5=(sp)+(280);
   var $6=(sp)+(292);
   var $7=(sp)+(304);
   var $8=(sp)+(316);
   $1=$mrb;
   $2=$p;
   $3=$c;
   var $9=$2;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_undef_value243($agg_result);
   label = 19; break;
  case 3: 
   var $13=$2;
   var $14=(($13+1136)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))!=0;
   if ($16) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $18=$2;
   var $19=(($18+1128)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|(0))!=0;
   if ($21) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $23=$2;
   var $24=(($23+1140)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25)|(0))!=0;
   if ($26) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $28=(($buf)|0);
   var $29=$2;
   var $30=(($29+1144)|0);
   var $31=(($30)|0);
   var $32=(($31)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=$2;
   var $35=(($34+1144)|0);
   var $36=(($35)|0);
   var $37=(($36+8)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=_snprintf($28, 256, ((102296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$33,HEAP32[(((tempInt)+(4))>>2)]=$38,tempInt));
   $n=$39;
   var $40=$1;
   var $41=$1;
   var $42=_mrb_class_get($41, ((102152)|0));
   var $43=(($buf)|0);
   var $44=$n;
   _mrb_exc_new($4, $40, $42, $43, $44);
   var $45=(($4)|0);
   var $46=$45;
   var $47=HEAP32[(($46)>>2)];
   var $48=$47;
   var $49=$1;
   var $50=(($49+16)|0);
   HEAP32[(($50)>>2)]=$48;
   var $51=$2;
   _mrb_parser_free($51);
   _mrb_undef_value243($agg_result);
   label = 19; break;
  case 7: 
   var $53=$1;
   var $54=$1;
   var $55=_mrb_class_get($54, ((102152)|0));
   _mrb_exc_new($5, $53, $55, ((75208)|0), 12);
   var $56=(($5)|0);
   var $57=$56;
   var $58=HEAP32[(($57)>>2)];
   var $59=$58;
   var $60=$1;
   var $61=(($60+16)|0);
   HEAP32[(($61)>>2)]=$59;
   var $62=$2;
   _mrb_parser_free($62);
   _mrb_undef_value243($agg_result);
   label = 19; break;
  case 8: 
   var $64=$1;
   var $65=$2;
   var $66=_mrb_generate_code($64, $65);
   $n=$66;
   var $67=$2;
   _mrb_parser_free($67);
   var $68=$n;
   var $69=(($68)|(0)) < 0;
   if ($69) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $71=$1;
   var $72=$1;
   var $73=_mrb_class_get($72, ((102140)|0));
   _mrb_exc_new($6, $71, $73, ((75192)|0), 13);
   var $74=(($6)|0);
   var $75=$74;
   var $76=HEAP32[(($75)>>2)];
   var $77=$76;
   var $78=$1;
   var $79=(($78+16)|0);
   HEAP32[(($79)>>2)]=$77;
   _mrb_nil_value244($agg_result);
   label = 19; break;
  case 10: 
   var $81=$3;
   var $82=(($81)|(0))!=0;
   if ($82) { label = 11; break; } else { label = 16; break; }
  case 11: 
   var $84=$3;
   var $85=$84;
   var $86=(($85+24)|0);
   var $87=HEAP8[($86)];
   var $88=(($87)&(255)) >>> 1;
   var $89=$88 & 1;
   var $90=(($89 << 24) >> 24)!=0;
   if ($90) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $92=$1;
   var $93=$n;
   _codedump_all($92, $93);
   label = 13; break;
  case 13: 
   var $95=$3;
   var $96=$95;
   var $97=(($96+24)|0);
   var $98=HEAP8[($97)];
   var $99=(($98)&(255)) >>> 2;
   var $100=$99 & 1;
   var $101=(($100 << 24) >> 24)!=0;
   if ($101) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $103=$n;
   _mrb_fixnum_value245($agg_result, $103);
   label = 19; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $106=$1;
   var $107=$1;
   var $108=$n;
   var $109=$1;
   var $110=(($109+24)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=(($111+($108<<2))|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=_mrb_proc_new($107, $113);
   var $115=$1;
   _mrb_top_self($7, $115);
   _mrb_run($8, $106, $114, $7);
   var $116=$v;
   var $117=$8;
   assert(12 % 1 === 0);HEAP32[(($116)>>2)]=HEAP32[(($117)>>2)];HEAP32[((($116)+(4))>>2)]=HEAP32[((($117)+(4))>>2)];HEAP32[((($116)+(8))>>2)]=HEAP32[((($117)+(8))>>2)];
   var $118=$1;
   var $119=(($118+16)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=(($120)|(0))!=0;
   if ($121) { label = 17; break; } else { label = 18; break; }
  case 17: 
   _mrb_nil_value244($agg_result);
   label = 19; break;
  case 18: 
   var $124=$agg_result;
   var $125=$v;
   assert(12 % 1 === 0);HEAP32[(($124)>>2)]=HEAP32[(($125)>>2)];HEAP32[((($124)+(4))>>2)]=HEAP32[((($125)+(4))>>2)];HEAP32[((($124)+(8))>>2)]=HEAP32[((($125)+(8))>>2)];
   label = 19; break;
  case 19: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_load_nstring_cxt($agg_result, $mrb, $s, $len, $c) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$mrb;
 $2=$s;
 $3=$len;
 $4=$c;
 var $5=$1;
 var $6=$1;
 var $7=$2;
 var $8=$3;
 var $9=$4;
 var $10=_mrb_parse_nstring($6, $7, $8, $9);
 var $11=$4;
 _load_exec($agg_result, $5, $10, $11);
 return;
}
function _mrb_load_string_cxt($agg_result, $mrb, $s, $c) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$mrb;
 $2=$s;
 $3=$c;
 var $4=$1;
 var $5=$2;
 var $6=$2;
 var $7=_strlen($6);
 var $8=$3;
 _mrb_load_nstring_cxt($agg_result, $4, $5, $7, $8);
 return;
}
function _mrb_load_string($agg_result, $mrb, $s) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$s;
 var $3=$1;
 var $4=$2;
 _mrb_load_string_cxt($agg_result, $3, $4, 0);
 return;
}
function _dump_prefix($offset) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$offset;
   label = 2; break;
  case 2: 
   var $3=$1;
   var $4=((($3)-(1))|0);
   $1=$4;
   var $5=(($3)|(0))!=0;
   if ($5) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $7=HEAP32[((_stdout)>>2)];
   var $8=_fputc(32, $7);
   var $9=HEAP32[((_stdout)>>2)];
   var $10=_fputc(32, $9);
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _dump_recur($mrb, $tree, $offset) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$mrb;
   $2=$tree;
   $3=$offset;
   label = 2; break;
  case 2: 
   var $5=$2;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $8=$1;
   var $9=$2;
   var $10=(($9)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$3;
   _parser_dump($8, $11, $12);
   var $13=$2;
   var $14=(($13+4)|0);
   var $15=HEAP32[(($14)>>2)];
   $2=$15;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_undef_value243($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=5;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value244($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_value245($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
// WARNING: content after a branch in a label, line: 41260
// WARNING: content after a branch in a label, line: 41382
// WARNING: content after a branch in a label, line: 41505
// WARNING: content after a branch in a label, line: 41580
function _parser_yylex($p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 260)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   var $space_seen;
   var $cmd_state;
   var $last_state;
   var $token_column;
   var $token;
   var $c2;
   var $buf=sp;
   var $c21;
   var $is_float;
   var $seen_point;
   var $seen_e;
   var $nondigit;
   var $start;
   var $c0;
   var $d;
   var $endp=(sp)+(256);
   var $term;
   var $paren;
   var $result;
   var $kw;
   var $state;
   var $ident;
   $2=$p;
   $space_seen=0;
   var $3=$2;
   var $4=(($3+44)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 9; break; }
  case 2: 
   var $8=$2;
   var $9=(($8+44)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$12;
   var $14=$13 & 64;
   var $15=(($14)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $17=$2;
   var $18=(($17+1116)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19)|(0))!=0;
   if ($20) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $22=$2;
   var $23=$22;
   var $24=(($23+1120)|0);
   var $25=HEAP8[($24)];
   var $26=$25 & 1;
   var $27=(($26 << 24) >> 24)!=0;
   if ($27) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $29=$2;
   var $30=_parse_string($29);
   $1=$30;
   label = 706; break;
  case 6: 
   label = 8; break;
  case 7: 
   var $33=$2;
   var $34=_parse_string($33);
   $1=$34;
   label = 706; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $37=$2;
   var $38=(($37+72)|0);
   var $39=HEAP32[(($38)>>2)];
   $cmd_state=$39;
   var $40=$2;
   var $41=(($40+72)|0);
   HEAP32[(($41)>>2)]=0;
   label = 10; break;
  case 10: 
   var $43=$2;
   var $44=(($43+40)|0);
   var $45=HEAP32[(($44)>>2)];
   $last_state=$45;
   var $46=$2;
   var $47=_nextc($46);
   $c=$47;
   if ((($47)|(0))==0 | (($47)|(0))==4 | (($47)|(0))==26 | (($47)|(0))==-1) {
    label = 11; break;
   }
   else if ((($47)|(0))==32 | (($47)|(0))==9 | (($47)|(0))==12 | (($47)|(0))==13 | (($47)|(0))==11) {
    label = 12; break;
   }
   else if ((($47)|(0))==35) {
    label = 13; break;
   }
   else if ((($47)|(0))==10) {
    label = 14; break;
   }
   else if ((($47)|(0))==42) {
    label = 31; break;
   }
   else if ((($47)|(0))==33) {
    label = 55; break;
   }
   else if ((($47)|(0))==61) {
    label = 66; break;
   }
   else if ((($47)|(0))==60) {
    label = 84; break;
   }
   else if ((($47)|(0))==62) {
    label = 111; break;
   }
   else if ((($47)|(0))==34) {
    label = 122; break;
   }
   else if ((($47)|(0))==39) {
    label = 123; break;
   }
   else if ((($47)|(0))==96) {
    label = 124; break;
   }
   else if ((($47)|(0))==63) {
    label = 132; break;
   }
   else if ((($47)|(0))==38) {
    label = 167; break;
   }
   else if ((($47)|(0))==124) {
    label = 191; break;
   }
   else if ((($47)|(0))==43) {
    label = 202; break;
   }
   else if ((($47)|(0))==45) {
    label = 223; break;
   }
   else if ((($47)|(0))==46) {
    label = 246; break;
   }
   else if ((($47)|(0))==48 | (($47)|(0))==49 | (($47)|(0))==50 | (($47)|(0))==51 | (($47)|(0))==52 | (($47)|(0))==53 | (($47)|(0))==54 | (($47)|(0))==55 | (($47)|(0))==56 | (($47)|(0))==57) {
    label = 255; break;
   }
   else if ((($47)|(0))==41 | (($47)|(0))==93) {
    label = 404; break;
   }
   else if ((($47)|(0))==125) {
    label = 405; break;
   }
   else if ((($47)|(0))==58) {
    label = 409; break;
   }
   else if ((($47)|(0))==47) {
    label = 427; break;
   }
   else if ((($47)|(0))==94) {
    label = 444; break;
   }
   else if ((($47)|(0))==59) {
    label = 451; break;
   }
   else if ((($47)|(0))==44) {
    label = 452; break;
   }
   else if ((($47)|(0))==126) {
    label = 453; break;
   }
   else if ((($47)|(0))==40) {
    label = 460; break;
   }
   else if ((($47)|(0))==91) {
    label = 472; break;
   }
   else if ((($47)|(0))==123) {
    label = 491; break;
   }
   else if ((($47)|(0))==92) {
    label = 504; break;
   }
   else if ((($47)|(0))==37) {
    label = 507; break;
   }
   else if ((($47)|(0))==36) {
    label = 556; break;
   }
   else if ((($47)|(0))==64) {
    label = 586; break;
   }
   else if ((($47)|(0))==95) {
    label = 604; break;
   }
   else {
   label = 605; break;
   }
  case 11: 
   $1=0;
   label = 706; break;
  case 12: 
   $space_seen=1;
   label = 10; break;
  case 13: 
   var $51=$2;
   _skip($51, 10);
   label = 14; break;
  case 14: 
   var $53=$2;
   var $54=$53;
   var $55=(($54+1120)|0);
   var $56=HEAP8[($55)];
   var $57=$56 & -2;
   HEAP8[($55)]=$57;
   var $58=$2;
   var $59=(($58+1116)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($60)|(0))!=0;
   if ($61) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $63=$2;
   var $64=$2;
   var $65=_parsing_heredoc_inf($64);
   var $66=(($65+4)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=_new_strterm($63, $67, 0, 0);
   var $69=$2;
   var $70=(($69+44)|0);
   HEAP32[(($70)>>2)]=$68;
   label = 30; break;
  case 16: 
   var $72=$2;
   var $73=(($72+40)|0);
   var $74=HEAP32[(($73)>>2)];
   if ((($74)|(0))==0 | (($74)|(0))==7 | (($74)|(0))==8 | (($74)|(0))==9 | (($74)|(0))==10) {
    label = 17; break;
   }
   else {
   label = 18; break;
   }
  case 17: 
   var $76=$2;
   var $77=(($76+32)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=((($78)+(1))|0);
   HEAP32[(($77)>>2)]=$79;
   var $80=$2;
   var $81=(($80+36)|0);
   HEAP32[(($81)>>2)]=0;
   label = 10; break;
  case 18: 
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $85=$2;
   var $86=_nextc($85);
   $c=$86;
   var $87=(($86)|(0))!=0;
   if ($87) { label = 21; break; } else { label = 29; break; }
  case 21: 
   var $89=$c;
   if ((($89)|(0))==32 | (($89)|(0))==9 | (($89)|(0))==12 | (($89)|(0))==13 | (($89)|(0))==11) {
    label = 22; break;
   }
   else if ((($89)|(0))==46) {
    label = 23; break;
   }
   else if ((($89)|(0))==-1) {
    label = 26; break;
   }
   else {
   label = 27; break;
   }
  case 22: 
   $space_seen=1;
   label = 28; break;
  case 23: 
   var $92=$2;
   var $93=_nextc($92);
   $c=$93;
   var $94=(($93)|(0))!=46;
   if ($94) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $96=$2;
   var $97=$c;
   _pushback($96, $97);
   var $98=$2;
   _pushback($98, 46);
   label = 10; break;
  case 25: 
   label = 26; break;
  case 26: 
   label = 30; break;
  case 27: 
   var $102=$2;
   var $103=$c;
   _pushback($102, $103);
   label = 30; break;
  case 28: 
   label = 20; break;
  case 29: 
   label = 30; break;
  case 30: 
   var $107=$2;
   var $108=(($107+72)|0);
   HEAP32[(($108)>>2)]=1;
   var $109=$2;
   var $110=(($109+40)|0);
   HEAP32[(($110)>>2)]=0;
   $1=10;
   label = 706; break;
  case 31: 
   var $112=$2;
   var $113=_nextc($112);
   $c=$113;
   var $114=(($113)|(0))==42;
   if ($114) { label = 32; break; } else { label = 35; break; }
  case 32: 
   var $116=$2;
   var $117=_nextc($116);
   $c=$117;
   var $118=(($117)|(0))==61;
   if ($118) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $120=$2;
   var $121=_intern_gen2($120, ((98048)|0), 2);
   var $122=$2;
   var $123=(($122+1124)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=$124;
   var $126=$125;
   HEAP16[(($126)>>1)]=$121;
   var $127=$2;
   var $128=(($127+40)|0);
   HEAP32[(($128)>>2)]=0;
   $1=345;
   label = 706; break;
  case 34: 
   var $130=$2;
   var $131=$c;
   _pushback($130, $131);
   $c=326;
   label = 50; break;
  case 35: 
   var $133=$c;
   var $134=(($133)|(0))==61;
   if ($134) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $136=$2;
   var $137=_intern_gen_c($136, 42);
   var $138=$2;
   var $139=(($138+1124)|0);
   var $140=HEAP32[(($139)>>2)];
   var $141=$140;
   var $142=$141;
   HEAP16[(($142)>>1)]=$137;
   var $143=$2;
   var $144=(($143+40)|0);
   HEAP32[(($144)>>2)]=0;
   $1=345;
   label = 706; break;
  case 37: 
   var $146=$2;
   var $147=$c;
   _pushback($146, $147);
   var $148=$2;
   var $149=(($148+40)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($150)|(0))==4;
   if ($151) { label = 39; break; } else { label = 38; break; }
  case 38: 
   var $153=$2;
   var $154=(($153+40)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=(($155)|(0))==5;
   if ($156) { label = 39; break; } else { label = 42; break; }
  case 39: 
   var $158=$space_seen;
   var $159=(($158)|(0))!=0;
   if ($159) { label = 40; break; } else { label = 42; break; }
  case 40: 
   var $161=$c;
   var $162=(($161) & 255);
   var $163=(($162)&(255));
   var $164=_isspace($163);
   var $165=(($164)|(0))!=0;
   if ($165) { label = 42; break; } else { label = 41; break; }
  case 41: 
   var $167=$2;
   _yywarning($167, ((102100)|0));
   $c=353;
   label = 49; break;
  case 42: 
   var $169=$2;
   var $170=(($169+40)|0);
   var $171=HEAP32[(($170)>>2)];
   var $172=(($171)|(0))==0;
   if ($172) { label = 46; break; } else { label = 43; break; }
  case 43: 
   var $174=$2;
   var $175=(($174+40)|0);
   var $176=HEAP32[(($175)>>2)];
   var $177=(($176)|(0))==6;
   if ($177) { label = 46; break; } else { label = 44; break; }
  case 44: 
   var $179=$2;
   var $180=(($179+40)|0);
   var $181=HEAP32[(($180)>>2)];
   var $182=(($181)|(0))==10;
   if ($182) { label = 46; break; } else { label = 45; break; }
  case 45: 
   var $184=$2;
   var $185=(($184+40)|0);
   var $186=HEAP32[(($185)>>2)];
   var $187=(($186)|(0))==9;
   if ($187) { label = 46; break; } else { label = 47; break; }
  case 46: 
   $c=353;
   label = 48; break;
  case 47: 
   $c=42;
   label = 48; break;
  case 48: 
   label = 49; break;
  case 49: 
   label = 50; break;
  case 50: 
   var $193=$2;
   var $194=(($193+40)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196=(($195)|(0))==7;
   if ($196) { label = 52; break; } else { label = 51; break; }
  case 51: 
   var $198=$2;
   var $199=(($198+40)|0);
   var $200=HEAP32[(($199)>>2)];
   var $201=(($200)|(0))==8;
   if ($201) { label = 52; break; } else { label = 53; break; }
  case 52: 
   var $203=$2;
   var $204=(($203+40)|0);
   HEAP32[(($204)>>2)]=4;
   label = 54; break;
  case 53: 
   var $206=$2;
   var $207=(($206+40)|0);
   HEAP32[(($207)>>2)]=0;
   label = 54; break;
  case 54: 
   var $209=$c;
   $1=$209;
   label = 706; break;
  case 55: 
   var $211=$2;
   var $212=_nextc($211);
   $c=$212;
   var $213=$2;
   var $214=(($213+40)|0);
   var $215=HEAP32[(($214)>>2)];
   var $216=(($215)|(0))==7;
   if ($216) { label = 57; break; } else { label = 56; break; }
  case 56: 
   var $218=$2;
   var $219=(($218+40)|0);
   var $220=HEAP32[(($219)>>2)];
   var $221=(($220)|(0))==8;
   if ($221) { label = 57; break; } else { label = 60; break; }
  case 57: 
   var $223=$2;
   var $224=(($223+40)|0);
   HEAP32[(($224)>>2)]=4;
   var $225=$c;
   var $226=(($225)|(0))==64;
   if ($226) { label = 58; break; } else { label = 59; break; }
  case 58: 
   $1=33;
   label = 706; break;
  case 59: 
   label = 61; break;
  case 60: 
   var $230=$2;
   var $231=(($230+40)|0);
   HEAP32[(($231)>>2)]=0;
   label = 61; break;
  case 61: 
   var $233=$c;
   var $234=(($233)|(0))==61;
   if ($234) { label = 62; break; } else { label = 63; break; }
  case 62: 
   $1=330;
   label = 706; break;
  case 63: 
   var $237=$c;
   var $238=(($237)|(0))==126;
   if ($238) { label = 64; break; } else { label = 65; break; }
  case 64: 
   $1=336;
   label = 706; break;
  case 65: 
   var $241=$2;
   var $242=$c;
   _pushback($241, $242);
   $1=33;
   label = 706; break;
  case 66: 
   var $244=$2;
   var $245=(($244+36)|0);
   var $246=HEAP32[(($245)>>2)];
   var $247=(($246)|(0))==1;
   if ($247) { label = 67; break; } else { label = 70; break; }
  case 67: 
   var $249=$2;
   var $250=_peeks($249, ((102072)|0));
   var $251=(($250)|(0))!=0;
   if ($251) { label = 68; break; } else { label = 69; break; }
  case 68: 
   var $253=$2;
   var $254=_skips($253, ((102056)|0));
   label = 10; break;
  case 69: 
   label = 70; break;
  case 70: 
   var $257=$2;
   var $258=(($257+40)|0);
   var $259=HEAP32[(($258)>>2)];
   var $260=(($259)|(0))==7;
   if ($260) { label = 72; break; } else { label = 71; break; }
  case 71: 
   var $262=$2;
   var $263=(($262+40)|0);
   var $264=HEAP32[(($263)>>2)];
   var $265=(($264)|(0))==8;
   if ($265) { label = 72; break; } else { label = 73; break; }
  case 72: 
   var $267=$2;
   var $268=(($267+40)|0);
   HEAP32[(($268)>>2)]=4;
   label = 74; break;
  case 73: 
   var $270=$2;
   var $271=(($270+40)|0);
   HEAP32[(($271)>>2)]=0;
   label = 74; break;
  case 74: 
   var $273=$2;
   var $274=_nextc($273);
   $c=$274;
   var $275=(($274)|(0))==61;
   if ($275) { label = 75; break; } else { label = 78; break; }
  case 75: 
   var $277=$2;
   var $278=_nextc($277);
   $c=$278;
   var $279=(($278)|(0))==61;
   if ($279) { label = 76; break; } else { label = 77; break; }
  case 76: 
   $1=329;
   label = 706; break;
  case 77: 
   var $282=$2;
   var $283=$c;
   _pushback($282, $283);
   $1=328;
   label = 706; break;
  case 78: 
   var $285=$c;
   var $286=(($285)|(0))==126;
   if ($286) { label = 79; break; } else { label = 80; break; }
  case 79: 
   $1=335;
   label = 706; break;
  case 80: 
   var $289=$c;
   var $290=(($289)|(0))==62;
   if ($290) { label = 81; break; } else { label = 82; break; }
  case 81: 
   $1=346;
   label = 706; break;
  case 82: 
   label = 83; break;
  case 83: 
   var $294=$2;
   var $295=$c;
   _pushback($294, $295);
   $1=61;
   label = 706; break;
  case 84: 
   var $297=$2;
   var $298=(($297+40)|0);
   var $299=HEAP32[(($298)>>2)];
   $last_state=$299;
   var $300=$2;
   var $301=_nextc($300);
   $c=$301;
   var $302=$c;
   var $303=(($302)|(0))==60;
   if ($303) { label = 85; break; } else { label = 96; break; }
  case 85: 
   var $305=$2;
   var $306=(($305+40)|0);
   var $307=HEAP32[(($306)>>2)];
   var $308=(($307)|(0))!=8;
   if ($308) { label = 86; break; } else { label = 96; break; }
  case 86: 
   var $310=$2;
   var $311=(($310+40)|0);
   var $312=HEAP32[(($311)>>2)];
   var $313=(($312)|(0))!=9;
   if ($313) { label = 87; break; } else { label = 96; break; }
  case 87: 
   var $315=$2;
   var $316=(($315+40)|0);
   var $317=HEAP32[(($316)>>2)];
   var $318=(($317)|(0))==1;
   if ($318) { label = 96; break; } else { label = 88; break; }
  case 88: 
   var $320=$2;
   var $321=(($320+40)|0);
   var $322=HEAP32[(($321)>>2)];
   var $323=(($322)|(0))==2;
   if ($323) { label = 96; break; } else { label = 89; break; }
  case 89: 
   var $325=$2;
   var $326=(($325+40)|0);
   var $327=HEAP32[(($326)>>2)];
   var $328=(($327)|(0))==3;
   if ($328) { label = 96; break; } else { label = 90; break; }
  case 90: 
   var $330=$2;
   var $331=(($330+40)|0);
   var $332=HEAP32[(($331)>>2)];
   var $333=(($332)|(0))==4;
   if ($333) { label = 92; break; } else { label = 91; break; }
  case 91: 
   var $335=$2;
   var $336=(($335+40)|0);
   var $337=HEAP32[(($336)>>2)];
   var $338=(($337)|(0))==5;
   if ($338) { label = 92; break; } else { label = 93; break; }
  case 92: 
   var $340=$space_seen;
   var $341=(($340)|(0))!=0;
   if ($341) { label = 93; break; } else { label = 96; break; }
  case 93: 
   var $343=$2;
   var $344=_heredoc_identifier($343);
   $token=$344;
   var $345=$token;
   var $346=(($345)|(0))!=0;
   if ($346) { label = 94; break; } else { label = 95; break; }
  case 94: 
   var $348=$token;
   $1=$348;
   label = 706; break;
  case 95: 
   label = 96; break;
  case 96: 
   var $351=$2;
   var $352=(($351+40)|0);
   var $353=HEAP32[(($352)>>2)];
   var $354=(($353)|(0))==7;
   if ($354) { label = 98; break; } else { label = 97; break; }
  case 97: 
   var $356=$2;
   var $357=(($356+40)|0);
   var $358=HEAP32[(($357)>>2)];
   var $359=(($358)|(0))==8;
   if ($359) { label = 98; break; } else { label = 99; break; }
  case 98: 
   var $361=$2;
   var $362=(($361+40)|0);
   HEAP32[(($362)>>2)]=4;
   label = 102; break;
  case 99: 
   var $364=$2;
   var $365=(($364+40)|0);
   HEAP32[(($365)>>2)]=0;
   var $366=$2;
   var $367=(($366+40)|0);
   var $368=HEAP32[(($367)>>2)];
   var $369=(($368)|(0))==9;
   if ($369) { label = 100; break; } else { label = 101; break; }
  case 100: 
   var $371=$2;
   var $372=(($371+72)|0);
   HEAP32[(($372)>>2)]=1;
   label = 101; break;
  case 101: 
   label = 102; break;
  case 102: 
   var $375=$c;
   var $376=(($375)|(0))==61;
   if ($376) { label = 103; break; } else { label = 106; break; }
  case 103: 
   var $378=$2;
   var $379=_nextc($378);
   $c=$379;
   var $380=(($379)|(0))==62;
   if ($380) { label = 104; break; } else { label = 105; break; }
  case 104: 
   $1=327;
   label = 706; break;
  case 105: 
   var $383=$2;
   var $384=$c;
   _pushback($383, $384);
   $1=332;
   label = 706; break;
  case 106: 
   var $386=$c;
   var $387=(($386)|(0))==60;
   if ($387) { label = 107; break; } else { label = 110; break; }
  case 107: 
   var $389=$2;
   var $390=_nextc($389);
   $c=$390;
   var $391=(($390)|(0))==61;
   if ($391) { label = 108; break; } else { label = 109; break; }
  case 108: 
   var $393=$2;
   var $394=_intern_gen2($393, ((98908)|0), 2);
   var $395=$2;
   var $396=(($395+1124)|0);
   var $397=HEAP32[(($396)>>2)];
   var $398=$397;
   var $399=$398;
   HEAP16[(($399)>>1)]=$394;
   var $400=$2;
   var $401=(($400+40)|0);
   HEAP32[(($401)>>2)]=0;
   $1=345;
   label = 706; break;
  case 109: 
   var $403=$2;
   var $404=$c;
   _pushback($403, $404);
   $1=341;
   label = 706; break;
  case 110: 
   var $406=$2;
   var $407=$c;
   _pushback($406, $407);
   $1=60;
   label = 706; break;
  case 111: 
   var $409=$2;
   var $410=(($409+40)|0);
   var $411=HEAP32[(($410)>>2)];
   var $412=(($411)|(0))==7;
   if ($412) { label = 113; break; } else { label = 112; break; }
  case 112: 
   var $414=$2;
   var $415=(($414+40)|0);
   var $416=HEAP32[(($415)>>2)];
   var $417=(($416)|(0))==8;
   if ($417) { label = 113; break; } else { label = 114; break; }
  case 113: 
   var $419=$2;
   var $420=(($419+40)|0);
   HEAP32[(($420)>>2)]=4;
   label = 115; break;
  case 114: 
   var $422=$2;
   var $423=(($422+40)|0);
   HEAP32[(($423)>>2)]=0;
   label = 115; break;
  case 115: 
   var $425=$2;
   var $426=_nextc($425);
   $c=$426;
   var $427=(($426)|(0))==61;
   if ($427) { label = 116; break; } else { label = 117; break; }
  case 116: 
   $1=331;
   label = 706; break;
  case 117: 
   var $430=$c;
   var $431=(($430)|(0))==62;
   if ($431) { label = 118; break; } else { label = 121; break; }
  case 118: 
   var $433=$2;
   var $434=_nextc($433);
   $c=$434;
   var $435=(($434)|(0))==61;
   if ($435) { label = 119; break; } else { label = 120; break; }
  case 119: 
   var $437=$2;
   var $438=_intern_gen2($437, ((98348)|0), 2);
   var $439=$2;
   var $440=(($439+1124)|0);
   var $441=HEAP32[(($440)>>2)];
   var $442=$441;
   var $443=$442;
   HEAP16[(($443)>>1)]=$438;
   var $444=$2;
   var $445=(($444+40)|0);
   HEAP32[(($445)>>2)]=0;
   $1=345;
   label = 706; break;
  case 120: 
   var $447=$2;
   var $448=$c;
   _pushback($447, $448);
   $1=342;
   label = 706; break;
  case 121: 
   var $450=$2;
   var $451=$c;
   _pushback($450, $451);
   $1=62;
   label = 706; break;
  case 122: 
   var $453=$2;
   var $454=_new_strterm($453, 3, 34, 0);
   var $455=$2;
   var $456=(($455+44)|0);
   HEAP32[(($456)>>2)]=$454;
   $1=360;
   label = 706; break;
  case 123: 
   var $458=$2;
   var $459=_new_strterm($458, 1, 39, 0);
   var $460=$2;
   var $461=(($460+44)|0);
   HEAP32[(($461)>>2)]=$459;
   var $462=$2;
   var $463=_parse_string($462);
   $1=$463;
   label = 706; break;
  case 124: 
   var $465=$2;
   var $466=(($465+40)|0);
   var $467=HEAP32[(($466)>>2)];
   var $468=(($467)|(0))==7;
   if ($468) { label = 125; break; } else { label = 126; break; }
  case 125: 
   var $470=$2;
   var $471=(($470+40)|0);
   HEAP32[(($471)>>2)]=3;
   $1=96;
   label = 706; break;
  case 126: 
   var $473=$2;
   var $474=(($473+40)|0);
   var $475=HEAP32[(($474)>>2)];
   var $476=(($475)|(0))==8;
   if ($476) { label = 127; break; } else { label = 131; break; }
  case 127: 
   var $478=$cmd_state;
   var $479=(($478)|(0))!=0;
   if ($479) { label = 128; break; } else { label = 129; break; }
  case 128: 
   var $481=$2;
   var $482=(($481+40)|0);
   HEAP32[(($482)>>2)]=5;
   label = 130; break;
  case 129: 
   var $484=$2;
   var $485=(($484+40)|0);
   HEAP32[(($485)>>2)]=4;
   label = 130; break;
  case 130: 
   $1=96;
   label = 706; break;
  case 131: 
   var $488=$2;
   var $489=_new_strterm($488, 131, 96, 0);
   var $490=$2;
   var $491=(($490+44)|0);
   HEAP32[(($491)>>2)]=$489;
   $1=361;
   label = 706; break;
  case 132: 
   var $493=$2;
   var $494=(($493+40)|0);
   var $495=HEAP32[(($494)>>2)];
   var $496=(($495)|(0))==1;
   if ($496) { label = 135; break; } else { label = 133; break; }
  case 133: 
   var $498=$2;
   var $499=(($498+40)|0);
   var $500=HEAP32[(($499)>>2)];
   var $501=(($500)|(0))==2;
   if ($501) { label = 135; break; } else { label = 134; break; }
  case 134: 
   var $503=$2;
   var $504=(($503+40)|0);
   var $505=HEAP32[(($504)>>2)];
   var $506=(($505)|(0))==3;
   if ($506) { label = 135; break; } else { label = 136; break; }
  case 135: 
   var $508=$2;
   var $509=(($508+40)|0);
   HEAP32[(($509)>>2)]=10;
   $1=63;
   label = 706; break;
  case 136: 
   var $511=$2;
   var $512=_nextc($511);
   $c=$512;
   var $513=$c;
   var $514=(($513)|(0))==-1;
   if ($514) { label = 137; break; } else { label = 138; break; }
  case 137: 
   var $516=$2;
   _yyerror($516, ((102016)|0));
   $1=0;
   label = 706; break;
  case 138: 
   var $518=$c;
   var $519=_isspace($518);
   var $520=(($519)|(0))!=0;
   if ($520) { label = 139; break; } else { label = 154; break; }
  case 139: 
   var $522=$2;
   var $523=(($522+40)|0);
   var $524=HEAP32[(($523)>>2)];
   var $525=(($524)|(0))==4;
   if ($525) { label = 152; break; } else { label = 140; break; }
  case 140: 
   var $527=$2;
   var $528=(($527+40)|0);
   var $529=HEAP32[(($528)>>2)];
   var $530=(($529)|(0))==5;
   if ($530) { label = 152; break; } else { label = 141; break; }
  case 141: 
   var $532=$c;
   if ((($532)|(0))==32) {
    label = 142; break;
   }
   else if ((($532)|(0))==10) {
    label = 143; break;
   }
   else if ((($532)|(0))==9) {
    label = 144; break;
   }
   else if ((($532)|(0))==11) {
    label = 145; break;
   }
   else if ((($532)|(0))==13) {
    label = 146; break;
   }
   else if ((($532)|(0))==12) {
    label = 147; break;
   }
   else {
   label = 148; break;
   }
  case 142: 
   $c2=115;
   label = 149; break;
  case 143: 
   $c2=110;
   label = 149; break;
  case 144: 
   $c2=116;
   label = 149; break;
  case 145: 
   $c2=118;
   label = 149; break;
  case 146: 
   $c2=114;
   label = 149; break;
  case 147: 
   $c2=102;
   label = 149; break;
  case 148: 
   $c2=0;
   label = 149; break;
  case 149: 
   var $541=$c2;
   var $542=(($541)|(0))!=0;
   if ($542) { label = 150; break; } else { label = 151; break; }
  case 150: 
   var $544=(($buf)|0);
   var $545=$c2;
   var $546=_snprintf($544, 256, ((101948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$545,tempInt));
   var $547=$2;
   var $548=(($buf)|0);
   _yyerror($547, $548);
   label = 151; break;
  case 151: 
   label = 152; break;
  case 152: 
   label = 153; break;
  case 153: 
   var $552=$2;
   var $553=$c;
   _pushback($552, $553);
   var $554=$2;
   var $555=(($554+40)|0);
   HEAP32[(($555)>>2)]=10;
   $1=63;
   label = 706; break;
  case 154: 
   var $557=$2;
   var $558=_newtok($557);
   $token_column=$558;
   var $559=$c;
   var $560=_isalnum($559);
   var $561=(($560)|(0))!=0;
   if ($561) { label = 156; break; } else { label = 155; break; }
  case 155: 
   var $563=$c;
   var $564=(($563)|(0))==95;
   if ($564) { label = 156; break; } else { label = 160; break; }
  case 156: 
   var $566=$2;
   var $567=_nextc($566);
   $c21=$567;
   var $568=$2;
   var $569=$c21;
   _pushback($568, $569);
   var $570=$c21;
   var $571=_isalnum($570);
   var $572=(($571)|(0))!=0;
   if ($572) { label = 158; break; } else { label = 157; break; }
  case 157: 
   var $574=$c21;
   var $575=(($574)|(0))==95;
   if ($575) { label = 158; break; } else { label = 159; break; }
  case 158: 
   label = 153; break;
  case 159: 
   label = 160; break;
  case 160: 
   var $579=$c;
   var $580=(($579)|(0))==92;
   if ($580) { label = 161; break; } else { label = 165; break; }
  case 161: 
   var $582=$2;
   var $583=_nextc($582);
   $c=$583;
   var $584=$c;
   var $585=(($584)|(0))==117;
   if ($585) { label = 162; break; } else { label = 163; break; }
  case 162: 
   label = 164; break;
  case 163: 
   var $588=$2;
   var $589=$c;
   _pushback($588, $589);
   var $590=$2;
   var $591=_read_escape($590);
   $c=$591;
   var $592=$2;
   var $593=$c;
   _tokadd($592, $593);
   label = 164; break;
  case 164: 
   label = 166; break;
  case 165: 
   var $596=$2;
   var $597=$c;
   _tokadd($596, $597);
   label = 166; break;
  case 166: 
   var $599=$2;
   _tokfix($599);
   var $600=$2;
   var $601=$2;
   var $602=_tok($601);
   var $603=$2;
   var $604=_toklen($603);
   var $605=_new_str($600, $602, $604);
   var $606=$2;
   var $607=(($606+1124)|0);
   var $608=HEAP32[(($607)>>2)];
   var $609=$608;
   var $610=$609;
   HEAP32[(($610)>>2)]=$605;
   var $611=$2;
   var $612=(($611+40)|0);
   HEAP32[(($612)>>2)]=1;
   $1=315;
   label = 706; break;
  case 167: 
   var $614=$2;
   var $615=_nextc($614);
   $c=$615;
   var $616=(($615)|(0))==38;
   if ($616) { label = 168; break; } else { label = 171; break; }
  case 168: 
   var $618=$2;
   var $619=(($618+40)|0);
   HEAP32[(($619)>>2)]=0;
   var $620=$2;
   var $621=_nextc($620);
   $c=$621;
   var $622=(($621)|(0))==61;
   if ($622) { label = 169; break; } else { label = 170; break; }
  case 169: 
   var $624=$2;
   var $625=_intern_gen2($624, ((101928)|0), 2);
   var $626=$2;
   var $627=(($626+1124)|0);
   var $628=HEAP32[(($627)>>2)];
   var $629=$628;
   var $630=$629;
   HEAP16[(($630)>>1)]=$625;
   var $631=$2;
   var $632=(($631+40)|0);
   HEAP32[(($632)>>2)]=0;
   $1=345;
   label = 706; break;
  case 170: 
   var $634=$2;
   var $635=$c;
   _pushback($634, $635);
   $1=333;
   label = 706; break;
  case 171: 
   var $637=$c;
   var $638=(($637)|(0))==61;
   if ($638) { label = 172; break; } else { label = 173; break; }
  case 172: 
   var $640=$2;
   var $641=_intern_gen_c($640, 38);
   var $642=$2;
   var $643=(($642+1124)|0);
   var $644=HEAP32[(($643)>>2)];
   var $645=$644;
   var $646=$645;
   HEAP16[(($646)>>1)]=$641;
   var $647=$2;
   var $648=(($647+40)|0);
   HEAP32[(($648)>>2)]=0;
   $1=345;
   label = 706; break;
  case 173: 
   label = 174; break;
  case 174: 
   var $651=$2;
   var $652=$c;
   _pushback($651, $652);
   var $653=$2;
   var $654=(($653+40)|0);
   var $655=HEAP32[(($654)>>2)];
   var $656=(($655)|(0))==4;
   if ($656) { label = 176; break; } else { label = 175; break; }
  case 175: 
   var $658=$2;
   var $659=(($658+40)|0);
   var $660=HEAP32[(($659)>>2)];
   var $661=(($660)|(0))==5;
   if ($661) { label = 176; break; } else { label = 179; break; }
  case 176: 
   var $663=$space_seen;
   var $664=(($663)|(0))!=0;
   if ($664) { label = 177; break; } else { label = 179; break; }
  case 177: 
   var $666=$c;
   var $667=(($666) & 255);
   var $668=(($667)&(255));
   var $669=_isspace($668);
   var $670=(($669)|(0))!=0;
   if ($670) { label = 179; break; } else { label = 178; break; }
  case 178: 
   var $672=$2;
   _yywarning($672, ((101892)|0));
   $c=354;
   label = 186; break;
  case 179: 
   var $674=$2;
   var $675=(($674+40)|0);
   var $676=HEAP32[(($675)>>2)];
   var $677=(($676)|(0))==0;
   if ($677) { label = 183; break; } else { label = 180; break; }
  case 180: 
   var $679=$2;
   var $680=(($679+40)|0);
   var $681=HEAP32[(($680)>>2)];
   var $682=(($681)|(0))==6;
   if ($682) { label = 183; break; } else { label = 181; break; }
  case 181: 
   var $684=$2;
   var $685=(($684+40)|0);
   var $686=HEAP32[(($685)>>2)];
   var $687=(($686)|(0))==10;
   if ($687) { label = 183; break; } else { label = 182; break; }
  case 182: 
   var $689=$2;
   var $690=(($689+40)|0);
   var $691=HEAP32[(($690)>>2)];
   var $692=(($691)|(0))==9;
   if ($692) { label = 183; break; } else { label = 184; break; }
  case 183: 
   $c=354;
   label = 185; break;
  case 184: 
   $c=38;
   label = 185; break;
  case 185: 
   label = 186; break;
  case 186: 
   var $697=$2;
   var $698=(($697+40)|0);
   var $699=HEAP32[(($698)>>2)];
   var $700=(($699)|(0))==7;
   if ($700) { label = 188; break; } else { label = 187; break; }
  case 187: 
   var $702=$2;
   var $703=(($702+40)|0);
   var $704=HEAP32[(($703)>>2)];
   var $705=(($704)|(0))==8;
   if ($705) { label = 188; break; } else { label = 189; break; }
  case 188: 
   var $707=$2;
   var $708=(($707+40)|0);
   HEAP32[(($708)>>2)]=4;
   label = 190; break;
  case 189: 
   var $710=$2;
   var $711=(($710+40)|0);
   HEAP32[(($711)>>2)]=0;
   label = 190; break;
  case 190: 
   var $713=$c;
   $1=$713;
   label = 706; break;
  case 191: 
   var $715=$2;
   var $716=_nextc($715);
   $c=$716;
   var $717=(($716)|(0))==124;
   if ($717) { label = 192; break; } else { label = 195; break; }
  case 192: 
   var $719=$2;
   var $720=(($719+40)|0);
   HEAP32[(($720)>>2)]=0;
   var $721=$2;
   var $722=_nextc($721);
   $c=$722;
   var $723=(($722)|(0))==61;
   if ($723) { label = 193; break; } else { label = 194; break; }
  case 193: 
   var $725=$2;
   var $726=_intern_gen2($725, ((101756)|0), 2);
   var $727=$2;
   var $728=(($727+1124)|0);
   var $729=HEAP32[(($728)>>2)];
   var $730=$729;
   var $731=$730;
   HEAP16[(($731)>>1)]=$726;
   var $732=$2;
   var $733=(($732+40)|0);
   HEAP32[(($733)>>2)]=0;
   $1=345;
   label = 706; break;
  case 194: 
   var $735=$2;
   var $736=$c;
   _pushback($735, $736);
   $1=334;
   label = 706; break;
  case 195: 
   var $738=$c;
   var $739=(($738)|(0))==61;
   if ($739) { label = 196; break; } else { label = 197; break; }
  case 196: 
   var $741=$2;
   var $742=_intern_gen_c($741, 124);
   var $743=$2;
   var $744=(($743+1124)|0);
   var $745=HEAP32[(($744)>>2)];
   var $746=$745;
   var $747=$746;
   HEAP16[(($747)>>1)]=$742;
   var $748=$2;
   var $749=(($748+40)|0);
   HEAP32[(($749)>>2)]=0;
   $1=345;
   label = 706; break;
  case 197: 
   var $751=$2;
   var $752=(($751+40)|0);
   var $753=HEAP32[(($752)>>2)];
   var $754=(($753)|(0))==7;
   if ($754) { label = 199; break; } else { label = 198; break; }
  case 198: 
   var $756=$2;
   var $757=(($756+40)|0);
   var $758=HEAP32[(($757)>>2)];
   var $759=(($758)|(0))==8;
   if ($759) { label = 199; break; } else { label = 200; break; }
  case 199: 
   var $761=$2;
   var $762=(($761+40)|0);
   HEAP32[(($762)>>2)]=4;
   label = 201; break;
  case 200: 
   var $764=$2;
   var $765=(($764+40)|0);
   HEAP32[(($765)>>2)]=0;
   label = 201; break;
  case 201: 
   var $767=$2;
   var $768=$c;
   _pushback($767, $768);
   $1=124;
   label = 706; break;
  case 202: 
   var $770=$2;
   var $771=_nextc($770);
   $c=$771;
   var $772=$2;
   var $773=(($772+40)|0);
   var $774=HEAP32[(($773)>>2)];
   var $775=(($774)|(0))==7;
   if ($775) { label = 204; break; } else { label = 203; break; }
  case 203: 
   var $777=$2;
   var $778=(($777+40)|0);
   var $779=HEAP32[(($778)>>2)];
   var $780=(($779)|(0))==8;
   if ($780) { label = 204; break; } else { label = 207; break; }
  case 204: 
   var $782=$2;
   var $783=(($782+40)|0);
   HEAP32[(($783)>>2)]=4;
   var $784=$c;
   var $785=(($784)|(0))==64;
   if ($785) { label = 205; break; } else { label = 206; break; }
  case 205: 
   $1=324;
   label = 706; break;
  case 206: 
   var $788=$2;
   var $789=$c;
   _pushback($788, $789);
   $1=43;
   label = 706; break;
  case 207: 
   var $791=$c;
   var $792=(($791)|(0))==61;
   if ($792) { label = 208; break; } else { label = 209; break; }
  case 208: 
   var $794=$2;
   var $795=_intern_gen_c($794, 43);
   var $796=$2;
   var $797=(($796+1124)|0);
   var $798=HEAP32[(($797)>>2)];
   var $799=$798;
   var $800=$799;
   HEAP16[(($800)>>1)]=$795;
   var $801=$2;
   var $802=(($801+40)|0);
   HEAP32[(($802)>>2)]=0;
   $1=345;
   label = 706; break;
  case 209: 
   var $804=$2;
   var $805=(($804+40)|0);
   var $806=HEAP32[(($805)>>2)];
   var $807=(($806)|(0))==0;
   if ($807) { label = 218; break; } else { label = 210; break; }
  case 210: 
   var $809=$2;
   var $810=(($809+40)|0);
   var $811=HEAP32[(($810)>>2)];
   var $812=(($811)|(0))==6;
   if ($812) { label = 218; break; } else { label = 211; break; }
  case 211: 
   var $814=$2;
   var $815=(($814+40)|0);
   var $816=HEAP32[(($815)>>2)];
   var $817=(($816)|(0))==10;
   if ($817) { label = 218; break; } else { label = 212; break; }
  case 212: 
   var $819=$2;
   var $820=(($819+40)|0);
   var $821=HEAP32[(($820)>>2)];
   var $822=(($821)|(0))==9;
   if ($822) { label = 218; break; } else { label = 213; break; }
  case 213: 
   var $824=$2;
   var $825=(($824+40)|0);
   var $826=HEAP32[(($825)>>2)];
   var $827=(($826)|(0))==4;
   if ($827) { label = 215; break; } else { label = 214; break; }
  case 214: 
   var $829=$2;
   var $830=(($829+40)|0);
   var $831=HEAP32[(($830)>>2)];
   var $832=(($831)|(0))==5;
   if ($832) { label = 215; break; } else { label = 222; break; }
  case 215: 
   var $834=$space_seen;
   var $835=(($834)|(0))!=0;
   if ($835) { label = 216; break; } else { label = 222; break; }
  case 216: 
   var $837=$c;
   var $838=(($837) & 255);
   var $839=(($838)&(255));
   var $840=_isspace($839);
   var $841=(($840)|(0))!=0;
   if ($841) { label = 222; break; } else { label = 217; break; }
  case 217: 
   var $843=$2;
   var $844=_arg_ambiguous($843);
   var $845=(($844)|(0))!=0;
   if ($845) { label = 218; break; } else { label = 222; break; }
  case 218: 
   var $847=$2;
   var $848=(($847+40)|0);
   HEAP32[(($848)>>2)]=0;
   var $849=$2;
   var $850=$c;
   _pushback($849, $850);
   var $851=$c;
   var $852=(($851)|(0))!=-1;
   if ($852) { label = 219; break; } else { label = 221; break; }
  case 219: 
   var $854=$c;
   var $855=(($854) & 255);
   var $856=(($855)&(255));
   var $857=_isdigit($856);
   var $858=(($857)|(0))!=0;
   if ($858) { label = 220; break; } else { label = 221; break; }
  case 220: 
   $c=43;
   label = 254; break;
  case 221: 
   $1=324;
   label = 706; break;
  case 222: 
   var $862=$2;
   var $863=(($862+40)|0);
   HEAP32[(($863)>>2)]=0;
   var $864=$2;
   var $865=$c;
   _pushback($864, $865);
   $1=43;
   label = 706; break;
  case 223: 
   var $867=$2;
   var $868=_nextc($867);
   $c=$868;
   var $869=$2;
   var $870=(($869+40)|0);
   var $871=HEAP32[(($870)>>2)];
   var $872=(($871)|(0))==7;
   if ($872) { label = 225; break; } else { label = 224; break; }
  case 224: 
   var $874=$2;
   var $875=(($874+40)|0);
   var $876=HEAP32[(($875)>>2)];
   var $877=(($876)|(0))==8;
   if ($877) { label = 225; break; } else { label = 228; break; }
  case 225: 
   var $879=$2;
   var $880=(($879+40)|0);
   HEAP32[(($880)>>2)]=4;
   var $881=$c;
   var $882=(($881)|(0))==64;
   if ($882) { label = 226; break; } else { label = 227; break; }
  case 226: 
   $1=325;
   label = 706; break;
  case 227: 
   var $885=$2;
   var $886=$c;
   _pushback($885, $886);
   $1=45;
   label = 706; break;
  case 228: 
   var $888=$c;
   var $889=(($888)|(0))==61;
   if ($889) { label = 229; break; } else { label = 230; break; }
  case 229: 
   var $891=$2;
   var $892=_intern_gen_c($891, 45);
   var $893=$2;
   var $894=(($893+1124)|0);
   var $895=HEAP32[(($894)>>2)];
   var $896=$895;
   var $897=$896;
   HEAP16[(($897)>>1)]=$892;
   var $898=$2;
   var $899=(($898+40)|0);
   HEAP32[(($899)>>2)]=0;
   $1=345;
   label = 706; break;
  case 230: 
   var $901=$c;
   var $902=(($901)|(0))==62;
   if ($902) { label = 231; break; } else { label = 232; break; }
  case 231: 
   var $904=$2;
   var $905=(($904+40)|0);
   HEAP32[(($905)>>2)]=3;
   $1=355;
   label = 706; break;
  case 232: 
   var $907=$2;
   var $908=(($907+40)|0);
   var $909=HEAP32[(($908)>>2)];
   var $910=(($909)|(0))==0;
   if ($910) { label = 241; break; } else { label = 233; break; }
  case 233: 
   var $912=$2;
   var $913=(($912+40)|0);
   var $914=HEAP32[(($913)>>2)];
   var $915=(($914)|(0))==6;
   if ($915) { label = 241; break; } else { label = 234; break; }
  case 234: 
   var $917=$2;
   var $918=(($917+40)|0);
   var $919=HEAP32[(($918)>>2)];
   var $920=(($919)|(0))==10;
   if ($920) { label = 241; break; } else { label = 235; break; }
  case 235: 
   var $922=$2;
   var $923=(($922+40)|0);
   var $924=HEAP32[(($923)>>2)];
   var $925=(($924)|(0))==9;
   if ($925) { label = 241; break; } else { label = 236; break; }
  case 236: 
   var $927=$2;
   var $928=(($927+40)|0);
   var $929=HEAP32[(($928)>>2)];
   var $930=(($929)|(0))==4;
   if ($930) { label = 238; break; } else { label = 237; break; }
  case 237: 
   var $932=$2;
   var $933=(($932+40)|0);
   var $934=HEAP32[(($933)>>2)];
   var $935=(($934)|(0))==5;
   if ($935) { label = 238; break; } else { label = 245; break; }
  case 238: 
   var $937=$space_seen;
   var $938=(($937)|(0))!=0;
   if ($938) { label = 239; break; } else { label = 245; break; }
  case 239: 
   var $940=$c;
   var $941=(($940) & 255);
   var $942=(($941)&(255));
   var $943=_isspace($942);
   var $944=(($943)|(0))!=0;
   if ($944) { label = 245; break; } else { label = 240; break; }
  case 240: 
   var $946=$2;
   var $947=_arg_ambiguous($946);
   var $948=(($947)|(0))!=0;
   if ($948) { label = 241; break; } else { label = 245; break; }
  case 241: 
   var $950=$2;
   var $951=(($950+40)|0);
   HEAP32[(($951)>>2)]=0;
   var $952=$2;
   var $953=$c;
   _pushback($952, $953);
   var $954=$c;
   var $955=(($954)|(0))!=-1;
   if ($955) { label = 242; break; } else { label = 244; break; }
  case 242: 
   var $957=$c;
   var $958=(($957) & 255);
   var $959=(($958)&(255));
   var $960=_isdigit($959);
   var $961=(($960)|(0))!=0;
   if ($961) { label = 243; break; } else { label = 244; break; }
  case 243: 
   $1=368;
   label = 706; break;
  case 244: 
   $1=325;
   label = 706; break;
  case 245: 
   var $965=$2;
   var $966=(($965+40)|0);
   HEAP32[(($966)>>2)]=0;
   var $967=$2;
   var $968=$c;
   _pushback($967, $968);
   $1=45;
   label = 706; break;
  case 246: 
   var $970=$2;
   var $971=(($970+40)|0);
   HEAP32[(($971)>>2)]=0;
   var $972=$2;
   var $973=_nextc($972);
   $c=$973;
   var $974=(($973)|(0))==46;
   if ($974) { label = 247; break; } else { label = 250; break; }
  case 247: 
   var $976=$2;
   var $977=_nextc($976);
   $c=$977;
   var $978=(($977)|(0))==46;
   if ($978) { label = 248; break; } else { label = 249; break; }
  case 248: 
   $1=338;
   label = 706; break;
  case 249: 
   var $981=$2;
   var $982=$c;
   _pushback($981, $982);
   $1=337;
   label = 706; break;
  case 250: 
   var $984=$2;
   var $985=$c;
   _pushback($984, $985);
   var $986=$c;
   var $987=(($986)|(0))!=-1;
   if ($987) { label = 251; break; } else { label = 253; break; }
  case 251: 
   var $989=$c;
   var $990=(($989) & 255);
   var $991=(($990)&(255));
   var $992=_isdigit($991);
   var $993=(($992)|(0))!=0;
   if ($993) { label = 252; break; } else { label = 253; break; }
  case 252: 
   var $995=$2;
   _yyerror($995, ((101688)|0));
   label = 253; break;
  case 253: 
   var $997=$2;
   var $998=(($997+40)|0);
   HEAP32[(($998)>>2)]=8;
   $1=46;
   label = 706; break;
  case 254: 
   label = 255; break;
  case 255: 
   $nondigit=0;
   $seen_e=0;
   $seen_point=0;
   $is_float=0;
   var $1001=$2;
   var $1002=(($1001+40)|0);
   HEAP32[(($1002)>>2)]=1;
   var $1003=$2;
   var $1004=_newtok($1003);
   $token_column=$1004;
   var $1005=$c;
   var $1006=(($1005)|(0))==45;
   if ($1006) { label = 257; break; } else { label = 256; break; }
  case 256: 
   var $1008=$c;
   var $1009=(($1008)|(0))==43;
   if ($1009) { label = 257; break; } else { label = 258; break; }
  case 257: 
   var $1011=$2;
   var $1012=$c;
   _tokadd($1011, $1012);
   var $1013=$2;
   var $1014=_nextc($1013);
   $c=$1014;
   label = 258; break;
  case 258: 
   var $1016=$c;
   var $1017=(($1016)|(0))==48;
   if ($1017) { label = 259; break; } else { label = 366; break; }
  case 259: 
   var $1019=$2;
   var $1020=_toklen($1019);
   $start=$1020;
   var $1021=$2;
   var $1022=_nextc($1021);
   $c=$1022;
   var $1023=$c;
   var $1024=(($1023)|(0))==120;
   if ($1024) { label = 261; break; } else { label = 260; break; }
  case 260: 
   var $1026=$c;
   var $1027=(($1026)|(0))==88;
   if ($1027) { label = 261; break; } else { label = 280; break; }
  case 261: 
   var $1029=$2;
   var $1030=_nextc($1029);
   $c=$1030;
   var $1031=$c;
   var $1032=(($1031)|(0))!=-1;
   if ($1032) { label = 262; break; } else { label = 273; break; }
  case 262: 
   var $1034=$c;
   var $1035=(($1034) & 255);
   var $1036=(($1035)&(255));
   var $1037=_isxdigit($1036);
   var $1038=(($1037)|(0))!=0;
   if ($1038) { label = 263; break; } else { label = 273; break; }
  case 263: 
   label = 264; break;
  case 264: 
   var $1041=$c;
   var $1042=(($1041)|(0))==95;
   if ($1042) { label = 265; break; } else { label = 268; break; }
  case 265: 
   var $1044=$nondigit;
   var $1045=(($1044)|(0))!=0;
   if ($1045) { label = 266; break; } else { label = 267; break; }
  case 266: 
   label = 272; break;
  case 267: 
   var $1048=$c;
   $nondigit=$1048;
   label = 271; break;
  case 268: 
   var $1050=$c;
   var $1051=(($1050) & 255);
   var $1052=(($1051)&(255));
   var $1053=_isxdigit($1052);
   var $1054=(($1053)|(0))!=0;
   if ($1054) { label = 270; break; } else { label = 269; break; }
  case 269: 
   label = 272; break;
  case 270: 
   $nondigit=0;
   var $1057=$2;
   var $1058=$c;
   var $1059=_tolower($1058);
   _tokadd($1057, $1059);
   label = 271; break;
  case 271: 
   var $1061=$2;
   var $1062=_nextc($1061);
   $c=$1062;
   var $1063=(($1062)|(0))!=-1;
   if ($1063) { label = 264; break; } else { label = 272; break; }
  case 272: 
   label = 273; break;
  case 273: 
   var $1066=$2;
   var $1067=$c;
   _pushback($1066, $1067);
   var $1068=$2;
   _tokfix($1068);
   var $1069=$2;
   var $1070=_toklen($1069);
   var $1071=$start;
   var $1072=(($1070)|(0))==(($1071)|(0));
   if ($1072) { label = 274; break; } else { label = 276; break; }
  case 274: 
   label = 275; break;
  case 275: 
   var $1075=$2;
   _yyerror($1075, ((101656)|0));
   $1=0;
   label = 706; break;
  case 276: 
   var $1078=$nondigit;
   var $1079=(($1078)|(0))!=0;
   if ($1079) { label = 277; break; } else { label = 278; break; }
  case 277: 
   label = 394; break;
  case 278: 
   label = 279; break;
  case 279: 
   var $1083=$2;
   var $1084=$2;
   var $1085=_tok($1084);
   var $1086=_new_int($1083, $1085, 16);
   var $1087=$2;
   var $1088=(($1087+1124)|0);
   var $1089=HEAP32[(($1088)>>2)];
   var $1090=$1089;
   var $1091=$1090;
   HEAP32[(($1091)>>2)]=$1086;
   $1=313;
   label = 706; break;
  case 280: 
   var $1093=$c;
   var $1094=(($1093)|(0))==98;
   if ($1094) { label = 282; break; } else { label = 281; break; }
  case 281: 
   var $1096=$c;
   var $1097=(($1096)|(0))==66;
   if ($1097) { label = 282; break; } else { label = 302; break; }
  case 282: 
   var $1099=$2;
   var $1100=_nextc($1099);
   $c=$1100;
   var $1101=$c;
   var $1102=(($1101)|(0))==48;
   if ($1102) { label = 284; break; } else { label = 283; break; }
  case 283: 
   var $1104=$c;
   var $1105=(($1104)|(0))==49;
   if ($1105) { label = 284; break; } else { label = 295; break; }
  case 284: 
   label = 285; break;
  case 285: 
   var $1108=$c;
   var $1109=(($1108)|(0))==95;
   if ($1109) { label = 286; break; } else { label = 289; break; }
  case 286: 
   var $1111=$nondigit;
   var $1112=(($1111)|(0))!=0;
   if ($1112) { label = 287; break; } else { label = 288; break; }
  case 287: 
   label = 294; break;
  case 288: 
   var $1115=$c;
   $nondigit=$1115;
   label = 293; break;
  case 289: 
   var $1117=$c;
   var $1118=(($1117)|(0))!=48;
   if ($1118) { label = 290; break; } else { label = 292; break; }
  case 290: 
   var $1120=$c;
   var $1121=(($1120)|(0))!=49;
   if ($1121) { label = 291; break; } else { label = 292; break; }
  case 291: 
   label = 294; break;
  case 292: 
   $nondigit=0;
   var $1124=$2;
   var $1125=$c;
   _tokadd($1124, $1125);
   label = 293; break;
  case 293: 
   var $1127=$2;
   var $1128=_nextc($1127);
   $c=$1128;
   var $1129=(($1128)|(0))!=-1;
   if ($1129) { label = 285; break; } else { label = 294; break; }
  case 294: 
   label = 295; break;
  case 295: 
   var $1132=$2;
   var $1133=$c;
   _pushback($1132, $1133);
   var $1134=$2;
   _tokfix($1134);
   var $1135=$2;
   var $1136=_toklen($1135);
   var $1137=$start;
   var $1138=(($1136)|(0))==(($1137)|(0));
   if ($1138) { label = 296; break; } else { label = 298; break; }
  case 296: 
   label = 297; break;
  case 297: 
   var $1141=$2;
   _yyerror($1141, ((101656)|0));
   $1=0;
   label = 706; break;
  case 298: 
   var $1144=$nondigit;
   var $1145=(($1144)|(0))!=0;
   if ($1145) { label = 299; break; } else { label = 300; break; }
  case 299: 
   label = 394; break;
  case 300: 
   label = 301; break;
  case 301: 
   var $1149=$2;
   var $1150=$2;
   var $1151=_tok($1150);
   var $1152=_new_int($1149, $1151, 2);
   var $1153=$2;
   var $1154=(($1153+1124)|0);
   var $1155=HEAP32[(($1154)>>2)];
   var $1156=$1155;
   var $1157=$1156;
   HEAP32[(($1157)>>2)]=$1152;
   $1=313;
   label = 706; break;
  case 302: 
   var $1159=$c;
   var $1160=(($1159)|(0))==100;
   if ($1160) { label = 304; break; } else { label = 303; break; }
  case 303: 
   var $1162=$c;
   var $1163=(($1162)|(0))==68;
   if ($1163) { label = 304; break; } else { label = 323; break; }
  case 304: 
   var $1165=$2;
   var $1166=_nextc($1165);
   $c=$1166;
   var $1167=$c;
   var $1168=(($1167)|(0))!=-1;
   if ($1168) { label = 305; break; } else { label = 316; break; }
  case 305: 
   var $1170=$c;
   var $1171=(($1170) & 255);
   var $1172=(($1171)&(255));
   var $1173=_isdigit($1172);
   var $1174=(($1173)|(0))!=0;
   if ($1174) { label = 306; break; } else { label = 316; break; }
  case 306: 
   label = 307; break;
  case 307: 
   var $1177=$c;
   var $1178=(($1177)|(0))==95;
   if ($1178) { label = 308; break; } else { label = 311; break; }
  case 308: 
   var $1180=$nondigit;
   var $1181=(($1180)|(0))!=0;
   if ($1181) { label = 309; break; } else { label = 310; break; }
  case 309: 
   label = 315; break;
  case 310: 
   var $1184=$c;
   $nondigit=$1184;
   label = 314; break;
  case 311: 
   var $1186=$c;
   var $1187=(($1186) & 255);
   var $1188=(($1187)&(255));
   var $1189=_isdigit($1188);
   var $1190=(($1189)|(0))!=0;
   if ($1190) { label = 313; break; } else { label = 312; break; }
  case 312: 
   label = 315; break;
  case 313: 
   $nondigit=0;
   var $1193=$2;
   var $1194=$c;
   _tokadd($1193, $1194);
   label = 314; break;
  case 314: 
   var $1196=$2;
   var $1197=_nextc($1196);
   $c=$1197;
   var $1198=(($1197)|(0))!=-1;
   if ($1198) { label = 307; break; } else { label = 315; break; }
  case 315: 
   label = 316; break;
  case 316: 
   var $1201=$2;
   var $1202=$c;
   _pushback($1201, $1202);
   var $1203=$2;
   _tokfix($1203);
   var $1204=$2;
   var $1205=_toklen($1204);
   var $1206=$start;
   var $1207=(($1205)|(0))==(($1206)|(0));
   if ($1207) { label = 317; break; } else { label = 319; break; }
  case 317: 
   label = 318; break;
  case 318: 
   var $1210=$2;
   _yyerror($1210, ((101656)|0));
   $1=0;
   label = 706; break;
  case 319: 
   var $1213=$nondigit;
   var $1214=(($1213)|(0))!=0;
   if ($1214) { label = 320; break; } else { label = 321; break; }
  case 320: 
   label = 394; break;
  case 321: 
   label = 322; break;
  case 322: 
   var $1218=$2;
   var $1219=$2;
   var $1220=_tok($1219);
   var $1221=_new_int($1218, $1220, 10);
   var $1222=$2;
   var $1223=(($1222+1124)|0);
   var $1224=HEAP32[(($1223)>>2)];
   var $1225=$1224;
   var $1226=$1225;
   HEAP32[(($1226)>>2)]=$1221;
   $1=313;
   label = 706; break;
  case 323: 
   var $1228=$c;
   var $1229=(($1228)|(0))==95;
   if ($1229) { label = 324; break; } else { label = 325; break; }
  case 324: 
   label = 336; break;
  case 325: 
   var $1232=$c;
   var $1233=(($1232)|(0))==111;
   if ($1233) { label = 327; break; } else { label = 326; break; }
  case 326: 
   var $1235=$c;
   var $1236=(($1235)|(0))==79;
   if ($1236) { label = 327; break; } else { label = 333; break; }
  case 327: 
   var $1238=$2;
   var $1239=_nextc($1238);
   $c=$1239;
   var $1240=$c;
   var $1241=(($1240)|(0))==-1;
   if ($1241) { label = 330; break; } else { label = 328; break; }
  case 328: 
   var $1243=$c;
   var $1244=(($1243)|(0))==95;
   if ($1244) { label = 330; break; } else { label = 329; break; }
  case 329: 
   var $1246=$c;
   var $1247=(($1246) & 255);
   var $1248=(($1247)&(255));
   var $1249=_isdigit($1248);
   var $1250=(($1249)|(0))!=0;
   if ($1250) { label = 332; break; } else { label = 330; break; }
  case 330: 
   label = 331; break;
  case 331: 
   var $1253=$2;
   _yyerror($1253, ((101656)|0));
   $1=0;
   label = 706; break;
  case 332: 
   label = 333; break;
  case 333: 
   var $1257=$c;
   var $1258=(($1257)|(0)) >= 48;
   if ($1258) { label = 334; break; } else { label = 355; break; }
  case 334: 
   var $1260=$c;
   var $1261=(($1260)|(0)) <= 55;
   if ($1261) { label = 335; break; } else { label = 355; break; }
  case 335: 
   label = 336; break;
  case 336: 
   label = 337; break;
  case 337: 
   var $1265=$c;
   var $1266=(($1265)|(0))==95;
   if ($1266) { label = 338; break; } else { label = 341; break; }
  case 338: 
   var $1268=$nondigit;
   var $1269=(($1268)|(0))!=0;
   if ($1269) { label = 339; break; } else { label = 340; break; }
  case 339: 
   label = 348; break;
  case 340: 
   var $1272=$c;
   $nondigit=$1272;
   label = 347; break;
  case 341: 
   var $1274=$c;
   var $1275=(($1274)|(0)) < 48;
   if ($1275) { label = 343; break; } else { label = 342; break; }
  case 342: 
   var $1277=$c;
   var $1278=(($1277)|(0)) > 57;
   if ($1278) { label = 343; break; } else { label = 344; break; }
  case 343: 
   label = 348; break;
  case 344: 
   var $1281=$c;
   var $1282=(($1281)|(0)) > 55;
   if ($1282) { label = 345; break; } else { label = 346; break; }
  case 345: 
   label = 358; break;
  case 346: 
   $nondigit=0;
   var $1285=$2;
   var $1286=$c;
   _tokadd($1285, $1286);
   label = 347; break;
  case 347: 
   var $1288=$2;
   var $1289=_nextc($1288);
   $c=$1289;
   var $1290=(($1289)|(0))!=-1;
   if ($1290) { label = 337; break; } else { label = 348; break; }
  case 348: 
   var $1292=$2;
   var $1293=_toklen($1292);
   var $1294=$start;
   var $1295=(($1293)|(0)) > (($1294)|(0));
   if ($1295) { label = 349; break; } else { label = 352; break; }
  case 349: 
   var $1297=$2;
   var $1298=$c;
   _pushback($1297, $1298);
   var $1299=$2;
   _tokfix($1299);
   var $1300=$nondigit;
   var $1301=(($1300)|(0))!=0;
   if ($1301) { label = 350; break; } else { label = 351; break; }
  case 350: 
   label = 394; break;
  case 351: 
   var $1304=$2;
   var $1305=$2;
   var $1306=_tok($1305);
   var $1307=_new_int($1304, $1306, 8);
   var $1308=$2;
   var $1309=(($1308+1124)|0);
   var $1310=HEAP32[(($1309)>>2)];
   var $1311=$1310;
   var $1312=$1311;
   HEAP32[(($1312)>>2)]=$1307;
   $1=313;
   label = 706; break;
  case 352: 
   var $1314=$nondigit;
   var $1315=(($1314)|(0))!=0;
   if ($1315) { label = 353; break; } else { label = 354; break; }
  case 353: 
   var $1317=$2;
   var $1318=$c;
   _pushback($1317, $1318);
   label = 394; break;
  case 354: 
   label = 355; break;
  case 355: 
   var $1321=$c;
   var $1322=(($1321)|(0)) > 55;
   if ($1322) { label = 356; break; } else { label = 359; break; }
  case 356: 
   var $1324=$c;
   var $1325=(($1324)|(0)) <= 57;
   if ($1325) { label = 357; break; } else { label = 359; break; }
  case 357: 
   label = 358; break;
  case 358: 
   var $1328=$2;
   _yyerror($1328, ((101636)|0));
   label = 365; break;
  case 359: 
   var $1330=$c;
   var $1331=(($1330)|(0))==46;
   if ($1331) { label = 362; break; } else { label = 360; break; }
  case 360: 
   var $1333=$c;
   var $1334=(($1333)|(0))==101;
   if ($1334) { label = 362; break; } else { label = 361; break; }
  case 361: 
   var $1336=$c;
   var $1337=(($1336)|(0))==69;
   if ($1337) { label = 362; break; } else { label = 363; break; }
  case 362: 
   var $1339=$2;
   _tokadd($1339, 48);
   label = 364; break;
  case 363: 
   var $1341=$2;
   var $1342=$c;
   _pushback($1341, $1342);
   var $1343=$2;
   var $1344=_new_int($1343, ((101624)|0), 10);
   var $1345=$2;
   var $1346=(($1345+1124)|0);
   var $1347=HEAP32[(($1346)>>2)];
   var $1348=$1347;
   var $1349=$1348;
   HEAP32[(($1349)>>2)]=$1344;
   $1=313;
   label = 706; break;
  case 364: 
   label = 365; break;
  case 365: 
   label = 366; break;
  case 366: 
   label = 367; break;
  case 367: 
   var $1354=$c;
   if ((($1354)|(0))==48 | (($1354)|(0))==49 | (($1354)|(0))==50 | (($1354)|(0))==51 | (($1354)|(0))==52 | (($1354)|(0))==53 | (($1354)|(0))==54 | (($1354)|(0))==55 | (($1354)|(0))==56 | (($1354)|(0))==57) {
    label = 368; break;
   }
   else if ((($1354)|(0))==46) {
    label = 369; break;
   }
   else if ((($1354)|(0))==101 | (($1354)|(0))==69) {
    label = 379; break;
   }
   else if ((($1354)|(0))==95) {
    label = 387; break;
   }
   else {
   label = 390; break;
   }
  case 368: 
   $nondigit=0;
   var $1356=$2;
   var $1357=$c;
   _tokadd($1356, $1357);
   label = 391; break;
  case 369: 
   var $1359=$nondigit;
   var $1360=(($1359)|(0))!=0;
   if ($1360) { label = 370; break; } else { label = 371; break; }
  case 370: 
   label = 394; break;
  case 371: 
   var $1363=$seen_point;
   var $1364=(($1363)|(0))!=0;
   if ($1364) { label = 373; break; } else { label = 372; break; }
  case 372: 
   var $1366=$seen_e;
   var $1367=(($1366)|(0))!=0;
   if ($1367) { label = 373; break; } else { label = 374; break; }
  case 373: 
   label = 392; break;
  case 374: 
   var $1370=$2;
   var $1371=_nextc($1370);
   $c0=$1371;
   var $1372=$c0;
   var $1373=(($1372)|(0))==-1;
   if ($1373) { label = 376; break; } else { label = 375; break; }
  case 375: 
   var $1375=$c0;
   var $1376=(($1375) & 255);
   var $1377=(($1376)&(255));
   var $1378=_isdigit($1377);
   var $1379=(($1378)|(0))!=0;
   if ($1379) { label = 377; break; } else { label = 376; break; }
  case 376: 
   var $1381=$2;
   var $1382=$c0;
   _pushback($1381, $1382);
   label = 392; break;
  case 377: 
   var $1384=$c0;
   $c=$1384;
   label = 378; break;
  case 378: 
   var $1386=$2;
   _tokadd($1386, 46);
   var $1387=$2;
   var $1388=$c;
   _tokadd($1387, $1388);
   var $1389=$is_float;
   var $1390=((($1389)+(1))|0);
   $is_float=$1390;
   var $1391=$seen_point;
   var $1392=((($1391)+(1))|0);
   $seen_point=$1392;
   $nondigit=0;
   label = 391; break;
  case 379: 
   var $1394=$nondigit;
   var $1395=(($1394)|(0))!=0;
   if ($1395) { label = 380; break; } else { label = 381; break; }
  case 380: 
   var $1397=$2;
   var $1398=$c;
   _pushback($1397, $1398);
   var $1399=$nondigit;
   $c=$1399;
   label = 392; break;
  case 381: 
   var $1401=$seen_e;
   var $1402=(($1401)|(0))!=0;
   if ($1402) { label = 382; break; } else { label = 383; break; }
  case 382: 
   label = 392; break;
  case 383: 
   var $1405=$2;
   var $1406=$c;
   _tokadd($1405, $1406);
   var $1407=$seen_e;
   var $1408=((($1407)+(1))|0);
   $seen_e=$1408;
   var $1409=$is_float;
   var $1410=((($1409)+(1))|0);
   $is_float=$1410;
   var $1411=$c;
   $nondigit=$1411;
   var $1412=$2;
   var $1413=_nextc($1412);
   $c=$1413;
   var $1414=$c;
   var $1415=(($1414)|(0))!=45;
   if ($1415) { label = 384; break; } else { label = 386; break; }
  case 384: 
   var $1417=$c;
   var $1418=(($1417)|(0))!=43;
   if ($1418) { label = 385; break; } else { label = 386; break; }
  case 385: 
   label = 367; break;
  case 386: 
   var $1421=$2;
   var $1422=$c;
   _tokadd($1421, $1422);
   var $1423=$c;
   $nondigit=$1423;
   label = 391; break;
  case 387: 
   var $1425=$nondigit;
   var $1426=(($1425)|(0))!=0;
   if ($1426) { label = 388; break; } else { label = 389; break; }
  case 388: 
   label = 392; break;
  case 389: 
   var $1429=$c;
   $nondigit=$1429;
   label = 391; break;
  case 390: 
   label = 392; break;
  case 391: 
   var $1432=$2;
   var $1433=_nextc($1432);
   $c=$1433;
   label = 367; break;
  case 392: 
   var $1435=$2;
   var $1436=$c;
   _pushback($1435, $1436);
   var $1437=$nondigit;
   var $1438=(($1437)|(0))!=0;
   if ($1438) { label = 393; break; } else { label = 395; break; }
  case 393: 
   label = 394; break;
  case 394: 
   var $1441=$2;
   var $1442=$nondigit;
   _yyerror_i($1441, ((101592)|0), $1442);
   label = 395; break;
  case 395: 
   var $1444=$2;
   _tokfix($1444);
   var $1445=$is_float;
   var $1446=(($1445)|(0))!=0;
   if ($1446) { label = 396; break; } else { label = 403; break; }
  case 396: 
   var $1448=___errno_location();
   HEAP32[(($1448)>>2)]=0;
   var $1449=$2;
   var $1450=_tok($1449);
   var $1451=_strtod($1450, $endp);
   $d=$1451;
   var $1452=$d;
   var $1453=$1452 == 0;
   if ($1453) { label = 397; break; } else { label = 399; break; }
  case 397: 
   var $1455=HEAP32[(($endp)>>2)];
   var $1456=$2;
   var $1457=_tok($1456);
   var $1458=(($1455)|(0))==(($1457)|(0));
   if ($1458) { label = 398; break; } else { label = 399; break; }
  case 398: 
   var $1460=$2;
   var $1461=$2;
   var $1462=_tok($1461);
   _yywarning_s($1460, ((101540)|0), $1462);
   label = 402; break;
  case 399: 
   var $1464=___errno_location();
   var $1465=HEAP32[(($1464)>>2)];
   var $1466=(($1465)|(0))==34;
   if ($1466) { label = 400; break; } else { label = 401; break; }
  case 400: 
   var $1468=$2;
   var $1469=$2;
   var $1470=_tok($1469);
   _yywarning_s($1468, ((101484)|0), $1470);
   var $1471=___errno_location();
   HEAP32[(($1471)>>2)]=0;
   label = 401; break;
  case 401: 
   label = 402; break;
  case 402: 
   var $1474=$2;
   var $1475=$2;
   var $1476=_tok($1475);
   var $1477=_new_float($1474, $1476);
   var $1478=$2;
   var $1479=(($1478+1124)|0);
   var $1480=HEAP32[(($1479)>>2)];
   var $1481=$1480;
   var $1482=$1481;
   HEAP32[(($1482)>>2)]=$1477;
   $1=314;
   label = 706; break;
  case 403: 
   var $1484=$2;
   var $1485=$2;
   var $1486=_tok($1485);
   var $1487=_new_int($1484, $1486, 10);
   var $1488=$2;
   var $1489=(($1488+1124)|0);
   var $1490=HEAP32[(($1489)>>2)];
   var $1491=$1490;
   var $1492=$1491;
   HEAP32[(($1492)>>2)]=$1487;
   $1=313;
   label = 706; break;
  case 404: 
   var $1494=$2;
   var $1495=(($1494+56)|0);
   var $1496=HEAP32[(($1495)>>2)];
   var $1497=((($1496)-(1))|0);
   HEAP32[(($1495)>>2)]=$1497;
   label = 405; break;
  case 405: 
   var $1499=$2;
   var $1500=(($1499+48)|0);
   var $1501=HEAP32[(($1500)>>2)];
   var $1502=$1501 >>> 1;
   var $1503=$2;
   var $1504=(($1503+48)|0);
   var $1505=HEAP32[(($1504)>>2)];
   var $1506=$1505 & 1;
   var $1507=$1502 | $1506;
   var $1508=$2;
   var $1509=(($1508+48)|0);
   HEAP32[(($1509)>>2)]=$1507;
   var $1510=$2;
   var $1511=(($1510+52)|0);
   var $1512=HEAP32[(($1511)>>2)];
   var $1513=$1512 >>> 1;
   var $1514=$2;
   var $1515=(($1514+52)|0);
   var $1516=HEAP32[(($1515)>>2)];
   var $1517=$1516 & 1;
   var $1518=$1513 | $1517;
   var $1519=$2;
   var $1520=(($1519+52)|0);
   HEAP32[(($1520)>>2)]=$1518;
   var $1521=$c;
   var $1522=(($1521)|(0))==41;
   if ($1522) { label = 406; break; } else { label = 407; break; }
  case 406: 
   var $1524=$2;
   var $1525=(($1524+40)|0);
   HEAP32[(($1525)>>2)]=3;
   label = 408; break;
  case 407: 
   var $1527=$2;
   var $1528=(($1527+40)|0);
   HEAP32[(($1528)>>2)]=2;
   label = 408; break;
  case 408: 
   var $1530=$c;
   $1=$1530;
   label = 706; break;
  case 409: 
   var $1532=$2;
   var $1533=_nextc($1532);
   $c=$1533;
   var $1534=$c;
   var $1535=(($1534)|(0))==58;
   if ($1535) { label = 410; break; } else { label = 421; break; }
  case 410: 
   var $1537=$2;
   var $1538=(($1537+40)|0);
   var $1539=HEAP32[(($1538)>>2)];
   var $1540=(($1539)|(0))==0;
   if ($1540) { label = 419; break; } else { label = 411; break; }
  case 411: 
   var $1542=$2;
   var $1543=(($1542+40)|0);
   var $1544=HEAP32[(($1543)>>2)];
   var $1545=(($1544)|(0))==6;
   if ($1545) { label = 419; break; } else { label = 412; break; }
  case 412: 
   var $1547=$2;
   var $1548=(($1547+40)|0);
   var $1549=HEAP32[(($1548)>>2)];
   var $1550=(($1549)|(0))==10;
   if ($1550) { label = 419; break; } else { label = 413; break; }
  case 413: 
   var $1552=$2;
   var $1553=(($1552+40)|0);
   var $1554=HEAP32[(($1553)>>2)];
   var $1555=(($1554)|(0))==9;
   if ($1555) { label = 419; break; } else { label = 414; break; }
  case 414: 
   var $1557=$2;
   var $1558=(($1557+40)|0);
   var $1559=HEAP32[(($1558)>>2)];
   var $1560=(($1559)|(0))==9;
   if ($1560) { label = 419; break; } else { label = 415; break; }
  case 415: 
   var $1562=$2;
   var $1563=(($1562+40)|0);
   var $1564=HEAP32[(($1563)>>2)];
   var $1565=(($1564)|(0))==4;
   if ($1565) { label = 417; break; } else { label = 416; break; }
  case 416: 
   var $1567=$2;
   var $1568=(($1567+40)|0);
   var $1569=HEAP32[(($1568)>>2)];
   var $1570=(($1569)|(0))==5;
   if ($1570) { label = 417; break; } else { label = 420; break; }
  case 417: 
   var $1572=$space_seen;
   var $1573=(($1572)|(0))!=0;
   if ($1573) { label = 418; break; } else { label = 420; break; }
  case 418: 
   var $1575=_isspace(255);
   var $1576=(($1575)|(0))!=0;
   if ($1576) { label = 420; break; } else { label = 419; break; }
  case 419: 
   var $1578=$2;
   var $1579=(($1578+40)|0);
   HEAP32[(($1579)>>2)]=0;
   $1=344;
   label = 706; break;
  case 420: 
   var $1581=$2;
   var $1582=(($1581+40)|0);
   HEAP32[(($1582)>>2)]=8;
   $1=343;
   label = 706; break;
  case 421: 
   var $1584=$2;
   var $1585=(($1584+40)|0);
   var $1586=HEAP32[(($1585)>>2)];
   var $1587=(($1586)|(0))==1;
   if ($1587) { label = 425; break; } else { label = 422; break; }
  case 422: 
   var $1589=$2;
   var $1590=(($1589+40)|0);
   var $1591=HEAP32[(($1590)>>2)];
   var $1592=(($1591)|(0))==2;
   if ($1592) { label = 425; break; } else { label = 423; break; }
  case 423: 
   var $1594=$2;
   var $1595=(($1594+40)|0);
   var $1596=HEAP32[(($1595)>>2)];
   var $1597=(($1596)|(0))==3;
   if ($1597) { label = 425; break; } else { label = 424; break; }
  case 424: 
   var $1599=$c;
   var $1600=(($1599) & 255);
   var $1601=(($1600)&(255));
   var $1602=_isspace($1601);
   var $1603=(($1602)|(0))!=0;
   if ($1603) { label = 425; break; } else { label = 426; break; }
  case 425: 
   var $1605=$2;
   var $1606=$c;
   _pushback($1605, $1606);
   var $1607=$2;
   var $1608=(($1607+40)|0);
   HEAP32[(($1608)>>2)]=0;
   $1=58;
   label = 706; break;
  case 426: 
   var $1610=$2;
   var $1611=$c;
   _pushback($1610, $1611);
   var $1612=$2;
   var $1613=(($1612+40)|0);
   HEAP32[(($1613)>>2)]=7;
   $1=356;
   label = 706; break;
  case 427: 
   var $1615=$2;
   var $1616=(($1615+40)|0);
   var $1617=HEAP32[(($1616)>>2)];
   var $1618=(($1617)|(0))==0;
   if ($1618) { label = 431; break; } else { label = 428; break; }
  case 428: 
   var $1620=$2;
   var $1621=(($1620+40)|0);
   var $1622=HEAP32[(($1621)>>2)];
   var $1623=(($1622)|(0))==6;
   if ($1623) { label = 431; break; } else { label = 429; break; }
  case 429: 
   var $1625=$2;
   var $1626=(($1625+40)|0);
   var $1627=HEAP32[(($1626)>>2)];
   var $1628=(($1627)|(0))==10;
   if ($1628) { label = 431; break; } else { label = 430; break; }
  case 430: 
   var $1630=$2;
   var $1631=(($1630+40)|0);
   var $1632=HEAP32[(($1631)>>2)];
   var $1633=(($1632)|(0))==9;
   if ($1633) { label = 431; break; } else { label = 432; break; }
  case 431: 
   var $1635=$2;
   var $1636=_new_strterm($1635, 7, 47, 0);
   var $1637=$2;
   var $1638=(($1637+44)|0);
   HEAP32[(($1638)>>2)]=$1636;
   $1=357;
   label = 706; break;
  case 432: 
   var $1640=$2;
   var $1641=_nextc($1640);
   $c=$1641;
   var $1642=(($1641)|(0))==61;
   if ($1642) { label = 433; break; } else { label = 434; break; }
  case 433: 
   var $1644=$2;
   var $1645=_intern_gen_c($1644, 47);
   var $1646=$2;
   var $1647=(($1646+1124)|0);
   var $1648=HEAP32[(($1647)>>2)];
   var $1649=$1648;
   var $1650=$1649;
   HEAP16[(($1650)>>1)]=$1645;
   var $1651=$2;
   var $1652=(($1651+40)|0);
   HEAP32[(($1652)>>2)]=0;
   $1=345;
   label = 706; break;
  case 434: 
   var $1654=$2;
   var $1655=$c;
   _pushback($1654, $1655);
   var $1656=$2;
   var $1657=(($1656+40)|0);
   var $1658=HEAP32[(($1657)>>2)];
   var $1659=(($1658)|(0))==4;
   if ($1659) { label = 436; break; } else { label = 435; break; }
  case 435: 
   var $1661=$2;
   var $1662=(($1661+40)|0);
   var $1663=HEAP32[(($1662)>>2)];
   var $1664=(($1663)|(0))==5;
   if ($1664) { label = 436; break; } else { label = 439; break; }
  case 436: 
   var $1666=$space_seen;
   var $1667=(($1666)|(0))!=0;
   if ($1667) { label = 437; break; } else { label = 439; break; }
  case 437: 
   var $1669=$c;
   var $1670=(($1669) & 255);
   var $1671=(($1670)&(255));
   var $1672=_isspace($1671);
   var $1673=(($1672)|(0))!=0;
   if ($1673) { label = 439; break; } else { label = 438; break; }
  case 438: 
   var $1675=$2;
   var $1676=_new_strterm($1675, 7, 47, 0);
   var $1677=$2;
   var $1678=(($1677+44)|0);
   HEAP32[(($1678)>>2)]=$1676;
   $1=357;
   label = 706; break;
  case 439: 
   var $1680=$2;
   var $1681=(($1680+40)|0);
   var $1682=HEAP32[(($1681)>>2)];
   var $1683=(($1682)|(0))==7;
   if ($1683) { label = 441; break; } else { label = 440; break; }
  case 440: 
   var $1685=$2;
   var $1686=(($1685+40)|0);
   var $1687=HEAP32[(($1686)>>2)];
   var $1688=(($1687)|(0))==8;
   if ($1688) { label = 441; break; } else { label = 442; break; }
  case 441: 
   var $1690=$2;
   var $1691=(($1690+40)|0);
   HEAP32[(($1691)>>2)]=4;
   label = 443; break;
  case 442: 
   var $1693=$2;
   var $1694=(($1693+40)|0);
   HEAP32[(($1694)>>2)]=0;
   label = 443; break;
  case 443: 
   $1=47;
   label = 706; break;
  case 444: 
   var $1697=$2;
   var $1698=_nextc($1697);
   $c=$1698;
   var $1699=(($1698)|(0))==61;
   if ($1699) { label = 445; break; } else { label = 446; break; }
  case 445: 
   var $1701=$2;
   var $1702=_intern_gen_c($1701, 94);
   var $1703=$2;
   var $1704=(($1703+1124)|0);
   var $1705=HEAP32[(($1704)>>2)];
   var $1706=$1705;
   var $1707=$1706;
   HEAP16[(($1707)>>1)]=$1702;
   var $1708=$2;
   var $1709=(($1708+40)|0);
   HEAP32[(($1709)>>2)]=0;
   $1=345;
   label = 706; break;
  case 446: 
   var $1711=$2;
   var $1712=(($1711+40)|0);
   var $1713=HEAP32[(($1712)>>2)];
   var $1714=(($1713)|(0))==7;
   if ($1714) { label = 448; break; } else { label = 447; break; }
  case 447: 
   var $1716=$2;
   var $1717=(($1716+40)|0);
   var $1718=HEAP32[(($1717)>>2)];
   var $1719=(($1718)|(0))==8;
   if ($1719) { label = 448; break; } else { label = 449; break; }
  case 448: 
   var $1721=$2;
   var $1722=(($1721+40)|0);
   HEAP32[(($1722)>>2)]=4;
   label = 450; break;
  case 449: 
   var $1724=$2;
   var $1725=(($1724+40)|0);
   HEAP32[(($1725)>>2)]=0;
   label = 450; break;
  case 450: 
   var $1727=$2;
   var $1728=$c;
   _pushback($1727, $1728);
   $1=94;
   label = 706; break;
  case 451: 
   var $1730=$2;
   var $1731=(($1730+40)|0);
   HEAP32[(($1731)>>2)]=0;
   $1=59;
   label = 706; break;
  case 452: 
   var $1733=$2;
   var $1734=(($1733+40)|0);
   HEAP32[(($1734)>>2)]=0;
   $1=44;
   label = 706; break;
  case 453: 
   var $1736=$2;
   var $1737=(($1736+40)|0);
   var $1738=HEAP32[(($1737)>>2)];
   var $1739=(($1738)|(0))==7;
   if ($1739) { label = 455; break; } else { label = 454; break; }
  case 454: 
   var $1741=$2;
   var $1742=(($1741+40)|0);
   var $1743=HEAP32[(($1742)>>2)];
   var $1744=(($1743)|(0))==8;
   if ($1744) { label = 455; break; } else { label = 458; break; }
  case 455: 
   var $1746=$2;
   var $1747=_nextc($1746);
   $c=$1747;
   var $1748=(($1747)|(0))!=64;
   if ($1748) { label = 456; break; } else { label = 457; break; }
  case 456: 
   var $1750=$2;
   var $1751=$c;
   _pushback($1750, $1751);
   label = 457; break;
  case 457: 
   var $1753=$2;
   var $1754=(($1753+40)|0);
   HEAP32[(($1754)>>2)]=4;
   label = 459; break;
  case 458: 
   var $1756=$2;
   var $1757=(($1756+40)|0);
   HEAP32[(($1757)>>2)]=0;
   label = 459; break;
  case 459: 
   $1=126;
   label = 706; break;
  case 460: 
   var $1760=$2;
   var $1761=(($1760+40)|0);
   var $1762=HEAP32[(($1761)>>2)];
   var $1763=(($1762)|(0))==0;
   if ($1763) { label = 464; break; } else { label = 461; break; }
  case 461: 
   var $1765=$2;
   var $1766=(($1765+40)|0);
   var $1767=HEAP32[(($1766)>>2)];
   var $1768=(($1767)|(0))==6;
   if ($1768) { label = 464; break; } else { label = 462; break; }
  case 462: 
   var $1770=$2;
   var $1771=(($1770+40)|0);
   var $1772=HEAP32[(($1771)>>2)];
   var $1773=(($1772)|(0))==10;
   if ($1773) { label = 464; break; } else { label = 463; break; }
  case 463: 
   var $1775=$2;
   var $1776=(($1775+40)|0);
   var $1777=HEAP32[(($1776)>>2)];
   var $1778=(($1777)|(0))==9;
   if ($1778) { label = 464; break; } else { label = 465; break; }
  case 464: 
   $c=347;
   label = 471; break;
  case 465: 
   var $1781=$2;
   var $1782=(($1781+40)|0);
   var $1783=HEAP32[(($1782)>>2)];
   var $1784=(($1783)|(0))==4;
   if ($1784) { label = 467; break; } else { label = 466; break; }
  case 466: 
   var $1786=$2;
   var $1787=(($1786+40)|0);
   var $1788=HEAP32[(($1787)>>2)];
   var $1789=(($1788)|(0))==5;
   if ($1789) { label = 467; break; } else { label = 470; break; }
  case 467: 
   var $1791=$space_seen;
   var $1792=(($1791)|(0))!=0;
   if ($1792) { label = 468; break; } else { label = 470; break; }
  case 468: 
   var $1794=_isspace(255);
   var $1795=(($1794)|(0))!=0;
   if ($1795) { label = 470; break; } else { label = 469; break; }
  case 469: 
   $c=348;
   label = 470; break;
  case 470: 
   label = 471; break;
  case 471: 
   var $1799=$2;
   var $1800=(($1799+56)|0);
   var $1801=HEAP32[(($1800)>>2)];
   var $1802=((($1801)+(1))|0);
   HEAP32[(($1800)>>2)]=$1802;
   var $1803=$2;
   var $1804=(($1803+48)|0);
   var $1805=HEAP32[(($1804)>>2)];
   var $1806=$1805 << 1;
   var $1807=$2;
   var $1808=(($1807+48)|0);
   HEAP32[(($1808)>>2)]=$1806;
   var $1809=$2;
   var $1810=(($1809+52)|0);
   var $1811=HEAP32[(($1810)>>2)];
   var $1812=$1811 << 1;
   var $1813=$2;
   var $1814=(($1813+52)|0);
   HEAP32[(($1814)>>2)]=$1812;
   var $1815=$2;
   var $1816=(($1815+40)|0);
   HEAP32[(($1816)>>2)]=0;
   var $1817=$c;
   $1=$1817;
   label = 706; break;
  case 472: 
   var $1819=$2;
   var $1820=(($1819+56)|0);
   var $1821=HEAP32[(($1820)>>2)];
   var $1822=((($1821)+(1))|0);
   HEAP32[(($1820)>>2)]=$1822;
   var $1823=$2;
   var $1824=(($1823+40)|0);
   var $1825=HEAP32[(($1824)>>2)];
   var $1826=(($1825)|(0))==7;
   if ($1826) { label = 474; break; } else { label = 473; break; }
  case 473: 
   var $1828=$2;
   var $1829=(($1828+40)|0);
   var $1830=HEAP32[(($1829)>>2)];
   var $1831=(($1830)|(0))==8;
   if ($1831) { label = 474; break; } else { label = 479; break; }
  case 474: 
   var $1833=$2;
   var $1834=(($1833+40)|0);
   HEAP32[(($1834)>>2)]=4;
   var $1835=$2;
   var $1836=_nextc($1835);
   $c=$1836;
   var $1837=(($1836)|(0))==93;
   if ($1837) { label = 475; break; } else { label = 478; break; }
  case 475: 
   var $1839=$2;
   var $1840=_nextc($1839);
   $c=$1840;
   var $1841=(($1840)|(0))==61;
   if ($1841) { label = 476; break; } else { label = 477; break; }
  case 476: 
   $1=340;
   label = 706; break;
  case 477: 
   var $1844=$2;
   var $1845=$c;
   _pushback($1844, $1845);
   $1=339;
   label = 706; break;
  case 478: 
   var $1847=$2;
   var $1848=$c;
   _pushback($1847, $1848);
   $1=91;
   label = 706; break;
  case 479: 
   var $1850=$2;
   var $1851=(($1850+40)|0);
   var $1852=HEAP32[(($1851)>>2)];
   var $1853=(($1852)|(0))==0;
   if ($1853) { label = 483; break; } else { label = 480; break; }
  case 480: 
   var $1855=$2;
   var $1856=(($1855+40)|0);
   var $1857=HEAP32[(($1856)>>2)];
   var $1858=(($1857)|(0))==6;
   if ($1858) { label = 483; break; } else { label = 481; break; }
  case 481: 
   var $1860=$2;
   var $1861=(($1860+40)|0);
   var $1862=HEAP32[(($1861)>>2)];
   var $1863=(($1862)|(0))==10;
   if ($1863) { label = 483; break; } else { label = 482; break; }
  case 482: 
   var $1865=$2;
   var $1866=(($1865+40)|0);
   var $1867=HEAP32[(($1866)>>2)];
   var $1868=(($1867)|(0))==9;
   if ($1868) { label = 483; break; } else { label = 484; break; }
  case 483: 
   $c=350;
   label = 489; break;
  case 484: 
   var $1871=$2;
   var $1872=(($1871+40)|0);
   var $1873=HEAP32[(($1872)>>2)];
   var $1874=(($1873)|(0))==4;
   if ($1874) { label = 486; break; } else { label = 485; break; }
  case 485: 
   var $1876=$2;
   var $1877=(($1876+40)|0);
   var $1878=HEAP32[(($1877)>>2)];
   var $1879=(($1878)|(0))==5;
   if ($1879) { label = 486; break; } else { label = 488; break; }
  case 486: 
   var $1881=$space_seen;
   var $1882=(($1881)|(0))!=0;
   if ($1882) { label = 487; break; } else { label = 488; break; }
  case 487: 
   $c=350;
   label = 488; break;
  case 488: 
   label = 489; break;
  case 489: 
   label = 490; break;
  case 490: 
   var $1887=$2;
   var $1888=(($1887+40)|0);
   HEAP32[(($1888)>>2)]=0;
   var $1889=$2;
   var $1890=(($1889+48)|0);
   var $1891=HEAP32[(($1890)>>2)];
   var $1892=$1891 << 1;
   var $1893=$2;
   var $1894=(($1893+48)|0);
   HEAP32[(($1894)>>2)]=$1892;
   var $1895=$2;
   var $1896=(($1895+52)|0);
   var $1897=HEAP32[(($1896)>>2)];
   var $1898=$1897 << 1;
   var $1899=$2;
   var $1900=(($1899+52)|0);
   HEAP32[(($1900)>>2)]=$1898;
   var $1901=$c;
   $1=$1901;
   label = 706; break;
  case 491: 
   var $1903=$2;
   var $1904=(($1903+60)|0);
   var $1905=HEAP32[(($1904)>>2)];
   var $1906=(($1905)|(0))!=0;
   if ($1906) { label = 492; break; } else { label = 494; break; }
  case 492: 
   var $1908=$2;
   var $1909=(($1908+60)|0);
   var $1910=HEAP32[(($1909)>>2)];
   var $1911=$2;
   var $1912=(($1911+56)|0);
   var $1913=HEAP32[(($1912)>>2)];
   var $1914=(($1910)|(0))==(($1913)|(0));
   if ($1914) { label = 493; break; } else { label = 494; break; }
  case 493: 
   var $1916=$2;
   var $1917=(($1916+40)|0);
   HEAP32[(($1917)>>2)]=0;
   var $1918=$2;
   var $1919=(($1918+60)|0);
   HEAP32[(($1919)>>2)]=0;
   var $1920=$2;
   var $1921=(($1920+56)|0);
   var $1922=HEAP32[(($1921)>>2)];
   var $1923=((($1922)-(1))|0);
   HEAP32[(($1921)>>2)]=$1923;
   var $1924=$2;
   var $1925=(($1924+48)|0);
   var $1926=HEAP32[(($1925)>>2)];
   var $1927=$1926 << 1;
   var $1928=$2;
   var $1929=(($1928+48)|0);
   HEAP32[(($1929)>>2)]=$1927;
   var $1930=$2;
   var $1931=(($1930+52)|0);
   var $1932=HEAP32[(($1931)>>2)];
   var $1933=$1932 << 1;
   var $1934=$2;
   var $1935=(($1934+52)|0);
   HEAP32[(($1935)>>2)]=$1933;
   $1=363;
   label = 706; break;
  case 494: 
   var $1937=$2;
   var $1938=(($1937+40)|0);
   var $1939=HEAP32[(($1938)>>2)];
   var $1940=(($1939)|(0))==4;
   if ($1940) { label = 498; break; } else { label = 495; break; }
  case 495: 
   var $1942=$2;
   var $1943=(($1942+40)|0);
   var $1944=HEAP32[(($1943)>>2)];
   var $1945=(($1944)|(0))==5;
   if ($1945) { label = 498; break; } else { label = 496; break; }
  case 496: 
   var $1947=$2;
   var $1948=(($1947+40)|0);
   var $1949=HEAP32[(($1948)>>2)];
   var $1950=(($1949)|(0))==1;
   if ($1950) { label = 498; break; } else { label = 497; break; }
  case 497: 
   var $1952=$2;
   var $1953=(($1952+40)|0);
   var $1954=HEAP32[(($1953)>>2)];
   var $1955=(($1954)|(0))==3;
   if ($1955) { label = 498; break; } else { label = 499; break; }
  case 498: 
   $c=123;
   label = 503; break;
  case 499: 
   var $1958=$2;
   var $1959=(($1958+40)|0);
   var $1960=HEAP32[(($1959)>>2)];
   var $1961=(($1960)|(0))==2;
   if ($1961) { label = 500; break; } else { label = 501; break; }
  case 500: 
   $c=352;
   label = 502; break;
  case 501: 
   $c=351;
   label = 502; break;
  case 502: 
   label = 503; break;
  case 503: 
   var $1966=$2;
   var $1967=(($1966+48)|0);
   var $1968=HEAP32[(($1967)>>2)];
   var $1969=$1968 << 1;
   var $1970=$2;
   var $1971=(($1970+48)|0);
   HEAP32[(($1971)>>2)]=$1969;
   var $1972=$2;
   var $1973=(($1972+52)|0);
   var $1974=HEAP32[(($1973)>>2)];
   var $1975=$1974 << 1;
   var $1976=$2;
   var $1977=(($1976+52)|0);
   HEAP32[(($1977)>>2)]=$1975;
   var $1978=$2;
   var $1979=(($1978+40)|0);
   HEAP32[(($1979)>>2)]=0;
   var $1980=$c;
   $1=$1980;
   label = 706; break;
  case 504: 
   var $1982=$2;
   var $1983=_nextc($1982);
   $c=$1983;
   var $1984=$c;
   var $1985=(($1984)|(0))==10;
   if ($1985) { label = 505; break; } else { label = 506; break; }
  case 505: 
   var $1987=$2;
   var $1988=(($1987+32)|0);
   var $1989=HEAP32[(($1988)>>2)];
   var $1990=((($1989)+(1))|0);
   HEAP32[(($1988)>>2)]=$1990;
   var $1991=$2;
   var $1992=(($1991+36)|0);
   HEAP32[(($1992)>>2)]=0;
   $space_seen=1;
   label = 10; break;
  case 506: 
   var $1994=$2;
   var $1995=$c;
   _pushback($1994, $1995);
   $1=92;
   label = 706; break;
  case 507: 
   var $1997=$2;
   var $1998=(($1997+40)|0);
   var $1999=HEAP32[(($1998)>>2)];
   var $2000=(($1999)|(0))==0;
   if ($2000) { label = 511; break; } else { label = 508; break; }
  case 508: 
   var $2002=$2;
   var $2003=(($2002+40)|0);
   var $2004=HEAP32[(($2003)>>2)];
   var $2005=(($2004)|(0))==6;
   if ($2005) { label = 511; break; } else { label = 509; break; }
  case 509: 
   var $2007=$2;
   var $2008=(($2007+40)|0);
   var $2009=HEAP32[(($2008)>>2)];
   var $2010=(($2009)|(0))==10;
   if ($2010) { label = 511; break; } else { label = 510; break; }
  case 510: 
   var $2012=$2;
   var $2013=(($2012+40)|0);
   var $2014=HEAP32[(($2013)>>2)];
   var $2015=(($2014)|(0))==9;
   if ($2015) { label = 511; break; } else { label = 544; break; }
  case 511: 
   var $2017=$2;
   var $2018=_nextc($2017);
   $c=$2018;
   label = 512; break;
  case 512: 
   var $2020=$c;
   var $2021=(($2020)|(0))==-1;
   if ($2021) { label = 514; break; } else { label = 513; break; }
  case 513: 
   var $2023=$c;
   var $2024=(($2023) & 255);
   var $2025=(($2024)&(255));
   var $2026=_isalnum($2025);
   var $2027=(($2026)|(0))!=0;
   if ($2027) { label = 515; break; } else { label = 514; break; }
  case 514: 
   var $2029=$c;
   $term=$2029;
   $c=81;
   label = 518; break;
  case 515: 
   var $2031=$2;
   var $2032=_nextc($2031);
   $term=$2032;
   var $2033=$term;
   var $2034=_isalnum($2033);
   var $2035=(($2034)|(0))!=0;
   if ($2035) { label = 516; break; } else { label = 517; break; }
  case 516: 
   var $2037=$2;
   _yyerror($2037, ((101444)|0));
   $1=0;
   label = 706; break;
  case 517: 
   label = 518; break;
  case 518: 
   var $2040=$c;
   var $2041=(($2040)|(0))==-1;
   if ($2041) { label = 520; break; } else { label = 519; break; }
  case 519: 
   var $2043=$term;
   var $2044=(($2043)|(0))==-1;
   if ($2044) { label = 520; break; } else { label = 521; break; }
  case 520: 
   var $2046=$2;
   _yyerror($2046, ((101396)|0));
   $1=0;
   label = 706; break;
  case 521: 
   var $2048=$term;
   $paren=$2048;
   var $2049=$term;
   var $2050=(($2049)|(0))==40;
   if ($2050) { label = 522; break; } else { label = 523; break; }
  case 522: 
   $term=41;
   label = 533; break;
  case 523: 
   var $2053=$term;
   var $2054=(($2053)|(0))==91;
   if ($2054) { label = 524; break; } else { label = 525; break; }
  case 524: 
   $term=93;
   label = 532; break;
  case 525: 
   var $2057=$term;
   var $2058=(($2057)|(0))==123;
   if ($2058) { label = 526; break; } else { label = 527; break; }
  case 526: 
   $term=125;
   label = 531; break;
  case 527: 
   var $2061=$term;
   var $2062=(($2061)|(0))==60;
   if ($2062) { label = 528; break; } else { label = 529; break; }
  case 528: 
   $term=62;
   label = 530; break;
  case 529: 
   $paren=0;
   label = 530; break;
  case 530: 
   label = 531; break;
  case 531: 
   label = 532; break;
  case 532: 
   label = 533; break;
  case 533: 
   var $2069=$c;
   if ((($2069)|(0))==81) {
    label = 534; break;
   }
   else if ((($2069)|(0))==113) {
    label = 535; break;
   }
   else if ((($2069)|(0))==87) {
    label = 536; break;
   }
   else if ((($2069)|(0))==119) {
    label = 537; break;
   }
   else if ((($2069)|(0))==120) {
    label = 538; break;
   }
   else if ((($2069)|(0))==114) {
    label = 539; break;
   }
   else if ((($2069)|(0))==115) {
    label = 540; break;
   }
   else if ((($2069)|(0))==73) {
    label = 541; break;
   }
   else if ((($2069)|(0))==105) {
    label = 542; break;
   }
   else {
   label = 543; break;
   }
  case 534: 
   var $2071=$2;
   var $2072=$term;
   var $2073=$paren;
   var $2074=_new_strterm($2071, 3, $2072, $2073);
   var $2075=$2;
   var $2076=(($2075+44)|0);
   HEAP32[(($2076)>>2)]=$2074;
   $1=360;
   label = 706; break;
  case 535: 
   var $2078=$2;
   var $2079=$term;
   var $2080=$paren;
   var $2081=_new_strterm($2078, 1, $2079, $2080);
   var $2082=$2;
   var $2083=(($2082+44)|0);
   HEAP32[(($2083)>>2)]=$2081;
   var $2084=$2;
   var $2085=_parse_string($2084);
   $1=$2085;
   label = 706; break;
  case 536: 
   var $2087=$2;
   var $2088=$term;
   var $2089=$paren;
   var $2090=_new_strterm($2087, 43, $2088, $2089);
   var $2091=$2;
   var $2092=(($2091+44)|0);
   HEAP32[(($2092)>>2)]=$2090;
   $1=358;
   label = 706; break;
  case 537: 
   var $2094=$2;
   var $2095=$term;
   var $2096=$paren;
   var $2097=_new_strterm($2094, 41, $2095, $2096);
   var $2098=$2;
   var $2099=(($2098+44)|0);
   HEAP32[(($2099)>>2)]=$2097;
   $1=358;
   label = 706; break;
  case 538: 
   var $2101=$2;
   var $2102=$term;
   var $2103=$paren;
   var $2104=_new_strterm($2101, 131, $2102, $2103);
   var $2105=$2;
   var $2106=(($2105+44)|0);
   HEAP32[(($2106)>>2)]=$2104;
   $1=361;
   label = 706; break;
  case 539: 
   var $2108=$2;
   var $2109=$term;
   var $2110=$paren;
   var $2111=_new_strterm($2108, 7, $2109, $2110);
   var $2112=$2;
   var $2113=(($2112+44)|0);
   HEAP32[(($2113)>>2)]=$2111;
   $1=357;
   label = 706; break;
  case 540: 
   var $2115=$2;
   var $2116=$term;
   var $2117=$paren;
   var $2118=_new_strterm($2115, 17, $2116, $2117);
   var $2119=$2;
   var $2120=(($2119+44)|0);
   HEAP32[(($2120)>>2)]=$2118;
   $1=356;
   label = 706; break;
  case 541: 
   var $2122=$2;
   var $2123=$term;
   var $2124=$paren;
   var $2125=_new_strterm($2122, 51, $2123, $2124);
   var $2126=$2;
   var $2127=(($2126+44)|0);
   HEAP32[(($2127)>>2)]=$2125;
   $1=359;
   label = 706; break;
  case 542: 
   var $2129=$2;
   var $2130=$term;
   var $2131=$paren;
   var $2132=_new_strterm($2129, 49, $2130, $2131);
   var $2133=$2;
   var $2134=(($2133+44)|0);
   HEAP32[(($2134)>>2)]=$2132;
   $1=359;
   label = 706; break;
  case 543: 
   var $2136=$2;
   _yyerror($2136, ((101444)|0));
   $1=0;
   label = 706; break;
  case 544: 
   var $2138=$2;
   var $2139=_nextc($2138);
   $c=$2139;
   var $2140=(($2139)|(0))==61;
   if ($2140) { label = 545; break; } else { label = 546; break; }
  case 545: 
   var $2142=$2;
   var $2143=_intern_gen_c($2142, 37);
   var $2144=$2;
   var $2145=(($2144+1124)|0);
   var $2146=HEAP32[(($2145)>>2)];
   var $2147=$2146;
   var $2148=$2147;
   HEAP16[(($2148)>>1)]=$2143;
   var $2149=$2;
   var $2150=(($2149+40)|0);
   HEAP32[(($2150)>>2)]=0;
   $1=345;
   label = 706; break;
  case 546: 
   var $2152=$2;
   var $2153=(($2152+40)|0);
   var $2154=HEAP32[(($2153)>>2)];
   var $2155=(($2154)|(0))==4;
   if ($2155) { label = 548; break; } else { label = 547; break; }
  case 547: 
   var $2157=$2;
   var $2158=(($2157+40)|0);
   var $2159=HEAP32[(($2158)>>2)];
   var $2160=(($2159)|(0))==5;
   if ($2160) { label = 548; break; } else { label = 551; break; }
  case 548: 
   var $2162=$space_seen;
   var $2163=(($2162)|(0))!=0;
   if ($2163) { label = 549; break; } else { label = 551; break; }
  case 549: 
   var $2165=$c;
   var $2166=(($2165) & 255);
   var $2167=(($2166)&(255));
   var $2168=_isspace($2167);
   var $2169=(($2168)|(0))!=0;
   if ($2169) { label = 551; break; } else { label = 550; break; }
  case 550: 
   label = 512; break;
  case 551: 
   var $2172=$2;
   var $2173=(($2172+40)|0);
   var $2174=HEAP32[(($2173)>>2)];
   var $2175=(($2174)|(0))==7;
   if ($2175) { label = 553; break; } else { label = 552; break; }
  case 552: 
   var $2177=$2;
   var $2178=(($2177+40)|0);
   var $2179=HEAP32[(($2178)>>2)];
   var $2180=(($2179)|(0))==8;
   if ($2180) { label = 553; break; } else { label = 554; break; }
  case 553: 
   var $2182=$2;
   var $2183=(($2182+40)|0);
   HEAP32[(($2183)>>2)]=4;
   label = 555; break;
  case 554: 
   var $2185=$2;
   var $2186=(($2185+40)|0);
   HEAP32[(($2186)>>2)]=0;
   label = 555; break;
  case 555: 
   var $2188=$2;
   var $2189=$c;
   _pushback($2188, $2189);
   $1=37;
   label = 706; break;
  case 556: 
   var $2191=$2;
   var $2192=(($2191+40)|0);
   HEAP32[(($2192)>>2)]=1;
   var $2193=$2;
   var $2194=_newtok($2193);
   $token_column=$2194;
   var $2195=$2;
   var $2196=_nextc($2195);
   $c=$2196;
   var $2197=$c;
   var $2198=(($2197)|(0))==-1;
   if ($2198) { label = 557; break; } else { label = 558; break; }
  case 557: 
   var $2200=$2;
   _yyerror($2200, ((101252)|0));
   $1=0;
   label = 706; break;
  case 558: 
   var $2202=$c;
   if ((($2202)|(0))==95) {
    label = 559; break;
   }
   else if ((($2202)|(0))==126 | (($2202)|(0))==42 | (($2202)|(0))==36 | (($2202)|(0))==63 | (($2202)|(0))==33 | (($2202)|(0))==64 | (($2202)|(0))==47 | (($2202)|(0))==92 | (($2202)|(0))==59 | (($2202)|(0))==44 | (($2202)|(0))==46 | (($2202)|(0))==61 | (($2202)|(0))==58 | (($2202)|(0))==60 | (($2202)|(0))==62 | (($2202)|(0))==34) {
    label = 565; break;
   }
   else if ((($2202)|(0))==45) {
    label = 566; break;
   }
   else if ((($2202)|(0))==38 | (($2202)|(0))==96 | (($2202)|(0))==39 | (($2202)|(0))==43) {
    label = 568; break;
   }
   else if ((($2202)|(0))==49 | (($2202)|(0))==50 | (($2202)|(0))==51 | (($2202)|(0))==52 | (($2202)|(0))==53 | (($2202)|(0))==54 | (($2202)|(0))==55 | (($2202)|(0))==56 | (($2202)|(0))==57) {
    label = 571; break;
   }
   else if ((($2202)|(0))==48) {
    label = 584; break;
   }
   else {
   label = 579; break;
   }
  case 559: 
   var $2204=$2;
   var $2205=_nextc($2204);
   $c=$2205;
   var $2206=$c;
   var $2207=(($2206)|(0))!=-1;
   if ($2207) { label = 560; break; } else { label = 564; break; }
  case 560: 
   var $2209=$c;
   var $2210=_isalnum($2209);
   var $2211=(($2210)|(0))!=0;
   if ($2211) { label = 563; break; } else { label = 561; break; }
  case 561: 
   var $2213=$c;
   var $2214=(($2213)|(0))==95;
   if ($2214) { label = 563; break; } else { label = 562; break; }
  case 562: 
   var $2216=$c;
   var $2217=(($2216)>>>(0)) <= 127;
   if ($2217) { label = 564; break; } else { label = 563; break; }
  case 563: 
   var $2219=$2;
   _tokadd($2219, 36);
   var $2220=$2;
   var $2221=$c;
   _tokadd($2220, $2221);
   label = 585; break;
  case 564: 
   var $2223=$2;
   var $2224=$c;
   _pushback($2223, $2224);
   $c=95;
   label = 565; break;
  case 565: 
   var $2226=$2;
   _tokadd($2226, 36);
   var $2227=$2;
   var $2228=$c;
   _tokadd($2227, $2228);
   var $2229=$2;
   _tokfix($2229);
   var $2230=$2;
   var $2231=$2;
   var $2232=_tok($2231);
   var $2233=_intern_gen($2230, $2232);
   var $2234=$2;
   var $2235=(($2234+1124)|0);
   var $2236=HEAP32[(($2235)>>2)];
   var $2237=$2236;
   var $2238=$2237;
   HEAP16[(($2238)>>1)]=$2233;
   $1=308;
   label = 706; break;
  case 566: 
   var $2240=$2;
   _tokadd($2240, 36);
   var $2241=$2;
   var $2242=$c;
   _tokadd($2241, $2242);
   var $2243=$2;
   var $2244=_nextc($2243);
   $c=$2244;
   var $2245=$2;
   var $2246=$c;
   _pushback($2245, $2246);
   label = 567; break;
  case 567: 
   var $2248=$2;
   _tokfix($2248);
   var $2249=$2;
   var $2250=$2;
   var $2251=_tok($2250);
   var $2252=_intern_gen($2249, $2251);
   var $2253=$2;
   var $2254=(($2253+1124)|0);
   var $2255=HEAP32[(($2254)>>2)];
   var $2256=$2255;
   var $2257=$2256;
   HEAP16[(($2257)>>1)]=$2252;
   $1=308;
   label = 706; break;
  case 568: 
   var $2259=$last_state;
   var $2260=(($2259)|(0))==7;
   if ($2260) { label = 569; break; } else { label = 570; break; }
  case 569: 
   var $2262=$2;
   _tokadd($2262, 36);
   var $2263=$2;
   var $2264=$c;
   _tokadd($2263, $2264);
   label = 567; break;
  case 570: 
   var $2266=$2;
   var $2267=$c;
   var $2268=_new_back_ref($2266, $2267);
   var $2269=$2;
   var $2270=(($2269+1124)|0);
   var $2271=HEAP32[(($2270)>>2)];
   var $2272=$2271;
   var $2273=$2272;
   HEAP32[(($2273)>>2)]=$2268;
   $1=322;
   label = 706; break;
  case 571: 
   label = 572; break;
  case 572: 
   var $2276=$2;
   var $2277=$c;
   _tokadd($2276, $2277);
   var $2278=$2;
   var $2279=_nextc($2278);
   $c=$2279;
   label = 573; break;
  case 573: 
   var $2281=$c;
   var $2282=(($2281)|(0))!=-1;
   if ($2282) { label = 574; break; } else { var $2288 = 0;label = 575; break; }
  case 574: 
   var $2284=$c;
   var $2285=_isdigit($2284);
   var $2286=(($2285)|(0))!=0;
   var $2288 = $2286;label = 575; break;
  case 575: 
   var $2288;
   if ($2288) { label = 572; break; } else { label = 576; break; }
  case 576: 
   var $2290=$2;
   var $2291=$c;
   _pushback($2290, $2291);
   var $2292=$last_state;
   var $2293=(($2292)|(0))==7;
   if ($2293) { label = 577; break; } else { label = 578; break; }
  case 577: 
   label = 567; break;
  case 578: 
   var $2296=$2;
   _tokfix($2296);
   var $2297=$2;
   var $2298=$2;
   var $2299=_tok($2298);
   var $2300=_atoi($2299);
   var $2301=_new_nth_ref($2297, $2300);
   var $2302=$2;
   var $2303=(($2302+1124)|0);
   var $2304=HEAP32[(($2303)>>2)];
   var $2305=$2304;
   var $2306=$2305;
   HEAP32[(($2306)>>2)]=$2301;
   $1=321;
   label = 706; break;
  case 579: 
   var $2308=$c;
   var $2309=_isalnum($2308);
   var $2310=(($2309)|(0))!=0;
   if ($2310) { label = 583; break; } else { label = 580; break; }
  case 580: 
   var $2312=$c;
   var $2313=(($2312)|(0))==95;
   if ($2313) { label = 583; break; } else { label = 581; break; }
  case 581: 
   var $2315=$c;
   var $2316=(($2315)>>>(0)) <= 127;
   if ($2316) { label = 582; break; } else { label = 583; break; }
  case 582: 
   var $2318=$2;
   var $2319=$c;
   _pushback($2318, $2319);
   $1=36;
   label = 706; break;
  case 583: 
   label = 584; break;
  case 584: 
   var $2322=$2;
   _tokadd($2322, 36);
   label = 585; break;
  case 585: 
   label = 610; break;
  case 586: 
   var $2325=$2;
   var $2326=_nextc($2325);
   $c=$2326;
   var $2327=$2;
   var $2328=_newtok($2327);
   $token_column=$2328;
   var $2329=$2;
   _tokadd($2329, 64);
   var $2330=$c;
   var $2331=(($2330)|(0))==64;
   if ($2331) { label = 587; break; } else { label = 588; break; }
  case 587: 
   var $2333=$2;
   _tokadd($2333, 64);
   var $2334=$2;
   var $2335=_nextc($2334);
   $c=$2335;
   label = 588; break;
  case 588: 
   var $2337=$c;
   var $2338=(($2337)|(0))==-1;
   if ($2338) { label = 589; break; } else { label = 593; break; }
  case 589: 
   var $2340=$2;
   var $2341=(($2340+1108)|0);
   var $2342=HEAP32[(($2341)>>2)];
   var $2343=(($2342)|(0))==1;
   if ($2343) { label = 590; break; } else { label = 591; break; }
  case 590: 
   var $2345=$2;
   _yyerror($2345, ((101216)|0));
   label = 592; break;
  case 591: 
   var $2347=$2;
   _yyerror($2347, ((101168)|0));
   label = 592; break;
  case 592: 
   $1=0;
   label = 706; break;
  case 593: 
   var $2350=$c;
   var $2351=_isdigit($2350);
   var $2352=(($2351)|(0))!=0;
   if ($2352) { label = 594; break; } else { label = 598; break; }
  case 594: 
   var $2354=$2;
   var $2355=(($2354+1108)|0);
   var $2356=HEAP32[(($2355)>>2)];
   var $2357=(($2356)|(0))==1;
   if ($2357) { label = 595; break; } else { label = 596; break; }
  case 595: 
   var $2359=$2;
   var $2360=$c;
   _yyerror_i($2359, ((101116)|0), $2360);
   label = 597; break;
  case 596: 
   var $2362=$2;
   var $2363=$c;
   _yyerror_i($2362, ((101060)|0), $2363);
   label = 597; break;
  case 597: 
   $1=0;
   label = 706; break;
  case 598: 
   label = 599; break;
  case 599: 
   var $2367=$c;
   var $2368=_isalnum($2367);
   var $2369=(($2368)|(0))!=0;
   if ($2369) { label = 603; break; } else { label = 600; break; }
  case 600: 
   var $2371=$c;
   var $2372=(($2371)|(0))==95;
   if ($2372) { label = 603; break; } else { label = 601; break; }
  case 601: 
   var $2374=$c;
   var $2375=(($2374)>>>(0)) <= 127;
   if ($2375) { label = 602; break; } else { label = 603; break; }
  case 602: 
   var $2377=$2;
   var $2378=$c;
   _pushback($2377, $2378);
   $1=64;
   label = 706; break;
  case 603: 
   label = 610; break;
  case 604: 
   var $2381=$2;
   var $2382=_newtok($2381);
   $token_column=$2382;
   label = 610; break;
  case 605: 
   var $2384=$c;
   var $2385=_isalnum($2384);
   var $2386=(($2385)|(0))!=0;
   if ($2386) { label = 609; break; } else { label = 606; break; }
  case 606: 
   var $2388=$c;
   var $2389=(($2388)|(0))==95;
   if ($2389) { label = 609; break; } else { label = 607; break; }
  case 607: 
   var $2391=$c;
   var $2392=(($2391)>>>(0)) <= 127;
   if ($2392) { label = 608; break; } else { label = 609; break; }
  case 608: 
   var $2394=$2;
   var $2395=$c;
   _yyerror_i($2394, ((101004)|0), $2395);
   label = 10; break;
  case 609: 
   var $2397=$2;
   var $2398=_newtok($2397);
   $token_column=$2398;
   label = 610; break;
  case 610: 
   label = 611; break;
  case 611: 
   var $2401=$2;
   var $2402=$c;
   _tokadd($2401, $2402);
   var $2403=$2;
   var $2404=_nextc($2403);
   $c=$2404;
   var $2405=$c;
   var $2406=(($2405)|(0)) < 0;
   if ($2406) { label = 612; break; } else { label = 613; break; }
  case 612: 
   label = 618; break;
  case 613: 
   label = 614; break;
  case 614: 
   var $2410=$c;
   var $2411=_isalnum($2410);
   var $2412=(($2411)|(0))!=0;
   if ($2412) { var $2421 = 1;label = 617; break; } else { label = 615; break; }
  case 615: 
   var $2414=$c;
   var $2415=(($2414)|(0))==95;
   if ($2415) { var $2421 = 1;label = 617; break; } else { label = 616; break; }
  case 616: 
   var $2417=$c;
   var $2418=(($2417)>>>(0)) <= 127;
   var $2419=$2418 ^ 1;
   var $2421 = $2419;label = 617; break;
  case 617: 
   var $2421;
   if ($2421) { label = 611; break; } else { label = 618; break; }
  case 618: 
   var $2423=$token_column;
   var $2424=(($2423)|(0))==0;
   if ($2424) { label = 619; break; } else { label = 624; break; }
  case 619: 
   var $2426=$2;
   var $2427=_toklen($2426);
   var $2428=(($2427)|(0))==7;
   if ($2428) { label = 620; break; } else { label = 624; break; }
  case 620: 
   var $2430=$c;
   var $2431=(($2430)|(0)) < 0;
   if ($2431) { label = 622; break; } else { label = 621; break; }
  case 621: 
   var $2433=$c;
   var $2434=(($2433)|(0))==10;
   if ($2434) { label = 622; break; } else { label = 624; break; }
  case 622: 
   var $2436=$2;
   var $2437=_tok($2436);
   var $2438=$2;
   var $2439=_toklen($2438);
   var $2440=_strncmp($2437, ((100964)|0), $2439);
   var $2441=(($2440)|(0))==0;
   if ($2441) { label = 623; break; } else { label = 624; break; }
  case 623: 
   $1=-1;
   label = 706; break;
  case 624: 
   var $2444=$2;
   var $2445=_tok($2444);
   var $2446=(($2445)|0);
   var $2447=HEAP8[($2446)];
   var $2448=(($2447 << 24) >> 24);
   if ((($2448)|(0))==64 | (($2448)|(0))==36) {
    label = 625; break;
   }
   else {
   label = 626; break;
   }
  case 625: 
   var $2450=$2;
   var $2451=$c;
   _pushback($2450, $2451);
   label = 632; break;
  case 626: 
   var $2453=$c;
   var $2454=(($2453)|(0))==33;
   if ($2454) { label = 628; break; } else { label = 627; break; }
  case 627: 
   var $2456=$c;
   var $2457=(($2456)|(0))==63;
   if ($2457) { label = 628; break; } else { label = 630; break; }
  case 628: 
   var $2459=$2;
   var $2460=_peek_n($2459, 61, 0);
   var $2461=(($2460)|(0))!=0;
   if ($2461) { label = 630; break; } else { label = 629; break; }
  case 629: 
   var $2463=$2;
   var $2464=$c;
   _tokadd($2463, $2464);
   label = 631; break;
  case 630: 
   var $2466=$2;
   var $2467=$c;
   _pushback($2466, $2467);
   label = 631; break;
  case 631: 
   label = 632; break;
  case 632: 
   var $2470=$2;
   _tokfix($2470);
   $result=0;
   var $2471=$2;
   var $2472=(($2471+40)|0);
   var $2473=HEAP32[(($2472)>>2)];
   $last_state=$2473;
   var $2474=$2;
   var $2475=_tok($2474);
   var $2476=(($2475)|0);
   var $2477=HEAP8[($2476)];
   var $2478=(($2477 << 24) >> 24);
   if ((($2478)|(0))==36) {
    label = 633; break;
   }
   else if ((($2478)|(0))==64) {
    label = 634; break;
   }
   else {
   label = 638; break;
   }
  case 633: 
   var $2480=$2;
   var $2481=(($2480+40)|0);
   HEAP32[(($2481)>>2)]=1;
   $result=308;
   label = 705; break;
  case 634: 
   var $2483=$2;
   var $2484=(($2483+40)|0);
   HEAP32[(($2484)>>2)]=1;
   var $2485=$2;
   var $2486=_tok($2485);
   var $2487=(($2486+1)|0);
   var $2488=HEAP8[($2487)];
   var $2489=(($2488 << 24) >> 24);
   var $2490=(($2489)|(0))==64;
   if ($2490) { label = 635; break; } else { label = 636; break; }
  case 635: 
   $result=311;
   label = 637; break;
  case 636: 
   $result=309;
   label = 637; break;
  case 637: 
   label = 705; break;
  case 638: 
   var $2495=$2;
   var $2496=_toklast($2495);
   var $2497=(($2496)|(0))==33;
   if ($2497) { label = 640; break; } else { label = 639; break; }
  case 639: 
   var $2499=$2;
   var $2500=_toklast($2499);
   var $2501=(($2500)|(0))==63;
   if ($2501) { label = 640; break; } else { label = 641; break; }
  case 640: 
   $result=307;
   label = 655; break;
  case 641: 
   var $2504=$2;
   var $2505=(($2504+40)|0);
   var $2506=HEAP32[(($2505)>>2)];
   var $2507=(($2506)|(0))==7;
   if ($2507) { label = 642; break; } else { label = 650; break; }
  case 642: 
   var $2509=$2;
   var $2510=_nextc($2509);
   $c=$2510;
   var $2511=(($2510)|(0))==61;
   if ($2511) { label = 643; break; } else { label = 648; break; }
  case 643: 
   var $2513=$2;
   var $2514=_peek_n($2513, 126, 0);
   var $2515=(($2514)|(0))!=0;
   if ($2515) { label = 648; break; } else { label = 644; break; }
  case 644: 
   var $2517=$2;
   var $2518=_peek_n($2517, 62, 0);
   var $2519=(($2518)|(0))!=0;
   if ($2519) { label = 648; break; } else { label = 645; break; }
  case 645: 
   var $2521=$2;
   var $2522=_peek_n($2521, 61, 0);
   var $2523=(($2522)|(0))!=0;
   if ($2523) { label = 646; break; } else { label = 647; break; }
  case 646: 
   var $2525=$2;
   var $2526=_peek_n($2525, 62, 1);
   var $2527=(($2526)|(0))!=0;
   if ($2527) { label = 647; break; } else { label = 648; break; }
  case 647: 
   $result=306;
   var $2529=$2;
   var $2530=$c;
   _tokadd($2529, $2530);
   var $2531=$2;
   _tokfix($2531);
   label = 649; break;
  case 648: 
   var $2533=$2;
   var $2534=$c;
   _pushback($2533, $2534);
   label = 649; break;
  case 649: 
   label = 650; break;
  case 650: 
   var $2537=$result;
   var $2538=(($2537)|(0))==0;
   if ($2538) { label = 651; break; } else { label = 653; break; }
  case 651: 
   var $2540=$2;
   var $2541=_tok($2540);
   var $2542=(($2541)|0);
   var $2543=HEAP8[($2542)];
   var $2544=(($2543)&(255));
   var $2545=_isupper($2544);
   var $2546=(($2545)|(0))!=0;
   if ($2546) { label = 652; break; } else { label = 653; break; }
  case 652: 
   $result=310;
   label = 654; break;
  case 653: 
   $result=306;
   label = 654; break;
  case 654: 
   label = 655; break;
  case 655: 
   var $2551=$2;
   var $2552=(($2551+40)|0);
   var $2553=HEAP32[(($2552)>>2)];
   var $2554=(($2553)|(0))==0;
   if ($2554) { label = 656; break; } else { label = 657; break; }
  case 656: 
   var $2556=$cmd_state;
   var $2557=(($2556)|(0))!=0;
   if ($2557) { label = 657; break; } else { label = 659; break; }
  case 657: 
   var $2559=$2;
   var $2560=(($2559+40)|0);
   var $2561=HEAP32[(($2560)>>2)];
   var $2562=(($2561)|(0))==4;
   if ($2562) { label = 659; break; } else { label = 658; break; }
  case 658: 
   var $2564=$2;
   var $2565=(($2564+40)|0);
   var $2566=HEAP32[(($2565)>>2)];
   var $2567=(($2566)|(0))==5;
   if ($2567) { label = 659; break; } else { label = 663; break; }
  case 659: 
   var $2569=$2;
   var $2570=_peek_n($2569, 58, 0);
   var $2571=(($2570)|(0))!=0;
   if ($2571) { label = 660; break; } else { label = 662; break; }
  case 660: 
   var $2573=$2;
   var $2574=_peek_n($2573, 58, 1);
   var $2575=(($2574)|(0))!=0;
   if ($2575) { label = 662; break; } else { label = 661; break; }
  case 661: 
   var $2577=$2;
   var $2578=(($2577+40)|0);
   HEAP32[(($2578)>>2)]=0;
   var $2579=$2;
   var $2580=_nextc($2579);
   var $2581=$2;
   _tokfix($2581);
   var $2582=$2;
   var $2583=$2;
   var $2584=_tok($2583);
   var $2585=_intern_gen($2582, $2584);
   var $2586=$2;
   var $2587=(($2586+1124)|0);
   var $2588=HEAP32[(($2587)>>2)];
   var $2589=$2588;
   var $2590=$2589;
   HEAP16[(($2590)>>1)]=$2585;
   $1=312;
   label = 706; break;
  case 662: 
   label = 663; break;
  case 663: 
   var $2593=$2;
   var $2594=(($2593+40)|0);
   var $2595=HEAP32[(($2594)>>2)];
   var $2596=(($2595)|(0))!=8;
   if ($2596) { label = 664; break; } else { label = 689; break; }
  case 664: 
   var $2598=$2;
   var $2599=_tok($2598);
   var $2600=$2;
   var $2601=_toklen($2600);
   var $2602=_reserved_word($2599, $2601);
   $kw=$2602;
   var $2603=$kw;
   var $2604=(($2603)|(0))!=0;
   if ($2604) { label = 665; break; } else { label = 688; break; }
  case 665: 
   var $2606=$2;
   var $2607=(($2606+40)|0);
   var $2608=HEAP32[(($2607)>>2)];
   $state=$2608;
   var $2609=$kw;
   var $2610=(($2609+12)|0);
   var $2611=HEAP32[(($2610)>>2)];
   var $2612=$2;
   var $2613=(($2612+40)|0);
   HEAP32[(($2613)>>2)]=$2611;
   var $2614=$state;
   var $2615=(($2614)|(0))==7;
   if ($2615) { label = 666; break; } else { label = 667; break; }
  case 666: 
   var $2617=$2;
   var $2618=$kw;
   var $2619=(($2618)|0);
   var $2620=HEAP32[(($2619)>>2)];
   var $2621=_intern_gen($2617, $2620);
   var $2622=$2;
   var $2623=(($2622+1124)|0);
   var $2624=HEAP32[(($2623)>>2)];
   var $2625=$2624;
   var $2626=$2625;
   HEAP16[(($2626)>>1)]=$2621;
   var $2627=$kw;
   var $2628=(($2627+4)|0);
   var $2629=(($2628)|0);
   var $2630=HEAP32[(($2629)>>2)];
   $1=$2630;
   label = 706; break;
  case 667: 
   var $2632=$2;
   var $2633=(($2632+40)|0);
   var $2634=HEAP32[(($2633)>>2)];
   var $2635=(($2634)|(0))==0;
   if ($2635) { label = 668; break; } else { label = 669; break; }
  case 668: 
   var $2637=$2;
   var $2638=(($2637+72)|0);
   HEAP32[(($2638)>>2)]=1;
   label = 669; break;
  case 669: 
   var $2640=$kw;
   var $2641=(($2640+4)|0);
   var $2642=(($2641)|0);
   var $2643=HEAP32[(($2642)>>2)];
   var $2644=(($2643)|(0))==281;
   if ($2644) { label = 670; break; } else { label = 682; break; }
  case 670: 
   var $2646=$2;
   var $2647=(($2646+60)|0);
   var $2648=HEAP32[(($2647)>>2)];
   var $2649=(($2648)|(0))!=0;
   if ($2649) { label = 671; break; } else { label = 673; break; }
  case 671: 
   var $2651=$2;
   var $2652=(($2651+60)|0);
   var $2653=HEAP32[(($2652)>>2)];
   var $2654=$2;
   var $2655=(($2654+56)|0);
   var $2656=HEAP32[(($2655)>>2)];
   var $2657=(($2653)|(0))==(($2656)|(0));
   if ($2657) { label = 672; break; } else { label = 673; break; }
  case 672: 
   var $2659=$2;
   var $2660=(($2659+60)|0);
   HEAP32[(($2660)>>2)]=0;
   var $2661=$2;
   var $2662=(($2661+56)|0);
   var $2663=HEAP32[(($2662)>>2)];
   var $2664=((($2663)-(1))|0);
   HEAP32[(($2662)>>2)]=$2664;
   $1=284;
   label = 706; break;
  case 673: 
   var $2666=$2;
   var $2667=(($2666+48)|0);
   var $2668=HEAP32[(($2667)>>2)];
   var $2669=$2668 & 1;
   var $2670=(($2669)|(0))!=0;
   if ($2670) { label = 674; break; } else { label = 675; break; }
  case 674: 
   $1=282;
   label = 706; break;
  case 675: 
   var $2673=$2;
   var $2674=(($2673+52)|0);
   var $2675=HEAP32[(($2674)>>2)];
   var $2676=$2675 & 1;
   var $2677=(($2676)|(0))!=0;
   if ($2677) { label = 676; break; } else { label = 678; break; }
  case 676: 
   var $2679=$state;
   var $2680=(($2679)|(0))!=5;
   if ($2680) { label = 677; break; } else { label = 678; break; }
  case 677: 
   $1=283;
   label = 706; break;
  case 678: 
   var $2683=$state;
   var $2684=(($2683)|(0))==2;
   if ($2684) { label = 680; break; } else { label = 679; break; }
  case 679: 
   var $2686=$state;
   var $2687=(($2686)|(0))==0;
   if ($2687) { label = 680; break; } else { label = 681; break; }
  case 680: 
   $1=283;
   label = 706; break;
  case 681: 
   $1=281;
   label = 706; break;
  case 682: 
   var $2691=$state;
   var $2692=(($2691)|(0))==0;
   if ($2692) { label = 684; break; } else { label = 683; break; }
  case 683: 
   var $2694=$state;
   var $2695=(($2694)|(0))==10;
   if ($2695) { label = 684; break; } else { label = 685; break; }
  case 684: 
   var $2697=$kw;
   var $2698=(($2697+4)|0);
   var $2699=(($2698)|0);
   var $2700=HEAP32[(($2699)>>2)];
   $1=$2700;
   label = 706; break;
  case 685: 
   var $2702=$kw;
   var $2703=(($2702+4)|0);
   var $2704=(($2703)|0);
   var $2705=HEAP32[(($2704)>>2)];
   var $2706=$kw;
   var $2707=(($2706+4)|0);
   var $2708=(($2707+4)|0);
   var $2709=HEAP32[(($2708)>>2)];
   var $2710=(($2705)|(0))!=(($2709)|(0));
   if ($2710) { label = 686; break; } else { label = 687; break; }
  case 686: 
   var $2712=$2;
   var $2713=(($2712+40)|0);
   HEAP32[(($2713)>>2)]=0;
   label = 687; break;
  case 687: 
   var $2715=$kw;
   var $2716=(($2715+4)|0);
   var $2717=(($2716+4)|0);
   var $2718=HEAP32[(($2717)>>2)];
   $1=$2718;
   label = 706; break;
  case 688: 
   label = 689; break;
  case 689: 
   var $2721=$2;
   var $2722=(($2721+40)|0);
   var $2723=HEAP32[(($2722)>>2)];
   var $2724=(($2723)|(0))==0;
   if ($2724) { label = 696; break; } else { label = 690; break; }
  case 690: 
   var $2726=$2;
   var $2727=(($2726+40)|0);
   var $2728=HEAP32[(($2727)>>2)];
   var $2729=(($2728)|(0))==6;
   if ($2729) { label = 696; break; } else { label = 691; break; }
  case 691: 
   var $2731=$2;
   var $2732=(($2731+40)|0);
   var $2733=HEAP32[(($2732)>>2)];
   var $2734=(($2733)|(0))==10;
   if ($2734) { label = 696; break; } else { label = 692; break; }
  case 692: 
   var $2736=$2;
   var $2737=(($2736+40)|0);
   var $2738=HEAP32[(($2737)>>2)];
   var $2739=(($2738)|(0))==9;
   if ($2739) { label = 696; break; } else { label = 693; break; }
  case 693: 
   var $2741=$2;
   var $2742=(($2741+40)|0);
   var $2743=HEAP32[(($2742)>>2)];
   var $2744=(($2743)|(0))==8;
   if ($2744) { label = 696; break; } else { label = 694; break; }
  case 694: 
   var $2746=$2;
   var $2747=(($2746+40)|0);
   var $2748=HEAP32[(($2747)>>2)];
   var $2749=(($2748)|(0))==4;
   if ($2749) { label = 696; break; } else { label = 695; break; }
  case 695: 
   var $2751=$2;
   var $2752=(($2751+40)|0);
   var $2753=HEAP32[(($2752)>>2)];
   var $2754=(($2753)|(0))==5;
   if ($2754) { label = 696; break; } else { label = 700; break; }
  case 696: 
   var $2756=$cmd_state;
   var $2757=(($2756)|(0))!=0;
   if ($2757) { label = 697; break; } else { label = 698; break; }
  case 697: 
   var $2759=$2;
   var $2760=(($2759+40)|0);
   HEAP32[(($2760)>>2)]=5;
   label = 699; break;
  case 698: 
   var $2762=$2;
   var $2763=(($2762+40)|0);
   HEAP32[(($2763)>>2)]=4;
   label = 699; break;
  case 699: 
   label = 704; break;
  case 700: 
   var $2766=$2;
   var $2767=(($2766+40)|0);
   var $2768=HEAP32[(($2767)>>2)];
   var $2769=(($2768)|(0))==7;
   if ($2769) { label = 701; break; } else { label = 702; break; }
  case 701: 
   var $2771=$2;
   var $2772=(($2771+40)|0);
   HEAP32[(($2772)>>2)]=3;
   label = 703; break;
  case 702: 
   var $2774=$2;
   var $2775=(($2774+40)|0);
   HEAP32[(($2775)>>2)]=1;
   label = 703; break;
  case 703: 
   label = 704; break;
  case 704: 
   label = 705; break;
  case 705: 
   var $2779=$2;
   var $2780=$2;
   var $2781=_tok($2780);
   var $2782=_intern_gen($2779, $2781);
   $ident=$2782;
   var $2783=$ident;
   var $2784=$2;
   var $2785=(($2784+1124)|0);
   var $2786=HEAP32[(($2785)>>2)];
   var $2787=$2786;
   var $2788=$2787;
   HEAP16[(($2788)>>1)]=$2783;
   var $2789=$result;
   $1=$2789;
   label = 706; break;
  case 706: 
   var $2791=$1;
   STACKTOP = sp;
   return $2791;
  default: assert(0, "bad label: " + label);
 }
}
function _parse_string($p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 388)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   var $type;
   var $nest_level;
   var $beg;
   var $end;
   var $hinf;
   var $line_head;
   var $s;
   var $len;
   var $buf=sp;
   var $f;
   var $c1;
   var $s2;
   var $flag=(sp)+(256);
   var $msg=(sp)+(260);
   $2=$p;
   var $3=$2;
   var $4=(($3+44)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7;
   $type=$8;
   var $9=$2;
   var $10=(($9+44)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$15;
   $nest_level=$16;
   var $17=$2;
   var $18=(($17+44)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19+4)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$25;
   $beg=$26;
   var $27=$2;
   var $28=(($27+44)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+4)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31+4)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33+4)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$35;
   $end=$36;
   var $37=$type;
   var $38=$37 & 64;
   var $39=(($38)|(0))!=0;
   if ($39) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $41=$2;
   var $42=_parsing_heredoc_inf($41);
   var $45 = $42;label = 4; break;
  case 3: 
   var $45 = 0;label = 4; break;
  case 4: 
   var $45;
   $hinf=$45;
   var $46=$2;
   var $47=_newtok($46);
   label = 5; break;
  case 5: 
   var $49=$2;
   var $50=_nextc($49);
   $c=$50;
   var $51=$end;
   var $52=(($50)|(0))!=(($51)|(0));
   if ($52) { var $57 = 1;label = 7; break; } else { label = 6; break; }
  case 6: 
   var $54=$nest_level;
   var $55=(($54)|(0))!=0;
   var $57 = $55;label = 7; break;
  case 7: 
   var $57;
   if ($57) { label = 8; break; } else { label = 83; break; }
  case 8: 
   var $59=$hinf;
   var $60=(($59)|(0))!=0;
   if ($60) { label = 9; break; } else { label = 26; break; }
  case 9: 
   var $62=$c;
   var $63=(($62)|(0))==10;
   if ($63) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $65=$c;
   var $66=(($65)|(0))==-1;
   if ($66) { label = 11; break; } else { label = 26; break; }
  case 11: 
   var $68=$2;
   _tokadd($68, 10);
   var $69=$2;
   _tokfix($69);
   var $70=$2;
   var $71=(($70+32)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=((($72)+(1))|0);
   HEAP32[(($71)>>2)]=$73;
   var $74=$2;
   var $75=(($74+36)|0);
   HEAP32[(($75)>>2)]=0;
   var $76=$hinf;
   var $77=$76;
   var $78=HEAP8[($77)];
   var $79=(($78)&(255)) >>> 1;
   var $80=$79 & 1;
   var $81=(($80)&(255));
   $line_head=$81;
   var $82=$hinf;
   var $83=$82;
   var $84=HEAP8[($83)];
   var $85=$84 & -3;
   var $86=$85 | 2;
   HEAP8[($83)]=$86;
   var $87=$line_head;
   var $88=(($87)|(0))!=0;
   if ($88) { label = 12; break; } else { label = 23; break; }
  case 12: 
   var $90=$2;
   var $91=_tok($90);
   $s=$91;
   var $92=$2;
   var $93=_toklen($92);
   $len=$93;
   var $94=$hinf;
   var $95=$94;
   var $96=HEAP8[($95)];
   var $97=$96 & 1;
   var $98=(($97 << 24) >> 24)!=0;
   if ($98) { label = 13; break; } else { label = 19; break; }
  case 13: 
   label = 14; break;
  case 14: 
   var $101=$s;
   var $102=HEAP8[($101)];
   var $103=(($102)&(255));
   var $104=_isspace($103);
   var $105=(($104)|(0))!=0;
   if ($105) { label = 15; break; } else { var $110 = 0;label = 16; break; }
  case 15: 
   var $107=$len;
   var $108=(($107)|(0)) > 0;
   var $110 = $108;label = 16; break;
  case 16: 
   var $110;
   if ($110) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $112=$s;
   var $113=(($112+1)|0);
   $s=$113;
   var $114=$len;
   var $115=((($114)-(1))|0);
   $len=$115;
   label = 14; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $118=$len;
   var $119=((($118)-(1))|0);
   var $120=$hinf;
   var $121=(($120+12)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=(($119)|(0))==(($122)|(0));
   if ($123) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $125=$s;
   var $126=$hinf;
   var $127=(($126+8)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=$len;
   var $130=((($129)-(1))|0);
   var $131=_strncmp($125, $128, $130);
   var $132=(($131)|(0))==0;
   if ($132) { label = 21; break; } else { label = 22; break; }
  case 21: 
   $1=365;
   label = 104; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $136=$c;
   var $137=(($136)|(0))==-1;
   if ($137) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $139=(($buf)|0);
   var $140=$hinf;
   var $141=(($140+8)|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=_snprintf($139, 256, ((99224)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$142,tempInt));
   var $144=$2;
   var $145=(($buf)|0);
   _yyerror($144, $145);
   $1=0;
   label = 104; break;
  case 25: 
   var $147=$2;
   var $148=$2;
   var $149=_tok($148);
   var $150=$2;
   var $151=_toklen($150);
   var $152=_new_str($147, $149, $151);
   var $153=$2;
   var $154=(($153+1124)|0);
   var $155=HEAP32[(($154)>>2)];
   var $156=$155;
   var $157=$156;
   HEAP32[(($157)>>2)]=$152;
   $1=320;
   label = 104; break;
  case 26: 
   var $159=$c;
   var $160=(($159)|(0))==-1;
   if ($160) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $162=$2;
   _yyerror($162, ((99184)|0));
   $1=0;
   label = 104; break;
  case 28: 
   var $164=$c;
   var $165=$beg;
   var $166=(($164)|(0))==(($165)|(0));
   if ($166) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $168=$nest_level;
   var $169=((($168)+(1))|0);
   $nest_level=$169;
   var $170=$nest_level;
   var $171=$170;
   var $172=$2;
   var $173=(($172+44)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=(($174+4)|0);
   var $176=HEAP32[(($175)>>2)];
   var $177=(($176)|0);
   HEAP32[(($177)>>2)]=$171;
   label = 71; break;
  case 30: 
   var $179=$c;
   var $180=$end;
   var $181=(($179)|(0))==(($180)|(0));
   if ($181) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $183=$nest_level;
   var $184=((($183)-(1))|0);
   $nest_level=$184;
   var $185=$nest_level;
   var $186=$185;
   var $187=$2;
   var $188=(($187+44)|0);
   var $189=HEAP32[(($188)>>2)];
   var $190=(($189+4)|0);
   var $191=HEAP32[(($190)>>2)];
   var $192=(($191)|0);
   HEAP32[(($192)>>2)]=$186;
   label = 70; break;
  case 32: 
   var $194=$c;
   var $195=(($194)|(0))==92;
   if ($195) { label = 33; break; } else { label = 61; break; }
  case 33: 
   var $197=$2;
   var $198=_nextc($197);
   $c=$198;
   var $199=$type;
   var $200=$199 & 2;
   var $201=(($200)|(0))!=0;
   if ($201) { label = 34; break; } else { label = 50; break; }
  case 34: 
   var $203=$c;
   var $204=$end;
   var $205=(($203)|(0))==(($204)|(0));
   if ($205) { label = 36; break; } else { label = 35; break; }
  case 35: 
   var $207=$c;
   var $208=$beg;
   var $209=(($207)|(0))==(($208)|(0));
   if ($209) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $211=$2;
   var $212=$c;
   _tokadd($211, $212);
   label = 49; break;
  case 37: 
   var $214=$c;
   var $215=(($214)|(0))==10;
   if ($215) { label = 38; break; } else { label = 40; break; }
  case 38: 
   var $217=$type;
   var $218=$217 & 32;
   var $219=(($218)|(0))!=0;
   if ($219) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $221=$2;
   var $222=(($221+32)|0);
   var $223=HEAP32[(($222)>>2)];
   var $224=((($223)+(1))|0);
   HEAP32[(($222)>>2)]=$224;
   var $225=$2;
   var $226=(($225+36)|0);
   HEAP32[(($226)>>2)]=0;
   var $227=$2;
   _tokadd($227, 10);
   label = 48; break;
  case 40: 
   var $229=$type;
   var $230=$229 & 4;
   var $231=(($230)|(0))!=0;
   if ($231) { label = 41; break; } else { label = 44; break; }
  case 41: 
   var $233=$2;
   _tokadd($233, 92);
   var $234=$c;
   var $235=(($234)|(0))!=-1;
   if ($235) { label = 42; break; } else { label = 43; break; }
  case 42: 
   var $237=$2;
   var $238=$c;
   _tokadd($237, $238);
   label = 43; break;
  case 43: 
   label = 45; break;
  case 44: 
   var $241=$2;
   var $242=$c;
   _pushback($241, $242);
   var $243=$2;
   var $244=$2;
   var $245=_read_escape($244);
   _tokadd($243, $245);
   label = 45; break;
  case 45: 
   var $247=$hinf;
   var $248=(($247)|(0))!=0;
   if ($248) { label = 46; break; } else { label = 47; break; }
  case 46: 
   var $250=$hinf;
   var $251=$250;
   var $252=HEAP8[($251)];
   var $253=$252 & -3;
   HEAP8[($251)]=$253;
   label = 47; break;
  case 47: 
   label = 48; break;
  case 48: 
   label = 49; break;
  case 49: 
   label = 60; break;
  case 50: 
   var $258=$c;
   var $259=$beg;
   var $260=(($258)|(0))!=(($259)|(0));
   if ($260) { label = 51; break; } else { label = 59; break; }
  case 51: 
   var $262=$c;
   var $263=$end;
   var $264=(($262)|(0))!=(($263)|(0));
   if ($264) { label = 52; break; } else { label = 59; break; }
  case 52: 
   var $266=$c;
   if ((($266)|(0))==10) {
    label = 53; break;
   }
   else if ((($266)|(0))==92) {
    label = 54; break;
   }
   else {
   label = 55; break;
   }
  case 53: 
   var $268=$2;
   var $269=(($268+32)|0);
   var $270=HEAP32[(($269)>>2)];
   var $271=((($270)+(1))|0);
   HEAP32[(($269)>>2)]=$271;
   var $272=$2;
   var $273=(($272+36)|0);
   HEAP32[(($273)>>2)]=0;
   label = 58; break;
  case 54: 
   label = 58; break;
  case 55: 
   var $276=$c;
   var $277=(($276) & 255);
   var $278=(($277)&(255));
   var $279=_isspace($278);
   var $280=(($279)|(0))!=0;
   if ($280) { label = 57; break; } else { label = 56; break; }
  case 56: 
   var $282=$2;
   _tokadd($282, 92);
   label = 57; break;
  case 57: 
   label = 58; break;
  case 58: 
   label = 59; break;
  case 59: 
   var $286=$2;
   var $287=$c;
   _tokadd($286, $287);
   label = 60; break;
  case 60: 
   label = 5; break;
  case 61: 
   var $290=$c;
   var $291=(($290)|(0))==35;
   if ($291) { label = 62; break; } else { label = 68; break; }
  case 62: 
   var $293=$type;
   var $294=$293 & 2;
   var $295=(($294)|(0))!=0;
   if ($295) { label = 63; break; } else { label = 68; break; }
  case 63: 
   var $297=$2;
   var $298=_nextc($297);
   $c=$298;
   var $299=$c;
   var $300=(($299)|(0))==123;
   if ($300) { label = 64; break; } else { label = 67; break; }
  case 64: 
   var $302=$2;
   _tokfix($302);
   var $303=$2;
   var $304=(($303+40)|0);
   HEAP32[(($304)>>2)]=0;
   var $305=$2;
   var $306=(($305+72)|0);
   HEAP32[(($306)>>2)]=1;
   var $307=$2;
   var $308=$2;
   var $309=_tok($308);
   var $310=$2;
   var $311=_toklen($310);
   var $312=_new_str($307, $309, $311);
   var $313=$2;
   var $314=(($313+1124)|0);
   var $315=HEAP32[(($314)>>2)];
   var $316=$315;
   var $317=$316;
   HEAP32[(($317)>>2)]=$312;
   var $318=$hinf;
   var $319=(($318)|(0))!=0;
   if ($319) { label = 65; break; } else { label = 66; break; }
  case 65: 
   var $321=$hinf;
   var $322=$321;
   var $323=HEAP8[($322)];
   var $324=$323 & -3;
   HEAP8[($322)]=$324;
   label = 66; break;
  case 66: 
   $1=319;
   label = 104; break;
  case 67: 
   var $327=$2;
   _tokadd($327, 35);
   var $328=$2;
   var $329=$c;
   _pushback($328, $329);
   label = 5; break;
  case 68: 
   label = 69; break;
  case 69: 
   label = 70; break;
  case 70: 
   label = 71; break;
  case 71: 
   label = 72; break;
  case 72: 
   var $335=$type;
   var $336=$335 & 32;
   var $337=(($336)|(0))!=0;
   if ($337) { label = 73; break; } else { label = 82; break; }
  case 73: 
   var $339=$c;
   var $340=(($339) & 255);
   var $341=(($340)&(255));
   var $342=_isspace($341);
   var $343=(($342)|(0))!=0;
   if ($343) { label = 74; break; } else { label = 82; break; }
  case 74: 
   var $345=$2;
   var $346=_toklen($345);
   var $347=(($346)|(0))==0;
   if ($347) { label = 75; break; } else { label = 81; break; }
  case 75: 
   label = 76; break;
  case 76: 
   var $350=$c;
   var $351=(($350)|(0))==10;
   if ($351) { label = 77; break; } else { label = 78; break; }
  case 77: 
   var $353=$2;
   var $354=(($353+32)|0);
   var $355=HEAP32[(($354)>>2)];
   var $356=((($355)+(1))|0);
   HEAP32[(($354)>>2)]=$356;
   var $357=$2;
   var $358=(($357+36)|0);
   HEAP32[(($358)>>2)]=0;
   label = 78; break;
  case 78: 
   label = 79; break;
  case 79: 
   var $361=$2;
   var $362=_nextc($361);
   $c=$362;
   var $363=(($362) & 255);
   var $364=(($363)&(255));
   var $365=_isspace($364);
   var $366=(($365)|(0))!=0;
   if ($366) { label = 76; break; } else { label = 80; break; }
  case 80: 
   var $368=$2;
   var $369=$c;
   _pushback($368, $369);
   $1=366;
   label = 104; break;
  case 81: 
   var $371=$2;
   var $372=$c;
   _pushback($371, $372);
   var $373=$2;
   _tokfix($373);
   var $374=$2;
   var $375=$2;
   var $376=_tok($375);
   var $377=$2;
   var $378=_toklen($377);
   var $379=_new_str($374, $376, $378);
   var $380=$2;
   var $381=(($380+1124)|0);
   var $382=HEAP32[(($381)>>2)];
   var $383=$382;
   var $384=$383;
   HEAP32[(($384)>>2)]=$379;
   $1=320;
   label = 104; break;
  case 82: 
   var $386=$2;
   var $387=$c;
   _tokadd($386, $387);
   label = 5; break;
  case 83: 
   var $389=$2;
   _tokfix($389);
   var $390=$2;
   var $391=(($390+40)|0);
   HEAP32[(($391)>>2)]=1;
   var $392=$2;
   _end_strterm($392);
   var $393=$type;
   var $394=$393 & 128;
   var $395=(($394)|(0))!=0;
   if ($395) { label = 84; break; } else { label = 85; break; }
  case 84: 
   var $397=$2;
   var $398=$2;
   var $399=_tok($398);
   var $400=$2;
   var $401=_toklen($400);
   var $402=_new_xstr($397, $399, $401);
   var $403=$2;
   var $404=(($403+1124)|0);
   var $405=HEAP32[(($404)>>2)];
   var $406=$405;
   var $407=$406;
   HEAP32[(($407)>>2)]=$402;
   $1=316;
   label = 104; break;
  case 85: 
   var $409=$type;
   var $410=$409 & 4;
   var $411=(($410)|(0))!=0;
   if ($411) { label = 86; break; } else { label = 103; break; }
  case 86: 
   $f=0;
   var $413=$2;
   var $414=$2;
   var $415=_tok($414);
   var $416=$2;
   var $417=_toklen($416);
   var $418=_parser_strndup($413, $415, $417);
   $s2=$418;
   var $419=$flag;
   HEAP8[($419)]=0; HEAP8[((($419)+(1))|0)]=0; HEAP8[((($419)+(2))|0)]=0; HEAP8[((($419)+(3))|0)]=0;
   var $420=$2;
   var $421=_newtok($420);
   label = 87; break;
  case 87: 
   var $423=$2;
   var $424=_nextc($423);
   $c1=$424;
   var $425=$c1;
   var $426=(($425) & 255);
   var $427=(($426)&(255));
   var $428=_isalpha($427);
   var $429=(($428)|(0))!=0;
   if ($429) { label = 88; break; } else { label = 94; break; }
  case 88: 
   var $431=$c1;
   if ((($431)|(0))==105) {
    label = 89; break;
   }
   else if ((($431)|(0))==120) {
    label = 90; break;
   }
   else if ((($431)|(0))==109) {
    label = 91; break;
   }
   else {
   label = 92; break;
   }
  case 89: 
   var $433=$f;
   var $434=$433 | 1;
   $f=$434;
   label = 93; break;
  case 90: 
   var $436=$f;
   var $437=$436 | 2;
   $f=$437;
   label = 93; break;
  case 91: 
   var $439=$f;
   var $440=$439 | 4;
   $f=$440;
   label = 93; break;
  case 92: 
   var $442=$2;
   var $443=$c1;
   _tokadd($442, $443);
   label = 93; break;
  case 93: 
   label = 87; break;
  case 94: 
   var $446=$2;
   var $447=$c1;
   _pushback($446, $447);
   var $448=$2;
   var $449=_toklen($448);
   var $450=(($449)|(0))!=0;
   if ($450) { label = 95; break; } else { label = 96; break; }
  case 95: 
   var $452=$2;
   _tokfix($452);
   var $453=(($msg)|0);
   var $454=$2;
   var $455=_toklen($454);
   var $456=(($455)|(0)) > 1;
   var $457=$456 ? (((99144)|0)) : (((111144)|0));
   var $458=$2;
   var $459=_tok($458);
   var $460=_snprintf($453, 128, ((99152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$457,HEAP32[(((tempInt)+(4))>>2)]=$459,tempInt));
   var $461=$2;
   var $462=(($msg)|0);
   _yyerror($461, $462);
   label = 96; break;
  case 96: 
   var $464=$f;
   var $465=$464 & 1;
   var $466=(($465)|(0))!=0;
   if ($466) { label = 97; break; } else { label = 98; break; }
  case 97: 
   var $468=(($flag)|0);
   var $469=_strcat($468, ((99088)|0));
   label = 98; break;
  case 98: 
   var $471=$f;
   var $472=$471 & 2;
   var $473=(($472)|(0))!=0;
   if ($473) { label = 99; break; } else { label = 100; break; }
  case 99: 
   var $475=(($flag)|0);
   var $476=_strcat($475, ((99084)|0));
   label = 100; break;
  case 100: 
   var $478=$f;
   var $479=$478 & 4;
   var $480=(($479)|(0))!=0;
   if ($480) { label = 101; break; } else { label = 102; break; }
  case 101: 
   var $482=(($flag)|0);
   var $483=_strcat($482, ((99056)|0));
   label = 102; break;
  case 102: 
   var $485=$2;
   var $486=$s2;
   var $487=$2;
   var $488=(($flag)|0);
   var $489=_parser_strdup($487, $488);
   var $490=_new_regx($485, $486, $489);
   var $491=$2;
   var $492=(($491+1124)|0);
   var $493=HEAP32[(($492)>>2)];
   var $494=$493;
   var $495=$494;
   HEAP32[(($495)>>2)]=$490;
   $1=317;
   label = 104; break;
  case 103: 
   var $497=$2;
   var $498=$2;
   var $499=_tok($498);
   var $500=$2;
   var $501=_toklen($500);
   var $502=_new_str($497, $499, $501);
   var $503=$2;
   var $504=(($503+1124)|0);
   var $505=HEAP32[(($504)>>2)];
   var $506=$505;
   var $507=$506;
   HEAP32[(($507)>>2)]=$502;
   $1=318;
   label = 104; break;
  case 104: 
   var $509=$1;
   STACKTOP = sp;
   return $509;
  default: assert(0, "bad label: " + label);
 }
}
function _nextc($p) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   var $tmp;
   var $cxt;
   $2=$p;
   var $3=$2;
   var $4=(($3+80)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$2;
   var $9=(($8+80)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$12;
   $c=$13;
   var $14=$2;
   var $15=(($14+80)|0);
   var $16=HEAP32[(($15)>>2)];
   $tmp=$16;
   var $17=$2;
   var $18=(($17+80)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19+4)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$2;
   var $23=(($22+80)|0);
   HEAP32[(($23)>>2)]=$21;
   var $24=$2;
   var $25=$tmp;
   _cons_free_gen($24, $25);
   label = 15; break;
  case 3: 
   var $27=$2;
   var $28=(($27+20)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29)|(0))!=0;
   if ($30) { label = 4; break; } else { label = 9; break; }
  case 4: 
   var $32=$2;
   var $33=(($32+20)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=_feof($34);
   var $36=(($35)|(0))!=0;
   if ($36) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 16; break;
  case 6: 
   var $39=$2;
   var $40=(($39+20)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=_fgetc($41);
   $c=$42;
   var $43=$c;
   var $44=(($43)|(0))==-1;
   if ($44) { label = 7; break; } else { label = 8; break; }
  case 7: 
   label = 16; break;
  case 8: 
   label = 14; break;
  case 9: 
   var $48=$2;
   var $49=(($48+12)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($50)|(0))!=0;
   if ($51) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $53=$2;
   var $54=(($53+12)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=$2;
   var $57=(($56+16)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($55)>>>(0)) >= (($58)>>>(0));
   if ($59) { label = 11; break; } else { label = 12; break; }
  case 11: 
   label = 16; break;
  case 12: 
   var $62=$2;
   var $63=(($62+12)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64+1)|0);
   HEAP32[(($63)>>2)]=$65;
   var $66=HEAP8[($64)];
   var $67=(($66)&(255));
   $c=$67;
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $71=$2;
   var $72=(($71+36)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=((($73)+(1))|0);
   HEAP32[(($72)>>2)]=$74;
   var $75=$c;
   $1=$75;
   label = 21; break;
  case 16: 
   var $77=$2;
   var $78=(($77+24)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79)|(0))!=0;
   if ($80) { label = 18; break; } else { label = 17; break; }
  case 17: 
   $1=-1;
   label = 21; break;
  case 18: 
   var $83=$2;
   var $84=(($83+24)|0);
   var $85=HEAP32[(($84)>>2)];
   $cxt=$85;
   var $86=$cxt;
   var $87=(($86+16)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=$2;
   var $90=FUNCTION_TABLE[$88]($89);
   var $91=(($90)|(0)) < 0;
   if ($91) { label = 19; break; } else { label = 20; break; }
  case 19: 
   $1=-1;
   label = 21; break;
  case 20: 
   var $94=$2;
   var $95=(($94+24)|0);
   HEAP32[(($95)>>2)]=0;
   var $96=$2;
   var $97=_nextc($96);
   $c=$97;
   var $98=$cxt;
   var $99=$2;
   var $100=(($99+24)|0);
   HEAP32[(($100)>>2)]=$98;
   var $101=$c;
   $1=$101;
   label = 21; break;
  case 21: 
   var $103=$1;
   return $103;
  default: assert(0, "bad label: " + label);
 }
}
function _newtok($p) {
 var label = 0;
 var $1;
 $1=$p;
 var $2=$1;
 var $3=(($2+1108)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=$1;
 var $5=(($4+36)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=((($6)-(1))|0);
 return $7;
}
function _tokadd($p, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$p;
   $2=$c;
   var $3=$1;
   var $4=(($3+1108)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0)) < 1024;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$2;
   var $9=(($8) & 255);
   var $10=$1;
   var $11=(($10+1108)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=((($12)+(1))|0);
   HEAP32[(($11)>>2)]=$13;
   var $14=$1;
   var $15=(($14+84)|0);
   var $16=(($15+$12)|0);
   HEAP8[($16)]=$9;
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _skip($p, $term) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   $1=$p;
   $2=$term;
   label = 2; break;
  case 2: 
   var $4=$1;
   var $5=_nextc($4);
   $c=$5;
   var $6=$c;
   var $7=(($6)|(0)) < 0;
   if ($7) { label = 3; break; } else { label = 4; break; }
  case 3: 
   label = 7; break;
  case 4: 
   var $10=$c;
   var $11=$2;
   var $12=(($11 << 24) >> 24);
   var $13=(($10)|(0))==(($12)|(0));
   if ($13) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 7; break;
  case 6: 
   label = 2; break;
  case 7: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _new_strterm($p, $type, $term, $paren) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$p;
 $2=$type;
 $3=$term;
 $4=$paren;
 var $5=$1;
 var $6=$2;
 var $7=$6;
 var $8=$1;
 var $9=$1;
 var $10=$4;
 var $11=$10;
 var $12=$3;
 var $13=$12;
 var $14=_cons_gen($9, $11, $13);
 var $15=_cons_gen($8, 0, $14);
 var $16=_cons_gen($5, $7, $15);
 return $16;
}
function _pushback($p, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$p;
   $2=$c;
   var $3=$2;
   var $4=(($3)|(0)) < 0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   var $7=$1;
   var $8=(($7+36)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=((($9)-(1))|0);
   HEAP32[(($8)>>2)]=$10;
   var $11=$1;
   var $12=$2;
   var $13=$12;
   var $14=$1;
   var $15=(($14+80)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=_cons_gen($11, $13, $16);
   var $18=$1;
   var $19=(($18+80)|0);
   HEAP32[(($19)>>2)]=$17;
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _yywarning($p, $s) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$s;
 var $3=$1;
 var $4=$2;
 _yywarn($3, $4);
 return;
}
function _peeks($p, $s) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $len;
   var $n;
   $2=$p;
   $3=$s;
   var $4=$3;
   var $5=_strlen($4);
   $len=$5;
   var $6=$2;
   var $7=(($6+20)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 8; break; }
  case 2: 
   $n=0;
   label = 3; break;
  case 3: 
   var $12=$3;
   var $13=HEAP8[($12)];
   var $14=(($13 << 24) >> 24)!=0;
   if ($14) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $16=$2;
   var $17=$3;
   var $18=(($17+1)|0);
   $3=$18;
   var $19=HEAP8[($17)];
   var $20=(($19 << 24) >> 24);
   var $21=$n;
   var $22=((($21)+(1))|0);
   $n=$22;
   var $23=_peek_n($16, $20, $21);
   var $24=(($23)|(0))!=0;
   if ($24) { label = 6; break; } else { label = 5; break; }
  case 5: 
   $1=0;
   label = 15; break;
  case 6: 
   label = 3; break;
  case 7: 
   $1=1;
   label = 15; break;
  case 8: 
   var $29=$2;
   var $30=(($29+12)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31)|(0))!=0;
   if ($32) { label = 9; break; } else { label = 13; break; }
  case 9: 
   var $34=$2;
   var $35=(($34+12)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=$len;
   var $38=(($36+$37)|0);
   var $39=$2;
   var $40=(($39+16)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($38)>>>(0)) >= (($41)>>>(0));
   if ($42) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $44=$2;
   var $45=(($44+12)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=$3;
   var $48=$len;
   var $49=_memcmp($46, $47, $48);
   var $50=(($49)|(0))==0;
   if ($50) { label = 11; break; } else { label = 12; break; }
  case 11: 
   $1=1;
   label = 15; break;
  case 12: 
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   $1=0;
   label = 15; break;
  case 15: 
   var $56=$1;
   return $56;
  default: assert(0, "bad label: " + label);
 }
}
function _skips($p, $s) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $c;
   var $len;
   $2=$p;
   $3=$s;
   label = 2; break;
  case 2: 
   label = 3; break;
  case 3: 
   var $6=$2;
   var $7=_nextc($6);
   $c=$7;
   var $8=$c;
   var $9=(($8)|(0)) < 0;
   if ($9) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $11=$c;
   $1=$11;
   label = 15; break;
  case 5: 
   var $13=$c;
   var $14=$3;
   var $15=HEAP8[($14)];
   var $16=(($15 << 24) >> 24);
   var $17=(($13)|(0))==(($16)|(0));
   if ($17) { label = 6; break; } else { label = 7; break; }
  case 6: 
   label = 8; break;
  case 7: 
   label = 3; break;
  case 8: 
   var $21=$3;
   var $22=(($21+1)|0);
   $3=$22;
   var $23=$2;
   var $24=$3;
   var $25=_peeks($23, $24);
   var $26=(($25)|(0))!=0;
   if ($26) { label = 9; break; } else { label = 13; break; }
  case 9: 
   var $28=$3;
   var $29=_strlen($28);
   $len=$29;
   label = 10; break;
  case 10: 
   var $31=$len;
   var $32=((($31)-(1))|0);
   $len=$32;
   var $33=(($31)|(0))!=0;
   if ($33) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $35=$2;
   var $36=_nextc($35);
   label = 10; break;
  case 12: 
   $1=1;
   label = 15; break;
  case 13: 
   var $39=$3;
   var $40=((($39)-(1))|0);
   $3=$40;
   label = 14; break;
  case 14: 
   label = 2; break;
  case 15: 
   var $43=$1;
   return $43;
  default: assert(0, "bad label: " + label);
 }
}
function _heredoc_identifier($p) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   var $type;
   var $indent;
   var $quote;
   var $newnode;
   var $info;
   var $term;
   var $n;
   $2=$p;
   $type=65;
   $indent=0;
   $quote=0;
   var $3=$2;
   var $4=_nextc($3);
   $c=$4;
   var $5=$c;
   var $6=(($5) & 255);
   var $7=(($6)&(255));
   var $8=_isspace($7);
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=$c;
   var $12=(($11)|(0))==61;
   if ($12) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $14=$2;
   var $15=$c;
   _pushback($14, $15);
   $1=0;
   label = 43; break;
  case 4: 
   var $17=$c;
   var $18=(($17)|(0))==45;
   if ($18) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $indent=1;
   var $20=$2;
   var $21=_nextc($20);
   $c=$21;
   label = 6; break;
  case 6: 
   var $23=$c;
   var $24=(($23)|(0))==39;
   if ($24) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $26=$c;
   var $27=(($26)|(0))==34;
   if ($27) { label = 8; break; } else { label = 20; break; }
  case 8: 
   var $29=$c;
   $term=$29;
   var $30=$c;
   var $31=(($30)|(0))==39;
   if ($31) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $quote=1;
   label = 10; break;
  case 10: 
   var $34=$2;
   var $35=_newtok($34);
   label = 11; break;
  case 11: 
   var $37=$2;
   var $38=_nextc($37);
   $c=$38;
   var $39=(($38)|(0))!=-1;
   if ($39) { label = 12; break; } else { var $45 = 0;label = 13; break; }
  case 12: 
   var $41=$c;
   var $42=$term;
   var $43=(($41)|(0))!=(($42)|(0));
   var $45 = $43;label = 13; break;
  case 13: 
   var $45;
   if ($45) { label = 14; break; } else { label = 17; break; }
  case 14: 
   var $47=$c;
   var $48=(($47)|(0))==10;
   if ($48) { label = 15; break; } else { label = 16; break; }
  case 15: 
   $c=-1;
   label = 17; break;
  case 16: 
   var $51=$2;
   var $52=$c;
   _tokadd($51, $52);
   label = 11; break;
  case 17: 
   var $54=$c;
   var $55=(($54)|(0))==-1;
   if ($55) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $57=$2;
   _yyerror($57, ((99268)|0));
   $1=0;
   label = 43; break;
  case 19: 
   label = 35; break;
  case 20: 
   var $60=$c;
   var $61=_isalnum($60);
   var $62=(($61)|(0))!=0;
   if ($62) { label = 26; break; } else { label = 21; break; }
  case 21: 
   var $64=$c;
   var $65=(($64)|(0))==95;
   if ($65) { label = 26; break; } else { label = 22; break; }
  case 22: 
   var $67=$c;
   var $68=(($67)>>>(0)) <= 127;
   if ($68) { label = 23; break; } else { label = 26; break; }
  case 23: 
   var $70=$2;
   var $71=$c;
   _pushback($70, $71);
   var $72=$indent;
   var $73=(($72)|(0))!=0;
   if ($73) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $75=$2;
   _pushback($75, 45);
   label = 25; break;
  case 25: 
   $1=0;
   label = 43; break;
  case 26: 
   var $78=$2;
   var $79=_newtok($78);
   label = 27; break;
  case 27: 
   var $81=$2;
   var $82=$c;
   _tokadd($81, $82);
   label = 28; break;
  case 28: 
   var $84=$2;
   var $85=_nextc($84);
   $c=$85;
   var $86=(($85)|(0))!=-1;
   if ($86) { label = 29; break; } else { var $101 = 0;label = 33; break; }
  case 29: 
   var $88=$c;
   var $89=_isalnum($88);
   var $90=(($89)|(0))!=0;
   if ($90) { var $99 = 1;label = 32; break; } else { label = 30; break; }
  case 30: 
   var $92=$c;
   var $93=(($92)|(0))==95;
   if ($93) { var $99 = 1;label = 32; break; } else { label = 31; break; }
  case 31: 
   var $95=$c;
   var $96=(($95)>>>(0)) <= 127;
   var $97=$96 ^ 1;
   var $99 = $97;label = 32; break;
  case 32: 
   var $99;
   var $101 = $99;label = 33; break;
  case 33: 
   var $101;
   if ($101) { label = 27; break; } else { label = 34; break; }
  case 34: 
   var $103=$2;
   var $104=$c;
   _pushback($103, $104);
   label = 35; break;
  case 35: 
   var $106=$2;
   _tokfix($106);
   var $107=$2;
   var $108=_new_heredoc($107);
   $newnode=$108;
   var $109=$newnode;
   var $110=(($109+4)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=$111;
   $info=$112;
   var $113=$2;
   var $114=$2;
   var $115=_tok($114);
   var $116=$2;
   var $117=_toklen($116);
   var $118=_parser_strndup($113, $115, $117);
   var $119=$info;
   var $120=(($119+8)|0);
   HEAP32[(($120)>>2)]=$118;
   var $121=$2;
   var $122=_toklen($121);
   var $123=$info;
   var $124=(($123+12)|0);
   HEAP32[(($124)>>2)]=$122;
   var $125=$quote;
   var $126=(($125)|(0))!=0;
   if ($126) { label = 37; break; } else { label = 36; break; }
  case 36: 
   var $128=$type;
   var $129=$128 | 2;
   $type=$129;
   label = 37; break;
  case 37: 
   var $131=$type;
   var $132=$info;
   var $133=(($132+4)|0);
   HEAP32[(($133)>>2)]=$131;
   var $134=$indent;
   var $135=(($134) & 255);
   var $136=$info;
   var $137=$135 & 1;
   var $138=$136;
   var $139=$137 & 1;
   var $140=HEAP8[($138)];
   var $141=$140 & -2;
   var $142=$141 | $139;
   HEAP8[($138)]=$142;
   var $143=$info;
   var $144=$143;
   var $145=HEAP8[($144)];
   var $146=$145 & -3;
   var $147=$146 | 2;
   HEAP8[($144)]=$147;
   var $148=$info;
   var $149=(($148+16)|0);
   HEAP32[(($149)>>2)]=0;
   var $150=$2;
   var $151=$2;
   var $152=(($151+1112)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=$2;
   var $155=$newnode;
   var $156=_list1_gen($154, $155);
   var $157=_append_gen($150, $153, $156);
   var $158=$2;
   var $159=(($158+1112)|0);
   HEAP32[(($159)>>2)]=$157;
   var $160=$2;
   var $161=(($160+1116)|0);
   var $162=HEAP32[(($161)>>2)];
   var $163=(($162)|(0))==0;
   if ($163) { label = 38; break; } else { label = 42; break; }
  case 38: 
   var $165=$2;
   var $166=(($165+1112)|0);
   var $167=HEAP32[(($166)>>2)];
   $n=$167;
   label = 39; break;
  case 39: 
   var $169=$n;
   var $170=(($169+4)|0);
   var $171=HEAP32[(($170)>>2)];
   var $172=(($171)|(0))!=0;
   if ($172) { label = 40; break; } else { label = 41; break; }
  case 40: 
   var $174=$n;
   var $175=(($174+4)|0);
   var $176=HEAP32[(($175)>>2)];
   $n=$176;
   label = 39; break;
  case 41: 
   var $178=$n;
   var $179=$2;
   var $180=(($179+1116)|0);
   HEAP32[(($180)>>2)]=$178;
   label = 42; break;
  case 42: 
   var $182=$2;
   var $183=$182;
   var $184=(($183+1120)|0);
   var $185=HEAP8[($184)];
   var $186=$185 & -2;
   var $187=$186 | 1;
   HEAP8[($184)]=$187;
   var $188=$2;
   var $189=(($188+40)|0);
   HEAP32[(($189)>>2)]=1;
   var $190=$newnode;
   var $191=$2;
   var $192=(($191+1124)|0);
   var $193=HEAP32[(($192)>>2)];
   var $194=$193;
   var $195=$194;
   HEAP32[(($195)>>2)]=$190;
   $1=364;
   label = 43; break;
  case 43: 
   var $197=$1;
   return $197;
  default: assert(0, "bad label: " + label);
 }
}
function _read_escape($p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   var $buf=sp;
   var $i=(sp)+(12);
   var $buf1=(sp)+(16);
   var $i2=(sp)+(24);
   $2=$p;
   var $3=$2;
   var $4=_nextc($3);
   $c=$4;
   if ((($4)|(0))==92) {
    label = 2; break;
   }
   else if ((($4)|(0))==110) {
    label = 3; break;
   }
   else if ((($4)|(0))==116) {
    label = 4; break;
   }
   else if ((($4)|(0))==114) {
    label = 5; break;
   }
   else if ((($4)|(0))==102) {
    label = 6; break;
   }
   else if ((($4)|(0))==118) {
    label = 7; break;
   }
   else if ((($4)|(0))==97) {
    label = 8; break;
   }
   else if ((($4)|(0))==101) {
    label = 9; break;
   }
   else if ((($4)|(0))==48 | (($4)|(0))==49 | (($4)|(0))==50 | (($4)|(0))==51 | (($4)|(0))==52 | (($4)|(0))==53 | (($4)|(0))==54 | (($4)|(0))==55) {
    label = 10; break;
   }
   else if ((($4)|(0))==120) {
    label = 20; break;
   }
   else if ((($4)|(0))==98) {
    label = 31; break;
   }
   else if ((($4)|(0))==115) {
    label = 32; break;
   }
   else if ((($4)|(0))==77) {
    label = 33; break;
   }
   else if ((($4)|(0))==67) {
    label = 40; break;
   }
   else if ((($4)|(0))==99) {
    label = 43; break;
   }
   else if ((($4)|(0))==-1) {
    label = 53; break;
   }
   else {
   label = 54; break;
   }
  case 2: 
   var $6=$c;
   $1=$6;
   label = 55; break;
  case 3: 
   $1=10;
   label = 55; break;
  case 4: 
   $1=9;
   label = 55; break;
  case 5: 
   $1=13;
   label = 55; break;
  case 6: 
   $1=12;
   label = 55; break;
  case 7: 
   $1=11;
   label = 55; break;
  case 8: 
   $1=7;
   label = 55; break;
  case 9: 
   $1=27;
   label = 55; break;
  case 10: 
   var $15=$c;
   var $16=(($buf)|0);
   HEAP32[(($16)>>2)]=$15;
   HEAP32[(($i)>>2)]=1;
   label = 11; break;
  case 11: 
   var $18=HEAP32[(($i)>>2)];
   var $19=(($18)|(0)) < 3;
   if ($19) { label = 12; break; } else { label = 19; break; }
  case 12: 
   var $21=$2;
   var $22=_nextc($21);
   var $23=HEAP32[(($i)>>2)];
   var $24=(($buf+($23<<2))|0);
   HEAP32[(($24)>>2)]=$22;
   var $25=HEAP32[(($i)>>2)];
   var $26=(($buf+($25<<2))|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27)|(0))==-1;
   if ($28) { label = 13; break; } else { label = 14; break; }
  case 13: 
   label = 52; break;
  case 14: 
   var $31=HEAP32[(($i)>>2)];
   var $32=(($buf+($31<<2))|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33)|(0)) < 48;
   if ($34) { label = 16; break; } else { label = 15; break; }
  case 15: 
   var $36=HEAP32[(($i)>>2)];
   var $37=(($buf+($36<<2))|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=55 < (($38)|(0));
   if ($39) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $41=$2;
   var $42=HEAP32[(($i)>>2)];
   var $43=(($buf+($42<<2))|0);
   var $44=HEAP32[(($43)>>2)];
   _pushback($41, $44);
   label = 19; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $47=HEAP32[(($i)>>2)];
   var $48=((($47)+(1))|0);
   HEAP32[(($i)>>2)]=$48;
   label = 11; break;
  case 19: 
   var $50=(($buf)|0);
   var $51=HEAP32[(($i)>>2)];
   var $52=_scan_oct($50, $51, $i);
   $c=$52;
   var $53=$c;
   $1=$53;
   label = 55; break;
  case 20: 
   HEAP32[(($i2)>>2)]=0;
   label = 21; break;
  case 21: 
   var $56=HEAP32[(($i2)>>2)];
   var $57=(($56)|(0)) < 2;
   if ($57) { label = 22; break; } else { label = 28; break; }
  case 22: 
   var $59=$2;
   var $60=_nextc($59);
   var $61=HEAP32[(($i2)>>2)];
   var $62=(($buf1+($61<<2))|0);
   HEAP32[(($62)>>2)]=$60;
   var $63=HEAP32[(($i2)>>2)];
   var $64=(($buf1+($63<<2))|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65)|(0))==-1;
   if ($66) { label = 23; break; } else { label = 24; break; }
  case 23: 
   label = 52; break;
  case 24: 
   var $69=HEAP32[(($i2)>>2)];
   var $70=(($buf1+($69<<2))|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($71) & 255);
   var $73=(($72)&(255));
   var $74=_isxdigit($73);
   var $75=(($74)|(0))!=0;
   if ($75) { label = 26; break; } else { label = 25; break; }
  case 25: 
   var $77=$2;
   var $78=HEAP32[(($i2)>>2)];
   var $79=(($buf1+($78<<2))|0);
   var $80=HEAP32[(($79)>>2)];
   _pushback($77, $80);
   label = 28; break;
  case 26: 
   label = 27; break;
  case 27: 
   var $83=HEAP32[(($i2)>>2)];
   var $84=((($83)+(1))|0);
   HEAP32[(($i2)>>2)]=$84;
   label = 21; break;
  case 28: 
   var $86=(($buf1)|0);
   var $87=HEAP32[(($i2)>>2)];
   var $88=_scan_hex($86, $87, $i2);
   $c=$88;
   var $89=HEAP32[(($i2)>>2)];
   var $90=(($89)|(0))==0;
   if ($90) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $92=$2;
   _yyerror($92, ((99460)|0));
   $1=0;
   label = 55; break;
  case 30: 
   var $94=$c;
   $1=$94;
   label = 55; break;
  case 31: 
   $1=8;
   label = 55; break;
  case 32: 
   $1=32;
   label = 55; break;
  case 33: 
   var $98=$2;
   var $99=_nextc($98);
   $c=$99;
   var $100=(($99)|(0))!=45;
   if ($100) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $102=$2;
   _yyerror($102, ((99460)|0));
   var $103=$2;
   var $104=$c;
   _pushback($103, $104);
   $1=0;
   label = 55; break;
  case 35: 
   var $106=$2;
   var $107=_nextc($106);
   $c=$107;
   var $108=(($107)|(0))==92;
   if ($108) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $110=$2;
   var $111=_read_escape($110);
   var $112=$111 | 128;
   $1=$112;
   label = 55; break;
  case 37: 
   var $114=$c;
   var $115=(($114)|(0))==-1;
   if ($115) { label = 38; break; } else { label = 39; break; }
  case 38: 
   label = 52; break;
  case 39: 
   var $118=$c;
   var $119=$118 & 255;
   var $120=$119 | 128;
   $1=$120;
   label = 55; break;
  case 40: 
   var $122=$2;
   var $123=_nextc($122);
   $c=$123;
   var $124=(($123)|(0))!=45;
   if ($124) { label = 41; break; } else { label = 42; break; }
  case 41: 
   var $126=$2;
   _yyerror($126, ((99460)|0));
   var $127=$2;
   var $128=$c;
   _pushback($127, $128);
   $1=0;
   label = 55; break;
  case 42: 
   label = 43; break;
  case 43: 
   var $131=$2;
   var $132=_nextc($131);
   $c=$132;
   var $133=(($132)|(0))==92;
   if ($133) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $135=$2;
   var $136=_read_escape($135);
   $c=$136;
   label = 51; break;
  case 45: 
   var $138=$c;
   var $139=(($138)|(0))==63;
   if ($139) { label = 46; break; } else { label = 47; break; }
  case 46: 
   $1=127;
   label = 55; break;
  case 47: 
   var $142=$c;
   var $143=(($142)|(0))==-1;
   if ($143) { label = 48; break; } else { label = 49; break; }
  case 48: 
   label = 52; break;
  case 49: 
   label = 50; break;
  case 50: 
   label = 51; break;
  case 51: 
   var $148=$c;
   var $149=$148 & 159;
   $1=$149;
   label = 55; break;
  case 52: 
   label = 53; break;
  case 53: 
   var $152=$2;
   _yyerror($152, ((99460)|0));
   $1=0;
   label = 55; break;
  case 54: 
   var $154=$c;
   $1=$154;
   label = 55; break;
  case 55: 
   var $156=$1;
   STACKTOP = sp;
   return $156;
  default: assert(0, "bad label: " + label);
 }
}
function _tok($p) {
 var label = 0;
 var $1;
 $1=$p;
 var $2=$1;
 var $3=(($2+84)|0);
 var $4=(($3)|0);
 return $4;
}
function _toklen($p) {
 var label = 0;
 var $1;
 $1=$p;
 var $2=$1;
 var $3=(($2+1108)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _toklast($p) {
 var label = 0;
 var $1;
 $1=$p;
 var $2=$1;
 var $3=(($2+1108)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(1))|0);
 var $6=$1;
 var $7=(($6+84)|0);
 var $8=(($7+$5)|0);
 var $9=HEAP8[($8)];
 var $10=(($9 << 24) >> 24);
 return $10;
}
function _hash($str, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $hval;
   $1=$str;
   $2=$len;
   var $3=$2;
   $hval=$3;
   var $4=$hval;
   if ((($4)|(0))==2 | (($4)|(0))==1) {
    label = 3; break;
   }
   else {
   label = 2; break;
   }
  case 2: 
   var $6=$1;
   var $7=(($6+2)|0);
   var $8=HEAP8[($7)];
   var $9=(($8)&(255));
   var $10=((75544+$9)|0);
   var $11=HEAP8[($10)];
   var $12=(($11)&(255));
   var $13=$hval;
   var $14=((($13)+($12))|0);
   $hval=$14;
   label = 3; break;
  case 3: 
   var $16=$1;
   var $17=(($16)|0);
   var $18=HEAP8[($17)];
   var $19=(($18)&(255));
   var $20=((75544+$19)|0);
   var $21=HEAP8[($20)];
   var $22=(($21)&(255));
   var $23=$hval;
   var $24=((($23)+($22))|0);
   $hval=$24;
   label = 4; break;
  case 4: 
   var $26=$hval;
   var $27=$2;
   var $28=((($27)-(1))|0);
   var $29=$1;
   var $30=(($29+$28)|0);
   var $31=HEAP8[($30)];
   var $32=(($31)&(255));
   var $33=((75544+$32)|0);
   var $34=HEAP8[($33)];
   var $35=(($34)&(255));
   var $36=((($26)+($35))|0);
   return $36;
  default: assert(0, "bad label: " + label);
 }
}
function _scan_oct($start, $len, $retlen) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $s;
   var $retval;
   $1=$start;
   $2=$len;
   $3=$retlen;
   var $4=$1;
   $s=$4;
   $retval=0;
   label = 2; break;
  case 2: 
   var $6=$2;
   var $7=((($6)-(1))|0);
   $2=$7;
   var $8=(($6)|(0))!=0;
   if ($8) { label = 3; break; } else { var $18 = 0;label = 5; break; }
  case 3: 
   var $10=$s;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0)) >= 48;
   if ($12) { label = 4; break; } else { var $18 = 0;label = 5; break; }
  case 4: 
   var $14=$s;
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0)) <= 55;
   var $18 = $16;label = 5; break;
  case 5: 
   var $18;
   if ($18) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $20=$retval;
   var $21=$20 << 3;
   $retval=$21;
   var $22=$s;
   var $23=(($22+4)|0);
   $s=$23;
   var $24=HEAP32[(($22)>>2)];
   var $25=((($24)-(48))|0);
   var $26=$retval;
   var $27=$26 | $25;
   $retval=$27;
   label = 2; break;
  case 7: 
   var $29=$s;
   var $30=$1;
   var $31=$29;
   var $32=$30;
   var $33=((($31)-($32))|0);
   var $34=((((($33)|(0)))/(4))&-1);
   var $35=$3;
   HEAP32[(($35)>>2)]=$34;
   var $36=$retval;
   return $36;
  default: assert(0, "bad label: " + label);
 }
}
function _cons_free_gen($p, $cons) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$cons;
 var $3=$1;
 var $4=(($3+8)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$2;
 var $7=(($6+4)|0);
 HEAP32[(($7)>>2)]=$5;
 var $8=$2;
 var $9=$1;
 var $10=(($9+8)|0);
 HEAP32[(($10)>>2)]=$8;
 return;
}
function _yystrlen($yystr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $yylen;
   $1=$yystr;
   $yylen=0;
   label = 2; break;
  case 2: 
   var $3=$yylen;
   var $4=$1;
   var $5=(($4+$3)|0);
   var $6=HEAP8[($5)];
   var $7=(($6 << 24) >> 24)!=0;
   if ($7) { label = 3; break; } else { label = 5; break; }
  case 3: 
   label = 4; break;
  case 4: 
   var $10=$yylen;
   var $11=((($10)+(1))|0);
   $yylen=$11;
   label = 2; break;
  case 5: 
   var $13=$yylen;
   return $13;
  default: assert(0, "bad label: " + label);
 }
}
function _yystpcpy($yydest, $yysrc) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $yyd;
   var $yys;
   $1=$yydest;
   $2=$yysrc;
   var $3=$1;
   $yyd=$3;
   var $4=$2;
   $yys=$4;
   label = 2; break;
  case 2: 
   var $6=$yys;
   var $7=(($6+1)|0);
   $yys=$7;
   var $8=HEAP8[($6)];
   var $9=$yyd;
   var $10=(($9+1)|0);
   $yyd=$10;
   HEAP8[($9)]=$8;
   var $11=(($8 << 24) >> 24);
   var $12=(($11)|(0))!=0;
   if ($12) { label = 3; break; } else { label = 4; break; }
  case 3: 
   label = 2; break;
  case 4: 
   var $15=$yyd;
   var $16=((($15)-(1))|0);
   return $16;
  default: assert(0, "bad label: " + label);
 }
}
function _local_var_p($p, $sym) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $l;
   var $n;
   $2=$p;
   $3=$sym;
   var $4=$2;
   var $5=(($4+76)|0);
   var $6=HEAP32[(($5)>>2)];
   $l=$6;
   label = 2; break;
  case 2: 
   var $8=$l;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $11=$l;
   var $12=(($11)|0);
   var $13=HEAP32[(($12)>>2)];
   $n=$13;
   label = 4; break;
  case 4: 
   var $15=$n;
   var $16=(($15)|(0))!=0;
   if ($16) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $18=$n;
   var $19=(($18)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$20;
   var $22=(($21) & 65535);
   var $23=(($22 << 16) >> 16);
   var $24=$3;
   var $25=(($24 << 16) >> 16);
   var $26=(($23)|(0))==(($25)|(0));
   if ($26) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $1=1;
   label = 10; break;
  case 7: 
   var $29=$n;
   var $30=(($29+4)|0);
   var $31=HEAP32[(($30)>>2)];
   $n=$31;
   label = 4; break;
  case 8: 
   var $33=$l;
   var $34=(($33+4)|0);
   var $35=HEAP32[(($34)>>2)];
   $l=$35;
   label = 2; break;
  case 9: 
   $1=0;
   label = 10; break;
  case 10: 
   var $38=$1;
   return $38;
  default: assert(0, "bad label: " + label);
 }
}
function _tokfix($p) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$p;
   var $2=$1;
   var $3=(($2+1108)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0)) >= 1024;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   _yyerror($7, ((99492)|0));
   label = 3; break;
  case 3: 
   var $9=$1;
   var $10=(($9+1108)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$1;
   var $13=(($12+84)|0);
   var $14=(($13+$11)|0);
   HEAP8[($14)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _arg_ambiguous($p) {
 var label = 0;
 var $1;
 $1=$p;
 var $2=$1;
 _yywarning($2, ((99532)|0));
 return 1;
}
function _yyerror_i($p, $fmt, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $buf=sp;
 $1=$p;
 $2=$fmt;
 $3=$i;
 var $4=(($buf)|0);
 var $5=$2;
 var $6=$3;
 var $7=_snprintf($4, 256, $5, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$6,tempInt));
 var $8=$1;
 var $9=(($buf)|0);
 _yyerror($8, $9);
 STACKTOP = sp;
 return;
}
function _yywarning_s($p, $fmt, $s) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $buf=sp;
 $1=$p;
 $2=$fmt;
 $3=$s;
 var $4=(($buf)|0);
 var $5=$2;
 var $6=$3;
 var $7=_snprintf($4, 256, $5, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$6,tempInt));
 var $8=$1;
 var $9=(($buf)|0);
 _yywarning($8, $9);
 STACKTOP = sp;
 return;
}
function _new_float($p, $s) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$s;
 var $3=$1;
 var $4=$1;
 var $5=$2;
 var $6=_parser_strdup($4, $5);
 var $7=$6;
 var $8=_cons_gen($3, 51, $7);
 return $8;
}
function _intern_gen($p, $s) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$s;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$2;
 var $7=_mrb_intern($5, $6);
 return $7;
}
function _new_back_ref($p, $n) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$n;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=_cons_gen($3, 46, $5);
 return $6;
}
function _new_nth_ref($p, $n) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$n;
 var $3=$1;
 var $4=$2;
 var $5=$4;
 var $6=_cons_gen($3, 45, $5);
 return $6;
}
function _peek_n($p, $c, $n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $list;
   var $c0;
   $2=$p;
   $3=$c;
   $4=$n;
   $list=0;
   label = 2; break;
  case 2: 
   var $6=$2;
   var $7=_nextc($6);
   $c0=$7;
   var $8=$c0;
   var $9=(($8)|(0)) < 0;
   if ($9) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $1=0;
   label = 12; break;
  case 4: 
   var $12=$2;
   var $13=$list;
   var $14=$2;
   var $15=$c0;
   var $16=$15;
   var $17=_list1_gen($14, $16);
   var $18=_append_gen($12, $13, $17);
   $list=$18;
   label = 5; break;
  case 5: 
   var $20=$4;
   var $21=((($20)-(1))|0);
   $4=$21;
   var $22=(($20)|(0))!=0;
   if ($22) { label = 2; break; } else { label = 6; break; }
  case 6: 
   var $24=$2;
   var $25=(($24+80)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|(0))!=0;
   if ($27) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $29=$2;
   var $30=$2;
   var $31=(($30+80)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$list;
   var $34=_append_gen($29, $32, $33);
   var $35=$2;
   var $36=(($35+80)|0);
   HEAP32[(($36)>>2)]=$34;
   label = 9; break;
  case 8: 
   var $38=$list;
   var $39=$2;
   var $40=(($39+80)|0);
   HEAP32[(($40)>>2)]=$38;
   label = 9; break;
  case 9: 
   var $42=$c0;
   var $43=$3;
   var $44=(($42)|(0))==(($43)|(0));
   if ($44) { label = 10; break; } else { label = 11; break; }
  case 10: 
   $1=1;
   label = 12; break;
  case 11: 
   $1=0;
   label = 12; break;
  case 12: 
   var $48=$1;
   return $48;
  default: assert(0, "bad label: " + label);
 }
}
function _reserved_word($str, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $key;
   var $s;
   $2=$str;
   $3=$len;
   var $4=$3;
   var $5=(($4)>>>(0)) <= 12;
   if ($5) { label = 2; break; } else { label = 10; break; }
  case 2: 
   var $7=$3;
   var $8=(($7)>>>(0)) >= 2;
   if ($8) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $10=$2;
   var $11=$3;
   var $12=_hash($10, $11);
   $key=$12;
   var $13=$key;
   var $14=(($13)|(0)) <= 50;
   if ($14) { label = 4; break; } else { label = 9; break; }
  case 4: 
   var $16=$key;
   var $17=(($16)|(0)) >= 0;
   if ($17) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $19=$key;
   var $20=((58856+($19<<4))|0);
   var $21=(($20)|0);
   var $22=HEAP32[(($21)>>2)];
   $s=$22;
   var $23=$2;
   var $24=HEAP8[($23)];
   var $25=(($24 << 24) >> 24);
   var $26=$s;
   var $27=HEAP8[($26)];
   var $28=(($27 << 24) >> 24);
   var $29=(($25)|(0))==(($28)|(0));
   if ($29) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $31=$2;
   var $32=(($31+1)|0);
   var $33=$s;
   var $34=(($33+1)|0);
   var $35=_strcmp($32, $34);
   var $36=(($35)|(0))!=0;
   if ($36) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $38=$key;
   var $39=((58856+($38<<4))|0);
   $1=$39;
   label = 11; break;
  case 8: 
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   $1=0;
   label = 11; break;
  case 11: 
   var $44=$1;
   return $44;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_intern($mrb, $cstr) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$cstr;
 var $3=$1;
 var $4=$2;
 var $5=_mrb_intern_cstr($3, $4);
 return $5;
}
function _parser_strdup($p, $s) {
 var label = 0;
 var $1;
 var $2;
 $1=$p;
 $2=$s;
 var $3=$1;
 var $4=$2;
 var $5=$2;
 var $6=_strlen($5);
 var $7=_parser_strndup($3, $4, $6);
 return $7;
}
function _parser_strndup($p, $s, $len) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $b;
 $1=$p;
 $2=$s;
 $3=$len;
 var $4=$1;
 var $5=$3;
 var $6=((($5)+(1))|0);
 var $7=_parser_palloc($4, $6);
 $b=$7;
 var $8=$b;
 var $9=$2;
 var $10=$3;
 assert($10 % 1 === 0);(_memcpy($8, $9, $10)|0);
 var $11=$3;
 var $12=$b;
 var $13=(($12+$11)|0);
 HEAP8[($13)]=0;
 var $14=$b;
 return $14;
}
function _scan_hex($start, $len, $retlen) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $s;
   var $retval;
   var $tmp;
   $1=$start;
   $2=$len;
   $3=$retlen;
   var $4=$1;
   $s=$4;
   $retval=0;
   label = 2; break;
  case 2: 
   var $6=$2;
   var $7=((($6)-(1))|0);
   $2=$7;
   var $8=(($6)|(0))!=0;
   if ($8) { label = 3; break; } else { var $19 = 0;label = 5; break; }
  case 3: 
   var $10=$s;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))!=0;
   if ($12) { label = 4; break; } else { var $19 = 0;label = 5; break; }
  case 4: 
   var $14=$s;
   var $15=HEAP32[(($14)>>2)];
   var $16=_strchr(((58820)|0), $15);
   $tmp=$16;
   var $17=(($16)|(0))!=0;
   var $19 = $17;label = 5; break;
  case 5: 
   var $19;
   if ($19) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $21=$retval;
   var $22=$21 << 4;
   $retval=$22;
   var $23=$tmp;
   var $24=$23;
   var $25=((($24)-(58820))|0);
   var $26=$25 & 15;
   var $27=$retval;
   var $28=$27 | $26;
   $retval=$28;
   var $29=$s;
   var $30=(($29+4)|0);
   $s=$30;
   label = 2; break;
  case 7: 
   var $32=$s;
   var $33=$1;
   var $34=$32;
   var $35=$33;
   var $36=((($34)-($35))|0);
   var $37=((((($36)|(0)))/(4))&-1);
   var $38=$3;
   HEAP32[(($38)>>2)]=$37;
   var $39=$retval;
   return $39;
  default: assert(0, "bad label: " + label);
 }
}
function _new_heredoc($p) {
 var label = 0;
 var $1;
 var $inf;
 $1=$p;
 var $2=$1;
 var $3=_parser_palloc($2, 20);
 var $4=$3;
 $inf=$4;
 var $5=$1;
 var $6=$inf;
 var $7=$6;
 var $8=_cons_gen($5, 99, $7);
 return $8;
}
function _end_strterm($p) {
 var label = 0;
 var $1;
 $1=$p;
 var $2=$1;
 var $3=$1;
 var $4=(($3+44)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+4)|0);
 var $9=HEAP32[(($8)>>2)];
 _cons_free_gen($2, $9);
 var $10=$1;
 var $11=$1;
 var $12=(($11+44)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($13+4)|0);
 var $15=HEAP32[(($14)>>2)];
 _cons_free_gen($10, $15);
 var $16=$1;
 var $17=$1;
 var $18=(($17+44)|0);
 var $19=HEAP32[(($18)>>2)];
 _cons_free_gen($16, $19);
 var $20=$1;
 var $21=(($20+44)|0);
 HEAP32[(($21)>>2)]=0;
 return;
}
function _new_xstr($p, $s, $len) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$s;
 $3=$len;
 var $4=$1;
 var $5=$1;
 var $6=$1;
 var $7=$2;
 var $8=$3;
 var $9=_parser_strndup($6, $7, $8);
 var $10=$9;
 var $11=$3;
 var $12=$11;
 var $13=_cons_gen($5, $10, $12);
 var $14=_cons_gen($4, 57, $13);
 return $14;
}
function _new_regx($p, $p1, $p2) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$p;
 $2=$p1;
 $3=$p2;
 var $4=$1;
 var $5=$1;
 var $6=$2;
 var $7=$6;
 var $8=$3;
 var $9=$8;
 var $10=_cons_gen($5, $7, $9);
 var $11=_cons_gen($4, 59, $10);
 return $11;
}
function _yytnamerr($yyres, $yystr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $yyn;
   var $yyp;
   $2=$yyres;
   $3=$yystr;
   var $4=$3;
   var $5=HEAP8[($4)];
   var $6=(($5 << 24) >> 24);
   var $7=(($6)|(0))==34;
   if ($7) { label = 2; break; } else { label = 16; break; }
  case 2: 
   $yyn=0;
   var $9=$3;
   $yyp=$9;
   label = 3; break;
  case 3: 
   var $11=$yyp;
   var $12=(($11+1)|0);
   $yyp=$12;
   var $13=HEAP8[($12)];
   var $14=(($13 << 24) >> 24);
   if ((($14)|(0))==39 | (($14)|(0))==44) {
    label = 4; break;
   }
   else if ((($14)|(0))==92) {
    label = 5; break;
   }
   else if ((($14)|(0))==34) {
    label = 11; break;
   }
   else {
   label = 8; break;
   }
  case 4: 
   label = 15; break;
  case 5: 
   var $17=$yyp;
   var $18=(($17+1)|0);
   $yyp=$18;
   var $19=HEAP8[($18)];
   var $20=(($19 << 24) >> 24);
   var $21=(($20)|(0))!=92;
   if ($21) { label = 6; break; } else { label = 7; break; }
  case 6: 
   label = 15; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $25=$2;
   var $26=(($25)|(0))!=0;
   if ($26) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $28=$yyp;
   var $29=HEAP8[($28)];
   var $30=$yyn;
   var $31=$2;
   var $32=(($31+$30)|0);
   HEAP8[($32)]=$29;
   label = 10; break;
  case 10: 
   var $34=$yyn;
   var $35=((($34)+(1))|0);
   $yyn=$35;
   label = 14; break;
  case 11: 
   var $37=$2;
   var $38=(($37)|(0))!=0;
   if ($38) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $40=$yyn;
   var $41=$2;
   var $42=(($41+$40)|0);
   HEAP8[($42)]=0;
   label = 13; break;
  case 13: 
   var $44=$yyn;
   $1=$44;
   label = 19; break;
  case 14: 
   label = 3; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $48=$2;
   var $49=(($48)|(0))!=0;
   if ($49) { label = 18; break; } else { label = 17; break; }
  case 17: 
   var $51=$3;
   var $52=_yystrlen($51);
   $1=$52;
   label = 19; break;
  case 18: 
   var $54=$2;
   var $55=$3;
   var $56=_yystpcpy($54, $55);
   var $57=$2;
   var $58=$56;
   var $59=$57;
   var $60=((($58)-($59))|0);
   $1=$60;
   label = 19; break;
  case 19: 
   var $62=$1;
   return $62;
  default: assert(0, "bad label: " + label);
 }
}
function _list6_gen($p, $a, $b, $c, $d, $e, $f) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 $1=$p;
 $2=$a;
 $3=$b;
 $4=$c;
 $5=$d;
 $6=$e;
 $7=$f;
 var $8=$1;
 var $9=$2;
 var $10=$1;
 var $11=$3;
 var $12=$1;
 var $13=$4;
 var $14=$1;
 var $15=$5;
 var $16=$1;
 var $17=$6;
 var $18=$1;
 var $19=$7;
 var $20=_cons_gen($18, $19, 0);
 var $21=_cons_gen($16, $17, $20);
 var $22=_cons_gen($14, $15, $21);
 var $23=_cons_gen($12, $13, $22);
 var $24=_cons_gen($10, $11, $23);
 var $25=_cons_gen($8, $9, $24);
 return $25;
}
function _list5_gen($p, $a, $b, $c, $d, $e) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 $1=$p;
 $2=$a;
 $3=$b;
 $4=$c;
 $5=$d;
 $6=$e;
 var $7=$1;
 var $8=$2;
 var $9=$1;
 var $10=$3;
 var $11=$1;
 var $12=$4;
 var $13=$1;
 var $14=$5;
 var $15=$1;
 var $16=$6;
 var $17=_cons_gen($15, $16, 0);
 var $18=_cons_gen($13, $14, $17);
 var $19=_cons_gen($11, $12, $18);
 var $20=_cons_gen($9, $10, $19);
 var $21=_cons_gen($7, $8, $20);
 return $21;
}
function _list4_gen($p, $a, $b, $c, $d) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$p;
 $2=$a;
 $3=$b;
 $4=$c;
 $5=$d;
 var $6=$1;
 var $7=$2;
 var $8=$1;
 var $9=$3;
 var $10=$1;
 var $11=$4;
 var $12=$1;
 var $13=$5;
 var $14=_cons_gen($12, $13, 0);
 var $15=_cons_gen($10, $11, $14);
 var $16=_cons_gen($8, $9, $15);
 var $17=_cons_gen($6, $7, $16);
 return $17;
}
function _parser_palloc($p, $size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $m;
   $1=$p;
   $2=$size;
   var $3=$1;
   var $4=(($3+4)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$2;
   var $7=_mrb_pool_alloc($5, $6);
   $m=$7;
   var $8=$m;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=$1;
   var $12=(($11+1384)|0);
   var $13=(($12)|0);
   _longjmp($13, 1);
   throw "Reached an unreachable!";
  case 3: 
   var $15=$m;
   return $15;
  default: assert(0, "bad label: " + label);
 }
}
function _yy_symbol_value_print($yyoutput, $yytype, $yyvaluep, $p) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$yyoutput;
   $2=$yytype;
   $3=$yyvaluep;
   $4=$p;
   var $5=$3;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 5; break;
  case 3: 
   var $9=$4;
   var $10=$1;
   var $11=$2;
   label = 4; break;
  case 4: 
   label = 5; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _local_add($p, $sym) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$p;
   $2=$sym;
   var $3=$1;
   var $4=$2;
   var $5=_local_var_p($3, $4);
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=$1;
   var $9=$2;
   _local_add_f($8, $9);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_new_capa($agg_result, $mrb, $capa) {
 var label = 0;
 var $1;
 var $2;
 var $a;
 $1=$mrb;
 $2=$capa;
 var $3=$1;
 var $4=$2;
 var $5=_ary_new_capa($3, $4);
 $a=$5;
 var $6=$a;
 var $7=$6;
 _mrb_obj_value630($agg_result, $7);
 return;
}
function _ary_new_capa($mrb, $capa) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $a;
   var $blen;
   $1=$mrb;
   $2=$capa;
   var $3=$2;
   var $4=(($3)|(0)) > 357913941;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$1;
   var $7=$1;
   var $8=_mrb_class_get($7, ((88988)|0));
   _mrb_raise($6, $8, ((91204)|0));
   label = 3; break;
  case 3: 
   var $10=$2;
   var $11=((($10)*(12))&-1);
   $blen=$11;
   var $12=$blen;
   var $13=$2;
   var $14=(($12)|(0)) < (($13)|(0));
   if ($14) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $16=$1;
   var $17=$1;
   var $18=_mrb_class_get($17, ((88988)|0));
   _mrb_raise($16, $18, ((91204)|0));
   label = 5; break;
  case 5: 
   var $20=$1;
   var $21=$1;
   var $22=(($21+64)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=_mrb_obj_alloc($20, 14, $23);
   var $25=$24;
   $a=$25;
   var $26=$1;
   var $27=$blen;
   var $28=_mrb_malloc($26, $27);
   var $29=$28;
   var $30=$a;
   var $31=(($30+20)|0);
   HEAP32[(($31)>>2)]=$29;
   var $32=$2;
   var $33=$a;
   var $34=(($33+16)|0);
   var $35=$34;
   HEAP32[(($35)>>2)]=$32;
   var $36=$a;
   var $37=(($36+12)|0);
   HEAP32[(($37)>>2)]=0;
   var $38=$a;
   return $38;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_value630($agg_result, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   var $b;
   $1=$p;
   var $2=$1;
   var $3=$2;
   $b=$3;
   label = 2; break;
  case 2: 
   var $5=$b;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 255;
   var $9=(($v+8)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=$1;
   var $11=(($v)|0);
   var $12=$11;
   HEAP32[(($12)>>2)]=$10;
   label = 3; break;
  case 3: 
   var $14=$agg_result;
   var $15=$v;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_new($agg_result, $mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_ary_new_capa($agg_result, $2, 0);
 return;
}
function _mrb_assoc_new($agg_result, $mrb, $car, $cdr) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $car; $car = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($car)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($car)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($car)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $cdr; $cdr = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($cdr)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($cdr)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($cdr)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $arv=sp;
 $1=$mrb;
 var $2=(($arv)|0);
 var $3=$2;
 var $4=$car;
 assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
 var $5=(($arv+12)|0);
 var $6=$5;
 var $7=$cdr;
 assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
 var $8=$1;
 var $9=(($arv)|0);
 _mrb_ary_new_from_values($agg_result, $8, 2, $9);
 STACKTOP = sp;
 return;
}
function _mrb_ary_new_from_values($agg_result, $mrb, $size, $vals) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $ary=sp;
 var $a;
 var $4=(sp)+(12);
 $1=$mrb;
 $2=$size;
 $3=$vals;
 var $5=$1;
 var $6=$2;
 _mrb_ary_new_capa($4, $5, $6);
 var $7=$ary;
 var $8=$4;
 assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
 var $9=(($ary)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=$11;
 $a=$12;
 var $13=$a;
 var $14=(($13+20)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$3;
 var $17=$2;
 _array_copy($15, $16, $17);
 var $18=$2;
 var $19=$a;
 var $20=(($19+12)|0);
 HEAP32[(($20)>>2)]=$18;
 var $21=$agg_result;
 var $22=$ary;
 assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_ary_s_create($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $vals=sp;
 var $len=(sp)+(4);
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((90024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$vals,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
 var $4=$1;
 var $5=HEAP32[(($len)>>2)];
 var $6=HEAP32[(($vals)>>2)];
 _mrb_ary_new_from_values($agg_result, $4, $5, $6);
 STACKTOP = sp;
 return;
}
function _mrb_ary_concat($mrb, $self, $other) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $other; $other = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($other)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($other)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($other)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $a2;
 $1=$mrb;
 var $2=(($other)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 $a2=$5;
 var $6=$1;
 var $7=(($self)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 var $11=$a2;
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$a2;
 var $15=(($14+12)|0);
 var $16=HEAP32[(($15)>>2)];
 _ary_concat($6, $10, $13, $16);
 STACKTOP = sp;
 return;
}
function _ary_concat($mrb, $a, $ptr, $blen) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $len;
   $1=$mrb;
   $2=$a;
   $3=$ptr;
   $4=$blen;
   var $5=$2;
   var $6=(($5+12)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$4;
   var $9=((($7)+($8))|0);
   $len=$9;
   var $10=$1;
   var $11=$2;
   _ary_modify($10, $11);
   var $12=$2;
   var $13=(($12+16)|0);
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $16=$len;
   var $17=(($15)|(0)) < (($16)|(0));
   if ($17) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $19=$1;
   var $20=$2;
   var $21=$len;
   _ary_expand_capa($19, $20, $21);
   label = 3; break;
  case 3: 
   var $23=$2;
   var $24=(($23+20)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$2;
   var $27=(($26+12)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($25+((($28)*(12))&-1))|0);
   var $30=$3;
   var $31=$4;
   _array_copy($29, $30, $31);
   var $32=$1;
   var $33=$2;
   var $34=$33;
   _mrb_write_barrier($32, $34);
   var $35=$len;
   var $36=$2;
   var $37=(($36+12)|0);
   HEAP32[(($37)>>2)]=$35;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_concat_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $ptr=sp;
 var $blen=(sp)+(4);
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((102716)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$ptr,HEAP32[(((tempInt)+(4))>>2)]=$blen,tempInt));
 var $4=$1;
 var $5=(($self)|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 var $9=HEAP32[(($ptr)>>2)];
 var $10=HEAP32[(($blen)>>2)];
 _ary_concat($4, $8, $9, $10);
 var $11=$agg_result;
 var $12=$self;
 assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_ary_plus($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $a1;
 var $a2;
 var $ary=sp;
 var $ptr=(sp)+(12);
 var $blen=(sp)+(16);
 var $2=(sp)+(20);
 $1=$mrb;
 var $3=(($self)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$5;
 $a1=$6;
 var $7=$1;
 var $8=_mrb_get_args($7, ((102716)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$ptr,HEAP32[(((tempInt)+(4))>>2)]=$blen,tempInt));
 var $9=$1;
 var $10=$a1;
 var $11=(($10+12)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=HEAP32[(($blen)>>2)];
 var $14=((($12)+($13))|0);
 _mrb_ary_new_capa($2, $9, $14);
 var $15=$ary;
 var $16=$2;
 assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
 var $17=(($ary)|0);
 var $18=$17;
 var $19=HEAP32[(($18)>>2)];
 var $20=$19;
 $a2=$20;
 var $21=$a2;
 var $22=(($21+20)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$a1;
 var $25=(($24+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$a1;
 var $28=(($27+12)|0);
 var $29=HEAP32[(($28)>>2)];
 _array_copy($23, $26, $29);
 var $30=$a2;
 var $31=(($30+20)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=$a1;
 var $34=(($33+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($32+((($35)*(12))&-1))|0);
 var $37=HEAP32[(($ptr)>>2)];
 var $38=HEAP32[(($blen)>>2)];
 _array_copy($36, $37, $38);
 var $39=$a1;
 var $40=(($39+12)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=HEAP32[(($blen)>>2)];
 var $43=((($41)+($42))|0);
 var $44=$a2;
 var $45=(($44+12)|0);
 HEAP32[(($45)>>2)]=$43;
 var $46=$agg_result;
 var $47=$ary;
 assert(12 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($46)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _array_copy($dst, $src, $size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $i;
   $1=$dst;
   $2=$src;
   $3=$size;
   $i=0;
   label = 2; break;
  case 2: 
   var $5=$i;
   var $6=$3;
   var $7=(($5)>>>(0)) < (($6)>>>(0));
   if ($7) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $9=$i;
   var $10=$1;
   var $11=(($10+((($9)*(12))&-1))|0);
   var $12=$i;
   var $13=$2;
   var $14=(($13+((($12)*(12))&-1))|0);
   var $15=$11;
   var $16=$14;
   assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=((($18)+(1))|0);
   $i=$19;
   label = 2; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_cmp($agg_result, $mrb, $ary1) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary1; $ary1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ary2=sp;
   var $a1;
   var $a2;
   var $r=(sp)+(12);
   var $i;
   var $len;
   var $cmp;
   var $v=(sp)+(24);
   var $2=(sp)+(36);
   var $3=(sp)+(48);
   $1=$mrb;
   var $4=$1;
   var $5=_mrb_get_args($4, ((98676)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$ary2,tempInt));
   var $6=(($ary2+8)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))==14;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value637($agg_result);
   label = 20; break;
  case 3: 
   var $11=(($ary1)|0);
   var $12=$11;
   var $13=HEAP32[(($12)>>2)];
   var $14=$13;
   $a1=$14;
   var $15=(($ary2)|0);
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $18=$17;
   $a2=$18;
   var $19=$a1;
   var $20=(($19+12)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$a2;
   var $23=(($22+12)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($21)|(0))==(($24)|(0));
   if ($25) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $27=$a1;
   var $28=(($27+20)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$a2;
   var $31=(($30+20)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($29)|(0))==(($32)|(0));
   if ($33) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _mrb_fixnum_value638($agg_result, 0);
   label = 20; break;
  case 6: 
   var $36=$1;
   var $37=_mrb_intern2($36, ((95612)|0), 3);
   $cmp=$37;
   var $38=(($ary1)|0);
   var $39=$38;
   var $40=HEAP32[(($39)>>2)];
   var $41=$40;
   var $42=(($41+12)|0);
   var $43=HEAP32[(($42)>>2)];
   $len=$43;
   var $44=$len;
   var $45=(($ary2)|0);
   var $46=$45;
   var $47=HEAP32[(($46)>>2)];
   var $48=$47;
   var $49=(($48+12)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($44)|(0)) > (($50)|(0));
   if ($51) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $53=(($ary2)|0);
   var $54=$53;
   var $55=HEAP32[(($54)>>2)];
   var $56=$55;
   var $57=(($56+12)|0);
   var $58=HEAP32[(($57)>>2)];
   $len=$58;
   label = 8; break;
  case 8: 
   $i=0;
   label = 9; break;
  case 9: 
   var $61=$i;
   var $62=$len;
   var $63=(($61)|(0)) < (($62)|(0));
   if ($63) { label = 10; break; } else { label = 15; break; }
  case 10: 
   var $65=$i;
   _ary_elt($v, $ary2, $65);
   var $66=$1;
   var $67=$i;
   _ary_elt($2, $ary1, $67);
   var $68=$cmp;
   _mrb_funcall_argv($3, $66, $2, $68, 1, $v);
   var $69=$r;
   var $70=$3;
   assert(12 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($70)+(4))>>2)];HEAP32[((($69)+(8))>>2)]=HEAP32[((($70)+(8))>>2)];
   var $71=(($r+8)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72)|(0))!=3;
   if ($73) { label = 12; break; } else { label = 11; break; }
  case 11: 
   var $75=(($r)|0);
   var $76=$75;
   var $77=HEAP32[(($76)>>2)];
   var $78=(($77)|(0))!=0;
   if ($78) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $80=$agg_result;
   var $81=$r;
   assert(12 % 1 === 0);HEAP32[(($80)>>2)]=HEAP32[(($81)>>2)];HEAP32[((($80)+(4))>>2)]=HEAP32[((($81)+(4))>>2)];HEAP32[((($80)+(8))>>2)]=HEAP32[((($81)+(8))>>2)];
   label = 20; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $84=$i;
   var $85=((($84)+(1))|0);
   $i=$85;
   label = 9; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $88=$a1;
   var $89=(($88+12)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=$a2;
   var $92=(($91+12)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=((($90)-($93))|0);
   $len=$94;
   var $95=$len;
   var $96=(($95)|(0))==0;
   if ($96) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $103 = 0;label = 19; break;
  case 18: 
   var $99=$len;
   var $100=(($99)|(0)) > 0;
   var $101=$100 ? 1 : -1;
   var $103 = $101;label = 19; break;
  case 19: 
   var $103;
   _mrb_fixnum_value638($agg_result, $103);
   label = 20; break;
  case 20: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value637($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_value638($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _ary_elt($agg_result, $ary, $offset) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$offset;
   var $2=(($ary)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=(($5+12)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))==0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _mrb_nil_value637($agg_result);
   label = 7; break;
  case 3: 
   var $11=$1;
   var $12=(($11)|(0)) < 0;
   if ($12) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $14=(($ary)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=$16;
   var $18=(($17+12)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$1;
   var $21=(($19)|(0)) <= (($20)|(0));
   if ($21) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _mrb_nil_value637($agg_result);
   label = 7; break;
  case 6: 
   var $24=$1;
   var $25=(($ary)|0);
   var $26=$25;
   var $27=HEAP32[(($26)>>2)];
   var $28=$27;
   var $29=(($28+20)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30+((($24)*(12))&-1))|0);
   var $32=$agg_result;
   var $33=$31;
   assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];
   label = 7; break;
  case 7: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_replace($mrb, $self, $other) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $other; $other = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($other)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($other)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($other)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $a2;
 $1=$mrb;
 var $2=(($other)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 $a2=$5;
 var $6=$1;
 var $7=(($self)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 var $11=$a2;
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$a2;
 var $15=(($14+12)|0);
 var $16=HEAP32[(($15)>>2)];
 _ary_replace($6, $10, $13, $16);
 STACKTOP = sp;
 return;
}
function _ary_replace($mrb, $a, $argv, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   $1=$mrb;
   $2=$a;
   $3=$argv;
   $4=$len;
   var $5=$1;
   var $6=$2;
   _ary_modify($5, $6);
   var $7=$2;
   var $8=(($7+16)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$4;
   var $12=(($10)|(0)) < (($11)|(0));
   if ($12) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $14=$1;
   var $15=$2;
   var $16=$4;
   _ary_expand_capa($14, $15, $16);
   label = 3; break;
  case 3: 
   var $18=$2;
   var $19=(($18+20)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$3;
   var $22=$4;
   _array_copy($20, $21, $22);
   var $23=$1;
   var $24=$2;
   var $25=$24;
   _mrb_write_barrier($23, $25);
   var $26=$4;
   var $27=$2;
   var $28=(($27+12)|0);
   HEAP32[(($28)>>2)]=$26;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_replace_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $other=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((92940)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$other,tempInt));
 var $4=$1;
 _mrb_ary_replace($4, $self, $other);
 var $5=$agg_result;
 var $6=$self;
 assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_ary_times($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a1;
   var $a2;
   var $ary=sp;
   var $ptr;
   var $times=(sp)+(12);
   var $2=(sp)+(16);
   $1=$mrb;
   var $3=(($self)|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5;
   $a1=$6;
   var $7=$1;
   var $8=_mrb_get_args($7, ((90460)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$times,tempInt));
   var $9=HEAP32[(($times)>>2)];
   var $10=(($9)|(0)) < 0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$1;
   var $13=$1;
   var $14=_mrb_class_get($13, ((88988)|0));
   _mrb_raise($12, $14, ((87844)|0));
   label = 3; break;
  case 3: 
   var $16=HEAP32[(($times)>>2)];
   var $17=(($16)|(0))==0;
   if ($17) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $19=$1;
   _mrb_ary_new($agg_result, $19);
   label = 9; break;
  case 5: 
   var $21=$1;
   var $22=$a1;
   var $23=(($22+12)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=HEAP32[(($times)>>2)];
   var $26=(Math.imul($24,$25)|0);
   _mrb_ary_new_capa($2, $21, $26);
   var $27=$ary;
   var $28=$2;
   assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
   var $29=(($ary)|0);
   var $30=$29;
   var $31=HEAP32[(($30)>>2)];
   var $32=$31;
   $a2=$32;
   var $33=$a2;
   var $34=(($33+20)|0);
   var $35=HEAP32[(($34)>>2)];
   $ptr=$35;
   label = 6; break;
  case 6: 
   var $37=HEAP32[(($times)>>2)];
   var $38=((($37)-(1))|0);
   HEAP32[(($times)>>2)]=$38;
   var $39=(($37)|(0))!=0;
   if ($39) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $41=$ptr;
   var $42=$a1;
   var $43=(($42+20)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=$a1;
   var $46=(($45+12)|0);
   var $47=HEAP32[(($46)>>2)];
   _array_copy($41, $44, $47);
   var $48=$a1;
   var $49=(($48+12)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=$ptr;
   var $52=(($51+((($50)*(12))&-1))|0);
   $ptr=$52;
   var $53=$a1;
   var $54=(($53+12)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=$a2;
   var $57=(($56+12)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=((($58)+($55))|0);
   HEAP32[(($57)>>2)]=$59;
   label = 6; break;
  case 8: 
   var $61=$agg_result;
   var $62=$ary;
   assert(12 % 1 === 0);HEAP32[(($61)>>2)]=HEAP32[(($62)>>2)];HEAP32[((($61)+(4))>>2)]=HEAP32[((($62)+(4))>>2)];HEAP32[((($61)+(8))>>2)]=HEAP32[((($62)+(8))>>2)];
   label = 9; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_reverse_bang($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a;
   var $p1;
   var $p2;
   var $tmp=sp;
   $1=$mrb;
   var $2=(($self)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $a=$5;
   var $6=$a;
   var $7=(($6+12)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0)) > 1;
   if ($9) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $11=$1;
   var $12=$a;
   _ary_modify($11, $12);
   var $13=$a;
   var $14=(($13+20)|0);
   var $15=HEAP32[(($14)>>2)];
   $p1=$15;
   var $16=$a;
   var $17=(($16+20)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$a;
   var $20=(($19+12)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($18+((($21)*(12))&-1))|0);
   var $23=((($22)-(12))|0);
   $p2=$23;
   label = 3; break;
  case 3: 
   var $25=$p1;
   var $26=$p2;
   var $27=(($25)>>>(0)) < (($26)>>>(0));
   if ($27) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $29=$p1;
   var $30=$tmp;
   var $31=$29;
   assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
   var $32=$p1;
   var $33=(($32+12)|0);
   $p1=$33;
   var $34=$p2;
   var $35=$32;
   var $36=$34;
   assert(12 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];HEAP32[((($35)+(8))>>2)]=HEAP32[((($36)+(8))>>2)];
   var $37=$p2;
   var $38=((($37)-(12))|0);
   $p2=$38;
   var $39=$37;
   var $40=$tmp;
   assert(12 % 1 === 0);HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];HEAP32[((($39)+(8))>>2)]=HEAP32[((($40)+(8))>>2)];
   label = 3; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $43=$agg_result;
   var $44=$self;
   assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _ary_modify($mrb, $a) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $shared;
   var $ptr;
   var $p;
   var $len;
   $1=$mrb;
   $2=$a;
   var $3=$2;
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5 >>> 11;
   var $7=$6 & 2097151;
   var $8=$7 & 256;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 9; break; }
  case 2: 
   var $11=$2;
   var $12=(($11+16)|0);
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   $shared=$14;
   var $15=$shared;
   var $16=(($15)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0))==1;
   if ($18) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $20=$2;
   var $21=(($20+20)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$shared;
   var $24=(($23+4)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($22)|(0))==(($25)|(0));
   if ($26) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $28=$shared;
   var $29=(($28+4)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$2;
   var $32=(($31+20)|0);
   HEAP32[(($32)>>2)]=$30;
   var $33=$2;
   var $34=(($33+12)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$2;
   var $37=(($36+16)|0);
   var $38=$37;
   HEAP32[(($38)>>2)]=$35;
   var $39=$1;
   var $40=$shared;
   var $41=$40;
   _mrb_free($39, $41);
   label = 8; break;
  case 5: 
   var $43=$2;
   var $44=(($43+20)|0);
   var $45=HEAP32[(($44)>>2)];
   $p=$45;
   var $46=$2;
   var $47=(($46+12)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=((($48)*(12))&-1);
   $len=$49;
   var $50=$1;
   var $51=$len;
   var $52=_mrb_malloc($50, $51);
   var $53=$52;
   $ptr=$53;
   var $54=$p;
   var $55=(($54)|(0))!=0;
   if ($55) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $57=$ptr;
   var $58=$p;
   var $59=$2;
   var $60=(($59+12)|0);
   var $61=HEAP32[(($60)>>2)];
   _array_copy($57, $58, $61);
   label = 7; break;
  case 7: 
   var $63=$ptr;
   var $64=$2;
   var $65=(($64+20)|0);
   HEAP32[(($65)>>2)]=$63;
   var $66=$2;
   var $67=(($66+12)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=$2;
   var $70=(($69+16)|0);
   var $71=$70;
   HEAP32[(($71)>>2)]=$68;
   var $72=$1;
   var $73=$shared;
   _mrb_ary_decref($72, $73);
   label = 8; break;
  case 8: 
   var $75=$2;
   var $76=$75;
   var $77=HEAP32[(($76)>>2)];
   var $78=$77 >>> 11;
   var $79=$78 & 2097151;
   var $80=$79 & -257;
   var $81=$80 & 2097151;
   var $82=$75;
   var $83=$81 & 2097151;
   var $84=$83 << 11;
   var $85=HEAP32[(($82)>>2)];
   var $86=$85 & 2047;
   var $87=$86 | $84;
   HEAP32[(($82)>>2)]=$87;
   label = 9; break;
  case 9: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_reverse($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a;
   var $b;
   var $ary=sp;
   var $2=(sp)+(12);
   var $p1;
   var $p2;
   var $e;
   $1=$mrb;
   var $3=(($self)|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5;
   $a=$6;
   var $7=$1;
   var $8=$a;
   var $9=(($8+12)|0);
   var $10=HEAP32[(($9)>>2)];
   _mrb_ary_new_capa($2, $7, $10);
   var $11=$ary;
   var $12=$2;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   var $13=(($ary)|0);
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15;
   $b=$16;
   var $17=$a;
   var $18=(($17+12)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19)|(0)) > 0;
   if ($20) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $22=$a;
   var $23=(($22+20)|0);
   var $24=HEAP32[(($23)>>2)];
   $p1=$24;
   var $25=$p1;
   var $26=$a;
   var $27=(($26+12)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($25+((($28)*(12))&-1))|0);
   $e=$29;
   var $30=$b;
   var $31=(($30+20)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$a;
   var $34=(($33+12)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($32+((($35)*(12))&-1))|0);
   var $37=((($36)-(12))|0);
   $p2=$37;
   label = 3; break;
  case 3: 
   var $39=$p1;
   var $40=$e;
   var $41=(($39)>>>(0)) < (($40)>>>(0));
   if ($41) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $43=$p2;
   var $44=((($43)-(12))|0);
   $p2=$44;
   var $45=$p1;
   var $46=(($45+12)|0);
   $p1=$46;
   var $47=$43;
   var $48=$45;
   assert(12 % 1 === 0);HEAP32[(($47)>>2)]=HEAP32[(($48)>>2)];HEAP32[((($47)+(4))>>2)]=HEAP32[((($48)+(4))>>2)];HEAP32[((($47)+(8))>>2)]=HEAP32[((($48)+(8))>>2)];
   label = 3; break;
  case 5: 
   var $50=$a;
   var $51=(($50+12)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=$b;
   var $54=(($53+12)|0);
   HEAP32[(($54)>>2)]=$52;
   label = 6; break;
  case 6: 
   var $56=$agg_result;
   var $57=$ary;
   assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($57)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($57)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($57)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_push($mrb, $ary, $elem) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $elem; $elem = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($elem)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($elem)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($elem)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a;
   $1=$mrb;
   var $2=(($ary)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $a=$5;
   var $6=$1;
   var $7=$a;
   _ary_modify($6, $7);
   var $8=$a;
   var $9=(($8+12)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$a;
   var $12=(($11+16)|0);
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=(($10)|(0))==(($14)|(0));
   if ($15) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $17=$1;
   var $18=$a;
   var $19=$a;
   var $20=(($19+12)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=((($21)+(1))|0);
   _ary_expand_capa($17, $18, $22);
   label = 3; break;
  case 3: 
   var $24=$a;
   var $25=(($24+12)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=((($26)+(1))|0);
   HEAP32[(($25)>>2)]=$27;
   var $28=$a;
   var $29=(($28+20)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30+((($26)*(12))&-1))|0);
   var $32=$31;
   var $33=$elem;
   assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];
   var $34=$1;
   var $35=$a;
   var $36=$35;
   _mrb_write_barrier($34, $36);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _ary_expand_capa($mrb, $a, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $capa;
   var $expanded_ptr;
   $1=$mrb;
   $2=$a;
   $3=$len;
   var $4=$2;
   var $5=(($4+16)|0);
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   $capa=$7;
   var $8=$3;
   var $9=(($8)|(0)) > 357913941;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$1;
   var $12=$1;
   var $13=_mrb_class_get($12, ((88988)|0));
   _mrb_raise($11, $13, ((91204)|0));
   label = 3; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $16=$capa;
   var $17=$3;
   var $18=(($16)|(0)) < (($17)|(0));
   if ($18) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $20=$capa;
   var $21=(($20)|(0))==0;
   if ($21) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $capa=4;
   label = 8; break;
  case 7: 
   var $24=$capa;
   var $25=($24<<1);
   $capa=$25;
   label = 8; break;
  case 8: 
   label = 4; break;
  case 9: 
   var $28=$capa;
   var $29=(($28)|(0)) > 357913941;
   if ($29) { label = 10; break; } else { label = 11; break; }
  case 10: 
   $capa=357913941;
   label = 11; break;
  case 11: 
   var $32=$capa;
   var $33=$2;
   var $34=(($33+16)|0);
   var $35=$34;
   var $36=HEAP32[(($35)>>2)];
   var $37=(($32)|(0)) > (($36)|(0));
   if ($37) { label = 12; break; } else { label = 15; break; }
  case 12: 
   var $39=$1;
   var $40=$2;
   var $41=(($40+20)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=$42;
   var $44=$capa;
   var $45=((($44)*(12))&-1);
   var $46=_mrb_realloc($39, $43, $45);
   var $47=$46;
   $expanded_ptr=$47;
   var $48=$expanded_ptr;
   var $49=(($48)|(0))!=0;
   if ($49) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $51=$1;
   var $52=$1;
   var $53=_mrb_class_get($52, ((90956)|0));
   _mrb_raise($51, $53, ((90692)|0));
   label = 14; break;
  case 14: 
   var $55=$capa;
   var $56=$2;
   var $57=(($56+16)|0);
   var $58=$57;
   HEAP32[(($58)>>2)]=$55;
   var $59=$expanded_ptr;
   var $60=$2;
   var $61=(($60+20)|0);
   HEAP32[(($61)>>2)]=$59;
   label = 15; break;
  case 15: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_push_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $argv=sp;
   var $len=(sp)+(4);
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((90024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
   label = 2; break;
  case 2: 
   var $5=HEAP32[(($len)>>2)];
   var $6=((($5)-(1))|0);
   HEAP32[(($len)>>2)]=$6;
   var $7=(($5)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $9=$1;
   var $10=HEAP32[(($argv)>>2)];
   var $11=(($10+12)|0);
   HEAP32[(($argv)>>2)]=$11;
   _mrb_ary_push($9, $self, $10);
   label = 2; break;
  case 4: 
   var $13=$agg_result;
   var $14=$self;
   assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_pop($agg_result, $mrb, $ary) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a;
   $1=$mrb;
   var $2=(($ary)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $a=$5;
   var $6=$a;
   var $7=(($6+12)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))==0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _mrb_nil_value637($agg_result);
   label = 4; break;
  case 3: 
   var $12=$a;
   var $13=(($12+12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=((($14)-(1))|0);
   HEAP32[(($13)>>2)]=$15;
   var $16=$a;
   var $17=(($16+20)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18+((($15)*(12))&-1))|0);
   var $20=$agg_result;
   var $21=$19;
   assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_shift($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a;
   var $val=sp;
   var $ptr;
   var $size;
   $1=$mrb;
   var $2=(($self)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $a=$5;
   var $6=$a;
   var $7=(($6+12)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))==0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _mrb_nil_value637($agg_result);
   label = 13; break;
  case 3: 
   var $12=$a;
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=$14 >>> 11;
   var $16=$15 & 2097151;
   var $17=$16 & 256;
   var $18=(($17)|(0))!=0;
   if ($18) { label = 4; break; } else { label = 6; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $21=$a;
   var $22=(($21+20)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|0);
   var $25=$val;
   var $26=$24;
   assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
   var $27=$a;
   var $28=(($27+20)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+12)|0);
   HEAP32[(($28)>>2)]=$30;
   var $31=$a;
   var $32=(($31+12)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=((($33)-(1))|0);
   HEAP32[(($32)>>2)]=$34;
   var $35=$agg_result;
   var $36=$val;
   assert(12 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];HEAP32[((($35)+(8))>>2)]=HEAP32[((($36)+(8))>>2)];
   label = 13; break;
  case 6: 
   var $38=$a;
   var $39=(($38+12)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40)|(0)) > 10;
   if ($41) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $43=$1;
   var $44=$a;
   _ary_make_shared($43, $44);
   label = 5; break;
  case 8: 
   var $46=$a;
   var $47=(($46+20)|0);
   var $48=HEAP32[(($47)>>2)];
   $ptr=$48;
   var $49=$a;
   var $50=(($49+12)|0);
   var $51=HEAP32[(($50)>>2)];
   $size=$51;
   var $52=$ptr;
   var $53=$val;
   var $54=$52;
   assert(12 % 1 === 0);HEAP32[(($53)>>2)]=HEAP32[(($54)>>2)];HEAP32[((($53)+(4))>>2)]=HEAP32[((($54)+(4))>>2)];HEAP32[((($53)+(8))>>2)]=HEAP32[((($54)+(8))>>2)];
   label = 9; break;
  case 9: 
   var $56=$size;
   var $57=((($56)-(1))|0);
   $size=$57;
   var $58=(($57)|(0))!=0;
   if ($58) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $60=$ptr;
   var $61=$ptr;
   var $62=(($61+12)|0);
   var $63=$60;
   var $64=$62;
   assert(12 % 1 === 0);HEAP32[(($63)>>2)]=HEAP32[(($64)>>2)];HEAP32[((($63)+(4))>>2)]=HEAP32[((($64)+(4))>>2)];HEAP32[((($63)+(8))>>2)]=HEAP32[((($64)+(8))>>2)];
   var $65=$ptr;
   var $66=(($65+12)|0);
   $ptr=$66;
   label = 9; break;
  case 11: 
   var $68=$a;
   var $69=(($68+12)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=((($70)-(1))|0);
   HEAP32[(($69)>>2)]=$71;
   label = 12; break;
  case 12: 
   var $73=$agg_result;
   var $74=$val;
   assert(12 % 1 === 0);HEAP32[(($73)>>2)]=HEAP32[(($74)>>2)];HEAP32[((($73)+(4))>>2)]=HEAP32[((($74)+(4))>>2)];HEAP32[((($73)+(8))>>2)]=HEAP32[((($74)+(8))>>2)];
   label = 13; break;
  case 13: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _ary_make_shared($mrb, $a) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $shared;
   $1=$mrb;
   $2=$a;
   var $3=$2;
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5 >>> 11;
   var $7=$6 & 2097151;
   var $8=$7 & 256;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 6; break; } else { label = 2; break; }
  case 2: 
   var $11=$1;
   var $12=_mrb_malloc($11, 12);
   var $13=$12;
   $shared=$13;
   var $14=$shared;
   var $15=(($14)|0);
   HEAP32[(($15)>>2)]=1;
   var $16=$2;
   var $17=(($16+16)|0);
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=$2;
   var $21=(($20+12)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($19)|(0)) > (($22)|(0));
   if ($23) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $25=$1;
   var $26=$2;
   var $27=(($26+20)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=$28;
   var $30=$2;
   var $31=(($30+12)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=((($32)*(12))&-1);
   var $34=((($33)+(1))|0);
   var $35=_mrb_realloc($25, $29, $34);
   var $36=$35;
   var $37=$shared;
   var $38=(($37+4)|0);
   HEAP32[(($38)>>2)]=$36;
   var $39=$2;
   var $40=(($39+20)|0);
   HEAP32[(($40)>>2)]=$36;
   label = 5; break;
  case 4: 
   var $42=$2;
   var $43=(($42+20)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=$shared;
   var $46=(($45+4)|0);
   HEAP32[(($46)>>2)]=$44;
   label = 5; break;
  case 5: 
   var $48=$2;
   var $49=(($48+12)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=$shared;
   var $52=(($51+8)|0);
   HEAP32[(($52)>>2)]=$50;
   var $53=$shared;
   var $54=$2;
   var $55=(($54+16)|0);
   var $56=$55;
   HEAP32[(($56)>>2)]=$53;
   var $57=$2;
   var $58=$57;
   var $59=HEAP32[(($58)>>2)];
   var $60=$59 >>> 11;
   var $61=$60 & 2097151;
   var $62=$61 | 256;
   var $63=$62 & 2097151;
   var $64=$57;
   var $65=$63 & 2097151;
   var $66=$65 << 11;
   var $67=HEAP32[(($64)>>2)];
   var $68=$67 & 2047;
   var $69=$68 | $66;
   HEAP32[(($64)>>2)]=$69;
   label = 6; break;
  case 6: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_unshift($agg_result, $mrb, $self, $item) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $item; $item = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($item)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($item)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($item)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a;
   $1=$mrb;
   var $2=(($self)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $a=$5;
   var $6=$a;
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 >>> 11;
   var $10=$9 & 2097151;
   var $11=$10 & 256;
   var $12=(($11)|(0))!=0;
   if ($12) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $14=$a;
   var $15=(($14+16)|0);
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19)|(0))==1;
   if ($20) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $22=$a;
   var $23=(($22+20)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$a;
   var $26=(($25+16)|0);
   var $27=$26;
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28+4)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$24;
   var $32=$30;
   var $33=((($31)-($32))|0);
   var $34=((((($33)|(0)))/(12))&-1);
   var $35=(($34)|(0)) >= 1;
   if ($35) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $37=$a;
   var $38=(($37+20)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=((($39)-(12))|0);
   HEAP32[(($38)>>2)]=$40;
   var $41=$a;
   var $42=(($41+20)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43)|0);
   var $45=$44;
   var $46=$item;
   assert(12 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($45)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];
   label = 8; break;
  case 5: 
   var $48=$1;
   var $49=$a;
   _ary_modify($48, $49);
   var $50=$a;
   var $51=(($50+16)|0);
   var $52=$51;
   var $53=HEAP32[(($52)>>2)];
   var $54=$a;
   var $55=(($54+12)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=((($56)+(1))|0);
   var $58=(($53)|(0)) < (($57)|(0));
   if ($58) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $60=$1;
   var $61=$a;
   var $62=$a;
   var $63=(($62+12)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=((($64)+(1))|0);
   _ary_expand_capa($60, $61, $65);
   label = 7; break;
  case 7: 
   var $67=$a;
   var $68=(($67+20)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($69+12)|0);
   var $71=$a;
   var $72=(($71+20)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=$a;
   var $75=(($74+12)|0);
   var $76=HEAP32[(($75)>>2)];
   _value_move645($70, $73, $76);
   var $77=$a;
   var $78=(($77+20)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79)|0);
   var $81=$80;
   var $82=$item;
   assert(12 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($82)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($82)+(8))>>2)];
   label = 8; break;
  case 8: 
   var $84=$a;
   var $85=(($84+12)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=((($86)+(1))|0);
   HEAP32[(($85)>>2)]=$87;
   var $88=$1;
   var $89=$a;
   var $90=$89;
   _mrb_write_barrier($88, $90);
   var $91=$agg_result;
   var $92=$self;
   assert(12 % 1 === 0);HEAP32[(($91)>>2)]=HEAP32[(($92)>>2)];HEAP32[((($91)+(4))>>2)]=HEAP32[((($92)+(4))>>2)];HEAP32[((($91)+(8))>>2)]=HEAP32[((($92)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _value_move645($s1, $s2, $n) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$s1;
   $2=$s2;
   $3=$n;
   var $4=$1;
   var $5=$2;
   var $6=(($4)>>>(0)) > (($5)>>>(0));
   if ($6) { label = 2; break; } else { label = 7; break; }
  case 2: 
   var $8=$1;
   var $9=$2;
   var $10=$3;
   var $11=(($9+((($10)*(12))&-1))|0);
   var $12=(($8)>>>(0)) < (($11)>>>(0));
   if ($12) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $14=$3;
   var $15=$1;
   var $16=(($15+((($14)*(12))&-1))|0);
   $1=$16;
   var $17=$3;
   var $18=$2;
   var $19=(($18+((($17)*(12))&-1))|0);
   $2=$19;
   label = 4; break;
  case 4: 
   var $21=$3;
   var $22=((($21)-(1))|0);
   $3=$22;
   var $23=(($21)>>>(0)) > 0;
   if ($23) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $25=$1;
   var $26=((($25)-(12))|0);
   $1=$26;
   var $27=$2;
   var $28=((($27)-(12))|0);
   $2=$28;
   var $29=$26;
   var $30=$28;
   assert(12 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($29)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];
   label = 4; break;
  case 6: 
   label = 14; break;
  case 7: 
   var $33=$1;
   var $34=$2;
   var $35=(($33)|(0))!=(($34)|(0));
   if ($35) { label = 8; break; } else { label = 12; break; }
  case 8: 
   label = 9; break;
  case 9: 
   var $38=$3;
   var $39=((($38)-(1))|0);
   $3=$39;
   var $40=(($38)>>>(0)) > 0;
   if ($40) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $42=$1;
   var $43=(($42+12)|0);
   $1=$43;
   var $44=$2;
   var $45=(($44+12)|0);
   $2=$45;
   var $46=$42;
   var $47=$44;
   assert(12 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($46)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];
   label = 9; break;
  case 11: 
   label = 13; break;
  case 12: 
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_unshift_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a;
   var $vals=sp;
   var $len=(sp)+(4);
   $1=$mrb;
   var $2=(($self)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $a=$5;
   var $6=$1;
   var $7=_mrb_get_args($6, ((90024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$vals,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
   var $8=$a;
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 >>> 11;
   var $12=$11 & 2097151;
   var $13=$12 & 256;
   var $14=(($13)|(0))!=0;
   if ($14) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $16=$a;
   var $17=(($16+16)|0);
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21)|(0))==1;
   if ($22) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $24=$a;
   var $25=(($24+20)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$a;
   var $28=(($27+16)|0);
   var $29=$28;
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30+4)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$26;
   var $34=$32;
   var $35=((($33)-($34))|0);
   var $36=((((($35)|(0)))/(12))&-1);
   var $37=HEAP32[(($len)>>2)];
   var $38=(($36)|(0)) >= (($37)|(0));
   if ($38) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $40=HEAP32[(($len)>>2)];
   var $41=$a;
   var $42=(($41+20)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(((-$40))|0);
   var $45=(($43+((($44)*(12))&-1))|0);
   HEAP32[(($42)>>2)]=$45;
   label = 10; break;
  case 5: 
   var $47=$1;
   var $48=$a;
   _ary_modify($47, $48);
   var $49=HEAP32[(($len)>>2)];
   var $50=(($49)|(0))==0;
   if ($50) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $52=$agg_result;
   var $53=$self;
   assert(12 % 1 === 0);HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[((($52)+(4))>>2)]=HEAP32[((($53)+(4))>>2)];HEAP32[((($52)+(8))>>2)]=HEAP32[((($53)+(8))>>2)];
   label = 11; break;
  case 7: 
   var $55=$a;
   var $56=(($55+16)|0);
   var $57=$56;
   var $58=HEAP32[(($57)>>2)];
   var $59=$a;
   var $60=(($59+12)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=HEAP32[(($len)>>2)];
   var $63=((($61)+($62))|0);
   var $64=(($58)|(0)) < (($63)|(0));
   if ($64) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $66=$1;
   var $67=$a;
   var $68=$a;
   var $69=(($68+12)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=HEAP32[(($len)>>2)];
   var $72=((($70)+($71))|0);
   _ary_expand_capa($66, $67, $72);
   label = 9; break;
  case 9: 
   var $74=$a;
   var $75=(($74+20)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=HEAP32[(($len)>>2)];
   var $78=(($76+((($77)*(12))&-1))|0);
   var $79=$a;
   var $80=(($79+20)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$a;
   var $83=(($82+12)|0);
   var $84=HEAP32[(($83)>>2)];
   _value_move645($78, $81, $84);
   label = 10; break;
  case 10: 
   var $86=$a;
   var $87=(($86+20)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=HEAP32[(($vals)>>2)];
   var $90=HEAP32[(($len)>>2)];
   _array_copy($88, $89, $90);
   var $91=HEAP32[(($len)>>2)];
   var $92=$a;
   var $93=(($92+12)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=((($94)+($91))|0);
   HEAP32[(($93)>>2)]=$95;
   var $96=$1;
   var $97=$a;
   var $98=$97;
   _mrb_write_barrier($96, $98);
   var $99=$agg_result;
   var $100=$self;
   assert(12 % 1 === 0);HEAP32[(($99)>>2)]=HEAP32[(($100)>>2)];HEAP32[((($99)+(4))>>2)]=HEAP32[((($100)+(4))>>2)];HEAP32[((($99)+(8))>>2)]=HEAP32[((($100)+(8))>>2)];
   label = 11; break;
  case 11: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_ref($agg_result, $mrb, $ary, $n) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $a;
   $1=$mrb;
   $2=$n;
   var $3=(($ary)|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5;
   $a=$6;
   var $7=$2;
   var $8=(($7)|(0)) < 0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$a;
   var $11=(($10+12)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$2;
   var $14=((($13)+($12))|0);
   $2=$14;
   label = 3; break;
  case 3: 
   var $16=$2;
   var $17=(($16)|(0)) < 0;
   if ($17) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $19=$a;
   var $20=(($19+12)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$2;
   var $23=(($21)|(0)) <= (($22)|(0));
   if ($23) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _mrb_nil_value637($agg_result);
   label = 7; break;
  case 6: 
   var $26=$2;
   var $27=$a;
   var $28=(($27+20)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+((($26)*(12))&-1))|0);
   var $31=$agg_result;
   var $32=$30;
   assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
   label = 7; break;
  case 7: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_set($mrb, $ary, $n, $val) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $a;
   var $3=sp;
   $1=$mrb;
   $2=$n;
   var $4=(($ary)|0);
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=$6;
   $a=$7;
   var $8=$1;
   var $9=$a;
   _ary_modify($8, $9);
   var $10=$2;
   var $11=(($10)|(0)) < 0;
   if ($11) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $13=$a;
   var $14=(($13+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$2;
   var $17=((($16)+($15))|0);
   $2=$17;
   var $18=$2;
   var $19=(($18)|(0)) < 0;
   if ($19) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $21=$1;
   var $22=$1;
   var $23=_mrb_class_get($22, ((87012)|0));
   var $24=$2;
   var $25=$a;
   var $26=(($25+12)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=((($24)-($27))|0);
   _mrb_fixnum_value638($3, $28);
   _mrb_raisef($21, $23, ((86136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
   label = 4; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $31=$a;
   var $32=(($31+12)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=$2;
   var $35=(($33)|(0)) <= (($34)|(0));
   if ($35) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $37=$a;
   var $38=(($37+16)|0);
   var $39=$38;
   var $40=HEAP32[(($39)>>2)];
   var $41=$2;
   var $42=(($40)|(0)) <= (($41)|(0));
   if ($42) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $44=$1;
   var $45=$a;
   var $46=$2;
   var $47=((($46)+(1))|0);
   _ary_expand_capa($44, $45, $47);
   label = 8; break;
  case 8: 
   var $49=$a;
   var $50=(($49+20)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$a;
   var $53=(($52+12)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($51+((($54)*(12))&-1))|0);
   var $56=$2;
   var $57=((($56)+(1))|0);
   var $58=$a;
   var $59=(($58+12)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=((($57)-($60))|0);
   _ary_fill_with_nil($55, $61);
   var $62=$2;
   var $63=((($62)+(1))|0);
   var $64=$a;
   var $65=(($64+12)|0);
   HEAP32[(($65)>>2)]=$63;
   label = 9; break;
  case 9: 
   var $67=$2;
   var $68=$a;
   var $69=(($68+20)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70+((($67)*(12))&-1))|0);
   var $72=$71;
   var $73=$val;
   assert(12 % 1 === 0);HEAP32[(($72)>>2)]=HEAP32[(($73)>>2)];HEAP32[((($72)+(4))>>2)]=HEAP32[((($73)+(4))>>2)];HEAP32[((($72)+(8))>>2)]=HEAP32[((($73)+(8))>>2)];
   var $74=$1;
   var $75=$a;
   var $76=$75;
   _mrb_write_barrier($74, $76);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _ary_fill_with_nil($ptr, $size) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $nil=sp;
   $1=$ptr;
   $2=$size;
   _mrb_nil_value637($nil);
   label = 2; break;
  case 2: 
   var $4=$2;
   var $5=((($4)-(1))|0);
   $2=$5;
   var $6=(($4)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $8=$1;
   var $9=(($8+12)|0);
   $1=$9;
   var $10=$8;
   var $11=$nil;
   assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
   label = 2; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_splice($agg_result, $mrb, $ary, $head, $len, $rpl) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $rpl; $rpl = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($rpl)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($rpl)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($rpl)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $a;
   var $tail;
   var $size;
   var $argv;
   var $i;
   var $argc;
   $1=$mrb;
   $2=$head;
   $3=$len;
   var $4=(($ary)|0);
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=$6;
   $a=$7;
   var $8=$1;
   var $9=$a;
   _ary_modify($8, $9);
   var $10=$2;
   var $11=(($10)|(0)) < 0;
   if ($11) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $13=$a;
   var $14=(($13+12)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$2;
   var $17=((($16)+($15))|0);
   $2=$17;
   var $18=$2;
   var $19=(($18)|(0)) < 0;
   if ($19) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $21=$1;
   var $22=$1;
   var $23=_mrb_class_get($22, ((87012)|0));
   _mrb_raise($21, $23, ((105600)|0));
   label = 4; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $26=$a;
   var $27=(($26+12)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=$3;
   var $30=(($28)|(0)) < (($29)|(0));
   if ($30) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $32=$a;
   var $33=(($32+12)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=$2;
   var $36=$3;
   var $37=((($35)+($36))|0);
   var $38=(($34)|(0)) < (($37)|(0));
   if ($38) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $40=$a;
   var $41=(($40+12)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=$2;
   var $44=((($42)-($43))|0);
   $3=$44;
   label = 8; break;
  case 8: 
   var $46=$2;
   var $47=$3;
   var $48=((($46)+($47))|0);
   $tail=$48;
   var $49=(($rpl+8)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($50)|(0))==14;
   if ($51) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $53=(($rpl)|0);
   var $54=$53;
   var $55=HEAP32[(($54)>>2)];
   var $56=$55;
   var $57=(($56+12)|0);
   var $58=HEAP32[(($57)>>2)];
   $argc=$58;
   var $59=(($rpl)|0);
   var $60=$59;
   var $61=HEAP32[(($60)>>2)];
   var $62=$61;
   var $63=(($62+20)|0);
   var $64=HEAP32[(($63)>>2)];
   $argv=$64;
   label = 11; break;
  case 10: 
   $argc=1;
   $argv=$rpl;
   label = 11; break;
  case 11: 
   var $67=$2;
   var $68=$argc;
   var $69=((($67)+($68))|0);
   $size=$69;
   var $70=$tail;
   var $71=$a;
   var $72=(($71+12)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($70)|(0)) < (($73)|(0));
   if ($74) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $76=$a;
   var $77=(($76+12)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=$tail;
   var $80=((($78)-($79))|0);
   var $81=$size;
   var $82=((($81)+($80))|0);
   $size=$82;
   label = 13; break;
  case 13: 
   var $84=$size;
   var $85=$a;
   var $86=(($85+16)|0);
   var $87=$86;
   var $88=HEAP32[(($87)>>2)];
   var $89=(($84)|(0)) > (($88)|(0));
   if ($89) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $91=$1;
   var $92=$a;
   var $93=$size;
   _ary_expand_capa($91, $92, $93);
   label = 15; break;
  case 15: 
   var $95=$2;
   var $96=$a;
   var $97=(($96+12)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=(($95)|(0)) > (($98)|(0));
   if ($99) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $101=$a;
   var $102=(($101+20)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=$a;
   var $105=(($104+12)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($103+((($106)*(12))&-1))|0);
   var $108=$2;
   var $109=$a;
   var $110=(($109+12)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=((($108)-($111))|0);
   _ary_fill_with_nil($107, $112);
   label = 20; break;
  case 17: 
   var $114=$2;
   var $115=$a;
   var $116=(($115+12)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($114)|(0)) < (($117)|(0));
   if ($118) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $120=$a;
   var $121=(($120+20)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=$2;
   var $124=(($122+((($123)*(12))&-1))|0);
   var $125=$argc;
   var $126=(($124+((($125)*(12))&-1))|0);
   var $127=$a;
   var $128=(($127+20)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=$tail;
   var $131=(($129+((($130)*(12))&-1))|0);
   var $132=$a;
   var $133=(($132+12)|0);
   var $134=HEAP32[(($133)>>2)];
   var $135=$tail;
   var $136=((($134)-($135))|0);
   _value_move645($126, $131, $136);
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   $i=0;
   label = 21; break;
  case 21: 
   var $140=$i;
   var $141=$argc;
   var $142=(($140)|(0)) < (($141)|(0));
   if ($142) { label = 22; break; } else { label = 24; break; }
  case 22: 
   var $144=$a;
   var $145=(($144+20)|0);
   var $146=HEAP32[(($145)>>2)];
   var $147=$2;
   var $148=(($146+((($147)*(12))&-1))|0);
   var $149=$i;
   var $150=(($148+((($149)*(12))&-1))|0);
   var $151=$argv;
   var $152=$i;
   var $153=(($151+((($152)*(12))&-1))|0);
   var $154=$150;
   var $155=$153;
   assert(12 % 1 === 0);HEAP32[(($154)>>2)]=HEAP32[(($155)>>2)];HEAP32[((($154)+(4))>>2)]=HEAP32[((($155)+(4))>>2)];HEAP32[((($154)+(8))>>2)]=HEAP32[((($155)+(8))>>2)];
   label = 23; break;
  case 23: 
   var $157=$i;
   var $158=((($157)+(1))|0);
   $i=$158;
   label = 21; break;
  case 24: 
   var $160=$size;
   var $161=$a;
   var $162=(($161+12)|0);
   HEAP32[(($162)>>2)]=$160;
   var $163=$agg_result;
   var $164=$ary;
   assert(12 % 1 === 0);HEAP32[(($163)>>2)]=HEAP32[(($164)>>2)];HEAP32[((($163)+(4))>>2)]=HEAP32[((($164)+(4))>>2)];HEAP32[((($163)+(8))>>2)]=HEAP32[((($164)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_decref($mrb, $shared) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$shared;
   var $3=$2;
   var $4=(($3)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=((($5)-(1))|0);
   HEAP32[(($4)>>2)]=$6;
   var $7=$2;
   var $8=(($7)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$1;
   var $13=$2;
   var $14=(($13+4)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$15;
   _mrb_free($12, $16);
   var $17=$1;
   var $18=$2;
   var $19=$18;
   _mrb_free($17, $19);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_aget($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a;
   var $index=sp;
   var $len;
   var $argv=(sp)+(4);
   var $size=(sp)+(8);
   $1=$mrb;
   var $2=(($self)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $a=$5;
   var $6=$1;
   var $7=_mrb_get_args($6, ((104912)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$index,HEAP32[(((tempInt)+(4))>>2)]=$argv,HEAP32[(((tempInt)+(8))>>2)]=$size,tempInt));
   var $8=HEAP32[(($size)>>2)];
   if ((($8)|(0))==0) {
    label = 2; break;
   }
   else if ((($8)|(0))==1) {
    label = 3; break;
   }
   else {
   label = 17; break;
   }
  case 2: 
   var $10=$1;
   var $11=HEAP32[(($index)>>2)];
   _mrb_ary_ref($agg_result, $10, $self, $11);
   label = 19; break;
  case 3: 
   var $13=HEAP32[(($argv)>>2)];
   var $14=(($13)|0);
   var $15=(($14+8)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))!=3;
   if ($17) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $19=$1;
   var $20=$1;
   var $21=_mrb_class_get($20, ((104296)|0));
   _mrb_raise($19, $21, ((103740)|0));
   label = 5; break;
  case 5: 
   var $23=HEAP32[(($index)>>2)];
   var $24=(($23)|(0)) < 0;
   if ($24) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $26=$a;
   var $27=(($26+12)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=HEAP32[(($index)>>2)];
   var $30=((($29)+($28))|0);
   HEAP32[(($index)>>2)]=$30;
   label = 7; break;
  case 7: 
   var $32=HEAP32[(($index)>>2)];
   var $33=(($32)|(0)) < 0;
   if ($33) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $35=$a;
   var $36=(($35+12)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=HEAP32[(($index)>>2)];
   var $39=(($37)|(0)) < (($38)|(0));
   if ($39) { label = 9; break; } else { label = 10; break; }
  case 9: 
   _mrb_nil_value637($agg_result);
   label = 19; break;
  case 10: 
   var $42=HEAP32[(($argv)>>2)];
   var $43=(($42)|0);
   var $44=(($43)|0);
   var $45=$44;
   var $46=HEAP32[(($45)>>2)];
   $len=$46;
   var $47=$len;
   var $48=(($47)|(0)) < 0;
   if ($48) { label = 11; break; } else { label = 12; break; }
  case 11: 
   _mrb_nil_value637($agg_result);
   label = 19; break;
  case 12: 
   var $51=$a;
   var $52=(($51+12)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=HEAP32[(($index)>>2)];
   var $55=(($53)|(0))==(($54)|(0));
   if ($55) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $57=$1;
   _mrb_ary_new($agg_result, $57);
   label = 19; break;
  case 14: 
   var $59=$len;
   var $60=$a;
   var $61=(($60+12)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=HEAP32[(($index)>>2)];
   var $64=((($62)-($63))|0);
   var $65=(($59)|(0)) > (($64)|(0));
   if ($65) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $67=$a;
   var $68=(($67+12)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=HEAP32[(($index)>>2)];
   var $71=((($69)-($70))|0);
   $len=$71;
   label = 16; break;
  case 16: 
   var $73=$1;
   var $74=$a;
   var $75=HEAP32[(($index)>>2)];
   var $76=$len;
   _ary_subseq($agg_result, $73, $74, $75, $76);
   label = 19; break;
  case 17: 
   var $78=$1;
   var $79=$1;
   var $80=_mrb_class_get($79, ((88988)|0));
   _mrb_raise($78, $80, ((103228)|0));
   label = 18; break;
  case 18: 
   _mrb_nil_value637($agg_result);
   label = 19; break;
  case 19: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _ary_subseq($agg_result, $mrb, $a, $beg, $len) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $b;
 $1=$mrb;
 $2=$a;
 $3=$beg;
 $4=$len;
 var $5=$1;
 var $6=$2;
 _ary_make_shared($5, $6);
 var $7=$1;
 var $8=$1;
 var $9=(($8+64)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_mrb_obj_alloc($7, 14, $10);
 var $12=$11;
 $b=$12;
 var $13=$2;
 var $14=(($13+20)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$3;
 var $17=(($15+((($16)*(12))&-1))|0);
 var $18=$b;
 var $19=(($18+20)|0);
 HEAP32[(($19)>>2)]=$17;
 var $20=$4;
 var $21=$b;
 var $22=(($21+12)|0);
 HEAP32[(($22)>>2)]=$20;
 var $23=$2;
 var $24=(($23+16)|0);
 var $25=$24;
 var $26=HEAP32[(($25)>>2)];
 var $27=$b;
 var $28=(($27+16)|0);
 var $29=$28;
 HEAP32[(($29)>>2)]=$26;
 var $30=$b;
 var $31=(($30+16)|0);
 var $32=$31;
 var $33=HEAP32[(($32)>>2)];
 var $34=(($33)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=((($35)+(1))|0);
 HEAP32[(($34)>>2)]=$36;
 var $37=$b;
 var $38=$37;
 var $39=HEAP32[(($38)>>2)];
 var $40=$39 >>> 11;
 var $41=$40 & 2097151;
 var $42=$41 | 256;
 var $43=$42 & 2097151;
 var $44=$37;
 var $45=$43 & 2097151;
 var $46=$45 << 11;
 var $47=HEAP32[(($44)>>2)];
 var $48=$47 & 2047;
 var $49=$48 | $46;
 HEAP32[(($44)>>2)]=$49;
 var $50=$b;
 var $51=$50;
 _mrb_obj_value630($agg_result, $51);
 return;
}
function _mrb_ary_aset($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $argv=sp;
   var $argc=(sp)+(4);
   var $2=(sp)+(8);
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_get_args($3, ((90024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
   var $5=HEAP32[(($argc)>>2)];
   if ((($5)|(0))==2) {
    label = 2; break;
   }
   else if ((($5)|(0))==3) {
    label = 5; break;
   }
   else {
   label = 6; break;
   }
  case 2: 
   var $7=HEAP32[(($argv)>>2)];
   var $8=(($7)|0);
   var $9=(($8+8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))==3;
   if ($11) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $13=$1;
   var $14=$1;
   var $15=_mrb_class_get($14, ((104296)|0));
   _mrb_raise($13, $15, ((102784)|0));
   label = 4; break;
  case 4: 
   var $17=$1;
   var $18=HEAP32[(($argv)>>2)];
   var $19=(($18)|0);
   var $20=(($19)|0);
   var $21=$20;
   var $22=HEAP32[(($21)>>2)];
   var $23=HEAP32[(($argv)>>2)];
   var $24=(($23+12)|0);
   _mrb_ary_set($17, $self, $22, $24);
   var $25=HEAP32[(($argv)>>2)];
   var $26=(($25+12)|0);
   var $27=$agg_result;
   var $28=$26;
   assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
   label = 7; break;
  case 5: 
   var $30=$1;
   var $31=HEAP32[(($argv)>>2)];
   var $32=(($31)|0);
   var $33=(($32)|0);
   var $34=$33;
   var $35=HEAP32[(($34)>>2)];
   var $36=HEAP32[(($argv)>>2)];
   var $37=(($36+12)|0);
   var $38=(($37)|0);
   var $39=$38;
   var $40=HEAP32[(($39)>>2)];
   var $41=HEAP32[(($argv)>>2)];
   var $42=(($41+24)|0);
   _mrb_ary_splice($2, $30, $self, $35, $40, $42);
   var $43=HEAP32[(($argv)>>2)];
   var $44=(($43+24)|0);
   var $45=$agg_result;
   var $46=$44;
   assert(12 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($45)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];
   label = 7; break;
  case 6: 
   var $48=$1;
   var $49=$1;
   var $50=_mrb_class_get($49, ((88988)|0));
   _mrb_raise($48, $50, ((103228)|0));
   _mrb_nil_value637($agg_result);
   label = 7; break;
  case 7: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_delete_at($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a;
   var $index=sp;
   var $val=(sp)+(4);
   var $ptr;
   var $len;
   $1=$mrb;
   var $2=(($self)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $a=$5;
   var $6=$1;
   var $7=_mrb_get_args($6, ((90460)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$index,tempInt));
   var $8=HEAP32[(($index)>>2)];
   var $9=(($8)|(0)) < 0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$a;
   var $12=(($11+12)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=HEAP32[(($index)>>2)];
   var $15=((($14)+($13))|0);
   HEAP32[(($index)>>2)]=$15;
   label = 3; break;
  case 3: 
   var $17=HEAP32[(($index)>>2)];
   var $18=(($17)|(0)) < 0;
   if ($18) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $20=$a;
   var $21=(($20+12)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=HEAP32[(($index)>>2)];
   var $24=(($22)|(0)) <= (($23)|(0));
   if ($24) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _mrb_nil_value637($agg_result);
   label = 10; break;
  case 6: 
   var $27=$1;
   var $28=$a;
   _ary_modify($27, $28);
   var $29=HEAP32[(($index)>>2)];
   var $30=$a;
   var $31=(($30+20)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32+((($29)*(12))&-1))|0);
   var $34=$val;
   var $35=$33;
   assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
   var $36=$a;
   var $37=(($36+20)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=HEAP32[(($index)>>2)];
   var $40=(($38+((($39)*(12))&-1))|0);
   $ptr=$40;
   var $41=$a;
   var $42=(($41+12)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=HEAP32[(($index)>>2)];
   var $45=((($43)-($44))|0);
   $len=$45;
   label = 7; break;
  case 7: 
   var $47=$len;
   var $48=((($47)-(1))|0);
   $len=$48;
   var $49=(($48)|(0))!=0;
   if ($49) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $51=$ptr;
   var $52=$ptr;
   var $53=(($52+12)|0);
   var $54=$51;
   var $55=$53;
   assert(12 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($55)+(4))>>2)];HEAP32[((($54)+(8))>>2)]=HEAP32[((($55)+(8))>>2)];
   var $56=$ptr;
   var $57=(($56+12)|0);
   $ptr=$57;
   label = 7; break;
  case 9: 
   var $59=$a;
   var $60=(($59+12)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=((($61)-(1))|0);
   HEAP32[(($60)>>2)]=$62;
   var $63=$1;
   var $64=$a;
   _ary_shrink_capa($63, $64);
   var $65=$agg_result;
   var $66=$val;
   assert(12 % 1 === 0);HEAP32[(($65)>>2)]=HEAP32[(($66)>>2)];HEAP32[((($65)+(4))>>2)]=HEAP32[((($66)+(4))>>2)];HEAP32[((($65)+(8))>>2)]=HEAP32[((($66)+(8))>>2)];
   label = 10; break;
  case 10: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _ary_shrink_capa($mrb, $a) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $capa;
   $1=$mrb;
   $2=$a;
   var $3=$2;
   var $4=(($3+16)|0);
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   $capa=$6;
   var $7=$capa;
   var $8=(($7)|(0)) < 8;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 13; break;
  case 3: 
   var $11=$capa;
   var $12=$2;
   var $13=(($12+12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=((($14)*(5))&-1);
   var $16=(($11)|(0)) <= (($15)|(0));
   if ($16) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 13; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $20=$capa;
   var $21=((((($20)|(0)))/(2))&-1);
   $capa=$21;
   var $22=$capa;
   var $23=(($22)|(0)) < 4;
   if ($23) { label = 7; break; } else { label = 8; break; }
  case 7: 
   $capa=4;
   label = 10; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $27=$capa;
   var $28=$2;
   var $29=(($28+12)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=((($30)*(5))&-1);
   var $32=(($27)|(0)) > (($31)|(0));
   if ($32) { label = 6; break; } else { label = 10; break; }
  case 10: 
   var $34=$capa;
   var $35=$2;
   var $36=(($35+12)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($34)|(0)) > (($37)|(0));
   if ($38) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $40=$capa;
   var $41=$2;
   var $42=(($41+16)|0);
   var $43=$42;
   var $44=HEAP32[(($43)>>2)];
   var $45=(($40)|(0)) < (($44)|(0));
   if ($45) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $47=$capa;
   var $48=$2;
   var $49=(($48+16)|0);
   var $50=$49;
   HEAP32[(($50)>>2)]=$47;
   var $51=$1;
   var $52=$2;
   var $53=(($52+20)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=$54;
   var $56=$capa;
   var $57=((($56)*(12))&-1);
   var $58=_mrb_realloc($51, $55, $57);
   var $59=$58;
   var $60=$2;
   var $61=(($60+20)|0);
   HEAP32[(($61)>>2)]=$59;
   label = 13; break;
  case 13: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_first($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a;
   var $size=sp;
   $1=$mrb;
   var $2=(($self)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $a=$5;
   var $6=$1;
   var $7=_mrb_get_args($6, ((102436)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$size,tempInt));
   var $8=(($7)|(0))==0;
   if ($8) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $10=$a;
   var $11=(($10+12)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0)) > 0;
   if ($13) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $15=$a;
   var $16=(($15+20)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|0);
   var $19=$agg_result;
   var $20=$18;
   assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
   label = 5; break;
  case 4: 
   _mrb_nil_value637($agg_result);
   label = 5; break;
  case 5: 
   label = 13; break;
  case 6: 
   var $24=HEAP32[(($size)>>2)];
   var $25=(($24)|(0)) < 0;
   if ($25) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $27=$1;
   var $28=$1;
   var $29=_mrb_class_get($28, ((88988)|0));
   _mrb_raise($27, $29, ((102080)|0));
   label = 8; break;
  case 8: 
   var $31=HEAP32[(($size)>>2)];
   var $32=$a;
   var $33=(($32+12)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($31)|(0)) > (($34)|(0));
   if ($35) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $37=$a;
   var $38=(($37+12)|0);
   var $39=HEAP32[(($38)>>2)];
   HEAP32[(($size)>>2)]=$39;
   label = 10; break;
  case 10: 
   var $41=$a;
   var $42=$41;
   var $43=HEAP32[(($42)>>2)];
   var $44=$43 >>> 11;
   var $45=$44 & 2097151;
   var $46=$45 & 256;
   var $47=(($46)|(0))!=0;
   if ($47) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $49=$1;
   var $50=$a;
   var $51=HEAP32[(($size)>>2)];
   _ary_subseq($agg_result, $49, $50, 0, $51);
   label = 13; break;
  case 12: 
   var $53=$1;
   var $54=HEAP32[(($size)>>2)];
   var $55=$a;
   var $56=(($55+20)|0);
   var $57=HEAP32[(($56)>>2)];
   _mrb_ary_new_from_values($agg_result, $53, $54, $57);
   label = 13; break;
  case 13: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_last($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a;
   var $size;
   var $vals=sp;
   var $len=(sp)+(4);
   $1=$mrb;
   var $2=(($self)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $a=$5;
   var $6=$1;
   var $7=_mrb_get_args($6, ((90024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$vals,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
   var $8=HEAP32[(($len)>>2)];
   var $9=(($8)|(0)) > 1;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$1;
   var $12=$1;
   var $13=_mrb_class_get($12, ((88988)|0));
   _mrb_raise($11, $13, ((103228)|0));
   label = 3; break;
  case 3: 
   var $15=HEAP32[(($len)>>2)];
   var $16=(($15)|(0))==0;
   if ($16) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $18=$a;
   var $19=(($18+12)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|(0)) > 0;
   if ($21) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $23=$a;
   var $24=(($23+12)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=((($25)-(1))|0);
   var $27=$a;
   var $28=(($27+20)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+((($26)*(12))&-1))|0);
   var $31=$agg_result;
   var $32=$30;
   assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
   label = 7; break;
  case 6: 
   _mrb_nil_value637($agg_result);
   label = 7; break;
  case 7: 
   label = 16; break;
  case 8: 
   var $36=HEAP32[(($vals)>>2)];
   var $37=(($36)|0);
   var $38=$37;
   var $39=HEAP32[(($38)>>2)];
   $size=$39;
   var $40=$size;
   var $41=(($40)|(0)) < 0;
   if ($41) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $43=$1;
   var $44=$1;
   var $45=_mrb_class_get($44, ((88988)|0));
   _mrb_raise($43, $45, ((102080)|0));
   label = 10; break;
  case 10: 
   var $47=$size;
   var $48=$a;
   var $49=(($48+12)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($47)|(0)) > (($50)|(0));
   if ($51) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $53=$a;
   var $54=(($53+12)|0);
   var $55=HEAP32[(($54)>>2)];
   $size=$55;
   label = 12; break;
  case 12: 
   var $57=$a;
   var $58=$57;
   var $59=HEAP32[(($58)>>2)];
   var $60=$59 >>> 11;
   var $61=$60 & 2097151;
   var $62=$61 & 256;
   var $63=(($62)|(0))!=0;
   if ($63) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $65=$size;
   var $66=(($65)|(0)) > 4;
   if ($66) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $68=$1;
   var $69=$a;
   var $70=$a;
   var $71=(($70+12)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=$size;
   var $74=((($72)-($73))|0);
   var $75=$size;
   _ary_subseq($agg_result, $68, $69, $74, $75);
   label = 16; break;
  case 15: 
   var $77=$1;
   var $78=$size;
   var $79=$a;
   var $80=(($79+20)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$a;
   var $83=(($82+12)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=(($81+((($84)*(12))&-1))|0);
   var $86=$size;
   var $87=(((-$86))|0);
   var $88=(($85+((($87)*(12))&-1))|0);
   _mrb_ary_new_from_values($agg_result, $77, $78, $88);
   label = 16; break;
  case 16: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_index_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $obj=sp;
   var $i;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((98676)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$obj,tempInt));
   $i=0;
   label = 2; break;
  case 2: 
   var $5=$i;
   var $6=(($self)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=$8;
   var $10=(($9+12)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($5)|(0)) < (($11)|(0));
   if ($12) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $14=$1;
   var $15=$i;
   var $16=(($self)|0);
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   var $19=$18;
   var $20=(($19+20)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21+((($15)*(12))&-1))|0);
   var $23=_mrb_equal($14, $22, $obj);
   var $24=(($23 << 24) >> 24)!=0;
   if ($24) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $26=$i;
   _mrb_fixnum_value638($agg_result, $26);
   label = 8; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $29=$i;
   var $30=((($29)+(1))|0);
   $i=$30;
   label = 2; break;
  case 7: 
   _mrb_nil_value637($agg_result);
   label = 8; break;
  case 8: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_rindex_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $obj=sp;
   var $i;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((98676)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$obj,tempInt));
   var $4=(($self)|0);
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=$6;
   var $8=(($7+12)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=((($9)-(1))|0);
   $i=$10;
   label = 2; break;
  case 2: 
   var $12=$i;
   var $13=(($12)|(0)) >= 0;
   if ($13) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $15=$1;
   var $16=$i;
   var $17=(($self)|0);
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=$19;
   var $21=(($20+20)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+((($16)*(12))&-1))|0);
   var $24=_mrb_equal($15, $23, $obj);
   var $25=(($24 << 24) >> 24)!=0;
   if ($25) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $27=$i;
   _mrb_fixnum_value638($agg_result, $27);
   label = 8; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $30=$i;
   var $31=((($30)-(1))|0);
   $i=$31;
   label = 2; break;
  case 7: 
   _mrb_nil_value637($agg_result);
   label = 8; break;
  case 8: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_splat($agg_result, $mrb, $v) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$mrb;
   var $2=(($v+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|(0))==14;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   label = 4; break;
  case 3: 
   var $9=$1;
   _mrb_ary_new_from_values($agg_result, $9, 1, $v);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_clear($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $a;
 $1=$mrb;
 var $2=(($self)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 $a=$5;
 var $6=$1;
 var $7=$a;
 _ary_modify($6, $7);
 var $8=$a;
 var $9=(($8+12)|0);
 HEAP32[(($9)>>2)]=0;
 var $10=$a;
 var $11=(($10+16)|0);
 var $12=$11;
 HEAP32[(($12)>>2)]=0;
 var $13=$1;
 var $14=$a;
 var $15=(($14+20)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$16;
 _mrb_free($13, $17);
 var $18=$a;
 var $19=(($18+20)|0);
 HEAP32[(($19)>>2)]=0;
 var $20=$agg_result;
 var $21=$self;
 assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_ary_empty_p($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $a;
 $1=$mrb;
 var $2=(($self)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 $a=$5;
 var $6=$a;
 var $7=(($6+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8)|(0))==0;
 var $10=(($9)&(1));
 var $11=(($10) & 255);
 _mrb_bool_value652($agg_result, $11);
 STACKTOP = sp;
 return;
}
function _mrb_bool_value652($agg_result, $boolean) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$boolean;
   label = 2; break;
  case 2: 
   var $3=$1;
   var $4=(($3)&(255));
   var $5=(($4)|(0))!=0;
   var $6=$5 ? 2 : 0;
   var $7=(($v+8)|0);
   HEAP32[(($7)>>2)]=$6;
   var $8=(($v)|0);
   var $9=$8;
   HEAP32[(($9)>>2)]=1;
   label = 3; break;
  case 3: 
   var $11=$agg_result;
   var $12=$v;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_check_array_type($agg_result, $mrb, $ary) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_check_convert_type($agg_result, $2, $ary, 14, ((101628)|0), ((101108)|0));
 STACKTOP = sp;
 return;
}
function _mrb_ary_entry($agg_result, $ary, $offset) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$offset;
   var $2=$1;
   var $3=(($2)|(0)) < 0;
   if ($3) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $5=(($ary)|0);
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7;
   var $9=(($8+12)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$1;
   var $12=((($11)+($10))|0);
   $1=$12;
   label = 3; break;
  case 3: 
   var $14=$1;
   _ary_elt($agg_result, $ary, $14);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_join($agg_result, $mrb, $ary, $sep) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $sep; $sep = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($sep)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sep)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sep)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2=sp;
 var $3=(sp)+(12);
 $1=$mrb;
 var $4=$1;
 _mrb_obj_as_string($2, $4, $sep);
 var $5=$sep;
 var $6=$2;
 assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 var $7=$1;
 var $8=$1;
 _mrb_ary_new($3, $8);
 _join_ary($agg_result, $7, $ary, $sep, $3);
 STACKTOP = sp;
 return;
}
function _join_ary($agg_result, $mrb, $ary, $sep, $list) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 132)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $sep; $sep = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($sep)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sep)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sep)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $list; $list = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($list)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($list)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($list)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $i;
   var $result=sp;
   var $val=(sp)+(12);
   var $tmp=(sp)+(24);
   var $2=(sp)+(36);
   var $3=(sp)+(48);
   var $4=(sp)+(60);
   var $5=(sp)+(72);
   var $6=(sp)+(84);
   var $7=(sp)+(96);
   var $8=(sp)+(108);
   var $9=(sp)+(120);
   $1=$mrb;
   $i=0;
   label = 2; break;
  case 2: 
   var $11=$i;
   var $12=(($list)|0);
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=$14;
   var $16=(($15+12)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($11)|(0)) < (($17)|(0));
   if ($18) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $20=$1;
   var $21=$i;
   var $22=(($list)|0);
   var $23=$22;
   var $24=HEAP32[(($23)>>2)];
   var $25=$24;
   var $26=(($25+20)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27+((($21)*(12))&-1))|0);
   var $29=_mrb_obj_equal($20, $ary, $28);
   var $30=(($29 << 24) >> 24)!=0;
   if ($30) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $32=$1;
   var $33=$1;
   var $34=_mrb_class_get($33, ((88988)|0));
   _mrb_raise($32, $34, ((91516)|0));
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $37=$i;
   var $38=((($37)+(1))|0);
   $i=$38;
   label = 2; break;
  case 7: 
   var $40=$1;
   _mrb_ary_push($40, $list, $ary);
   var $41=$1;
   _mrb_str_buf_new($2, $41, 64);
   var $42=$result;
   var $43=$2;
   assert(12 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];HEAP32[((($42)+(8))>>2)]=HEAP32[((($43)+(8))>>2)];
   $i=0;
   label = 8; break;
  case 8: 
   var $45=$i;
   var $46=(($ary)|0);
   var $47=$46;
   var $48=HEAP32[(($47)>>2)];
   var $49=$48;
   var $50=(($49+12)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($45)|(0)) < (($51)|(0));
   if ($52) { label = 9; break; } else { label = 27; break; }
  case 9: 
   var $54=$i;
   var $55=(($54)|(0)) > 0;
   if ($55) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $57=(($sep+8)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58)|(0))==0;
   if ($59) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $61=(($sep)|0);
   var $62=$61;
   var $63=HEAP32[(($62)>>2)];
   var $64=(($63)|(0))!=0;
   if ($64) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $66=$1;
   var $67=(($sep)|0);
   var $68=$67;
   var $69=HEAP32[(($68)>>2)];
   var $70=$69;
   var $71=(($70+20)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($sep)|0);
   var $74=$73;
   var $75=HEAP32[(($74)>>2)];
   var $76=$75;
   var $77=(($76+12)|0);
   var $78=HEAP32[(($77)>>2)];
   _mrb_str_buf_cat($3, $66, $result, $72, $78);
   label = 13; break;
  case 13: 
   var $80=$i;
   var $81=(($ary)|0);
   var $82=$81;
   var $83=HEAP32[(($82)>>2)];
   var $84=$83;
   var $85=(($84+20)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=(($86+((($80)*(12))&-1))|0);
   var $88=$val;
   var $89=$87;
   assert(12 % 1 === 0);HEAP32[(($88)>>2)]=HEAP32[(($89)>>2)];HEAP32[((($88)+(4))>>2)]=HEAP32[((($89)+(4))>>2)];HEAP32[((($88)+(8))>>2)]=HEAP32[((($89)+(8))>>2)];
   var $90=(($val+8)|0);
   var $91=HEAP32[(($90)>>2)];
   if ((($91)|(0))==14) {
    label = 14; break;
   }
   else if ((($91)|(0))==16) {
    label = 16; break;
   }
   else {
   label = 18; break;
   }
  case 14: 
   label = 15; break;
  case 15: 
   var $94=$1;
   _join_ary($4, $94, $val, $sep, $list);
   var $95=$val;
   var $96=$4;
   assert(12 % 1 === 0);HEAP32[(($95)>>2)]=HEAP32[(($96)>>2)];HEAP32[((($95)+(4))>>2)]=HEAP32[((($96)+(4))>>2)];HEAP32[((($95)+(8))>>2)]=HEAP32[((($96)+(8))>>2)];
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $99=$1;
   var $100=(($val)|0);
   var $101=$100;
   var $102=HEAP32[(($101)>>2)];
   var $103=$102;
   var $104=(($103+20)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=(($val)|0);
   var $107=$106;
   var $108=HEAP32[(($107)>>2)];
   var $109=$108;
   var $110=(($109+12)|0);
   var $111=HEAP32[(($110)>>2)];
   _mrb_str_buf_cat($5, $99, $result, $105, $111);
   label = 25; break;
  case 18: 
   var $113=$1;
   _mrb_check_string_type($6, $113, $val);
   var $114=$tmp;
   var $115=$6;
   assert(12 % 1 === 0);HEAP32[(($114)>>2)]=HEAP32[(($115)>>2)];HEAP32[((($114)+(4))>>2)]=HEAP32[((($115)+(4))>>2)];HEAP32[((($114)+(8))>>2)]=HEAP32[((($115)+(8))>>2)];
   var $116=(($tmp+8)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($117)|(0))==0;
   if ($118) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $120=(($tmp)|0);
   var $121=$120;
   var $122=HEAP32[(($121)>>2)];
   var $123=(($122)|(0))!=0;
   if ($123) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $125=$val;
   var $126=$tmp;
   assert(12 % 1 === 0);HEAP32[(($125)>>2)]=HEAP32[(($126)>>2)];HEAP32[((($125)+(4))>>2)]=HEAP32[((($126)+(4))>>2)];HEAP32[((($125)+(8))>>2)]=HEAP32[((($126)+(8))>>2)];
   label = 17; break;
  case 21: 
   var $128=$1;
   _mrb_check_convert_type($7, $128, $val, 14, ((101628)|0), ((101108)|0));
   var $129=$tmp;
   var $130=$7;
   assert(12 % 1 === 0);HEAP32[(($129)>>2)]=HEAP32[(($130)>>2)];HEAP32[((($129)+(4))>>2)]=HEAP32[((($130)+(4))>>2)];HEAP32[((($129)+(8))>>2)]=HEAP32[((($130)+(8))>>2)];
   var $131=(($tmp+8)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=(($132)|(0))==0;
   if ($133) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $135=(($tmp)|0);
   var $136=$135;
   var $137=HEAP32[(($136)>>2)];
   var $138=(($137)|(0))!=0;
   if ($138) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $140=$val;
   var $141=$tmp;
   assert(12 % 1 === 0);HEAP32[(($140)>>2)]=HEAP32[(($141)>>2)];HEAP32[((($140)+(4))>>2)]=HEAP32[((($141)+(4))>>2)];HEAP32[((($140)+(8))>>2)]=HEAP32[((($141)+(8))>>2)];
   label = 15; break;
  case 24: 
   var $143=$1;
   _mrb_obj_as_string($8, $143, $val);
   var $144=$val;
   var $145=$8;
   assert(12 % 1 === 0);HEAP32[(($144)>>2)]=HEAP32[(($145)>>2)];HEAP32[((($144)+(4))>>2)]=HEAP32[((($145)+(4))>>2)];HEAP32[((($144)+(8))>>2)]=HEAP32[((($145)+(8))>>2)];
   label = 17; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $148=$i;
   var $149=((($148)+(1))|0);
   $i=$149;
   label = 8; break;
  case 27: 
   var $151=$1;
   _mrb_ary_pop($9, $151, $list);
   var $152=$agg_result;
   var $153=$result;
   assert(12 % 1 === 0);HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];HEAP32[((($152)+(4))>>2)]=HEAP32[((($153)+(4))>>2)];HEAP32[((($152)+(8))>>2)]=HEAP32[((($153)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_init_array($mrb) {
 var label = 0;
 var $1;
 var $a;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=(($3+44)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_mrb_define_class($2, ((101628)|0), $5);
 var $7=$1;
 var $8=(($7+64)|0);
 HEAP32[(($8)>>2)]=$6;
 $a=$6;
 var $9=$a;
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=$11 >>> 11;
 var $13=$12 & 2097151;
 var $14=$13 & -256;
 var $15=$14 | 14;
 var $16=$a;
 var $17=$15 & 2097151;
 var $18=$16;
 var $19=$17 & 2097151;
 var $20=$19 << 11;
 var $21=HEAP32[(($18)>>2)];
 var $22=$21 & 2047;
 var $23=$22 | $20;
 HEAP32[(($18)>>2)]=$23;
 var $24=$1;
 var $25=$a;
 var $26=$1;
 var $27=_mrb_class_get($26, ((100732)|0));
 _mrb_include_module($24, $25, $27);
 var $28=$1;
 var $29=$a;
 _mrb_define_class_method($28, $29, ((100280)|0), 530, 4096);
 var $30=$1;
 var $31=$a;
 _mrb_define_method($30, $31, ((90024)|0), 68, 262144);
 var $32=$1;
 var $33=$a;
 _mrb_define_method($32, $33, ((99936)|0), 352, 262144);
 var $34=$1;
 var $35=$a;
 _mrb_define_method($34, $35, ((99668)|0), 344, 262144);
 var $36=$1;
 var $37=$a;
 _mrb_define_method($36, $37, ((100280)|0), 524, 4096);
 var $38=$1;
 var $39=$a;
 _mrb_define_method($38, $39, ((99148)|0), 678, 4096);
 var $40=$1;
 var $41=$a;
 _mrb_define_method($40, $41, ((98776)|0), 676, 0);
 var $42=$1;
 var $43=$a;
 _mrb_define_method($42, $43, ((98260)|0), 438, 262144);
 var $44=$1;
 var $45=$a;
 _mrb_define_method($44, $45, ((97956)|0), 96, 262144);
 var $46=$1;
 var $47=$a;
 _mrb_define_method($46, $47, ((97644)|0), 390, 0);
 var $48=$1;
 var $49=$a;
 _mrb_define_method($48, $49, ((97336)|0), 708, 8192);
 var $50=$1;
 var $51=$a;
 _mrb_define_method($50, $51, ((97048)|0), 498, 262144);
 var $52=$1;
 var $53=$a;
 _mrb_define_method($52, $53, ((96580)|0), 512, 262144);
 var $54=$1;
 var $55=$a;
 _mrb_define_method($54, $55, ((96248)|0), 268, 4096);
 var $56=$1;
 var $57=$a;
 _mrb_define_method($56, $57, ((96052)|0), 660, 4096);
 var $58=$1;
 var $59=$a;
 _mrb_define_method($58, $59, ((95872)|0), 272, 0);
 var $60=$1;
 var $61=$a;
 _mrb_define_method($60, $61, ((95656)|0), 474, 0);
 var $62=$1;
 var $63=$a;
 _mrb_define_method($62, $63, ((95412)|0), 344, 4096);
 var $64=$1;
 var $65=$a;
 _mrb_define_method($64, $65, ((95164)|0), 512, 262144);
 var $66=$1;
 var $67=$a;
 _mrb_define_method($66, $67, ((94976)|0), 440, 0);
 var $68=$1;
 var $69=$a;
 _mrb_define_method($68, $69, ((94692)|0), 50, 0);
 var $70=$1;
 var $71=$a;
 _mrb_define_method($70, $71, ((94428)|0), 154, 262144);
 var $72=$1;
 var $73=$a;
 _mrb_define_method($72, $73, ((94056)|0), 428, 0);
 var $74=$1;
 var $75=$a;
 _mrb_define_method($74, $75, ((93752)|0), 272, 0);
 var $76=$1;
 var $77=$a;
 _mrb_define_method($76, $77, ((93432)|0), 524, 4096);
 var $78=$1;
 var $79=$a;
 _mrb_define_method($78, $79, ((93212)|0), 542, 4096);
 var $80=$1;
 var $81=$a;
 _mrb_define_method($80, $81, ((92964)|0), 38, 0);
 var $82=$1;
 var $83=$a;
 _mrb_define_alias($82, $83, ((92784)|0), ((92964)|0));
 var $84=$1;
 var $85=$a;
 _mrb_define_method($84, $85, ((92592)|0), 30, 262144);
 var $86=$1;
 var $87=$a;
 _mrb_define_method($86, $87, ((92396)|0), 98, 262144);
 var $88=$1;
 var $89=$a;
 _mrb_define_method($88, $89, ((95612)|0), 4, 262144);
 return;
}
function _mrb_ary_join_m($agg_result, $mrb, $ary) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $sep=sp;
 $1=$mrb;
 _mrb_nil_value637($sep);
 var $2=$1;
 var $3=_mrb_get_args($2, ((91908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$sep,tempInt));
 var $4=$1;
 _mrb_ary_join($agg_result, $4, $ary, $sep);
 STACKTOP = sp;
 return;
}
function _mrb_ary_size($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $a;
 $1=$mrb;
 var $2=(($self)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 $a=$5;
 var $6=$a;
 var $7=(($6+12)|0);
 var $8=HEAP32[(($7)>>2)];
 _mrb_fixnum_value638($agg_result, $8);
 STACKTOP = sp;
 return;
}
function _kh_fill_flags773($p, $c, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$p;
   $2=$c;
   $3=$len;
   label = 2; break;
  case 2: 
   var $5=$3;
   var $6=((($5)-(1))|0);
   $3=$6;
   var $7=(($5)>>>(0)) > 0;
   if ($7) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $9=$2;
   var $10=$1;
   var $11=(($10+1)|0);
   $1=$11;
   HEAP8[($10)]=$9;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_inspect($agg_result, $mrb, $ary) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2=sp;
   $1=$mrb;
   var $3=(($ary)|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5;
   var $7=(($6+12)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))==0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$1;
   _mrb_str_new($agg_result, $11, ((100280)|0), 2);
   label = 4; break;
  case 3: 
   var $13=$1;
   var $14=$1;
   _mrb_ary_new($2, $14);
   _inspect_ary($agg_result, $13, $ary, $2);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_equal($agg_result, $mrb, $ary1) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary1; $ary1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ary2=sp;
   var $i;
   var $2=(sp)+(12);
   var $3=(sp)+(24);
   $1=$mrb;
   var $4=$1;
   var $5=_mrb_get_args($4, ((98676)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$ary2,tempInt));
   var $6=$1;
   var $7=_mrb_obj_equal($6, $ary1, $ary2);
   var $8=(($7 << 24) >> 24)!=0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _mrb_true_value($agg_result);
   label = 18; break;
  case 3: 
   var $11=(($ary2+8)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)>>>(0)) <= 7;
   if ($13) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _mrb_false_value($agg_result);
   label = 18; break;
  case 5: 
   var $16=(($ary2+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0))==14;
   if ($18) { label = 9; break; } else { label = 6; break; }
  case 6: 
   var $20=$1;
   var $21=$1;
   var $22=_mrb_intern2($21, ((101108)|0), 6);
   var $23=_mrb_respond_to($20, $ary2, $22);
   var $24=(($23 << 24) >> 24)!=0;
   if ($24) { label = 8; break; } else { label = 7; break; }
  case 7: 
   _mrb_false_value($agg_result);
   label = 18; break;
  case 8: 
   var $27=$1;
   var $28=_mrb_equal($27, $ary2, $ary1);
   _mrb_bool_value652($agg_result, $28);
   label = 18; break;
  case 9: 
   var $30=(($ary1)|0);
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=$32;
   var $34=(($33+12)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($ary2)|0);
   var $37=$36;
   var $38=HEAP32[(($37)>>2)];
   var $39=$38;
   var $40=(($39+12)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($35)|(0))!=(($41)|(0));
   if ($42) { label = 10; break; } else { label = 11; break; }
  case 10: 
   _mrb_false_value($agg_result);
   label = 18; break;
  case 11: 
   $i=0;
   label = 12; break;
  case 12: 
   var $46=$i;
   var $47=(($ary1)|0);
   var $48=$47;
   var $49=HEAP32[(($48)>>2)];
   var $50=$49;
   var $51=(($50+12)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($46)|(0)) < (($52)|(0));
   if ($53) { label = 13; break; } else { label = 17; break; }
  case 13: 
   var $55=$1;
   var $56=$i;
   _ary_elt($2, $ary1, $56);
   var $57=$i;
   _ary_elt($3, $ary2, $57);
   var $58=_mrb_equal($55, $2, $3);
   var $59=(($58 << 24) >> 24)!=0;
   if ($59) { label = 15; break; } else { label = 14; break; }
  case 14: 
   _mrb_false_value($agg_result);
   label = 18; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $63=$i;
   var $64=((($63)+(1))|0);
   $i=$64;
   label = 12; break;
  case 17: 
   _mrb_true_value($agg_result);
   label = 18; break;
  case 18: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_eql($agg_result, $mrb, $ary1) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary1; $ary1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ary2=sp;
   var $i;
   var $2=(sp)+(12);
   var $3=(sp)+(24);
   $1=$mrb;
   var $4=$1;
   var $5=_mrb_get_args($4, ((98676)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$ary2,tempInt));
   var $6=$1;
   var $7=_mrb_obj_equal($6, $ary1, $ary2);
   var $8=(($7 << 24) >> 24)!=0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _mrb_true_value($agg_result);
   label = 14; break;
  case 3: 
   var $11=(($ary2+8)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))==14;
   if ($13) { label = 5; break; } else { label = 4; break; }
  case 4: 
   _mrb_false_value($agg_result);
   label = 14; break;
  case 5: 
   var $16=(($ary1)|0);
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   var $19=$18;
   var $20=(($19+12)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($ary2)|0);
   var $23=$22;
   var $24=HEAP32[(($23)>>2)];
   var $25=$24;
   var $26=(($25+12)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($21)|(0))!=(($27)|(0));
   if ($28) { label = 6; break; } else { label = 7; break; }
  case 6: 
   _mrb_false_value($agg_result);
   label = 14; break;
  case 7: 
   $i=0;
   label = 8; break;
  case 8: 
   var $32=$i;
   var $33=(($ary1)|0);
   var $34=$33;
   var $35=HEAP32[(($34)>>2)];
   var $36=$35;
   var $37=(($36+12)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($32)|(0)) < (($38)|(0));
   if ($39) { label = 9; break; } else { label = 13; break; }
  case 9: 
   var $41=$1;
   var $42=$i;
   _ary_elt($2, $ary1, $42);
   var $43=$i;
   _ary_elt($3, $ary2, $43);
   var $44=_mrb_eql($41, $2, $3);
   var $45=(($44 << 24) >> 24)!=0;
   if ($45) { label = 11; break; } else { label = 10; break; }
  case 10: 
   _mrb_false_value($agg_result);
   label = 14; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $49=$i;
   var $50=((($49)+(1))|0);
   $i=$50;
   label = 8; break;
  case 13: 
   _mrb_true_value($agg_result);
   label = 14; break;
  case 14: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_true_value($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=2;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=1;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_false_value($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=1;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _inspect_ary($agg_result, $mrb, $ary, $list) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 132)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $list; $list = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($list)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($list)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($list)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $i;
   var $s=sp;
   var $arystr=(sp)+(12);
   var $head=(sp)+(24);
   var $sep=(sp)+(28);
   var $tail=(sp)+(32);
   var $2=(sp)+(36);
   var $3=(sp)+(48);
   var $ai;
   var $4=(sp)+(60);
   var $5=(sp)+(72);
   var $6=(sp)+(84);
   var $7=(sp)+(96);
   var $8=(sp)+(108);
   var $9=(sp)+(120);
   $1=$mrb;
   var $10=$head;
   assert(1 % 1 === 0);HEAP8[($10)]=HEAP8[((((75540)|0))|0)];
   var $11=$sep;
   assert(2 % 1 === 0);HEAP8[($11)]=HEAP8[((((75536)|0))|0)];HEAP8[((($11)+(1))|0)]=HEAP8[(((((75536)|0))+(1))|0)];
   var $12=$tail;
   assert(1 % 1 === 0);HEAP8[($12)]=HEAP8[((((75532)|0))|0)];
   $i=0;
   label = 2; break;
  case 2: 
   var $14=$i;
   var $15=(($list)|0);
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $18=$17;
   var $19=(($18+12)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($14)|(0)) < (($20)|(0));
   if ($21) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $23=$1;
   var $24=$i;
   var $25=(($list)|0);
   var $26=$25;
   var $27=HEAP32[(($26)>>2)];
   var $28=$27;
   var $29=(($28+20)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30+((($24)*(12))&-1))|0);
   var $32=_mrb_obj_equal($23, $ary, $31);
   var $33=(($32 << 24) >> 24)!=0;
   if ($33) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $35=$1;
   _mrb_str_new($agg_result, $35, ((92152)|0), 5);
   label = 17; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $38=$i;
   var $39=((($38)+(1))|0);
   $i=$39;
   label = 2; break;
  case 7: 
   var $41=$1;
   _mrb_ary_push($41, $list, $ary);
   var $42=$1;
   _mrb_str_buf_new($2, $42, 64);
   var $43=$arystr;
   var $44=$2;
   assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
   var $45=$1;
   var $46=(($head)|0);
   _mrb_str_buf_cat($3, $45, $arystr, $46, 1);
   $i=0;
   label = 8; break;
  case 8: 
   var $48=$i;
   var $49=(($ary)|0);
   var $50=$49;
   var $51=HEAP32[(($50)>>2)];
   var $52=$51;
   var $53=(($52+12)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($48)|(0)) < (($54)|(0));
   if ($55) { label = 9; break; } else { label = 16; break; }
  case 9: 
   var $57=$1;
   var $58=_mrb_gc_arena_save($57);
   $ai=$58;
   var $59=$i;
   var $60=(($59)|(0)) > 0;
   if ($60) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $62=$1;
   var $63=(($sep)|0);
   _mrb_str_buf_cat($4, $62, $arystr, $63, 2);
   label = 11; break;
  case 11: 
   var $65=$i;
   var $66=(($ary)|0);
   var $67=$66;
   var $68=HEAP32[(($67)>>2)];
   var $69=$68;
   var $70=(($69+20)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($71+((($65)*(12))&-1))|0);
   var $73=(($72+8)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=(($74)|(0))==14;
   if ($75) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $77=$1;
   var $78=$i;
   var $79=(($ary)|0);
   var $80=$79;
   var $81=HEAP32[(($80)>>2)];
   var $82=$81;
   var $83=(($82+20)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=(($84+((($78)*(12))&-1))|0);
   _inspect_ary($5, $77, $85, $list);
   var $86=$s;
   var $87=$5;
   assert(12 % 1 === 0);HEAP32[(($86)>>2)]=HEAP32[(($87)>>2)];HEAP32[((($86)+(4))>>2)]=HEAP32[((($87)+(4))>>2)];HEAP32[((($86)+(8))>>2)]=HEAP32[((($87)+(8))>>2)];
   label = 14; break;
  case 13: 
   var $89=$1;
   var $90=$i;
   var $91=(($ary)|0);
   var $92=$91;
   var $93=HEAP32[(($92)>>2)];
   var $94=$93;
   var $95=(($94+20)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($96+((($90)*(12))&-1))|0);
   _mrb_inspect($6, $89, $97);
   var $98=$s;
   var $99=$6;
   assert(12 % 1 === 0);HEAP32[(($98)>>2)]=HEAP32[(($99)>>2)];HEAP32[((($98)+(4))>>2)]=HEAP32[((($99)+(4))>>2)];HEAP32[((($98)+(8))>>2)]=HEAP32[((($99)+(8))>>2)];
   label = 14; break;
  case 14: 
   var $101=$1;
   var $102=(($s)|0);
   var $103=$102;
   var $104=HEAP32[(($103)>>2)];
   var $105=$104;
   var $106=(($105+20)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=(($s)|0);
   var $109=$108;
   var $110=HEAP32[(($109)>>2)];
   var $111=$110;
   var $112=(($111+12)|0);
   var $113=HEAP32[(($112)>>2)];
   _mrb_str_buf_cat($7, $101, $arystr, $107, $113);
   var $114=$1;
   var $115=$ai;
   _mrb_gc_arena_restore($114, $115);
   label = 15; break;
  case 15: 
   var $117=$i;
   var $118=((($117)+(1))|0);
   $i=$118;
   label = 8; break;
  case 16: 
   var $120=$1;
   var $121=(($tail)|0);
   _mrb_str_buf_cat($8, $120, $arystr, $121, 1);
   var $122=$1;
   _mrb_ary_pop($9, $122, $list);
   var $123=$agg_result;
   var $124=$arystr;
   assert(12 % 1 === 0);HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[((($123)+(4))>>2)]=HEAP32[((($124)+(4))>>2)];HEAP32[((($123)+(8))>>2)]=HEAP32[((($124)+(8))>>2)];
   label = 17; break;
  case 17: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_print_backtrace($mrb) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ci;
   var $ciidx;
   var $filename;
   var $method;
   var $sep;
   var $i;
   var $line;
   var $2=sp;
   var $irep;
   var $pc;
   var $3=(sp)+(12);
   var $cn;
   $1=$mrb;
   var $4=HEAP32[((_stderr)>>2)];
   var $5=_fputs(((89016)|0), $4);
   var $6=$1;
   var $7=$1;
   var $8=(($7+16)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$1;
   var $11=_mrb_intern2($10, ((102440)|0), 5);
   _mrb_obj_iv_get($2, $6, $9, $11);
   var $12=(($2)|0);
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   $ciidx=$14;
   var $15=$ciidx;
   var $16=$1;
   var $17=(($16+8)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18+24)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$1;
   var $22=(($21+8)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23+20)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$20;
   var $27=$25;
   var $28=((($26)-($27))|0);
   var $29=((((($28)|(0)))/(44))&-1);
   var $30=(($15)|(0)) >= (($29)|(0));
   if ($30) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $ciidx=10;
   label = 3; break;
  case 3: 
   var $33=$ciidx;
   $i=$33;
   label = 4; break;
  case 4: 
   var $35=$i;
   var $36=(($35)|(0)) >= 0;
   if ($36) { label = 5; break; } else { label = 31; break; }
  case 5: 
   var $38=$i;
   var $39=$1;
   var $40=(($39+8)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($41+20)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43+((($38)*(44))&-1))|0);
   $ci=$44;
   $filename=((98268)|0);
   $line=-1;
   var $45=$ci;
   var $46=(($45+4)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$47;
   var $49=HEAP32[(($48)>>2)];
   var $50=$49 >>> 11;
   var $51=$50 & 2097151;
   var $52=$51 & 128;
   var $53=(($52)|(0))!=0;
   if ($53) { label = 6; break; } else { label = 7; break; }
  case 6: 
   label = 30; break;
  case 7: 
   var $56=$ci;
   var $57=(($56+4)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58+12)|0);
   var $60=$59;
   var $61=HEAP32[(($60)>>2)];
   $irep=$61;
   var $62=$irep;
   var $63=(($62+24)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64)|(0))!=0;
   if ($65) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $67=$irep;
   var $68=(($67+24)|0);
   var $69=HEAP32[(($68)>>2)];
   $filename=$69;
   label = 9; break;
  case 9: 
   var $71=$irep;
   var $72=(($71+28)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($73)|(0))!=0;
   if ($74) { label = 10; break; } else { label = 17; break; }
  case 10: 
   var $76=$i;
   var $77=((($76)+(1))|0);
   var $78=$ciidx;
   var $79=(($77)|(0)) <= (($78)|(0));
   if ($79) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $81=$i;
   var $82=((($81)+(1))|0);
   var $83=$1;
   var $84=(($83+8)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+20)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=(($87+((($82)*(44))&-1))|0);
   var $89=(($88+20)|0);
   var $90=HEAP32[(($89)>>2)];
   $pc=$90;
   label = 13; break;
  case 12: 
   var $92=$1;
   var $93=$1;
   var $94=(($93+16)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=$1;
   var $97=_mrb_intern2($96, ((95432)|0), 6);
   _mrb_obj_iv_get($3, $92, $95, $97);
   var $98=(($3)|0);
   var $99=$98;
   var $100=HEAP32[(($99)>>2)];
   var $101=$100;
   $pc=$101;
   label = 13; break;
  case 13: 
   var $103=$irep;
   var $104=(($103+12)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=$pc;
   var $107=(($105)>>>(0)) <= (($106)>>>(0));
   if ($107) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $109=$pc;
   var $110=$irep;
   var $111=(($110+12)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=$irep;
   var $114=(($113+32)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($112+($115<<2))|0);
   var $117=(($109)>>>(0)) < (($116)>>>(0));
   if ($117) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $119=$pc;
   var $120=$irep;
   var $121=(($120+12)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=$119;
   var $124=$122;
   var $125=((($123)-($124))|0);
   var $126=((((($125)|(0)))/(4))&-1);
   var $127=((($126)-(1))|0);
   var $128=$irep;
   var $129=(($128+28)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=(($130+($127<<1))|0);
   var $132=HEAP16[(($131)>>1)];
   var $133=(($132)&(65535));
   $line=$133;
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $137=$line;
   var $138=(($137)|(0))==-1;
   if ($138) { label = 19; break; } else { label = 20; break; }
  case 19: 
   label = 30; break;
  case 20: 
   var $141=$ci;
   var $142=(($141+28)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=$ci;
   var $145=(($144+4)|0);
   var $146=HEAP32[(($145)>>2)];
   var $147=(($146+16)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=(($143)|(0))==(($148)|(0));
   if ($149) { label = 21; break; } else { label = 22; break; }
  case 21: 
   $sep=((92800)|0);
   label = 23; break;
  case 22: 
   $sep=((90324)|0);
   label = 23; break;
  case 23: 
   var $153=$1;
   var $154=$ci;
   var $155=(($154)|0);
   var $156=HEAP16[(($155)>>1)];
   var $157=_mrb_sym2name($153, $156);
   $method=$157;
   var $158=$method;
   var $159=(($158)|(0))!=0;
   if ($159) { label = 24; break; } else { label = 28; break; }
  case 24: 
   var $161=$1;
   var $162=$ci;
   var $163=(($162+4)|0);
   var $164=HEAP32[(($163)>>2)];
   var $165=(($164+16)|0);
   var $166=HEAP32[(($165)>>2)];
   var $167=_mrb_class_name($161, $166);
   $cn=$167;
   var $168=$cn;
   var $169=(($168)|(0))!=0;
   if ($169) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $171=HEAP32[((_stderr)>>2)];
   var $172=$i;
   var $173=$filename;
   var $174=$line;
   var $175=$cn;
   var $176=$sep;
   var $177=$method;
   var $178=_fprintf($171, ((88924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$172,HEAP32[(((tempInt)+(4))>>2)]=$173,HEAP32[(((tempInt)+(8))>>2)]=$174,HEAP32[(((tempInt)+(12))>>2)]=$175,HEAP32[(((tempInt)+(16))>>2)]=$176,HEAP32[(((tempInt)+(20))>>2)]=$177,tempInt));
   label = 27; break;
  case 26: 
   var $180=HEAP32[((_stderr)>>2)];
   var $181=$i;
   var $182=$filename;
   var $183=$line;
   var $184=$method;
   var $185=_fprintf($180, ((87800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$181,HEAP32[(((tempInt)+(4))>>2)]=$182,HEAP32[(((tempInt)+(8))>>2)]=$183,HEAP32[(((tempInt)+(12))>>2)]=$184,tempInt));
   label = 27; break;
  case 27: 
   label = 29; break;
  case 28: 
   var $188=HEAP32[((_stderr)>>2)];
   var $189=$i;
   var $190=$filename;
   var $191=$line;
   var $192=_fprintf($188, ((86968)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$189,HEAP32[(((tempInt)+(4))>>2)]=$190,HEAP32[(((tempInt)+(8))>>2)]=$191,tempInt));
   label = 29; break;
  case 29: 
   label = 30; break;
  case 30: 
   var $195=$i;
   var $196=((($195)-(1))|0);
   $i=$196;
   label = 4; break;
  case 31: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_alloc_mt($h) {
 var label = 0;
 var $1;
 var $sz;
 var $p;
 $1=$h;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 $sz=$4;
 var $5=$1;
 var $6=(($5+36)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$sz;
 var $9=$8;
 var $10=((((($9)>>>(0)))/(4))&-1);
 var $11=$sz;
 var $12=((($11)*(6))&-1);
 var $13=((($10)+($12))|0);
 var $14=_mrb_malloc($7, $13);
 $p=$14;
 var $15=$1;
 var $16=(($15+8)|0);
 HEAP32[(($16)>>2)]=0;
 var $17=$1;
 var $18=(($17+4)|0);
 HEAP32[(($18)>>2)]=0;
 var $19=$sz;
 var $20=$19 >>> 2;
 var $21=$sz;
 var $22=$21 >>> 1;
 var $23=$20 | $22;
 var $24=$1;
 var $25=(($24+12)|0);
 HEAP32[(($25)>>2)]=$23;
 var $26=$p;
 var $27=$26;
 var $28=$1;
 var $29=(($28+20)|0);
 HEAP32[(($29)>>2)]=$27;
 var $30=$p;
 var $31=$sz;
 var $32=($31<<1);
 var $33=(($30+$32)|0);
 var $34=$33;
 var $35=$1;
 var $36=(($35+24)|0);
 HEAP32[(($36)>>2)]=$34;
 var $37=$p;
 var $38=$sz;
 var $39=($38<<1);
 var $40=(($37+$39)|0);
 var $41=$sz;
 var $42=($41<<2);
 var $43=(($40+$42)|0);
 var $44=$1;
 var $45=(($44+16)|0);
 HEAP32[(($45)>>2)]=$43;
 var $46=$1;
 var $47=(($46+16)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=$sz;
 var $50=((((($49)>>>(0)))/(4))&-1);
 _kh_fill_flags773($48, -86, $50);
 var $51=$sz;
 var $52=((($51)-(1))|0);
 var $53=$1;
 var $54=(($53+28)|0);
 HEAP32[(($54)>>2)]=$52;
 var $55=$sz;
 var $56=((((($55)>>>(0)))/(2))&-1);
 var $57=((($56)-(1))|0);
 var $58=$1;
 var $59=(($58+32)|0);
 HEAP32[(($59)>>2)]=$57;
 return;
}
function _kh_init_mt_size($mrb, $size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $h;
   $1=$mrb;
   $2=$size;
   var $3=$1;
   var $4=_mrb_calloc($3, 1, 40);
   var $5=$4;
   $h=$5;
   var $6=$2;
   var $7=(($6)>>>(0)) < 8;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $2=8;
   label = 3; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $11=$2;
   var $12=((($11)-(1))|0);
   $2=$12;
   var $13=$2;
   var $14=$13 >>> 1;
   var $15=$2;
   var $16=$15 | $14;
   $2=$16;
   var $17=$2;
   var $18=$17 >>> 2;
   var $19=$2;
   var $20=$19 | $18;
   $2=$20;
   var $21=$2;
   var $22=$21 >>> 4;
   var $23=$2;
   var $24=$23 | $22;
   $2=$24;
   var $25=$2;
   var $26=$25 >>> 8;
   var $27=$2;
   var $28=$27 | $26;
   $2=$28;
   var $29=$2;
   var $30=$29 >>> 16;
   var $31=$2;
   var $32=$31 | $30;
   $2=$32;
   var $33=$2;
   var $34=((($33)+(1))|0);
   $2=$34;
   label = 5; break;
  case 5: 
   var $36=$2;
   var $37=$h;
   var $38=(($37)|0);
   HEAP32[(($38)>>2)]=$36;
   var $39=$1;
   var $40=$h;
   var $41=(($40+36)|0);
   HEAP32[(($41)>>2)]=$39;
   var $42=$h;
   _kh_alloc_mt($42);
   var $43=$h;
   return $43;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_init_mt($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=_kh_init_mt_size($2, 32);
 return $3;
}
function _kh_destroy_mt($h) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$h;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $5=$1;
   var $6=(($5+36)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$1;
   var $9=(($8+20)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$10;
   _mrb_free($7, $11);
   var $12=$1;
   var $13=(($12+36)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$1;
   var $16=$15;
   _mrb_free($14, $16);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_get_mt($h, $key) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $k;
   $2=$h;
   $3=$key;
   var $4=$3;
   var $5=(($4 << 16) >> 16);
   var $6=$3;
   var $7=(($6 << 16) >> 16);
   var $8=$7 << 2;
   var $9=$5 ^ $8;
   var $10=$3;
   var $11=(($10 << 16) >> 16);
   var $12=$11 >> 2;
   var $13=$9 ^ $12;
   var $14=$2;
   var $15=(($14+28)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$13 & $16;
   $k=$17;
   label = 2; break;
  case 2: 
   var $19=$k;
   var $20=((((($19)>>>(0)))/(4))&-1);
   var $21=$2;
   var $22=(($21+16)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23+$20)|0);
   var $25=HEAP8[($24)];
   var $26=(($25)&(255));
   var $27=$k;
   var $28=((((($27)>>>(0)))%(4))&-1);
   var $29=((106172+$28)|0);
   var $30=HEAP8[($29)];
   var $31=(($30)&(255));
   var $32=$26 & $31;
   var $33=(($32)|(0))!=0;
   var $34=$33 ^ 1;
   if ($34) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $36=$k;
   var $37=((((($36)>>>(0)))/(4))&-1);
   var $38=$2;
   var $39=(($38+16)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40+$37)|0);
   var $42=HEAP8[($41)];
   var $43=(($42)&(255));
   var $44=$k;
   var $45=((((($44)>>>(0)))%(4))&-1);
   var $46=((106252+$45)|0);
   var $47=HEAP8[($46)];
   var $48=(($47)&(255));
   var $49=$43 & $48;
   var $50=(($49)|(0))!=0;
   if ($50) { label = 7; break; } else { label = 4; break; }
  case 4: 
   var $52=$k;
   var $53=$2;
   var $54=(($53+20)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+($52<<1))|0);
   var $57=HEAP16[(($56)>>1)];
   var $58=(($57 << 16) >> 16);
   var $59=$3;
   var $60=(($59 << 16) >> 16);
   var $61=(($58)|(0))==(($60)|(0));
   if ($61) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $63=$k;
   $1=$63;
   label = 9; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $66=$k;
   var $67=$2;
   var $68=(($67+32)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=((($66)+($69))|0);
   var $71=$2;
   var $72=(($71+28)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=$70 & $73;
   $k=$74;
   label = 2; break;
  case 8: 
   var $76=$2;
   var $77=(($76)|0);
   var $78=HEAP32[(($77)>>2)];
   $1=$78;
   label = 9; break;
  case 9: 
   var $80=$1;
   return $80;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_del_mt($h, $x) {
 var label = 0;
 var $1;
 var $2;
 $1=$h;
 $2=$x;
 var $3=$2;
 var $4=((((($3)>>>(0)))%(4))&-1);
 var $5=((106252+$4)|0);
 var $6=HEAP8[($5)];
 var $7=(($6)&(255));
 var $8=$2;
 var $9=((((($8)>>>(0)))/(4))&-1);
 var $10=$1;
 var $11=(($10+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+$9)|0);
 var $14=HEAP8[($13)];
 var $15=(($14)&(255));
 var $16=$15 | $7;
 var $17=(($16) & 255);
 HEAP8[($13)]=$17;
 var $18=$1;
 var $19=(($18+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=((($20)-(1))|0);
 HEAP32[(($19)>>2)]=$21;
 return;
}
function _mrb_gc_mark_mt_size($mrb, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $h;
   $2=$mrb;
   $3=$c;
   var $4=$3;
   var $5=(($4+16)|0);
   var $6=HEAP32[(($5)>>2)];
   $h=$6;
   var $7=$h;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 4; break;
  case 3: 
   var $11=$h;
   var $12=(($11+4)|0);
   var $13=HEAP32[(($12)>>2)];
   $1=$13;
   label = 4; break;
  case 4: 
   var $15=$1;
   return $15;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_resize_mt($h, $new_n_buckets) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $old_ed_flags;
   var $old_keys;
   var $old_vals;
   var $old_n_buckets;
   var $i;
   var $k;
   $1=$h;
   $2=$new_n_buckets;
   var $3=$2;
   var $4=(($3)>>>(0)) < 8;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $2=8;
   label = 3; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $8=$2;
   var $9=((($8)-(1))|0);
   $2=$9;
   var $10=$2;
   var $11=$10 >>> 1;
   var $12=$2;
   var $13=$12 | $11;
   $2=$13;
   var $14=$2;
   var $15=$14 >>> 2;
   var $16=$2;
   var $17=$16 | $15;
   $2=$17;
   var $18=$2;
   var $19=$18 >>> 4;
   var $20=$2;
   var $21=$20 | $19;
   $2=$21;
   var $22=$2;
   var $23=$22 >>> 8;
   var $24=$2;
   var $25=$24 | $23;
   $2=$25;
   var $26=$2;
   var $27=$26 >>> 16;
   var $28=$2;
   var $29=$28 | $27;
   $2=$29;
   var $30=$2;
   var $31=((($30)+(1))|0);
   $2=$31;
   label = 5; break;
  case 5: 
   var $33=$1;
   var $34=(($33+16)|0);
   var $35=HEAP32[(($34)>>2)];
   $old_ed_flags=$35;
   var $36=$1;
   var $37=(($36+20)|0);
   var $38=HEAP32[(($37)>>2)];
   $old_keys=$38;
   var $39=$1;
   var $40=(($39+24)|0);
   var $41=HEAP32[(($40)>>2)];
   $old_vals=$41;
   var $42=$1;
   var $43=(($42)|0);
   var $44=HEAP32[(($43)>>2)];
   $old_n_buckets=$44;
   var $45=$2;
   var $46=$1;
   var $47=(($46)|0);
   HEAP32[(($47)>>2)]=$45;
   var $48=$1;
   _kh_alloc_mt($48);
   $i=0;
   label = 6; break;
  case 6: 
   var $50=$i;
   var $51=$old_n_buckets;
   var $52=(($50)>>>(0)) < (($51)>>>(0));
   if ($52) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $54=$i;
   var $55=((((($54)>>>(0)))/(4))&-1);
   var $56=$old_ed_flags;
   var $57=(($56+$55)|0);
   var $58=HEAP8[($57)];
   var $59=(($58)&(255));
   var $60=$i;
   var $61=((((($60)>>>(0)))%(4))&-1);
   var $62=((106204+$61)|0);
   var $63=HEAP8[($62)];
   var $64=(($63)&(255));
   var $65=$59 & $64;
   var $66=(($65)|(0))!=0;
   if ($66) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $68=$1;
   var $69=$i;
   var $70=$old_keys;
   var $71=(($70+($69<<1))|0);
   var $72=HEAP16[(($71)>>1)];
   var $73=_kh_put_mt($68, $72);
   $k=$73;
   var $74=$i;
   var $75=$old_vals;
   var $76=(($75+($74<<2))|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=$k;
   var $79=$1;
   var $80=(($79+24)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($81+($78<<2))|0);
   HEAP32[(($82)>>2)]=$77;
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $85=$i;
   var $86=((($85)+(1))|0);
   $i=$86;
   label = 6; break;
  case 11: 
   var $88=$1;
   var $89=(($88+36)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=$old_keys;
   var $92=$91;
   _mrb_free($90, $92);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_put_mt($h, $key) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $k;
   $1=$h;
   $2=$key;
   var $3=$1;
   var $4=(($3+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$1;
   var $7=(($6+12)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($5)>>>(0)) >= (($8)>>>(0));
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$1;
   var $12=$1;
   var $13=(($12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=($14<<1);
   _kh_resize_mt($11, $15);
   label = 3; break;
  case 3: 
   var $17=$2;
   var $18=(($17 << 16) >> 16);
   var $19=$2;
   var $20=(($19 << 16) >> 16);
   var $21=$20 << 2;
   var $22=$18 ^ $21;
   var $23=$2;
   var $24=(($23 << 16) >> 16);
   var $25=$24 >> 2;
   var $26=$22 ^ $25;
   var $27=$1;
   var $28=(($27+28)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$26 & $29;
   $k=$30;
   label = 4; break;
  case 4: 
   var $32=$k;
   var $33=((((($32)>>>(0)))/(4))&-1);
   var $34=$1;
   var $35=(($34+16)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36+$33)|0);
   var $38=HEAP8[($37)];
   var $39=(($38)&(255));
   var $40=$k;
   var $41=((((($40)>>>(0)))%(4))&-1);
   var $42=((106204+$41)|0);
   var $43=HEAP8[($42)];
   var $44=(($43)&(255));
   var $45=$39 & $44;
   var $46=(($45)|(0))!=0;
   var $47=$46 ^ 1;
   if ($47) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $49=$k;
   var $50=$1;
   var $51=(($50+20)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52+($49<<1))|0);
   var $54=HEAP16[(($53)>>1)];
   var $55=(($54 << 16) >> 16);
   var $56=$2;
   var $57=(($56 << 16) >> 16);
   var $58=(($55)|(0))==(($57)|(0));
   if ($58) { label = 6; break; } else { label = 7; break; }
  case 6: 
   label = 8; break;
  case 7: 
   var $61=$k;
   var $62=$1;
   var $63=(($62+32)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=((($61)+($64))|0);
   var $66=$1;
   var $67=(($66+28)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=$65 & $68;
   $k=$69;
   label = 4; break;
  case 8: 
   var $71=$k;
   var $72=((((($71)>>>(0)))/(4))&-1);
   var $73=$1;
   var $74=(($73+16)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($75+$72)|0);
   var $77=HEAP8[($76)];
   var $78=(($77)&(255));
   var $79=$k;
   var $80=((((($79)>>>(0)))%(4))&-1);
   var $81=((106172+$80)|0);
   var $82=HEAP8[($81)];
   var $83=(($82)&(255));
   var $84=$78 & $83;
   var $85=(($84)|(0))!=0;
   if ($85) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $87=$2;
   var $88=$k;
   var $89=$1;
   var $90=(($89+20)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=(($91+($88<<1))|0);
   HEAP16[(($92)>>1)]=$87;
   var $93=$k;
   var $94=((((($93)>>>(0)))%(4))&-1);
   var $95=((106172+$94)|0);
   var $96=HEAP8[($95)];
   var $97=(($96)&(255));
   var $98=$97 ^ -1;
   var $99=$k;
   var $100=((((($99)>>>(0)))/(4))&-1);
   var $101=$1;
   var $102=(($101+16)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=(($103+$100)|0);
   var $105=HEAP8[($104)];
   var $106=(($105)&(255));
   var $107=$106 & $98;
   var $108=(($107) & 255);
   HEAP8[($104)]=$108;
   var $109=$1;
   var $110=(($109+4)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=((($111)+(1))|0);
   HEAP32[(($110)>>2)]=$112;
   var $113=$1;
   var $114=(($113+8)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=((($115)+(1))|0);
   HEAP32[(($114)>>2)]=$116;
   label = 13; break;
  case 10: 
   var $118=$k;
   var $119=((((($118)>>>(0)))/(4))&-1);
   var $120=$1;
   var $121=(($120+16)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=(($122+$119)|0);
   var $124=HEAP8[($123)];
   var $125=(($124)&(255));
   var $126=$k;
   var $127=((((($126)>>>(0)))%(4))&-1);
   var $128=((106252+$127)|0);
   var $129=HEAP8[($128)];
   var $130=(($129)&(255));
   var $131=$125 & $130;
   var $132=(($131)|(0))!=0;
   if ($132) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $134=$2;
   var $135=$k;
   var $136=$1;
   var $137=(($136+20)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(($138+($135<<1))|0);
   HEAP16[(($139)>>1)]=$134;
   var $140=$k;
   var $141=((((($140)>>>(0)))%(4))&-1);
   var $142=((106252+$141)|0);
   var $143=HEAP8[($142)];
   var $144=(($143)&(255));
   var $145=$144 ^ -1;
   var $146=$k;
   var $147=((((($146)>>>(0)))/(4))&-1);
   var $148=$1;
   var $149=(($148+16)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=(($150+$147)|0);
   var $152=HEAP8[($151)];
   var $153=(($152)&(255));
   var $154=$153 & $145;
   var $155=(($154) & 255);
   HEAP8[($151)]=$155;
   var $156=$1;
   var $157=(($156+4)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=((($158)+(1))|0);
   HEAP32[(($157)>>2)]=$159;
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $162=$k;
   return $162;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_copy_mt($mrb, $h) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $h2;
   var $k;
   var $k2;
   $1=$mrb;
   $2=$h;
   var $3=$1;
   var $4=_kh_init_mt($3);
   $h2=$4;
   $k=0;
   label = 2; break;
  case 2: 
   var $6=$k;
   var $7=$2;
   var $8=(($7)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($6)|(0))!=(($9)|(0));
   if ($10) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $12=$k;
   var $13=((((($12)>>>(0)))/(4))&-1);
   var $14=$2;
   var $15=(($14+16)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16+$13)|0);
   var $18=HEAP8[($17)];
   var $19=(($18)&(255));
   var $20=$k;
   var $21=((((($20)>>>(0)))%(4))&-1);
   var $22=((106204+$21)|0);
   var $23=HEAP8[($22)];
   var $24=(($23)&(255));
   var $25=$19 & $24;
   var $26=(($25)|(0))!=0;
   if ($26) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $28=$h2;
   var $29=$k;
   var $30=$2;
   var $31=(($30+20)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32+($29<<1))|0);
   var $34=HEAP16[(($33)>>1)];
   var $35=_kh_put_mt($28, $34);
   $k2=$35;
   var $36=$k;
   var $37=$2;
   var $38=(($37+24)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39+($36<<2))|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$k2;
   var $43=$h2;
   var $44=(($43+24)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($45+($42<<2))|0);
   HEAP32[(($46)>>2)]=$41;
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $49=$k;
   var $50=((($49)+(1))|0);
   $k=$50;
   label = 2; break;
  case 7: 
   var $52=$h2;
   return $52;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_gc_mark_mt($mrb, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $k;
   var $h;
   var $m;
   $1=$mrb;
   $2=$c;
   var $3=$2;
   var $4=(($3+16)|0);
   var $5=HEAP32[(($4)>>2)];
   $h=$5;
   var $6=$h;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 11; break;
  case 3: 
   $k=0;
   label = 4; break;
  case 4: 
   var $11=$k;
   var $12=$h;
   var $13=(($12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($11)|(0))!=(($14)|(0));
   if ($15) { label = 5; break; } else { label = 11; break; }
  case 5: 
   var $17=$k;
   var $18=((((($17)>>>(0)))/(4))&-1);
   var $19=$h;
   var $20=(($19+16)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21+$18)|0);
   var $23=HEAP8[($22)];
   var $24=(($23)&(255));
   var $25=$k;
   var $26=((((($25)>>>(0)))%(4))&-1);
   var $27=((106204+$26)|0);
   var $28=HEAP8[($27)];
   var $29=(($28)&(255));
   var $30=$24 & $29;
   var $31=(($30)|(0))!=0;
   if ($31) { label = 9; break; } else { label = 6; break; }
  case 6: 
   var $33=$k;
   var $34=$h;
   var $35=(($34+24)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36+($33<<2))|0);
   var $38=HEAP32[(($37)>>2)];
   $m=$38;
   var $39=$m;
   var $40=(($39)|(0))!=0;
   if ($40) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $42=$1;
   var $43=$m;
   var $44=$43;
   _mrb_gc_mark($42, $44);
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $48=$k;
   var $49=((($48)+(1))|0);
   $k=$49;
   label = 4; break;
  case 11: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_gc_free_mt($mrb, $c) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$c;
 var $3=$2;
 var $4=(($3+16)|0);
 var $5=HEAP32[(($4)>>2)];
 _kh_destroy_mt($5);
 return;
}
function _mrb_name_class($mrb, $c, $name) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4=sp;
 $1=$mrb;
 $2=$c;
 $3=$name;
 var $5=$1;
 var $6=$2;
 var $7=$6;
 var $8=$1;
 var $9=_mrb_intern2($8, ((88912)|0), 11);
 var $10=$3;
 _mrb_symbol_value774($4, $10);
 _mrb_obj_iv_set($5, $7, $9, $4);
 STACKTOP = sp;
 return;
}
function _mrb_symbol_value774($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=4;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP16[(($6)>>1)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_define_module_id($mrb, $name) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $m;
 var $3=sp;
 $1=$mrb;
 $2=$name;
 var $4=$1;
 var $5=_mrb_module_new($4);
 $m=$5;
 var $6=$1;
 var $7=$1;
 var $8=(($7+44)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 var $11=$2;
 var $12=$m;
 var $13=$12;
 _mrb_obj_value775($3, $13);
 _mrb_obj_iv_set($6, $10, $11, $3);
 var $14=$1;
 var $15=$m;
 var $16=$2;
 _mrb_name_class($14, $15, $16);
 var $17=$m;
 STACKTOP = sp;
 return $17;
}
function _mrb_module_new($mrb) {
 var label = 0;
 var $1;
 var $m;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=(($3+52)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_mrb_obj_alloc($2, 10, $5);
 var $7=$6;
 $m=$7;
 var $8=$1;
 var $9=_kh_init_mt($8);
 var $10=$m;
 var $11=(($10+16)|0);
 HEAP32[(($11)>>2)]=$9;
 var $12=$m;
 return $12;
}
function _mrb_obj_value775($agg_result, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   var $b;
   $1=$p;
   var $2=$1;
   var $3=$2;
   $b=$3;
   label = 2; break;
  case 2: 
   var $5=$b;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 255;
   var $9=(($v+8)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=$1;
   var $11=(($v)|0);
   var $12=$11;
   HEAP32[(($12)>>2)]=$10;
   label = 3; break;
  case 3: 
   var $14=$agg_result;
   var $15=$v;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_define_module($mrb, $name) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$name;
 var $3=$1;
 var $4=$1;
 var $5=$2;
 var $6=_mrb_intern_cstr($4, $5);
 var $7=_mrb_define_module_id($3, $6);
 return $7;
}
function _mrb_class_outer_module($mrb, $c) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $outer=sp;
   var $4=(sp)+(12);
   $2=$mrb;
   $3=$c;
   var $5=$2;
   var $6=$3;
   var $7=$6;
   var $8=$2;
   var $9=_mrb_intern2($8, ((102420)|0), 9);
   _mrb_obj_iv_get($4, $5, $7, $9);
   var $10=$outer;
   var $11=$4;
   assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
   var $12=(($outer+8)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))==0;
   if ($14) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $16=(($outer)|0);
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18)|(0))!=0;
   if ($19) { label = 4; break; } else { label = 3; break; }
  case 3: 
   $1=0;
   label = 5; break;
  case 4: 
   var $22=(($outer)|0);
   var $23=$22;
   var $24=HEAP32[(($23)>>2)];
   var $25=$24;
   $1=$25;
   label = 5; break;
  case 5: 
   var $27=$1;
   STACKTOP = sp;
   return $27;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_vm_define_module($mrb, $outer, $id) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $outer; $outer = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($outer)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($outer)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($outer)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   var $v=sp;
   var $3=(sp)+(12);
   $1=$mrb;
   $2=$id;
   var $4=$1;
   var $5=$2;
   var $6=_mrb_const_defined($4, $outer, $5);
   var $7=(($6 << 24) >> 24)!=0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$1;
   var $10=$2;
   _mrb_const_get($3, $9, $outer, $10);
   var $11=$v;
   var $12=$3;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   var $13=(($v)|0);
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15;
   $c=$16;
   label = 4; break;
  case 3: 
   var $18=$1;
   var $19=_mrb_module_new($18);
   $c=$19;
   var $20=$1;
   var $21=$c;
   var $22=$2;
   _setup_class($20, $outer, $21, $22);
   label = 4; break;
  case 4: 
   var $24=$c;
   STACKTOP = sp;
   return $24;
  default: assert(0, "bad label: " + label);
 }
}
function _setup_class($mrb, $outer, $c, $id) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $outer; $outer = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($outer)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($outer)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($outer)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 var $3;
 var $4=sp;
 $1=$mrb;
 $2=$c;
 $3=$id;
 var $5=$1;
 var $6=$2;
 var $7=$3;
 _mrb_name_class($5, $6, $7);
 var $8=$1;
 var $9=$3;
 var $10=$2;
 var $11=$10;
 _mrb_obj_value775($4, $11);
 _mrb_const_set($8, $outer, $9, $4);
 var $12=$1;
 var $13=$2;
 var $14=$13;
 var $15=$1;
 var $16=_mrb_intern2($15, ((102420)|0), 9);
 _mrb_obj_iv_set($12, $14, $16, $outer);
 STACKTOP = sp;
 return;
}
function _mrb_define_class_id($mrb, $name, $super) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $c;
 var $4=sp;
 $1=$mrb;
 $2=$name;
 $3=$super;
 var $5=$1;
 var $6=$3;
 var $7=_mrb_class_new($5, $6);
 $c=$7;
 var $8=$1;
 var $9=$1;
 var $10=(($9+44)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$11;
 var $13=$2;
 var $14=$c;
 var $15=$14;
 _mrb_obj_value775($4, $15);
 _mrb_obj_iv_set($8, $12, $13, $4);
 var $16=$1;
 var $17=$c;
 var $18=$2;
 _mrb_name_class($16, $17, $18);
 var $19=$c;
 STACKTOP = sp;
 return $19;
}
function _mrb_class_real($cl) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$cl;
   label = 2; break;
  case 2: 
   var $3=$1;
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5 & 255;
   var $7=(($6)|(0))==12;
   if ($7) { var $15 = 1;label = 4; break; } else { label = 3; break; }
  case 3: 
   var $9=$1;
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=$11 & 255;
   var $13=(($12)|(0))==11;
   var $15 = $13;label = 4; break;
  case 4: 
   var $15;
   if ($15) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $17=$1;
   var $18=(($17+20)|0);
   var $19=HEAP32[(($18)>>2)];
   $1=$19;
   label = 2; break;
  case 6: 
   var $21=$1;
   return $21;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_class_new($mrb, $super) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   $1=$mrb;
   $2=$super;
   var $3=$2;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$1;
   var $7=$2;
   _mrb_check_inheritable($6, $7);
   label = 3; break;
  case 3: 
   var $9=$1;
   var $10=$2;
   var $11=_boot_defclass($9, $10);
   $c=$11;
   var $12=$2;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $15=$c;
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $18=$17 >>> 11;
   var $19=$18 & 2097151;
   var $20=$19 & -256;
   var $21=$2;
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=$23 >>> 11;
   var $25=$24 & 2097151;
   var $26=$25 & 255;
   var $27=(($26) & 255);
   var $28=(($27 << 24) >> 24);
   var $29=$20 | $28;
   var $30=$c;
   var $31=$29 & 2097151;
   var $32=$30;
   var $33=$31 & 2097151;
   var $34=$33 << 11;
   var $35=HEAP32[(($32)>>2)];
   var $36=$35 & 2047;
   var $37=$36 | $34;
   HEAP32[(($32)>>2)]=$37;
   label = 5; break;
  case 5: 
   var $39=$1;
   var $40=$c;
   var $41=$40;
   _prepare_singleton_class($39, $41);
   var $42=$c;
   return $42;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_define_class($mrb, $name, $super) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$mrb;
 $2=$name;
 $3=$super;
 var $4=$1;
 var $5=$1;
 var $6=$2;
 var $7=_mrb_intern_cstr($5, $6);
 var $8=$3;
 var $9=_mrb_define_class_id($4, $7, $8);
 return $9;
}
function _mrb_vm_define_class($mrb, $outer, $super, $id) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $outer; $outer = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($outer)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($outer)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($outer)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $super; $super = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($super)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($super)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($super)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $c;
   var $s;
   var $v=sp;
   var $4=(sp)+(12);
   var $5=(sp)+(24);
   var $6=(sp)+(36);
   var $7=(sp)+(48);
   $2=$mrb;
   $3=$id;
   var $8=$2;
   var $9=$3;
   var $10=_mrb_const_defined($8, $outer, $9);
   var $11=(($10 << 24) >> 24)!=0;
   if ($11) { label = 2; break; } else { label = 11; break; }
  case 2: 
   var $13=$2;
   var $14=$3;
   _mrb_const_get($v, $13, $outer, $14);
   var $15=$2;
   _mrb_check_type($15, $v, 9);
   var $16=(($v)|0);
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   var $19=$18;
   $c=$19;
   var $20=(($super+8)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21)|(0))==0;
   if ($22) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $24=(($super)|0);
   var $25=$24;
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|(0))!=0;
   if ($27) { label = 4; break; } else { label = 10; break; }
  case 4: 
   var $29=(($super+8)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30)|(0))!=9;
   if ($31) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $33=$2;
   var $34=$2;
   var $35=_mrb_class_get($34, ((98236)|0));
   _mrb_raisef($33, $35, ((95356)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($super)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($super)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($super)+(8))>>2)],tempInt));
   label = 6; break;
  case 6: 
   var $37=$c;
   var $38=(($37+20)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39)|(0))!=0;
   if ($40) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $42=(($super)|0);
   var $43=$42;
   var $44=HEAP32[(($43)>>2)];
   var $45=$44;
   var $46=$c;
   var $47=(($46+20)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=_mrb_class_real($48);
   var $50=(($45)|(0))!=(($49)|(0));
   if ($50) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $52=$2;
   var $53=$2;
   var $54=_mrb_class_get($53, ((98236)|0));
   var $55=$2;
   var $56=$3;
   _mrb_sym2str($4, $55, $56);
   _mrb_raisef($52, $54, ((92740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],tempInt));
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $59=$c;
   $1=$59;
   label = 18; break;
  case 11: 
   var $61=(($super+8)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62)|(0))==0;
   if ($63) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $65=(($super)|0);
   var $66=$65;
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67)|(0))!=0;
   if ($68) { label = 13; break; } else { label = 16; break; }
  case 13: 
   var $70=(($super+8)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($71)|(0))!=9;
   if ($72) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $74=$2;
   var $75=$2;
   var $76=_mrb_class_get($75, ((98236)|0));
   _mrb_raisef($74, $76, ((95356)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($super)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($super)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($super)+(8))>>2)],tempInt));
   label = 15; break;
  case 15: 
   var $78=(($super)|0);
   var $79=$78;
   var $80=HEAP32[(($79)>>2)];
   var $81=$80;
   $s=$81;
   label = 17; break;
  case 16: 
   var $83=$2;
   var $84=(($83+44)|0);
   var $85=HEAP32[(($84)>>2)];
   $s=$85;
   label = 17; break;
  case 17: 
   var $87=$2;
   var $88=$s;
   var $89=_mrb_class_new($87, $88);
   $c=$89;
   var $90=$2;
   var $91=$c;
   var $92=$3;
   _setup_class($90, $outer, $91, $92);
   var $93=$2;
   var $94=$s;
   var $95=$94;
   _mrb_obj_value775($5, $95);
   var $96=$c;
   var $97=$96;
   _mrb_obj_value775($6, $97);
   _mrb_funcall($7, $93, $5, ((90236)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($6)+(8))>>2)],tempInt));
   var $98=$c;
   $1=$98;
   label = 18; break;
  case 18: 
   var $100=$1;
   STACKTOP = sp;
   return $100;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_class_get($mrb, $name) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$name;
 var $3=$1;
 var $4=$1;
 var $5=(($4+44)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$2;
 var $8=_mrb_class_get_under($3, $6, $7);
 return $8;
}
function _mrb_class_get_under($mrb, $outer, $name) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$mrb;
 $2=$outer;
 $3=$name;
 var $4=$1;
 var $5=$2;
 var $6=$1;
 var $7=$3;
 var $8=_mrb_intern_cstr($6, $7);
 var $9=_class_from_sym($4, $5, $8);
 return $9;
}
function _class_from_sym($mrb, $klass, $id) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $c=sp;
   var $4=(sp)+(12);
   var $5=(sp)+(24);
   $1=$mrb;
   $2=$klass;
   $3=$id;
   var $6=$1;
   var $7=$2;
   var $8=$7;
   _mrb_obj_value775($4, $8);
   var $9=$3;
   _mrb_const_get($c, $6, $4, $9);
   var $10=(($c+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))!=10;
   if ($12) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $14=(($c+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))!=9;
   if ($16) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $18=$1;
   var $19=$1;
   var $20=_mrb_class_get($19, ((98236)|0));
   var $21=$1;
   var $22=$3;
   _mrb_sym2str($5, $21, $22);
   _mrb_raisef($18, $20, ((105624)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($5)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
   label = 4; break;
  case 4: 
   var $24=(($c)|0);
   var $25=$24;
   var $26=HEAP32[(($25)>>2)];
   var $27=$26;
   STACKTOP = sp;
   return $27;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_define_class_under($mrb, $outer, $name, $super) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $c;
   var $id;
   var $6=sp;
   $2=$mrb;
   $3=$outer;
   $4=$name;
   $5=$super;
   var $7=$2;
   var $8=$4;
   var $9=_mrb_intern_cstr($7, $8);
   $id=$9;
   var $10=$2;
   var $11=$3;
   var $12=$id;
   var $13=_mrb_const_defined_at($10, $11, $12);
   var $14=(($13)|(0))!=0;
   if ($14) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $16=$2;
   var $17=$3;
   var $18=$id;
   var $19=_class_from_sym($16, $17, $18);
   $c=$19;
   var $20=$c;
   var $21=(($20+20)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=_mrb_class_real($22);
   var $24=$5;
   var $25=(($23)|(0))!=(($24)|(0));
   if ($25) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $27=$2;
   var $28=$id;
   var $29=$4;
   _mrb_name_error($27, $28, ((88888)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$29,tempInt));
   label = 4; break;
  case 4: 
   var $31=$c;
   $1=$31;
   label = 8; break;
  case 5: 
   var $33=$5;
   var $34=(($33)|(0))!=0;
   if ($34) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $36=$2;
   var $37=$3;
   var $38=$4;
   _mrb_warn($36, ((87756)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$37,HEAP32[(((tempInt)+(4))>>2)]=$38,tempInt));
   label = 7; break;
  case 7: 
   var $40=$2;
   var $41=$5;
   var $42=_mrb_class_new($40, $41);
   $c=$42;
   var $43=$2;
   var $44=$3;
   var $45=$44;
   _mrb_obj_value775($6, $45);
   var $46=$c;
   var $47=$id;
   _setup_class($43, $6, $46, $47);
   var $48=$c;
   $1=$48;
   label = 8; break;
  case 8: 
   var $50=$1;
   STACKTOP = sp;
   return $50;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_define_method_raw($mrb, $c, $mid, $p) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $h;
   var $k;
   $1=$mrb;
   $2=$c;
   $3=$mid;
   $4=$p;
   var $5=$2;
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   $h=$7;
   var $8=$h;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=$1;
   var $12=_kh_init_mt($11);
   var $13=$2;
   var $14=(($13+16)|0);
   HEAP32[(($14)>>2)]=$12;
   $h=$12;
   label = 3; break;
  case 3: 
   var $16=$h;
   var $17=$3;
   var $18=_kh_put_mt($16, $17);
   $k=$18;
   var $19=$4;
   var $20=$k;
   var $21=$h;
   var $22=(($21+24)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23+($20<<2))|0);
   HEAP32[(($24)>>2)]=$19;
   var $25=$4;
   var $26=(($25)|(0))!=0;
   if ($26) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $28=$1;
   var $29=$2;
   var $30=$29;
   var $31=$4;
   var $32=$31;
   _mrb_field_write_barrier($28, $30, $32);
   label = 5; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_define_method_id($mrb, $c, $mid, $func, $aspec) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $p;
 var $ai;
 $1=$mrb;
 $2=$c;
 $3=$mid;
 $4=$func;
 $5=$aspec;
 var $6=$1;
 var $7=_mrb_gc_arena_save($6);
 $ai=$7;
 var $8=$1;
 var $9=$4;
 var $10=_mrb_proc_new_cfunc($8, $9);
 $p=$10;
 var $11=$2;
 var $12=$p;
 var $13=(($12+16)|0);
 HEAP32[(($13)>>2)]=$11;
 var $14=$1;
 var $15=$2;
 var $16=$3;
 var $17=$p;
 _mrb_define_method_raw($14, $15, $16, $17);
 var $18=$1;
 var $19=$ai;
 _mrb_gc_arena_restore($18, $19);
 return;
}
function _mrb_define_method($mrb, $c, $name, $func, $aspec) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$mrb;
 $2=$c;
 $3=$name;
 $4=$func;
 $5=$aspec;
 var $6=$1;
 var $7=$2;
 var $8=$1;
 var $9=$3;
 var $10=_mrb_intern_cstr($8, $9);
 var $11=$4;
 var $12=$5;
 _mrb_define_method_id($6, $7, $10, $11, $12);
 return;
}
function _mrb_define_method_vm($mrb, $c, $name, $body) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $body; $body = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($body)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($body)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($body)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $h;
   var $k;
   var $p;
   $1=$mrb;
   $2=$c;
   $3=$name;
   var $4=$2;
   var $5=(($4+16)|0);
   var $6=HEAP32[(($5)>>2)];
   $h=$6;
   var $7=$h;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=$1;
   var $11=_kh_init_mt($10);
   var $12=$2;
   var $13=(($12+16)|0);
   HEAP32[(($13)>>2)]=$11;
   $h=$11;
   label = 3; break;
  case 3: 
   var $15=$h;
   var $16=$3;
   var $17=_kh_put_mt($15, $16);
   $k=$17;
   var $18=(($body)|0);
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $21=$20;
   $p=$21;
   var $22=$p;
   var $23=$k;
   var $24=$h;
   var $25=(($24+24)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26+($23<<2))|0);
   HEAP32[(($27)>>2)]=$22;
   var $28=$p;
   var $29=(($28)|(0))!=0;
   if ($29) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $31=$1;
   var $32=$2;
   var $33=$32;
   var $34=$p;
   var $35=$34;
   _mrb_field_write_barrier($31, $33, $35);
   label = 5; break;
  case 5: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_get_args($mrb, $format, varrp) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 224)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c=sp;
   var $i;
   var $sp;
   var $ap=(sp)+(4);
   var $argc;
   var $opt;
   var $a;
   var $p;
   var $p1;
   var $3=(sp)+(8);
   var $p2;
   var $4=(sp)+(20);
   var $p3;
   var $5=(sp)+(32);
   var $ss=(sp)+(44);
   var $s;
   var $ps;
   var $pl;
   var $6=(sp)+(56);
   var $ss4=(sp)+(68);
   var $s5;
   var $ps6;
   var $7=(sp)+(80);
   var $aa=(sp)+(92);
   var $a7;
   var $pb;
   var $pl8;
   var $8=(sp)+(104);
   var $p9;
   var $tmp=(sp)+(116);
   var $9=(sp)+(128);
   var $p10;
   var $f;
   var $tmp11=(sp)+(140);
   var $10=(sp)+(152);
   var $boolp;
   var $b=(sp)+(164);
   var $symp;
   var $ss12=(sp)+(176);
   var $11=(sp)+(188);
   var $obj=(sp)+(200);
   var $p13;
   var $bp;
   var $var;
   var $pl14;
   var $12=(sp)+(212);
   $1=$mrb;
   $2=$format;
   $i=0;
   var $13=$1;
   var $14=(($13+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17+12)|0);
   $sp=$18;
   var $19=$1;
   var $20=(($19+8)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21+16)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23+16)|0);
   var $25=HEAP32[(($24)>>2)];
   $argc=$25;
   $opt=0;
   var $26=$ap;
   HEAP32[(($26)>>2)]=varrp;
   var $27=$argc;
   var $28=(($27)|(0)) < 0;
   if ($28) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $30=$1;
   var $31=(($30+8)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32+4)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34+12)|0);
   var $36=(($35)|0);
   var $37=$36;
   var $38=HEAP32[(($37)>>2)];
   var $39=$38;
   $a=$39;
   var $40=$a;
   var $41=(($40+12)|0);
   var $42=HEAP32[(($41)>>2)];
   $argc=$42;
   var $43=$a;
   var $44=(($43+20)|0);
   var $45=HEAP32[(($44)>>2)];
   $sp=$45;
   label = 3; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $48=$2;
   var $49=(($48+1)|0);
   $2=$49;
   var $50=HEAP8[($48)];
   HEAP8[($c)]=$50;
   var $51=(($50 << 24) >> 24)!=0;
   if ($51) { label = 5; break; } else { label = 79; break; }
  case 5: 
   var $53=HEAP8[($c)];
   var $54=(($53 << 24) >> 24);
   if ((($54)|(0))==124 | (($54)|(0))==42 | (($54)|(0))==38) {
    label = 6; break;
   }
   else {
   label = 7; break;
   }
  case 6: 
   label = 11; break;
  case 7: 
   var $57=$argc;
   var $58=$i;
   var $59=(($57)|(0)) <= (($58)|(0));
   if ($59) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $61=$opt;
   var $62=(($61)|(0))!=0;
   if ($62) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $64=$1;
   var $65=$1;
   var $66=_mrb_class_get($65, ((86952)|0));
   _mrb_raise($64, $66, ((86076)|0));
   label = 10; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $69=HEAP8[($c)];
   var $70=(($69 << 24) >> 24);
   if ((($70)|(0))==111) {
    label = 12; break;
   }
   else if ((($70)|(0))==83) {
    label = 15; break;
   }
   else if ((($70)|(0))==65) {
    label = 18; break;
   }
   else if ((($70)|(0))==72) {
    label = 21; break;
   }
   else if ((($70)|(0))==115) {
    label = 24; break;
   }
   else if ((($70)|(0))==122) {
    label = 27; break;
   }
   else if ((($70)|(0))==97) {
    label = 32; break;
   }
   else if ((($70)|(0))==102) {
    label = 35; break;
   }
   else if ((($70)|(0))==105) {
    label = 43; break;
   }
   else if ((($70)|(0))==98) {
    label = 54; break;
   }
   else if ((($70)|(0))==110) {
    label = 57; break;
   }
   else if ((($70)|(0))==38) {
    label = 66; break;
   }
   else if ((($70)|(0))==124) {
    label = 70; break;
   }
   else if ((($70)|(0))==42) {
    label = 71; break;
   }
   else {
   label = 77; break;
   }
  case 12: 
   var $72=HEAP32[(($ap)>>2)];
   var $73=$72;
   var $74=(($72+4)|0);
   HEAP32[(($ap)>>2)]=$74;
   var $75=HEAP32[(($73)>>2)];
   $p=$75;
   var $76=$i;
   var $77=$argc;
   var $78=(($76)|(0)) < (($77)|(0));
   if ($78) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $80=$p;
   var $81=$sp;
   var $82=(($81+12)|0);
   $sp=$82;
   var $83=$80;
   var $84=$81;
   assert(12 % 1 === 0);HEAP32[(($83)>>2)]=HEAP32[(($84)>>2)];HEAP32[((($83)+(4))>>2)]=HEAP32[((($84)+(4))>>2)];HEAP32[((($83)+(8))>>2)]=HEAP32[((($84)+(8))>>2)];
   var $85=$i;
   var $86=((($85)+(1))|0);
   $i=$86;
   label = 14; break;
  case 14: 
   label = 78; break;
  case 15: 
   var $89=HEAP32[(($ap)>>2)];
   var $90=$89;
   var $91=(($89+4)|0);
   HEAP32[(($ap)>>2)]=$91;
   var $92=HEAP32[(($90)>>2)];
   $p1=$92;
   var $93=$i;
   var $94=$argc;
   var $95=(($93)|(0)) < (($94)|(0));
   if ($95) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $97=$p1;
   var $98=$1;
   var $99=$sp;
   var $100=(($99+12)|0);
   $sp=$100;
   _to_str($3, $98, $99);
   var $101=$97;
   var $102=$3;
   assert(12 % 1 === 0);HEAP32[(($101)>>2)]=HEAP32[(($102)>>2)];HEAP32[((($101)+(4))>>2)]=HEAP32[((($102)+(4))>>2)];HEAP32[((($101)+(8))>>2)]=HEAP32[((($102)+(8))>>2)];
   var $103=$i;
   var $104=((($103)+(1))|0);
   $i=$104;
   label = 17; break;
  case 17: 
   label = 78; break;
  case 18: 
   var $107=HEAP32[(($ap)>>2)];
   var $108=$107;
   var $109=(($107+4)|0);
   HEAP32[(($ap)>>2)]=$109;
   var $110=HEAP32[(($108)>>2)];
   $p2=$110;
   var $111=$i;
   var $112=$argc;
   var $113=(($111)|(0)) < (($112)|(0));
   if ($113) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $115=$p2;
   var $116=$1;
   var $117=$sp;
   var $118=(($117+12)|0);
   $sp=$118;
   _to_ary($4, $116, $117);
   var $119=$115;
   var $120=$4;
   assert(12 % 1 === 0);HEAP32[(($119)>>2)]=HEAP32[(($120)>>2)];HEAP32[((($119)+(4))>>2)]=HEAP32[((($120)+(4))>>2)];HEAP32[((($119)+(8))>>2)]=HEAP32[((($120)+(8))>>2)];
   var $121=$i;
   var $122=((($121)+(1))|0);
   $i=$122;
   label = 20; break;
  case 20: 
   label = 78; break;
  case 21: 
   var $125=HEAP32[(($ap)>>2)];
   var $126=$125;
   var $127=(($125+4)|0);
   HEAP32[(($ap)>>2)]=$127;
   var $128=HEAP32[(($126)>>2)];
   $p3=$128;
   var $129=$i;
   var $130=$argc;
   var $131=(($129)|(0)) < (($130)|(0));
   if ($131) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $133=$p3;
   var $134=$1;
   var $135=$sp;
   var $136=(($135+12)|0);
   $sp=$136;
   _to_hash($5, $134, $135);
   var $137=$133;
   var $138=$5;
   assert(12 % 1 === 0);HEAP32[(($137)>>2)]=HEAP32[(($138)>>2)];HEAP32[((($137)+(4))>>2)]=HEAP32[((($138)+(4))>>2)];HEAP32[((($137)+(8))>>2)]=HEAP32[((($138)+(8))>>2)];
   var $139=$i;
   var $140=((($139)+(1))|0);
   $i=$140;
   label = 23; break;
  case 23: 
   label = 78; break;
  case 24: 
   $ps=0;
   $pl=0;
   var $143=HEAP32[(($ap)>>2)];
   var $144=$143;
   var $145=(($143+4)|0);
   HEAP32[(($ap)>>2)]=$145;
   var $146=HEAP32[(($144)>>2)];
   $ps=$146;
   var $147=HEAP32[(($ap)>>2)];
   var $148=$147;
   var $149=(($147+4)|0);
   HEAP32[(($ap)>>2)]=$149;
   var $150=HEAP32[(($148)>>2)];
   $pl=$150;
   var $151=$i;
   var $152=$argc;
   var $153=(($151)|(0)) < (($152)|(0));
   if ($153) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $155=$1;
   var $156=$sp;
   var $157=(($156+12)|0);
   $sp=$157;
   _to_str($6, $155, $156);
   var $158=$ss;
   var $159=$6;
   assert(12 % 1 === 0);HEAP32[(($158)>>2)]=HEAP32[(($159)>>2)];HEAP32[((($158)+(4))>>2)]=HEAP32[((($159)+(4))>>2)];HEAP32[((($158)+(8))>>2)]=HEAP32[((($159)+(8))>>2)];
   var $160=(($ss)|0);
   var $161=$160;
   var $162=HEAP32[(($161)>>2)];
   var $163=$162;
   $s=$163;
   var $164=$s;
   var $165=(($164+20)|0);
   var $166=HEAP32[(($165)>>2)];
   var $167=$ps;
   HEAP32[(($167)>>2)]=$166;
   var $168=$s;
   var $169=(($168+12)|0);
   var $170=HEAP32[(($169)>>2)];
   var $171=$pl;
   HEAP32[(($171)>>2)]=$170;
   var $172=$i;
   var $173=((($172)+(1))|0);
   $i=$173;
   label = 26; break;
  case 26: 
   label = 78; break;
  case 27: 
   var $176=HEAP32[(($ap)>>2)];
   var $177=$176;
   var $178=(($176+4)|0);
   HEAP32[(($ap)>>2)]=$178;
   var $179=HEAP32[(($177)>>2)];
   $ps6=$179;
   var $180=$i;
   var $181=$argc;
   var $182=(($180)|(0)) < (($181)|(0));
   if ($182) { label = 28; break; } else { label = 31; break; }
  case 28: 
   var $184=$1;
   var $185=$sp;
   var $186=(($185+12)|0);
   $sp=$186;
   _to_str($7, $184, $185);
   var $187=$ss4;
   var $188=$7;
   assert(12 % 1 === 0);HEAP32[(($187)>>2)]=HEAP32[(($188)>>2)];HEAP32[((($187)+(4))>>2)]=HEAP32[((($188)+(4))>>2)];HEAP32[((($187)+(8))>>2)]=HEAP32[((($188)+(8))>>2)];
   var $189=(($ss4)|0);
   var $190=$189;
   var $191=HEAP32[(($190)>>2)];
   var $192=$191;
   $s5=$192;
   var $193=$s5;
   var $194=(($193+20)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196=_strlen($195);
   var $197=$s5;
   var $198=(($197+12)|0);
   var $199=HEAP32[(($198)>>2)];
   var $200=(($196)>>>(0)) < (($199)>>>(0));
   if ($200) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $202=$1;
   var $203=$1;
   var $204=_mrb_class_get($203, ((86952)|0));
   _mrb_raise($202, $204, ((105564)|0));
   label = 30; break;
  case 30: 
   var $206=$s5;
   var $207=(($206+20)|0);
   var $208=HEAP32[(($207)>>2)];
   var $209=$ps6;
   HEAP32[(($209)>>2)]=$208;
   var $210=$i;
   var $211=((($210)+(1))|0);
   $i=$211;
   label = 31; break;
  case 31: 
   label = 78; break;
  case 32: 
   var $214=HEAP32[(($ap)>>2)];
   var $215=$214;
   var $216=(($214+4)|0);
   HEAP32[(($ap)>>2)]=$216;
   var $217=HEAP32[(($215)>>2)];
   $pb=$217;
   var $218=HEAP32[(($ap)>>2)];
   var $219=$218;
   var $220=(($218+4)|0);
   HEAP32[(($ap)>>2)]=$220;
   var $221=HEAP32[(($219)>>2)];
   $pl8=$221;
   var $222=$i;
   var $223=$argc;
   var $224=(($222)|(0)) < (($223)|(0));
   if ($224) { label = 33; break; } else { label = 34; break; }
  case 33: 
   var $226=$1;
   var $227=$sp;
   var $228=(($227+12)|0);
   $sp=$228;
   _to_ary($8, $226, $227);
   var $229=$aa;
   var $230=$8;
   assert(12 % 1 === 0);HEAP32[(($229)>>2)]=HEAP32[(($230)>>2)];HEAP32[((($229)+(4))>>2)]=HEAP32[((($230)+(4))>>2)];HEAP32[((($229)+(8))>>2)]=HEAP32[((($230)+(8))>>2)];
   var $231=(($aa)|0);
   var $232=$231;
   var $233=HEAP32[(($232)>>2)];
   var $234=$233;
   $a7=$234;
   var $235=$a7;
   var $236=(($235+20)|0);
   var $237=HEAP32[(($236)>>2)];
   var $238=$pb;
   HEAP32[(($238)>>2)]=$237;
   var $239=$a7;
   var $240=(($239+12)|0);
   var $241=HEAP32[(($240)>>2)];
   var $242=$pl8;
   HEAP32[(($242)>>2)]=$241;
   var $243=$i;
   var $244=((($243)+(1))|0);
   $i=$244;
   label = 34; break;
  case 34: 
   label = 78; break;
  case 35: 
   var $247=HEAP32[(($ap)>>2)];
   var $248=$247;
   var $249=(($247+4)|0);
   HEAP32[(($ap)>>2)]=$249;
   var $250=HEAP32[(($248)>>2)];
   $p9=$250;
   var $251=$i;
   var $252=$argc;
   var $253=(($251)|(0)) < (($252)|(0));
   if ($253) { label = 36; break; } else { label = 42; break; }
  case 36: 
   var $255=$sp;
   var $256=(($255+8)|0);
   var $257=HEAP32[(($256)>>2)];
   if ((($257)|(0))==6) {
    label = 37; break;
   }
   else if ((($257)|(0))==3) {
    label = 38; break;
   }
   else if ((($257)|(0))==16) {
    label = 39; break;
   }
   else {
   label = 40; break;
   }
  case 37: 
   var $259=$sp;
   var $260=(($259)|0);
   var $261=$260;
   var $262=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($261)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($261)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $263=$p9;
   (HEAPF64[(tempDoublePtr)>>3]=$262,HEAP32[(($263)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($263)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 41; break;
  case 38: 
   var $265=$sp;
   var $266=(($265)|0);
   var $267=$266;
   var $268=HEAP32[(($267)>>2)];
   var $269=(($268)|(0));
   var $270=$p9;
   (HEAPF64[(tempDoublePtr)>>3]=$269,HEAP32[(($270)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($270)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 41; break;
  case 39: 
   var $272=$1;
   var $273=$1;
   var $274=_mrb_class_get($273, ((98236)|0));
   _mrb_raise($272, $274, ((104828)|0));
   label = 41; break;
  case 40: 
   var $276=$1;
   var $277=$sp;
   _mrb_convert_type($9, $276, $277, 6, ((104272)|0), ((103712)|0));
   var $278=$tmp;
   var $279=$9;
   assert(12 % 1 === 0);HEAP32[(($278)>>2)]=HEAP32[(($279)>>2)];HEAP32[((($278)+(4))>>2)]=HEAP32[((($279)+(4))>>2)];HEAP32[((($278)+(8))>>2)]=HEAP32[((($279)+(8))>>2)];
   var $280=(($tmp)|0);
   var $281=$280;
   var $282=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($281)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($281)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $283=$p9;
   (HEAPF64[(tempDoublePtr)>>3]=$282,HEAP32[(($283)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($283)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 41; break;
  case 41: 
   var $285=$sp;
   var $286=(($285+12)|0);
   $sp=$286;
   var $287=$i;
   var $288=((($287)+(1))|0);
   $i=$288;
   label = 42; break;
  case 42: 
   label = 78; break;
  case 43: 
   var $291=HEAP32[(($ap)>>2)];
   var $292=$291;
   var $293=(($291+4)|0);
   HEAP32[(($ap)>>2)]=$293;
   var $294=HEAP32[(($292)>>2)];
   $p10=$294;
   var $295=$i;
   var $296=$argc;
   var $297=(($295)|(0)) < (($296)|(0));
   if ($297) { label = 44; break; } else { label = 53; break; }
  case 44: 
   var $299=$sp;
   var $300=(($299+8)|0);
   var $301=HEAP32[(($300)>>2)];
   if ((($301)|(0))==3) {
    label = 45; break;
   }
   else if ((($301)|(0))==6) {
    label = 46; break;
   }
   else if ((($301)|(0))==0) {
    label = 50; break;
   }
   else {
   label = 51; break;
   }
  case 45: 
   var $303=$sp;
   var $304=(($303)|0);
   var $305=$304;
   var $306=HEAP32[(($305)>>2)];
   var $307=$p10;
   HEAP32[(($307)>>2)]=$306;
   label = 52; break;
  case 46: 
   var $309=$sp;
   var $310=(($309)|0);
   var $311=$310;
   var $312=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($311)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($311)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   $f=$312;
   var $313=$f;
   var $314=$313 <= 2147483647;
   if ($314) { label = 47; break; } else { label = 48; break; }
  case 47: 
   var $316=$f;
   var $317=$316 >= -2147483648;
   if ($317) { label = 49; break; } else { label = 48; break; }
  case 48: 
   var $319=$1;
   var $320=$1;
   var $321=_mrb_class_get($320, ((103204)|0));
   _mrb_raise($319, $321, ((102732)|0));
   label = 49; break;
  case 49: 
   var $323=$f;
   var $324=(($323)&-1);
   var $325=$p10;
   HEAP32[(($325)>>2)]=$324;
   label = 52; break;
  case 50: 
   var $327=$p10;
   HEAP32[(($327)>>2)]=0;
   label = 52; break;
  case 51: 
   var $329=$1;
   var $330=$sp;
   _mrb_convert_type($10, $329, $330, 3, ((102412)|0), ((102064)|0));
   var $331=$tmp11;
   var $332=$10;
   assert(12 % 1 === 0);HEAP32[(($331)>>2)]=HEAP32[(($332)>>2)];HEAP32[((($331)+(4))>>2)]=HEAP32[((($332)+(4))>>2)];HEAP32[((($331)+(8))>>2)]=HEAP32[((($332)+(8))>>2)];
   var $333=(($tmp11)|0);
   var $334=$333;
   var $335=HEAP32[(($334)>>2)];
   var $336=$p10;
   HEAP32[(($336)>>2)]=$335;
   label = 52; break;
  case 52: 
   var $338=$sp;
   var $339=(($338+12)|0);
   $sp=$339;
   var $340=$i;
   var $341=((($340)+(1))|0);
   $i=$341;
   label = 53; break;
  case 53: 
   label = 78; break;
  case 54: 
   var $344=HEAP32[(($ap)>>2)];
   var $345=$344;
   var $346=(($344+4)|0);
   HEAP32[(($ap)>>2)]=$346;
   var $347=HEAP32[(($345)>>2)];
   $boolp=$347;
   var $348=$i;
   var $349=$argc;
   var $350=(($348)|(0)) < (($349)|(0));
   if ($350) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $352=$sp;
   var $353=(($352+12)|0);
   $sp=$353;
   var $354=$b;
   var $355=$352;
   assert(12 % 1 === 0);HEAP32[(($354)>>2)]=HEAP32[(($355)>>2)];HEAP32[((($354)+(4))>>2)]=HEAP32[((($355)+(4))>>2)];HEAP32[((($354)+(8))>>2)]=HEAP32[((($355)+(8))>>2)];
   var $356=(($b+8)|0);
   var $357=HEAP32[(($356)>>2)];
   var $358=(($357)|(0))!=0;
   var $359=(($358)&(1));
   var $360=(($359) & 255);
   var $361=$boolp;
   HEAP8[($361)]=$360;
   var $362=$i;
   var $363=((($362)+(1))|0);
   $i=$363;
   label = 56; break;
  case 56: 
   label = 78; break;
  case 57: 
   var $366=HEAP32[(($ap)>>2)];
   var $367=$366;
   var $368=(($366+4)|0);
   HEAP32[(($ap)>>2)]=$368;
   var $369=HEAP32[(($367)>>2)];
   $symp=$369;
   var $370=$i;
   var $371=$argc;
   var $372=(($370)|(0)) < (($371)|(0));
   if ($372) { label = 58; break; } else { label = 65; break; }
  case 58: 
   var $374=$sp;
   var $375=(($374+12)|0);
   $sp=$375;
   var $376=$ss12;
   var $377=$374;
   assert(12 % 1 === 0);HEAP32[(($376)>>2)]=HEAP32[(($377)>>2)];HEAP32[((($376)+(4))>>2)]=HEAP32[((($377)+(4))>>2)];HEAP32[((($376)+(8))>>2)]=HEAP32[((($377)+(8))>>2)];
   var $378=(($ss12+8)|0);
   var $379=HEAP32[(($378)>>2)];
   var $380=(($379)|(0))==4;
   if ($380) { label = 59; break; } else { label = 60; break; }
  case 59: 
   var $382=(($ss12)|0);
   var $383=$382;
   var $384=HEAP16[(($383)>>1)];
   var $385=$symp;
   HEAP16[(($385)>>1)]=$384;
   label = 64; break;
  case 60: 
   var $387=(($ss12+8)|0);
   var $388=HEAP32[(($387)>>2)];
   var $389=(($388)|(0))==16;
   if ($389) { label = 61; break; } else { label = 62; break; }
  case 61: 
   var $391=$1;
   var $392=$1;
   _to_str($11, $392, $ss12);
   var $393=_mrb_intern_str($391, $11);
   var $394=$symp;
   HEAP16[(($394)>>1)]=$393;
   label = 63; break;
  case 62: 
   var $396=$1;
   _mrb_funcall($obj, $396, $ss12, ((101616)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $397=$1;
   var $398=$1;
   var $399=_mrb_class_get($398, ((98236)|0));
   _mrb_raisef($397, $399, ((101040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($obj)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj)+(8))>>2)],tempInt));
   label = 63; break;
  case 63: 
   label = 64; break;
  case 64: 
   var $402=$i;
   var $403=((($402)+(1))|0);
   $i=$403;
   label = 65; break;
  case 65: 
   label = 78; break;
  case 66: 
   var $406=HEAP32[(($ap)>>2)];
   var $407=$406;
   var $408=(($406+4)|0);
   HEAP32[(($ap)>>2)]=$408;
   var $409=HEAP32[(($407)>>2)];
   $p13=$409;
   var $410=$1;
   var $411=(($410+8)|0);
   var $412=HEAP32[(($411)>>2)];
   var $413=(($412+16)|0);
   var $414=HEAP32[(($413)>>2)];
   var $415=(($414+16)|0);
   var $416=HEAP32[(($415)>>2)];
   var $417=(($416)|(0)) < 0;
   if ($417) { label = 67; break; } else { label = 68; break; }
  case 67: 
   var $419=$1;
   var $420=(($419+8)|0);
   var $421=HEAP32[(($420)>>2)];
   var $422=(($421+4)|0);
   var $423=HEAP32[(($422)>>2)];
   var $424=(($423+24)|0);
   $bp=$424;
   label = 69; break;
  case 68: 
   var $426=$1;
   var $427=(($426+8)|0);
   var $428=HEAP32[(($427)>>2)];
   var $429=(($428+4)|0);
   var $430=HEAP32[(($429)>>2)];
   var $431=$1;
   var $432=(($431+8)|0);
   var $433=HEAP32[(($432)>>2)];
   var $434=(($433+16)|0);
   var $435=HEAP32[(($434)>>2)];
   var $436=(($435+16)|0);
   var $437=HEAP32[(($436)>>2)];
   var $438=(($430+((($437)*(12))&-1))|0);
   var $439=(($438+12)|0);
   $bp=$439;
   label = 69; break;
  case 69: 
   var $441=$p13;
   var $442=$bp;
   var $443=$441;
   var $444=$442;
   assert(12 % 1 === 0);HEAP32[(($443)>>2)]=HEAP32[(($444)>>2)];HEAP32[((($443)+(4))>>2)]=HEAP32[((($444)+(4))>>2)];HEAP32[((($443)+(8))>>2)]=HEAP32[((($444)+(8))>>2)];
   label = 78; break;
  case 70: 
   $opt=1;
   label = 78; break;
  case 71: 
   var $447=HEAP32[(($ap)>>2)];
   var $448=$447;
   var $449=(($447+4)|0);
   HEAP32[(($ap)>>2)]=$449;
   var $450=HEAP32[(($448)>>2)];
   $var=$450;
   var $451=HEAP32[(($ap)>>2)];
   var $452=$451;
   var $453=(($451+4)|0);
   HEAP32[(($ap)>>2)]=$453;
   var $454=HEAP32[(($452)>>2)];
   $pl14=$454;
   var $455=$argc;
   var $456=$i;
   var $457=(($455)|(0)) > (($456)|(0));
   if ($457) { label = 72; break; } else { label = 75; break; }
  case 72: 
   var $459=$argc;
   var $460=$i;
   var $461=((($459)-($460))|0);
   var $462=$pl14;
   HEAP32[(($462)>>2)]=$461;
   var $463=$pl14;
   var $464=HEAP32[(($463)>>2)];
   var $465=(($464)|(0)) > 0;
   if ($465) { label = 73; break; } else { label = 74; break; }
  case 73: 
   var $467=$sp;
   var $468=$var;
   HEAP32[(($468)>>2)]=$467;
   label = 74; break;
  case 74: 
   var $470=$argc;
   $i=$470;
   var $471=$pl14;
   var $472=HEAP32[(($471)>>2)];
   var $473=$sp;
   var $474=(($473+((($472)*(12))&-1))|0);
   $sp=$474;
   label = 76; break;
  case 75: 
   var $476=$pl14;
   HEAP32[(($476)>>2)]=0;
   var $477=$var;
   HEAP32[(($477)>>2)]=0;
   label = 76; break;
  case 76: 
   label = 78; break;
  case 77: 
   var $480=$1;
   var $481=$1;
   var $482=_mrb_class_get($481, ((86952)|0));
   var $483=$1;
   _mrb_str_new($12, $483, $c, 1);
   _mrb_raisef($480, $482, ((100692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($12)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($12)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($12)+(8))>>2)],tempInt));
   label = 78; break;
  case 78: 
   label = 4; break;
  case 79: 
   var $486=HEAP8[($c)];
   var $487=(($486 << 24) >> 24)!=0;
   if ($487) { label = 82; break; } else { label = 80; break; }
  case 80: 
   var $489=$argc;
   var $490=$i;
   var $491=(($489)|(0)) > (($490)|(0));
   if ($491) { label = 81; break; } else { label = 82; break; }
  case 81: 
   var $493=$1;
   var $494=$1;
   var $495=_mrb_class_get($494, ((86952)|0));
   _mrb_raise($493, $495, ((86076)|0));
   label = 82; break;
  case 82: 
   var $497=$ap;
   var $498=$i;
   STACKTOP = sp;
   return $498;
  default: assert(0, "bad label: " + label);
 }
}
function _to_str($agg_result, $mrb, $val) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _check_type($agg_result, $2, $val, 16, ((105716)|0), ((105664)|0));
 STACKTOP = sp;
 return;
}
function _to_ary($agg_result, $mrb, $val) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _check_type($agg_result, $2, $val, 14, ((105780)|0), ((105740)|0));
 STACKTOP = sp;
 return;
}
function _to_hash($agg_result, $mrb, $val) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _check_type($agg_result, $2, $val, 15, ((85900)|0), ((85860)|0));
 STACKTOP = sp;
 return;
}
function _mrb_include_module($mrb, $c, $m) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $ins_pos;
   var $p;
   var $ic;
   var $superclass_seen;
   $1=$mrb;
   $2=$c;
   $3=$m;
   var $4=$2;
   $ins_pos=$4;
   label = 2; break;
  case 2: 
   var $6=$3;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 22; break; }
  case 3: 
   var $9=$2;
   $p=$9;
   $superclass_seen=0;
   var $10=$2;
   var $11=(($10+16)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$3;
   var $14=(($13+16)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($12)|(0))==(($15)|(0));
   if ($16) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $18=$1;
   var $19=$1;
   var $20=_mrb_class_get($19, ((86952)|0));
   _mrb_raise($18, $20, ((100216)|0));
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $23=$p;
   var $24=(($23)|(0))!=0;
   if ($24) { label = 7; break; } else { label = 17; break; }
  case 7: 
   var $26=$2;
   var $27=$p;
   var $28=(($26)|(0))!=(($27)|(0));
   if ($28) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $30=$p;
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=$32 & 255;
   var $34=(($33)|(0))==9;
   if ($34) { label = 9; break; } else { label = 10; break; }
  case 9: 
   $superclass_seen=1;
   label = 16; break;
  case 10: 
   var $37=$p;
   var $38=(($37+16)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=$3;
   var $41=(($40+16)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($39)|(0))==(($42)|(0));
   if ($43) { label = 11; break; } else { label = 15; break; }
  case 11: 
   var $45=$p;
   var $46=$45;
   var $47=HEAP32[(($46)>>2)];
   var $48=$47 & 255;
   var $49=(($48)|(0))==11;
   if ($49) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $51=$superclass_seen;
   var $52=(($51)|(0))!=0;
   if ($52) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $54=$p;
   $ins_pos=$54;
   label = 14; break;
  case 14: 
   label = 21; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $58=$p;
   var $59=(($58+20)|0);
   var $60=HEAP32[(($59)>>2)];
   $p=$60;
   label = 6; break;
  case 17: 
   var $62=$1;
   var $63=$1;
   var $64=(($63+48)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=_mrb_obj_alloc($62, 11, $65);
   var $67=$66;
   $ic=$67;
   var $68=$3;
   var $69=$68;
   var $70=HEAP32[(($69)>>2)];
   var $71=$70 & 255;
   var $72=(($71)|(0))==11;
   if ($72) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $74=$3;
   var $75=(($74+4)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=$ic;
   var $78=(($77+4)|0);
   HEAP32[(($78)>>2)]=$76;
   label = 20; break;
  case 19: 
   var $80=$3;
   var $81=$ic;
   var $82=(($81+4)|0);
   HEAP32[(($82)>>2)]=$80;
   label = 20; break;
  case 20: 
   var $84=$3;
   var $85=(($84+16)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=$ic;
   var $88=(($87+16)|0);
   HEAP32[(($88)>>2)]=$86;
   var $89=$3;
   var $90=(($89+12)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=$ic;
   var $93=(($92+12)|0);
   HEAP32[(($93)>>2)]=$91;
   var $94=$ins_pos;
   var $95=(($94+20)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=$ic;
   var $98=(($97+20)|0);
   HEAP32[(($98)>>2)]=$96;
   var $99=$ic;
   var $100=$ins_pos;
   var $101=(($100+20)|0);
   HEAP32[(($101)>>2)]=$99;
   var $102=$1;
   var $103=$ins_pos;
   var $104=$103;
   var $105=$ic;
   var $106=$105;
   _mrb_field_write_barrier($102, $104, $106);
   var $107=$ic;
   $ins_pos=$107;
   label = 21; break;
  case 21: 
   var $109=$3;
   var $110=(($109+20)|0);
   var $111=HEAP32[(($110)>>2)];
   $3=$111;
   label = 2; break;
  case 22: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mod_module_eval($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a=sp;
   var $b=(sp)+(12);
   var $c;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((99924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$a,HEAP32[(((tempInt)+(4))>>2)]=$b,tempInt));
   var $4=(($3)|(0))==1;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$1;
   var $7=$1;
   var $8=_mrb_class_get($7, ((99640)|0));
   _mrb_raise($6, $8, ((99092)|0));
   label = 3; break;
  case 3: 
   var $10=(($mod)|0);
   var $11=$10;
   var $12=HEAP32[(($11)>>2)];
   var $13=$12;
   $c=$13;
   var $14=$1;
   var $15=$c;
   _mrb_yield_internal($agg_result, $14, $b, 0, 0, $mod, $15);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mod_dummy_visibility($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$agg_result;
 var $3=$mod;
 assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_singleton_class($agg_result, $mrb, $v) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $obj;
   $1=$mrb;
   var $2=(($v+8)|0);
   var $3=HEAP32[(($2)>>2)];
   if ((($3)|(0))==0) {
    label = 2; break;
   }
   else if ((($3)|(0))==2) {
    label = 6; break;
   }
   else if ((($3)|(0))==7) {
    label = 7; break;
   }
   else if ((($3)|(0))==4 | (($3)|(0))==3 | (($3)|(0))==6) {
    label = 8; break;
   }
   else {
   label = 9; break;
   }
  case 2: 
   var $5=(($v+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==0;
   if ($7) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $9=(($v)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))!=0;
   if ($12) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $14=$1;
   var $15=(($14+88)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$16;
   _mrb_obj_value775($agg_result, $17);
   label = 11; break;
  case 5: 
   var $19=$1;
   var $20=(($19+84)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$21;
   _mrb_obj_value775($agg_result, $22);
   label = 11; break;
  case 6: 
   var $24=$1;
   var $25=(($24+80)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$26;
   _mrb_obj_value775($agg_result, $27);
   label = 11; break;
  case 7: 
   var $29=$1;
   var $30=(($29+44)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$31;
   _mrb_obj_value775($agg_result, $32);
   label = 11; break;
  case 8: 
   var $34=$1;
   var $35=$1;
   var $36=_mrb_class_get($35, ((98236)|0));
   _mrb_raise($34, $36, ((98724)|0));
   _mrb_nil_value798($agg_result);
   label = 11; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $39=(($v)|0);
   var $40=$39;
   var $41=HEAP32[(($40)>>2)];
   var $42=$41;
   $obj=$42;
   var $43=$1;
   var $44=$obj;
   _prepare_singleton_class($43, $44);
   var $45=$obj;
   var $46=(($45+4)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$47;
   _mrb_obj_value775($agg_result, $48);
   label = 11; break;
  case 11: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value798($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _prepare_singleton_class($mrb, $o) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $sc;
   var $c;
   var $3=sp;
   $1=$mrb;
   $2=$o;
   var $4=$2;
   var $5=(($4+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 & 255;
   var $10=(($9)|(0))==12;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 16; break;
  case 3: 
   var $13=$1;
   var $14=$1;
   var $15=(($14+48)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=_mrb_obj_alloc($13, 12, $16);
   var $18=$17;
   $sc=$18;
   var $19=$sc;
   var $20=(($19+16)|0);
   HEAP32[(($20)>>2)]=0;
   var $21=$sc;
   var $22=(($21+12)|0);
   HEAP32[(($22)>>2)]=0;
   var $23=$2;
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   var $26=$25 & 255;
   var $27=(($26)|(0))==9;
   if ($27) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $29=$2;
   var $30=$29;
   $c=$30;
   var $31=$c;
   var $32=(($31+20)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33)|(0))!=0;
   if ($34) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $36=$1;
   var $37=(($36+48)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=$sc;
   var $40=(($39+20)|0);
   HEAP32[(($40)>>2)]=$38;
   label = 7; break;
  case 6: 
   var $42=$c;
   var $43=(($42+20)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=(($44+4)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=$sc;
   var $48=(($47+20)|0);
   HEAP32[(($48)>>2)]=$46;
   label = 7; break;
  case 7: 
   label = 15; break;
  case 8: 
   var $51=$2;
   var $52=$51;
   var $53=HEAP32[(($52)>>2)];
   var $54=$53 & 255;
   var $55=(($54)|(0))==12;
   if ($55) { label = 9; break; } else { label = 13; break; }
  case 9: 
   var $57=$2;
   var $58=$57;
   $c=$58;
   label = 10; break;
  case 10: 
   var $60=$c;
   var $61=(($60+20)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=$62;
   var $64=HEAP32[(($63)>>2)];
   var $65=$64 & 255;
   var $66=(($65)|(0))==11;
   if ($66) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $68=$c;
   var $69=(($68+20)|0);
   var $70=HEAP32[(($69)>>2)];
   $c=$70;
   label = 10; break;
  case 12: 
   var $72=$1;
   var $73=$c;
   var $74=(($73+20)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=$75;
   _prepare_singleton_class($72, $76);
   var $77=$c;
   var $78=(($77+20)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79+4)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$sc;
   var $83=(($82+20)|0);
   HEAP32[(($83)>>2)]=$81;
   label = 14; break;
  case 13: 
   var $85=$2;
   var $86=(($85+4)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=$sc;
   var $89=(($88+20)|0);
   HEAP32[(($89)>>2)]=$87;
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $92=$sc;
   var $93=$2;
   var $94=(($93+4)|0);
   HEAP32[(($94)>>2)]=$92;
   var $95=$1;
   var $96=$2;
   var $97=$sc;
   var $98=$97;
   _mrb_field_write_barrier($95, $96, $98);
   var $99=$1;
   var $100=$sc;
   var $101=$100;
   var $102=$2;
   _mrb_field_write_barrier($99, $101, $102);
   var $103=$1;
   var $104=$sc;
   var $105=$104;
   var $106=$1;
   var $107=_mrb_intern2($106, ((86888)|0), 12);
   var $108=$2;
   var $109=$108;
   _mrb_obj_value775($3, $109);
   _mrb_obj_iv_set($103, $105, $107, $3);
   label = 16; break;
  case 16: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_define_singleton_method($mrb, $o, $name, $func, $aspec) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$mrb;
 $2=$o;
 $3=$name;
 $4=$func;
 $5=$aspec;
 var $6=$1;
 var $7=$2;
 var $8=$7;
 _prepare_singleton_class($6, $8);
 var $9=$1;
 var $10=$2;
 var $11=(($10+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$1;
 var $14=$3;
 var $15=_mrb_intern_cstr($13, $14);
 var $16=$4;
 var $17=$5;
 _mrb_define_method_id($9, $12, $15, $16, $17);
 return;
}
function _mrb_define_class_method($mrb, $c, $name, $func, $aspec) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$mrb;
 $2=$c;
 $3=$name;
 $4=$func;
 $5=$aspec;
 var $6=$1;
 var $7=$2;
 var $8=$7;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 _mrb_define_singleton_method($6, $8, $9, $10, $11);
 return;
}
function _mrb_define_module_function($mrb, $c, $name, $func, $aspec) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$mrb;
 $2=$c;
 $3=$name;
 $4=$func;
 $5=$aspec;
 var $6=$1;
 var $7=$2;
 var $8=$3;
 var $9=$4;
 var $10=$5;
 _mrb_define_class_method($6, $7, $8, $9, $10);
 var $11=$1;
 var $12=$2;
 var $13=$3;
 var $14=$4;
 var $15=$5;
 _mrb_define_method($11, $12, $13, $14, $15);
 return;
}
function _mrb_method_search_vm($mrb, $cp, $mid) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $k;
   var $m;
   var $c;
   var $h;
   $2=$mrb;
   $3=$cp;
   $4=$mid;
   var $5=$3;
   var $6=HEAP32[(($5)>>2)];
   $c=$6;
   label = 2; break;
  case 2: 
   var $8=$c;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $11=$c;
   var $12=(($11+16)|0);
   var $13=HEAP32[(($12)>>2)];
   $h=$13;
   var $14=$h;
   var $15=(($14)|(0))!=0;
   if ($15) { label = 4; break; } else { label = 9; break; }
  case 4: 
   var $17=$h;
   var $18=$4;
   var $19=_kh_get_mt($17, $18);
   $k=$19;
   var $20=$k;
   var $21=$h;
   var $22=(($21)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($20)|(0))!=(($23)|(0));
   if ($24) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $26=$k;
   var $27=$h;
   var $28=(($27+24)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+($26<<2))|0);
   var $31=HEAP32[(($30)>>2)];
   $m=$31;
   var $32=$m;
   var $33=(($32)|(0))!=0;
   if ($33) { label = 7; break; } else { label = 6; break; }
  case 6: 
   label = 10; break;
  case 7: 
   var $36=$c;
   var $37=$3;
   HEAP32[(($37)>>2)]=$36;
   var $38=$m;
   $1=$38;
   label = 11; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $41=$c;
   var $42=(($41+20)|0);
   var $43=HEAP32[(($42)>>2)];
   $c=$43;
   label = 2; break;
  case 10: 
   $1=0;
   label = 11; break;
  case 11: 
   var $46=$1;
   return $46;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_method_search($mrb, $c, $mid) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2=sp;
   var $3;
   var $m;
   var $inspect=(sp)+(4);
   var $4=(sp)+(16);
   var $5=(sp)+(28);
   var $6=(sp)+(40);
   var $7=(sp)+(52);
   $1=$mrb;
   HEAP32[(($2)>>2)]=$c;
   $3=$mid;
   var $8=$1;
   var $9=$3;
   var $10=_mrb_method_search_vm($8, $2, $9);
   $m=$10;
   var $11=$m;
   var $12=(($11)|(0))!=0;
   if ($12) { label = 5; break; } else { label = 2; break; }
  case 2: 
   var $14=$1;
   var $15=HEAP32[(($2)>>2)];
   var $16=$15;
   _mrb_obj_value775($4, $16);
   _mrb_funcall($inspect, $14, $4, ((101616)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $17=(($inspect)|0);
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=$19;
   var $21=(($20+12)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0)) > 64;
   if ($23) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $25=$1;
   var $26=HEAP32[(($2)>>2)];
   var $27=$26;
   _mrb_obj_value775($5, $27);
   _mrb_any_to_s($6, $25, $5);
   var $28=$inspect;
   var $29=$6;
   assert(12 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[((($29)+(8))>>2)];
   label = 4; break;
  case 4: 
   var $31=$1;
   var $32=$3;
   var $33=$1;
   var $34=$3;
   _mrb_sym2str($7, $33, $34);
   _mrb_name_error($31, $32, ((98200)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($7)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($7)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($7)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($inspect)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($inspect)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($inspect)+(8))>>2)],tempInt));
   label = 5; break;
  case 5: 
   var $36=$m;
   STACKTOP = sp;
   return $36;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_call_init($mrb, $obj, $argc, $argv) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 var $3;
 var $4=sp;
 $1=$mrb;
 $2=$argc;
 $3=$argv;
 var $5=$1;
 var $6=$1;
 var $7=(($6+36)|0);
 var $8=HEAP16[(($7)>>1)];
 var $9=$2;
 var $10=$3;
 _mrb_funcall_argv($4, $5, $obj, $8, $9, $10);
 STACKTOP = sp;
 return;
}
function _mrb_class_new_instance($agg_result, $mrb, $argc, $argv, $klass) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $obj=sp;
 var $c;
 var $5=(sp)+(12);
 $1=$mrb;
 $2=$argc;
 $3=$argv;
 $4=$klass;
 var $6=$1;
 var $7=$4;
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=$9 & 255;
 var $11=$4;
 var $12=_mrb_obj_alloc($6, $10, $11);
 var $13=$12;
 $c=$13;
 var $14=$4;
 var $15=$c;
 var $16=(($15+20)|0);
 HEAP32[(($16)>>2)]=$14;
 var $17=$c;
 var $18=$17;
 _mrb_obj_value775($5, $18);
 var $19=$obj;
 var $20=$5;
 assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 var $21=$1;
 var $22=$2;
 var $23=$3;
 _mrb_obj_call_init($21, $obj, $22, $23);
 var $24=$agg_result;
 var $25=$obj;
 assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_instance_new($agg_result, $mrb, $cv) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $cv; $cv = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($cv)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($cv)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($cv)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $c;
   var $o;
   var $ttype;
   var $obj=sp;
   var $blk=(sp)+(12);
   var $argv=(sp)+(24);
   var $argc=(sp)+(28);
   var $2=(sp)+(32);
   var $3=(sp)+(44);
   $1=$mrb;
   var $4=(($cv)|0);
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=$6;
   $c=$7;
   var $8=$c;
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 >>> 11;
   var $12=$11 & 2097151;
   var $13=$12 & 255;
   $ttype=$13;
   var $14=$c;
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=$16 & 255;
   var $18=(($17)|(0))==12;
   if ($18) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $20=$1;
   var $21=$1;
   var $22=_mrb_class_get($21, ((98236)|0));
   _mrb_raise($20, $22, ((97600)|0));
   label = 3; break;
  case 3: 
   var $24=$ttype;
   var $25=(($24)|(0))==0;
   if ($25) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $ttype=8;
   label = 5; break;
  case 5: 
   var $28=$1;
   var $29=$ttype;
   var $30=$c;
   var $31=_mrb_obj_alloc($28, $29, $30);
   var $32=$31;
   $o=$32;
   var $33=$o;
   var $34=$33;
   _mrb_obj_value775($2, $34);
   var $35=$obj;
   var $36=$2;
   assert(12 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];HEAP32[((($35)+(8))>>2)]=HEAP32[((($36)+(8))>>2)];
   var $37=$1;
   var $38=_mrb_get_args($37, ((97936)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,HEAP32[(((tempInt)+(8))>>2)]=$blk,tempInt));
   var $39=$1;
   var $40=$1;
   var $41=(($40+36)|0);
   var $42=HEAP16[(($41)>>1)];
   var $43=HEAP32[(($argc)>>2)];
   var $44=HEAP32[(($argv)>>2)];
   _mrb_funcall_with_block($3, $39, $obj, $42, $43, $44, $blk);
   var $45=$agg_result;
   var $46=$obj;
   assert(12 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($45)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_class_new_class($agg_result, $mrb, $cv) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $cv; $cv = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($cv)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($cv)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($cv)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $super=sp;
   var $new_class;
   var $2=(sp)+(12);
   var $3=(sp)+(24);
   var $4=(sp)+(36);
   $1=$mrb;
   var $5=$1;
   var $6=_mrb_get_args($5, ((97332)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$super,tempInt));
   var $7=(($6)|(0))==0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$1;
   var $10=(($9+44)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$11;
   _mrb_obj_value775($2, $12);
   var $13=$super;
   var $14=$2;
   assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
   label = 3; break;
  case 3: 
   var $16=$1;
   var $17=(($super)|0);
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=$19;
   var $21=_mrb_class_new($16, $20);
   $new_class=$21;
   var $22=$1;
   var $23=$new_class;
   var $24=$23;
   _mrb_obj_value775($3, $24);
   _mrb_funcall($4, $22, $super, ((90236)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
   var $25=$new_class;
   var $26=$25;
   _mrb_obj_value775($agg_result, $26);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_class_superclass($agg_result, $mrb, $klass) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $klass; $klass = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($klass)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($klass)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($klass)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $c;
   $1=$mrb;
   var $2=(($klass)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $c=$5;
   var $6=$c;
   var $7=(($6+20)|0);
   var $8=HEAP32[(($7)>>2)];
   $c=$8;
   label = 2; break;
  case 2: 
   var $10=$c;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 3; break; } else { var $19 = 0;label = 4; break; }
  case 3: 
   var $13=$c;
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 255;
   var $17=(($16)|(0))==11;
   var $19 = $17;label = 4; break;
  case 4: 
   var $19;
   if ($19) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $21=$c;
   var $22=(($21+20)|0);
   var $23=HEAP32[(($22)>>2)];
   $c=$23;
   label = 2; break;
  case 6: 
   var $25=$c;
   var $26=(($25)|(0))!=0;
   if ($26) { label = 8; break; } else { label = 7; break; }
  case 7: 
   _mrb_nil_value798($agg_result);
   label = 9; break;
  case 8: 
   var $29=$c;
   var $30=$29;
   _mrb_obj_value775($agg_result, $30);
   label = 9; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_class807($mrb, $v) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $2=$mrb;
   var $3=(($v+8)|0);
   var $4=HEAP32[(($3)>>2)];
   if ((($4)|(0))==0) {
    label = 2; break;
   }
   else if ((($4)|(0))==2) {
    label = 5; break;
   }
   else if ((($4)|(0))==4) {
    label = 6; break;
   }
   else if ((($4)|(0))==3) {
    label = 7; break;
   }
   else if ((($4)|(0))==6) {
    label = 8; break;
   }
   else {
   label = 9; break;
   }
  case 2: 
   var $6=(($v)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $11=$2;
   var $12=(($11+84)|0);
   var $13=HEAP32[(($12)>>2)];
   $1=$13;
   label = 10; break;
  case 4: 
   var $15=$2;
   var $16=(($15+88)|0);
   var $17=HEAP32[(($16)>>2)];
   $1=$17;
   label = 10; break;
  case 5: 
   var $19=$2;
   var $20=(($19+80)|0);
   var $21=HEAP32[(($20)>>2)];
   $1=$21;
   label = 10; break;
  case 6: 
   var $23=$2;
   var $24=(($23+92)|0);
   var $25=HEAP32[(($24)>>2)];
   $1=$25;
   label = 10; break;
  case 7: 
   var $27=$2;
   var $28=(($27+76)|0);
   var $29=HEAP32[(($28)>>2)];
   $1=$29;
   label = 10; break;
  case 8: 
   var $31=$2;
   var $32=(($31+72)|0);
   var $33=HEAP32[(($32)>>2)];
   $1=$33;
   label = 10; break;
  case 9: 
   var $35=(($v)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=$37;
   var $39=(($38+4)|0);
   var $40=HEAP32[(($39)>>2)];
   $1=$40;
   label = 10; break;
  case 10: 
   var $42=$1;
   STACKTOP = sp;
   return $42;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_respond_to($c, $mid) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $k;
   var $h;
   $2=$c;
   $3=$mid;
   label = 2; break;
  case 2: 
   var $5=$2;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $8=$2;
   var $9=(($8+16)|0);
   var $10=HEAP32[(($9)>>2)];
   $h=$10;
   var $11=$h;
   var $12=(($11)|(0))!=0;
   if ($12) { label = 4; break; } else { label = 9; break; }
  case 4: 
   var $14=$h;
   var $15=$3;
   var $16=_kh_get_mt($14, $15);
   $k=$16;
   var $17=$k;
   var $18=$h;
   var $19=(($18)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($17)|(0))!=(($20)|(0));
   if ($21) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $23=$k;
   var $24=$h;
   var $25=(($24+24)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26+($23<<2))|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|(0))!=0;
   if ($29) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $1=1;
   label = 11; break;
  case 7: 
   $1=0;
   label = 11; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $34=$2;
   var $35=(($34+20)|0);
   var $36=HEAP32[(($35)>>2)];
   $2=$36;
   label = 2; break;
  case 10: 
   $1=0;
   label = 11; break;
  case 11: 
   var $39=$1;
   return $39;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_respond_to($mrb, $obj, $mid) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 $1=$mrb;
 $2=$mid;
 var $3=$1;
 var $4=_mrb_class807($3, $obj);
 var $5=$2;
 var $6=_mrb_obj_respond_to($4, $5);
 STACKTOP = sp;
 return $6;
}
function _mrb_class_path($agg_result, $mrb, $c) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 88)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $path=sp;
   var $name;
   var $len=(sp)+(12);
   var $classpath;
   var $3=(sp)+(16);
   var $outer;
   var $sym;
   var $base=(sp)+(28);
   var $4=(sp)+(40);
   var $5=(sp)+(52);
   var $6=(sp)+(64);
   var $7=(sp)+(76);
   $1=$mrb;
   $2=$c;
   var $8=$1;
   var $9=_mrb_intern2($8, ((97032)|0), 13);
   $classpath=$9;
   var $10=$1;
   var $11=$2;
   var $12=$11;
   var $13=$classpath;
   _mrb_obj_iv_get($3, $10, $12, $13);
   var $14=$path;
   var $15=$3;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   var $16=(($path+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0))==0;
   if ($18) { label = 2; break; } else { label = 11; break; }
  case 2: 
   var $20=(($path)|0);
   var $21=$20;
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))!=0;
   if ($23) { label = 11; break; } else { label = 3; break; }
  case 3: 
   var $25=$1;
   var $26=$2;
   var $27=_mrb_class_outer_module($25, $26);
   $outer=$27;
   var $28=$1;
   var $29=$2;
   var $30=$outer;
   var $31=_mrb_class_sym($28, $29, $30);
   $sym=$31;
   var $32=$sym;
   var $33=(($32 << 16) >> 16);
   var $34=(($33)|(0))==0;
   if ($34) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _mrb_nil_value798($agg_result);
   label = 12; break;
  case 5: 
   var $37=$outer;
   var $38=(($37)|(0))!=0;
   if ($38) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $40=$outer;
   var $41=$1;
   var $42=(($41+44)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($40)|(0))!=(($43)|(0));
   if ($44) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $46=$1;
   var $47=$outer;
   _mrb_class_path($base, $46, $47);
   var $48=$1;
   var $49=$1;
   _mrb_str_new($4, $49, ((96536)|0), 2);
   _mrb_str_plus($5, $48, $base, $4);
   var $50=$path;
   var $51=$5;
   assert(12 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)];HEAP32[((($50)+(8))>>2)]=HEAP32[((($51)+(8))>>2)];
   var $52=$1;
   var $53=$sym;
   var $54=_mrb_sym2name_len($52, $53, $len);
   $name=$54;
   var $55=$1;
   var $56=$1;
   var $57=$name;
   var $58=HEAP32[(($len)>>2)];
   _mrb_str_new($6, $56, $57, $58);
   _mrb_str_concat($55, $path, $6);
   label = 9; break;
  case 8: 
   var $60=$1;
   var $61=$sym;
   var $62=_mrb_sym2name_len($60, $61, $len);
   $name=$62;
   var $63=$1;
   var $64=$name;
   var $65=HEAP32[(($len)>>2)];
   _mrb_str_new($7, $63, $64, $65);
   var $66=$path;
   var $67=$7;
   assert(12 % 1 === 0);HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($67)+(4))>>2)];HEAP32[((($66)+(8))>>2)]=HEAP32[((($67)+(8))>>2)];
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $70=$1;
   var $71=$2;
   var $72=$71;
   var $73=$classpath;
   _mrb_obj_iv_set($70, $72, $73, $path);
   label = 11; break;
  case 11: 
   var $75=$agg_result;
   var $76=$path;
   assert(12 % 1 === 0);HEAP32[(($75)>>2)]=HEAP32[(($76)>>2)];HEAP32[((($75)+(4))>>2)]=HEAP32[((($76)+(4))>>2)];HEAP32[((($75)+(8))>>2)]=HEAP32[((($76)+(8))>>2)];
   label = 12; break;
  case 12: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_class_name($mrb, $c) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $path=sp;
   var $3=(sp)+(12);
   var $4=(sp)+(24);
   var $5=(sp)+(36);
   $1=$mrb;
   $2=$c;
   var $6=$1;
   var $7=$2;
   _mrb_class_path($path, $6, $7);
   var $8=(($path+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==0;
   if ($10) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $12=(($path)|0);
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0))!=0;
   if ($15) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $17=$1;
   _mrb_str_new($3, $17, ((96236)|0), 8);
   var $18=$path;
   var $19=$3;
   assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
   var $20=$1;
   var $21=$1;
   var $22=$2;
   var $23=$22;
   _mrb_ptr_to_str($4, $21, $23);
   _mrb_str_concat($20, $path, $4);
   var $24=$1;
   _mrb_str_cat($5, $24, $path, ((96040)|0), 1);
   label = 4; break;
  case 4: 
   var $26=(($path)|0);
   var $27=$26;
   var $28=HEAP32[(($27)>>2)];
   var $29=$28;
   var $30=(($29+20)|0);
   var $31=HEAP32[(($30)>>2)];
   STACKTOP = sp;
   return $31;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_classname($mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=_mrb_obj_class($3, $obj);
 var $5=_mrb_class_name($2, $4);
 STACKTOP = sp;
 return $5;
}
function _mrb_obj_class($mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_class807($2, $obj);
 var $4=_mrb_class_real($3);
 STACKTOP = sp;
 return $4;
}
function _mrb_check_inheritable($mrb, $super) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3=sp;
   $1=$mrb;
   $2=$super;
   var $4=$2;
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=$6 & 255;
   var $8=(($7)|(0))!=9;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$1;
   var $11=$1;
   var $12=_mrb_class_get($11, ((98236)|0));
   var $13=$2;
   var $14=$13;
   _mrb_obj_value775($3, $14);
   _mrb_raisef($10, $12, ((95356)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
   label = 3; break;
  case 3: 
   var $16=$2;
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   var $19=$18 & 255;
   var $20=(($19)|(0))==12;
   if ($20) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $22=$1;
   var $23=$1;
   var $24=_mrb_class_get($23, ((98236)|0));
   _mrb_raise($22, $24, ((95824)|0));
   label = 5; break;
  case 5: 
   var $26=$2;
   var $27=$1;
   var $28=(($27+48)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($26)|(0))==(($29)|(0));
   if ($30) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $32=$1;
   var $33=$1;
   var $34=_mrb_class_get($33, ((98236)|0));
   _mrb_raise($32, $34, ((95616)|0));
   label = 7; break;
  case 7: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _boot_defclass($mrb, $super) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   $1=$mrb;
   $2=$super;
   var $3=$1;
   var $4=$1;
   var $5=(($4+48)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=_mrb_obj_alloc($3, 9, $6);
   var $8=$7;
   $c=$8;
   var $9=$2;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$2;
   var $18 = $12;label = 4; break;
  case 3: 
   var $14=$1;
   var $15=(($14+44)|0);
   var $16=HEAP32[(($15)>>2)];
   var $18 = $16;label = 4; break;
  case 4: 
   var $18;
   var $19=$c;
   var $20=(($19+20)|0);
   HEAP32[(($20)>>2)]=$18;
   var $21=$1;
   var $22=$c;
   var $23=$22;
   var $24=$2;
   var $25=$24;
   _mrb_field_write_barrier($21, $23, $25);
   var $26=$1;
   var $27=_kh_init_mt($26);
   var $28=$c;
   var $29=(($28+16)|0);
   HEAP32[(($29)>>2)]=$27;
   var $30=$c;
   return $30;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_alias_method($mrb, $c, $a, $b) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $m;
 var $5=sp;
 $1=$mrb;
 $2=$c;
 $3=$a;
 $4=$b;
 var $6=$1;
 var $7=$2;
 var $8=$4;
 var $9=_mrb_method_search($6, $7, $8);
 $m=$9;
 var $10=$1;
 var $11=$2;
 var $12=$3;
 var $13=$m;
 var $14=$13;
 _mrb_obj_value775($5, $14);
 _mrb_define_method_vm($10, $11, $12, $5);
 STACKTOP = sp;
 return;
}
function _mrb_define_alias($mrb, $klass, $name1, $name2) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 $1=$mrb;
 $2=$klass;
 $3=$name1;
 $4=$name2;
 var $5=$1;
 var $6=$2;
 var $7=$1;
 var $8=$3;
 var $9=_mrb_intern_cstr($7, $8);
 var $10=$1;
 var $11=$4;
 var $12=_mrb_intern_cstr($10, $11);
 _mrb_alias_method($5, $6, $9, $12);
 return;
}
function _mrb_mod_alias($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $c;
 var $new_name=sp;
 var $old_name=(sp)+(4);
 $1=$mrb;
 var $2=(($mod)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 $c=$5;
 var $6=$1;
 var $7=_mrb_get_args($6, ((95352)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$new_name,HEAP32[(((tempInt)+(4))>>2)]=$old_name,tempInt));
 var $8=$1;
 var $9=$c;
 var $10=HEAP16[(($new_name)>>1)];
 var $11=HEAP16[(($old_name)>>1)];
 _mrb_alias_method($8, $9, $10, $11);
 _mrb_nil_value798($agg_result);
 STACKTOP = sp;
 return;
}
function _mrb_undef_method($mrb, $c, $name) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$mrb;
 $2=$c;
 $3=$name;
 var $4=$1;
 var $5=$2;
 var $6=$1;
 var $7=$3;
 var $8=_mrb_intern_cstr($6, $7);
 _undef_method($4, $5, $8);
 return;
}
function _undef_method($mrb, $c, $a) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $m=sp;
   var $4=(sp)+(12);
   var $5=(sp)+(24);
   $1=$mrb;
   $2=$c;
   $3=$a;
   var $6=$2;
   var $7=$3;
   var $8=_mrb_obj_respond_to($6, $7);
   var $9=(($8 << 24) >> 24)!=0;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=$1;
   var $12=$3;
   var $13=$1;
   var $14=$3;
   _mrb_sym2str($4, $13, $14);
   var $15=$2;
   var $16=$15;
   _mrb_obj_value775($5, $16);
   _mrb_name_error($11, $12, ((85952)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($5)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
   label = 6; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $19=(($m+8)|0);
   HEAP32[(($19)>>2)]=13;
   var $20=(($m)|0);
   var $21=$20;
   HEAP32[(($21)>>2)]=0;
   label = 5; break;
  case 5: 
   var $23=$1;
   var $24=$2;
   var $25=$3;
   _mrb_define_method_vm($23, $24, $25, $m);
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_undef_class_method($mrb, $c, $name) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4=sp;
 var $5=(sp)+(12);
 $1=$mrb;
 $2=$c;
 $3=$name;
 var $6=$1;
 var $7=$1;
 var $8=$2;
 var $9=$8;
 _mrb_obj_value775($4, $9);
 _mrb_singleton_class($5, $7, $4);
 var $10=(($5)|0);
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=$12;
 var $14=$3;
 _mrb_undef_method($6, $13, $14);
 STACKTOP = sp;
 return;
}
function _mrb_mod_undef($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $c;
   var $argc=sp;
   var $argv=(sp)+(4);
   $1=$mrb;
   var $2=(($mod)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $c=$5;
   var $6=$1;
   var $7=_mrb_get_args($6, ((95152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
   label = 2; break;
  case 2: 
   var $9=HEAP32[(($argc)>>2)];
   var $10=((($9)-(1))|0);
   HEAP32[(($argc)>>2)]=$10;
   var $11=(($9)|(0))!=0;
   if ($11) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $13=$1;
   var $14=$c;
   var $15=HEAP32[(($argv)>>2)];
   var $16=(($15)|0);
   var $17=$16;
   var $18=HEAP16[(($17)>>1)];
   _undef_method($13, $14, $18);
   var $19=HEAP32[(($argv)>>2)];
   var $20=(($19+12)|0);
   HEAP32[(($argv)>>2)]=$20;
   label = 2; break;
  case 4: 
   _mrb_nil_value798($agg_result);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mod_remove_cvar($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $val=sp;
   var $id=(sp)+(12);
   var $2=(sp)+(16);
   var $3=(sp)+(28);
   var $4=(sp)+(40);
   $1=$mrb;
   var $5=$1;
   var $6=_mrb_get_args($5, ((94960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$id,tempInt));
   var $7=$1;
   var $8=HEAP16[(($id)>>1)];
   _check_cv_name_sym($7, $8);
   var $9=$1;
   var $10=HEAP16[(($id)>>1)];
   _mrb_iv_remove($2, $9, $mod, $10);
   var $11=$val;
   var $12=$2;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   var $13=(($val+8)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0))==5;
   if ($15) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $17=$agg_result;
   var $18=$val;
   assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
   label = 6; break;
  case 3: 
   var $20=$1;
   var $21=HEAP16[(($id)>>1)];
   var $22=_mrb_cv_defined($20, $mod, $21);
   var $23=(($22 << 24) >> 24)!=0;
   if ($23) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $25=$1;
   var $26=HEAP16[(($id)>>1)];
   var $27=$1;
   var $28=HEAP16[(($id)>>1)];
   _mrb_sym2str($3, $27, $28);
   _mrb_name_error($25, $26, ((94644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($mod)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($mod)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($mod)+(8))>>2)],tempInt));
   label = 5; break;
  case 5: 
   var $30=$1;
   var $31=HEAP16[(($id)>>1)];
   var $32=$1;
   var $33=HEAP16[(($id)>>1)];
   _mrb_sym2str($4, $32, $33);
   _mrb_name_error($30, $31, ((94384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($mod)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($mod)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($mod)+(8))>>2)],tempInt));
   _mrb_nil_value798($agg_result);
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _check_cv_name_sym($mrb, $id) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $s;
   var $len=sp;
   var $3=(sp)+(4);
   $1=$mrb;
   $2=$id;
   var $4=$1;
   var $5=$2;
   var $6=_mrb_sym2name_len($4, $5, $len);
   $s=$6;
   var $7=HEAP32[(($len)>>2)];
   var $8=(($7)>>>(0)) < 3;
   if ($8) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $10=$s;
   var $11=(($10)|0);
   var $12=HEAP8[($11)];
   var $13=(($12 << 24) >> 24);
   var $14=(($13)|(0))==64;
   if ($14) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $16=$s;
   var $17=(($16+1)|0);
   var $18=HEAP8[($17)];
   var $19=(($18 << 24) >> 24);
   var $20=(($19)|(0))==64;
   if ($20) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $22=$1;
   var $23=$2;
   var $24=$1;
   var $25=$2;
   _mrb_sym2str($3, $24, $25);
   _mrb_name_error($22, $23, ((86376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
   label = 5; break;
  case 5: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mod_remove_method($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $argc=sp;
   var $argv=(sp)+(4);
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((95152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
   label = 2; break;
  case 2: 
   var $5=HEAP32[(($argc)>>2)];
   var $6=((($5)-(1))|0);
   HEAP32[(($argc)>>2)]=$6;
   var $7=(($5)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $9=$1;
   var $10=HEAP32[(($argv)>>2)];
   var $11=(($10)|0);
   var $12=$11;
   var $13=HEAP16[(($12)>>1)];
   _remove_method($9, $mod, $13);
   var $14=HEAP32[(($argv)>>2)];
   var $15=(($14+12)|0);
   HEAP32[(($argv)>>2)]=$15;
   label = 2; break;
  case 4: 
   var $17=$agg_result;
   var $18=$mod;
   assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _remove_method($mrb, $mod, $mid) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   var $h;
   var $k;
   var $3=sp;
   $1=$mrb;
   $2=$mid;
   var $4=(($mod)|0);
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=$6;
   $c=$7;
   var $8=$c;
   var $9=(($8+16)|0);
   var $10=HEAP32[(($9)>>2)];
   $h=$10;
   var $11=$h;
   var $12=(($11)|(0))!=0;
   if ($12) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $14=$h;
   var $15=$2;
   var $16=_kh_get_mt($14, $15);
   $k=$16;
   var $17=$k;
   var $18=$h;
   var $19=(($18)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($17)|(0))!=(($20)|(0));
   if ($21) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $23=$h;
   var $24=$k;
   _kh_del_mt($23, $24);
   label = 6; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $27=$1;
   var $28=$2;
   var $29=$1;
   var $30=$2;
   _mrb_sym2str($3, $29, $30);
   _mrb_name_error($27, $28, ((86044)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($mod)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($mod)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($mod)+(8))>>2)],tempInt));
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mod_const_defined($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $id=sp;
   var $const_defined_p;
   var $2=(sp)+(12);
   var $sym=(sp)+(24);
   var $3=(sp)+(36);
   $1=$mrb;
   var $4=$1;
   _get_sym_or_str_arg($2, $4);
   var $5=$id;
   var $6=$2;
   assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
   var $7=(($id+8)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))==4;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$1;
   var $12=(($id)|0);
   var $13=$12;
   var $14=HEAP16[(($13)>>1)];
   _check_const_name_sym($11, $14);
   var $15=$1;
   var $16=(($id)|0);
   var $17=$16;
   var $18=HEAP16[(($17)>>1)];
   var $19=_mrb_const_defined($15, $mod, $18);
   $const_defined_p=$19;
   label = 8; break;
  case 3: 
   var $21=$1;
   _check_const_name_str($21, $id);
   var $22=$1;
   _mrb_check_intern_str($3, $22, $id);
   var $23=$sym;
   var $24=$3;
   assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
   var $25=(($sym+8)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|(0))==0;
   if ($27) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $29=(($sym)|0);
   var $30=$29;
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31)|(0))!=0;
   if ($32) { label = 6; break; } else { label = 5; break; }
  case 5: 
   $const_defined_p=0;
   label = 7; break;
  case 6: 
   var $35=$1;
   var $36=(($sym)|0);
   var $37=$36;
   var $38=HEAP16[(($37)>>1)];
   var $39=_mrb_const_defined($35, $mod, $38);
   $const_defined_p=$39;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $42=$const_defined_p;
   _mrb_bool_value816($agg_result, $42);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _get_sym_or_str_arg($agg_result, $mrb) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $sym_or_str=sp;
   var $obj=(sp)+(12);
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((87060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$sym_or_str,tempInt));
   var $4=(($sym_or_str+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))==4;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=(($sym_or_str+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==16;
   if ($10) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $12=$agg_result;
   var $13=$sym_or_str;
   assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
   label = 5; break;
  case 4: 
   var $15=$1;
   _mrb_funcall($obj, $15, $sym_or_str, ((101616)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $16=$1;
   var $17=$1;
   var $18=_mrb_class_get($17, ((98236)|0));
   _mrb_raisef($16, $18, ((101040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($obj)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj)+(8))>>2)],tempInt));
   _mrb_nil_value798($agg_result);
   label = 5; break;
  case 5: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _check_const_name_sym($mrb, $id) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $s;
   var $len=sp;
   var $3=(sp)+(4);
   $1=$mrb;
   $2=$id;
   var $4=$1;
   var $5=$2;
   var $6=_mrb_sym2name_len($4, $5, $len);
   $s=$6;
   var $7=HEAP32[(($len)>>2)];
   var $8=(($7)>>>(0)) < 1;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=$s;
   var $11=HEAP8[($10)];
   var $12=(($11)&(255));
   var $13=_isupper($12);
   var $14=(($13)|(0))!=0;
   if ($14) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $16=$1;
   var $17=$2;
   var $18=$1;
   var $19=$2;
   _mrb_sym2str($3, $18, $19);
   _mrb_name_error($16, $17, ((86160)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _check_const_name_str($mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$mrb;
   var $2=(($str)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=(($5+12)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0)) < 1;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=(($str)|0);
   var $11=$10;
   var $12=HEAP32[(($11)>>2)];
   var $13=$12;
   var $14=(($13+20)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=HEAP8[($15)];
   var $17=(($16)&(255));
   var $18=_isupper($17);
   var $19=(($18)|(0))!=0;
   if ($19) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $21=$1;
   var $22=$1;
   var $23=_mrb_intern_str($22, $str);
   _mrb_name_error($21, $23, ((86160)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($str)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($str)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($str)+(8))>>2)],tempInt));
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_bool_value816($agg_result, $boolean) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$boolean;
   label = 2; break;
  case 2: 
   var $3=$1;
   var $4=(($3)&(255));
   var $5=(($4)|(0))!=0;
   var $6=$5 ? 2 : 0;
   var $7=(($v+8)|0);
   HEAP32[(($7)>>2)]=$6;
   var $8=(($v)|0);
   var $9=$8;
   HEAP32[(($9)>>2)]=1;
   label = 3; break;
  case 3: 
   var $11=$agg_result;
   var $12=$v;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mod_const_get($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $id=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((94960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$id,tempInt));
 var $4=$1;
 var $5=HEAP16[(($id)>>1)];
 _check_const_name_sym($4, $5);
 var $6=$1;
 var $7=HEAP16[(($id)>>1)];
 _mrb_const_get($agg_result, $6, $mod, $7);
 STACKTOP = sp;
 return;
}
function _mrb_mod_const_set($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $id=sp;
 var $value=(sp)+(4);
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((94008)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$id,HEAP32[(((tempInt)+(4))>>2)]=$value,tempInt));
 var $4=$1;
 var $5=HEAP16[(($id)>>1)];
 _check_const_name_sym($4, $5);
 var $6=$1;
 var $7=HEAP16[(($id)>>1)];
 _mrb_const_set($6, $mod, $7, $value);
 var $8=$agg_result;
 var $9=$value;
 assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_mod_remove_const($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $id=sp;
   var $val=(sp)+(4);
   var $2=(sp)+(16);
   var $3=(sp)+(28);
   $1=$mrb;
   var $4=$1;
   var $5=_mrb_get_args($4, ((94960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$id,tempInt));
   var $6=$1;
   var $7=HEAP16[(($id)>>1)];
   _check_const_name_sym($6, $7);
   var $8=$1;
   var $9=HEAP16[(($id)>>1)];
   _mrb_iv_remove($2, $8, $mod, $9);
   var $10=$val;
   var $11=$2;
   assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
   var $12=(($val+8)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))==5;
   if ($14) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $16=$1;
   var $17=HEAP16[(($id)>>1)];
   var $18=$1;
   var $19=HEAP16[(($id)>>1)];
   _mrb_sym2str($3, $18, $19);
   _mrb_name_error($16, $17, ((93712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
   label = 3; break;
  case 3: 
   var $21=$agg_result;
   var $22=$val;
   assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_init_class($mrb) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $bob;
 var $obj;
 var $mod;
 var $cls;
 var $2=sp;
 var $3=(sp)+(12);
 var $4=(sp)+(24);
 var $5=(sp)+(36);
 var $6=(sp)+(48);
 $1=$mrb;
 var $7=$1;
 var $8=_boot_defclass($7, 0);
 $bob=$8;
 var $9=$1;
 var $10=$bob;
 var $11=_boot_defclass($9, $10);
 $obj=$11;
 var $12=$obj;
 var $13=$1;
 var $14=(($13+44)|0);
 HEAP32[(($14)>>2)]=$12;
 var $15=$1;
 var $16=$obj;
 var $17=_boot_defclass($15, $16);
 $mod=$17;
 var $18=$mod;
 var $19=$1;
 var $20=(($19+52)|0);
 HEAP32[(($20)>>2)]=$18;
 var $21=$1;
 var $22=$mod;
 var $23=_boot_defclass($21, $22);
 $cls=$23;
 var $24=$cls;
 var $25=$1;
 var $26=(($25+48)|0);
 HEAP32[(($26)>>2)]=$24;
 var $27=$cls;
 var $28=$cls;
 var $29=(($28+4)|0);
 HEAP32[(($29)>>2)]=$27;
 var $30=$mod;
 var $31=(($30+4)|0);
 HEAP32[(($31)>>2)]=$27;
 var $32=$obj;
 var $33=(($32+4)|0);
 HEAP32[(($33)>>2)]=$27;
 var $34=$bob;
 var $35=(($34+4)|0);
 HEAP32[(($35)>>2)]=$27;
 var $36=$1;
 var $37=$bob;
 var $38=$37;
 _prepare_singleton_class($36, $38);
 var $39=$1;
 var $40=$obj;
 var $41=$40;
 _prepare_singleton_class($39, $41);
 var $42=$1;
 var $43=$mod;
 var $44=$43;
 _prepare_singleton_class($42, $44);
 var $45=$1;
 var $46=$cls;
 var $47=$46;
 _prepare_singleton_class($45, $47);
 var $48=$1;
 var $49=$bob;
 var $50=$bob;
 var $51=$50;
 _mrb_obj_value775($2, $51);
 _mrb_define_const($48, $49, ((93408)|0), $2);
 var $52=$1;
 var $53=$obj;
 var $54=$bob;
 var $55=$54;
 _mrb_obj_value775($3, $55);
 _mrb_define_const($52, $53, ((93408)|0), $3);
 var $56=$1;
 var $57=$obj;
 var $58=$obj;
 var $59=$58;
 _mrb_obj_value775($4, $59);
 _mrb_define_const($56, $57, ((93192)|0), $4);
 var $60=$1;
 var $61=$obj;
 var $62=$mod;
 var $63=$62;
 _mrb_obj_value775($5, $63);
 _mrb_define_const($60, $61, ((92944)|0), $5);
 var $64=$1;
 var $65=$obj;
 var $66=$cls;
 var $67=$66;
 _mrb_obj_value775($6, $67);
 _mrb_define_const($64, $65, ((92732)|0), $6);
 var $68=$1;
 var $69=$bob;
 var $70=$1;
 var $71=_mrb_intern2($70, ((93408)|0), 11);
 _mrb_name_class($68, $69, $71);
 var $72=$1;
 var $73=$obj;
 var $74=$1;
 var $75=_mrb_intern2($74, ((93192)|0), 6);
 _mrb_name_class($72, $73, $75);
 var $76=$1;
 var $77=$mod;
 var $78=$1;
 var $79=_mrb_intern2($78, ((92944)|0), 6);
 _mrb_name_class($76, $77, $79);
 var $80=$1;
 var $81=$cls;
 var $82=$1;
 var $83=_mrb_intern2($82, ((92732)|0), 5);
 _mrb_name_class($80, $81, $83);
 var $84=$cls;
 var $85=$84;
 var $86=HEAP32[(($85)>>2)];
 var $87=$86 >>> 11;
 var $88=$87 & 2097151;
 var $89=$88 & -256;
 var $90=$89 | 9;
 var $91=$cls;
 var $92=$90 & 2097151;
 var $93=$91;
 var $94=$92 & 2097151;
 var $95=$94 << 11;
 var $96=HEAP32[(($93)>>2)];
 var $97=$96 & 2047;
 var $98=$97 | $95;
 HEAP32[(($93)>>2)]=$98;
 var $99=$1;
 var $100=$bob;
 _mrb_define_method($99, $100, ((92572)|0), 410, 0);
 var $101=$1;
 var $102=$bob;
 _mrb_define_method($101, $102, ((92376)|0), 386, 0);
 var $103=$1;
 var $104=$bob;
 _mrb_define_method($103, $104, ((92124)|0), 8, 4096);
 var $105=$1;
 var $106=$cls;
 _mrb_define_class_method($105, $106, ((91896)|0), 534, 4096);
 var $107=$1;
 var $108=$cls;
 _mrb_define_method($107, $108, ((91460)|0), 490, 0);
 var $109=$1;
 var $110=$cls;
 _mrb_define_method($109, $110, ((91896)|0), 598, 4096);
 var $111=$1;
 var $112=$cls;
 _mrb_define_method($111, $112, ((90236)|0), 410, 262144);
 var $113=$mod;
 var $114=$113;
 var $115=HEAP32[(($114)>>2)];
 var $116=$115 >>> 11;
 var $117=$116 & 2097151;
 var $118=$117 & -256;
 var $119=$118 | 10;
 var $120=$mod;
 var $121=$119 & 2097151;
 var $122=$120;
 var $123=$121 & 2097151;
 var $124=$123 << 11;
 var $125=HEAP32[(($122)>>2)];
 var $126=$125 & 2047;
 var $127=$126 | $124;
 HEAP32[(($122)>>2)]=$127;
 var $128=$1;
 var $129=$mod;
 _mrb_define_method($128, $129, ((91172)|0), 480, 262144);
 var $130=$1;
 var $131=$mod;
 _mrb_define_method($130, $131, ((90924)|0), 434, 262144);
 var $132=$1;
 var $133=$mod;
 _mrb_define_method($132, $133, ((90660)|0), 496, 524288);
 var $134=$1;
 var $135=$mod;
 _mrb_define_method($134, $135, ((90464)|0), 634, 262144);
 var $136=$1;
 var $137=$mod;
 _mrb_define_method($136, $137, ((90224)|0), 410, 262144);
 var $138=$1;
 var $139=$mod;
 _mrb_define_method($138, $139, ((90016)|0), 580, 4096);
 var $140=$1;
 var $141=$mod;
 _mrb_define_method($140, $141, ((89880)|0), 48, 262144);
 var $142=$1;
 var $143=$mod;
 _mrb_define_method($142, $143, ((89808)|0), 236, 262144);
 var $144=$1;
 var $145=$mod;
 _mrb_define_method($144, $145, ((89676)|0), 220, 4096);
 var $146=$1;
 var $147=$mod;
 _mrb_define_method($146, $147, ((89352)|0), 410, 262144);
 var $148=$1;
 var $149=$mod;
 _mrb_define_method($148, $149, ((89240)|0), 88, 0);
 var $150=$1;
 var $151=$mod;
 _mrb_define_method($150, $151, ((89144)|0), 164, 4096);
 var $152=$1;
 var $153=$mod;
 _mrb_define_method($152, $153, ((89064)|0), 286, 262144);
 var $154=$1;
 var $155=$mod;
 _mrb_define_method($154, $155, ((89004)|0), 220, 4096);
 var $156=$1;
 var $157=$mod;
 _mrb_define_method($156, $157, ((88880)|0), 650, 4096);
 var $158=$1;
 var $159=$mod;
 _mrb_define_method($158, $159, ((88784)|0), 650, 4096);
 var $160=$1;
 var $161=$mod;
 _mrb_define_method($160, $161, ((88700)|0), 650, 4096);
 var $162=$1;
 var $163=$mod;
 _mrb_define_method($162, $163, ((88592)|0), 12, 262144);
 var $164=$1;
 var $165=$mod;
 _mrb_define_method($164, $165, ((88520)|0), 256, 4096);
 var $166=$1;
 var $167=$mod;
 _mrb_define_method($166, $167, ((88148)|0), 548, 0);
 var $168=$1;
 var $169=$mod;
 _mrb_define_method($168, $169, ((101616)|0), 548, 0);
 var $170=$1;
 var $171=$mod;
 _mrb_define_method($170, $171, ((88064)|0), 586, 4096);
 var $172=$1;
 var $173=$mod;
 _mrb_define_method($172, $173, ((87988)|0), 366, 0);
 var $174=$1;
 var $175=$mod;
 _mrb_define_method($174, $175, ((87916)|0), 2, 4096);
 var $176=$1;
 var $177=$mod;
 _mrb_define_method($176, $177, ((87864)|0), 616, 262144);
 var $178=$1;
 var $179=$mod;
 _mrb_define_method($178, $179, ((87744)|0), 666, 262144);
 var $180=$1;
 var $181=$mod;
 _mrb_define_method($180, $181, ((87700)|0), 396, 524288);
 var $182=$1;
 var $183=$mod;
 _mrb_define_method($182, $183, ((87620)|0), 106, 0);
 var $184=$1;
 var $185=$mod;
 _mrb_define_method($184, $185, ((87556)|0), 180, 262144);
 var $186=$1;
 var $187=$mod;
 _mrb_define_method($186, $187, ((87476)|0), 196, 262144);
 var $188=$1;
 var $189=$mod;
 _mrb_define_method($188, $189, ((87232)|0), 704, 0);
 var $190=$1;
 var $191=$mod;
 _mrb_define_method($190, $191, ((87184)|0), 384, 262144);
 var $192=$1;
 var $193=$mod;
 _mrb_define_class_method($192, $193, ((87620)|0), 624, 4096);
 var $194=$1;
 var $195=$cls;
 _mrb_undef_method($194, $195, ((89808)|0));
 var $196=$1;
 var $197=$cls;
 _mrb_undef_method($196, $197, ((90464)|0));
 STACKTOP = sp;
 return;
}
function _mrb_bob_init($agg_result, $mrb, $cv) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $cv; $cv = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($cv)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($cv)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($cv)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 _mrb_nil_value798($agg_result);
 STACKTOP = sp;
 return;
}
function _mrb_bob_not($agg_result, $mrb, $cv) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $cv; $cv = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($cv)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($cv)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($cv)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=(($cv+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|(0))!=0;
 var $5=$4 ^ 1;
 var $6=(($5)&(1));
 var $7=(($6) & 255);
 _mrb_bool_value816($agg_result, $7);
 STACKTOP = sp;
 return;
}
function _mrb_bob_missing($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $name=sp;
   var $a=(sp)+(4);
   var $alen=(sp)+(8);
   var $inspect=(sp)+(12);
   var $2=(sp)+(24);
   var $3=(sp)+(36);
   var $4=(sp)+(48);
   var $5=(sp)+(60);
   $1=$mrb;
   var $6=$1;
   var $7=_mrb_get_args($6, ((86344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$name,HEAP32[(((tempInt)+(4))>>2)]=$a,HEAP32[(((tempInt)+(8))>>2)]=$alen,tempInt));
   var $8=$1;
   var $9=$1;
   var $10=_mrb_intern2($9, ((101616)|0), 7);
   var $11=_mrb_respond_to($8, $mod, $10);
   var $12=(($11 << 24) >> 24)!=0;
   if ($12) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $14=$1;
   _mrb_funcall($2, $14, $mod, ((101616)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $15=$inspect;
   var $16=$2;
   assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
   var $17=(($inspect)|0);
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=$19;
   var $21=(($20+12)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0)) > 64;
   if ($23) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $25=$1;
   _mrb_any_to_s($3, $25, $mod);
   var $26=$inspect;
   var $27=$3;
   assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
   label = 4; break;
  case 4: 
   label = 6; break;
  case 5: 
   var $30=$1;
   _mrb_any_to_s($4, $30, $mod);
   var $31=$inspect;
   var $32=$4;
   assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
   label = 6; break;
  case 6: 
   var $34=$1;
   var $35=$1;
   var $36=_mrb_class_get($35, ((86300)|0));
   var $37=$1;
   var $38=HEAP16[(($name)>>1)];
   _mrb_sym2str($5, $37, $38);
   _mrb_raisef($34, $36, ((86208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($5)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($5)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($inspect)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($inspect)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($inspect)+(8))>>2)],tempInt));
   _mrb_nil_value798($agg_result);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mod_cvar_defined($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $id=sp;
   var $defined_p;
   var $2=(sp)+(12);
   var $sym=(sp)+(24);
   var $3=(sp)+(36);
   $1=$mrb;
   var $4=$1;
   _get_sym_or_str_arg($2, $4);
   var $5=$id;
   var $6=$2;
   assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
   var $7=(($id+8)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))==4;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$1;
   var $12=(($id)|0);
   var $13=$12;
   var $14=HEAP16[(($13)>>1)];
   _check_cv_name_sym($11, $14);
   var $15=$1;
   var $16=(($id)|0);
   var $17=$16;
   var $18=HEAP16[(($17)>>1)];
   var $19=_mrb_cv_defined($15, $mod, $18);
   $defined_p=$19;
   label = 8; break;
  case 3: 
   var $21=$1;
   _check_cv_name_str($21, $id);
   var $22=$1;
   _mrb_check_intern_str($3, $22, $id);
   var $23=$sym;
   var $24=$3;
   assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
   var $25=(($sym+8)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|(0))==0;
   if ($27) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $29=(($sym)|0);
   var $30=$29;
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31)|(0))!=0;
   if ($32) { label = 6; break; } else { label = 5; break; }
  case 5: 
   $defined_p=0;
   label = 7; break;
  case 6: 
   var $35=$1;
   var $36=(($sym)|0);
   var $37=$36;
   var $38=HEAP16[(($37)>>1)];
   var $39=_mrb_cv_defined($35, $mod, $38);
   $defined_p=$39;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $42=$defined_p;
   _mrb_bool_value816($agg_result, $42);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mod_cvar_get($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $id=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((94960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$id,tempInt));
 var $4=$1;
 var $5=HEAP16[(($id)>>1)];
 _check_cv_name_sym($4, $5);
 var $6=$1;
 var $7=HEAP16[(($id)>>1)];
 _mrb_cv_get($agg_result, $6, $mod, $7);
 STACKTOP = sp;
 return;
}
function _mrb_mod_cvar_set($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $value=sp;
 var $id=(sp)+(12);
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((94008)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$id,HEAP32[(((tempInt)+(4))>>2)]=$value,tempInt));
 var $4=$1;
 var $5=HEAP16[(($id)>>1)];
 _check_cv_name_sym($4, $5);
 var $6=$1;
 var $7=HEAP16[(($id)>>1)];
 _mrb_cv_set($6, $mod, $7, $value);
 var $8=$agg_result;
 var $9=$value;
 assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_mod_extend_object($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $obj=sp;
 var $2=(sp)+(12);
 $1=$mrb;
 var $3=$1;
 _mrb_check_type($3, $mod, 10);
 var $4=$1;
 var $5=_mrb_get_args($4, ((87060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$obj,tempInt));
 var $6=$1;
 var $7=$1;
 _mrb_singleton_class($2, $7, $obj);
 var $8=(($2)|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10;
 var $12=(($mod)|0);
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 _mrb_include_module($6, $11, $15);
 var $16=$agg_result;
 var $17=$mod;
 assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_mod_include($agg_result, $mrb, $klass) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $klass; $klass = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($klass)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($klass)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($klass)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $argv=sp;
   var $argc=(sp)+(4);
   var $i;
   var $2=(sp)+(8);
   var $3=(sp)+(20);
   $1=$mrb;
   var $4=$1;
   var $5=_mrb_get_args($4, ((95152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
   $i=0;
   label = 2; break;
  case 2: 
   var $7=$i;
   var $8=HEAP32[(($argc)>>2)];
   var $9=(($7)|(0)) < (($8)|(0));
   if ($9) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $11=$1;
   var $12=$i;
   var $13=HEAP32[(($argv)>>2)];
   var $14=(($13+((($12)*(12))&-1))|0);
   _mrb_check_type($11, $14, 10);
   label = 4; break;
  case 4: 
   var $16=$i;
   var $17=((($16)+(1))|0);
   $i=$17;
   label = 2; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $20=HEAP32[(($argc)>>2)];
   var $21=((($20)-(1))|0);
   HEAP32[(($argc)>>2)]=$21;
   var $22=(($20)|(0))!=0;
   if ($22) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $24=$1;
   var $25=HEAP32[(($argc)>>2)];
   var $26=HEAP32[(($argv)>>2)];
   var $27=(($26+((($25)*(12))&-1))|0);
   _mrb_funcall($2, $24, $27, ((89808)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($klass)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($klass)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($klass)+(8))>>2)],tempInt));
   var $28=$1;
   var $29=HEAP32[(($argc)>>2)];
   var $30=HEAP32[(($argv)>>2)];
   var $31=(($30+((($29)*(12))&-1))|0);
   _mrb_funcall($3, $28, $31, ((89352)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($klass)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($klass)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($klass)+(8))>>2)],tempInt));
   label = 6; break;
  case 8: 
   var $33=$agg_result;
   var $34=$klass;
   assert(12 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];HEAP32[((($33)+(8))>>2)]=HEAP32[((($34)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mod_include_p($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $mod2=sp;
   var $c;
   $1=$mrb;
   var $2=(($mod)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $c=$5;
   var $6=$1;
   var $7=_mrb_get_args($6, ((87060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$mod2,tempInt));
   var $8=$1;
   _mrb_check_type($8, $mod2, 10);
   label = 2; break;
  case 2: 
   var $10=$c;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $13=$c;
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 & 255;
   var $17=(($16)|(0))==11;
   if ($17) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $19=$c;
   var $20=(($19+4)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($mod2)|0);
   var $23=$22;
   var $24=HEAP32[(($23)>>2)];
   var $25=$24;
   var $26=(($21)|(0))==(($25)|(0));
   if ($26) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _mrb_true_value817($agg_result);
   label = 9; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $30=$c;
   var $31=(($30+20)|0);
   var $32=HEAP32[(($31)>>2)];
   $c=$32;
   label = 2; break;
  case 8: 
   _mrb_false_value818($agg_result);
   label = 9; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mod_append_features($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $klass=sp;
 $1=$mrb;
 var $2=$1;
 _mrb_check_type($2, $mod, 10);
 var $3=$1;
 var $4=_mrb_get_args($3, ((87060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$klass,tempInt));
 var $5=$1;
 var $6=(($klass)|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=$8;
 var $10=(($mod)|0);
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=$12;
 _mrb_include_module($5, $9, $13);
 var $14=$agg_result;
 var $15=$mod;
 assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_mod_included_modules($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $result=sp;
   var $c;
   var $2=(sp)+(12);
   var $3=(sp)+(24);
   $1=$mrb;
   var $4=(($self)|0);
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=$6;
   $c=$7;
   var $8=$1;
   _mrb_ary_new($2, $8);
   var $9=$result;
   var $10=$2;
   assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   label = 2; break;
  case 2: 
   var $12=$c;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $15=$c;
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $18=$17 & 255;
   var $19=(($18)|(0))==11;
   if ($19) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=$1;
   var $22=$c;
   var $23=(($22+4)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$24;
   _mrb_obj_value775($3, $25);
   _mrb_ary_push($21, $result, $3);
   label = 5; break;
  case 5: 
   var $27=$c;
   var $28=(($27+20)|0);
   var $29=HEAP32[(($28)>>2)];
   $c=$29;
   label = 2; break;
  case 6: 
   var $31=$agg_result;
   var $32=$result;
   assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mod_instance_methods($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $c;
 var $recur=sp;
 $1=$mrb;
 var $2=(($mod)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 $c=$5;
 HEAP8[($recur)]=1;
 var $6=$1;
 var $7=_mrb_get_args($6, ((86668)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$recur,tempInt));
 var $8=$1;
 var $9=HEAP8[($recur)];
 var $10=$c;
 _class_instance_method_list($agg_result, $8, $9, $10, 0);
 STACKTOP = sp;
 return;
}
function _mrb_mod_method_defined($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $id=sp;
   var $method_defined_p;
   var $2=(sp)+(12);
   var $sym=(sp)+(24);
   $1=$mrb;
   var $3=$1;
   _get_sym_or_str_arg($2, $3);
   var $4=$id;
   var $5=$2;
   assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
   var $6=(($id+8)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))==4;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=(($mod)|0);
   var $11=$10;
   var $12=HEAP32[(($11)>>2)];
   var $13=$12;
   var $14=(($id)|0);
   var $15=$14;
   var $16=HEAP16[(($15)>>1)];
   var $17=_mrb_obj_respond_to($13, $16);
   $method_defined_p=$17;
   label = 8; break;
  case 3: 
   var $19=$1;
   _mrb_check_intern_str($sym, $19, $id);
   var $20=(($sym+8)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21)|(0))==0;
   if ($22) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $24=(($sym)|0);
   var $25=$24;
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|(0))!=0;
   if ($27) { label = 6; break; } else { label = 5; break; }
  case 5: 
   $method_defined_p=0;
   label = 7; break;
  case 6: 
   var $30=(($mod)|0);
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=$32;
   var $34=(($sym)|0);
   var $35=$34;
   var $36=HEAP16[(($35)>>1)];
   var $37=_mrb_obj_respond_to($33, $36);
   $method_defined_p=$37;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $40=$method_defined_p;
   _mrb_bool_value816($agg_result, $40);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mod_to_s($agg_result, $mrb, $klass) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 192)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $klass; $klass = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($klass)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($klass)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($klass)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $str=sp;
   var $v=(sp)+(12);
   var $2=(sp)+(24);
   var $3=(sp)+(36);
   var $4=(sp)+(48);
   var $5=(sp)+(60);
   var $6=(sp)+(72);
   var $7=(sp)+(84);
   var $c;
   var $path=(sp)+(96);
   var $8=(sp)+(108);
   var $9=(sp)+(120);
   var $10=(sp)+(132);
   var $11=(sp)+(144);
   var $12=(sp)+(156);
   var $13=(sp)+(168);
   var $14=(sp)+(180);
   $1=$mrb;
   var $15=(($klass+8)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))==12;
   if ($17) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $19=$1;
   var $20=$1;
   var $21=_mrb_intern2($20, ((86888)|0), 12);
   _mrb_iv_get($v, $19, $klass, $21);
   var $22=$1;
   _mrb_str_new($2, $22, ((96236)|0), 8);
   var $23=$str;
   var $24=$2;
   assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
   var $25=(($v+8)|0);
   var $26=HEAP32[(($25)>>2)];
   if ((($26)|(0))==9 | (($26)|(0))==10 | (($26)|(0))==12) {
    label = 3; break;
   }
   else {
   label = 4; break;
   }
  case 3: 
   var $28=$1;
   var $29=$1;
   _mrb_inspect($3, $29, $v);
   _mrb_str_append($4, $28, $str, $3);
   label = 5; break;
  case 4: 
   var $31=$1;
   var $32=$1;
   _mrb_any_to_s($5, $32, $v);
   _mrb_str_append($6, $31, $str, $5);
   label = 5; break;
  case 5: 
   var $34=$1;
   _mrb_str_cat($7, $34, $str, ((96040)|0), 1);
   label = 15; break;
  case 6: 
   var $36=$1;
   _mrb_str_buf_new($8, $36, 32);
   var $37=$str;
   var $38=$8;
   assert(12 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];
   var $39=(($klass)|0);
   var $40=$39;
   var $41=HEAP32[(($40)>>2)];
   var $42=$41;
   $c=$42;
   var $43=$1;
   var $44=$c;
   _mrb_class_path($9, $43, $44);
   var $45=$path;
   var $46=$9;
   assert(12 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($45)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];
   var $47=(($path+8)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($48)|(0))==0;
   if ($49) { label = 7; break; } else { label = 13; break; }
  case 7: 
   var $51=(($path)|0);
   var $52=$51;
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53)|(0))!=0;
   if ($54) { label = 13; break; } else { label = 8; break; }
  case 8: 
   var $56=(($klass+8)|0);
   var $57=HEAP32[(($56)>>2)];
   if ((($57)|(0))==9) {
    label = 9; break;
   }
   else if ((($57)|(0))==10) {
    label = 10; break;
   }
   else {
   label = 11; break;
   }
  case 9: 
   var $59=$1;
   _mrb_str_cat($10, $59, $str, ((96236)|0), 8);
   label = 12; break;
  case 10: 
   var $61=$1;
   _mrb_str_cat($11, $61, $str, ((86832)|0), 9);
   label = 12; break;
  case 11: 
   var $63=$1;
   _mrb_str_cat($12, $63, $str, ((86756)|0), 9);
   label = 12; break;
  case 12: 
   var $65=$1;
   var $66=$1;
   var $67=$c;
   var $68=$67;
   _mrb_ptr_to_str($13, $66, $68);
   _mrb_str_concat($65, $str, $13);
   var $69=$1;
   _mrb_str_cat($14, $69, $str, ((96040)|0), 1);
   label = 14; break;
  case 13: 
   var $71=$str;
   var $72=$path;
   assert(12 % 1 === 0);HEAP32[(($71)>>2)]=HEAP32[(($72)>>2)];HEAP32[((($71)+(4))>>2)]=HEAP32[((($72)+(4))>>2)];HEAP32[((($71)+(8))>>2)]=HEAP32[((($72)+(8))>>2)];
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $75=$agg_result;
   var $76=$str;
   assert(12 % 1 === 0);HEAP32[(($75)>>2)]=HEAP32[(($76)>>2)];HEAP32[((($75)+(4))>>2)]=HEAP32[((($76)+(4))>>2)];HEAP32[((($75)+(8))>>2)]=HEAP32[((($76)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mod_ancestors($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $result=sp;
   var $c;
   var $2=(sp)+(12);
   var $3=(sp)+(24);
   var $4=(sp)+(36);
   var $5=(sp)+(48);
   $1=$mrb;
   var $6=(($self)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=$8;
   $c=$9;
   var $10=$1;
   _mrb_ary_new($2, $10);
   var $11=$result;
   var $12=$2;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   var $13=$1;
   var $14=$c;
   var $15=$14;
   _mrb_obj_value775($3, $15);
   _mrb_ary_push($13, $result, $3);
   var $16=$c;
   var $17=(($16+20)|0);
   var $18=HEAP32[(($17)>>2)];
   $c=$18;
   label = 2; break;
  case 2: 
   var $20=$c;
   var $21=(($20)|(0))!=0;
   if ($21) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $23=$c;
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   var $26=$25 & 255;
   var $27=(($26)|(0))==11;
   if ($27) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $29=$1;
   var $30=$c;
   var $31=(($30+4)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$32;
   _mrb_obj_value775($4, $33);
   _mrb_ary_push($29, $result, $4);
   label = 8; break;
  case 5: 
   var $35=$c;
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=$37 & 255;
   var $39=(($38)|(0))!=12;
   if ($39) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $41=$1;
   var $42=$c;
   var $43=$42;
   _mrb_obj_value775($5, $43);
   _mrb_ary_push($41, $result, $5);
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $46=$c;
   var $47=(($46+20)|0);
   var $48=HEAP32[(($47)>>2)];
   $c=$48;
   label = 2; break;
  case 9: 
   var $50=$agg_result;
   var $51=$result;
   assert(12 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)];HEAP32[((($50)+(8))>>2)]=HEAP32[((($51)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mod_define_method($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $c;
   var $p;
   var $mid=sp;
   var $blk=(sp)+(4);
   $1=$mrb;
   var $2=(($self)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $c=$5;
   var $6=$1;
   var $7=_mrb_get_args($6, ((87024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$mid,HEAP32[(((tempInt)+(4))>>2)]=$blk,tempInt));
   var $8=(($blk+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==0;
   if ($10) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $12=(($blk)|0);
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0))!=0;
   if ($15) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $17=$1;
   var $18=$1;
   var $19=_mrb_class_get($18, ((86952)|0));
   _mrb_raise($17, $19, ((86936)|0));
   label = 4; break;
  case 4: 
   var $21=$1;
   var $22=$1;
   var $23=(($22+56)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=_mrb_obj_alloc($21, 13, $24);
   var $26=$25;
   $p=$26;
   var $27=$p;
   var $28=(($blk)|0);
   var $29=$28;
   var $30=HEAP32[(($29)>>2)];
   var $31=$30;
   _mrb_proc_copy($27, $31);
   var $32=$1;
   var $33=$c;
   var $34=HEAP16[(($mid)>>1)];
   var $35=$p;
   _mrb_define_method_raw($32, $33, $34, $35);
   var $36=$agg_result;
   var $37=$blk;
   assert(12 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];HEAP32[((($36)+(8))>>2)]=HEAP32[((($37)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mod_eqq($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $obj=sp;
 var $eqq;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((87060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$obj,tempInt));
 var $4=$1;
 var $5=(($mod)|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 var $9=_mrb_obj_is_kind_of($4, $obj, $8);
 $eqq=$9;
 var $10=$eqq;
 _mrb_bool_value816($agg_result, $10);
 STACKTOP = sp;
 return;
}
function _mrb_mod_s_constants($agg_result, $mrb, $mod) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=_mrb_class_get($3, ((99640)|0));
 _mrb_raise($2, $4, ((87116)|0));
 _mrb_nil_value798($agg_result);
 STACKTOP = sp;
 return;
}
function _mrb_true_value817($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=2;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=1;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_false_value818($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=1;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _check_cv_name_str($mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $s;
   var $len;
   $1=$mrb;
   var $2=(($str)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=(($5+20)|0);
   var $7=HEAP32[(($6)>>2)];
   $s=$7;
   var $8=(($str)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10;
   var $12=(($11+12)|0);
   var $13=HEAP32[(($12)>>2)];
   $len=$13;
   var $14=$len;
   var $15=(($14)>>>(0)) < 3;
   if ($15) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $17=$s;
   var $18=(($17)|0);
   var $19=HEAP8[($18)];
   var $20=(($19 << 24) >> 24);
   var $21=(($20)|(0))==64;
   if ($21) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $23=$s;
   var $24=(($23+1)|0);
   var $25=HEAP8[($24)];
   var $26=(($25 << 24) >> 24);
   var $27=(($26)|(0))==64;
   if ($27) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $29=$1;
   var $30=$1;
   var $31=_mrb_intern_str($30, $str);
   _mrb_name_error($29, $31, ((86376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($str)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($str)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($str)+(8))>>2)],tempInt));
   label = 5; break;
  case 5: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _check_type($agg_result, $mrb, $val, $t, $c, $m) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $tmp=sp;
   var $5=(sp)+(12);
   var $6=(sp)+(24);
   $1=$mrb;
   $2=$t;
   $3=$c;
   $4=$m;
   var $7=$1;
   var $8=$2;
   var $9=$3;
   var $10=$4;
   _mrb_check_convert_type($5, $7, $val, $8, $9, $10);
   var $11=$tmp;
   var $12=$5;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   var $13=(($tmp+8)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0))==0;
   if ($15) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $17=(($tmp)|0);
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19)|(0))!=0;
   if ($20) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $22=$1;
   var $23=$1;
   var $24=_mrb_class_get($23, ((98236)|0));
   var $25=$1;
   var $26=$3;
   _mrb_str_new_cstr($6, $25, $26);
   _mrb_raisef($22, $24, ((106116)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($6)+(8))>>2)],tempInt));
   label = 4; break;
  case 4: 
   var $28=$agg_result;
   var $29=$tmp;
   assert(12 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[((($29)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _codegen_malloc($s, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $p;
   $1=$s;
   $2=$len;
   var $3=$1;
   var $4=(($3)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$2;
   var $7=_mrb_malloc($5, $6);
   $p=$7;
   var $8=$p;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=$1;
   _codegen_error($11, ((87216)|0));
   label = 3; break;
  case 3: 
   var $13=$p;
   return $13;
  default: assert(0, "bad label: " + label);
 }
}
function _codegen_realloc($s, $p, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$s;
   $2=$p;
   $3=$len;
   var $4=$1;
   var $5=(($4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$2;
   var $8=$3;
   var $9=_mrb_realloc($6, $7, $8);
   $2=$9;
   var $10=$2;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $13=$3;
   var $14=(($13)>>>(0)) > 0;
   if ($14) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $16=$1;
   _codegen_error($16, ((101744)|0));
   label = 4; break;
  case 4: 
   var $18=$2;
   return $18;
  default: assert(0, "bad label: " + label);
 }
}
function _codedump_all($mrb, $start) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $i;
   $1=$mrb;
   $2=$start;
   var $3=$2;
   $i=$3;
   label = 2; break;
  case 2: 
   var $5=$i;
   var $6=$1;
   var $7=(($6+28)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($5)>>>(0)) < (($8)>>>(0));
   if ($9) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $11=$1;
   var $12=$i;
   _codedump($11, $12);
   label = 4; break;
  case 4: 
   var $14=$i;
   var $15=((($14)+(1))|0);
   $i=$15;
   label = 2; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _codegen_error($s, $message) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$s;
   $2=$message;
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   STACKTOP = sp;
   return;
  case 3: 
   label = 4; break;
  case 4: 
   var $8=$1;
   var $9=(($8+48)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $13=$1;
   var $14=(($13+4)|0);
   var $15=HEAP32[(($14)>>2)];
   _mrb_pool_close($15);
   var $16=$1;
   var $17=(($16+48)|0);
   var $18=HEAP32[(($17)>>2)];
   $1=$18;
   label = 4; break;
  case 6: 
   var $20=$1;
   var $21=(($20+4)|0);
   var $22=HEAP32[(($21)>>2)];
   _mrb_pool_close($22);
   var $23=$1;
   var $24=(($23+80)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25)|(0))!=0;
   if ($26) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $28=$1;
   var $29=(($28+84)|0);
   var $30=HEAP16[(($29)>>1)];
   var $31=(($30 << 16) >> 16);
   var $32=(($31)|(0))!=0;
   if ($32) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $34=HEAP32[((_stderr)>>2)];
   var $35=$1;
   var $36=(($35+80)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=$1;
   var $39=(($38+84)|0);
   var $40=HEAP16[(($39)>>1)];
   var $41=(($40 << 16) >> 16);
   var $42=$2;
   var $43=_fprintf($34, ((106088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$37,HEAP32[(((tempInt)+(4))>>2)]=$41,HEAP32[(((tempInt)+(8))>>2)]=$42,tempInt));
   label = 10; break;
  case 9: 
   var $45=HEAP32[((_stderr)>>2)];
   var $46=$2;
   var $47=_fprintf($45, ((105756)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$46,tempInt));
   label = 10; break;
  case 10: 
   var $49=$1;
   var $50=(($49+8)|0);
   var $51=(($50)|0);
   _longjmp($51, 1);
   throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }
}
function _codedump($mrb, $n) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $irep;
   var $i;
   var $ai;
   var $c;
   var $s=sp;
   var $3=(sp)+(12);
   $1=$mrb;
   $2=$n;
   var $4=$2;
   var $5=$1;
   var $6=(($5+24)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7+($4<<2))|0);
   var $9=HEAP32[(($8)>>2)];
   $irep=$9;
   var $10=$irep;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 83; break;
  case 3: 
   var $14=$2;
   var $15=$irep;
   var $16=(($15+6)|0);
   var $17=HEAP16[(($16)>>1)];
   var $18=(($17)&(65535));
   var $19=$irep;
   var $20=(($19+4)|0);
   var $21=HEAP16[(($20)>>1)];
   var $22=(($21)&(65535));
   var $23=$irep;
   var $24=(($23+36)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$irep;
   var $27=(($26+40)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=_printf(((98580)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$18,HEAP32[(((tempInt)+(8))>>2)]=$22,HEAP32[(((tempInt)+(12))>>2)]=$25,HEAP32[(((tempInt)+(16))>>2)]=$28,tempInt));
   $i=0;
   label = 4; break;
  case 4: 
   var $31=$i;
   var $32=$irep;
   var $33=(($32+32)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($31)>>>(0)) < (($34)>>>(0));
   if ($35) { label = 5; break; } else { label = 82; break; }
  case 5: 
   var $37=$1;
   var $38=_mrb_gc_arena_save($37);
   $ai=$38;
   var $39=$i;
   var $40=_printf(((98160)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$39,tempInt));
   var $41=$i;
   var $42=$irep;
   var $43=(($42+12)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=(($44+($41<<2))|0);
   var $46=HEAP32[(($45)>>2)];
   $c=$46;
   var $47=$c;
   var $48=$47 & 127;
   if ((($48)|(0))==0) {
    label = 6; break;
   }
   else if ((($48)|(0))==1) {
    label = 7; break;
   }
   else if ((($48)|(0))==2) {
    label = 8; break;
   }
   else if ((($48)|(0))==3) {
    label = 9; break;
   }
   else if ((($48)|(0))==4) {
    label = 10; break;
   }
   else if ((($48)|(0))==5) {
    label = 11; break;
   }
   else if ((($48)|(0))==6) {
    label = 12; break;
   }
   else if ((($48)|(0))==7) {
    label = 13; break;
   }
   else if ((($48)|(0))==8) {
    label = 14; break;
   }
   else if ((($48)|(0))==9) {
    label = 15; break;
   }
   else if ((($48)|(0))==10) {
    label = 16; break;
   }
   else if ((($48)|(0))==17) {
    label = 17; break;
   }
   else if ((($48)|(0))==18) {
    label = 18; break;
   }
   else if ((($48)|(0))==19) {
    label = 19; break;
   }
   else if ((($48)|(0))==20) {
    label = 20; break;
   }
   else if ((($48)|(0))==13) {
    label = 21; break;
   }
   else if ((($48)|(0))==14) {
    label = 22; break;
   }
   else if ((($48)|(0))==21) {
    label = 23; break;
   }
   else if ((($48)|(0))==22) {
    label = 24; break;
   }
   else if ((($48)|(0))==15) {
    label = 25; break;
   }
   else if ((($48)|(0))==16) {
    label = 26; break;
   }
   else if ((($48)|(0))==23) {
    label = 27; break;
   }
   else if ((($48)|(0))==24) {
    label = 28; break;
   }
   else if ((($48)|(0))==25) {
    label = 29; break;
   }
   else if ((($48)|(0))==32) {
    label = 30; break;
   }
   else if ((($48)|(0))==33) {
    label = 31; break;
   }
   else if ((($48)|(0))==42) {
    label = 32; break;
   }
   else if ((($48)|(0))==36) {
    label = 33; break;
   }
   else if ((($48)|(0))==37) {
    label = 34; break;
   }
   else if ((($48)|(0))==38) {
    label = 35; break;
   }
   else if ((($48)|(0))==41) {
    label = 36; break;
   }
   else if ((($48)|(0))==43) {
    label = 42; break;
   }
   else if ((($48)|(0))==64) {
    label = 43; break;
   }
   else if ((($48)|(0))==65) {
    label = 44; break;
   }
   else if ((($48)|(0))==70) {
    label = 45; break;
   }
   else if ((($48)|(0))==44) {
    label = 46; break;
   }
   else if ((($48)|(0))==45) {
    label = 47; break;
   }
   else if ((($48)|(0))==46) {
    label = 48; break;
   }
   else if ((($48)|(0))==47) {
    label = 49; break;
   }
   else if ((($48)|(0))==48) {
    label = 50; break;
   }
   else if ((($48)|(0))==49) {
    label = 51; break;
   }
   else if ((($48)|(0))==51) {
    label = 52; break;
   }
   else if ((($48)|(0))==52) {
    label = 53; break;
   }
   else if ((($48)|(0))==53) {
    label = 54; break;
   }
   else if ((($48)|(0))==54) {
    label = 55; break;
   }
   else if ((($48)|(0))==50) {
    label = 56; break;
   }
   else if ((($48)|(0))==74) {
    label = 57; break;
   }
   else if ((($48)|(0))==55) {
    label = 58; break;
   }
   else if ((($48)|(0))==56) {
    label = 59; break;
   }
   else if ((($48)|(0))==57) {
    label = 60; break;
   }
   else if ((($48)|(0))==58) {
    label = 61; break;
   }
   else if ((($48)|(0))==60) {
    label = 62; break;
   }
   else if ((($48)|(0))==61) {
    label = 63; break;
   }
   else if ((($48)|(0))==62) {
    label = 64; break;
   }
   else if ((($48)|(0))==63) {
    label = 65; break;
   }
   else if ((($48)|(0))==66) {
    label = 66; break;
   }
   else if ((($48)|(0))==67) {
    label = 67; break;
   }
   else if ((($48)|(0))==68) {
    label = 68; break;
   }
   else if ((($48)|(0))==69) {
    label = 69; break;
   }
   else if ((($48)|(0))==71) {
    label = 70; break;
   }
   else if ((($48)|(0))==72) {
    label = 71; break;
   }
   else if ((($48)|(0))==75) {
    label = 72; break;
   }
   else if ((($48)|(0))==30) {
    label = 73; break;
   }
   else if ((($48)|(0))==26) {
    label = 74; break;
   }
   else if ((($48)|(0))==27) {
    label = 75; break;
   }
   else if ((($48)|(0))==29) {
    label = 76; break;
   }
   else if ((($48)|(0))==28) {
    label = 77; break;
   }
   else if ((($48)|(0))==31) {
    label = 78; break;
   }
   else {
   label = 79; break;
   }
  case 6: 
   var $50=_printf(((97896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 80; break;
  case 7: 
   var $52=$c;
   var $53=$52 >>> 23;
   var $54=$53 & 511;
   var $55=$c;
   var $56=$55 >>> 14;
   var $57=$56 & 511;
   var $58=_printf(((97552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$54,HEAP32[(((tempInt)+(4))>>2)]=$57,tempInt));
   label = 80; break;
  case 8: 
   var $60=$c;
   var $61=$60 >>> 23;
   var $62=$61 & 511;
   var $63=$c;
   var $64=$63 >>> 7;
   var $65=$64 & 65535;
   var $66=_printf(((97284)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$62,HEAP32[(((tempInt)+(4))>>2)]=$65,tempInt));
   label = 80; break;
  case 9: 
   var $68=$c;
   var $69=$68 >>> 23;
   var $70=$69 & 511;
   var $71=$c;
   var $72=$71 >>> 7;
   var $73=$72 & 65535;
   var $74=((($73)-(32767))|0);
   var $75=_printf(((96984)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$70,HEAP32[(((tempInt)+(4))>>2)]=$74,tempInt));
   label = 80; break;
  case 10: 
   var $77=$c;
   var $78=$77 >>> 23;
   var $79=$78 & 511;
   var $80=$1;
   var $81=$c;
   var $82=$81 >>> 7;
   var $83=$82 & 65535;
   var $84=$irep;
   var $85=(($84+20)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=(($86+($83<<1))|0);
   var $88=HEAP16[(($87)>>1)];
   var $89=_mrb_sym2name($80, $88);
   var $90=_printf(((96464)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$79,HEAP32[(((tempInt)+(4))>>2)]=$89,tempInt));
   label = 80; break;
  case 11: 
   var $92=$c;
   var $93=$92 >>> 23;
   var $94=$93 & 511;
   var $95=_printf(((96196)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$94,tempInt));
   label = 80; break;
  case 12: 
   var $97=$c;
   var $98=$97 >>> 23;
   var $99=$98 & 511;
   var $100=_printf(((96012)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$99,tempInt));
   label = 80; break;
  case 13: 
   var $102=$c;
   var $103=$102 >>> 23;
   var $104=$103 & 511;
   var $105=_printf(((95800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$104,tempInt));
   label = 80; break;
  case 14: 
   var $107=$c;
   var $108=$107 >>> 23;
   var $109=$108 & 511;
   var $110=_printf(((95584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$109,tempInt));
   label = 80; break;
  case 15: 
   var $112=$c;
   var $113=$112 >>> 23;
   var $114=$113 & 511;
   var $115=$1;
   var $116=$c;
   var $117=$116 >>> 7;
   var $118=$117 & 65535;
   var $119=$irep;
   var $120=(($119+20)|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=(($121+($118<<1))|0);
   var $123=HEAP16[(($122)>>1)];
   var $124=_mrb_sym2name($115, $123);
   var $125=_printf(((95312)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$114,HEAP32[(((tempInt)+(4))>>2)]=$124,tempInt));
   label = 80; break;
  case 16: 
   var $127=$1;
   var $128=$c;
   var $129=$128 >>> 7;
   var $130=$129 & 65535;
   var $131=$irep;
   var $132=(($131+20)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=(($133+($130<<1))|0);
   var $135=HEAP16[(($134)>>1)];
   var $136=_mrb_sym2name($127, $135);
   var $137=$c;
   var $138=$137 >>> 23;
   var $139=$138 & 511;
   var $140=_printf(((95120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$136,HEAP32[(((tempInt)+(4))>>2)]=$139,tempInt));
   label = 80; break;
  case 17: 
   var $142=$c;
   var $143=$142 >>> 23;
   var $144=$143 & 511;
   var $145=$1;
   var $146=$c;
   var $147=$146 >>> 7;
   var $148=$147 & 65535;
   var $149=$irep;
   var $150=(($149+20)|0);
   var $151=HEAP32[(($150)>>2)];
   var $152=(($151+($148<<1))|0);
   var $153=HEAP16[(($152)>>1)];
   var $154=_mrb_sym2name($145, $153);
   var $155=_printf(((94932)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$144,HEAP32[(((tempInt)+(4))>>2)]=$154,tempInt));
   label = 80; break;
  case 18: 
   var $157=$1;
   var $158=$c;
   var $159=$158 >>> 7;
   var $160=$159 & 65535;
   var $161=$irep;
   var $162=(($161+20)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=(($163+($160<<1))|0);
   var $165=HEAP16[(($164)>>1)];
   var $166=_mrb_sym2name($157, $165);
   var $167=$c;
   var $168=$167 >>> 23;
   var $169=$168 & 511;
   var $170=_printf(((94588)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$166,HEAP32[(((tempInt)+(4))>>2)]=$169,tempInt));
   label = 80; break;
  case 19: 
   var $172=$c;
   var $173=$172 >>> 23;
   var $174=$173 & 511;
   var $175=$c;
   var $176=$175 >>> 23;
   var $177=$176 & 511;
   var $178=$1;
   var $179=$c;
   var $180=$179 >>> 7;
   var $181=$180 & 65535;
   var $182=$irep;
   var $183=(($182+20)|0);
   var $184=HEAP32[(($183)>>2)];
   var $185=(($184+($181<<1))|0);
   var $186=HEAP16[(($185)>>1)];
   var $187=_mrb_sym2name($178, $186);
   var $188=_printf(((94352)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$174,HEAP32[(((tempInt)+(4))>>2)]=$177,HEAP32[(((tempInt)+(8))>>2)]=$187,tempInt));
   label = 80; break;
  case 20: 
   var $190=$c;
   var $191=$190 >>> 23;
   var $192=$191 & 511;
   var $193=((($192)+(1))|0);
   var $194=$1;
   var $195=$c;
   var $196=$195 >>> 7;
   var $197=$196 & 65535;
   var $198=$irep;
   var $199=(($198+20)|0);
   var $200=HEAP32[(($199)>>2)];
   var $201=(($200+($197<<1))|0);
   var $202=HEAP16[(($201)>>1)];
   var $203=_mrb_sym2name($194, $202);
   var $204=$c;
   var $205=$204 >>> 23;
   var $206=$205 & 511;
   var $207=_printf(((93960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$193,HEAP32[(((tempInt)+(4))>>2)]=$203,HEAP32[(((tempInt)+(8))>>2)]=$206,tempInt));
   label = 80; break;
  case 21: 
   var $209=$c;
   var $210=$209 >>> 23;
   var $211=$210 & 511;
   var $212=$1;
   var $213=$c;
   var $214=$213 >>> 7;
   var $215=$214 & 65535;
   var $216=$irep;
   var $217=(($216+20)|0);
   var $218=HEAP32[(($217)>>2)];
   var $219=(($218+($215<<1))|0);
   var $220=HEAP16[(($219)>>1)];
   var $221=_mrb_sym2name($212, $220);
   var $222=_printf(((93676)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$211,HEAP32[(((tempInt)+(4))>>2)]=$221,tempInt));
   label = 80; break;
  case 22: 
   var $224=$1;
   var $225=$c;
   var $226=$225 >>> 7;
   var $227=$226 & 65535;
   var $228=$irep;
   var $229=(($228+20)|0);
   var $230=HEAP32[(($229)>>2)];
   var $231=(($230+($227<<1))|0);
   var $232=HEAP16[(($231)>>1)];
   var $233=_mrb_sym2name($224, $232);
   var $234=$c;
   var $235=$234 >>> 23;
   var $236=$235 & 511;
   var $237=_printf(((93376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$233,HEAP32[(((tempInt)+(4))>>2)]=$236,tempInt));
   label = 80; break;
  case 23: 
   var $239=$c;
   var $240=$239 >>> 23;
   var $241=$240 & 511;
   var $242=$c;
   var $243=$242 >>> 14;
   var $244=$243 & 511;
   var $245=$c;
   var $246=$245 >>> 7;
   var $247=$246 & 127;
   var $248=_printf(((93164)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$241,HEAP32[(((tempInt)+(4))>>2)]=$244,HEAP32[(((tempInt)+(8))>>2)]=$247,tempInt));
   label = 80; break;
  case 24: 
   var $250=$c;
   var $251=$250 >>> 23;
   var $252=$251 & 511;
   var $253=$c;
   var $254=$253 >>> 14;
   var $255=$254 & 511;
   var $256=$c;
   var $257=$256 >>> 7;
   var $258=$257 & 127;
   var $259=_printf(((92900)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$252,HEAP32[(((tempInt)+(4))>>2)]=$255,HEAP32[(((tempInt)+(8))>>2)]=$258,tempInt));
   label = 80; break;
  case 25: 
   var $261=$c;
   var $262=$261 >>> 23;
   var $263=$262 & 511;
   var $264=$1;
   var $265=$c;
   var $266=$265 >>> 7;
   var $267=$266 & 65535;
   var $268=$irep;
   var $269=(($268+20)|0);
   var $270=HEAP32[(($269)>>2)];
   var $271=(($270+($267<<1))|0);
   var $272=HEAP16[(($271)>>1)];
   var $273=_mrb_sym2name($264, $272);
   var $274=_printf(((92704)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$263,HEAP32[(((tempInt)+(4))>>2)]=$273,tempInt));
   label = 80; break;
  case 26: 
   var $276=$1;
   var $277=$c;
   var $278=$277 >>> 7;
   var $279=$278 & 65535;
   var $280=$irep;
   var $281=(($280+20)|0);
   var $282=HEAP32[(($281)>>2)];
   var $283=(($282+($279<<1))|0);
   var $284=HEAP16[(($283)>>1)];
   var $285=_mrb_sym2name($276, $284);
   var $286=$c;
   var $287=$286 >>> 23;
   var $288=$287 & 511;
   var $289=_printf(((92540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$285,HEAP32[(((tempInt)+(4))>>2)]=$288,tempInt));
   label = 80; break;
  case 27: 
   var $291=$i;
   var $292=$c;
   var $293=$292 >>> 7;
   var $294=$293 & 65535;
   var $295=((($294)-(32767))|0);
   var $296=((($291)+($295))|0);
   var $297=_printf(((92344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$296,tempInt));
   label = 80; break;
  case 28: 
   var $299=$c;
   var $300=$299 >>> 23;
   var $301=$300 & 511;
   var $302=$i;
   var $303=$c;
   var $304=$303 >>> 7;
   var $305=$304 & 65535;
   var $306=((($305)-(32767))|0);
   var $307=((($302)+($306))|0);
   var $308=_printf(((92092)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$301,HEAP32[(((tempInt)+(4))>>2)]=$307,tempInt));
   label = 80; break;
  case 29: 
   var $310=$c;
   var $311=$310 >>> 23;
   var $312=$311 & 511;
   var $313=$i;
   var $314=$c;
   var $315=$314 >>> 7;
   var $316=$315 & 65535;
   var $317=((($316)-(32767))|0);
   var $318=((($313)+($317))|0);
   var $319=_printf(((91868)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$312,HEAP32[(((tempInt)+(4))>>2)]=$318,tempInt));
   label = 80; break;
  case 30: 
   var $321=$c;
   var $322=$321 >>> 23;
   var $323=$322 & 511;
   var $324=$1;
   var $325=$c;
   var $326=$325 >>> 14;
   var $327=$326 & 511;
   var $328=$irep;
   var $329=(($328+20)|0);
   var $330=HEAP32[(($329)>>2)];
   var $331=(($330+($327<<1))|0);
   var $332=HEAP16[(($331)>>1)];
   var $333=_mrb_sym2name($324, $332);
   var $334=$c;
   var $335=$334 >>> 7;
   var $336=$335 & 127;
   var $337=_printf(((91380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$323,HEAP32[(((tempInt)+(4))>>2)]=$333,HEAP32[(((tempInt)+(8))>>2)]=$336,tempInt));
   label = 80; break;
  case 31: 
   var $339=$c;
   var $340=$339 >>> 23;
   var $341=$340 & 511;
   var $342=$1;
   var $343=$c;
   var $344=$343 >>> 14;
   var $345=$344 & 511;
   var $346=$irep;
   var $347=(($346+20)|0);
   var $348=HEAP32[(($347)>>2)];
   var $349=(($348+($345<<1))|0);
   var $350=HEAP16[(($349)>>1)];
   var $351=_mrb_sym2name($342, $350);
   var $352=$c;
   var $353=$352 >>> 7;
   var $354=$353 & 127;
   var $355=_printf(((91136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$341,HEAP32[(((tempInt)+(4))>>2)]=$351,HEAP32[(((tempInt)+(8))>>2)]=$354,tempInt));
   label = 80; break;
  case 32: 
   var $357=$c;
   var $358=$357 >>> 23;
   var $359=$358 & 511;
   var $360=$1;
   var $361=$c;
   var $362=$361 >>> 14;
   var $363=$362 & 511;
   var $364=$irep;
   var $365=(($364+20)|0);
   var $366=HEAP32[(($365)>>2)];
   var $367=(($366+($363<<1))|0);
   var $368=HEAP16[(($367)>>1)];
   var $369=_mrb_sym2name($360, $368);
   var $370=$c;
   var $371=$370 >>> 7;
   var $372=$371 & 127;
   var $373=_printf(((90884)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$359,HEAP32[(((tempInt)+(4))>>2)]=$369,HEAP32[(((tempInt)+(8))>>2)]=$372,tempInt));
   label = 80; break;
  case 33: 
   var $375=$c;
   var $376=$375 >>> 23;
   var $377=$376 & 511;
   var $378=$c;
   var $379=$378 >>> 7;
   var $380=$379 & 127;
   var $381=_printf(((90632)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$377,HEAP32[(((tempInt)+(4))>>2)]=$380,tempInt));
   label = 80; break;
  case 34: 
   var $383=$c;
   var $384=$383 >>> 23;
   var $385=$384 & 511;
   var $386=$c;
   var $387=$386 >>> 7;
   var $388=$387 & 65535;
   var $389=$388 >> 10;
   var $390=$389 & 63;
   var $391=$c;
   var $392=$391 >>> 7;
   var $393=$392 & 65535;
   var $394=$393 >> 9;
   var $395=$394 & 1;
   var $396=$c;
   var $397=$396 >>> 7;
   var $398=$397 & 65535;
   var $399=$398 >> 4;
   var $400=$399 & 31;
   var $401=$c;
   var $402=$401 >>> 7;
   var $403=$402 & 65535;
   var $404=$403 >> 0;
   var $405=$404 & 15;
   var $406=_printf(((90424)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$385,HEAP32[(((tempInt)+(4))>>2)]=$390,HEAP32[(((tempInt)+(8))>>2)]=$395,HEAP32[(((tempInt)+(12))>>2)]=$400,HEAP32[(((tempInt)+(16))>>2)]=$405,tempInt));
   label = 80; break;
  case 35: 
   var $408=$c;
   var $409=$408 >>> 7;
   var $410=$409 & 33554431;
   var $411=$410 >> 18;
   var $412=$411 & 31;
   var $413=$c;
   var $414=$413 >>> 7;
   var $415=$414 & 33554431;
   var $416=$415 >> 13;
   var $417=$416 & 31;
   var $418=$c;
   var $419=$418 >>> 7;
   var $420=$419 & 33554431;
   var $421=$420 >> 12;
   var $422=$421 & 1;
   var $423=$c;
   var $424=$423 >>> 7;
   var $425=$424 & 33554431;
   var $426=$425 >> 7;
   var $427=$426 & 31;
   var $428=$c;
   var $429=$428 >>> 7;
   var $430=$429 & 33554431;
   var $431=$430 >> 2;
   var $432=$431 & 31;
   var $433=$c;
   var $434=$433 >>> 7;
   var $435=$434 & 33554431;
   var $436=$435 >> 1;
   var $437=$436 & 1;
   var $438=$c;
   var $439=$438 >>> 7;
   var $440=$439 & 33554431;
   var $441=$440 & 1;
   var $442=_printf(((90152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$412,HEAP32[(((tempInt)+(4))>>2)]=$417,HEAP32[(((tempInt)+(8))>>2)]=$422,HEAP32[(((tempInt)+(12))>>2)]=$427,HEAP32[(((tempInt)+(16))>>2)]=$432,HEAP32[(((tempInt)+(20))>>2)]=$437,HEAP32[(((tempInt)+(24))>>2)]=$441,tempInt));
   label = 80; break;
  case 36: 
   var $444=$c;
   var $445=$444 >>> 23;
   var $446=$445 & 511;
   var $447=_printf(((90000)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$446,tempInt));
   var $448=$c;
   var $449=$448 >>> 14;
   var $450=$449 & 511;
   if ((($450)|(0))==0) {
    label = 37; break;
   }
   else if ((($450)|(0))==2) {
    label = 38; break;
   }
   else if ((($450)|(0))==1) {
    label = 39; break;
   }
   else {
   label = 40; break;
   }
  case 37: 
   var $452=_printf(((89876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 41; break;
  case 38: 
   var $454=_printf(((89796)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 41; break;
  case 39: 
   var $456=_printf(((89668)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 41; break;
  case 40: 
   var $458=_printf(((89336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 41; break;
  case 41: 
   label = 80; break;
  case 42: 
   var $461=$c;
   var $462=$461 >>> 23;
   var $463=$462 & 511;
   var $464=$c;
   var $465=$464 >>> 7;
   var $466=$465 & 65535;
   var $467=$466 >> 10;
   var $468=$467 & 63;
   var $469=$c;
   var $470=$469 >>> 7;
   var $471=$470 & 65535;
   var $472=$471 >> 9;
   var $473=$472 & 1;
   var $474=$c;
   var $475=$474 >>> 7;
   var $476=$475 & 65535;
   var $477=$476 >> 4;
   var $478=$477 & 31;
   var $479=$c;
   var $480=$479 >>> 7;
   var $481=$480 & 65535;
   var $482=$481 >> 0;
   var $483=$482 & 15;
   var $484=_printf(((89212)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$463,HEAP32[(((tempInt)+(4))>>2)]=$468,HEAP32[(((tempInt)+(8))>>2)]=$473,HEAP32[(((tempInt)+(12))>>2)]=$478,HEAP32[(((tempInt)+(16))>>2)]=$483,tempInt));
   label = 80; break;
  case 43: 
   var $486=$c;
   var $487=$486 >>> 23;
   var $488=$487 & 511;
   var $489=$c;
   var $490=$489 >>> 9;
   var $491=$490 & 16383;
   var $492=$c;
   var $493=$492 >>> 7;
   var $494=$493 & 3;
   var $495=_printf(((89116)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$488,HEAP32[(((tempInt)+(4))>>2)]=$491,HEAP32[(((tempInt)+(8))>>2)]=$494,tempInt));
   label = 80; break;
  case 44: 
   var $497=$c;
   var $498=$497 >>> 23;
   var $499=$498 & 511;
   var $500=$c;
   var $501=$500 >>> 14;
   var $502=$501 & 511;
   var $503=$c;
   var $504=$503 >>> 7;
   var $505=$504 & 127;
   var $506=_printf(((89040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$499,HEAP32[(((tempInt)+(4))>>2)]=$502,HEAP32[(((tempInt)+(8))>>2)]=$505,tempInt));
   label = 80; break;
  case 45: 
   var $508=$c;
   var $509=$508 >>> 23;
   var $510=$509 & 511;
   var $511=$1;
   var $512=$c;
   var $513=$512 >>> 14;
   var $514=$513 & 511;
   var $515=$irep;
   var $516=(($515+20)|0);
   var $517=HEAP32[(($516)>>2)];
   var $518=(($517+($514<<1))|0);
   var $519=HEAP16[(($518)>>1)];
   var $520=_mrb_sym2name($511, $519);
   var $521=_printf(((88968)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$510,HEAP32[(((tempInt)+(4))>>2)]=$520,tempInt));
   label = 80; break;
  case 46: 
   var $523=$c;
   var $524=$523 >>> 23;
   var $525=$524 & 511;
   var $526=$1;
   var $527=$c;
   var $528=$527 >>> 14;
   var $529=$528 & 511;
   var $530=$irep;
   var $531=(($530+20)|0);
   var $532=HEAP32[(($531)>>2)];
   var $533=(($532+($529<<1))|0);
   var $534=HEAP16[(($533)>>1)];
   var $535=_mrb_sym2name($526, $534);
   var $536=$c;
   var $537=$536 >>> 7;
   var $538=$537 & 127;
   var $539=_printf(((88860)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$525,HEAP32[(((tempInt)+(4))>>2)]=$535,HEAP32[(((tempInt)+(8))>>2)]=$538,tempInt));
   label = 80; break;
  case 47: 
   var $541=$c;
   var $542=$541 >>> 23;
   var $543=$542 & 511;
   var $544=$1;
   var $545=$c;
   var $546=$545 >>> 14;
   var $547=$546 & 511;
   var $548=$irep;
   var $549=(($548+20)|0);
   var $550=HEAP32[(($549)>>2)];
   var $551=(($550+($547<<1))|0);
   var $552=HEAP16[(($551)>>1)];
   var $553=_mrb_sym2name($544, $552);
   var $554=$c;
   var $555=$554 >>> 7;
   var $556=$555 & 127;
   var $557=_printf(((88764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$543,HEAP32[(((tempInt)+(4))>>2)]=$553,HEAP32[(((tempInt)+(8))>>2)]=$556,tempInt));
   label = 80; break;
  case 48: 
   var $559=$c;
   var $560=$559 >>> 23;
   var $561=$560 & 511;
   var $562=$1;
   var $563=$c;
   var $564=$563 >>> 14;
   var $565=$564 & 511;
   var $566=$irep;
   var $567=(($566+20)|0);
   var $568=HEAP32[(($567)>>2)];
   var $569=(($568+($565<<1))|0);
   var $570=HEAP16[(($569)>>1)];
   var $571=_mrb_sym2name($562, $570);
   var $572=$c;
   var $573=$572 >>> 7;
   var $574=$573 & 127;
   var $575=_printf(((88680)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$561,HEAP32[(((tempInt)+(4))>>2)]=$571,HEAP32[(((tempInt)+(8))>>2)]=$574,tempInt));
   label = 80; break;
  case 49: 
   var $577=$c;
   var $578=$577 >>> 23;
   var $579=$578 & 511;
   var $580=$1;
   var $581=$c;
   var $582=$581 >>> 14;
   var $583=$582 & 511;
   var $584=$irep;
   var $585=(($584+20)|0);
   var $586=HEAP32[(($585)>>2)];
   var $587=(($586+($583<<1))|0);
   var $588=HEAP16[(($587)>>1)];
   var $589=_mrb_sym2name($580, $588);
   var $590=$c;
   var $591=$590 >>> 7;
   var $592=$591 & 127;
   var $593=_printf(((88572)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$579,HEAP32[(((tempInt)+(4))>>2)]=$589,HEAP32[(((tempInt)+(8))>>2)]=$592,tempInt));
   label = 80; break;
  case 50: 
   var $595=$c;
   var $596=$595 >>> 23;
   var $597=$596 & 511;
   var $598=$1;
   var $599=$c;
   var $600=$599 >>> 14;
   var $601=$600 & 511;
   var $602=$irep;
   var $603=(($602+20)|0);
   var $604=HEAP32[(($603)>>2)];
   var $605=(($604+($601<<1))|0);
   var $606=HEAP16[(($605)>>1)];
   var $607=_mrb_sym2name($598, $606);
   var $608=$c;
   var $609=$608 >>> 7;
   var $610=$609 & 127;
   var $611=_printf(((88500)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$597,HEAP32[(((tempInt)+(4))>>2)]=$607,HEAP32[(((tempInt)+(8))>>2)]=$610,tempInt));
   label = 80; break;
  case 51: 
   var $613=$c;
   var $614=$613 >>> 23;
   var $615=$614 & 511;
   var $616=$1;
   var $617=$c;
   var $618=$617 >>> 14;
   var $619=$618 & 511;
   var $620=$irep;
   var $621=(($620+20)|0);
   var $622=HEAP32[(($621)>>2)];
   var $623=(($622+($619<<1))|0);
   var $624=HEAP16[(($623)>>1)];
   var $625=_mrb_sym2name($616, $624);
   var $626=$c;
   var $627=$626 >>> 7;
   var $628=$627 & 127;
   var $629=_printf(((88124)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$615,HEAP32[(((tempInt)+(4))>>2)]=$625,HEAP32[(((tempInt)+(8))>>2)]=$628,tempInt));
   label = 80; break;
  case 52: 
   var $631=$c;
   var $632=$631 >>> 23;
   var $633=$632 & 511;
   var $634=$1;
   var $635=$c;
   var $636=$635 >>> 14;
   var $637=$636 & 511;
   var $638=$irep;
   var $639=(($638+20)|0);
   var $640=HEAP32[(($639)>>2)];
   var $641=(($640+($637<<1))|0);
   var $642=HEAP16[(($641)>>1)];
   var $643=_mrb_sym2name($634, $642);
   var $644=$c;
   var $645=$644 >>> 7;
   var $646=$645 & 127;
   var $647=_printf(((88044)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$633,HEAP32[(((tempInt)+(4))>>2)]=$643,HEAP32[(((tempInt)+(8))>>2)]=$646,tempInt));
   label = 80; break;
  case 53: 
   var $649=$c;
   var $650=$649 >>> 23;
   var $651=$650 & 511;
   var $652=$1;
   var $653=$c;
   var $654=$653 >>> 14;
   var $655=$654 & 511;
   var $656=$irep;
   var $657=(($656+20)|0);
   var $658=HEAP32[(($657)>>2)];
   var $659=(($658+($655<<1))|0);
   var $660=HEAP16[(($659)>>1)];
   var $661=_mrb_sym2name($652, $660);
   var $662=$c;
   var $663=$662 >>> 7;
   var $664=$663 & 127;
   var $665=_printf(((87960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$651,HEAP32[(((tempInt)+(4))>>2)]=$661,HEAP32[(((tempInt)+(8))>>2)]=$664,tempInt));
   label = 80; break;
  case 54: 
   var $667=$c;
   var $668=$667 >>> 23;
   var $669=$668 & 511;
   var $670=$1;
   var $671=$c;
   var $672=$671 >>> 14;
   var $673=$672 & 511;
   var $674=$irep;
   var $675=(($674+20)|0);
   var $676=HEAP32[(($675)>>2)];
   var $677=(($676+($673<<1))|0);
   var $678=HEAP16[(($677)>>1)];
   var $679=_mrb_sym2name($670, $678);
   var $680=$c;
   var $681=$680 >>> 7;
   var $682=$681 & 127;
   var $683=_printf(((87896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$669,HEAP32[(((tempInt)+(4))>>2)]=$679,HEAP32[(((tempInt)+(8))>>2)]=$682,tempInt));
   label = 80; break;
  case 55: 
   var $685=$c;
   var $686=$685 >>> 23;
   var $687=$686 & 511;
   var $688=$1;
   var $689=$c;
   var $690=$689 >>> 14;
   var $691=$690 & 511;
   var $692=$irep;
   var $693=(($692+20)|0);
   var $694=HEAP32[(($693)>>2)];
   var $695=(($694+($691<<1))|0);
   var $696=HEAP16[(($695)>>1)];
   var $697=_mrb_sym2name($688, $696);
   var $698=$c;
   var $699=$698 >>> 7;
   var $700=$699 & 127;
   var $701=_printf(((87824)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$687,HEAP32[(((tempInt)+(4))>>2)]=$697,HEAP32[(((tempInt)+(8))>>2)]=$700,tempInt));
   label = 80; break;
  case 56: 
   var $703=$c;
   var $704=$703 >>> 23;
   var $705=$704 & 511;
   var $706=$1;
   var $707=$c;
   var $708=$707 >>> 14;
   var $709=$708 & 511;
   var $710=$irep;
   var $711=(($710+20)|0);
   var $712=HEAP32[(($711)>>2)];
   var $713=(($712+($709<<1))|0);
   var $714=HEAP16[(($713)>>1)];
   var $715=_mrb_sym2name($706, $714);
   var $716=$c;
   var $717=$716 >>> 7;
   var $718=$717 & 127;
   var $719=_printf(((87724)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$705,HEAP32[(((tempInt)+(4))>>2)]=$715,HEAP32[(((tempInt)+(8))>>2)]=$718,tempInt));
   label = 80; break;
  case 57: 
   var $721=_printf(((87688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 80; break;
  case 58: 
   var $723=$c;
   var $724=$723 >>> 23;
   var $725=$724 & 511;
   var $726=$c;
   var $727=$726 >>> 14;
   var $728=$727 & 511;
   var $729=$c;
   var $730=$729 >>> 7;
   var $731=$730 & 127;
   var $732=_printf(((87596)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$725,HEAP32[(((tempInt)+(4))>>2)]=$728,HEAP32[(((tempInt)+(8))>>2)]=$731,tempInt));
   label = 80; break;
  case 59: 
   var $734=$c;
   var $735=$734 >>> 23;
   var $736=$735 & 511;
   var $737=$c;
   var $738=$737 >>> 14;
   var $739=$738 & 511;
   var $740=_printf(((87536)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$736,HEAP32[(((tempInt)+(4))>>2)]=$739,tempInt));
   label = 80; break;
  case 60: 
   var $742=$c;
   var $743=$742 >>> 23;
   var $744=$743 & 511;
   var $745=$c;
   var $746=$745 >>> 14;
   var $747=$746 & 511;
   var $748=_printf(((87456)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$744,HEAP32[(((tempInt)+(4))>>2)]=$747,tempInt));
   label = 80; break;
  case 61: 
   var $750=$c;
   var $751=$750 >>> 23;
   var $752=$751 & 511;
   var $753=$c;
   var $754=$753 >>> 14;
   var $755=$754 & 511;
   var $756=$c;
   var $757=$756 >>> 7;
   var $758=$757 & 127;
   var $759=_printf(((87196)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$752,HEAP32[(((tempInt)+(4))>>2)]=$755,HEAP32[(((tempInt)+(8))>>2)]=$758,tempInt));
   label = 80; break;
  case 62: 
   var $761=$c;
   var $762=$761 >>> 23;
   var $763=$762 & 511;
   var $764=$c;
   var $765=$764 >>> 14;
   var $766=$765 & 511;
   var $767=$c;
   var $768=$767 >>> 7;
   var $769=$768 & 127;
   var $770=_printf(((87164)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$763,HEAP32[(((tempInt)+(4))>>2)]=$766,HEAP32[(((tempInt)+(8))>>2)]=$769,tempInt));
   label = 80; break;
  case 63: 
   var $772=$c;
   var $773=$772 >>> 7;
   var $774=$773 & 65535;
   var $775=$irep;
   var $776=(($775+16)|0);
   var $777=HEAP32[(($776)>>2)];
   var $778=(($777+((($774)*(12))&-1))|0);
   var $779=$s;
   var $780=$778;
   assert(12 % 1 === 0);HEAP32[(($779)>>2)]=HEAP32[(($780)>>2)];HEAP32[((($779)+(4))>>2)]=HEAP32[((($780)+(4))>>2)];HEAP32[((($779)+(8))>>2)]=HEAP32[((($780)+(8))>>2)];
   var $781=$1;
   _mrb_str_dump($3, $781, $s);
   var $782=$s;
   var $783=$3;
   assert(12 % 1 === 0);HEAP32[(($782)>>2)]=HEAP32[(($783)>>2)];HEAP32[((($782)+(4))>>2)]=HEAP32[((($783)+(4))>>2)];HEAP32[((($782)+(8))>>2)]=HEAP32[((($783)+(8))>>2)];
   var $784=$c;
   var $785=$784 >>> 23;
   var $786=$785 & 511;
   var $787=(($s)|0);
   var $788=$787;
   var $789=HEAP32[(($788)>>2)];
   var $790=$789;
   var $791=(($790+20)|0);
   var $792=HEAP32[(($791)>>2)];
   var $793=_printf(((87076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$786,HEAP32[(((tempInt)+(4))>>2)]=$792,tempInt));
   label = 80; break;
  case 64: 
   var $795=$c;
   var $796=$795 >>> 23;
   var $797=$796 & 511;
   var $798=$c;
   var $799=$798 >>> 14;
   var $800=$799 & 511;
   var $801=_printf(((87040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$797,HEAP32[(((tempInt)+(4))>>2)]=$800,tempInt));
   label = 80; break;
  case 65: 
   var $803=$c;
   var $804=$803 >>> 23;
   var $805=$804 & 511;
   var $806=$c;
   var $807=$806 >>> 14;
   var $808=$807 & 511;
   var $809=$c;
   var $810=$809 >>> 7;
   var $811=$810 & 127;
   var $812=_printf(((86992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$805,HEAP32[(((tempInt)+(4))>>2)]=$808,HEAP32[(((tempInt)+(8))>>2)]=$811,tempInt));
   label = 80; break;
  case 66: 
   var $814=$c;
   var $815=$814 >>> 23;
   var $816=$815 & 511;
   var $817=_printf(((86920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$816,tempInt));
   label = 80; break;
  case 67: 
   var $819=$c;
   var $820=$819 >>> 23;
   var $821=$820 & 511;
   var $822=$1;
   var $823=$c;
   var $824=$823 >>> 14;
   var $825=$824 & 511;
   var $826=$irep;
   var $827=(($826+20)|0);
   var $828=HEAP32[(($827)>>2)];
   var $829=(($828+($825<<1))|0);
   var $830=HEAP16[(($829)>>1)];
   var $831=_mrb_sym2name($822, $830);
   var $832=_printf(((86868)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$821,HEAP32[(((tempInt)+(4))>>2)]=$831,tempInt));
   label = 80; break;
  case 68: 
   var $834=$c;
   var $835=$834 >>> 23;
   var $836=$835 & 511;
   var $837=$1;
   var $838=$c;
   var $839=$838 >>> 14;
   var $840=$839 & 511;
   var $841=$irep;
   var $842=(($841+20)|0);
   var $843=HEAP32[(($842)>>2)];
   var $844=(($843+($840<<1))|0);
   var $845=HEAP16[(($844)>>1)];
   var $846=_mrb_sym2name($837, $845);
   var $847=_printf(((86812)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$836,HEAP32[(((tempInt)+(4))>>2)]=$846,tempInt));
   label = 80; break;
  case 69: 
   var $849=$c;
   var $850=$849 >>> 23;
   var $851=$850 & 511;
   var $852=$2;
   var $853=$c;
   var $854=$853 >>> 7;
   var $855=$854 & 65535;
   var $856=((($852)+($855))|0);
   var $857=_printf(((86736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$851,HEAP32[(((tempInt)+(4))>>2)]=$856,tempInt));
   label = 80; break;
  case 70: 
   var $859=$c;
   var $860=$859 >>> 23;
   var $861=$860 & 511;
   var $862=$c;
   var $863=$862 >>> 14;
   var $864=$863 & 511;
   var $865=_printf(((86648)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$861,HEAP32[(((tempInt)+(4))>>2)]=$864,tempInt));
   label = 80; break;
  case 71: 
   var $867=$c;
   var $868=$867 >>> 23;
   var $869=$868 & 511;
   var $870=_printf(((86356)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$869,tempInt));
   label = 80; break;
  case 72: 
   var $872=$c;
   var $873=$872 >>> 7;
   var $874=$873 & 65535;
   var $875=_printf(((86328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$874,tempInt));
   label = 80; break;
  case 73: 
   var $877=$2;
   var $878=$c;
   var $879=$878 >>> 7;
   var $880=$879 & 65535;
   var $881=((($877)+($880))|0);
   var $882=_printf(((86280)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$881,tempInt));
   label = 80; break;
  case 74: 
   var $884=$i;
   var $885=$c;
   var $886=$885 >>> 7;
   var $887=$886 & 65535;
   var $888=((($887)-(32767))|0);
   var $889=((($884)+($888))|0);
   var $890=_printf(((86192)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$889,tempInt));
   label = 80; break;
  case 75: 
   var $892=$c;
   var $893=$892 >>> 23;
   var $894=$893 & 511;
   var $895=_printf(((86120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$894,tempInt));
   label = 80; break;
  case 76: 
   var $897=$c;
   var $898=$897 >>> 23;
   var $899=$898 & 511;
   var $900=_printf(((86028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$899,tempInt));
   label = 80; break;
  case 77: 
   var $902=$c;
   var $903=$902 >>> 23;
   var $904=$903 & 511;
   var $905=_printf(((85936)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$904,tempInt));
   label = 80; break;
  case 78: 
   var $907=$c;
   var $908=$907 >>> 23;
   var $909=$908 & 511;
   var $910=_printf(((85888)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$909,tempInt));
   label = 80; break;
  case 79: 
   var $912=$c;
   var $913=$912 & 127;
   var $914=$c;
   var $915=$914 >>> 23;
   var $916=$915 & 511;
   var $917=$c;
   var $918=$917 >>> 14;
   var $919=$918 & 511;
   var $920=$c;
   var $921=$920 >>> 7;
   var $922=$921 & 127;
   var $923=_printf(((85836)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$913,HEAP32[(((tempInt)+(4))>>2)]=$916,HEAP32[(((tempInt)+(8))>>2)]=$919,HEAP32[(((tempInt)+(12))>>2)]=$922,tempInt));
   label = 80; break;
  case 80: 
   var $925=$1;
   var $926=$ai;
   _mrb_gc_arena_restore($925, $926);
   label = 81; break;
  case 81: 
   var $928=$i;
   var $929=((($928)+(1))|0);
   $i=$929;
   label = 4; break;
  case 82: 
   var $931=_printf(((89876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   label = 83; break;
  case 83: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_generate_code($mrb, $p) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $start;
   var $n;
   $2=$mrb;
   $3=$p;
   var $4=$2;
   var $5=(($4+28)|0);
   var $6=HEAP32[(($5)>>2)];
   $start=$6;
   var $7=$2;
   var $8=$3;
   var $9=_codegen_start($7, $8);
   $n=$9;
   var $10=$n;
   var $11=(($10)|(0)) < 0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$n;
   $1=$13;
   label = 4; break;
  case 3: 
   var $15=$start;
   $1=$15;
   label = 4; break;
  case 4: 
   var $17=$1;
   return $17;
  default: assert(0, "bad label: " + label);
 }
}
function _codegen_start($mrb, $p) {
 var label = 0;
 label = 1; 
 var mySetjmpIds = {};
 var setjmpTable = {"5": function(value) { label = 9; $27 = value },dummy: 0};
 while(1) try { switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $scope;
   $2=$mrb;
   $3=$p;
   var $4=$2;
   var $5=_scope_new($4, 0, 0);
   $scope=$5;
   var $6=$scope;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=-1;
   label = 8; break;
  case 3: 
   var $10=$2;
   var $11=$scope;
   var $12=(($11)|0);
   HEAP32[(($12)>>2)]=$10;
   var $13=$3;
   var $14=(($13+28)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))!=0;
   if ($16) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $18=$3;
   var $19=(($18+28)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$scope;
   var $22=(($21+80)|0);
   HEAP32[(($22)>>2)]=$20;
   label = 5; break;
  case 5: 
   var $24=$scope;
   var $25=(($24+8)|0);
   var $26=(($25)|0);
   var $27=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($26)>>2)]=tempInt, 0);
   label = 9; break;
  case 9: 
   var $28=(($27)|(0))!=0;
   if ($28) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $1=-1;
   label = 8; break;
  case 7: 
   var $31=$scope;
   var $32=$3;
   var $33=(($32+1136)|0);
   var $34=HEAP32[(($33)>>2)];
   _codegen($31, $34, 0);
   var $35=$scope;
   var $36=(($35+4)|0);
   var $37=HEAP32[(($36)>>2)];
   _mrb_pool_close($37);
   $1=0;
   label = 8; break;
  case 8: 
   var $39=$1;
   return $39;
  default: assert(0, "bad label: " + label);
 }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function _scope_new($mrb, $prev, $lv) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $pool;
   var $p;
   $2=$mrb;
   $3=$prev;
   $4=$lv;
   var $5=$2;
   var $6=_mrb_pool_open($5);
   $pool=$6;
   var $7=$pool;
   var $8=_mrb_pool_alloc($7, 128);
   var $9=$8;
   $p=$9;
   var $10=$p;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 8; break;
  case 3: 
   var $14=$p;
   var $15=$14;
   assert(128 % 1 === 0);(_memcpy($15, 106292, 128)|0);
   var $16=$2;
   var $17=$p;
   var $18=(($17)|0);
   HEAP32[(($18)>>2)]=$16;
   var $19=$pool;
   var $20=$p;
   var $21=(($20+4)|0);
   HEAP32[(($21)>>2)]=$19;
   var $22=$3;
   var $23=(($22)|(0))!=0;
   if ($23) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $25=$p;
   $1=$25;
   label = 8; break;
  case 5: 
   var $27=$3;
   var $28=$p;
   var $29=(($28+48)|0);
   HEAP32[(($29)>>2)]=$27;
   var $30=$p;
   var $31=$30;
   var $32=(($31+68)|0);
   var $33=$32;
   var $34=HEAP32[(($33)>>2)];
   var $35=$34 & -32768;
   var $36=$35 | 32767;
   HEAP32[(($33)>>2)]=$36;
   var $37=$p;
   var $38=$37;
   var $39=(($38+69)|0);
   var $40=HEAP8[($39)];
   var $41=$40 & 127;
   HEAP8[($39)]=$41;
   var $42=$2;
   var $43=_mrb_add_irep($42);
   var $44=$p;
   var $45=(($44+100)|0);
   HEAP32[(($45)>>2)]=$43;
   var $46=$p;
   var $47=(($46+100)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($48)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=$p;
   var $52=(($51+124)|0);
   HEAP32[(($52)>>2)]=$50;
   var $53=$p;
   var $54=(($53+96)|0);
   HEAP32[(($54)>>2)]=1024;
   var $55=$2;
   var $56=$p;
   var $57=(($56+96)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=($58<<2);
   var $60=_mrb_malloc($55, $59);
   var $61=$60;
   var $62=$p;
   var $63=(($62+88)|0);
   HEAP32[(($63)>>2)]=$61;
   var $64=$p;
   var $65=(($64+104)|0);
   HEAP32[(($65)>>2)]=32;
   var $66=$2;
   var $67=$p;
   var $68=(($67+104)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=((($69)*(12))&-1);
   var $71=_mrb_malloc($66, $70);
   var $72=$71;
   var $73=$p;
   var $74=(($73+100)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($75+16)|0);
   HEAP32[(($76)>>2)]=$72;
   var $77=$p;
   var $78=(($77+100)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79+36)|0);
   HEAP32[(($80)>>2)]=0;
   var $81=$p;
   var $82=(($81+108)|0);
   HEAP32[(($82)>>2)]=256;
   var $83=$2;
   var $84=_mrb_malloc($83, 512);
   var $85=$84;
   var $86=$p;
   var $87=(($86+100)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=(($88+20)|0);
   HEAP32[(($89)>>2)]=$85;
   var $90=$p;
   var $91=(($90+100)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=(($92+40)|0);
   HEAP32[(($93)>>2)]=0;
   var $94=$4;
   var $95=$p;
   var $96=(($95+52)|0);
   HEAP32[(($96)>>2)]=$94;
   var $97=$4;
   var $98=_node_len($97);
   var $99=((($98)+(1))|0);
   var $100=$p;
   var $101=(($100+56)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=((($102)+($99))|0);
   HEAP32[(($101)>>2)]=$103;
   var $104=$p;
   var $105=(($104+56)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=$p;
   var $108=(($107+112)|0);
   HEAP32[(($108)>>2)]=$106;
   var $109=$2;
   var $110=_mrb_gc_arena_save($109);
   var $111=$p;
   var $112=(($111+120)|0);
   HEAP32[(($112)>>2)]=$110;
   var $113=$3;
   var $114=(($113+80)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=$p;
   var $117=(($116+80)|0);
   HEAP32[(($117)>>2)]=$115;
   var $118=$p;
   var $119=(($118+80)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=(($120)|(0))!=0;
   if ($121) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $123=$2;
   var $124=$p;
   var $125=(($124+96)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=($126<<1);
   var $128=_mrb_malloc($123, $127);
   var $129=$128;
   var $130=$p;
   var $131=(($130+92)|0);
   HEAP32[(($131)>>2)]=$129;
   label = 7; break;
  case 7: 
   var $133=$3;
   var $134=(($133+84)|0);
   var $135=HEAP16[(($134)>>1)];
   var $136=$p;
   var $137=(($136+84)|0);
   HEAP16[(($137)>>1)]=$135;
   var $138=$p;
   $1=$138;
   label = 8; break;
  case 8: 
   var $140=$1;
   return $140;
  default: assert(0, "bad label: " + label);
 }
}
function _codegen($s, $tree, $val) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 244)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $nt;
   var $onerr;
   var $noexc;
   var $exend;
   var $pos1;
   var $pos2;
   var $tmp;
   var $lp;
   var $n2;
   var $exc;
   var $n3;
   var $n4;
   var $idx;
   var $epush;
   var $idx1;
   var $idx2;
   var $pos13;
   var $pos24;
   var $e;
   var $pos;
   var $pos5;
   var $lp6;
   var $lp7;
   var $head;
   var $pos18;
   var $pos29;
   var $pos3;
   var $tmp10;
   var $n;
   var $sym;
   var $sym11;
   var $n12;
   var $len;
   var $len13;
   var $n14;
   var $post;
   var $t;
   var $p;
   var $rhs;
   var $rn;
   var $sym15;
   var $len16=sp;
   var $name;
   var $idx17;
   var $pos19;
   var $n20;
   var $noop;
   var $sendv;
   var $args;
   var $s2;
   var $lv;
   var $ainfo;
   var $s221;
   var $lv22;
   var $ainfo23;
   var $n24;
   var $sendv25;
   var $msg;
   var $lp26;
   var $n27;
   var $idx28;
   var $lv29;
   var $up;
   var $sym30;
   var $sym31;
   var $sym32;
   var $sym33;
   var $buf=(sp)+(4);
   var $str=(sp)+(8);
   var $sym34;
   var $4=(sp)+(20);
   var $sym35;
   var $mrb;
   var $fix=(sp)+(32);
   var $str36=(sp)+(44);
   var $5=(sp)+(56);
   var $6=(sp)+(68);
   var $7=(sp)+(80);
   var $p37;
   var $base;
   var $i;
   var $co;
   var $overflow=(sp)+(92);
   var $f;
   var $off;
   var $8=(sp)+(96);
   var $off38;
   var $9=(sp)+(108);
   var $p39;
   var $f40;
   var $off41;
   var $10=(sp)+(120);
   var $p42;
   var $f43;
   var $off44;
   var $11=(sp)+(132);
   var $p45;
   var $base46;
   var $i47;
   var $co48;
   var $overflow49=(sp)+(144);
   var $f50;
   var $off51;
   var $12=(sp)+(148);
   var $off52;
   var $13=(sp)+(160);
   var $sym53;
   var $p54;
   var $len55;
   var $ai;
   var $off56;
   var $14=(sp)+(172);
   var $n57;
   var $n58;
   var $p59;
   var $len60;
   var $ai61;
   var $sym62;
   var $off63;
   var $15=(sp)+(184);
   var $p1;
   var $p2;
   var $ai64;
   var $sym65;
   var $off66;
   var $16=(sp)+(196);
   var $argc;
   var $17=(sp)+(208);
   var $n67;
   var $ai68;
   var $sym69;
   var $argc70;
   var $off71;
   var $p72;
   var $18=(sp)+(220);
   var $p273;
   var $off74;
   var $19=(sp)+(232);
   var $n75;
   var $sym76;
   var $a;
   var $b;
   var $c;
   var $undef;
   var $num;
   var $t77;
   var $symbol;
   var $idx78;
   var $idx79;
   var $idx80;
   var $sym81;
   var $idx82;
   var $recv;
   var $sym83;
   var $idx84;
   $1=$s;
   $2=$tree;
   $3=$val;
   var $20=$2;
   var $21=(($20)|(0))!=0;
   if ($21) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 437; break;
  case 3: 
   var $24=$2;
   var $25=(($24)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$26;
   $nt=$27;
   var $28=$2;
   var $29=(($28+8)|0);
   var $30=HEAP16[(($29)>>1)];
   var $31=$1;
   var $32=(($31+84)|0);
   HEAP16[(($32)>>1)]=$30;
   var $33=$2;
   var $34=(($33+4)|0);
   var $35=HEAP32[(($34)>>2)];
   $2=$35;
   var $36=$nt;
   if ((($36)|(0))==17) {
    label = 4; break;
   }
   else if ((($36)|(0))==18) {
    label = 14; break;
   }
   else if ((($36)|(0))==19) {
    label = 47; break;
   }
   else if ((($36)|(0))==53) {
    label = 48; break;
   }
   else if ((($36)|(0))==4) {
    label = 49; break;
   }
   else if ((($36)|(0))==5) {
    label = 50; break;
   }
   else if ((($36)|(0))==20) {
    label = 62; break;
   }
   else if ((($36)|(0))==21) {
    label = 63; break;
   }
   else if ((($36)|(0))==9) {
    label = 64; break;
   }
   else if ((($36)|(0))==10) {
    label = 65; break;
   }
   else if ((($36)|(0))==12) {
    label = 66; break;
   }
   else if ((($36)|(0))==6) {
    label = 69; break;
   }
   else if ((($36)|(0))==3) {
    label = 91; break;
   }
   else if ((($36)|(0))==30 | (($36)|(0))==29) {
    label = 92; break;
   }
   else if ((($36)|(0))==80) {
    label = 93; break;
   }
   else if ((($36)|(0))==81) {
    label = 96; break;
   }
   else if ((($36)|(0))==77) {
    label = 99; break;
   }
   else if ((($36)|(0))==78) {
    label = 102; break;
   }
   else if ((($36)|(0))==34) {
    label = 105; break;
   }
   else if ((($36)|(0))==36) {
    label = 113; break;
   }
   else if ((($36)|(0))==66) {
    label = 119; break;
   }
   else if ((($36)|(0))==24) {
    label = 120; break;
   }
   else if ((($36)|(0))==23) {
    label = 121; break;
   }
   else if ((($36)|(0))==28) {
    label = 153; break;
   }
   else if ((($36)|(0))==32) {
    label = 194; break;
   }
   else if ((($36)|(0))==33) {
    label = 209; break;
   }
   else if ((($36)|(0))==37) {
    label = 222; break;
   }
   else if ((($36)|(0))==38) {
    label = 231; break;
   }
   else if ((($36)|(0))==13) {
    label = 247; break;
   }
   else if ((($36)|(0))==14) {
    label = 250; break;
   }
   else if ((($36)|(0))==15) {
    label = 264; break;
   }
   else if ((($36)|(0))==16) {
    label = 270; break;
   }
   else if ((($36)|(0))==39) {
    label = 291; break;
   }
   else if ((($36)|(0))==41) {
    label = 302; break;
   }
   else if ((($36)|(0))==42) {
    label = 303; break;
   }
   else if ((($36)|(0))==44) {
    label = 304; break;
   }
   else if ((($36)|(0))==43) {
    label = 305; break;
   }
   else if ((($36)|(0))==89) {
    label = 306; break;
   }
   else if ((($36)|(0))==46) {
    label = 307; break;
   }
   else if ((($36)|(0))==45) {
    label = 308; break;
   }
   else if ((($36)|(0))==63) {
    label = 309; break;
   }
   else if ((($36)|(0))==69) {
    label = 310; break;
   }
   else if ((($36)|(0))==50) {
    label = 311; break;
   }
   else if ((($36)|(0))==51) {
    label = 321; break;
   }
   else if ((($36)|(0))==52) {
    label = 324; break;
   }
   else if ((($36)|(0))==55) {
    label = 336; break;
   }
   else if ((($36)|(0))==99) {
    label = 339; break;
   }
   else if ((($36)|(0))==56) {
    label = 340; break;
   }
   else if ((($36)|(0))==101) {
    label = 352; break;
   }
   else if ((($36)|(0))==102) {
    label = 353; break;
   }
   else if ((($36)|(0))==57) {
    label = 354; break;
   }
   else if ((($36)|(0))==59) {
    label = 357; break;
   }
   else if ((($36)|(0))==60) {
    label = 362; break;
   }
   else if ((($36)|(0))==54) {
    label = 378; break;
   }
   else if ((($36)|(0))==97) {
    label = 381; break;
   }
   else if ((($36)|(0))==85) {
    label = 384; break;
   }
   else if ((($36)|(0))==86) {
    label = 387; break;
   }
   else if ((($36)|(0))==87) {
    label = 390; break;
   }
   else if ((($36)|(0))==88) {
    label = 393; break;
   }
   else if ((($36)|(0))==72) {
    label = 396; break;
   }
   else if ((($36)|(0))==73) {
    label = 399; break;
   }
   else if ((($36)|(0))==74) {
    label = 405; break;
   }
   else if ((($36)|(0))==75) {
    label = 417; break;
   }
   else if ((($36)|(0))==76) {
    label = 426; break;
   }
   else if ((($36)|(0))==70) {
    label = 429; break;
   }
   else if ((($36)|(0))==71) {
    label = 432; break;
   }
   else if ((($36)|(0))==91) {
    label = 435; break;
   }
   else {
   label = 436; break;
   }
  case 4: 
   var $38=$3;
   var $39=(($38)|(0))!=0;
   if ($39) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $41=$2;
   var $42=(($41)|(0))!=0;
   if ($42) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $44=$1;
   var $45=$1;
   var $46=(($45+56)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$47 & 511;
   var $49=$48 << 23;
   var $50=5 | $49;
   _genop($44, $50);
   var $51=$1;
   _push_($51);
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $54=$2;
   var $55=(($54)|(0))!=0;
   if ($55) { label = 9; break; } else { label = 13; break; }
  case 9: 
   var $57=$1;
   var $58=$2;
   var $59=(($58)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=$2;
   var $62=(($61+4)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=(($63)|(0))!=0;
   if ($64) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $69 = 0;label = 12; break;
  case 11: 
   var $67=$3;
   var $69 = $67;label = 12; break;
  case 12: 
   var $69;
   _codegen($57, $60, $69);
   var $70=$2;
   var $71=(($70+4)|0);
   var $72=HEAP32[(($71)>>2)];
   $2=$72;
   label = 8; break;
  case 13: 
   label = 437; break;
  case 14: 
   var $75=$1;
   var $76=_new_label($75);
   $onerr=$76;
   var $77=$1;
   _genop($77, 26);
   var $78=$1;
   var $79=_loop_push($78, 3);
   $lp=$79;
   var $80=$onerr;
   var $81=$lp;
   var $82=(($81+4)|0);
   HEAP32[(($82)>>2)]=$80;
   var $83=$2;
   var $84=(($83)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85)|(0))!=0;
   if ($86) { label = 15; break; } else { label = 18; break; }
  case 15: 
   var $88=$1;
   var $89=$2;
   var $90=(($89)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=$3;
   _codegen($88, $91, $92);
   var $93=$3;
   var $94=(($93)|(0))!=0;
   if ($94) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $96=$1;
   var $97=(($96+56)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=((($98)-(1))|0);
   HEAP32[(($97)>>2)]=$99;
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $102=$lp;
   var $103=(($102)|0);
   HEAP32[(($103)>>2)]=4;
   var $104=$1;
   var $105=_new_label($104);
   $noexc=$105;
   var $106=$1;
   _genop($106, 23);
   var $107=$1;
   var $108=$onerr;
   _dispatch($107, $108);
   var $109=$2;
   var $110=(($109+4)|0);
   var $111=HEAP32[(($110)>>2)];
   $2=$111;
   $exend=0;
   $pos1=0;
   var $112=$2;
   var $113=(($112)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($114)|(0))!=0;
   if ($115) { label = 19; break; } else { label = 41; break; }
  case 19: 
   var $117=$2;
   var $118=(($117)|0);
   var $119=HEAP32[(($118)>>2)];
   $n2=$119;
   var $120=$1;
   var $121=(($120+56)|0);
   var $122=HEAP32[(($121)>>2)];
   $exc=$122;
   var $123=$1;
   var $124=$exc;
   var $125=$124 & 511;
   var $126=$125 << 23;
   var $127=27 | $126;
   _genop($123, $127);
   var $128=$1;
   _push_($128);
   label = 20; break;
  case 20: 
   var $130=$n2;
   var $131=(($130)|(0))!=0;
   if ($131) { label = 21; break; } else { label = 38; break; }
  case 21: 
   var $133=$n2;
   var $134=(($133)|0);
   var $135=HEAP32[(($134)>>2)];
   $n3=$135;
   var $136=$n3;
   var $137=(($136)|0);
   var $138=HEAP32[(($137)>>2)];
   $n4=$138;
   var $139=$pos1;
   var $140=(($139)|(0))!=0;
   if ($140) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $142=$1;
   var $143=$pos1;
   _dispatch($142, $143);
   label = 23; break;
  case 23: 
   $pos2=0;
   label = 24; break;
  case 24: 
   var $146=$n4;
   var $147=(($146)|(0))!=0;
   if ($147) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $149=$1;
   var $150=$n4;
   var $151=(($150)|0);
   var $152=HEAP32[(($151)>>2)];
   _codegen($149, $152, 1);
   label = 27; break;
  case 26: 
   var $154=$1;
   var $155=$1;
   var $156=(($155+56)|0);
   var $157=HEAP32[(($156)>>2)];
   var $158=$157 & 511;
   var $159=$158 << 23;
   var $160=17 | $159;
   var $161=$1;
   var $162=$1;
   var $163=(($162)|0);
   var $164=HEAP32[(($163)>>2)];
   var $165=_mrb_intern2($164, ((97712)|0), 13);
   var $166=_new_msym($161, $165);
   var $167=$166 & 65535;
   var $168=$167 << 7;
   var $169=$160 | $168;
   _genop($154, $169);
   var $170=$1;
   _push_($170);
   label = 27; break;
  case 27: 
   var $172=$1;
   var $173=$1;
   var $174=(($173+56)|0);
   var $175=HEAP32[(($174)>>2)];
   var $176=$175 & 511;
   var $177=$176 << 23;
   var $178=1 | $177;
   var $179=$exc;
   var $180=$179 & 511;
   var $181=$180 << 14;
   var $182=$178 | $181;
   _genop($172, $182);
   var $183=$1;
   var $184=(($183+56)|0);
   var $185=HEAP32[(($184)>>2)];
   var $186=((($185)-(1))|0);
   HEAP32[(($184)>>2)]=$186;
   var $187=$1;
   var $188=$1;
   var $189=(($188+56)|0);
   var $190=HEAP32[(($189)>>2)];
   var $191=$190 & 511;
   var $192=$191 << 23;
   var $193=32 | $192;
   var $194=$1;
   var $195=$1;
   var $196=(($195)|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=_mrb_intern2($197, ((95000)|0), 3);
   var $199=_new_msym($194, $198);
   var $200=$199 & 511;
   var $201=$200 << 14;
   var $202=$193 | $201;
   var $203=$202 | 128;
   _genop($187, $203);
   var $204=$1;
   var $205=_new_label($204);
   $tmp=$205;
   var $206=$1;
   var $207=$1;
   var $208=(($207+56)|0);
   var $209=HEAP32[(($208)>>2)];
   var $210=$209 & 511;
   var $211=$210 << 23;
   var $212=24 | $211;
   var $213=$pos2;
   var $214=((($213)+(32767))|0);
   var $215=$214 & 65535;
   var $216=$215 << 7;
   var $217=$212 | $216;
   _genop($206, $217);
   var $218=$tmp;
   $pos2=$218;
   var $219=$n4;
   var $220=(($219)|(0))!=0;
   if ($220) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $222=$n4;
   var $223=(($222+4)|0);
   var $224=HEAP32[(($223)>>2)];
   $n4=$224;
   label = 29; break;
  case 29: 
   label = 30; break;
  case 30: 
   var $227=$n4;
   var $228=(($227)|(0))!=0;
   if ($228) { label = 24; break; } else { label = 31; break; }
  case 31: 
   var $230=$1;
   var $231=_new_label($230);
   $pos1=$231;
   var $232=$1;
   _genop($232, 4194199);
   var $233=$1;
   var $234=$pos2;
   _dispatch_linked($233, $234);
   var $235=$1;
   var $236=(($235+56)|0);
   var $237=HEAP32[(($236)>>2)];
   var $238=((($237)-(1))|0);
   HEAP32[(($236)>>2)]=$238;
   var $239=$n3;
   var $240=(($239+4)|0);
   var $241=HEAP32[(($240)>>2)];
   var $242=(($241)|0);
   var $243=HEAP32[(($242)>>2)];
   var $244=(($243)|(0))!=0;
   if ($244) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $246=$1;
   var $247=$n3;
   var $248=(($247+4)|0);
   var $249=HEAP32[(($248)>>2)];
   var $250=(($249)|0);
   var $251=HEAP32[(($250)>>2)];
   var $252=$exc;
   _gen_assignment($246, $251, $252, 0);
   label = 33; break;
  case 33: 
   var $254=$n3;
   var $255=(($254+4)|0);
   var $256=HEAP32[(($255)>>2)];
   var $257=(($256+4)|0);
   var $258=HEAP32[(($257)>>2)];
   var $259=(($258)|0);
   var $260=HEAP32[(($259)>>2)];
   var $261=(($260)|(0))!=0;
   if ($261) { label = 34; break; } else { label = 37; break; }
  case 34: 
   var $263=$1;
   var $264=$n3;
   var $265=(($264+4)|0);
   var $266=HEAP32[(($265)>>2)];
   var $267=(($266+4)|0);
   var $268=HEAP32[(($267)>>2)];
   var $269=(($268)|0);
   var $270=HEAP32[(($269)>>2)];
   var $271=$3;
   _codegen($263, $270, $271);
   var $272=$3;
   var $273=(($272)|(0))!=0;
   if ($273) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $275=$1;
   var $276=(($275+56)|0);
   var $277=HEAP32[(($276)>>2)];
   var $278=((($277)-(1))|0);
   HEAP32[(($276)>>2)]=$278;
   label = 36; break;
  case 36: 
   label = 37; break;
  case 37: 
   var $281=$1;
   var $282=_new_label($281);
   $tmp=$282;
   var $283=$1;
   var $284=$exend;
   var $285=((($284)+(32767))|0);
   var $286=$285 & 65535;
   var $287=$286 << 7;
   var $288=23 | $287;
   _genop($283, $288);
   var $289=$tmp;
   $exend=$289;
   var $290=$n2;
   var $291=(($290+4)|0);
   var $292=HEAP32[(($291)>>2)];
   $n2=$292;
   var $293=$1;
   _push_($293);
   label = 20; break;
  case 38: 
   var $295=$pos1;
   var $296=(($295)|(0))!=0;
   if ($296) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $298=$1;
   var $299=$pos1;
   _dispatch($298, $299);
   var $300=$1;
   var $301=$exc;
   var $302=$301 & 511;
   var $303=$302 << 23;
   var $304=29 | $303;
   _genop($300, $304);
   label = 40; break;
  case 40: 
   label = 41; break;
  case 41: 
   var $307=$1;
   var $308=(($307+56)|0);
   var $309=HEAP32[(($308)>>2)];
   var $310=((($309)-(1))|0);
   HEAP32[(($308)>>2)]=$310;
   var $311=$2;
   var $312=(($311+4)|0);
   var $313=HEAP32[(($312)>>2)];
   $2=$313;
   var $314=$1;
   var $315=$noexc;
   _dispatch($314, $315);
   var $316=$1;
   _genop($316, 8388636);
   var $317=$2;
   var $318=(($317)|0);
   var $319=HEAP32[(($318)>>2)];
   var $320=(($319)|(0))!=0;
   if ($320) { label = 42; break; } else { label = 43; break; }
  case 42: 
   var $322=$1;
   var $323=$2;
   var $324=(($323)|0);
   var $325=HEAP32[(($324)>>2)];
   var $326=$3;
   _codegen($322, $325, $326);
   label = 46; break;
  case 43: 
   var $328=$3;
   var $329=(($328)|(0))!=0;
   if ($329) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $331=$1;
   _push_($331);
   label = 45; break;
  case 45: 
   label = 46; break;
  case 46: 
   var $334=$1;
   var $335=$exend;
   _dispatch_linked($334, $335);
   var $336=$1;
   _loop_pop($336, 0);
   label = 437; break;
  case 47: 
   var $338=$1;
   var $339=(($338+60)|0);
   var $340=HEAP32[(($339)>>2)];
   $epush=$340;
   var $341=$1;
   _genop($341, 30);
   var $342=$1;
   var $343=(($342+76)|0);
   var $344=HEAP32[(($343)>>2)];
   var $345=((($344)+(1))|0);
   HEAP32[(($343)>>2)]=$345;
   var $346=$1;
   var $347=$2;
   var $348=(($347)|0);
   var $349=HEAP32[(($348)>>2)];
   var $350=$3;
   _codegen($346, $349, $350);
   var $351=$1;
   var $352=$2;
   var $353=(($352+4)|0);
   var $354=HEAP32[(($353)>>2)];
   var $355=_scope_body($351, $354);
   $idx=$355;
   var $356=$idx;
   var $357=$356 & 65535;
   var $358=$357 << 7;
   var $359=30 | $358;
   var $360=$epush;
   var $361=$1;
   var $362=(($361+88)|0);
   var $363=HEAP32[(($362)>>2)];
   var $364=(($363+($360<<2))|0);
   HEAP32[(($364)>>2)]=$359;
   var $365=$1;
   var $366=(($365+76)|0);
   var $367=HEAP32[(($366)>>2)];
   var $368=((($367)-(1))|0);
   HEAP32[(($366)>>2)]=$368;
   var $369=$1;
   _genop_peep($369, 8388639, 0);
   label = 437; break;
  case 48: 
   var $371=$1;
   var $372=$2;
   var $373=_lambda_body($371, $372, 1);
   $idx1=$373;
   var $374=$1;
   var $375=$1;
   var $376=(($375+56)|0);
   var $377=HEAP32[(($376)>>2)];
   var $378=$377 & 511;
   var $379=$378 << 23;
   var $380=64 | $379;
   var $381=$idx1;
   var $382=$381 & 16383;
   var $383=$382 << 9;
   var $384=$383 | 384;
   var $385=$380 | $384;
   _genop($374, $385);
   var $386=$1;
   _push_($386);
   label = 437; break;
  case 49: 
   var $388=$1;
   var $389=$2;
   var $390=_lambda_body($388, $389, 1);
   $idx2=$390;
   var $391=$1;
   var $392=$1;
   var $393=(($392+56)|0);
   var $394=HEAP32[(($393)>>2)];
   var $395=$394 & 511;
   var $396=$395 << 23;
   var $397=64 | $396;
   var $398=$idx2;
   var $399=$398 & 16383;
   var $400=$399 << 9;
   var $401=$400 | 256;
   var $402=$397 | $401;
   _genop($391, $402);
   var $403=$1;
   _push_($403);
   label = 437; break;
  case 50: 
   var $405=$2;
   var $406=(($405+4)|0);
   var $407=HEAP32[(($406)>>2)];
   var $408=(($407+4)|0);
   var $409=HEAP32[(($408)>>2)];
   var $410=(($409)|0);
   var $411=HEAP32[(($410)>>2)];
   $e=$411;
   var $412=$1;
   var $413=$2;
   var $414=(($413)|0);
   var $415=HEAP32[(($414)>>2)];
   _codegen($412, $415, 1);
   var $416=$1;
   var $417=(($416+56)|0);
   var $418=HEAP32[(($417)>>2)];
   var $419=((($418)-(1))|0);
   HEAP32[(($417)>>2)]=$419;
   var $420=$1;
   var $421=_new_label($420);
   $pos13=$421;
   var $422=$1;
   var $423=$1;
   var $424=(($423+56)|0);
   var $425=HEAP32[(($424)>>2)];
   var $426=$425 & 511;
   var $427=$426 << 23;
   var $428=25 | $427;
   var $429=$428 | 4194176;
   _genop($422, $429);
   var $430=$1;
   var $431=$2;
   var $432=(($431+4)|0);
   var $433=HEAP32[(($432)>>2)];
   var $434=(($433)|0);
   var $435=HEAP32[(($434)>>2)];
   var $436=$3;
   _codegen($430, $435, $436);
   var $437=$3;
   var $438=(($437)|(0))!=0;
   if ($438) { label = 51; break; } else { label = 53; break; }
  case 51: 
   var $440=$2;
   var $441=(($440+4)|0);
   var $442=HEAP32[(($441)>>2)];
   var $443=(($442)|0);
   var $444=HEAP32[(($443)>>2)];
   var $445=(($444)|(0))!=0;
   if ($445) { label = 53; break; } else { label = 52; break; }
  case 52: 
   var $447=$1;
   var $448=$1;
   var $449=(($448+56)|0);
   var $450=HEAP32[(($449)>>2)];
   var $451=$450 & 511;
   var $452=$451 << 23;
   var $453=5 | $452;
   _genop($447, $453);
   var $454=$1;
   _push_($454);
   label = 53; break;
  case 53: 
   var $456=$e;
   var $457=(($456)|(0))!=0;
   if ($457) { label = 54; break; } else { label = 57; break; }
  case 54: 
   var $459=$3;
   var $460=(($459)|(0))!=0;
   if ($460) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $462=$1;
   var $463=(($462+56)|0);
   var $464=HEAP32[(($463)>>2)];
   var $465=((($464)-(1))|0);
   HEAP32[(($463)>>2)]=$465;
   label = 56; break;
  case 56: 
   var $467=$1;
   var $468=_new_label($467);
   $pos24=$468;
   var $469=$1;
   _genop($469, 4194199);
   var $470=$1;
   var $471=$pos13;
   _dispatch($470, $471);
   var $472=$1;
   var $473=$e;
   var $474=$3;
   _codegen($472, $473, $474);
   var $475=$1;
   var $476=$pos24;
   _dispatch($475, $476);
   label = 61; break;
  case 57: 
   var $478=$3;
   var $479=(($478)|(0))!=0;
   if ($479) { label = 58; break; } else { label = 59; break; }
  case 58: 
   var $481=$1;
   var $482=(($481+56)|0);
   var $483=HEAP32[(($482)>>2)];
   var $484=((($483)-(1))|0);
   HEAP32[(($482)>>2)]=$484;
   var $485=$1;
   var $486=_new_label($485);
   $pos24=$486;
   var $487=$1;
   _genop($487, 4194199);
   var $488=$1;
   var $489=$pos13;
   _dispatch($488, $489);
   var $490=$1;
   var $491=$1;
   var $492=(($491+56)|0);
   var $493=HEAP32[(($492)>>2)];
   var $494=$493 & 511;
   var $495=$494 << 23;
   var $496=5 | $495;
   _genop($490, $496);
   var $497=$1;
   var $498=$pos24;
   _dispatch($497, $498);
   var $499=$1;
   _push_($499);
   label = 60; break;
  case 59: 
   var $501=$1;
   var $502=$pos13;
   _dispatch($501, $502);
   label = 60; break;
  case 60: 
   label = 61; break;
  case 61: 
   label = 437; break;
  case 62: 
   var $506=$1;
   var $507=$2;
   var $508=(($507)|0);
   var $509=HEAP32[(($508)>>2)];
   _codegen($506, $509, 1);
   var $510=$1;
   var $511=_new_label($510);
   $pos=$511;
   var $512=$1;
   var $513=(($512+56)|0);
   var $514=HEAP32[(($513)>>2)];
   var $515=((($514)-(1))|0);
   HEAP32[(($513)>>2)]=$515;
   var $516=$1;
   var $517=$1;
   var $518=(($517+56)|0);
   var $519=HEAP32[(($518)>>2)];
   var $520=$519 & 511;
   var $521=$520 << 23;
   var $522=25 | $521;
   var $523=$522 | 4194176;
   _genop($516, $523);
   var $524=$1;
   var $525=$2;
   var $526=(($525+4)|0);
   var $527=HEAP32[(($526)>>2)];
   var $528=$3;
   _codegen($524, $527, $528);
   var $529=$1;
   var $530=$pos;
   _dispatch($529, $530);
   label = 437; break;
  case 63: 
   var $532=$1;
   var $533=$2;
   var $534=(($533)|0);
   var $535=HEAP32[(($534)>>2)];
   _codegen($532, $535, 1);
   var $536=$1;
   var $537=_new_label($536);
   $pos5=$537;
   var $538=$1;
   var $539=(($538+56)|0);
   var $540=HEAP32[(($539)>>2)];
   var $541=((($540)-(1))|0);
   HEAP32[(($539)>>2)]=$541;
   var $542=$1;
   var $543=$1;
   var $544=(($543+56)|0);
   var $545=HEAP32[(($544)>>2)];
   var $546=$545 & 511;
   var $547=$546 << 23;
   var $548=24 | $547;
   var $549=$548 | 4194176;
   _genop($542, $549);
   var $550=$1;
   var $551=$2;
   var $552=(($551+4)|0);
   var $553=HEAP32[(($552)>>2)];
   var $554=$3;
   _codegen($550, $553, $554);
   var $555=$1;
   var $556=$pos5;
   _dispatch($555, $556);
   label = 437; break;
  case 64: 
   var $558=$1;
   var $559=_loop_push($558, 0);
   $lp6=$559;
   var $560=$1;
   var $561=_new_label($560);
   var $562=$lp6;
   var $563=(($562+4)|0);
   HEAP32[(($563)>>2)]=$561;
   var $564=$1;
   _genop($564, 4194199);
   var $565=$1;
   var $566=_new_label($565);
   var $567=$lp6;
   var $568=(($567+8)|0);
   HEAP32[(($568)>>2)]=$566;
   var $569=$1;
   var $570=$2;
   var $571=(($570+4)|0);
   var $572=HEAP32[(($571)>>2)];
   _codegen($569, $572, 0);
   var $573=$1;
   var $574=$lp6;
   var $575=(($574+4)|0);
   var $576=HEAP32[(($575)>>2)];
   _dispatch($573, $576);
   var $577=$1;
   var $578=$2;
   var $579=(($578)|0);
   var $580=HEAP32[(($579)>>2)];
   _codegen($577, $580, 1);
   var $581=$1;
   var $582=(($581+56)|0);
   var $583=HEAP32[(($582)>>2)];
   var $584=((($583)-(1))|0);
   HEAP32[(($582)>>2)]=$584;
   var $585=$1;
   var $586=$1;
   var $587=(($586+56)|0);
   var $588=HEAP32[(($587)>>2)];
   var $589=$588 & 511;
   var $590=$589 << 23;
   var $591=24 | $590;
   var $592=$lp6;
   var $593=(($592+8)|0);
   var $594=HEAP32[(($593)>>2)];
   var $595=$1;
   var $596=(($595+60)|0);
   var $597=HEAP32[(($596)>>2)];
   var $598=((($594)-($597))|0);
   var $599=((($598)+(32767))|0);
   var $600=$599 & 65535;
   var $601=$600 << 7;
   var $602=$591 | $601;
   _genop($585, $602);
   var $603=$1;
   var $604=$3;
   _loop_pop($603, $604);
   label = 437; break;
  case 65: 
   var $606=$1;
   var $607=_loop_push($606, 0);
   $lp7=$607;
   var $608=$1;
   var $609=_new_label($608);
   var $610=$lp7;
   var $611=(($610+4)|0);
   HEAP32[(($611)>>2)]=$609;
   var $612=$1;
   _genop($612, 4194199);
   var $613=$1;
   var $614=_new_label($613);
   var $615=$lp7;
   var $616=(($615+8)|0);
   HEAP32[(($616)>>2)]=$614;
   var $617=$1;
   var $618=$2;
   var $619=(($618+4)|0);
   var $620=HEAP32[(($619)>>2)];
   _codegen($617, $620, 0);
   var $621=$1;
   var $622=$lp7;
   var $623=(($622+4)|0);
   var $624=HEAP32[(($623)>>2)];
   _dispatch($621, $624);
   var $625=$1;
   var $626=$2;
   var $627=(($626)|0);
   var $628=HEAP32[(($627)>>2)];
   _codegen($625, $628, 1);
   var $629=$1;
   var $630=(($629+56)|0);
   var $631=HEAP32[(($630)>>2)];
   var $632=((($631)-(1))|0);
   HEAP32[(($630)>>2)]=$632;
   var $633=$1;
   var $634=$1;
   var $635=(($634+56)|0);
   var $636=HEAP32[(($635)>>2)];
   var $637=$636 & 511;
   var $638=$637 << 23;
   var $639=25 | $638;
   var $640=$lp7;
   var $641=(($640+8)|0);
   var $642=HEAP32[(($641)>>2)];
   var $643=$1;
   var $644=(($643+60)|0);
   var $645=HEAP32[(($644)>>2)];
   var $646=((($642)-($645))|0);
   var $647=((($646)+(32767))|0);
   var $648=$647 & 65535;
   var $649=$648 << 7;
   var $650=$639 | $649;
   _genop($633, $650);
   var $651=$1;
   var $652=$3;
   _loop_pop($651, $652);
   label = 437; break;
  case 66: 
   var $654=$1;
   var $655=$2;
   _for_body($654, $655);
   var $656=$3;
   var $657=(($656)|(0))!=0;
   if ($657) { label = 67; break; } else { label = 68; break; }
  case 67: 
   var $659=$1;
   _push_($659);
   label = 68; break;
  case 68: 
   label = 437; break;
  case 69: 
   $head=0;
   $pos3=0;
   var $662=$2;
   var $663=(($662)|0);
   var $664=HEAP32[(($663)>>2)];
   var $665=(($664)|(0))!=0;
   if ($665) { label = 70; break; } else { label = 71; break; }
  case 70: 
   var $667=$1;
   var $668=(($667+56)|0);
   var $669=HEAP32[(($668)>>2)];
   $head=$669;
   var $670=$1;
   var $671=$2;
   var $672=(($671)|0);
   var $673=HEAP32[(($672)>>2)];
   _codegen($670, $673, 1);
   label = 71; break;
  case 71: 
   var $675=$2;
   var $676=(($675+4)|0);
   var $677=HEAP32[(($676)>>2)];
   $2=$677;
   label = 72; break;
  case 72: 
   var $679=$2;
   var $680=(($679)|(0))!=0;
   if ($680) { label = 73; break; } else { label = 86; break; }
  case 73: 
   var $682=$2;
   var $683=(($682)|0);
   var $684=HEAP32[(($683)>>2)];
   var $685=(($684)|0);
   var $686=HEAP32[(($685)>>2)];
   $n=$686;
   $pos29=0;
   $pos18=0;
   label = 74; break;
  case 74: 
   var $688=$n;
   var $689=(($688)|(0))!=0;
   if ($689) { label = 75; break; } else { label = 79; break; }
  case 75: 
   var $691=$1;
   var $692=$n;
   var $693=(($692)|0);
   var $694=HEAP32[(($693)>>2)];
   _codegen($691, $694, 1);
   var $695=$head;
   var $696=(($695)|(0))!=0;
   if ($696) { label = 76; break; } else { label = 77; break; }
  case 76: 
   var $698=$1;
   var $699=$1;
   var $700=(($699+56)|0);
   var $701=HEAP32[(($700)>>2)];
   var $702=$701 & 511;
   var $703=$702 << 23;
   var $704=1 | $703;
   var $705=$head;
   var $706=$705 & 511;
   var $707=$706 << 14;
   var $708=$704 | $707;
   _genop($698, $708);
   var $709=$1;
   var $710=(($709+56)|0);
   var $711=HEAP32[(($710)>>2)];
   var $712=((($711)-(1))|0);
   HEAP32[(($710)>>2)]=$712;
   var $713=$1;
   var $714=$1;
   var $715=(($714+56)|0);
   var $716=HEAP32[(($715)>>2)];
   var $717=$716 & 511;
   var $718=$717 << 23;
   var $719=32 | $718;
   var $720=$1;
   var $721=$1;
   var $722=(($721)|0);
   var $723=HEAP32[(($722)>>2)];
   var $724=_mrb_intern2($723, ((95000)|0), 3);
   var $725=_new_msym($720, $724);
   var $726=$725 & 511;
   var $727=$726 << 14;
   var $728=$719 | $727;
   var $729=$728 | 128;
   _genop($713, $729);
   label = 78; break;
  case 77: 
   var $731=$1;
   var $732=(($731+56)|0);
   var $733=HEAP32[(($732)>>2)];
   var $734=((($733)-(1))|0);
   HEAP32[(($732)>>2)]=$734;
   label = 78; break;
  case 78: 
   var $736=$1;
   var $737=_new_label($736);
   $tmp10=$737;
   var $738=$1;
   var $739=$1;
   var $740=(($739+56)|0);
   var $741=HEAP32[(($740)>>2)];
   var $742=$741 & 511;
   var $743=$742 << 23;
   var $744=24 | $743;
   var $745=$pos29;
   var $746=((($745)+(32767))|0);
   var $747=$746 & 65535;
   var $748=$747 << 7;
   var $749=$744 | $748;
   _genop($738, $749);
   var $750=$tmp10;
   $pos29=$750;
   var $751=$n;
   var $752=(($751+4)|0);
   var $753=HEAP32[(($752)>>2)];
   $n=$753;
   label = 74; break;
  case 79: 
   var $755=$2;
   var $756=(($755)|0);
   var $757=HEAP32[(($756)>>2)];
   var $758=(($757)|0);
   var $759=HEAP32[(($758)>>2)];
   var $760=(($759)|(0))!=0;
   if ($760) { label = 80; break; } else { label = 81; break; }
  case 80: 
   var $762=$1;
   var $763=_new_label($762);
   $pos18=$763;
   var $764=$1;
   _genop($764, 4194199);
   var $765=$1;
   var $766=$pos29;
   _dispatch_linked($765, $766);
   label = 81; break;
  case 81: 
   var $768=$1;
   var $769=$2;
   var $770=(($769)|0);
   var $771=HEAP32[(($770)>>2)];
   var $772=(($771+4)|0);
   var $773=HEAP32[(($772)>>2)];
   var $774=$3;
   _codegen($768, $773, $774);
   var $775=$3;
   var $776=(($775)|(0))!=0;
   if ($776) { label = 82; break; } else { label = 83; break; }
  case 82: 
   var $778=$1;
   var $779=(($778+56)|0);
   var $780=HEAP32[(($779)>>2)];
   var $781=((($780)-(1))|0);
   HEAP32[(($779)>>2)]=$781;
   label = 83; break;
  case 83: 
   var $783=$1;
   var $784=_new_label($783);
   $tmp10=$784;
   var $785=$1;
   var $786=$pos3;
   var $787=((($786)+(32767))|0);
   var $788=$787 & 65535;
   var $789=$788 << 7;
   var $790=23 | $789;
   _genop($785, $790);
   var $791=$tmp10;
   $pos3=$791;
   var $792=$pos18;
   var $793=(($792)|(0))!=0;
   if ($793) { label = 84; break; } else { label = 85; break; }
  case 84: 
   var $795=$1;
   var $796=$pos18;
   _dispatch($795, $796);
   label = 85; break;
  case 85: 
   var $798=$2;
   var $799=(($798+4)|0);
   var $800=HEAP32[(($799)>>2)];
   $2=$800;
   label = 72; break;
  case 86: 
   var $802=$3;
   var $803=(($802)|(0))!=0;
   if ($803) { label = 87; break; } else { label = 88; break; }
  case 87: 
   var $805=$1;
   var $806=$1;
   var $807=(($806+56)|0);
   var $808=HEAP32[(($807)>>2)];
   var $809=$808 & 511;
   var $810=$809 << 23;
   var $811=5 | $810;
   _genop($805, $811);
   var $812=$1;
   _push_($812);
   label = 88; break;
  case 88: 
   var $814=$pos3;
   var $815=(($814)|(0))!=0;
   if ($815) { label = 89; break; } else { label = 90; break; }
  case 89: 
   var $817=$1;
   var $818=$pos3;
   _dispatch_linked($817, $818);
   label = 90; break;
  case 90: 
   label = 437; break;
  case 91: 
   var $821=$1;
   var $822=$2;
   var $823=_scope_body($821, $822);
   label = 437; break;
  case 92: 
   var $825=$1;
   var $826=$2;
   var $827=$3;
   _gen_call($825, $826, 0, 0, $827);
   label = 437; break;
  case 93: 
   var $829=$1;
   var $830=$2;
   var $831=(($830)|0);
   var $832=HEAP32[(($831)>>2)];
   var $833=$3;
   _codegen($829, $832, $833);
   var $834=$1;
   var $835=$2;
   var $836=(($835+4)|0);
   var $837=HEAP32[(($836)>>2)];
   var $838=$3;
   _codegen($834, $837, $838);
   var $839=$3;
   var $840=(($839)|(0))!=0;
   if ($840) { label = 94; break; } else { label = 95; break; }
  case 94: 
   var $842=$1;
   var $843=(($842+56)|0);
   var $844=HEAP32[(($843)>>2)];
   var $845=((($844)-(1))|0);
   HEAP32[(($843)>>2)]=$845;
   var $846=$1;
   var $847=(($846+56)|0);
   var $848=HEAP32[(($847)>>2)];
   var $849=((($848)-(1))|0);
   HEAP32[(($847)>>2)]=$849;
   var $850=$1;
   var $851=$1;
   var $852=(($851+56)|0);
   var $853=HEAP32[(($852)>>2)];
   var $854=$853 & 511;
   var $855=$854 << 23;
   var $856=65 | $855;
   var $857=$1;
   var $858=(($857+56)|0);
   var $859=HEAP32[(($858)>>2)];
   var $860=$859 & 511;
   var $861=$860 << 14;
   var $862=$856 | $861;
   _genop($850, $862);
   var $863=$1;
   _push_($863);
   label = 95; break;
  case 95: 
   label = 437; break;
  case 96: 
   var $866=$1;
   var $867=$2;
   var $868=(($867)|0);
   var $869=HEAP32[(($868)>>2)];
   var $870=$3;
   _codegen($866, $869, $870);
   var $871=$1;
   var $872=$2;
   var $873=(($872+4)|0);
   var $874=HEAP32[(($873)>>2)];
   var $875=$3;
   _codegen($871, $874, $875);
   var $876=$3;
   var $877=(($876)|(0))!=0;
   if ($877) { label = 97; break; } else { label = 98; break; }
  case 97: 
   var $879=$1;
   var $880=(($879+56)|0);
   var $881=HEAP32[(($880)>>2)];
   var $882=((($881)-(1))|0);
   HEAP32[(($880)>>2)]=$882;
   var $883=$1;
   var $884=(($883+56)|0);
   var $885=HEAP32[(($884)>>2)];
   var $886=((($885)-(1))|0);
   HEAP32[(($884)>>2)]=$886;
   var $887=$1;
   var $888=$1;
   var $889=(($888+56)|0);
   var $890=HEAP32[(($889)>>2)];
   var $891=$890 & 511;
   var $892=$891 << 23;
   var $893=65 | $892;
   var $894=$1;
   var $895=(($894+56)|0);
   var $896=HEAP32[(($895)>>2)];
   var $897=$896 & 511;
   var $898=$897 << 14;
   var $899=$893 | $898;
   var $900=$899 | 128;
   _genop($887, $900);
   var $901=$1;
   _push_($901);
   label = 98; break;
  case 98: 
   label = 437; break;
  case 99: 
   var $904=$1;
   var $905=$2;
   var $906=(($905+4)|0);
   var $907=HEAP32[(($906)>>2)];
   var $908=$907;
   var $909=(($908) & 65535);
   var $910=_new_sym925($904, $909);
   $sym=$910;
   var $911=$1;
   var $912=$2;
   var $913=(($912)|0);
   var $914=HEAP32[(($913)>>2)];
   _codegen($911, $914, 1);
   var $915=$1;
   var $916=(($915+56)|0);
   var $917=HEAP32[(($916)>>2)];
   var $918=((($917)-(1))|0);
   HEAP32[(($916)>>2)]=$918;
   var $919=$1;
   var $920=$1;
   var $921=(($920+56)|0);
   var $922=HEAP32[(($921)>>2)];
   var $923=$922 & 511;
   var $924=$923 << 23;
   var $925=19 | $924;
   var $926=$sym;
   var $927=$926 & 65535;
   var $928=$927 << 7;
   var $929=$925 | $928;
   _genop($919, $929);
   var $930=$3;
   var $931=(($930)|(0))!=0;
   if ($931) { label = 100; break; } else { label = 101; break; }
  case 100: 
   var $933=$1;
   _push_($933);
   label = 101; break;
  case 101: 
   label = 437; break;
  case 102: 
   var $936=$1;
   var $937=$2;
   var $938=$937;
   var $939=(($938) & 65535);
   var $940=_new_sym925($936, $939);
   $sym11=$940;
   var $941=$1;
   var $942=$1;
   var $943=(($942+56)|0);
   var $944=HEAP32[(($943)>>2)];
   var $945=$944 & 511;
   var $946=$945 << 23;
   var $947=66 | $946;
   _genop($941, $947);
   var $948=$1;
   var $949=$1;
   var $950=(($949+56)|0);
   var $951=HEAP32[(($950)>>2)];
   var $952=$951 & 511;
   var $953=$952 << 23;
   var $954=19 | $953;
   var $955=$sym11;
   var $956=$955 & 65535;
   var $957=$956 << 7;
   var $958=$954 | $957;
   _genop($948, $958);
   var $959=$3;
   var $960=(($959)|(0))!=0;
   if ($960) { label = 103; break; } else { label = 104; break; }
  case 103: 
   var $962=$1;
   _push_($962);
   label = 104; break;
  case 104: 
   label = 437; break;
  case 105: 
   var $965=$1;
   var $966=$2;
   var $967=$3;
   var $968=_gen_values($965, $966, $967);
   $n12=$968;
   var $969=$n12;
   var $970=(($969)|(0)) >= 0;
   if ($970) { label = 106; break; } else { label = 109; break; }
  case 106: 
   var $972=$3;
   var $973=(($972)|(0))!=0;
   if ($973) { label = 107; break; } else { label = 108; break; }
  case 107: 
   var $975=$n12;
   var $976=$1;
   var $977=(($976+56)|0);
   var $978=HEAP32[(($977)>>2)];
   var $979=((($978)-($975))|0);
   HEAP32[(($977)>>2)]=$979;
   var $980=$1;
   var $981=$1;
   var $982=(($981+56)|0);
   var $983=HEAP32[(($982)>>2)];
   var $984=$983 & 511;
   var $985=$984 << 23;
   var $986=55 | $985;
   var $987=$1;
   var $988=(($987+56)|0);
   var $989=HEAP32[(($988)>>2)];
   var $990=$989 & 511;
   var $991=$990 << 14;
   var $992=$986 | $991;
   var $993=$n12;
   var $994=$993 & 127;
   var $995=$994 << 7;
   var $996=$992 | $995;
   _genop($980, $996);
   var $997=$1;
   _push_($997);
   label = 108; break;
  case 108: 
   label = 112; break;
  case 109: 
   var $1000=$3;
   var $1001=(($1000)|(0))!=0;
   if ($1001) { label = 110; break; } else { label = 111; break; }
  case 110: 
   var $1003=$1;
   _push_($1003);
   label = 111; break;
  case 111: 
   label = 112; break;
  case 112: 
   label = 437; break;
  case 113: 
   $len=0;
   label = 114; break;
  case 114: 
   var $1008=$2;
   var $1009=(($1008)|(0))!=0;
   if ($1009) { label = 115; break; } else { label = 116; break; }
  case 115: 
   var $1011=$1;
   var $1012=$2;
   var $1013=(($1012)|0);
   var $1014=HEAP32[(($1013)>>2)];
   var $1015=(($1014)|0);
   var $1016=HEAP32[(($1015)>>2)];
   var $1017=$3;
   _codegen($1011, $1016, $1017);
   var $1018=$1;
   var $1019=$2;
   var $1020=(($1019)|0);
   var $1021=HEAP32[(($1020)>>2)];
   var $1022=(($1021+4)|0);
   var $1023=HEAP32[(($1022)>>2)];
   var $1024=$3;
   _codegen($1018, $1023, $1024);
   var $1025=$len;
   var $1026=((($1025)+(1))|0);
   $len=$1026;
   var $1027=$2;
   var $1028=(($1027+4)|0);
   var $1029=HEAP32[(($1028)>>2)];
   $2=$1029;
   label = 114; break;
  case 116: 
   var $1031=$3;
   var $1032=(($1031)|(0))!=0;
   if ($1032) { label = 117; break; } else { label = 118; break; }
  case 117: 
   var $1034=$len;
   var $1035=($1034<<1);
   var $1036=$1;
   var $1037=(($1036+56)|0);
   var $1038=HEAP32[(($1037)>>2)];
   var $1039=((($1038)-($1035))|0);
   HEAP32[(($1037)>>2)]=$1039;
   var $1040=$1;
   var $1041=$1;
   var $1042=(($1041+56)|0);
   var $1043=HEAP32[(($1042)>>2)];
   var $1044=$1043 & 511;
   var $1045=$1044 << 23;
   var $1046=63 | $1045;
   var $1047=$1;
   var $1048=(($1047+56)|0);
   var $1049=HEAP32[(($1048)>>2)];
   var $1050=$1049 & 511;
   var $1051=$1050 << 14;
   var $1052=$1046 | $1051;
   var $1053=$len;
   var $1054=$1053 & 127;
   var $1055=$1054 << 7;
   var $1056=$1052 | $1055;
   _genop($1040, $1056);
   var $1057=$1;
   _push_($1057);
   label = 118; break;
  case 118: 
   label = 437; break;
  case 119: 
   var $1060=$1;
   var $1061=$2;
   _codegen($1060, $1061, 1);
   label = 437; break;
  case 120: 
   var $1063=$1;
   var $1064=$2;
   var $1065=(($1064+4)|0);
   var $1066=HEAP32[(($1065)>>2)];
   _codegen($1063, $1066, 1);
   var $1067=$1;
   var $1068=(($1067+56)|0);
   var $1069=HEAP32[(($1068)>>2)];
   var $1070=((($1069)-(1))|0);
   HEAP32[(($1068)>>2)]=$1070;
   var $1071=$1;
   var $1072=$2;
   var $1073=(($1072)|0);
   var $1074=HEAP32[(($1073)>>2)];
   var $1075=$1;
   var $1076=(($1075+56)|0);
   var $1077=HEAP32[(($1076)>>2)];
   var $1078=$3;
   _gen_assignment($1071, $1074, $1077, $1078);
   label = 437; break;
  case 121: 
   $len13=0;
   $n14=0;
   $post=0;
   var $1080=$2;
   var $1081=(($1080+4)|0);
   var $1082=HEAP32[(($1081)>>2)];
   $t=$1082;
   var $1083=$1;
   var $1084=(($1083+56)|0);
   var $1085=HEAP32[(($1084)>>2)];
   $rhs=$1085;
   var $1086=$t;
   var $1087=(($1086)|0);
   var $1088=HEAP32[(($1087)>>2)];
   var $1089=$1088;
   var $1090=(($1089)|(0))==34;
   if ($1090) { label = 122; break; } else { label = 149; break; }
  case 122: 
   var $1092=$t;
   var $1093=(($1092+4)|0);
   var $1094=HEAP32[(($1093)>>2)];
   var $1095=_nosplat($1094);
   var $1096=(($1095)&(255));
   var $1097=(($1096)|(0))!=0;
   if ($1097) { label = 123; break; } else { label = 149; break; }
  case 123: 
   var $1099=$t;
   var $1100=(($1099+4)|0);
   var $1101=HEAP32[(($1100)>>2)];
   $t=$1101;
   label = 124; break;
  case 124: 
   var $1103=$t;
   var $1104=(($1103)|(0))!=0;
   if ($1104) { label = 125; break; } else { label = 126; break; }
  case 125: 
   var $1106=$1;
   var $1107=$t;
   var $1108=(($1107)|0);
   var $1109=HEAP32[(($1108)>>2)];
   _codegen($1106, $1109, 1);
   var $1110=$len13;
   var $1111=((($1110)+(1))|0);
   $len13=$1111;
   var $1112=$t;
   var $1113=(($1112+4)|0);
   var $1114=HEAP32[(($1113)>>2)];
   $t=$1114;
   label = 124; break;
  case 126: 
   var $1116=$2;
   var $1117=(($1116)|0);
   var $1118=HEAP32[(($1117)>>2)];
   $2=$1118;
   var $1119=$2;
   var $1120=(($1119)|0);
   var $1121=HEAP32[(($1120)>>2)];
   var $1122=(($1121)|(0))!=0;
   if ($1122) { label = 127; break; } else { label = 131; break; }
  case 127: 
   var $1124=$2;
   var $1125=(($1124)|0);
   var $1126=HEAP32[(($1125)>>2)];
   $t=$1126;
   $n14=0;
   label = 128; break;
  case 128: 
   var $1128=$t;
   var $1129=(($1128)|(0))!=0;
   if ($1129) { label = 129; break; } else { label = 130; break; }
  case 129: 
   var $1131=$1;
   var $1132=$t;
   var $1133=(($1132)|0);
   var $1134=HEAP32[(($1133)>>2)];
   var $1135=$rhs;
   var $1136=$n14;
   var $1137=((($1135)+($1136))|0);
   _gen_assignment($1131, $1134, $1137, 0);
   var $1138=$n14;
   var $1139=((($1138)+(1))|0);
   $n14=$1139;
   var $1140=$t;
   var $1141=(($1140+4)|0);
   var $1142=HEAP32[(($1141)>>2)];
   $t=$1142;
   label = 128; break;
  case 130: 
   label = 131; break;
  case 131: 
   var $1145=$2;
   var $1146=(($1145+4)|0);
   var $1147=HEAP32[(($1146)>>2)];
   $t=$1147;
   var $1148=$t;
   var $1149=(($1148)|(0))!=0;
   if ($1149) { label = 132; break; } else { label = 146; break; }
  case 132: 
   var $1151=$t;
   var $1152=(($1151+4)|0);
   var $1153=HEAP32[(($1152)>>2)];
   var $1154=(($1153)|(0))!=0;
   if ($1154) { label = 133; break; } else { label = 137; break; }
  case 133: 
   var $1156=$t;
   var $1157=(($1156+4)|0);
   var $1158=HEAP32[(($1157)>>2)];
   var $1159=(($1158)|0);
   var $1160=HEAP32[(($1159)>>2)];
   $p=$1160;
   label = 134; break;
  case 134: 
   var $1162=$p;
   var $1163=(($1162)|(0))!=0;
   if ($1163) { label = 135; break; } else { label = 136; break; }
  case 135: 
   var $1165=$post;
   var $1166=((($1165)+(1))|0);
   $post=$1166;
   var $1167=$p;
   var $1168=(($1167+4)|0);
   var $1169=HEAP32[(($1168)>>2)];
   $p=$1169;
   label = 134; break;
  case 136: 
   label = 137; break;
  case 137: 
   var $1172=$t;
   var $1173=(($1172)|0);
   var $1174=HEAP32[(($1173)>>2)];
   var $1175=(($1174)|(0))!=0;
   if ($1175) { label = 138; break; } else { label = 139; break; }
  case 138: 
   var $1177=$len13;
   var $1178=$post;
   var $1179=((($1177)-($1178))|0);
   var $1180=$n14;
   var $1181=((($1179)-($1180))|0);
   $rn=$1181;
   var $1182=$1;
   var $1183=$1;
   var $1184=(($1183+56)|0);
   var $1185=HEAP32[(($1184)>>2)];
   var $1186=$1185 & 511;
   var $1187=$1186 << 23;
   var $1188=55 | $1187;
   var $1189=$rhs;
   var $1190=$n14;
   var $1191=((($1189)+($1190))|0);
   var $1192=$1191 & 511;
   var $1193=$1192 << 14;
   var $1194=$1188 | $1193;
   var $1195=$rn;
   var $1196=$1195 & 127;
   var $1197=$1196 << 7;
   var $1198=$1194 | $1197;
   _genop($1182, $1198);
   var $1199=$1;
   var $1200=$t;
   var $1201=(($1200)|0);
   var $1202=HEAP32[(($1201)>>2)];
   var $1203=$1;
   var $1204=(($1203+56)|0);
   var $1205=HEAP32[(($1204)>>2)];
   _gen_assignment($1199, $1202, $1205, 0);
   var $1206=$rn;
   var $1207=$n14;
   var $1208=((($1207)+($1206))|0);
   $n14=$1208;
   label = 139; break;
  case 139: 
   var $1210=$t;
   var $1211=(($1210+4)|0);
   var $1212=HEAP32[(($1211)>>2)];
   var $1213=(($1212)|(0))!=0;
   if ($1213) { label = 140; break; } else { label = 145; break; }
  case 140: 
   var $1215=$t;
   var $1216=(($1215+4)|0);
   var $1217=HEAP32[(($1216)>>2)];
   var $1218=(($1217)|0);
   var $1219=HEAP32[(($1218)>>2)];
   var $1220=(($1219)|(0))!=0;
   if ($1220) { label = 141; break; } else { label = 145; break; }
  case 141: 
   var $1222=$t;
   var $1223=(($1222+4)|0);
   var $1224=HEAP32[(($1223)>>2)];
   var $1225=(($1224)|0);
   var $1226=HEAP32[(($1225)>>2)];
   $t=$1226;
   label = 142; break;
  case 142: 
   var $1228=$n14;
   var $1229=$len13;
   var $1230=(($1228)|(0)) < (($1229)|(0));
   if ($1230) { label = 143; break; } else { label = 144; break; }
  case 143: 
   var $1232=$1;
   var $1233=$t;
   var $1234=(($1233)|0);
   var $1235=HEAP32[(($1234)>>2)];
   var $1236=$rhs;
   var $1237=$n14;
   var $1238=((($1236)+($1237))|0);
   _gen_assignment($1232, $1235, $1238, 0);
   var $1239=$t;
   var $1240=(($1239+4)|0);
   var $1241=HEAP32[(($1240)>>2)];
   $t=$1241;
   var $1242=$n14;
   var $1243=((($1242)+(1))|0);
   $n14=$1243;
   label = 142; break;
  case 144: 
   label = 145; break;
  case 145: 
   label = 146; break;
  case 146: 
   var $1247=$len13;
   var $1248=$1;
   var $1249=(($1248+56)|0);
   var $1250=HEAP32[(($1249)>>2)];
   var $1251=((($1250)-($1247))|0);
   HEAP32[(($1249)>>2)]=$1251;
   var $1252=$3;
   var $1253=(($1252)|(0))!=0;
   if ($1253) { label = 147; break; } else { label = 148; break; }
  case 147: 
   var $1255=$1;
   var $1256=$rhs;
   var $1257=$1256 & 511;
   var $1258=$1257 << 23;
   var $1259=55 | $1258;
   var $1260=$rhs;
   var $1261=$1260 & 511;
   var $1262=$1261 << 14;
   var $1263=$1259 | $1262;
   var $1264=$len13;
   var $1265=$1264 & 127;
   var $1266=$1265 << 7;
   var $1267=$1263 | $1266;
   _genop($1255, $1267);
   var $1268=$1;
   _push_($1268);
   label = 148; break;
  case 148: 
   label = 152; break;
  case 149: 
   var $1271=$1;
   var $1272=$t;
   _codegen($1271, $1272, 1);
   var $1273=$1;
   var $1274=$2;
   var $1275=(($1274)|0);
   var $1276=HEAP32[(($1275)>>2)];
   var $1277=$rhs;
   var $1278=$3;
   _gen_vmassignment($1273, $1276, $1277, $1278);
   var $1279=$3;
   var $1280=(($1279)|(0))!=0;
   if ($1280) { label = 151; break; } else { label = 150; break; }
  case 150: 
   var $1282=$1;
   var $1283=(($1282+56)|0);
   var $1284=HEAP32[(($1283)>>2)];
   var $1285=((($1284)-(1))|0);
   HEAP32[(($1283)>>2)]=$1285;
   label = 151; break;
  case 151: 
   label = 152; break;
  case 152: 
   label = 437; break;
  case 153: 
   var $1289=$2;
   var $1290=(($1289+4)|0);
   var $1291=HEAP32[(($1290)>>2)];
   var $1292=(($1291)|0);
   var $1293=HEAP32[(($1292)>>2)];
   var $1294=$1293;
   var $1295=(($1294) & 65535);
   $sym15=$1295;
   var $1296=$1;
   var $1297=(($1296)|0);
   var $1298=HEAP32[(($1297)>>2)];
   var $1299=$sym15;
   var $1300=_mrb_sym2name_len($1298, $1299, $len16);
   $name=$1300;
   var $1301=$1;
   var $1302=$2;
   var $1303=(($1302)|0);
   var $1304=HEAP32[(($1303)>>2)];
   _codegen($1301, $1304, 1);
   var $1305=HEAP32[(($len16)>>2)];
   var $1306=(($1305)|(0))==2;
   if ($1306) { label = 154; break; } else { label = 159; break; }
  case 154: 
   var $1308=$name;
   var $1309=(($1308)|0);
   var $1310=HEAP8[($1309)];
   var $1311=(($1310 << 24) >> 24);
   var $1312=(($1311)|(0))==124;
   if ($1312) { label = 155; break; } else { label = 156; break; }
  case 155: 
   var $1314=$name;
   var $1315=(($1314+1)|0);
   var $1316=HEAP8[($1315)];
   var $1317=(($1316 << 24) >> 24);
   var $1318=(($1317)|(0))==124;
   if ($1318) { label = 158; break; } else { label = 156; break; }
  case 156: 
   var $1320=$name;
   var $1321=(($1320)|0);
   var $1322=HEAP8[($1321)];
   var $1323=(($1322 << 24) >> 24);
   var $1324=(($1323)|(0))==38;
   if ($1324) { label = 157; break; } else { label = 159; break; }
  case 157: 
   var $1326=$name;
   var $1327=(($1326+1)|0);
   var $1328=HEAP8[($1327)];
   var $1329=(($1328 << 24) >> 24);
   var $1330=(($1329)|(0))==38;
   if ($1330) { label = 158; break; } else { label = 159; break; }
  case 158: 
   var $1332=$1;
   var $1333=(($1332+56)|0);
   var $1334=HEAP32[(($1333)>>2)];
   var $1335=((($1334)-(1))|0);
   HEAP32[(($1333)>>2)]=$1335;
   var $1336=$1;
   var $1337=_new_label($1336);
   $pos19=$1337;
   var $1338=$1;
   var $1339=$name;
   var $1340=(($1339)|0);
   var $1341=HEAP8[($1340)];
   var $1342=(($1341 << 24) >> 24);
   var $1343=(($1342)|(0))==124;
   var $1344=$1343 ? 24 : 25;
   var $1345=$1344 & 127;
   var $1346=$1;
   var $1347=(($1346+56)|0);
   var $1348=HEAP32[(($1347)>>2)];
   var $1349=$1348 & 511;
   var $1350=$1349 << 23;
   var $1351=$1345 | $1350;
   var $1352=$1351 | 4194176;
   _genop($1338, $1352);
   var $1353=$1;
   var $1354=$2;
   var $1355=(($1354+4)|0);
   var $1356=HEAP32[(($1355)>>2)];
   var $1357=(($1356+4)|0);
   var $1358=HEAP32[(($1357)>>2)];
   var $1359=(($1358)|0);
   var $1360=HEAP32[(($1359)>>2)];
   _codegen($1353, $1360, 1);
   var $1361=$1;
   var $1362=(($1361+56)|0);
   var $1363=HEAP32[(($1362)>>2)];
   var $1364=((($1363)-(1))|0);
   HEAP32[(($1362)>>2)]=$1364;
   var $1365=$1;
   var $1366=$2;
   var $1367=(($1366)|0);
   var $1368=HEAP32[(($1367)>>2)];
   var $1369=$1;
   var $1370=(($1369+56)|0);
   var $1371=HEAP32[(($1370)>>2)];
   var $1372=$3;
   _gen_assignment($1365, $1368, $1371, $1372);
   var $1373=$1;
   var $1374=$pos19;
   _dispatch($1373, $1374);
   label = 437; break;
  case 159: 
   var $1376=$1;
   var $1377=$2;
   var $1378=(($1377+4)|0);
   var $1379=HEAP32[(($1378)>>2)];
   var $1380=(($1379+4)|0);
   var $1381=HEAP32[(($1380)>>2)];
   var $1382=(($1381)|0);
   var $1383=HEAP32[(($1382)>>2)];
   _codegen($1376, $1383, 1);
   var $1384=$1;
   var $1385=(($1384+56)|0);
   var $1386=HEAP32[(($1385)>>2)];
   var $1387=((($1386)-(1))|0);
   HEAP32[(($1385)>>2)]=$1387;
   var $1388=$1;
   var $1389=(($1388+56)|0);
   var $1390=HEAP32[(($1389)>>2)];
   var $1391=((($1390)-(1))|0);
   HEAP32[(($1389)>>2)]=$1391;
   var $1392=$1;
   var $1393=$sym15;
   var $1394=_new_msym($1392, $1393);
   $idx17=$1394;
   var $1395=HEAP32[(($len16)>>2)];
   var $1396=(($1395)|(0))==1;
   if ($1396) { label = 160; break; } else { label = 162; break; }
  case 160: 
   var $1398=$name;
   var $1399=(($1398)|0);
   var $1400=HEAP8[($1399)];
   var $1401=(($1400 << 24) >> 24);
   var $1402=(($1401)|(0))==43;
   if ($1402) { label = 161; break; } else { label = 162; break; }
  case 161: 
   var $1404=$1;
   var $1405=$1;
   var $1406=(($1405+56)|0);
   var $1407=HEAP32[(($1406)>>2)];
   var $1408=$1407 & 511;
   var $1409=$1408 << 23;
   var $1410=44 | $1409;
   var $1411=$idx17;
   var $1412=$1411 & 511;
   var $1413=$1412 << 14;
   var $1414=$1410 | $1413;
   var $1415=$1414 | 128;
   var $1416=$3;
   _genop_peep($1404, $1415, $1416);
   label = 193; break;
  case 162: 
   var $1418=HEAP32[(($len16)>>2)];
   var $1419=(($1418)|(0))==1;
   if ($1419) { label = 163; break; } else { label = 165; break; }
  case 163: 
   var $1421=$name;
   var $1422=(($1421)|0);
   var $1423=HEAP8[($1422)];
   var $1424=(($1423 << 24) >> 24);
   var $1425=(($1424)|(0))==45;
   if ($1425) { label = 164; break; } else { label = 165; break; }
  case 164: 
   var $1427=$1;
   var $1428=$1;
   var $1429=(($1428+56)|0);
   var $1430=HEAP32[(($1429)>>2)];
   var $1431=$1430 & 511;
   var $1432=$1431 << 23;
   var $1433=46 | $1432;
   var $1434=$idx17;
   var $1435=$1434 & 511;
   var $1436=$1435 << 14;
   var $1437=$1433 | $1436;
   var $1438=$1437 | 128;
   var $1439=$3;
   _genop_peep($1427, $1438, $1439);
   label = 192; break;
  case 165: 
   var $1441=HEAP32[(($len16)>>2)];
   var $1442=(($1441)|(0))==1;
   if ($1442) { label = 166; break; } else { label = 168; break; }
  case 166: 
   var $1444=$name;
   var $1445=(($1444)|0);
   var $1446=HEAP8[($1445)];
   var $1447=(($1446 << 24) >> 24);
   var $1448=(($1447)|(0))==42;
   if ($1448) { label = 167; break; } else { label = 168; break; }
  case 167: 
   var $1450=$1;
   var $1451=$1;
   var $1452=(($1451+56)|0);
   var $1453=HEAP32[(($1452)>>2)];
   var $1454=$1453 & 511;
   var $1455=$1454 << 23;
   var $1456=48 | $1455;
   var $1457=$idx17;
   var $1458=$1457 & 511;
   var $1459=$1458 << 14;
   var $1460=$1456 | $1459;
   var $1461=$1460 | 128;
   _genop($1450, $1461);
   label = 191; break;
  case 168: 
   var $1463=HEAP32[(($len16)>>2)];
   var $1464=(($1463)|(0))==1;
   if ($1464) { label = 169; break; } else { label = 171; break; }
  case 169: 
   var $1466=$name;
   var $1467=(($1466)|0);
   var $1468=HEAP8[($1467)];
   var $1469=(($1468 << 24) >> 24);
   var $1470=(($1469)|(0))==47;
   if ($1470) { label = 170; break; } else { label = 171; break; }
  case 170: 
   var $1472=$1;
   var $1473=$1;
   var $1474=(($1473+56)|0);
   var $1475=HEAP32[(($1474)>>2)];
   var $1476=$1475 & 511;
   var $1477=$1476 << 23;
   var $1478=49 | $1477;
   var $1479=$idx17;
   var $1480=$1479 & 511;
   var $1481=$1480 << 14;
   var $1482=$1478 | $1481;
   var $1483=$1482 | 128;
   _genop($1472, $1483);
   label = 190; break;
  case 171: 
   var $1485=HEAP32[(($len16)>>2)];
   var $1486=(($1485)|(0))==1;
   if ($1486) { label = 172; break; } else { label = 174; break; }
  case 172: 
   var $1488=$name;
   var $1489=(($1488)|0);
   var $1490=HEAP8[($1489)];
   var $1491=(($1490 << 24) >> 24);
   var $1492=(($1491)|(0))==60;
   if ($1492) { label = 173; break; } else { label = 174; break; }
  case 173: 
   var $1494=$1;
   var $1495=$1;
   var $1496=(($1495+56)|0);
   var $1497=HEAP32[(($1496)>>2)];
   var $1498=$1497 & 511;
   var $1499=$1498 << 23;
   var $1500=51 | $1499;
   var $1501=$idx17;
   var $1502=$1501 & 511;
   var $1503=$1502 << 14;
   var $1504=$1500 | $1503;
   var $1505=$1504 | 128;
   _genop($1494, $1505);
   label = 189; break;
  case 174: 
   var $1507=HEAP32[(($len16)>>2)];
   var $1508=(($1507)|(0))==2;
   if ($1508) { label = 175; break; } else { label = 178; break; }
  case 175: 
   var $1510=$name;
   var $1511=(($1510)|0);
   var $1512=HEAP8[($1511)];
   var $1513=(($1512 << 24) >> 24);
   var $1514=(($1513)|(0))==60;
   if ($1514) { label = 176; break; } else { label = 178; break; }
  case 176: 
   var $1516=$name;
   var $1517=(($1516+1)|0);
   var $1518=HEAP8[($1517)];
   var $1519=(($1518 << 24) >> 24);
   var $1520=(($1519)|(0))==61;
   if ($1520) { label = 177; break; } else { label = 178; break; }
  case 177: 
   var $1522=$1;
   var $1523=$1;
   var $1524=(($1523+56)|0);
   var $1525=HEAP32[(($1524)>>2)];
   var $1526=$1525 & 511;
   var $1527=$1526 << 23;
   var $1528=52 | $1527;
   var $1529=$idx17;
   var $1530=$1529 & 511;
   var $1531=$1530 << 14;
   var $1532=$1528 | $1531;
   var $1533=$1532 | 128;
   _genop($1522, $1533);
   label = 188; break;
  case 178: 
   var $1535=HEAP32[(($len16)>>2)];
   var $1536=(($1535)|(0))==1;
   if ($1536) { label = 179; break; } else { label = 181; break; }
  case 179: 
   var $1538=$name;
   var $1539=(($1538)|0);
   var $1540=HEAP8[($1539)];
   var $1541=(($1540 << 24) >> 24);
   var $1542=(($1541)|(0))==62;
   if ($1542) { label = 180; break; } else { label = 181; break; }
  case 180: 
   var $1544=$1;
   var $1545=$1;
   var $1546=(($1545+56)|0);
   var $1547=HEAP32[(($1546)>>2)];
   var $1548=$1547 & 511;
   var $1549=$1548 << 23;
   var $1550=53 | $1549;
   var $1551=$idx17;
   var $1552=$1551 & 511;
   var $1553=$1552 << 14;
   var $1554=$1550 | $1553;
   var $1555=$1554 | 128;
   _genop($1544, $1555);
   label = 187; break;
  case 181: 
   var $1557=HEAP32[(($len16)>>2)];
   var $1558=(($1557)|(0))==2;
   if ($1558) { label = 182; break; } else { label = 185; break; }
  case 182: 
   var $1560=$name;
   var $1561=(($1560)|0);
   var $1562=HEAP8[($1561)];
   var $1563=(($1562 << 24) >> 24);
   var $1564=(($1563)|(0))==62;
   if ($1564) { label = 183; break; } else { label = 185; break; }
  case 183: 
   var $1566=$name;
   var $1567=(($1566+1)|0);
   var $1568=HEAP8[($1567)];
   var $1569=(($1568 << 24) >> 24);
   var $1570=(($1569)|(0))==61;
   if ($1570) { label = 184; break; } else { label = 185; break; }
  case 184: 
   var $1572=$1;
   var $1573=$1;
   var $1574=(($1573+56)|0);
   var $1575=HEAP32[(($1574)>>2)];
   var $1576=$1575 & 511;
   var $1577=$1576 << 23;
   var $1578=54 | $1577;
   var $1579=$idx17;
   var $1580=$1579 & 511;
   var $1581=$1580 << 14;
   var $1582=$1578 | $1581;
   var $1583=$1582 | 128;
   _genop($1572, $1583);
   label = 186; break;
  case 185: 
   var $1585=$1;
   var $1586=$1;
   var $1587=(($1586+56)|0);
   var $1588=HEAP32[(($1587)>>2)];
   var $1589=$1588 & 511;
   var $1590=$1589 << 23;
   var $1591=32 | $1590;
   var $1592=$idx17;
   var $1593=$1592 & 511;
   var $1594=$1593 << 14;
   var $1595=$1591 | $1594;
   var $1596=$1595 | 128;
   _genop($1585, $1596);
   label = 186; break;
  case 186: 
   label = 187; break;
  case 187: 
   label = 188; break;
  case 188: 
   label = 189; break;
  case 189: 
   label = 190; break;
  case 190: 
   label = 191; break;
  case 191: 
   label = 192; break;
  case 192: 
   label = 193; break;
  case 193: 
   var $1605=$1;
   var $1606=$2;
   var $1607=(($1606)|0);
   var $1608=HEAP32[(($1607)>>2)];
   var $1609=$1;
   var $1610=(($1609+56)|0);
   var $1611=HEAP32[(($1610)>>2)];
   var $1612=$3;
   _gen_assignment($1605, $1608, $1611, $1612);
   label = 437; break;
  case 194: 
   $n20=0;
   $noop=0;
   $sendv=0;
   var $1614=$1;
   _push_($1614);
   var $1615=$2;
   var $1616=(($1615)|(0))!=0;
   if ($1616) { label = 195; break; } else { label = 200; break; }
  case 195: 
   var $1618=$2;
   var $1619=(($1618)|0);
   var $1620=HEAP32[(($1619)>>2)];
   $args=$1620;
   var $1621=$args;
   var $1622=(($1621)|(0))!=0;
   if ($1622) { label = 196; break; } else { label = 199; break; }
  case 196: 
   var $1624=$1;
   var $1625=$args;
   var $1626=_gen_values($1624, $1625, 1);
   $n20=$1626;
   var $1627=$n20;
   var $1628=(($1627)|(0)) < 0;
   if ($1628) { label = 197; break; } else { label = 198; break; }
  case 197: 
   $sendv=1;
   $noop=1;
   $n20=1;
   var $1630=$1;
   _push_($1630);
   label = 198; break;
  case 198: 
   label = 199; break;
  case 199: 
   label = 200; break;
  case 200: 
   var $1634=$2;
   var $1635=(($1634)|(0))!=0;
   if ($1635) { label = 201; break; } else { label = 203; break; }
  case 201: 
   var $1637=$2;
   var $1638=(($1637+4)|0);
   var $1639=HEAP32[(($1638)>>2)];
   var $1640=(($1639)|(0))!=0;
   if ($1640) { label = 202; break; } else { label = 203; break; }
  case 202: 
   var $1642=$1;
   var $1643=$2;
   var $1644=(($1643+4)|0);
   var $1645=HEAP32[(($1644)>>2)];
   _codegen($1642, $1645, 1);
   var $1646=$1;
   var $1647=(($1646+56)|0);
   var $1648=HEAP32[(($1647)>>2)];
   var $1649=((($1648)-(1))|0);
   HEAP32[(($1647)>>2)]=$1649;
   label = 204; break;
  case 203: 
   var $1651=$1;
   var $1652=$1;
   var $1653=(($1652+56)|0);
   var $1654=HEAP32[(($1653)>>2)];
   var $1655=$1654 & 511;
   var $1656=$1655 << 23;
   var $1657=5 | $1656;
   _genop($1651, $1657);
   label = 204; break;
  case 204: 
   var $1659=$n20;
   var $1660=((($1659)+(1))|0);
   var $1661=$1;
   var $1662=(($1661+56)|0);
   var $1663=HEAP32[(($1662)>>2)];
   var $1664=((($1663)-($1660))|0);
   HEAP32[(($1662)>>2)]=$1664;
   var $1665=$sendv;
   var $1666=(($1665)|(0))!=0;
   if ($1666) { label = 205; break; } else { label = 206; break; }
  case 205: 
   $n20=127;
   label = 206; break;
  case 206: 
   var $1669=$1;
   var $1670=$1;
   var $1671=(($1670+56)|0);
   var $1672=HEAP32[(($1671)>>2)];
   var $1673=$1672 & 511;
   var $1674=$1673 << 23;
   var $1675=36 | $1674;
   var $1676=$n20;
   var $1677=$1676 & 127;
   var $1678=$1677 << 7;
   var $1679=$1675 | $1678;
   _genop($1669, $1679);
   var $1680=$3;
   var $1681=(($1680)|(0))!=0;
   if ($1681) { label = 207; break; } else { label = 208; break; }
  case 207: 
   var $1683=$1;
   _push_($1683);
   label = 208; break;
  case 208: 
   label = 437; break;
  case 209: 
   var $1686=$1;
   $s2=$1686;
   $lv=0;
   $ainfo=0;
   var $1687=$1;
   _push_($1687);
   label = 210; break;
  case 210: 
   var $1689=$s2;
   var $1690=$1689;
   var $1691=(($1690+69)|0);
   var $1692=HEAP8[($1691)];
   var $1693=(($1692)&(255)) >>> 7;
   var $1694=$1693 & 1;
   var $1695=(($1694 << 24) >> 24)!=0;
   var $1696=$1695 ^ 1;
   if ($1696) { label = 211; break; } else { label = 214; break; }
  case 211: 
   var $1698=$lv;
   var $1699=((($1698)+(1))|0);
   $lv=$1699;
   var $1700=$s2;
   var $1701=(($1700+48)|0);
   var $1702=HEAP32[(($1701)>>2)];
   $s2=$1702;
   var $1703=$s2;
   var $1704=(($1703)|(0))!=0;
   if ($1704) { label = 213; break; } else { label = 212; break; }
  case 212: 
   label = 214; break;
  case 213: 
   label = 210; break;
  case 214: 
   var $1708=$s2;
   var $1709=(($1708)|(0))!=0;
   if ($1709) { label = 215; break; } else { label = 216; break; }
  case 215: 
   var $1711=$s2;
   var $1712=$1711;
   var $1713=(($1712+68)|0);
   var $1714=$1713;
   var $1715=HEAP32[(($1714)>>2)];
   var $1716=$1715 & 32767;
   var $1717=$1716 << 17;
   var $1718=$1717 >> 17;
   $ainfo=$1718;
   label = 216; break;
  case 216: 
   var $1720=$1;
   var $1721=$1;
   var $1722=(($1721+56)|0);
   var $1723=HEAP32[(($1722)>>2)];
   var $1724=$1723 & 511;
   var $1725=$1724 << 23;
   var $1726=37 | $1725;
   var $1727=$ainfo;
   var $1728=$1727 << 4;
   var $1729=$lv;
   var $1730=$1729 & 15;
   var $1731=$1728 | $1730;
   var $1732=$1731 & 65535;
   var $1733=$1732 << 7;
   var $1734=$1726 | $1733;
   _genop($1720, $1734);
   var $1735=$2;
   var $1736=(($1735)|(0))!=0;
   if ($1736) { label = 217; break; } else { label = 219; break; }
  case 217: 
   var $1738=$2;
   var $1739=(($1738+4)|0);
   var $1740=HEAP32[(($1739)>>2)];
   var $1741=(($1740)|(0))!=0;
   if ($1741) { label = 218; break; } else { label = 219; break; }
  case 218: 
   var $1743=$1;
   _push_($1743);
   var $1744=$1;
   var $1745=$2;
   var $1746=(($1745+4)|0);
   var $1747=HEAP32[(($1746)>>2)];
   _codegen($1744, $1747, 1);
   var $1748=$1;
   var $1749=(($1748+56)|0);
   var $1750=HEAP32[(($1749)>>2)];
   var $1751=((($1750)-(2))|0);
   HEAP32[(($1749)>>2)]=$1751;
   label = 219; break;
  case 219: 
   var $1753=$1;
   var $1754=(($1753+56)|0);
   var $1755=HEAP32[(($1754)>>2)];
   var $1756=((($1755)-(1))|0);
   HEAP32[(($1754)>>2)]=$1756;
   var $1757=$1;
   var $1758=$1;
   var $1759=(($1758+56)|0);
   var $1760=HEAP32[(($1759)>>2)];
   var $1761=$1760 & 511;
   var $1762=$1761 << 23;
   var $1763=36 | $1762;
   var $1764=$1763 | 16256;
   _genop($1757, $1764);
   var $1765=$3;
   var $1766=(($1765)|(0))!=0;
   if ($1766) { label = 220; break; } else { label = 221; break; }
  case 220: 
   var $1768=$1;
   _push_($1768);
   label = 221; break;
  case 221: 
   label = 437; break;
  case 222: 
   var $1771=$2;
   var $1772=(($1771)|(0))!=0;
   if ($1772) { label = 223; break; } else { label = 224; break; }
  case 223: 
   var $1774=$1;
   var $1775=$2;
   _codegen($1774, $1775, 1);
   var $1776=$1;
   var $1777=(($1776+56)|0);
   var $1778=HEAP32[(($1777)>>2)];
   var $1779=((($1778)-(1))|0);
   HEAP32[(($1777)>>2)]=$1779;
   label = 225; break;
  case 224: 
   var $1781=$1;
   var $1782=$1;
   var $1783=(($1782+56)|0);
   var $1784=HEAP32[(($1783)>>2)];
   var $1785=$1784 & 511;
   var $1786=$1785 << 23;
   var $1787=5 | $1786;
   _genop($1781, $1787);
   label = 225; break;
  case 225: 
   var $1789=$1;
   var $1790=(($1789+72)|0);
   var $1791=HEAP32[(($1790)>>2)];
   var $1792=(($1791)|(0))!=0;
   if ($1792) { label = 226; break; } else { label = 227; break; }
  case 226: 
   var $1794=$1;
   var $1795=$1;
   var $1796=(($1795+56)|0);
   var $1797=HEAP32[(($1796)>>2)];
   var $1798=$1797 & 511;
   var $1799=$1798 << 23;
   var $1800=41 | $1799;
   var $1801=$1800 | 32768;
   _genop($1794, $1801);
   label = 228; break;
  case 227: 
   var $1803=$1;
   var $1804=$1;
   var $1805=(($1804+56)|0);
   var $1806=HEAP32[(($1805)>>2)];
   var $1807=$1806 & 511;
   var $1808=$1807 << 23;
   var $1809=41 | $1808;
   _genop_peep($1803, $1809, 0);
   label = 228; break;
  case 228: 
   var $1811=$3;
   var $1812=(($1811)|(0))!=0;
   if ($1812) { label = 229; break; } else { label = 230; break; }
  case 229: 
   var $1814=$1;
   _push_($1814);
   label = 230; break;
  case 230: 
   label = 437; break;
  case 231: 
   var $1817=$1;
   $s221=$1817;
   $lv22=0;
   $ainfo23=0;
   $n24=0;
   $sendv25=0;
   label = 232; break;
  case 232: 
   var $1819=$s221;
   var $1820=$1819;
   var $1821=(($1820+69)|0);
   var $1822=HEAP8[($1821)];
   var $1823=(($1822)&(255)) >>> 7;
   var $1824=$1823 & 1;
   var $1825=(($1824 << 24) >> 24)!=0;
   var $1826=$1825 ^ 1;
   if ($1826) { label = 233; break; } else { label = 236; break; }
  case 233: 
   var $1828=$lv22;
   var $1829=((($1828)+(1))|0);
   $lv22=$1829;
   var $1830=$s221;
   var $1831=(($1830+48)|0);
   var $1832=HEAP32[(($1831)>>2)];
   $s221=$1832;
   var $1833=$s221;
   var $1834=(($1833)|(0))!=0;
   if ($1834) { label = 235; break; } else { label = 234; break; }
  case 234: 
   label = 236; break;
  case 235: 
   label = 232; break;
  case 236: 
   var $1838=$s221;
   var $1839=(($1838)|(0))!=0;
   if ($1839) { label = 237; break; } else { label = 238; break; }
  case 237: 
   var $1841=$s221;
   var $1842=$1841;
   var $1843=(($1842+68)|0);
   var $1844=$1843;
   var $1845=HEAP32[(($1844)>>2)];
   var $1846=$1845 & 32767;
   var $1847=$1846 << 17;
   var $1848=$1847 >> 17;
   $ainfo23=$1848;
   label = 238; break;
  case 238: 
   var $1850=$1;
   var $1851=$1;
   var $1852=(($1851+56)|0);
   var $1853=HEAP32[(($1852)>>2)];
   var $1854=$1853 & 511;
   var $1855=$1854 << 23;
   var $1856=43 | $1855;
   var $1857=$ainfo23;
   var $1858=$1857 << 4;
   var $1859=$lv22;
   var $1860=$1859 & 15;
   var $1861=$1858 | $1860;
   var $1862=$1861 & 65535;
   var $1863=$1862 << 7;
   var $1864=$1856 | $1863;
   _genop($1850, $1864);
   var $1865=$1;
   _push_($1865);
   var $1866=$2;
   var $1867=(($1866)|(0))!=0;
   if ($1867) { label = 239; break; } else { label = 242; break; }
  case 239: 
   var $1869=$1;
   var $1870=$2;
   var $1871=_gen_values($1869, $1870, 1);
   $n24=$1871;
   var $1872=$n24;
   var $1873=(($1872)|(0)) < 0;
   if ($1873) { label = 240; break; } else { label = 241; break; }
  case 240: 
   $sendv25=1;
   $n24=1;
   var $1875=$1;
   _push_($1875);
   label = 241; break;
  case 241: 
   label = 242; break;
  case 242: 
   var $1878=$n24;
   var $1879=((($1878)+(1))|0);
   var $1880=$1;
   var $1881=(($1880+56)|0);
   var $1882=HEAP32[(($1881)>>2)];
   var $1883=((($1882)-($1879))|0);
   HEAP32[(($1881)>>2)]=$1883;
   var $1884=$sendv25;
   var $1885=(($1884)|(0))!=0;
   if ($1885) { label = 243; break; } else { label = 244; break; }
  case 243: 
   $n24=127;
   label = 244; break;
  case 244: 
   var $1888=$1;
   var $1889=$1;
   var $1890=(($1889+56)|0);
   var $1891=HEAP32[(($1890)>>2)];
   var $1892=$1891 & 511;
   var $1893=$1892 << 23;
   var $1894=32 | $1893;
   var $1895=$1;
   var $1896=$1;
   var $1897=(($1896)|0);
   var $1898=HEAP32[(($1897)>>2)];
   var $1899=_mrb_intern2($1898, ((92444)|0), 4);
   var $1900=_new_msym($1895, $1899);
   var $1901=$1900 & 511;
   var $1902=$1901 << 14;
   var $1903=$1894 | $1902;
   var $1904=$n24;
   var $1905=$1904 & 127;
   var $1906=$1905 << 7;
   var $1907=$1903 | $1906;
   _genop($1888, $1907);
   var $1908=$3;
   var $1909=(($1908)|(0))!=0;
   if ($1909) { label = 245; break; } else { label = 246; break; }
  case 245: 
   var $1911=$1;
   _push_($1911);
   label = 246; break;
  case 246: 
   label = 437; break;
  case 247: 
   var $1914=$1;
   var $1915=$2;
   _loop_break($1914, $1915);
   var $1916=$3;
   var $1917=(($1916)|(0))!=0;
   if ($1917) { label = 248; break; } else { label = 249; break; }
  case 248: 
   var $1919=$1;
   _push_($1919);
   label = 249; break;
  case 249: 
   label = 437; break;
  case 250: 
   var $1922=$1;
   var $1923=(($1922+72)|0);
   var $1924=HEAP32[(($1923)>>2)];
   var $1925=(($1924)|(0))!=0;
   if ($1925) { label = 252; break; } else { label = 251; break; }
  case 251: 
   var $1927=$1;
   _raise_error($1927, ((89892)|0));
   label = 261; break;
  case 252: 
   var $1929=$1;
   var $1930=(($1929+72)|0);
   var $1931=HEAP32[(($1930)>>2)];
   var $1932=(($1931)|0);
   var $1933=HEAP32[(($1932)>>2)];
   var $1934=(($1933)|(0))==0;
   if ($1934) { label = 253; break; } else { label = 256; break; }
  case 253: 
   var $1936=$1;
   var $1937=(($1936+76)|0);
   var $1938=HEAP32[(($1937)>>2)];
   var $1939=$1;
   var $1940=(($1939+72)|0);
   var $1941=HEAP32[(($1940)>>2)];
   var $1942=(($1941+20)|0);
   var $1943=HEAP32[(($1942)>>2)];
   var $1944=(($1938)|(0)) > (($1943)|(0));
   if ($1944) { label = 254; break; } else { label = 255; break; }
  case 254: 
   var $1946=$1;
   var $1947=$1;
   var $1948=(($1947+76)|0);
   var $1949=HEAP32[(($1948)>>2)];
   var $1950=$1;
   var $1951=(($1950+72)|0);
   var $1952=HEAP32[(($1951)>>2)];
   var $1953=(($1952+20)|0);
   var $1954=HEAP32[(($1953)>>2)];
   var $1955=((($1949)-($1954))|0);
   var $1956=$1955 & 511;
   var $1957=$1956 << 23;
   var $1958=31 | $1957;
   _genop_peep($1946, $1958, 0);
   label = 255; break;
  case 255: 
   var $1960=$1;
   var $1961=$2;
   _codegen($1960, $1961, 0);
   var $1962=$1;
   var $1963=$1;
   var $1964=(($1963+72)|0);
   var $1965=HEAP32[(($1964)>>2)];
   var $1966=(($1965+4)|0);
   var $1967=HEAP32[(($1966)>>2)];
   var $1968=$1;
   var $1969=(($1968+60)|0);
   var $1970=HEAP32[(($1969)>>2)];
   var $1971=((($1967)-($1970))|0);
   var $1972=((($1971)+(32767))|0);
   var $1973=$1972 & 65535;
   var $1974=$1973 << 7;
   var $1975=23 | $1974;
   _genop($1962, $1975);
   label = 260; break;
  case 256: 
   var $1977=$2;
   var $1978=(($1977)|(0))!=0;
   if ($1978) { label = 257; break; } else { label = 258; break; }
  case 257: 
   var $1980=$1;
   var $1981=$2;
   _codegen($1980, $1981, 1);
   var $1982=$1;
   var $1983=(($1982+56)|0);
   var $1984=HEAP32[(($1983)>>2)];
   var $1985=((($1984)-(1))|0);
   HEAP32[(($1983)>>2)]=$1985;
   label = 259; break;
  case 258: 
   var $1987=$1;
   var $1988=$1;
   var $1989=(($1988+56)|0);
   var $1990=HEAP32[(($1989)>>2)];
   var $1991=$1990 & 511;
   var $1992=$1991 << 23;
   var $1993=5 | $1992;
   _genop($1987, $1993);
   label = 259; break;
  case 259: 
   var $1995=$1;
   var $1996=$1;
   var $1997=(($1996+56)|0);
   var $1998=HEAP32[(($1997)>>2)];
   var $1999=$1998 & 511;
   var $2000=$1999 << 23;
   var $2001=41 | $2000;
   _genop_peep($1995, $2001, 0);
   label = 260; break;
  case 260: 
   label = 261; break;
  case 261: 
   var $2004=$3;
   var $2005=(($2004)|(0))!=0;
   if ($2005) { label = 262; break; } else { label = 263; break; }
  case 262: 
   var $2007=$1;
   _push_($2007);
   label = 263; break;
  case 263: 
   label = 437; break;
  case 264: 
   var $2010=$1;
   var $2011=(($2010+72)|0);
   var $2012=HEAP32[(($2011)>>2)];
   var $2013=(($2012)|(0))!=0;
   if ($2013) { label = 266; break; } else { label = 265; break; }
  case 265: 
   var $2015=$1;
   _raise_error($2015, ((88708)|0));
   label = 269; break;
  case 266: 
   var $2017=$1;
   var $2018=(($2017+76)|0);
   var $2019=HEAP32[(($2018)>>2)];
   var $2020=$1;
   var $2021=(($2020+72)|0);
   var $2022=HEAP32[(($2021)>>2)];
   var $2023=(($2022+20)|0);
   var $2024=HEAP32[(($2023)>>2)];
   var $2025=(($2019)|(0)) > (($2024)|(0));
   if ($2025) { label = 267; break; } else { label = 268; break; }
  case 267: 
   var $2027=$1;
   var $2028=$1;
   var $2029=(($2028+76)|0);
   var $2030=HEAP32[(($2029)>>2)];
   var $2031=$1;
   var $2032=(($2031+72)|0);
   var $2033=HEAP32[(($2032)>>2)];
   var $2034=(($2033+20)|0);
   var $2035=HEAP32[(($2034)>>2)];
   var $2036=((($2030)-($2035))|0);
   var $2037=$2036 & 511;
   var $2038=$2037 << 23;
   var $2039=31 | $2038;
   _genop_peep($2027, $2039, 0);
   label = 268; break;
  case 268: 
   var $2041=$1;
   var $2042=$1;
   var $2043=(($2042+72)|0);
   var $2044=HEAP32[(($2043)>>2)];
   var $2045=(($2044+8)|0);
   var $2046=HEAP32[(($2045)>>2)];
   var $2047=$1;
   var $2048=(($2047+60)|0);
   var $2049=HEAP32[(($2048)>>2)];
   var $2050=((($2046)-($2049))|0);
   var $2051=((($2050)+(32767))|0);
   var $2052=$2051 & 65535;
   var $2053=$2052 << 7;
   var $2054=23 | $2053;
   _genop($2041, $2054);
   label = 269; break;
  case 269: 
   label = 437; break;
  case 270: 
   $msg=((87632)|0);
   var $2057=$1;
   var $2058=(($2057+72)|0);
   var $2059=HEAP32[(($2058)>>2)];
   var $2060=(($2059)|(0))!=0;
   if ($2060) { label = 272; break; } else { label = 271; break; }
  case 271: 
   var $2062=$1;
   var $2063=$msg;
   _raise_error($2062, $2063);
   label = 290; break;
  case 272: 
   var $2065=$1;
   var $2066=(($2065+72)|0);
   var $2067=HEAP32[(($2066)>>2)];
   $lp26=$2067;
   $n27=0;
   label = 273; break;
  case 273: 
   var $2069=$lp26;
   var $2070=(($2069)|(0))!=0;
   if ($2070) { label = 274; break; } else { var $2077 = 0;label = 275; break; }
  case 274: 
   var $2072=$lp26;
   var $2073=(($2072)|0);
   var $2074=HEAP32[(($2073)>>2)];
   var $2075=(($2074)|(0))!=4;
   var $2077 = $2075;label = 275; break;
  case 275: 
   var $2077;
   if ($2077) { label = 276; break; } else { label = 279; break; }
  case 276: 
   var $2079=$lp26;
   var $2080=(($2079)|0);
   var $2081=HEAP32[(($2080)>>2)];
   var $2082=(($2081)|(0))==3;
   if ($2082) { label = 277; break; } else { label = 278; break; }
  case 277: 
   var $2084=$n27;
   var $2085=((($2084)+(1))|0);
   $n27=$2085;
   label = 278; break;
  case 278: 
   var $2087=$lp26;
   var $2088=(($2087+24)|0);
   var $2089=HEAP32[(($2088)>>2)];
   $lp26=$2089;
   label = 273; break;
  case 279: 
   var $2091=$lp26;
   var $2092=(($2091)|(0))!=0;
   if ($2092) { label = 281; break; } else { label = 280; break; }
  case 280: 
   var $2094=$1;
   var $2095=$msg;
   _raise_error($2094, $2095);
   label = 289; break;
  case 281: 
   var $2097=$n27;
   var $2098=(($2097)|(0)) > 0;
   if ($2098) { label = 282; break; } else { label = 286; break; }
  case 282: 
   label = 283; break;
  case 283: 
   var $2101=$n27;
   var $2102=((($2101)-(1))|0);
   $n27=$2102;
   var $2103=(($2101)|(0))!=0;
   if ($2103) { label = 284; break; } else { label = 285; break; }
  case 284: 
   var $2105=$1;
   _genop_peep($2105, 8388636, 0);
   label = 283; break;
  case 285: 
   label = 286; break;
  case 286: 
   var $2108=$1;
   var $2109=(($2108+76)|0);
   var $2110=HEAP32[(($2109)>>2)];
   var $2111=$lp26;
   var $2112=(($2111+20)|0);
   var $2113=HEAP32[(($2112)>>2)];
   var $2114=(($2110)|(0)) > (($2113)|(0));
   if ($2114) { label = 287; break; } else { label = 288; break; }
  case 287: 
   var $2116=$1;
   var $2117=$1;
   var $2118=(($2117+76)|0);
   var $2119=HEAP32[(($2118)>>2)];
   var $2120=$lp26;
   var $2121=(($2120+20)|0);
   var $2122=HEAP32[(($2121)>>2)];
   var $2123=((($2119)-($2122))|0);
   var $2124=$2123 & 511;
   var $2125=$2124 << 23;
   var $2126=31 | $2125;
   _genop_peep($2116, $2126, 0);
   label = 288; break;
  case 288: 
   var $2128=$1;
   var $2129=$lp26;
   var $2130=(($2129+4)|0);
   var $2131=HEAP32[(($2130)>>2)];
   var $2132=$1;
   var $2133=(($2132+60)|0);
   var $2134=HEAP32[(($2133)>>2)];
   var $2135=((($2131)-($2134))|0);
   var $2136=((($2135)+(32767))|0);
   var $2137=$2136 & 65535;
   var $2138=$2137 << 7;
   var $2139=23 | $2138;
   _genop($2128, $2139);
   label = 289; break;
  case 289: 
   label = 290; break;
  case 290: 
   label = 437; break;
  case 291: 
   var $2143=$3;
   var $2144=(($2143)|(0))!=0;
   if ($2144) { label = 292; break; } else { label = 301; break; }
  case 292: 
   var $2146=$1;
   var $2147=$2;
   var $2148=$2147;
   var $2149=(($2148) & 65535);
   var $2150=_lv_idx($2146, $2149);
   $idx28=$2150;
   var $2151=$idx28;
   var $2152=(($2151)|(0)) > 0;
   if ($2152) { label = 293; break; } else { label = 294; break; }
  case 293: 
   var $2154=$1;
   var $2155=$1;
   var $2156=(($2155+56)|0);
   var $2157=HEAP32[(($2156)>>2)];
   var $2158=$2157 & 511;
   var $2159=$2158 << 23;
   var $2160=1 | $2159;
   var $2161=$idx28;
   var $2162=$2161 & 511;
   var $2163=$2162 << 14;
   var $2164=$2160 | $2163;
   _genop($2154, $2164);
   label = 300; break;
  case 294: 
   $lv29=0;
   var $2166=$1;
   var $2167=(($2166+48)|0);
   var $2168=HEAP32[(($2167)>>2)];
   $up=$2168;
   label = 295; break;
  case 295: 
   var $2170=$up;
   var $2171=(($2170)|(0))!=0;
   if ($2171) { label = 296; break; } else { label = 299; break; }
  case 296: 
   var $2173=$up;
   var $2174=$2;
   var $2175=$2174;
   var $2176=(($2175) & 65535);
   var $2177=_lv_idx($2173, $2176);
   $idx28=$2177;
   var $2178=$idx28;
   var $2179=(($2178)|(0)) > 0;
   if ($2179) { label = 297; break; } else { label = 298; break; }
  case 297: 
   var $2181=$1;
   var $2182=$1;
   var $2183=(($2182+56)|0);
   var $2184=HEAP32[(($2183)>>2)];
   var $2185=$2184 & 511;
   var $2186=$2185 << 23;
   var $2187=21 | $2186;
   var $2188=$idx28;
   var $2189=$2188 & 511;
   var $2190=$2189 << 14;
   var $2191=$2187 | $2190;
   var $2192=$lv29;
   var $2193=$2192 & 127;
   var $2194=$2193 << 7;
   var $2195=$2191 | $2194;
   _genop($2181, $2195);
   label = 299; break;
  case 298: 
   var $2197=$lv29;
   var $2198=((($2197)+(1))|0);
   $lv29=$2198;
   var $2199=$up;
   var $2200=(($2199+48)|0);
   var $2201=HEAP32[(($2200)>>2)];
   $up=$2201;
   label = 295; break;
  case 299: 
   label = 300; break;
  case 300: 
   var $2204=$1;
   _push_($2204);
   label = 301; break;
  case 301: 
   label = 437; break;
  case 302: 
   var $2207=$1;
   var $2208=$2;
   var $2209=$2208;
   var $2210=(($2209) & 65535);
   var $2211=_new_sym925($2207, $2210);
   $sym30=$2211;
   var $2212=$1;
   var $2213=$1;
   var $2214=(($2213+56)|0);
   var $2215=HEAP32[(($2214)>>2)];
   var $2216=$2215 & 511;
   var $2217=$2216 << 23;
   var $2218=9 | $2217;
   var $2219=$sym30;
   var $2220=$2219 & 65535;
   var $2221=$2220 << 7;
   var $2222=$2218 | $2221;
   _genop($2212, $2222);
   var $2223=$1;
   _push_($2223);
   label = 437; break;
  case 303: 
   var $2225=$1;
   var $2226=$2;
   var $2227=$2226;
   var $2228=(($2227) & 65535);
   var $2229=_new_sym925($2225, $2228);
   $sym31=$2229;
   var $2230=$1;
   var $2231=$1;
   var $2232=(($2231+56)|0);
   var $2233=HEAP32[(($2232)>>2)];
   var $2234=$2233 & 511;
   var $2235=$2234 << 23;
   var $2236=13 | $2235;
   var $2237=$sym31;
   var $2238=$2237 & 65535;
   var $2239=$2238 << 7;
   var $2240=$2236 | $2239;
   _genop($2230, $2240);
   var $2241=$1;
   _push_($2241);
   label = 437; break;
  case 304: 
   var $2243=$1;
   var $2244=$2;
   var $2245=$2244;
   var $2246=(($2245) & 65535);
   var $2247=_new_sym925($2243, $2246);
   $sym32=$2247;
   var $2248=$1;
   var $2249=$1;
   var $2250=(($2249+56)|0);
   var $2251=HEAP32[(($2250)>>2)];
   var $2252=$2251 & 511;
   var $2253=$2252 << 23;
   var $2254=15 | $2253;
   var $2255=$sym32;
   var $2256=$2255 & 65535;
   var $2257=$2256 << 7;
   var $2258=$2254 | $2257;
   _genop($2248, $2258);
   var $2259=$1;
   _push_($2259);
   label = 437; break;
  case 305: 
   var $2261=$1;
   var $2262=$2;
   var $2263=$2262;
   var $2264=(($2263) & 65535);
   var $2265=_new_sym925($2261, $2264);
   $sym33=$2265;
   var $2266=$1;
   var $2267=$1;
   var $2268=(($2267+56)|0);
   var $2269=HEAP32[(($2268)>>2)];
   var $2270=$2269 & 511;
   var $2271=$2270 << 23;
   var $2272=17 | $2271;
   var $2273=$sym33;
   var $2274=$2273 & 65535;
   var $2275=$2274 << 7;
   var $2276=$2272 | $2275;
   _genop($2266, $2276);
   var $2277=$1;
   _push_($2277);
   label = 437; break;
  case 306: 
   var $2279=$1;
   var $2280=$2;
   _codegen($2279, $2280, 1);
   label = 437; break;
  case 307: 
   var $2282=$buf;
   assert(2 % 1 === 0);HEAP8[($2282)]=HEAP8[((((85520)|0))|0)];HEAP8[((($2282)+(1))|0)]=HEAP8[(((((85520)|0))+(1))|0)];
   var $2283=$2;
   var $2284=$2283;
   var $2285=(($2284) & 255);
   var $2286=(($buf+1)|0);
   HEAP8[($2286)]=$2285;
   var $2287=$1;
   var $2288=(($2287)|0);
   var $2289=HEAP32[(($2288)>>2)];
   var $2290=(($buf)|0);
   _mrb_str_new($4, $2289, $2290, 2);
   var $2291=$str;
   var $2292=$4;
   assert(12 % 1 === 0);HEAP32[(($2291)>>2)]=HEAP32[(($2292)>>2)];HEAP32[((($2291)+(4))>>2)]=HEAP32[((($2292)+(4))>>2)];HEAP32[((($2291)+(8))>>2)]=HEAP32[((($2292)+(8))>>2)];
   var $2293=$1;
   var $2294=$1;
   var $2295=(($2294)|0);
   var $2296=HEAP32[(($2295)>>2)];
   var $2297=_mrb_intern_str($2296, $str);
   var $2298=_new_sym925($2293, $2297);
   $sym34=$2298;
   var $2299=$1;
   var $2300=$1;
   var $2301=(($2300+56)|0);
   var $2302=HEAP32[(($2301)>>2)];
   var $2303=$2302 & 511;
   var $2304=$2303 << 23;
   var $2305=9 | $2304;
   var $2306=$sym34;
   var $2307=$2306 & 65535;
   var $2308=$2307 << 7;
   var $2309=$2305 | $2308;
   _genop($2299, $2309);
   var $2310=$1;
   _push_($2310);
   label = 437; break;
  case 308: 
   var $2312=$1;
   var $2313=(($2312)|0);
   var $2314=HEAP32[(($2313)>>2)];
   $mrb=$2314;
   var $2315=$2;
   var $2316=$2315;
   _mrb_fixnum_value926($fix, $2316);
   var $2317=$mrb;
   _mrb_str_buf_new($str36, $2317, 4);
   var $2318=$mrb;
   _mrb_str_buf_cat($5, $2318, $str36, ((86844)|0), 1);
   var $2319=$mrb;
   var $2320=$mrb;
   _mrb_fixnum_to_str($6, $2320, $fix, 10);
   _mrb_str_buf_append($7, $2319, $str36, $6);
   var $2321=$1;
   var $2322=$mrb;
   var $2323=_mrb_intern_str($2322, $str36);
   var $2324=_new_sym925($2321, $2323);
   $sym35=$2324;
   var $2325=$1;
   var $2326=$1;
   var $2327=(($2326+56)|0);
   var $2328=HEAP32[(($2327)>>2)];
   var $2329=$2328 & 511;
   var $2330=$2329 << 23;
   var $2331=9 | $2330;
   var $2332=$sym35;
   var $2333=$2332 & 65535;
   var $2334=$2333 << 7;
   var $2335=$2331 | $2334;
   _genop($2325, $2335);
   var $2336=$1;
   _push_($2336);
   label = 437; break;
  case 309: 
   label = 437; break;
  case 310: 
   var $2339=$1;
   var $2340=$2;
   _codegen($2339, $2340, 1);
   label = 437; break;
  case 311: 
   var $2342=$3;
   var $2343=(($2342)|(0))!=0;
   if ($2343) { label = 312; break; } else { label = 320; break; }
  case 312: 
   var $2345=$2;
   var $2346=(($2345)|0);
   var $2347=HEAP32[(($2346)>>2)];
   var $2348=$2347;
   $p37=$2348;
   var $2349=$2;
   var $2350=(($2349+4)|0);
   var $2351=HEAP32[(($2350)>>2)];
   var $2352=(($2351)|0);
   var $2353=HEAP32[(($2352)>>2)];
   var $2354=$2353;
   $base=$2354;
   var $2355=$1;
   var $2356=$p37;
   var $2357=$base;
   var $2358=_readint_mrb_int($2355, $2356, $2357, 0, $overflow);
   $i=$2358;
   var $2359=HEAP32[(($overflow)>>2)];
   var $2360=(($2359)|(0))!=0;
   if ($2360) { label = 313; break; } else { label = 314; break; }
  case 313: 
   var $2362=$1;
   var $2363=$p37;
   var $2364=$base;
   var $2365=_readint_float($2362, $2363, $2364);
   $f=$2365;
   var $2366=$1;
   var $2367=$1;
   var $2368=(($2367)|0);
   var $2369=HEAP32[(($2368)>>2)];
   var $2370=$f;
   _mrb_float_value927($8, $2369, $2370);
   var $2371=_new_lit($2366, $8);
   $off=$2371;
   var $2372=$1;
   var $2373=$1;
   var $2374=(($2373+56)|0);
   var $2375=HEAP32[(($2374)>>2)];
   var $2376=$2375 & 511;
   var $2377=$2376 << 23;
   var $2378=2 | $2377;
   var $2379=$off;
   var $2380=$2379 & 65535;
   var $2381=$2380 << 7;
   var $2382=$2378 | $2381;
   _genop($2372, $2382);
   label = 319; break;
  case 314: 
   var $2384=$i;
   var $2385=(($2384)|(0)) < 32767;
   if ($2385) { label = 315; break; } else { label = 317; break; }
  case 315: 
   var $2387=$i;
   var $2388=(($2387)|(0)) > -32767;
   if ($2388) { label = 316; break; } else { label = 317; break; }
  case 316: 
   var $2390=$1;
   var $2391=(($2390+56)|0);
   var $2392=HEAP32[(($2391)>>2)];
   var $2393=$2392 & 511;
   var $2394=$2393 << 23;
   var $2395=3 | $2394;
   var $2396=$i;
   var $2397=((($2396)+(32767))|0);
   var $2398=$2397 & 65535;
   var $2399=$2398 << 7;
   var $2400=$2395 | $2399;
   $co=$2400;
   label = 318; break;
  case 317: 
   var $2402=$1;
   var $2403=$i;
   _mrb_fixnum_value926($9, $2403);
   var $2404=_new_lit($2402, $9);
   $off38=$2404;
   var $2405=$1;
   var $2406=(($2405+56)|0);
   var $2407=HEAP32[(($2406)>>2)];
   var $2408=$2407 & 511;
   var $2409=$2408 << 23;
   var $2410=2 | $2409;
   var $2411=$off38;
   var $2412=$2411 & 65535;
   var $2413=$2412 << 7;
   var $2414=$2410 | $2413;
   $co=$2414;
   label = 318; break;
  case 318: 
   var $2416=$1;
   var $2417=$co;
   _genop($2416, $2417);
   label = 319; break;
  case 319: 
   var $2419=$1;
   _push_($2419);
   label = 320; break;
  case 320: 
   label = 437; break;
  case 321: 
   var $2422=$3;
   var $2423=(($2422)|(0))!=0;
   if ($2423) { label = 322; break; } else { label = 323; break; }
  case 322: 
   var $2425=$2;
   var $2426=$2425;
   $p39=$2426;
   var $2427=$p39;
   var $2428=_strtod($2427, 0);
   $f40=$2428;
   var $2429=$1;
   var $2430=$1;
   var $2431=(($2430)|0);
   var $2432=HEAP32[(($2431)>>2)];
   var $2433=$f40;
   _mrb_float_value927($10, $2432, $2433);
   var $2434=_new_lit($2429, $10);
   $off41=$2434;
   var $2435=$1;
   var $2436=$1;
   var $2437=(($2436+56)|0);
   var $2438=HEAP32[(($2437)>>2)];
   var $2439=$2438 & 511;
   var $2440=$2439 << 23;
   var $2441=2 | $2440;
   var $2442=$off41;
   var $2443=$2442 & 65535;
   var $2444=$2443 << 7;
   var $2445=$2441 | $2444;
   _genop($2435, $2445);
   var $2446=$1;
   _push_($2446);
   label = 323; break;
  case 323: 
   label = 437; break;
  case 324: 
   var $2449=$2;
   var $2450=(($2449)|0);
   var $2451=HEAP32[(($2450)>>2)];
   var $2452=$2451;
   $nt=$2452;
   var $2453=$2;
   var $2454=(($2453+4)|0);
   var $2455=HEAP32[(($2454)>>2)];
   $2=$2455;
   var $2456=$nt;
   if ((($2456)|(0))==51) {
    label = 325; break;
   }
   else if ((($2456)|(0))==50) {
    label = 326; break;
   }
   else {
   label = 334; break;
   }
  case 325: 
   var $2458=$2;
   var $2459=$2458;
   $p42=$2459;
   var $2460=$p42;
   var $2461=_strtod($2460, 0);
   $f43=$2461;
   var $2462=$1;
   var $2463=$1;
   var $2464=(($2463)|0);
   var $2465=HEAP32[(($2464)>>2)];
   var $2466=$f43;
   var $2467=(-$2466);
   _mrb_float_value927($11, $2465, $2467);
   var $2468=_new_lit($2462, $11);
   $off44=$2468;
   var $2469=$1;
   var $2470=$1;
   var $2471=(($2470+56)|0);
   var $2472=HEAP32[(($2471)>>2)];
   var $2473=$2472 & 511;
   var $2474=$2473 << 23;
   var $2475=2 | $2474;
   var $2476=$off44;
   var $2477=$2476 & 65535;
   var $2478=$2477 << 7;
   var $2479=$2475 | $2478;
   _genop($2469, $2479);
   var $2480=$1;
   _push_($2480);
   label = 335; break;
  case 326: 
   var $2482=$2;
   var $2483=(($2482)|0);
   var $2484=HEAP32[(($2483)>>2)];
   var $2485=$2484;
   $p45=$2485;
   var $2486=$2;
   var $2487=(($2486+4)|0);
   var $2488=HEAP32[(($2487)>>2)];
   var $2489=(($2488)|0);
   var $2490=HEAP32[(($2489)>>2)];
   var $2491=$2490;
   $base46=$2491;
   var $2492=$1;
   var $2493=$p45;
   var $2494=$base46;
   var $2495=_readint_mrb_int($2492, $2493, $2494, 1, $overflow49);
   $i47=$2495;
   var $2496=HEAP32[(($overflow49)>>2)];
   var $2497=(($2496)|(0))!=0;
   if ($2497) { label = 327; break; } else { label = 328; break; }
  case 327: 
   var $2499=$1;
   var $2500=$p45;
   var $2501=$base46;
   var $2502=_readint_float($2499, $2500, $2501);
   $f50=$2502;
   var $2503=$1;
   var $2504=$1;
   var $2505=(($2504)|0);
   var $2506=HEAP32[(($2505)>>2)];
   var $2507=$f50;
   var $2508=(-$2507);
   _mrb_float_value927($12, $2506, $2508);
   var $2509=_new_lit($2503, $12);
   $off51=$2509;
   var $2510=$1;
   var $2511=$1;
   var $2512=(($2511+56)|0);
   var $2513=HEAP32[(($2512)>>2)];
   var $2514=$2513 & 511;
   var $2515=$2514 << 23;
   var $2516=2 | $2515;
   var $2517=$off51;
   var $2518=$2517 & 65535;
   var $2519=$2518 << 7;
   var $2520=$2516 | $2519;
   _genop($2510, $2520);
   label = 333; break;
  case 328: 
   var $2522=$i47;
   var $2523=(($2522)|(0)) < 32767;
   if ($2523) { label = 329; break; } else { label = 331; break; }
  case 329: 
   var $2525=$i47;
   var $2526=(($2525)|(0)) > -32767;
   if ($2526) { label = 330; break; } else { label = 331; break; }
  case 330: 
   var $2528=$1;
   var $2529=(($2528+56)|0);
   var $2530=HEAP32[(($2529)>>2)];
   var $2531=$2530 & 511;
   var $2532=$2531 << 23;
   var $2533=3 | $2532;
   var $2534=$i47;
   var $2535=((($2534)+(32767))|0);
   var $2536=$2535 & 65535;
   var $2537=$2536 << 7;
   var $2538=$2533 | $2537;
   $co48=$2538;
   label = 332; break;
  case 331: 
   var $2540=$1;
   var $2541=$i47;
   _mrb_fixnum_value926($13, $2541);
   var $2542=_new_lit($2540, $13);
   $off52=$2542;
   var $2543=$1;
   var $2544=(($2543+56)|0);
   var $2545=HEAP32[(($2544)>>2)];
   var $2546=$2545 & 511;
   var $2547=$2546 << 23;
   var $2548=2 | $2547;
   var $2549=$off52;
   var $2550=$2549 & 65535;
   var $2551=$2550 << 7;
   var $2552=$2548 | $2551;
   $co48=$2552;
   label = 332; break;
  case 332: 
   var $2554=$1;
   var $2555=$co48;
   _genop($2554, $2555);
   label = 333; break;
  case 333: 
   var $2557=$1;
   _push_($2557);
   label = 335; break;
  case 334: 
   var $2559=$1;
   var $2560=$1;
   var $2561=(($2560)|0);
   var $2562=HEAP32[(($2561)>>2)];
   var $2563=_mrb_intern2($2562, ((85928)|0), 1);
   var $2564=_new_msym($2559, $2563);
   $sym53=$2564;
   var $2565=$1;
   var $2566=$1;
   var $2567=(($2566+56)|0);
   var $2568=HEAP32[(($2567)>>2)];
   var $2569=$2568 & 511;
   var $2570=$2569 << 23;
   var $2571=3 | $2570;
   _genop($2565, $2571);
   var $2572=$1;
   _push_($2572);
   var $2573=$1;
   var $2574=$2;
   _codegen($2573, $2574, 1);
   var $2575=$1;
   var $2576=(($2575+56)|0);
   var $2577=HEAP32[(($2576)>>2)];
   var $2578=((($2577)-(1))|0);
   HEAP32[(($2576)>>2)]=$2578;
   var $2579=$1;
   var $2580=(($2579+56)|0);
   var $2581=HEAP32[(($2580)>>2)];
   var $2582=((($2581)-(1))|0);
   HEAP32[(($2580)>>2)]=$2582;
   var $2583=$1;
   var $2584=$1;
   var $2585=(($2584+56)|0);
   var $2586=HEAP32[(($2585)>>2)];
   var $2587=$2586 & 511;
   var $2588=$2587 << 23;
   var $2589=46 | $2588;
   var $2590=$sym53;
   var $2591=$2590 & 511;
   var $2592=$2591 << 14;
   var $2593=$2589 | $2592;
   var $2594=$2593 | 256;
   _genop($2583, $2594);
   label = 335; break;
  case 335: 
   label = 437; break;
  case 336: 
   var $2597=$3;
   var $2598=(($2597)|(0))!=0;
   if ($2598) { label = 337; break; } else { label = 338; break; }
  case 337: 
   var $2600=$2;
   var $2601=(($2600)|0);
   var $2602=HEAP32[(($2601)>>2)];
   var $2603=$2602;
   $p54=$2603;
   var $2604=$2;
   var $2605=(($2604+4)|0);
   var $2606=HEAP32[(($2605)>>2)];
   var $2607=$2606;
   $len55=$2607;
   var $2608=$1;
   var $2609=(($2608)|0);
   var $2610=HEAP32[(($2609)>>2)];
   var $2611=_mrb_gc_arena_save($2610);
   $ai=$2611;
   var $2612=$1;
   var $2613=$1;
   var $2614=(($2613)|0);
   var $2615=HEAP32[(($2614)>>2)];
   var $2616=$p54;
   var $2617=$len55;
   _mrb_str_new($14, $2615, $2616, $2617);
   var $2618=_new_lit($2612, $14);
   $off56=$2618;
   var $2619=$1;
   var $2620=(($2619)|0);
   var $2621=HEAP32[(($2620)>>2)];
   var $2622=$ai;
   _mrb_gc_arena_restore($2621, $2622);
   var $2623=$1;
   var $2624=$1;
   var $2625=(($2624+56)|0);
   var $2626=HEAP32[(($2625)>>2)];
   var $2627=$2626 & 511;
   var $2628=$2627 << 23;
   var $2629=61 | $2628;
   var $2630=$off56;
   var $2631=$2630 & 65535;
   var $2632=$2631 << 7;
   var $2633=$2629 | $2632;
   _genop($2623, $2633);
   var $2634=$1;
   _push_($2634);
   label = 338; break;
  case 338: 
   label = 437; break;
  case 339: 
   var $2637=$2;
   var $2638=$2637;
   var $2639=(($2638+16)|0);
   var $2640=HEAP32[(($2639)>>2)];
   $2=$2640;
   label = 340; break;
  case 340: 
   var $2642=$3;
   var $2643=(($2642)|(0))!=0;
   if ($2643) { label = 341; break; } else { label = 345; break; }
  case 341: 
   var $2645=$2;
   $n57=$2645;
   var $2646=$1;
   var $2647=$n57;
   var $2648=(($2647)|0);
   var $2649=HEAP32[(($2648)>>2)];
   _codegen($2646, $2649, 1);
   var $2650=$n57;
   var $2651=(($2650+4)|0);
   var $2652=HEAP32[(($2651)>>2)];
   $n57=$2652;
   label = 342; break;
  case 342: 
   var $2654=$n57;
   var $2655=(($2654)|(0))!=0;
   if ($2655) { label = 343; break; } else { label = 344; break; }
  case 343: 
   var $2657=$1;
   var $2658=$n57;
   var $2659=(($2658)|0);
   var $2660=HEAP32[(($2659)>>2)];
   _codegen($2657, $2660, 1);
   var $2661=$1;
   var $2662=(($2661+56)|0);
   var $2663=HEAP32[(($2662)>>2)];
   var $2664=((($2663)-(1))|0);
   HEAP32[(($2662)>>2)]=$2664;
   var $2665=$1;
   var $2666=(($2665+56)|0);
   var $2667=HEAP32[(($2666)>>2)];
   var $2668=((($2667)-(1))|0);
   HEAP32[(($2666)>>2)]=$2668;
   var $2669=$1;
   var $2670=$1;
   var $2671=(($2670+56)|0);
   var $2672=HEAP32[(($2671)>>2)];
   var $2673=$2672 & 511;
   var $2674=$2673 << 23;
   var $2675=62 | $2674;
   var $2676=$1;
   var $2677=(($2676+56)|0);
   var $2678=HEAP32[(($2677)>>2)];
   var $2679=((($2678)+(1))|0);
   var $2680=$2679 & 511;
   var $2681=$2680 << 14;
   var $2682=$2675 | $2681;
   _genop_peep($2669, $2682, 1);
   var $2683=$1;
   _push_($2683);
   var $2684=$n57;
   var $2685=(($2684+4)|0);
   var $2686=HEAP32[(($2685)>>2)];
   $n57=$2686;
   label = 342; break;
  case 344: 
   label = 351; break;
  case 345: 
   var $2689=$2;
   $n58=$2689;
   label = 346; break;
  case 346: 
   var $2691=$n58;
   var $2692=(($2691)|(0))!=0;
   if ($2692) { label = 347; break; } else { label = 350; break; }
  case 347: 
   var $2694=$n58;
   var $2695=(($2694)|0);
   var $2696=HEAP32[(($2695)>>2)];
   var $2697=(($2696)|0);
   var $2698=HEAP32[(($2697)>>2)];
   var $2699=$2698;
   var $2700=(($2699)|(0))!=55;
   if ($2700) { label = 348; break; } else { label = 349; break; }
  case 348: 
   var $2702=$1;
   var $2703=$n58;
   var $2704=(($2703)|0);
   var $2705=HEAP32[(($2704)>>2)];
   _codegen($2702, $2705, 0);
   label = 349; break;
  case 349: 
   var $2707=$n58;
   var $2708=(($2707+4)|0);
   var $2709=HEAP32[(($2708)>>2)];
   $n58=$2709;
   label = 346; break;
  case 350: 
   label = 351; break;
  case 351: 
   label = 437; break;
  case 352: 
   var $2713=$1;
   var $2714=$2;
   var $2715=$3;
   _gen_literal_array($2713, $2714, 0, $2715);
   label = 437; break;
  case 353: 
   var $2717=$1;
   var $2718=$2;
   var $2719=$3;
   _gen_literal_array($2717, $2718, 1, $2719);
   label = 437; break;
  case 354: 
   var $2721=$3;
   var $2722=(($2721)|(0))!=0;
   if ($2722) { label = 355; break; } else { label = 356; break; }
  case 355: 
   var $2724=$2;
   var $2725=(($2724)|0);
   var $2726=HEAP32[(($2725)>>2)];
   var $2727=$2726;
   $p59=$2727;
   var $2728=$2;
   var $2729=(($2728+4)|0);
   var $2730=HEAP32[(($2729)>>2)];
   var $2731=$2730;
   $len60=$2731;
   var $2732=$1;
   var $2733=(($2732)|0);
   var $2734=HEAP32[(($2733)>>2)];
   var $2735=_mrb_gc_arena_save($2734);
   $ai61=$2735;
   var $2736=$1;
   var $2737=$1;
   var $2738=(($2737)|0);
   var $2739=HEAP32[(($2738)>>2)];
   var $2740=_mrb_intern2($2739, ((105532)|0), 6);
   var $2741=_new_sym925($2736, $2740);
   $sym62=$2741;
   var $2742=$1;
   var $2743=$1;
   var $2744=(($2743)|0);
   var $2745=HEAP32[(($2744)>>2)];
   var $2746=$p59;
   var $2747=$len60;
   _mrb_str_new($15, $2745, $2746, $2747);
   var $2748=_new_lit($2742, $15);
   $off63=$2748;
   var $2749=$1;
   var $2750=$1;
   var $2751=(($2750+56)|0);
   var $2752=HEAP32[(($2751)>>2)];
   var $2753=$2752 & 511;
   var $2754=$2753 << 23;
   var $2755=66 | $2754;
   _genop($2749, $2755);
   var $2756=$1;
   var $2757=$1;
   var $2758=(($2757+56)|0);
   var $2759=HEAP32[(($2758)>>2)];
   var $2760=$2759 & 511;
   var $2761=$2760 << 23;
   var $2762=19 | $2761;
   var $2763=$sym62;
   var $2764=$2763 & 65535;
   var $2765=$2764 << 7;
   var $2766=$2762 | $2765;
   _genop($2756, $2766);
   var $2767=$1;
   _push_($2767);
   var $2768=$1;
   var $2769=$1;
   var $2770=(($2769+56)|0);
   var $2771=HEAP32[(($2770)>>2)];
   var $2772=$2771 & 511;
   var $2773=$2772 << 23;
   var $2774=61 | $2773;
   var $2775=$off63;
   var $2776=$2775 & 65535;
   var $2777=$2776 << 7;
   var $2778=$2774 | $2777;
   _genop($2768, $2778);
   var $2779=$1;
   var $2780=(($2779+56)|0);
   var $2781=HEAP32[(($2780)>>2)];
   var $2782=((($2781)-(1))|0);
   HEAP32[(($2780)>>2)]=$2782;
   var $2783=$1;
   var $2784=$1;
   var $2785=(($2784)|0);
   var $2786=HEAP32[(($2785)>>2)];
   var $2787=_mrb_intern2($2786, ((104756)|0), 1);
   var $2788=_new_sym925($2783, $2787);
   $sym62=$2788;
   var $2789=$1;
   var $2790=$1;
   var $2791=(($2790+56)|0);
   var $2792=HEAP32[(($2791)>>2)];
   var $2793=$2792 & 511;
   var $2794=$2793 << 23;
   var $2795=32 | $2794;
   var $2796=$sym62;
   var $2797=$2796 & 511;
   var $2798=$2797 << 14;
   var $2799=$2795 | $2798;
   var $2800=$2799 | 128;
   _genop($2789, $2800);
   var $2801=$1;
   var $2802=(($2801)|0);
   var $2803=HEAP32[(($2802)>>2)];
   var $2804=$ai61;
   _mrb_gc_arena_restore($2803, $2804);
   var $2805=$1;
   _push_($2805);
   label = 356; break;
  case 356: 
   label = 437; break;
  case 357: 
   var $2808=$3;
   var $2809=(($2808)|(0))!=0;
   if ($2809) { label = 358; break; } else { label = 361; break; }
  case 358: 
   var $2811=$2;
   var $2812=(($2811)|0);
   var $2813=HEAP32[(($2812)>>2)];
   var $2814=$2813;
   $p1=$2814;
   var $2815=$2;
   var $2816=(($2815+4)|0);
   var $2817=HEAP32[(($2816)>>2)];
   var $2818=$2817;
   $p2=$2818;
   var $2819=$1;
   var $2820=(($2819)|0);
   var $2821=HEAP32[(($2820)>>2)];
   var $2822=_mrb_gc_arena_save($2821);
   $ai64=$2822;
   var $2823=$1;
   var $2824=$1;
   var $2825=(($2824)|0);
   var $2826=HEAP32[(($2825)>>2)];
   var $2827=_mrb_intern2($2826, ((104240)|0), 6);
   var $2828=_new_sym925($2823, $2827);
   $sym65=$2828;
   var $2829=$1;
   var $2830=$1;
   var $2831=(($2830)|0);
   var $2832=HEAP32[(($2831)>>2)];
   var $2833=$p1;
   var $2834=$p1;
   var $2835=_strlen($2834);
   _mrb_str_new($16, $2832, $2833, $2835);
   var $2836=_new_lit($2829, $16);
   $off66=$2836;
   $argc=1;
   var $2837=$1;
   var $2838=$1;
   var $2839=(($2838+56)|0);
   var $2840=HEAP32[(($2839)>>2)];
   var $2841=$2840 & 511;
   var $2842=$2841 << 23;
   var $2843=66 | $2842;
   _genop($2837, $2843);
   var $2844=$1;
   var $2845=$1;
   var $2846=(($2845+56)|0);
   var $2847=HEAP32[(($2846)>>2)];
   var $2848=$2847 & 511;
   var $2849=$2848 << 23;
   var $2850=19 | $2849;
   var $2851=$sym65;
   var $2852=$2851 & 65535;
   var $2853=$2852 << 7;
   var $2854=$2850 | $2853;
   _genop($2844, $2854);
   var $2855=$1;
   _push_($2855);
   var $2856=$1;
   var $2857=$1;
   var $2858=(($2857+56)|0);
   var $2859=HEAP32[(($2858)>>2)];
   var $2860=$2859 & 511;
   var $2861=$2860 << 23;
   var $2862=61 | $2861;
   var $2863=$off66;
   var $2864=$2863 & 65535;
   var $2865=$2864 << 7;
   var $2866=$2862 | $2865;
   _genop($2856, $2866);
   var $2867=$p2;
   var $2868=(($2867)|(0))!=0;
   if ($2868) { label = 359; break; } else { label = 360; break; }
  case 359: 
   var $2870=$1;
   _push_($2870);
   var $2871=$1;
   var $2872=$1;
   var $2873=(($2872)|0);
   var $2874=HEAP32[(($2873)>>2)];
   var $2875=$p2;
   var $2876=$p2;
   var $2877=_strlen($2876);
   _mrb_str_new($17, $2874, $2875, $2877);
   var $2878=_new_lit($2871, $17);
   $off66=$2878;
   var $2879=$1;
   var $2880=$1;
   var $2881=(($2880+56)|0);
   var $2882=HEAP32[(($2881)>>2)];
   var $2883=$2882 & 511;
   var $2884=$2883 << 23;
   var $2885=61 | $2884;
   var $2886=$off66;
   var $2887=$2886 & 65535;
   var $2888=$2887 << 7;
   var $2889=$2885 | $2888;
   _genop($2879, $2889);
   var $2890=$argc;
   var $2891=((($2890)+(1))|0);
   $argc=$2891;
   var $2892=$1;
   var $2893=(($2892+56)|0);
   var $2894=HEAP32[(($2893)>>2)];
   var $2895=((($2894)-(1))|0);
   HEAP32[(($2893)>>2)]=$2895;
   label = 360; break;
  case 360: 
   var $2897=$1;
   var $2898=(($2897+56)|0);
   var $2899=HEAP32[(($2898)>>2)];
   var $2900=((($2899)-(1))|0);
   HEAP32[(($2898)>>2)]=$2900;
   var $2901=$1;
   var $2902=$1;
   var $2903=(($2902)|0);
   var $2904=HEAP32[(($2903)>>2)];
   var $2905=_mrb_intern2($2904, ((103656)|0), 7);
   var $2906=_new_sym925($2901, $2905);
   $sym65=$2906;
   var $2907=$1;
   var $2908=$1;
   var $2909=(($2908+56)|0);
   var $2910=HEAP32[(($2909)>>2)];
   var $2911=$2910 & 511;
   var $2912=$2911 << 23;
   var $2913=32 | $2912;
   var $2914=$sym65;
   var $2915=$2914 & 511;
   var $2916=$2915 << 14;
   var $2917=$2913 | $2916;
   var $2918=$argc;
   var $2919=$2918 & 127;
   var $2920=$2919 << 7;
   var $2921=$2917 | $2920;
   _genop($2907, $2921);
   var $2922=$1;
   var $2923=(($2922)|0);
   var $2924=HEAP32[(($2923)>>2)];
   var $2925=$ai64;
   _mrb_gc_arena_restore($2924, $2925);
   var $2926=$1;
   _push_($2926);
   label = 361; break;
  case 361: 
   label = 437; break;
  case 362: 
   var $2929=$3;
   var $2930=(($2929)|(0))!=0;
   if ($2930) { label = 363; break; } else { label = 371; break; }
  case 363: 
   var $2932=$2;
   var $2933=(($2932)|0);
   var $2934=HEAP32[(($2933)>>2)];
   $n67=$2934;
   var $2935=$1;
   var $2936=(($2935)|0);
   var $2937=HEAP32[(($2936)>>2)];
   var $2938=_mrb_gc_arena_save($2937);
   $ai68=$2938;
   var $2939=$1;
   var $2940=$1;
   var $2941=(($2940)|0);
   var $2942=HEAP32[(($2941)>>2)];
   var $2943=_mrb_intern2($2942, ((104240)|0), 6);
   var $2944=_new_sym925($2939, $2943);
   $sym69=$2944;
   $argc70=1;
   var $2945=$1;
   var $2946=$1;
   var $2947=(($2946+56)|0);
   var $2948=HEAP32[(($2947)>>2)];
   var $2949=$2948 & 511;
   var $2950=$2949 << 23;
   var $2951=66 | $2950;
   _genop($2945, $2951);
   var $2952=$1;
   var $2953=$1;
   var $2954=(($2953+56)|0);
   var $2955=HEAP32[(($2954)>>2)];
   var $2956=$2955 & 511;
   var $2957=$2956 << 23;
   var $2958=19 | $2957;
   var $2959=$sym69;
   var $2960=$2959 & 65535;
   var $2961=$2960 << 7;
   var $2962=$2958 | $2961;
   _genop($2952, $2962);
   var $2963=$1;
   _push_($2963);
   var $2964=$1;
   var $2965=$n67;
   var $2966=(($2965)|0);
   var $2967=HEAP32[(($2966)>>2)];
   _codegen($2964, $2967, 1);
   var $2968=$n67;
   var $2969=(($2968+4)|0);
   var $2970=HEAP32[(($2969)>>2)];
   $n67=$2970;
   label = 364; break;
  case 364: 
   var $2972=$n67;
   var $2973=(($2972)|(0))!=0;
   if ($2973) { label = 365; break; } else { label = 366; break; }
  case 365: 
   var $2975=$1;
   var $2976=$n67;
   var $2977=(($2976)|0);
   var $2978=HEAP32[(($2977)>>2)];
   _codegen($2975, $2978, 1);
   var $2979=$1;
   var $2980=(($2979+56)|0);
   var $2981=HEAP32[(($2980)>>2)];
   var $2982=((($2981)-(1))|0);
   HEAP32[(($2980)>>2)]=$2982;
   var $2983=$1;
   var $2984=(($2983+56)|0);
   var $2985=HEAP32[(($2984)>>2)];
   var $2986=((($2985)-(1))|0);
   HEAP32[(($2984)>>2)]=$2986;
   var $2987=$1;
   var $2988=$1;
   var $2989=(($2988+56)|0);
   var $2990=HEAP32[(($2989)>>2)];
   var $2991=$2990 & 511;
   var $2992=$2991 << 23;
   var $2993=62 | $2992;
   var $2994=$1;
   var $2995=(($2994+56)|0);
   var $2996=HEAP32[(($2995)>>2)];
   var $2997=((($2996)+(1))|0);
   var $2998=$2997 & 511;
   var $2999=$2998 << 14;
   var $3000=$2993 | $2999;
   _genop_peep($2987, $3000, 1);
   var $3001=$1;
   _push_($3001);
   var $3002=$n67;
   var $3003=(($3002+4)|0);
   var $3004=HEAP32[(($3003)>>2)];
   $n67=$3004;
   label = 364; break;
  case 366: 
   var $3006=$2;
   var $3007=(($3006+4)|0);
   var $3008=HEAP32[(($3007)>>2)];
   var $3009=(($3008+4)|0);
   var $3010=HEAP32[(($3009)>>2)];
   $n67=$3010;
   var $3011=$n67;
   var $3012=(($3011)|0);
   var $3013=HEAP32[(($3012)>>2)];
   var $3014=(($3013)|(0))!=0;
   if ($3014) { label = 367; break; } else { label = 368; break; }
  case 367: 
   var $3016=$n67;
   var $3017=(($3016)|0);
   var $3018=HEAP32[(($3017)>>2)];
   var $3019=$3018;
   $p72=$3019;
   var $3020=$1;
   var $3021=$1;
   var $3022=(($3021)|0);
   var $3023=HEAP32[(($3022)>>2)];
   var $3024=$p72;
   var $3025=$p72;
   var $3026=_strlen($3025);
   _mrb_str_new($18, $3023, $3024, $3026);
   var $3027=_new_lit($3020, $18);
   $off71=$3027;
   var $3028=$1;
   var $3029=$2;
   var $3030=(($3029)|0);
   var $3031=HEAP32[(($3030)>>2)];
   _codegen($3028, $3031, 1);
   var $3032=$1;
   var $3033=$1;
   var $3034=(($3033+56)|0);
   var $3035=HEAP32[(($3034)>>2)];
   var $3036=$3035 & 511;
   var $3037=$3036 << 23;
   var $3038=61 | $3037;
   var $3039=$off71;
   var $3040=$3039 & 65535;
   var $3041=$3040 << 7;
   var $3042=$3038 | $3041;
   _genop($3032, $3042);
   var $3043=$1;
   var $3044=(($3043+56)|0);
   var $3045=HEAP32[(($3044)>>2)];
   var $3046=((($3045)-(1))|0);
   HEAP32[(($3044)>>2)]=$3046;
   var $3047=$1;
   var $3048=$1;
   var $3049=(($3048+56)|0);
   var $3050=HEAP32[(($3049)>>2)];
   var $3051=$3050 & 511;
   var $3052=$3051 << 23;
   var $3053=62 | $3052;
   var $3054=$1;
   var $3055=(($3054+56)|0);
   var $3056=HEAP32[(($3055)>>2)];
   var $3057=((($3056)+(1))|0);
   var $3058=$3057 & 511;
   var $3059=$3058 << 14;
   var $3060=$3053 | $3059;
   _genop_peep($3047, $3060, 1);
   label = 368; break;
  case 368: 
   var $3062=$n67;
   var $3063=(($3062+4)|0);
   var $3064=HEAP32[(($3063)>>2)];
   var $3065=(($3064)|(0))!=0;
   if ($3065) { label = 369; break; } else { label = 370; break; }
  case 369: 
   var $3067=$n67;
   var $3068=(($3067+4)|0);
   var $3069=HEAP32[(($3068)>>2)];
   var $3070=$3069;
   $p273=$3070;
   var $3071=$1;
   _push_($3071);
   var $3072=$1;
   var $3073=$1;
   var $3074=(($3073)|0);
   var $3075=HEAP32[(($3074)>>2)];
   var $3076=$p273;
   var $3077=$p273;
   var $3078=_strlen($3077);
   _mrb_str_new($19, $3075, $3076, $3078);
   var $3079=_new_lit($3072, $19);
   $off74=$3079;
   var $3080=$1;
   var $3081=$1;
   var $3082=(($3081+56)|0);
   var $3083=HEAP32[(($3082)>>2)];
   var $3084=$3083 & 511;
   var $3085=$3084 << 23;
   var $3086=61 | $3085;
   var $3087=$off74;
   var $3088=$3087 & 65535;
   var $3089=$3088 << 7;
   var $3090=$3086 | $3089;
   _genop($3080, $3090);
   var $3091=$argc70;
   var $3092=((($3091)+(1))|0);
   $argc70=$3092;
   var $3093=$1;
   var $3094=(($3093+56)|0);
   var $3095=HEAP32[(($3094)>>2)];
   var $3096=((($3095)-(1))|0);
   HEAP32[(($3094)>>2)]=$3096;
   label = 370; break;
  case 370: 
   var $3098=$1;
   var $3099=(($3098+56)|0);
   var $3100=HEAP32[(($3099)>>2)];
   var $3101=((($3100)-(1))|0);
   HEAP32[(($3099)>>2)]=$3101;
   var $3102=$1;
   var $3103=$1;
   var $3104=(($3103)|0);
   var $3105=HEAP32[(($3104)>>2)];
   var $3106=_mrb_intern2($3105, ((103656)|0), 7);
   var $3107=_new_sym925($3102, $3106);
   $sym69=$3107;
   var $3108=$1;
   var $3109=$1;
   var $3110=(($3109+56)|0);
   var $3111=HEAP32[(($3110)>>2)];
   var $3112=$3111 & 511;
   var $3113=$3112 << 23;
   var $3114=32 | $3113;
   var $3115=$sym69;
   var $3116=$3115 & 511;
   var $3117=$3116 << 14;
   var $3118=$3114 | $3117;
   var $3119=$argc70;
   var $3120=$3119 & 127;
   var $3121=$3120 << 7;
   var $3122=$3118 | $3121;
   _genop($3108, $3122);
   var $3123=$1;
   var $3124=(($3123)|0);
   var $3125=HEAP32[(($3124)>>2)];
   var $3126=$ai68;
   _mrb_gc_arena_restore($3125, $3126);
   var $3127=$1;
   _push_($3127);
   label = 377; break;
  case 371: 
   var $3129=$2;
   var $3130=(($3129)|0);
   var $3131=HEAP32[(($3130)>>2)];
   $n75=$3131;
   label = 372; break;
  case 372: 
   var $3133=$n75;
   var $3134=(($3133)|(0))!=0;
   if ($3134) { label = 373; break; } else { label = 376; break; }
  case 373: 
   var $3136=$n75;
   var $3137=(($3136)|0);
   var $3138=HEAP32[(($3137)>>2)];
   var $3139=(($3138)|0);
   var $3140=HEAP32[(($3139)>>2)];
   var $3141=$3140;
   var $3142=(($3141)|(0))!=55;
   if ($3142) { label = 374; break; } else { label = 375; break; }
  case 374: 
   var $3144=$1;
   var $3145=$n75;
   var $3146=(($3145)|0);
   var $3147=HEAP32[(($3146)>>2)];
   _codegen($3144, $3147, 0);
   label = 375; break;
  case 375: 
   var $3149=$n75;
   var $3150=(($3149+4)|0);
   var $3151=HEAP32[(($3150)>>2)];
   $n75=$3151;
   label = 372; break;
  case 376: 
   label = 377; break;
  case 377: 
   label = 437; break;
  case 378: 
   var $3155=$3;
   var $3156=(($3155)|(0))!=0;
   if ($3156) { label = 379; break; } else { label = 380; break; }
  case 379: 
   var $3158=$1;
   var $3159=$2;
   var $3160=$3159;
   var $3161=(($3160) & 65535);
   var $3162=_new_sym925($3158, $3161);
   $sym76=$3162;
   var $3163=$1;
   var $3164=$1;
   var $3165=(($3164+56)|0);
   var $3166=HEAP32[(($3165)>>2)];
   var $3167=$3166 & 511;
   var $3168=$3167 << 23;
   var $3169=4 | $3168;
   var $3170=$sym76;
   var $3171=$3170 & 65535;
   var $3172=$3171 << 7;
   var $3173=$3169 | $3172;
   _genop($3163, $3173);
   var $3174=$1;
   _push_($3174);
   label = 380; break;
  case 380: 
   label = 437; break;
  case 381: 
   var $3177=$1;
   var $3178=$2;
   var $3179=$3;
   _codegen($3177, $3178, $3179);
   var $3180=$3;
   var $3181=(($3180)|(0))!=0;
   if ($3181) { label = 382; break; } else { label = 383; break; }
  case 382: 
   var $3183=$1;
   _gen_send_intern($3183);
   label = 383; break;
  case 383: 
   label = 437; break;
  case 384: 
   var $3186=$3;
   var $3187=(($3186)|(0))!=0;
   if ($3187) { label = 385; break; } else { label = 386; break; }
  case 385: 
   var $3189=$1;
   var $3190=$1;
   var $3191=(($3190+56)|0);
   var $3192=HEAP32[(($3191)>>2)];
   var $3193=$3192 & 511;
   var $3194=$3193 << 23;
   var $3195=6 | $3194;
   _genop($3189, $3195);
   var $3196=$1;
   _push_($3196);
   label = 386; break;
  case 386: 
   label = 437; break;
  case 387: 
   var $3199=$3;
   var $3200=(($3199)|(0))!=0;
   if ($3200) { label = 388; break; } else { label = 389; break; }
  case 388: 
   var $3202=$1;
   var $3203=$1;
   var $3204=(($3203+56)|0);
   var $3205=HEAP32[(($3204)>>2)];
   var $3206=$3205 & 511;
   var $3207=$3206 << 23;
   var $3208=5 | $3207;
   _genop($3202, $3208);
   var $3209=$1;
   _push_($3209);
   label = 389; break;
  case 389: 
   label = 437; break;
  case 390: 
   var $3212=$3;
   var $3213=(($3212)|(0))!=0;
   if ($3213) { label = 391; break; } else { label = 392; break; }
  case 391: 
   var $3215=$1;
   var $3216=$1;
   var $3217=(($3216+56)|0);
   var $3218=HEAP32[(($3217)>>2)];
   var $3219=$3218 & 511;
   var $3220=$3219 << 23;
   var $3221=7 | $3220;
   _genop($3215, $3221);
   var $3222=$1;
   _push_($3222);
   label = 392; break;
  case 392: 
   label = 437; break;
  case 393: 
   var $3225=$3;
   var $3226=(($3225)|(0))!=0;
   if ($3226) { label = 394; break; } else { label = 395; break; }
  case 394: 
   var $3228=$1;
   var $3229=$1;
   var $3230=(($3229+56)|0);
   var $3231=HEAP32[(($3230)>>2)];
   var $3232=$3231 & 511;
   var $3233=$3232 << 23;
   var $3234=8 | $3233;
   _genop($3228, $3234);
   var $3235=$1;
   _push_($3235);
   label = 395; break;
  case 395: 
   label = 437; break;
  case 396: 
   var $3238=$1;
   var $3239=$2;
   var $3240=(($3239)|0);
   var $3241=HEAP32[(($3240)>>2)];
   var $3242=$3241;
   var $3243=(($3242) & 65535);
   var $3244=_new_msym($3238, $3243);
   $a=$3244;
   var $3245=$1;
   var $3246=$2;
   var $3247=(($3246+4)|0);
   var $3248=HEAP32[(($3247)>>2)];
   var $3249=$3248;
   var $3250=(($3249) & 65535);
   var $3251=_new_msym($3245, $3250);
   $b=$3251;
   var $3252=$1;
   var $3253=$1;
   var $3254=(($3253)|0);
   var $3255=HEAP32[(($3254)>>2)];
   var $3256=_mrb_intern2($3255, ((103156)|0), 12);
   var $3257=_new_msym($3252, $3256);
   $c=$3257;
   var $3258=$1;
   var $3259=$1;
   var $3260=(($3259+56)|0);
   var $3261=HEAP32[(($3260)>>2)];
   var $3262=$3261 & 511;
   var $3263=$3262 << 23;
   var $3264=72 | $3263;
   _genop($3258, $3264);
   var $3265=$1;
   _push_($3265);
   var $3266=$1;
   var $3267=$1;
   var $3268=(($3267+56)|0);
   var $3269=HEAP32[(($3268)>>2)];
   var $3270=$3269 & 511;
   var $3271=$3270 << 23;
   var $3272=4 | $3271;
   var $3273=$a;
   var $3274=$3273 & 65535;
   var $3275=$3274 << 7;
   var $3276=$3272 | $3275;
   _genop($3266, $3276);
   var $3277=$1;
   _push_($3277);
   var $3278=$1;
   var $3279=$1;
   var $3280=(($3279+56)|0);
   var $3281=HEAP32[(($3280)>>2)];
   var $3282=$3281 & 511;
   var $3283=$3282 << 23;
   var $3284=4 | $3283;
   var $3285=$b;
   var $3286=$3285 & 65535;
   var $3287=$3286 << 7;
   var $3288=$3284 | $3287;
   _genop($3278, $3288);
   var $3289=$1;
   _push_($3289);
   var $3290=$1;
   var $3291=$1;
   var $3292=(($3291+56)|0);
   var $3293=HEAP32[(($3292)>>2)];
   var $3294=$3293 & 511;
   var $3295=$3294 << 23;
   var $3296=5 | $3295;
   _genop($3290, $3296);
   var $3297=$1;
   var $3298=(($3297+56)|0);
   var $3299=HEAP32[(($3298)>>2)];
   var $3300=((($3299)-(3))|0);
   HEAP32[(($3298)>>2)]=$3300;
   var $3301=$1;
   var $3302=$1;
   var $3303=(($3302+56)|0);
   var $3304=HEAP32[(($3303)>>2)];
   var $3305=$3304 & 511;
   var $3306=$3305 << 23;
   var $3307=32 | $3306;
   var $3308=$c;
   var $3309=$3308 & 511;
   var $3310=$3309 << 14;
   var $3311=$3307 | $3310;
   var $3312=$3311 | 256;
   _genop($3301, $3312);
   var $3313=$3;
   var $3314=(($3313)|(0))!=0;
   if ($3314) { label = 397; break; } else { label = 398; break; }
  case 397: 
   var $3316=$1;
   _push_($3316);
   label = 398; break;
  case 398: 
   label = 437; break;
  case 399: 
   var $3319=$1;
   var $3320=$1;
   var $3321=(($3320)|0);
   var $3322=HEAP32[(($3321)>>2)];
   var $3323=_mrb_intern2($3322, ((102696)|0), 12);
   var $3324=_new_msym($3319, $3323);
   $undef=$3324;
   $num=0;
   var $3325=$2;
   $t77=$3325;
   var $3326=$1;
   var $3327=$1;
   var $3328=(($3327+56)|0);
   var $3329=HEAP32[(($3328)>>2)];
   var $3330=$3329 & 511;
   var $3331=$3330 << 23;
   var $3332=72 | $3331;
   _genop($3326, $3332);
   var $3333=$1;
   _push_($3333);
   label = 400; break;
  case 400: 
   var $3335=$t77;
   var $3336=(($3335)|(0))!=0;
   if ($3336) { label = 401; break; } else { label = 402; break; }
  case 401: 
   var $3338=$1;
   var $3339=$t77;
   var $3340=(($3339)|0);
   var $3341=HEAP32[(($3340)>>2)];
   var $3342=$3341;
   var $3343=(($3342) & 65535);
   var $3344=_new_msym($3338, $3343);
   $symbol=$3344;
   var $3345=$1;
   var $3346=$1;
   var $3347=(($3346+56)|0);
   var $3348=HEAP32[(($3347)>>2)];
   var $3349=$3348 & 511;
   var $3350=$3349 << 23;
   var $3351=4 | $3350;
   var $3352=$symbol;
   var $3353=$3352 & 65535;
   var $3354=$3353 << 7;
   var $3355=$3351 | $3354;
   _genop($3345, $3355);
   var $3356=$1;
   _push_($3356);
   var $3357=$t77;
   var $3358=(($3357+4)|0);
   var $3359=HEAP32[(($3358)>>2)];
   $t77=$3359;
   var $3360=$num;
   var $3361=((($3360)+(1))|0);
   $num=$3361;
   label = 400; break;
  case 402: 
   var $3363=$num;
   var $3364=((($3363)+(1))|0);
   var $3365=$1;
   var $3366=(($3365+56)|0);
   var $3367=HEAP32[(($3366)>>2)];
   var $3368=((($3367)-($3364))|0);
   HEAP32[(($3366)>>2)]=$3368;
   var $3369=$1;
   var $3370=$1;
   var $3371=(($3370+56)|0);
   var $3372=HEAP32[(($3371)>>2)];
   var $3373=$3372 & 511;
   var $3374=$3373 << 23;
   var $3375=32 | $3374;
   var $3376=$undef;
   var $3377=$3376 & 511;
   var $3378=$3377 << 14;
   var $3379=$3375 | $3378;
   var $3380=$num;
   var $3381=$3380 & 127;
   var $3382=$3381 << 7;
   var $3383=$3379 | $3382;
   _genop($3369, $3383);
   var $3384=$3;
   var $3385=(($3384)|(0))!=0;
   if ($3385) { label = 403; break; } else { label = 404; break; }
  case 403: 
   var $3387=$1;
   _push_($3387);
   label = 404; break;
  case 404: 
   label = 437; break;
  case 405: 
   var $3390=$2;
   var $3391=(($3390)|0);
   var $3392=HEAP32[(($3391)>>2)];
   var $3393=(($3392)|0);
   var $3394=HEAP32[(($3393)>>2)];
   var $3395=(($3394)|(0))==0;
   if ($3395) { label = 406; break; } else { label = 407; break; }
  case 406: 
   var $3397=$1;
   var $3398=$1;
   var $3399=(($3398+56)|0);
   var $3400=HEAP32[(($3399)>>2)];
   var $3401=$3400 & 511;
   var $3402=$3401 << 23;
   var $3403=5 | $3402;
   _genop($3397, $3403);
   var $3404=$1;
   _push_($3404);
   label = 411; break;
  case 407: 
   var $3406=$2;
   var $3407=(($3406)|0);
   var $3408=HEAP32[(($3407)>>2)];
   var $3409=(($3408)|0);
   var $3410=HEAP32[(($3409)>>2)];
   var $3411=(($3410)|(0))==1;
   if ($3411) { label = 408; break; } else { label = 409; break; }
  case 408: 
   var $3413=$1;
   var $3414=$1;
   var $3415=(($3414+56)|0);
   var $3416=HEAP32[(($3415)>>2)];
   var $3417=$3416 & 511;
   var $3418=$3417 << 23;
   var $3419=66 | $3418;
   _genop($3413, $3419);
   var $3420=$1;
   _push_($3420);
   label = 410; break;
  case 409: 
   var $3422=$1;
   var $3423=$2;
   var $3424=(($3423)|0);
   var $3425=HEAP32[(($3424)>>2)];
   var $3426=(($3425)|0);
   var $3427=HEAP32[(($3426)>>2)];
   _codegen($3422, $3427, 1);
   label = 410; break;
  case 410: 
   label = 411; break;
  case 411: 
   var $3430=$2;
   var $3431=(($3430+4)|0);
   var $3432=HEAP32[(($3431)>>2)];
   var $3433=(($3432)|0);
   var $3434=HEAP32[(($3433)>>2)];
   var $3435=(($3434)|(0))!=0;
   if ($3435) { label = 412; break; } else { label = 413; break; }
  case 412: 
   var $3437=$1;
   var $3438=$2;
   var $3439=(($3438+4)|0);
   var $3440=HEAP32[(($3439)>>2)];
   var $3441=(($3440)|0);
   var $3442=HEAP32[(($3441)>>2)];
   _codegen($3437, $3442, 1);
   label = 414; break;
  case 413: 
   var $3444=$1;
   var $3445=$1;
   var $3446=(($3445+56)|0);
   var $3447=HEAP32[(($3446)>>2)];
   var $3448=$3447 & 511;
   var $3449=$3448 << 23;
   var $3450=5 | $3449;
   _genop($3444, $3450);
   var $3451=$1;
   _push_($3451);
   label = 414; break;
  case 414: 
   var $3453=$1;
   var $3454=(($3453+56)|0);
   var $3455=HEAP32[(($3454)>>2)];
   var $3456=((($3455)-(1))|0);
   HEAP32[(($3454)>>2)]=$3456;
   var $3457=$1;
   var $3458=(($3457+56)|0);
   var $3459=HEAP32[(($3458)>>2)];
   var $3460=((($3459)-(1))|0);
   HEAP32[(($3458)>>2)]=$3460;
   var $3461=$1;
   var $3462=$2;
   var $3463=(($3462)|0);
   var $3464=HEAP32[(($3463)>>2)];
   var $3465=(($3464+4)|0);
   var $3466=HEAP32[(($3465)>>2)];
   var $3467=$3466;
   var $3468=(($3467) & 65535);
   var $3469=_new_msym($3461, $3468);
   $idx78=$3469;
   var $3470=$1;
   var $3471=$1;
   var $3472=(($3471+56)|0);
   var $3473=HEAP32[(($3472)>>2)];
   var $3474=$3473 & 511;
   var $3475=$3474 << 23;
   var $3476=67 | $3475;
   var $3477=$idx78;
   var $3478=$3477 & 511;
   var $3479=$3478 << 14;
   var $3480=$3476 | $3479;
   _genop($3470, $3480);
   var $3481=$1;
   var $3482=$2;
   var $3483=(($3482+4)|0);
   var $3484=HEAP32[(($3483)>>2)];
   var $3485=(($3484+4)|0);
   var $3486=HEAP32[(($3485)>>2)];
   var $3487=(($3486)|0);
   var $3488=HEAP32[(($3487)>>2)];
   var $3489=_scope_body($3481, $3488);
   $idx78=$3489;
   var $3490=$1;
   var $3491=$1;
   var $3492=(($3491+56)|0);
   var $3493=HEAP32[(($3492)>>2)];
   var $3494=$3493 & 511;
   var $3495=$3494 << 23;
   var $3496=69 | $3495;
   var $3497=$idx78;
   var $3498=$3497 & 65535;
   var $3499=$3498 << 7;
   var $3500=$3496 | $3499;
   _genop($3490, $3500);
   var $3501=$3;
   var $3502=(($3501)|(0))!=0;
   if ($3502) { label = 415; break; } else { label = 416; break; }
  case 415: 
   var $3504=$1;
   _push_($3504);
   label = 416; break;
  case 416: 
   label = 437; break;
  case 417: 
   var $3507=$2;
   var $3508=(($3507)|0);
   var $3509=HEAP32[(($3508)>>2)];
   var $3510=(($3509)|0);
   var $3511=HEAP32[(($3510)>>2)];
   var $3512=(($3511)|(0))==0;
   if ($3512) { label = 418; break; } else { label = 419; break; }
  case 418: 
   var $3514=$1;
   var $3515=$1;
   var $3516=(($3515+56)|0);
   var $3517=HEAP32[(($3516)>>2)];
   var $3518=$3517 & 511;
   var $3519=$3518 << 23;
   var $3520=5 | $3519;
   _genop($3514, $3520);
   var $3521=$1;
   _push_($3521);
   label = 423; break;
  case 419: 
   var $3523=$2;
   var $3524=(($3523)|0);
   var $3525=HEAP32[(($3524)>>2)];
   var $3526=(($3525)|0);
   var $3527=HEAP32[(($3526)>>2)];
   var $3528=(($3527)|(0))==1;
   if ($3528) { label = 420; break; } else { label = 421; break; }
  case 420: 
   var $3530=$1;
   var $3531=$1;
   var $3532=(($3531+56)|0);
   var $3533=HEAP32[(($3532)>>2)];
   var $3534=$3533 & 511;
   var $3535=$3534 << 23;
   var $3536=66 | $3535;
   _genop($3530, $3536);
   var $3537=$1;
   _push_($3537);
   label = 422; break;
  case 421: 
   var $3539=$1;
   var $3540=$2;
   var $3541=(($3540)|0);
   var $3542=HEAP32[(($3541)>>2)];
   var $3543=(($3542)|0);
   var $3544=HEAP32[(($3543)>>2)];
   _codegen($3539, $3544, 1);
   label = 422; break;
  case 422: 
   label = 423; break;
  case 423: 
   var $3547=$1;
   var $3548=(($3547+56)|0);
   var $3549=HEAP32[(($3548)>>2)];
   var $3550=((($3549)-(1))|0);
   HEAP32[(($3548)>>2)]=$3550;
   var $3551=$1;
   var $3552=$2;
   var $3553=(($3552)|0);
   var $3554=HEAP32[(($3553)>>2)];
   var $3555=(($3554+4)|0);
   var $3556=HEAP32[(($3555)>>2)];
   var $3557=$3556;
   var $3558=(($3557) & 65535);
   var $3559=_new_msym($3551, $3558);
   $idx79=$3559;
   var $3560=$1;
   var $3561=$1;
   var $3562=(($3561+56)|0);
   var $3563=HEAP32[(($3562)>>2)];
   var $3564=$3563 & 511;
   var $3565=$3564 << 23;
   var $3566=68 | $3565;
   var $3567=$idx79;
   var $3568=$3567 & 511;
   var $3569=$3568 << 14;
   var $3570=$3566 | $3569;
   _genop($3560, $3570);
   var $3571=$1;
   var $3572=$2;
   var $3573=(($3572+4)|0);
   var $3574=HEAP32[(($3573)>>2)];
   var $3575=(($3574)|0);
   var $3576=HEAP32[(($3575)>>2)];
   var $3577=_scope_body($3571, $3576);
   $idx79=$3577;
   var $3578=$1;
   var $3579=$1;
   var $3580=(($3579+56)|0);
   var $3581=HEAP32[(($3580)>>2)];
   var $3582=$3581 & 511;
   var $3583=$3582 << 23;
   var $3584=69 | $3583;
   var $3585=$idx79;
   var $3586=$3585 & 65535;
   var $3587=$3586 << 7;
   var $3588=$3584 | $3587;
   _genop($3578, $3588);
   var $3589=$3;
   var $3590=(($3589)|(0))!=0;
   if ($3590) { label = 424; break; } else { label = 425; break; }
  case 424: 
   var $3592=$1;
   _push_($3592);
   label = 425; break;
  case 425: 
   label = 437; break;
  case 426: 
   var $3595=$1;
   var $3596=$2;
   var $3597=(($3596)|0);
   var $3598=HEAP32[(($3597)>>2)];
   _codegen($3595, $3598, 1);
   var $3599=$1;
   var $3600=(($3599+56)|0);
   var $3601=HEAP32[(($3600)>>2)];
   var $3602=((($3601)-(1))|0);
   HEAP32[(($3600)>>2)]=$3602;
   var $3603=$1;
   var $3604=$1;
   var $3605=(($3604+56)|0);
   var $3606=HEAP32[(($3605)>>2)];
   var $3607=$3606 & 511;
   var $3608=$3607 << 23;
   var $3609=71 | $3608;
   var $3610=$1;
   var $3611=(($3610+56)|0);
   var $3612=HEAP32[(($3611)>>2)];
   var $3613=$3612 & 511;
   var $3614=$3613 << 14;
   var $3615=$3609 | $3614;
   _genop($3603, $3615);
   var $3616=$1;
   var $3617=$2;
   var $3618=(($3617+4)|0);
   var $3619=HEAP32[(($3618)>>2)];
   var $3620=(($3619)|0);
   var $3621=HEAP32[(($3620)>>2)];
   var $3622=_scope_body($3616, $3621);
   $idx80=$3622;
   var $3623=$1;
   var $3624=$1;
   var $3625=(($3624+56)|0);
   var $3626=HEAP32[(($3625)>>2)];
   var $3627=$3626 & 511;
   var $3628=$3627 << 23;
   var $3629=69 | $3628;
   var $3630=$idx80;
   var $3631=$3630 & 65535;
   var $3632=$3631 << 7;
   var $3633=$3629 | $3632;
   _genop($3623, $3633);
   var $3634=$3;
   var $3635=(($3634)|(0))!=0;
   if ($3635) { label = 427; break; } else { label = 428; break; }
  case 427: 
   var $3637=$1;
   _push_($3637);
   label = 428; break;
  case 428: 
   label = 437; break;
  case 429: 
   var $3640=$1;
   var $3641=$2;
   var $3642=(($3641)|0);
   var $3643=HEAP32[(($3642)>>2)];
   var $3644=$3643;
   var $3645=(($3644) & 65535);
   var $3646=_new_msym($3640, $3645);
   $sym81=$3646;
   var $3647=$1;
   var $3648=$2;
   var $3649=(($3648+4)|0);
   var $3650=HEAP32[(($3649)>>2)];
   var $3651=_lambda_body($3647, $3650, 0);
   $idx82=$3651;
   var $3652=$1;
   var $3653=$1;
   var $3654=(($3653+56)|0);
   var $3655=HEAP32[(($3654)>>2)];
   var $3656=$3655 & 511;
   var $3657=$3656 << 23;
   var $3658=72 | $3657;
   _genop($3652, $3658);
   var $3659=$1;
   _push_($3659);
   var $3660=$1;
   var $3661=$1;
   var $3662=(($3661+56)|0);
   var $3663=HEAP32[(($3662)>>2)];
   var $3664=$3663 & 511;
   var $3665=$3664 << 23;
   var $3666=64 | $3665;
   var $3667=$idx82;
   var $3668=$3667 & 16383;
   var $3669=$3668 << 9;
   var $3670=$3669 | 128;
   var $3671=$3666 | $3670;
   _genop($3660, $3671);
   var $3672=$1;
   var $3673=(($3672+56)|0);
   var $3674=HEAP32[(($3673)>>2)];
   var $3675=((($3674)-(1))|0);
   HEAP32[(($3673)>>2)]=$3675;
   var $3676=$1;
   var $3677=$1;
   var $3678=(($3677+56)|0);
   var $3679=HEAP32[(($3678)>>2)];
   var $3680=$3679 & 511;
   var $3681=$3680 << 23;
   var $3682=70 | $3681;
   var $3683=$sym81;
   var $3684=$3683 & 511;
   var $3685=$3684 << 14;
   var $3686=$3682 | $3685;
   _genop($3676, $3686);
   var $3687=$3;
   var $3688=(($3687)|(0))!=0;
   if ($3688) { label = 430; break; } else { label = 431; break; }
  case 430: 
   var $3690=$1;
   var $3691=$1;
   var $3692=(($3691+56)|0);
   var $3693=HEAP32[(($3692)>>2)];
   var $3694=$3693 & 511;
   var $3695=$3694 << 23;
   var $3696=5 | $3695;
   _genop($3690, $3696);
   var $3697=$1;
   _push_($3697);
   label = 431; break;
  case 431: 
   label = 437; break;
  case 432: 
   var $3700=$2;
   var $3701=(($3700)|0);
   var $3702=HEAP32[(($3701)>>2)];
   $recv=$3702;
   var $3703=$1;
   var $3704=$2;
   var $3705=(($3704+4)|0);
   var $3706=HEAP32[(($3705)>>2)];
   var $3707=(($3706)|0);
   var $3708=HEAP32[(($3707)>>2)];
   var $3709=$3708;
   var $3710=(($3709) & 65535);
   var $3711=_new_msym($3703, $3710);
   $sym83=$3711;
   var $3712=$1;
   var $3713=$2;
   var $3714=(($3713+4)|0);
   var $3715=HEAP32[(($3714)>>2)];
   var $3716=(($3715+4)|0);
   var $3717=HEAP32[(($3716)>>2)];
   var $3718=_lambda_body($3712, $3717, 0);
   $idx84=$3718;
   var $3719=$1;
   var $3720=$recv;
   _codegen($3719, $3720, 1);
   var $3721=$1;
   var $3722=(($3721+56)|0);
   var $3723=HEAP32[(($3722)>>2)];
   var $3724=((($3723)-(1))|0);
   HEAP32[(($3722)>>2)]=$3724;
   var $3725=$1;
   var $3726=$1;
   var $3727=(($3726+56)|0);
   var $3728=HEAP32[(($3727)>>2)];
   var $3729=$3728 & 511;
   var $3730=$3729 << 23;
   var $3731=71 | $3730;
   var $3732=$1;
   var $3733=(($3732+56)|0);
   var $3734=HEAP32[(($3733)>>2)];
   var $3735=$3734 & 511;
   var $3736=$3735 << 14;
   var $3737=$3731 | $3736;
   _genop($3725, $3737);
   var $3738=$1;
   _push_($3738);
   var $3739=$1;
   var $3740=$1;
   var $3741=(($3740+56)|0);
   var $3742=HEAP32[(($3741)>>2)];
   var $3743=$3742 & 511;
   var $3744=$3743 << 23;
   var $3745=64 | $3744;
   var $3746=$idx84;
   var $3747=$3746 & 16383;
   var $3748=$3747 << 9;
   var $3749=$3748 | 128;
   var $3750=$3745 | $3749;
   _genop($3739, $3750);
   var $3751=$1;
   var $3752=(($3751+56)|0);
   var $3753=HEAP32[(($3752)>>2)];
   var $3754=((($3753)-(1))|0);
   HEAP32[(($3752)>>2)]=$3754;
   var $3755=$1;
   var $3756=$1;
   var $3757=(($3756+56)|0);
   var $3758=HEAP32[(($3757)>>2)];
   var $3759=$3758 & 511;
   var $3760=$3759 << 23;
   var $3761=70 | $3760;
   var $3762=$sym83;
   var $3763=$3762 & 511;
   var $3764=$3763 << 14;
   var $3765=$3761 | $3764;
   _genop($3755, $3765);
   var $3766=$3;
   var $3767=(($3766)|(0))!=0;
   if ($3767) { label = 433; break; } else { label = 434; break; }
  case 433: 
   var $3769=$1;
   var $3770=$1;
   var $3771=(($3770+56)|0);
   var $3772=HEAP32[(($3771)>>2)];
   var $3773=$3772 & 511;
   var $3774=$3773 << 23;
   var $3775=5 | $3774;
   _genop($3769, $3775);
   var $3776=$1;
   _push_($3776);
   label = 434; break;
  case 434: 
   label = 437; break;
  case 435: 
   var $3779=$1;
   var $3780=$2;
   _codegen($3779, $3780, 0);
   label = 437; break;
  case 436: 
   label = 437; break;
  case 437: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _new_label($s) {
 var label = 0;
 var $1;
 $1=$s;
 var $2=$1;
 var $3=(($2+60)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$1;
 var $6=(($5+64)|0);
 HEAP32[(($6)>>2)]=$4;
 var $7=$1;
 var $8=(($7+60)|0);
 var $9=HEAP32[(($8)>>2)];
 return $9;
}
function _genop($s, $i) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$s;
   $2=$i;
   var $3=$1;
   var $4=(($3+60)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$1;
   var $7=(($6+96)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($5)|(0))==(($8)|(0));
   if ($9) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $11=$1;
   var $12=(($11+96)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=($13<<1);
   HEAP32[(($12)>>2)]=$14;
   var $15=$1;
   var $16=$1;
   var $17=(($16+88)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$18;
   var $20=$1;
   var $21=(($20+96)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=($22<<2);
   var $24=_codegen_realloc($15, $19, $23);
   var $25=$24;
   var $26=$1;
   var $27=(($26+88)|0);
   HEAP32[(($27)>>2)]=$25;
   var $28=$1;
   var $29=(($28+92)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30)|(0))!=0;
   if ($31) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $33=$1;
   var $34=$1;
   var $35=(($34+92)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=$36;
   var $38=$1;
   var $39=(($38+96)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=($40<<1);
   var $42=_codegen_realloc($33, $37, $41);
   var $43=$42;
   var $44=$1;
   var $45=(($44+92)|0);
   HEAP32[(($45)>>2)]=$43;
   label = 4; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $48=$2;
   var $49=$1;
   var $50=(($49+60)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$1;
   var $53=(($52+88)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($54+($51<<2))|0);
   HEAP32[(($55)>>2)]=$48;
   var $56=$1;
   var $57=(($56+92)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58)|(0))!=0;
   if ($59) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $61=$1;
   var $62=(($61+84)|0);
   var $63=HEAP16[(($62)>>1)];
   var $64=$1;
   var $65=(($64+60)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=$1;
   var $68=(($67+92)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($69+($66<<1))|0);
   HEAP16[(($70)>>1)]=$63;
   label = 7; break;
  case 7: 
   var $72=$1;
   var $73=(($72+60)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=((($74)+(1))|0);
   HEAP32[(($73)>>2)]=$75;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _push_($s) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$s;
   var $2=$1;
   var $3=(($2+56)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0)) > 511;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   _codegen_error($7, ((99060)|0));
   label = 3; break;
  case 3: 
   var $9=$1;
   var $10=(($9+56)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=((($11)+(1))|0);
   HEAP32[(($10)>>2)]=$12;
   label = 4; break;
  case 4: 
   var $14=$1;
   var $15=(($14+56)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$1;
   var $18=(($17+116)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($16)|(0)) > (($19)|(0));
   if ($20) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $22=$1;
   var $23=(($22+56)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$1;
   var $26=(($25+116)|0);
   HEAP32[(($26)>>2)]=$24;
   label = 6; break;
  case 6: 
   label = 7; break;
  case 7: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _loop_push($s, $t) {
 var label = 0;
 var $1;
 var $2;
 var $p;
 $1=$s;
 $2=$t;
 var $3=$1;
 var $4=_codegen_palloc($3, 28);
 var $5=$4;
 $p=$5;
 var $6=$2;
 var $7=$p;
 var $8=(($7)|0);
 HEAP32[(($8)>>2)]=$6;
 var $9=$p;
 var $10=(($9+12)|0);
 HEAP32[(($10)>>2)]=0;
 var $11=$p;
 var $12=(($11+8)|0);
 HEAP32[(($12)>>2)]=0;
 var $13=$p;
 var $14=(($13+4)|0);
 HEAP32[(($14)>>2)]=0;
 var $15=$1;
 var $16=(($15+72)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$p;
 var $19=(($18+24)|0);
 HEAP32[(($19)>>2)]=$17;
 var $20=$1;
 var $21=(($20+76)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$p;
 var $24=(($23+20)|0);
 HEAP32[(($24)>>2)]=$22;
 var $25=$1;
 var $26=(($25+56)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=$p;
 var $29=(($28+16)|0);
 HEAP32[(($29)>>2)]=$27;
 var $30=$p;
 var $31=$1;
 var $32=(($31+72)|0);
 HEAP32[(($32)>>2)]=$30;
 var $33=$p;
 return $33;
}
function _dispatch($s, $pc) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $diff;
   var $i;
   var $c;
   $1=$s;
   $2=$pc;
   var $3=$1;
   var $4=(($3+60)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$2;
   var $7=((($5)-($6))|0);
   $diff=$7;
   var $8=$2;
   var $9=$1;
   var $10=(($9+88)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11+($8<<2))|0);
   var $13=HEAP32[(($12)>>2)];
   $i=$13;
   var $14=$i;
   var $15=$14 & 127;
   $c=$15;
   var $16=$1;
   var $17=(($16+60)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$1;
   var $20=(($19+64)|0);
   HEAP32[(($20)>>2)]=$18;
   var $21=$c;
   if ((($21)|(0))==23 | (($21)|(0))==24 | (($21)|(0))==25 | (($21)|(0))==26) {
    label = 2; break;
   }
   else {
   label = 3; break;
   }
  case 2: 
   label = 4; break;
  case 3: 
   var $24=HEAP32[((_stderr)>>2)];
   var $25=_fprintf($24, ((99592)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $26=$1;
   _scope_error($26);
   label = 4; break;
  case 4: 
   var $28=$c;
   var $29=$28 & 127;
   var $30=$i;
   var $31=$30 >>> 23;
   var $32=$31 & 511;
   var $33=$32 & 511;
   var $34=$33 << 23;
   var $35=$29 | $34;
   var $36=$diff;
   var $37=((($36)+(32767))|0);
   var $38=$37 & 65535;
   var $39=$38 << 7;
   var $40=$35 | $39;
   var $41=$2;
   var $42=$1;
   var $43=(($42+88)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=(($44+($41<<2))|0);
   HEAP32[(($45)>>2)]=$40;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _new_msym($s, $sym) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $i;
   var $len;
   $2=$s;
   $3=$sym;
   var $4=$2;
   var $5=(($4+100)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6+40)|0);
   var $8=HEAP32[(($7)>>2)];
   $len=$8;
   var $9=$len;
   var $10=(($9)>>>(0)) > 256;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $len=256;
   label = 3; break;
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $14=$i;
   var $15=$len;
   var $16=(($14)>>>(0)) < (($15)>>>(0));
   if ($16) { label = 5; break; } else { label = 11; break; }
  case 5: 
   var $18=$i;
   var $19=$2;
   var $20=(($19+100)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21+20)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23+($18<<1))|0);
   var $25=HEAP16[(($24)>>1)];
   var $26=(($25 << 16) >> 16);
   var $27=$3;
   var $28=(($27 << 16) >> 16);
   var $29=(($26)|(0))==(($28)|(0));
   if ($29) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $31=$i;
   $1=$31;
   label = 16; break;
  case 7: 
   var $33=$i;
   var $34=$2;
   var $35=(($34+100)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36+20)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38+($33<<1))|0);
   var $40=HEAP16[(($39)>>1)];
   var $41=(($40 << 16) >> 16);
   var $42=(($41)|(0))==0;
   if ($42) { label = 8; break; } else { label = 9; break; }
  case 8: 
   label = 11; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $46=$i;
   var $47=((($46)+(1))|0);
   $i=$47;
   label = 4; break;
  case 11: 
   var $49=$i;
   var $50=(($49)|(0))==256;
   if ($50) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $52=$2;
   _codegen_error($52, ((99880)|0));
   label = 13; break;
  case 13: 
   var $54=$3;
   var $55=$i;
   var $56=$2;
   var $57=(($56+100)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58+20)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($60+($55<<1))|0);
   HEAP16[(($61)>>1)]=$54;
   var $62=$i;
   var $63=$2;
   var $64=(($63+100)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65+40)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($62)|(0))==(($67)|(0));
   if ($68) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $70=$2;
   var $71=(($70+100)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72+40)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=((($74)+(1))|0);
   HEAP32[(($73)>>2)]=$75;
   label = 15; break;
  case 15: 
   var $77=$i;
   $1=$77;
   label = 16; break;
  case 16: 
   var $79=$1;
   return $79;
  default: assert(0, "bad label: " + label);
 }
}
function _dispatch_linked($s, $pc) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $i;
   var $pos;
   $1=$s;
   $2=$pc;
   var $3=$2;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 7; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $8=$2;
   var $9=$1;
   var $10=(($9+88)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11+($8<<2))|0);
   var $13=HEAP32[(($12)>>2)];
   $i=$13;
   var $14=$i;
   var $15=$14 >>> 7;
   var $16=$15 & 65535;
   var $17=((($16)-(32767))|0);
   $pos=$17;
   var $18=$1;
   var $19=$2;
   _dispatch($18, $19);
   var $20=$pos;
   var $21=(($20)|(0))!=0;
   if ($21) { label = 6; break; } else { label = 5; break; }
  case 5: 
   label = 7; break;
  case 6: 
   var $24=$pos;
   $2=$24;
   label = 4; break;
  case 7: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _gen_assignment($s, $node, $sp, $val) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $idx;
   var $type;
   var $lv;
   var $up;
   $1=$s;
   $2=$node;
   $3=$sp;
   $4=$val;
   var $5=$2;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7;
   $type=$8;
   var $9=$2;
   var $10=(($9+4)|0);
   var $11=HEAP32[(($10)>>2)];
   $2=$11;
   var $12=$type;
   if ((($12)|(0))==41) {
    label = 2; break;
   }
   else if ((($12)|(0))==39) {
    label = 3; break;
   }
   else if ((($12)|(0))==42) {
    label = 14; break;
   }
   else if ((($12)|(0))==44) {
    label = 15; break;
   }
   else if ((($12)|(0))==43) {
    label = 16; break;
   }
   else if ((($12)|(0))==77) {
    label = 17; break;
   }
   else if ((($12)|(0))==29) {
    label = 18; break;
   }
   else {
   label = 21; break;
   }
  case 2: 
   var $14=$1;
   var $15=$2;
   var $16=$15;
   var $17=(($16) & 65535);
   var $18=_new_sym925($14, $17);
   $idx=$18;
   var $19=$1;
   var $20=$3;
   var $21=$20 & 511;
   var $22=$21 << 23;
   var $23=10 | $22;
   var $24=$idx;
   var $25=$24 & 65535;
   var $26=$25 << 7;
   var $27=$23 | $26;
   var $28=$4;
   _genop_peep($19, $27, $28);
   label = 22; break;
  case 3: 
   var $30=$1;
   var $31=$2;
   var $32=$31;
   var $33=(($32) & 65535);
   var $34=_lv_idx($30, $33);
   $idx=$34;
   var $35=$idx;
   var $36=(($35)|(0)) > 0;
   if ($36) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $38=$idx;
   var $39=$3;
   var $40=(($38)|(0))!=(($39)|(0));
   if ($40) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $42=$1;
   var $43=$idx;
   var $44=$43 & 511;
   var $45=$44 << 23;
   var $46=1 | $45;
   var $47=$3;
   var $48=$47 & 511;
   var $49=$48 << 14;
   var $50=$46 | $49;
   var $51=$4;
   _genop_peep($42, $50, $51);
   label = 6; break;
  case 6: 
   label = 22; break;
  case 7: 
   $lv=0;
   var $54=$1;
   var $55=(($54+48)|0);
   var $56=HEAP32[(($55)>>2)];
   $up=$56;
   label = 8; break;
  case 8: 
   var $58=$up;
   var $59=(($58)|(0))!=0;
   if ($59) { label = 9; break; } else { label = 12; break; }
  case 9: 
   var $61=$up;
   var $62=$2;
   var $63=$62;
   var $64=(($63) & 65535);
   var $65=_lv_idx($61, $64);
   $idx=$65;
   var $66=$idx;
   var $67=(($66)|(0)) > 0;
   if ($67) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $69=$1;
   var $70=$3;
   var $71=$70 & 511;
   var $72=$71 << 23;
   var $73=22 | $72;
   var $74=$idx;
   var $75=$74 & 511;
   var $76=$75 << 14;
   var $77=$73 | $76;
   var $78=$lv;
   var $79=$78 & 127;
   var $80=$79 << 7;
   var $81=$77 | $80;
   var $82=$4;
   _genop_peep($69, $81, $82);
   label = 12; break;
  case 11: 
   var $84=$lv;
   var $85=((($84)+(1))|0);
   $lv=$85;
   var $86=$up;
   var $87=(($86+48)|0);
   var $88=HEAP32[(($87)>>2)];
   $up=$88;
   label = 8; break;
  case 12: 
   label = 13; break;
  case 13: 
   label = 22; break;
  case 14: 
   var $92=$1;
   var $93=$2;
   var $94=$93;
   var $95=(($94) & 65535);
   var $96=_new_sym925($92, $95);
   $idx=$96;
   var $97=$1;
   var $98=$3;
   var $99=$98 & 511;
   var $100=$99 << 23;
   var $101=14 | $100;
   var $102=$idx;
   var $103=$102 & 65535;
   var $104=$103 << 7;
   var $105=$101 | $104;
   var $106=$4;
   _genop_peep($97, $105, $106);
   label = 22; break;
  case 15: 
   var $108=$1;
   var $109=$2;
   var $110=$109;
   var $111=(($110) & 65535);
   var $112=_new_sym925($108, $111);
   $idx=$112;
   var $113=$1;
   var $114=$3;
   var $115=$114 & 511;
   var $116=$115 << 23;
   var $117=16 | $116;
   var $118=$idx;
   var $119=$118 & 65535;
   var $120=$119 << 7;
   var $121=$117 | $120;
   var $122=$4;
   _genop_peep($113, $121, $122);
   label = 22; break;
  case 16: 
   var $124=$1;
   var $125=$2;
   var $126=$125;
   var $127=(($126) & 65535);
   var $128=_new_sym925($124, $127);
   $idx=$128;
   var $129=$1;
   var $130=$3;
   var $131=$130 & 511;
   var $132=$131 << 23;
   var $133=18 | $132;
   var $134=$idx;
   var $135=$134 & 65535;
   var $136=$135 << 7;
   var $137=$133 | $136;
   var $138=$4;
   _genop_peep($129, $137, $138);
   label = 22; break;
  case 17: 
   var $140=$1;
   var $141=$2;
   var $142=(($141+4)|0);
   var $143=HEAP32[(($142)>>2)];
   var $144=$143;
   var $145=(($144) & 65535);
   var $146=_new_sym925($140, $145);
   $idx=$146;
   var $147=$1;
   var $148=$1;
   var $149=(($148+56)|0);
   var $150=HEAP32[(($149)>>2)];
   var $151=$150 & 511;
   var $152=$151 << 23;
   var $153=1 | $152;
   var $154=$3;
   var $155=$154 & 511;
   var $156=$155 << 14;
   var $157=$153 | $156;
   _genop_peep($147, $157, 0);
   var $158=$1;
   _push_($158);
   var $159=$1;
   var $160=$2;
   var $161=(($160)|0);
   var $162=HEAP32[(($161)>>2)];
   _codegen($159, $162, 1);
   var $163=$1;
   var $164=(($163+56)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166=((($165)-(2))|0);
   HEAP32[(($164)>>2)]=$166;
   var $167=$1;
   var $168=$1;
   var $169=(($168+56)|0);
   var $170=HEAP32[(($169)>>2)];
   var $171=$170 & 511;
   var $172=$171 << 23;
   var $173=20 | $172;
   var $174=$idx;
   var $175=$174 & 65535;
   var $176=$175 << 7;
   var $177=$173 | $176;
   var $178=$4;
   _genop_peep($167, $177, $178);
   label = 22; break;
  case 18: 
   var $180=$1;
   _push_($180);
   var $181=$1;
   var $182=$2;
   var $183=$1;
   var $184=$2;
   var $185=(($184+4)|0);
   var $186=HEAP32[(($185)>>2)];
   var $187=(($186)|0);
   var $188=HEAP32[(($187)>>2)];
   var $189=$188;
   var $190=(($189) & 65535);
   var $191=_attrsym($183, $190);
   var $192=$3;
   _gen_call($181, $182, $191, $192, 0);
   var $193=$1;
   var $194=(($193+56)|0);
   var $195=HEAP32[(($194)>>2)];
   var $196=((($195)-(1))|0);
   HEAP32[(($194)>>2)]=$196;
   var $197=$4;
   var $198=(($197)|(0))!=0;
   if ($198) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $200=$1;
   var $201=$1;
   var $202=(($201+56)|0);
   var $203=HEAP32[(($202)>>2)];
   var $204=$203 & 511;
   var $205=$204 << 23;
   var $206=1 | $205;
   var $207=$3;
   var $208=$207 & 511;
   var $209=$208 << 14;
   var $210=$206 | $209;
   var $211=$4;
   _genop_peep($200, $210, $211);
   label = 20; break;
  case 20: 
   label = 22; break;
  case 21: 
   var $214=$type;
   var $215=_printf(((100660)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$214,tempInt));
   label = 22; break;
  case 22: 
   var $217=$4;
   var $218=(($217)|(0))!=0;
   if ($218) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $220=$1;
   _push_($220);
   label = 24; break;
  case 24: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _loop_pop($s, $val) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$s;
   $2=$val;
   var $3=$2;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$1;
   var $7=$1;
   var $8=(($7+56)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$9 & 511;
   var $11=$10 << 23;
   var $12=5 | $11;
   _genop($6, $12);
   label = 3; break;
  case 3: 
   var $14=$1;
   var $15=$1;
   var $16=(($15+72)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17+12)|0);
   var $19=HEAP32[(($18)>>2)];
   _dispatch_linked($14, $19);
   var $20=$1;
   var $21=(($20+72)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+24)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$1;
   var $26=(($25+72)|0);
   HEAP32[(($26)>>2)]=$24;
   var $27=$2;
   var $28=(($27)|(0))!=0;
   if ($28) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $30=$1;
   _push_($30);
   label = 5; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _scope_body($s, $tree) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $scope;
   var $idx;
   $1=$s;
   $2=$tree;
   var $3=$1;
   var $4=(($3)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$1;
   var $7=$2;
   var $8=(($7)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=_scope_new($5, $6, $9);
   $scope=$10;
   var $11=$scope;
   var $12=(($11+124)|0);
   var $13=HEAP32[(($12)>>2)];
   $idx=$13;
   var $14=$scope;
   var $15=$2;
   var $16=(($15+4)|0);
   var $17=HEAP32[(($16)>>2)];
   _codegen($14, $17, 1);
   var $18=$1;
   var $19=(($18+88)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|(0))!=0;
   if ($21) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $23=$scope;
   _genop($23, 74);
   label = 7; break;
  case 3: 
   var $25=$scope;
   var $26=(($25+116)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27)|(0))==0;
   if ($28) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $30=$scope;
   _genop($30, 5);
   var $31=$scope;
   _genop($31, 41);
   label = 6; break;
  case 5: 
   var $33=$scope;
   var $34=$scope;
   var $35=(($34+56)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=$36 & 511;
   var $38=$37 << 23;
   var $39=41 | $38;
   _genop_peep($33, $39, 0);
   label = 6; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $42=$scope;
   _scope_finish($42);
   var $43=$idx;
   var $44=$1;
   var $45=(($44+124)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=((($43)-($46))|0);
   return $47;
  default: assert(0, "bad label: " + label);
 }
}
function _genop_peep($s, $i, $val) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $i0;
   var $c1;
   var $c0;
   var $c;
   var $i1;
   $1=$s;
   $2=$i;
   $3=$val;
   var $4=$1;
   var $5=(($4+64)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$1;
   var $8=(($7+60)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($6)|(0))!=(($9)|(0));
   if ($10) { label = 2; break; } else { label = 89; break; }
  case 2: 
   var $12=$1;
   var $13=(($12+60)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0)) > 0;
   if ($15) { label = 3; break; } else { label = 89; break; }
  case 3: 
   var $17=$1;
   var $18=(($17+60)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=((($19)-(1))|0);
   var $21=$1;
   var $22=(($21+88)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23+($20<<2))|0);
   var $25=HEAP32[(($24)>>2)];
   $i0=$25;
   var $26=$2;
   var $27=$26 & 127;
   $c1=$27;
   var $28=$i0;
   var $29=$28 & 127;
   $c0=$29;
   var $30=$c1;
   if ((($30)|(0))==1) {
    label = 4; break;
   }
   else if ((($30)|(0))==14 | (($30)|(0))==16 | (($30)|(0))==18 | (($30)|(0))==20 | (($30)|(0))==10) {
    label = 39; break;
   }
   else if ((($30)|(0))==22) {
    label = 46; break;
   }
   else if ((($30)|(0))==31) {
    label = 53; break;
   }
   else if ((($30)|(0))==28) {
    label = 56; break;
   }
   else if ((($30)|(0))==41) {
    label = 59; break;
   }
   else if ((($30)|(0))==44 | (($30)|(0))==46) {
    label = 70; break;
   }
   else if ((($30)|(0))==62) {
    label = 81; break;
   }
   else {
   label = 87; break;
   }
  case 4: 
   var $32=$2;
   var $33=$32 >>> 23;
   var $34=$33 & 511;
   var $35=$2;
   var $36=$35 >>> 14;
   var $37=$36 & 511;
   var $38=(($34)|(0))==(($37)|(0));
   if ($38) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 90; break;
  case 6: 
   var $41=$3;
   var $42=(($41)|(0))!=0;
   if ($42) { label = 7; break; } else { label = 8; break; }
  case 7: 
   label = 88; break;
  case 8: 
   var $45=$c0;
   if ((($45)|(0))==1) {
    label = 9; break;
   }
   else if ((($45)|(0))==3) {
    label = 17; break;
   }
   else if ((($45)|(0))==55 | (($45)|(0))==63 | (($45)|(0))==65 | (($45)|(0))==58 | (($45)|(0))==21) {
    label = 21; break;
   }
   else if ((($45)|(0))==4 | (($45)|(0))==9 | (($45)|(0))==13 | (($45)|(0))==15 | (($45)|(0))==17 | (($45)|(0))==11 | (($45)|(0))==2 | (($45)|(0))==61) {
    label = 25; break;
   }
   else if ((($45)|(0))==71) {
    label = 29; break;
   }
   else if ((($45)|(0))==5 | (($45)|(0))==6 | (($45)|(0))==7 | (($45)|(0))==8 | (($45)|(0))==66) {
    label = 33; break;
   }
   else {
   label = 37; break;
   }
  case 9: 
   var $47=$2;
   var $48=$47 >>> 14;
   var $49=$48 & 511;
   var $50=$i0;
   var $51=$50 >>> 23;
   var $52=$51 & 511;
   var $53=(($49)|(0))==(($52)|(0));
   if ($53) { label = 10; break; } else { label = 13; break; }
  case 10: 
   var $55=$2;
   var $56=$55 >>> 23;
   var $57=$56 & 511;
   var $58=$i0;
   var $59=$58 >>> 14;
   var $60=$59 & 511;
   var $61=(($57)|(0))==(($60)|(0));
   if ($61) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $63=$2;
   var $64=$63 >>> 23;
   var $65=$64 & 511;
   var $66=$1;
   var $67=(($66+112)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=(($65)|(0)) >= (($68)|(0));
   if ($69) { label = 12; break; } else { label = 13; break; }
  case 12: 
   label = 90; break;
  case 13: 
   var $72=$2;
   var $73=$72 >>> 14;
   var $74=$73 & 511;
   var $75=$i0;
   var $76=$75 >>> 23;
   var $77=$76 & 511;
   var $78=(($74)|(0))==(($77)|(0));
   if ($78) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $80=$i0;
   var $81=$80 >>> 23;
   var $82=$81 & 511;
   var $83=$1;
   var $84=(($83+112)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($82)|(0)) >= (($85)|(0));
   if ($86) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $88=$2;
   var $89=$88 >>> 23;
   var $90=$89 & 511;
   var $91=$90 & 511;
   var $92=$91 << 23;
   var $93=1 | $92;
   var $94=$i0;
   var $95=$94 >>> 14;
   var $96=$95 & 511;
   var $97=$96 & 511;
   var $98=$97 << 14;
   var $99=$93 | $98;
   var $100=$1;
   var $101=(($100+60)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=((($102)-(1))|0);
   var $104=$1;
   var $105=(($104+88)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106+($103<<2))|0);
   HEAP32[(($107)>>2)]=$99;
   label = 90; break;
  case 16: 
   label = 38; break;
  case 17: 
   var $110=$2;
   var $111=$110 >>> 14;
   var $112=$111 & 511;
   var $113=$i0;
   var $114=$113 >>> 23;
   var $115=$114 & 511;
   var $116=(($112)|(0))==(($115)|(0));
   if ($116) { label = 18; break; } else { label = 20; break; }
  case 18: 
   var $118=$i0;
   var $119=$118 >>> 23;
   var $120=$119 & 511;
   var $121=$1;
   var $122=(($121+112)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124=(($120)|(0)) >= (($123)|(0));
   if ($124) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $126=$2;
   var $127=$126 >>> 23;
   var $128=$127 & 511;
   var $129=$128 & 511;
   var $130=$129 << 23;
   var $131=3 | $130;
   var $132=$i0;
   var $133=$132 >>> 7;
   var $134=$133 & 65535;
   var $135=((($134)-(32767))|0);
   var $136=((($135)+(32767))|0);
   var $137=$136 & 65535;
   var $138=$137 << 7;
   var $139=$131 | $138;
   var $140=$1;
   var $141=(($140+60)|0);
   var $142=HEAP32[(($141)>>2)];
   var $143=((($142)-(1))|0);
   var $144=$1;
   var $145=(($144+88)|0);
   var $146=HEAP32[(($145)>>2)];
   var $147=(($146+($143<<2))|0);
   HEAP32[(($147)>>2)]=$139;
   label = 90; break;
  case 20: 
   label = 38; break;
  case 21: 
   var $150=$2;
   var $151=$150 >>> 14;
   var $152=$151 & 511;
   var $153=$i0;
   var $154=$153 >>> 23;
   var $155=$154 & 511;
   var $156=(($152)|(0))==(($155)|(0));
   if ($156) { label = 22; break; } else { label = 24; break; }
  case 22: 
   var $158=$i0;
   var $159=$158 >>> 23;
   var $160=$159 & 511;
   var $161=$1;
   var $162=(($161+112)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=(($160)|(0)) >= (($163)|(0));
   if ($164) { label = 23; break; } else { label = 24; break; }
  case 23: 
   var $166=$c0;
   var $167=$166 & 127;
   var $168=$2;
   var $169=$168 >>> 23;
   var $170=$169 & 511;
   var $171=$170 & 511;
   var $172=$171 << 23;
   var $173=$167 | $172;
   var $174=$i0;
   var $175=$174 >>> 14;
   var $176=$175 & 511;
   var $177=$176 & 511;
   var $178=$177 << 14;
   var $179=$173 | $178;
   var $180=$i0;
   var $181=$180 >>> 7;
   var $182=$181 & 127;
   var $183=$182 & 127;
   var $184=$183 << 7;
   var $185=$179 | $184;
   var $186=$1;
   var $187=(($186+60)|0);
   var $188=HEAP32[(($187)>>2)];
   var $189=((($188)-(1))|0);
   var $190=$1;
   var $191=(($190+88)|0);
   var $192=HEAP32[(($191)>>2)];
   var $193=(($192+($189<<2))|0);
   HEAP32[(($193)>>2)]=$185;
   label = 90; break;
  case 24: 
   label = 38; break;
  case 25: 
   var $196=$2;
   var $197=$196 >>> 14;
   var $198=$197 & 511;
   var $199=$i0;
   var $200=$199 >>> 23;
   var $201=$200 & 511;
   var $202=(($198)|(0))==(($201)|(0));
   if ($202) { label = 26; break; } else { label = 28; break; }
  case 26: 
   var $204=$i0;
   var $205=$204 >>> 23;
   var $206=$205 & 511;
   var $207=$1;
   var $208=(($207+112)|0);
   var $209=HEAP32[(($208)>>2)];
   var $210=(($206)|(0)) >= (($209)|(0));
   if ($210) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $212=$c0;
   var $213=$212 & 127;
   var $214=$2;
   var $215=$214 >>> 23;
   var $216=$215 & 511;
   var $217=$216 & 511;
   var $218=$217 << 23;
   var $219=$213 | $218;
   var $220=$i0;
   var $221=$220 >>> 7;
   var $222=$221 & 65535;
   var $223=$222 & 65535;
   var $224=$223 << 7;
   var $225=$219 | $224;
   var $226=$1;
   var $227=(($226+60)|0);
   var $228=HEAP32[(($227)>>2)];
   var $229=((($228)-(1))|0);
   var $230=$1;
   var $231=(($230+88)|0);
   var $232=HEAP32[(($231)>>2)];
   var $233=(($232+($229<<2))|0);
   HEAP32[(($233)>>2)]=$225;
   label = 90; break;
  case 28: 
   label = 38; break;
  case 29: 
   var $236=$2;
   var $237=$236 >>> 14;
   var $238=$237 & 511;
   var $239=$i0;
   var $240=$239 >>> 23;
   var $241=$240 & 511;
   var $242=(($238)|(0))==(($241)|(0));
   if ($242) { label = 30; break; } else { label = 32; break; }
  case 30: 
   var $244=$i0;
   var $245=$244 >>> 23;
   var $246=$245 & 511;
   var $247=$1;
   var $248=(($247+112)|0);
   var $249=HEAP32[(($248)>>2)];
   var $250=(($246)|(0)) >= (($249)|(0));
   if ($250) { label = 31; break; } else { label = 32; break; }
  case 31: 
   var $252=$c0;
   var $253=$252 & 127;
   var $254=$2;
   var $255=$254 >>> 23;
   var $256=$255 & 511;
   var $257=$256 & 511;
   var $258=$257 << 23;
   var $259=$253 | $258;
   var $260=$i0;
   var $261=$260 >>> 14;
   var $262=$261 & 511;
   var $263=$262 & 511;
   var $264=$263 << 14;
   var $265=$259 | $264;
   var $266=$1;
   var $267=(($266+60)|0);
   var $268=HEAP32[(($267)>>2)];
   var $269=((($268)-(1))|0);
   var $270=$1;
   var $271=(($270+88)|0);
   var $272=HEAP32[(($271)>>2)];
   var $273=(($272+($269<<2))|0);
   HEAP32[(($273)>>2)]=$265;
   label = 90; break;
  case 32: 
   label = 38; break;
  case 33: 
   var $276=$2;
   var $277=$276 >>> 14;
   var $278=$277 & 511;
   var $279=$i0;
   var $280=$279 >>> 23;
   var $281=$280 & 511;
   var $282=(($278)|(0))==(($281)|(0));
   if ($282) { label = 34; break; } else { label = 36; break; }
  case 34: 
   var $284=$i0;
   var $285=$284 >>> 23;
   var $286=$285 & 511;
   var $287=$1;
   var $288=(($287+112)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=(($286)|(0)) >= (($289)|(0));
   if ($290) { label = 35; break; } else { label = 36; break; }
  case 35: 
   var $292=$c0;
   var $293=$292 & 127;
   var $294=$2;
   var $295=$294 >>> 23;
   var $296=$295 & 511;
   var $297=$296 & 511;
   var $298=$297 << 23;
   var $299=$293 | $298;
   var $300=$1;
   var $301=(($300+60)|0);
   var $302=HEAP32[(($301)>>2)];
   var $303=((($302)-(1))|0);
   var $304=$1;
   var $305=(($304+88)|0);
   var $306=HEAP32[(($305)>>2)];
   var $307=(($306+($303<<2))|0);
   HEAP32[(($307)>>2)]=$299;
   label = 90; break;
  case 36: 
   label = 38; break;
  case 37: 
   label = 38; break;
  case 38: 
   label = 88; break;
  case 39: 
   var $312=$3;
   var $313=(($312)|(0))!=0;
   if ($313) { label = 40; break; } else { label = 41; break; }
  case 40: 
   label = 88; break;
  case 41: 
   var $316=$c0;
   var $317=(($316)|(0))==1;
   if ($317) { label = 42; break; } else { label = 45; break; }
  case 42: 
   var $319=$2;
   var $320=$319 >>> 23;
   var $321=$320 & 511;
   var $322=$i0;
   var $323=$322 >>> 23;
   var $324=$323 & 511;
   var $325=(($321)|(0))==(($324)|(0));
   if ($325) { label = 43; break; } else { label = 44; break; }
  case 43: 
   var $327=$c1;
   var $328=$327 & 127;
   var $329=$i0;
   var $330=$329 >>> 14;
   var $331=$330 & 511;
   var $332=$331 & 511;
   var $333=$332 << 23;
   var $334=$328 | $333;
   var $335=$2;
   var $336=$335 >>> 7;
   var $337=$336 & 65535;
   var $338=$337 & 65535;
   var $339=$338 << 7;
   var $340=$334 | $339;
   var $341=$1;
   var $342=(($341+60)|0);
   var $343=HEAP32[(($342)>>2)];
   var $344=((($343)-(1))|0);
   var $345=$1;
   var $346=(($345+88)|0);
   var $347=HEAP32[(($346)>>2)];
   var $348=(($347+($344<<2))|0);
   HEAP32[(($348)>>2)]=$340;
   label = 90; break;
  case 44: 
   label = 45; break;
  case 45: 
   label = 88; break;
  case 46: 
   var $352=$3;
   var $353=(($352)|(0))!=0;
   if ($353) { label = 47; break; } else { label = 48; break; }
  case 47: 
   label = 88; break;
  case 48: 
   var $356=$c0;
   var $357=(($356)|(0))==1;
   if ($357) { label = 49; break; } else { label = 52; break; }
  case 49: 
   var $359=$2;
   var $360=$359 >>> 23;
   var $361=$360 & 511;
   var $362=$i0;
   var $363=$362 >>> 23;
   var $364=$363 & 511;
   var $365=(($361)|(0))==(($364)|(0));
   if ($365) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $367=$c1;
   var $368=$367 & 127;
   var $369=$i0;
   var $370=$369 >>> 14;
   var $371=$370 & 511;
   var $372=$371 & 511;
   var $373=$372 << 23;
   var $374=$368 | $373;
   var $375=$2;
   var $376=$375 >>> 14;
   var $377=$376 & 511;
   var $378=$377 & 511;
   var $379=$378 << 14;
   var $380=$374 | $379;
   var $381=$2;
   var $382=$381 >>> 7;
   var $383=$382 & 127;
   var $384=$383 & 127;
   var $385=$384 << 7;
   var $386=$380 | $385;
   var $387=$1;
   var $388=(($387+60)|0);
   var $389=HEAP32[(($388)>>2)];
   var $390=((($389)-(1))|0);
   var $391=$1;
   var $392=(($391+88)|0);
   var $393=HEAP32[(($392)>>2)];
   var $394=(($393+($390<<2))|0);
   HEAP32[(($394)>>2)]=$386;
   label = 90; break;
  case 51: 
   label = 52; break;
  case 52: 
   label = 88; break;
  case 53: 
   var $398=$c0;
   var $399=(($398)|(0))==31;
   if ($399) { label = 54; break; } else { label = 55; break; }
  case 54: 
   var $401=$i0;
   var $402=$401 >>> 23;
   var $403=$402 & 511;
   var $404=$2;
   var $405=$404 >>> 23;
   var $406=$405 & 511;
   var $407=((($403)+($406))|0);
   var $408=$407 & 511;
   var $409=$408 << 23;
   var $410=31 | $409;
   var $411=$1;
   var $412=(($411+60)|0);
   var $413=HEAP32[(($412)>>2)];
   var $414=((($413)-(1))|0);
   var $415=$1;
   var $416=(($415+88)|0);
   var $417=HEAP32[(($416)>>2)];
   var $418=(($417+($414<<2))|0);
   HEAP32[(($418)>>2)]=$410;
   label = 90; break;
  case 55: 
   label = 88; break;
  case 56: 
   var $421=$c0;
   var $422=(($421)|(0))==28;
   if ($422) { label = 57; break; } else { label = 58; break; }
  case 57: 
   var $424=$i0;
   var $425=$424 >>> 23;
   var $426=$425 & 511;
   var $427=$2;
   var $428=$427 >>> 23;
   var $429=$428 & 511;
   var $430=((($426)+($429))|0);
   var $431=$430 & 511;
   var $432=$431 << 23;
   var $433=28 | $432;
   var $434=$1;
   var $435=(($434+60)|0);
   var $436=HEAP32[(($435)>>2)];
   var $437=((($436)-(1))|0);
   var $438=$1;
   var $439=(($438+88)|0);
   var $440=HEAP32[(($439)>>2)];
   var $441=(($440+($437<<2))|0);
   HEAP32[(($441)>>2)]=$433;
   label = 90; break;
  case 58: 
   label = 88; break;
  case 59: 
   var $444=$c0;
   if ((($444)|(0))==41) {
    label = 60; break;
   }
   else if ((($444)|(0))==1) {
    label = 61; break;
   }
   else if ((($444)|(0))==3) {
    label = 62; break;
   }
   else if ((($444)|(0))==55 | (($444)|(0))==63 | (($444)|(0))==65 | (($444)|(0))==58 | (($444)|(0))==21) {
    label = 63; break;
   }
   else if ((($444)|(0))==14 | (($444)|(0))==16 | (($444)|(0))==18 | (($444)|(0))==20 | (($444)|(0))==22 | (($444)|(0))==10) {
    label = 64; break;
   }
   else if ((($444)|(0))==4 | (($444)|(0))==9 | (($444)|(0))==13 | (($444)|(0))==15 | (($444)|(0))==17 | (($444)|(0))==11 | (($444)|(0))==2 | (($444)|(0))==61) {
    label = 65; break;
   }
   else if ((($444)|(0))==71) {
    label = 66; break;
   }
   else if ((($444)|(0))==5 | (($444)|(0))==6 | (($444)|(0))==7 | (($444)|(0))==8 | (($444)|(0))==66) {
    label = 67; break;
   }
   else {
   label = 68; break;
   }
  case 60: 
   label = 90; break;
  case 61: 
   var $447=$i0;
   var $448=$447 >>> 14;
   var $449=$448 & 511;
   var $450=$449 & 511;
   var $451=$450 << 23;
   var $452=41 | $451;
   var $453=$1;
   var $454=(($453+60)|0);
   var $455=HEAP32[(($454)>>2)];
   var $456=((($455)-(1))|0);
   var $457=$1;
   var $458=(($457+88)|0);
   var $459=HEAP32[(($458)>>2)];
   var $460=(($459+($456<<2))|0);
   HEAP32[(($460)>>2)]=$452;
   label = 90; break;
  case 62: 
   var $462=$i0;
   var $463=$462 >>> 7;
   var $464=$463 & 65535;
   var $465=((($464)-(32767))|0);
   var $466=((($465)+(32767))|0);
   var $467=$466 & 65535;
   var $468=$467 << 7;
   var $469=3 | $468;
   var $470=$1;
   var $471=(($470+60)|0);
   var $472=HEAP32[(($471)>>2)];
   var $473=((($472)-(1))|0);
   var $474=$1;
   var $475=(($474+88)|0);
   var $476=HEAP32[(($475)>>2)];
   var $477=(($476+($473<<2))|0);
   HEAP32[(($477)>>2)]=$469;
   var $478=$1;
   _genop($478, 41);
   label = 90; break;
  case 63: 
   var $480=$c0;
   var $481=$480 & 127;
   var $482=$i0;
   var $483=$482 >>> 14;
   var $484=$483 & 511;
   var $485=$484 & 511;
   var $486=$485 << 14;
   var $487=$481 | $486;
   var $488=$i0;
   var $489=$488 >>> 7;
   var $490=$489 & 127;
   var $491=$490 & 127;
   var $492=$491 << 7;
   var $493=$487 | $492;
   var $494=$1;
   var $495=(($494+60)|0);
   var $496=HEAP32[(($495)>>2)];
   var $497=((($496)-(1))|0);
   var $498=$1;
   var $499=(($498+88)|0);
   var $500=HEAP32[(($499)>>2)];
   var $501=(($500+($497<<2))|0);
   HEAP32[(($501)>>2)]=$493;
   var $502=$1;
   _genop($502, 41);
   label = 90; break;
  case 64: 
   var $504=$1;
   var $505=(($504+60)|0);
   var $506=HEAP32[(($505)>>2)];
   var $507=((($506)-(1))|0);
   HEAP32[(($505)>>2)]=$507;
   var $508=$1;
   var $509=$i0;
   _genop_peep($508, $509, 0);
   var $510=$1;
   var $511=(($510+60)|0);
   var $512=HEAP32[(($511)>>2)];
   var $513=((($512)-(1))|0);
   var $514=$1;
   var $515=(($514+88)|0);
   var $516=HEAP32[(($515)>>2)];
   var $517=(($516+($513<<2))|0);
   var $518=HEAP32[(($517)>>2)];
   $i0=$518;
   var $519=$1;
   var $520=$i0;
   var $521=$520 >>> 23;
   var $522=$521 & 511;
   var $523=$522 & 511;
   var $524=$523 << 23;
   var $525=41 | $524;
   _genop($519, $525);
   label = 90; break;
  case 65: 
   var $527=$c0;
   var $528=$527 & 127;
   var $529=$i0;
   var $530=$529 >>> 7;
   var $531=$530 & 65535;
   var $532=$531 & 65535;
   var $533=$532 << 7;
   var $534=$528 | $533;
   var $535=$1;
   var $536=(($535+60)|0);
   var $537=HEAP32[(($536)>>2)];
   var $538=((($537)-(1))|0);
   var $539=$1;
   var $540=(($539+88)|0);
   var $541=HEAP32[(($540)>>2)];
   var $542=(($541+($538<<2))|0);
   HEAP32[(($542)>>2)]=$534;
   var $543=$1;
   _genop($543, 41);
   label = 90; break;
  case 66: 
   var $545=$c0;
   var $546=$545 & 127;
   var $547=$2;
   var $548=$547 >>> 23;
   var $549=$548 & 511;
   var $550=$549 & 511;
   var $551=$550 << 23;
   var $552=$546 | $551;
   var $553=$i0;
   var $554=$553 >>> 14;
   var $555=$554 & 511;
   var $556=$555 & 511;
   var $557=$556 << 14;
   var $558=$552 | $557;
   var $559=$1;
   var $560=(($559+60)|0);
   var $561=HEAP32[(($560)>>2)];
   var $562=((($561)-(1))|0);
   var $563=$1;
   var $564=(($563+88)|0);
   var $565=HEAP32[(($564)>>2)];
   var $566=(($565+($562<<2))|0);
   HEAP32[(($566)>>2)]=$558;
   var $567=$1;
   _genop($567, 41);
   label = 90; break;
  case 67: 
   var $569=$c0;
   var $570=$569 & 127;
   var $571=$1;
   var $572=(($571+60)|0);
   var $573=HEAP32[(($572)>>2)];
   var $574=((($573)-(1))|0);
   var $575=$1;
   var $576=(($575+88)|0);
   var $577=HEAP32[(($576)>>2)];
   var $578=(($577+($574<<2))|0);
   HEAP32[(($578)>>2)]=$570;
   var $579=$1;
   _genop($579, 41);
   label = 90; break;
  case 68: 
   label = 69; break;
  case 69: 
   label = 88; break;
  case 70: 
   var $583=$c0;
   var $584=(($583)|(0))==3;
   if ($584) { label = 71; break; } else { label = 80; break; }
  case 71: 
   var $586=$i0;
   var $587=$586 >>> 7;
   var $588=$587 & 65535;
   var $589=((($588)-(32767))|0);
   $c=$589;
   var $590=$c1;
   var $591=(($590)|(0))==46;
   if ($591) { label = 72; break; } else { label = 73; break; }
  case 72: 
   var $593=$c;
   var $594=(((-$593))|0);
   $c=$594;
   label = 73; break;
  case 73: 
   var $596=$c;
   var $597=(($596)|(0)) > 127;
   if ($597) { label = 75; break; } else { label = 74; break; }
  case 74: 
   var $599=$c;
   var $600=(($599)|(0)) < -127;
   if ($600) { label = 75; break; } else { label = 76; break; }
  case 75: 
   label = 88; break;
  case 76: 
   var $603=$c;
   var $604=0 <= (($603)|(0));
   if ($604) { label = 77; break; } else { label = 78; break; }
  case 77: 
   var $606=$2;
   var $607=$606 >>> 23;
   var $608=$607 & 511;
   var $609=$608 & 511;
   var $610=$609 << 23;
   var $611=45 | $610;
   var $612=$2;
   var $613=$612 >>> 14;
   var $614=$613 & 511;
   var $615=$614 & 511;
   var $616=$615 << 14;
   var $617=$611 | $616;
   var $618=$c;
   var $619=$618 & 127;
   var $620=$619 << 7;
   var $621=$617 | $620;
   var $622=$1;
   var $623=(($622+60)|0);
   var $624=HEAP32[(($623)>>2)];
   var $625=((($624)-(1))|0);
   var $626=$1;
   var $627=(($626+88)|0);
   var $628=HEAP32[(($627)>>2)];
   var $629=(($628+($625<<2))|0);
   HEAP32[(($629)>>2)]=$621;
   label = 79; break;
  case 78: 
   var $631=$2;
   var $632=$631 >>> 23;
   var $633=$632 & 511;
   var $634=$633 & 511;
   var $635=$634 << 23;
   var $636=47 | $635;
   var $637=$2;
   var $638=$637 >>> 14;
   var $639=$638 & 511;
   var $640=$639 & 511;
   var $641=$640 << 14;
   var $642=$636 | $641;
   var $643=$c;
   var $644=(((-$643))|0);
   var $645=$644 & 127;
   var $646=$645 << 7;
   var $647=$642 | $646;
   var $648=$1;
   var $649=(($648+60)|0);
   var $650=HEAP32[(($649)>>2)];
   var $651=((($650)-(1))|0);
   var $652=$1;
   var $653=(($652+88)|0);
   var $654=HEAP32[(($653)>>2)];
   var $655=(($654+($651<<2))|0);
   HEAP32[(($655)>>2)]=$647;
   label = 79; break;
  case 79: 
   label = 90; break;
  case 80: 
   label = 81; break;
  case 81: 
   var $659=$c0;
   var $660=(($659)|(0))==61;
   if ($660) { label = 82; break; } else { label = 86; break; }
  case 82: 
   var $662=$i0;
   var $663=$662 >>> 7;
   var $664=$663 & 65535;
   $i1=$664;
   var $665=$i1;
   var $666=$1;
   var $667=(($666+100)|0);
   var $668=HEAP32[(($667)>>2)];
   var $669=(($668+16)|0);
   var $670=HEAP32[(($669)>>2)];
   var $671=(($670+((($665)*(12))&-1))|0);
   var $672=(($671+8)|0);
   var $673=HEAP32[(($672)>>2)];
   var $674=(($673)|(0))==16;
   if ($674) { label = 83; break; } else { label = 85; break; }
  case 83: 
   var $676=$i1;
   var $677=$1;
   var $678=(($677+100)|0);
   var $679=HEAP32[(($678)>>2)];
   var $680=(($679+16)|0);
   var $681=HEAP32[(($680)>>2)];
   var $682=(($681+((($676)*(12))&-1))|0);
   var $683=(($682)|0);
   var $684=$683;
   var $685=HEAP32[(($684)>>2)];
   var $686=$685;
   var $687=(($686+12)|0);
   var $688=HEAP32[(($687)>>2)];
   var $689=(($688)|(0))==0;
   if ($689) { label = 84; break; } else { label = 85; break; }
  case 84: 
   var $691=$1;
   var $692=(($691+60)|0);
   var $693=HEAP32[(($692)>>2)];
   var $694=((($693)-(1))|0);
   HEAP32[(($692)>>2)]=$694;
   label = 90; break;
  case 85: 
   label = 86; break;
  case 86: 
   label = 88; break;
  case 87: 
   label = 88; break;
  case 88: 
   label = 89; break;
  case 89: 
   var $700=$1;
   var $701=$2;
   _genop($700, $701);
   label = 90; break;
  case 90: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _lambda_body($s, $tree, $blk) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $idx;
   var $base;
   var $c;
   var $lp;
   var $a;
   var $ma;
   var $oa;
   var $ra;
   var $pa;
   var $ka;
   var $kd;
   var $ba;
   var $pos;
   var $i;
   var $n;
   var $opt;
   var $idx1;
   $1=$s;
   $2=$tree;
   $3=$blk;
   var $4=$1;
   var $5=(($4+124)|0);
   var $6=HEAP32[(($5)>>2)];
   $base=$6;
   var $7=$1;
   var $8=(($7)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$1;
   var $11=$2;
   var $12=(($11)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=_scope_new($9, $10, $13);
   $1=$14;
   var $15=$1;
   var $16=(($15+124)|0);
   var $17=HEAP32[(($16)>>2)];
   $idx=$17;
   var $18=$3;
   var $19=(($18)|(0))!=0;
   var $20=$19 ^ 1;
   var $21=(($20)&(1));
   var $22=(($21) & 255);
   var $23=$1;
   var $24=$22 & 1;
   var $25=$23;
   var $26=(($25+69)|0);
   var $27=$24 & 1;
   var $28=$27 << 7;
   var $29=HEAP8[($26)];
   var $30=$29 & 127;
   var $31=$30 | $28;
   HEAP8[($26)]=$31;
   var $32=$3;
   var $33=(($32)|(0))!=0;
   if ($33) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $35=$1;
   var $36=_loop_push($35, 1);
   $lp=$36;
   var $37=$1;
   var $38=_new_label($37);
   var $39=$lp;
   var $40=(($39+4)|0);
   HEAP32[(($40)>>2)]=$38;
   label = 3; break;
  case 3: 
   var $42=$2;
   var $43=(($42+4)|0);
   var $44=HEAP32[(($43)>>2)];
   $2=$44;
   var $45=$2;
   var $46=(($45)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47)|(0))!=0;
   if ($48) { label = 4; break; } else { label = 19; break; }
  case 4: 
   var $50=$2;
   var $51=(($50)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=_node_len($54);
   $ma=$55;
   var $56=$2;
   var $57=(($56)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58)|0);
   var $60=HEAP32[(($59)>>2)];
   $n=$60;
   label = 5; break;
  case 5: 
   var $62=$n;
   var $63=(($62)|(0))!=0;
   if ($63) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $65=$n;
   var $66=(($65+4)|0);
   var $67=HEAP32[(($66)>>2)];
   $n=$67;
   label = 5; break;
  case 7: 
   var $69=$2;
   var $70=(($69)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($71+4)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($73)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=_node_len($75);
   $oa=$76;
   var $77=$2;
   var $78=(($77)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79+4)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($81+4)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85)|(0))!=0;
   var $87=$86 ? 1 : 0;
   $ra=$87;
   var $88=$2;
   var $89=(($88)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=(($90+4)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=(($92+4)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(($94+4)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($96)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=_node_len($98);
   $pa=$99;
   $kd=0;
   $ka=0;
   var $100=$2;
   var $101=(($100)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102+4)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104+4)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106+4)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=(($108+4)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=(($110)|(0))!=0;
   var $112=$111 ? 1 : 0;
   $ba=$112;
   var $113=$ma;
   var $114=$113 & 31;
   var $115=$114 << 18;
   var $116=$oa;
   var $117=$116 & 31;
   var $118=$117 << 13;
   var $119=$115 | $118;
   var $120=$ra;
   var $121=$120 & 1;
   var $122=$121 << 12;
   var $123=$119 | $122;
   var $124=$pa;
   var $125=$124 & 31;
   var $126=$125 << 7;
   var $127=$123 | $126;
   var $128=$ka;
   var $129=$128 & 31;
   var $130=$129 << 2;
   var $131=$127 | $130;
   var $132=$kd;
   var $133=$132 & 1;
   var $134=$133 << 1;
   var $135=$131 | $134;
   var $136=$ba;
   var $137=$136 & 1;
   var $138=$135 | $137;
   $a=$138;
   var $139=$ma;
   var $140=$oa;
   var $141=((($139)+($140))|0);
   var $142=$141 & 63;
   var $143=$142 << 6;
   var $144=$ra;
   var $145=$144 & 1;
   var $146=$145 << 5;
   var $147=$143 | $146;
   var $148=$pa;
   var $149=$148 & 31;
   var $150=$147 | $149;
   var $151=$1;
   var $152=$150 & 32767;
   var $153=$152 << 17;
   var $154=$153 >> 17;
   var $155=$151;
   var $156=(($155+68)|0);
   var $157=$156;
   var $158=$152 & 32767;
   var $159=HEAP32[(($157)>>2)];
   var $160=$159 & -32768;
   var $161=$160 | $158;
   HEAP32[(($157)>>2)]=$161;
   var $162=$1;
   var $163=$a;
   var $164=$163 & 33554431;
   var $165=$164 << 7;
   var $166=38 | $165;
   _genop($162, $166);
   var $167=$1;
   var $168=_new_label($167);
   $pos=$168;
   $i=0;
   label = 8; break;
  case 8: 
   var $170=$i;
   var $171=$oa;
   var $172=(($170)|(0)) < (($171)|(0));
   if ($172) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $174=$1;
   var $175=_new_label($174);
   var $176=$1;
   _genop($176, 4194199);
   label = 10; break;
  case 10: 
   var $178=$i;
   var $179=((($178)+(1))|0);
   $i=$179;
   label = 8; break;
  case 11: 
   var $181=$oa;
   var $182=(($181)|(0)) > 0;
   if ($182) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $184=$1;
   _genop($184, 4194199);
   label = 13; break;
  case 13: 
   var $186=$2;
   var $187=(($186)|0);
   var $188=HEAP32[(($187)>>2)];
   var $189=(($188+4)|0);
   var $190=HEAP32[(($189)>>2)];
   var $191=(($190)|0);
   var $192=HEAP32[(($191)>>2)];
   $opt=$192;
   $i=0;
   label = 14; break;
  case 14: 
   var $194=$opt;
   var $195=(($194)|(0))!=0;
   if ($195) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $197=$1;
   var $198=$pos;
   var $199=$i;
   var $200=((($198)+($199))|0);
   _dispatch($197, $200);
   var $201=$1;
   var $202=$opt;
   var $203=(($202)|0);
   var $204=HEAP32[(($203)>>2)];
   var $205=(($204+4)|0);
   var $206=HEAP32[(($205)>>2)];
   _codegen($201, $206, 1);
   var $207=$1;
   var $208=$opt;
   var $209=(($208)|0);
   var $210=HEAP32[(($209)>>2)];
   var $211=(($210)|0);
   var $212=HEAP32[(($211)>>2)];
   var $213=$212;
   var $214=(($213) & 65535);
   var $215=_lv_idx($207, $214);
   $idx1=$215;
   var $216=$1;
   var $217=(($216+56)|0);
   var $218=HEAP32[(($217)>>2)];
   var $219=((($218)-(1))|0);
   HEAP32[(($217)>>2)]=$219;
   var $220=$1;
   var $221=$idx1;
   var $222=$221 & 511;
   var $223=$222 << 23;
   var $224=1 | $223;
   var $225=$1;
   var $226=(($225+56)|0);
   var $227=HEAP32[(($226)>>2)];
   var $228=$227 & 511;
   var $229=$228 << 14;
   var $230=$224 | $229;
   _genop_peep($220, $230, 0);
   var $231=$i;
   var $232=((($231)+(1))|0);
   $i=$232;
   var $233=$opt;
   var $234=(($233+4)|0);
   var $235=HEAP32[(($234)>>2)];
   $opt=$235;
   label = 14; break;
  case 16: 
   var $237=$oa;
   var $238=(($237)|(0)) > 0;
   if ($238) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $240=$1;
   var $241=$pos;
   var $242=$i;
   var $243=((($241)+($242))|0);
   _dispatch($240, $243);
   label = 18; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $246=$1;
   var $247=$2;
   var $248=(($247+4)|0);
   var $249=HEAP32[(($248)>>2)];
   var $250=(($249)|0);
   var $251=HEAP32[(($250)>>2)];
   _codegen($246, $251, 1);
   var $252=$1;
   var $253=(($252+56)|0);
   var $254=HEAP32[(($253)>>2)];
   var $255=((($254)-(1))|0);
   HEAP32[(($253)>>2)]=$255;
   var $256=$1;
   var $257=(($256+60)|0);
   var $258=HEAP32[(($257)>>2)];
   var $259=(($258)|(0)) > 0;
   if ($259) { label = 20; break; } else { label = 28; break; }
  case 20: 
   var $261=$1;
   var $262=(($261+60)|0);
   var $263=HEAP32[(($262)>>2)];
   var $264=((($263)-(1))|0);
   var $265=$1;
   var $266=(($265+88)|0);
   var $267=HEAP32[(($266)>>2)];
   var $268=(($267+($264<<2))|0);
   var $269=HEAP32[(($268)>>2)];
   $c=$269;
   var $270=$c;
   var $271=$270 & 127;
   var $272=(($271)|(0))!=41;
   if ($272) { label = 23; break; } else { label = 21; break; }
  case 21: 
   var $274=$c;
   var $275=$274 >>> 14;
   var $276=$275 & 511;
   var $277=(($276)|(0))!=0;
   if ($277) { label = 23; break; } else { label = 22; break; }
  case 22: 
   var $279=$1;
   var $280=(($279+60)|0);
   var $281=HEAP32[(($280)>>2)];
   var $282=$1;
   var $283=(($282+64)|0);
   var $284=HEAP32[(($283)>>2)];
   var $285=(($281)|(0))==(($284)|(0));
   if ($285) { label = 23; break; } else { label = 27; break; }
  case 23: 
   var $287=$1;
   var $288=(($287+116)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=(($289)|(0))==0;
   if ($290) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $292=$1;
   _genop($292, 5);
   var $293=$1;
   _genop($293, 41);
   label = 26; break;
  case 25: 
   var $295=$1;
   var $296=$1;
   var $297=(($296+56)|0);
   var $298=HEAP32[(($297)>>2)];
   var $299=$298 & 511;
   var $300=$299 << 23;
   var $301=41 | $300;
   _genop_peep($295, $301, 0);
   label = 26; break;
  case 26: 
   label = 27; break;
  case 27: 
   label = 28; break;
  case 28: 
   var $305=$3;
   var $306=(($305)|(0))!=0;
   if ($306) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $308=$1;
   _loop_pop($308, 0);
   label = 30; break;
  case 30: 
   var $310=$1;
   _scope_finish($310);
   var $311=$idx;
   var $312=$base;
   var $313=((($311)-($312))|0);
   return $313;
  default: assert(0, "bad label: " + label);
 }
}
function _for_body($s, $tree) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $prev;
   var $idx;
   var $base;
   var $lp;
   var $n2;
   var $c;
   $1=$s;
   $2=$tree;
   var $3=$1;
   $prev=$3;
   var $4=$1;
   var $5=(($4+124)|0);
   var $6=HEAP32[(($5)>>2)];
   $base=$6;
   var $7=$1;
   var $8=$2;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|0);
   var $12=HEAP32[(($11)>>2)];
   _codegen($7, $12, 1);
   var $13=$1;
   var $14=(($13)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=$1;
   var $17=$2;
   var $18=(($17)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=_scope_new($15, $16, $19);
   $1=$20;
   var $21=$1;
   var $22=(($21+124)|0);
   var $23=HEAP32[(($22)>>2)];
   $idx=$23;
   var $24=$1;
   var $25=_loop_push($24, 2);
   $lp=$25;
   var $26=$1;
   var $27=_new_label($26);
   var $28=$lp;
   var $29=(($28+4)|0);
   HEAP32[(($29)>>2)]=$27;
   var $30=$2;
   var $31=(($30)|0);
   var $32=HEAP32[(($31)>>2)];
   $n2=$32;
   var $33=$n2;
   var $34=(($33)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35)|(0))!=0;
   if ($36) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $38=$n2;
   var $39=(($38)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40+4)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($42)|(0))!=0;
   if ($43) { label = 5; break; } else { label = 3; break; }
  case 3: 
   var $45=$n2;
   var $46=(($45+4)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47)|(0))!=0;
   if ($48) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $50=$1;
   _genop($50, 33554470);
   var $51=$1;
   var $52=$n2;
   var $53=(($52)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($54)|0);
   var $56=HEAP32[(($55)>>2)];
   _gen_assignment($51, $56, 1, 0);
   label = 6; break;
  case 5: 
   var $58=$1;
   _genop($58, 33554470);
   var $59=$1;
   var $60=$n2;
   _gen_vmassignment($59, $60, 1, 1);
   label = 6; break;
  case 6: 
   var $62=$1;
   var $63=$2;
   var $64=(($63+4)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65+4)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67)|0);
   var $69=HEAP32[(($68)>>2)];
   _codegen($62, $69, 1);
   var $70=$1;
   var $71=(($70+56)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=((($72)-(1))|0);
   HEAP32[(($71)>>2)]=$73;
   var $74=$1;
   var $75=(($74+60)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=(($76)|(0)) > 0;
   if ($77) { label = 7; break; } else { label = 12; break; }
  case 7: 
   var $79=$1;
   var $80=(($79+60)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=((($81)-(1))|0);
   var $83=$1;
   var $84=(($83+88)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+($82<<2))|0);
   var $87=HEAP32[(($86)>>2)];
   $c=$87;
   var $88=$c;
   var $89=$88 & 127;
   var $90=(($89)|(0))!=41;
   if ($90) { label = 10; break; } else { label = 8; break; }
  case 8: 
   var $92=$c;
   var $93=$92 >>> 14;
   var $94=$93 & 511;
   var $95=(($94)|(0))!=0;
   if ($95) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $97=$1;
   var $98=(($97+60)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=$1;
   var $101=(($100+64)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($99)|(0))==(($102)|(0));
   if ($103) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $105=$1;
   var $106=$1;
   var $107=(($106+56)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=$108 & 511;
   var $110=$109 << 23;
   var $111=41 | $110;
   _genop_peep($105, $111, 0);
   label = 11; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $114=$1;
   _loop_pop($114, 0);
   var $115=$1;
   _scope_finish($115);
   var $116=$prev;
   $1=$116;
   var $117=$1;
   var $118=$1;
   var $119=(($118+56)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=$120 & 511;
   var $122=$121 << 23;
   var $123=64 | $122;
   var $124=$idx;
   var $125=$base;
   var $126=((($124)-($125))|0);
   var $127=$126 & 16383;
   var $128=$127 << 9;
   var $129=$128 | 256;
   var $130=$123 | $129;
   _genop($117, $130);
   var $131=$1;
   var $132=(($131+56)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=((($133)-(1))|0);
   HEAP32[(($132)>>2)]=$134;
   var $135=$1;
   var $136=$1;
   var $137=(($136)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=_mrb_intern2($138, ((100956)|0), 4);
   var $140=_new_msym($135, $139);
   $idx=$140;
   var $141=$1;
   var $142=$1;
   var $143=(($142+56)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=$144 & 511;
   var $146=$145 << 23;
   var $147=33 | $146;
   var $148=$idx;
   var $149=$148 & 511;
   var $150=$149 << 14;
   var $151=$147 | $150;
   _genop($141, $151);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _gen_call($s, $tree, $name, $sp, $val) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $sym;
   var $idx;
   var $n;
   var $noop;
   var $sendv;
   var $blk;
   var $len=sp;
   var $name1;
   $1=$s;
   $2=$tree;
   $3=$name;
   $4=$sp;
   $5=$val;
   var $6=$3;
   var $7=(($6 << 16) >> 16);
   var $8=(($7)|(0))!=0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$3;
   var $11=(($10 << 16) >> 16);
   var $22 = $11;label = 4; break;
  case 3: 
   var $13=$2;
   var $14=(($13+4)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=$17;
   var $19=(($18) & 65535);
   var $20=(($19 << 16) >> 16);
   var $22 = $20;label = 4; break;
  case 4: 
   var $22;
   var $23=(($22) & 65535);
   $sym=$23;
   $n=0;
   $noop=0;
   $sendv=0;
   $blk=0;
   var $24=$1;
   var $25=$2;
   var $26=(($25)|0);
   var $27=HEAP32[(($26)>>2)];
   _codegen($24, $27, 1);
   var $28=$1;
   var $29=$sym;
   var $30=_new_msym($28, $29);
   $idx=$30;
   var $31=$2;
   var $32=(($31+4)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33+4)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35)|0);
   var $37=HEAP32[(($36)>>2)];
   $2=$37;
   var $38=$2;
   var $39=(($38)|(0))!=0;
   if ($39) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $41=$1;
   var $42=$2;
   var $43=(($42)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=_gen_values($41, $44, 1);
   $n=$45;
   var $46=$n;
   var $47=(($46)|(0)) < 0;
   if ($47) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $sendv=1;
   $noop=1;
   $n=1;
   var $49=$1;
   _push_($49);
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $52=$4;
   var $53=(($52)|(0))!=0;
   if ($53) { label = 9; break; } else { label = 13; break; }
  case 9: 
   var $55=$sendv;
   var $56=(($55)|(0))!=0;
   if ($56) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $58=$1;
   var $59=(($58+56)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=((($60)-(1))|0);
   HEAP32[(($59)>>2)]=$61;
   var $62=$1;
   var $63=$1;
   var $64=(($63+56)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=$65 & 511;
   var $67=$66 << 23;
   var $68=57 | $67;
   var $69=$4;
   var $70=$69 & 511;
   var $71=$70 << 14;
   var $72=$68 | $71;
   _genop($62, $72);
   var $73=$1;
   _push_($73);
   label = 12; break;
  case 11: 
   var $75=$1;
   var $76=$1;
   var $77=(($76+56)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=$78 & 511;
   var $80=$79 << 23;
   var $81=1 | $80;
   var $82=$4;
   var $83=$82 & 511;
   var $84=$83 << 14;
   var $85=$81 | $84;
   _genop($75, $85);
   var $86=$1;
   _push_($86);
   var $87=$n;
   var $88=((($87)+(1))|0);
   $n=$88;
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $91=$2;
   var $92=(($91)|(0))!=0;
   if ($92) { label = 14; break; } else { label = 16; break; }
  case 14: 
   var $94=$2;
   var $95=(($94+4)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($96)|(0))!=0;
   if ($97) { label = 15; break; } else { label = 16; break; }
  case 15: 
   $noop=1;
   var $99=$1;
   var $100=$2;
   var $101=(($100+4)|0);
   var $102=HEAP32[(($101)>>2)];
   _codegen($99, $102, 1);
   var $103=$1;
   var $104=(($103+56)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=((($105)-(1))|0);
   HEAP32[(($104)>>2)]=$106;
   label = 17; break;
  case 16: 
   var $108=$1;
   var $109=(($108+56)|0);
   var $110=HEAP32[(($109)>>2)];
   $blk=$110;
   label = 17; break;
  case 17: 
   var $112=$n;
   var $113=((($112)+(1))|0);
   var $114=$1;
   var $115=(($114+56)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=((($116)-($113))|0);
   HEAP32[(($115)>>2)]=$117;
   var $118=$1;
   var $119=(($118)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=$sym;
   var $122=_mrb_sym2name_len($120, $121, $len);
   $name1=$122;
   var $123=$noop;
   var $124=(($123)|(0))!=0;
   if ($124) { label = 21; break; } else { label = 18; break; }
  case 18: 
   var $126=HEAP32[(($len)>>2)];
   var $127=(($126)|(0))==1;
   if ($127) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $129=$name1;
   var $130=(($129)|0);
   var $131=HEAP8[($130)];
   var $132=(($131 << 24) >> 24);
   var $133=(($132)|(0))==43;
   if ($133) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $135=$1;
   var $136=$1;
   var $137=(($136+56)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=$138 & 511;
   var $140=$139 << 23;
   var $141=44 | $140;
   var $142=$idx;
   var $143=$142 & 511;
   var $144=$143 << 14;
   var $145=$141 | $144;
   var $146=$n;
   var $147=$146 & 127;
   var $148=$147 << 7;
   var $149=$145 | $148;
   var $150=$5;
   _genop_peep($135, $149, $150);
   label = 70; break;
  case 21: 
   var $152=$noop;
   var $153=(($152)|(0))!=0;
   if ($153) { label = 25; break; } else { label = 22; break; }
  case 22: 
   var $155=HEAP32[(($len)>>2)];
   var $156=(($155)|(0))==1;
   if ($156) { label = 23; break; } else { label = 25; break; }
  case 23: 
   var $158=$name1;
   var $159=(($158)|0);
   var $160=HEAP8[($159)];
   var $161=(($160 << 24) >> 24);
   var $162=(($161)|(0))==45;
   if ($162) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $164=$1;
   var $165=$1;
   var $166=(($165+56)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=$167 & 511;
   var $169=$168 << 23;
   var $170=46 | $169;
   var $171=$idx;
   var $172=$171 & 511;
   var $173=$172 << 14;
   var $174=$170 | $173;
   var $175=$n;
   var $176=$175 & 127;
   var $177=$176 << 7;
   var $178=$174 | $177;
   var $179=$5;
   _genop_peep($164, $178, $179);
   label = 69; break;
  case 25: 
   var $181=$noop;
   var $182=(($181)|(0))!=0;
   if ($182) { label = 29; break; } else { label = 26; break; }
  case 26: 
   var $184=HEAP32[(($len)>>2)];
   var $185=(($184)|(0))==1;
   if ($185) { label = 27; break; } else { label = 29; break; }
  case 27: 
   var $187=$name1;
   var $188=(($187)|0);
   var $189=HEAP8[($188)];
   var $190=(($189 << 24) >> 24);
   var $191=(($190)|(0))==42;
   if ($191) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $193=$1;
   var $194=$1;
   var $195=(($194+56)|0);
   var $196=HEAP32[(($195)>>2)];
   var $197=$196 & 511;
   var $198=$197 << 23;
   var $199=48 | $198;
   var $200=$idx;
   var $201=$200 & 511;
   var $202=$201 << 14;
   var $203=$199 | $202;
   var $204=$n;
   var $205=$204 & 127;
   var $206=$205 << 7;
   var $207=$203 | $206;
   _genop($193, $207);
   label = 68; break;
  case 29: 
   var $209=$noop;
   var $210=(($209)|(0))!=0;
   if ($210) { label = 33; break; } else { label = 30; break; }
  case 30: 
   var $212=HEAP32[(($len)>>2)];
   var $213=(($212)|(0))==1;
   if ($213) { label = 31; break; } else { label = 33; break; }
  case 31: 
   var $215=$name1;
   var $216=(($215)|0);
   var $217=HEAP8[($216)];
   var $218=(($217 << 24) >> 24);
   var $219=(($218)|(0))==47;
   if ($219) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $221=$1;
   var $222=$1;
   var $223=(($222+56)|0);
   var $224=HEAP32[(($223)>>2)];
   var $225=$224 & 511;
   var $226=$225 << 23;
   var $227=49 | $226;
   var $228=$idx;
   var $229=$228 & 511;
   var $230=$229 << 14;
   var $231=$227 | $230;
   var $232=$n;
   var $233=$232 & 127;
   var $234=$233 << 7;
   var $235=$231 | $234;
   _genop($221, $235);
   label = 67; break;
  case 33: 
   var $237=$noop;
   var $238=(($237)|(0))!=0;
   if ($238) { label = 37; break; } else { label = 34; break; }
  case 34: 
   var $240=HEAP32[(($len)>>2)];
   var $241=(($240)|(0))==1;
   if ($241) { label = 35; break; } else { label = 37; break; }
  case 35: 
   var $243=$name1;
   var $244=(($243)|0);
   var $245=HEAP8[($244)];
   var $246=(($245 << 24) >> 24);
   var $247=(($246)|(0))==60;
   if ($247) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $249=$1;
   var $250=$1;
   var $251=(($250+56)|0);
   var $252=HEAP32[(($251)>>2)];
   var $253=$252 & 511;
   var $254=$253 << 23;
   var $255=51 | $254;
   var $256=$idx;
   var $257=$256 & 511;
   var $258=$257 << 14;
   var $259=$255 | $258;
   var $260=$n;
   var $261=$260 & 127;
   var $262=$261 << 7;
   var $263=$259 | $262;
   _genop($249, $263);
   label = 66; break;
  case 37: 
   var $265=$noop;
   var $266=(($265)|(0))!=0;
   if ($266) { label = 42; break; } else { label = 38; break; }
  case 38: 
   var $268=HEAP32[(($len)>>2)];
   var $269=(($268)|(0))==2;
   if ($269) { label = 39; break; } else { label = 42; break; }
  case 39: 
   var $271=$name1;
   var $272=(($271)|0);
   var $273=HEAP8[($272)];
   var $274=(($273 << 24) >> 24);
   var $275=(($274)|(0))==60;
   if ($275) { label = 40; break; } else { label = 42; break; }
  case 40: 
   var $277=$name1;
   var $278=(($277+1)|0);
   var $279=HEAP8[($278)];
   var $280=(($279 << 24) >> 24);
   var $281=(($280)|(0))==61;
   if ($281) { label = 41; break; } else { label = 42; break; }
  case 41: 
   var $283=$1;
   var $284=$1;
   var $285=(($284+56)|0);
   var $286=HEAP32[(($285)>>2)];
   var $287=$286 & 511;
   var $288=$287 << 23;
   var $289=52 | $288;
   var $290=$idx;
   var $291=$290 & 511;
   var $292=$291 << 14;
   var $293=$289 | $292;
   var $294=$n;
   var $295=$294 & 127;
   var $296=$295 << 7;
   var $297=$293 | $296;
   _genop($283, $297);
   label = 65; break;
  case 42: 
   var $299=$noop;
   var $300=(($299)|(0))!=0;
   if ($300) { label = 46; break; } else { label = 43; break; }
  case 43: 
   var $302=HEAP32[(($len)>>2)];
   var $303=(($302)|(0))==1;
   if ($303) { label = 44; break; } else { label = 46; break; }
  case 44: 
   var $305=$name1;
   var $306=(($305)|0);
   var $307=HEAP8[($306)];
   var $308=(($307 << 24) >> 24);
   var $309=(($308)|(0))==62;
   if ($309) { label = 45; break; } else { label = 46; break; }
  case 45: 
   var $311=$1;
   var $312=$1;
   var $313=(($312+56)|0);
   var $314=HEAP32[(($313)>>2)];
   var $315=$314 & 511;
   var $316=$315 << 23;
   var $317=53 | $316;
   var $318=$idx;
   var $319=$318 & 511;
   var $320=$319 << 14;
   var $321=$317 | $320;
   var $322=$n;
   var $323=$322 & 127;
   var $324=$323 << 7;
   var $325=$321 | $324;
   _genop($311, $325);
   label = 64; break;
  case 46: 
   var $327=$noop;
   var $328=(($327)|(0))!=0;
   if ($328) { label = 51; break; } else { label = 47; break; }
  case 47: 
   var $330=HEAP32[(($len)>>2)];
   var $331=(($330)|(0))==2;
   if ($331) { label = 48; break; } else { label = 51; break; }
  case 48: 
   var $333=$name1;
   var $334=(($333)|0);
   var $335=HEAP8[($334)];
   var $336=(($335 << 24) >> 24);
   var $337=(($336)|(0))==62;
   if ($337) { label = 49; break; } else { label = 51; break; }
  case 49: 
   var $339=$name1;
   var $340=(($339+1)|0);
   var $341=HEAP8[($340)];
   var $342=(($341 << 24) >> 24);
   var $343=(($342)|(0))==61;
   if ($343) { label = 50; break; } else { label = 51; break; }
  case 50: 
   var $345=$1;
   var $346=$1;
   var $347=(($346+56)|0);
   var $348=HEAP32[(($347)>>2)];
   var $349=$348 & 511;
   var $350=$349 << 23;
   var $351=54 | $350;
   var $352=$idx;
   var $353=$352 & 511;
   var $354=$353 << 14;
   var $355=$351 | $354;
   var $356=$n;
   var $357=$356 & 127;
   var $358=$357 << 7;
   var $359=$355 | $358;
   _genop($345, $359);
   label = 63; break;
  case 51: 
   var $361=$noop;
   var $362=(($361)|(0))!=0;
   if ($362) { label = 56; break; } else { label = 52; break; }
  case 52: 
   var $364=HEAP32[(($len)>>2)];
   var $365=(($364)|(0))==2;
   if ($365) { label = 53; break; } else { label = 56; break; }
  case 53: 
   var $367=$name1;
   var $368=(($367)|0);
   var $369=HEAP8[($368)];
   var $370=(($369 << 24) >> 24);
   var $371=(($370)|(0))==61;
   if ($371) { label = 54; break; } else { label = 56; break; }
  case 54: 
   var $373=$name1;
   var $374=(($373+1)|0);
   var $375=HEAP8[($374)];
   var $376=(($375 << 24) >> 24);
   var $377=(($376)|(0))==61;
   if ($377) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $379=$1;
   var $380=$1;
   var $381=(($380+56)|0);
   var $382=HEAP32[(($381)>>2)];
   var $383=$382 & 511;
   var $384=$383 << 23;
   var $385=50 | $384;
   var $386=$idx;
   var $387=$386 & 511;
   var $388=$387 << 14;
   var $389=$385 | $388;
   var $390=$n;
   var $391=$390 & 127;
   var $392=$391 << 7;
   var $393=$389 | $392;
   _genop($379, $393);
   label = 62; break;
  case 56: 
   var $395=$sendv;
   var $396=(($395)|(0))!=0;
   if ($396) { label = 57; break; } else { label = 58; break; }
  case 57: 
   $n=127;
   label = 58; break;
  case 58: 
   var $399=$blk;
   var $400=(($399)|(0)) > 0;
   if ($400) { label = 59; break; } else { label = 60; break; }
  case 59: 
   var $402=$1;
   var $403=$1;
   var $404=(($403+56)|0);
   var $405=HEAP32[(($404)>>2)];
   var $406=$405 & 511;
   var $407=$406 << 23;
   var $408=32 | $407;
   var $409=$idx;
   var $410=$409 & 511;
   var $411=$410 << 14;
   var $412=$408 | $411;
   var $413=$n;
   var $414=$413 & 127;
   var $415=$414 << 7;
   var $416=$412 | $415;
   _genop($402, $416);
   label = 61; break;
  case 60: 
   var $418=$1;
   var $419=$1;
   var $420=(($419+56)|0);
   var $421=HEAP32[(($420)>>2)];
   var $422=$421 & 511;
   var $423=$422 << 23;
   var $424=33 | $423;
   var $425=$idx;
   var $426=$425 & 511;
   var $427=$426 << 14;
   var $428=$424 | $427;
   var $429=$n;
   var $430=$429 & 127;
   var $431=$430 << 7;
   var $432=$428 | $431;
   _genop($418, $432);
   label = 61; break;
  case 61: 
   label = 62; break;
  case 62: 
   label = 63; break;
  case 63: 
   label = 64; break;
  case 64: 
   label = 65; break;
  case 65: 
   label = 66; break;
  case 66: 
   label = 67; break;
  case 67: 
   label = 68; break;
  case 68: 
   label = 69; break;
  case 69: 
   label = 70; break;
  case 70: 
   var $443=$5;
   var $444=(($443)|(0))!=0;
   if ($444) { label = 71; break; } else { label = 72; break; }
  case 71: 
   var $446=$1;
   _push_($446);
   label = 72; break;
  case 72: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _new_sym925($s, $sym) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $i;
   $2=$s;
   $3=$sym;
   $i=0;
   label = 2; break;
  case 2: 
   var $5=$i;
   var $6=$2;
   var $7=(($6+100)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8+40)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($5)>>>(0)) < (($10)>>>(0));
   if ($11) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $13=$i;
   var $14=$2;
   var $15=(($14+100)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16+20)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18+($13<<1))|0);
   var $20=HEAP16[(($19)>>1)];
   var $21=(($20 << 16) >> 16);
   var $22=$3;
   var $23=(($22 << 16) >> 16);
   var $24=(($21)|(0))==(($23)|(0));
   if ($24) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $26=$i;
   $1=$26;
   label = 15; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $29=$i;
   var $30=((($29)+(1))|0);
   $i=$30;
   label = 2; break;
  case 7: 
   var $32=$2;
   var $33=(($32+100)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34+40)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36)>>>(0)) > 125;
   if ($37) { label = 8; break; } else { label = 14; break; }
  case 8: 
   var $39=$2;
   var $40=(($39+100)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($41+40)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43)>>>(0)) < 256;
   if ($44) { label = 9; break; } else { label = 14; break; }
  case 9: 
   var $46=$2;
   var $47=$2;
   var $48=(($47+100)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49+20)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$51;
   var $53=_codegen_realloc($46, $52, 131072);
   var $54=$53;
   var $55=$2;
   var $56=(($55+100)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57+20)|0);
   HEAP32[(($58)>>2)]=$54;
   $i=0;
   label = 10; break;
  case 10: 
   var $60=$i;
   var $61=$2;
   var $62=(($61+100)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=(($63+40)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(((256)-($65))|0);
   var $67=(($60)>>>(0)) < (($66)>>>(0));
   if ($67) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $69=$i;
   var $70=$2;
   var $71=(($70+100)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72+40)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=((($69)+($74))|0);
   var $76=$2;
   var $77=(($76+100)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=(($78+20)|0);
   var $80=HEAP32[(($79)>>2)];
   var $81=(($80+($75<<1))|0);
   HEAP16[(($81)>>1)]=0;
   label = 12; break;
  case 12: 
   var $83=$i;
   var $84=((($83)+(1))|0);
   $i=$84;
   label = 10; break;
  case 13: 
   var $86=$2;
   var $87=(($86+100)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=(($88+40)|0);
   HEAP32[(($89)>>2)]=256;
   label = 14; break;
  case 14: 
   var $91=$3;
   var $92=$2;
   var $93=(($92+100)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(($94+40)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=$2;
   var $98=(($97+100)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99+20)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101+($96<<1))|0);
   HEAP16[(($102)>>1)]=$91;
   var $103=$2;
   var $104=(($103+100)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=(($105+40)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=((($107)+(1))|0);
   HEAP32[(($106)>>2)]=$108;
   $1=$107;
   label = 15; break;
  case 15: 
   var $110=$1;
   return $110;
  default: assert(0, "bad label: " + label);
 }
}
function _nosplat($t) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $2=$t;
   label = 2; break;
  case 2: 
   var $4=$2;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $7=$2;
   var $8=(($7)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$11;
   var $13=(($12)|(0))==66;
   if ($13) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $1=0;
   label = 7; break;
  case 5: 
   var $16=$2;
   var $17=(($16+4)|0);
   var $18=HEAP32[(($17)>>2)];
   $2=$18;
   label = 2; break;
  case 6: 
   $1=1;
   label = 7; break;
  case 7: 
   var $21=$1;
   return $21;
  default: assert(0, "bad label: " + label);
 }
}
function _lv_idx($s, $id) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $lv;
   var $n;
   $2=$s;
   $3=$id;
   var $4=$2;
   var $5=(($4+52)|0);
   var $6=HEAP32[(($5)>>2)];
   $lv=$6;
   $n=1;
   label = 2; break;
  case 2: 
   var $8=$lv;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $11=$lv;
   var $12=(($11)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$13;
   var $15=(($14) & 65535);
   var $16=(($15 << 16) >> 16);
   var $17=$3;
   var $18=(($17 << 16) >> 16);
   var $19=(($16)|(0))==(($18)|(0));
   if ($19) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=$n;
   $1=$21;
   label = 7; break;
  case 5: 
   var $23=$n;
   var $24=((($23)+(1))|0);
   $n=$24;
   var $25=$lv;
   var $26=(($25+4)|0);
   var $27=HEAP32[(($26)>>2)];
   $lv=$27;
   label = 2; break;
  case 6: 
   $1=0;
   label = 7; break;
  case 7: 
   var $30=$1;
   return $30;
  default: assert(0, "bad label: " + label);
 }
}
function _gen_values($s, $t, $val) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $n;
   $2=$s;
   $3=$t;
   $4=$val;
   $n=0;
   label = 2; break;
  case 2: 
   var $6=$3;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 19; break; }
  case 3: 
   var $9=$n;
   var $10=(($9)|(0)) >= 127;
   if ($10) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $12=$3;
   var $13=(($12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$16;
   var $18=(($17)|(0))==66;
   if ($18) { label = 5; break; } else { label = 18; break; }
  case 5: 
   var $20=$4;
   var $21=(($20)|(0))!=0;
   if ($21) { label = 6; break; } else { label = 13; break; }
  case 6: 
   var $23=$n;
   var $24=$2;
   var $25=(($24+56)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=((($26)-($23))|0);
   HEAP32[(($25)>>2)]=$27;
   var $28=$2;
   var $29=$2;
   var $30=(($29+56)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$31 & 511;
   var $33=$32 << 23;
   var $34=55 | $33;
   var $35=$2;
   var $36=(($35+56)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=$37 & 511;
   var $39=$38 << 14;
   var $40=$34 | $39;
   var $41=$n;
   var $42=$41 & 127;
   var $43=$42 << 7;
   var $44=$40 | $43;
   _genop($28, $44);
   var $45=$2;
   _push_($45);
   var $46=$2;
   var $47=$3;
   var $48=(($47)|0);
   var $49=HEAP32[(($48)>>2)];
   _codegen($46, $49, 1);
   var $50=$2;
   var $51=(($50+56)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=((($52)-(1))|0);
   HEAP32[(($51)>>2)]=$53;
   var $54=$2;
   var $55=(($54+56)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=((($56)-(1))|0);
   HEAP32[(($55)>>2)]=$57;
   var $58=$2;
   var $59=$2;
   var $60=(($59+56)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=$61 & 511;
   var $63=$62 << 23;
   var $64=56 | $63;
   var $65=$2;
   var $66=(($65+56)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=((($67)+(1))|0);
   var $69=$68 & 511;
   var $70=$69 << 14;
   var $71=$64 | $70;
   _genop($58, $71);
   var $72=$3;
   var $73=(($72+4)|0);
   var $74=HEAP32[(($73)>>2)];
   $3=$74;
   label = 7; break;
  case 7: 
   var $76=$3;
   var $77=(($76)|(0))!=0;
   if ($77) { label = 8; break; } else { label = 12; break; }
  case 8: 
   var $79=$2;
   _push_($79);
   var $80=$2;
   var $81=$3;
   var $82=(($81)|0);
   var $83=HEAP32[(($82)>>2)];
   _codegen($80, $83, 1);
   var $84=$2;
   var $85=(($84+56)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=((($86)-(1))|0);
   HEAP32[(($85)>>2)]=$87;
   var $88=$2;
   var $89=(($88+56)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=((($90)-(1))|0);
   HEAP32[(($89)>>2)]=$91;
   var $92=$3;
   var $93=(($92)|0);
   var $94=HEAP32[(($93)>>2)];
   var $95=(($94)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=$96;
   var $98=(($97)|(0))==66;
   if ($98) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $100=$2;
   var $101=$2;
   var $102=(($101+56)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=$103 & 511;
   var $105=$104 << 23;
   var $106=56 | $105;
   var $107=$2;
   var $108=(($107+56)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=((($109)+(1))|0);
   var $111=$110 & 511;
   var $112=$111 << 14;
   var $113=$106 | $112;
   _genop($100, $113);
   label = 11; break;
  case 10: 
   var $115=$2;
   var $116=$2;
   var $117=(($116+56)|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=$118 & 511;
   var $120=$119 << 23;
   var $121=57 | $120;
   var $122=$2;
   var $123=(($122+56)|0);
   var $124=HEAP32[(($123)>>2)];
   var $125=((($124)+(1))|0);
   var $126=$125 & 511;
   var $127=$126 << 14;
   var $128=$121 | $127;
   _genop($115, $128);
   label = 11; break;
  case 11: 
   var $130=$3;
   var $131=(($130+4)|0);
   var $132=HEAP32[(($131)>>2)];
   $3=$132;
   label = 7; break;
  case 12: 
   label = 17; break;
  case 13: 
   var $135=$2;
   var $136=$3;
   var $137=(($136)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(($138+4)|0);
   var $140=HEAP32[(($139)>>2)];
   _codegen($135, $140, 0);
   var $141=$3;
   var $142=(($141+4)|0);
   var $143=HEAP32[(($142)>>2)];
   $3=$143;
   label = 14; break;
  case 14: 
   var $145=$3;
   var $146=(($145)|(0))!=0;
   if ($146) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $148=$2;
   var $149=$3;
   var $150=(($149)|0);
   var $151=HEAP32[(($150)>>2)];
   _codegen($148, $151, 0);
   var $152=$3;
   var $153=(($152+4)|0);
   var $154=HEAP32[(($153)>>2)];
   $3=$154;
   label = 14; break;
  case 16: 
   label = 17; break;
  case 17: 
   $1=-1;
   label = 20; break;
  case 18: 
   var $158=$2;
   var $159=$3;
   var $160=(($159)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=$4;
   _codegen($158, $161, $162);
   var $163=$n;
   var $164=((($163)+(1))|0);
   $n=$164;
   var $165=$3;
   var $166=(($165+4)|0);
   var $167=HEAP32[(($166)>>2)];
   $3=$167;
   label = 2; break;
  case 19: 
   var $169=$n;
   $1=$169;
   label = 20; break;
  case 20: 
   var $171=$1;
   return $171;
  default: assert(0, "bad label: " + label);
 }
}
function _gen_vmassignment($s, $tree, $rhs, $val) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $n;
   var $post;
   var $t;
   var $p;
   $1=$s;
   $2=$tree;
   $3=$rhs;
   $4=$val;
   $n=0;
   $post=0;
   var $5=$2;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))!=0;
   if ($8) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $10=$2;
   var $11=(($10)|0);
   var $12=HEAP32[(($11)>>2)];
   $t=$12;
   $n=0;
   label = 3; break;
  case 3: 
   var $14=$t;
   var $15=(($14)|(0))!=0;
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $17=$1;
   var $18=$1;
   var $19=(($18+56)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=$20 & 511;
   var $22=$21 << 23;
   var $23=58 | $22;
   var $24=$3;
   var $25=$24 & 511;
   var $26=$25 << 14;
   var $27=$23 | $26;
   var $28=$n;
   var $29=$28 & 127;
   var $30=$29 << 7;
   var $31=$27 | $30;
   _genop($17, $31);
   var $32=$1;
   var $33=$t;
   var $34=(($33)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=$1;
   var $37=(($36+56)|0);
   var $38=HEAP32[(($37)>>2)];
   _gen_assignment($32, $35, $38, 0);
   var $39=$n;
   var $40=((($39)+(1))|0);
   $n=$40;
   var $41=$t;
   var $42=(($41+4)|0);
   var $43=HEAP32[(($42)>>2)];
   $t=$43;
   label = 3; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $46=$2;
   var $47=(($46+4)|0);
   var $48=HEAP32[(($47)>>2)];
   $t=$48;
   var $49=$t;
   var $50=(($49)|(0))!=0;
   if ($50) { label = 7; break; } else { label = 23; break; }
  case 7: 
   var $52=$t;
   var $53=(($52+4)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($54)|(0))!=0;
   if ($55) { label = 8; break; } else { label = 12; break; }
  case 8: 
   var $57=$t;
   var $58=(($57+4)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=(($59)|0);
   var $61=HEAP32[(($60)>>2)];
   $p=$61;
   label = 9; break;
  case 9: 
   var $63=$p;
   var $64=(($63)|(0))!=0;
   if ($64) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $66=$post;
   var $67=((($66)+(1))|0);
   $post=$67;
   var $68=$p;
   var $69=(($68+4)|0);
   var $70=HEAP32[(($69)>>2)];
   $p=$70;
   label = 9; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $73=$4;
   var $74=(($73)|(0))!=0;
   if ($74) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $76=$1;
   var $77=$1;
   var $78=(($77+56)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=$79 & 511;
   var $81=$80 << 23;
   var $82=1 | $81;
   var $83=$3;
   var $84=$83 & 511;
   var $85=$84 << 14;
   var $86=$82 | $85;
   _genop($76, $86);
   var $87=$1;
   _push_($87);
   label = 14; break;
  case 14: 
   var $89=$1;
   var $90=(($89+56)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=((($91)-(1))|0);
   HEAP32[(($90)>>2)]=$92;
   var $93=$1;
   var $94=$1;
   var $95=(($94+56)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=$96 & 511;
   var $98=$97 << 23;
   var $99=60 | $98;
   var $100=$n;
   var $101=$100 & 511;
   var $102=$101 << 14;
   var $103=$99 | $102;
   var $104=$post;
   var $105=$104 & 127;
   var $106=$105 << 7;
   var $107=$103 | $106;
   _genop($93, $107);
   $n=1;
   var $108=$t;
   var $109=(($108)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=(($110)|(0))!=0;
   if ($111) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $113=$1;
   var $114=$t;
   var $115=(($114)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=$1;
   var $118=(($117+56)|0);
   var $119=HEAP32[(($118)>>2)];
   _gen_assignment($113, $116, $119, 0);
   label = 16; break;
  case 16: 
   var $121=$t;
   var $122=(($121+4)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124=(($123)|(0))!=0;
   if ($124) { label = 17; break; } else { label = 22; break; }
  case 17: 
   var $126=$t;
   var $127=(($126+4)|0);
   var $128=HEAP32[(($127)>>2)];
   var $129=(($128)|0);
   var $130=HEAP32[(($129)>>2)];
   var $131=(($130)|(0))!=0;
   if ($131) { label = 18; break; } else { label = 22; break; }
  case 18: 
   var $133=$t;
   var $134=(($133+4)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=(($135)|0);
   var $137=HEAP32[(($136)>>2)];
   $t=$137;
   label = 19; break;
  case 19: 
   var $139=$t;
   var $140=(($139)|(0))!=0;
   if ($140) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $142=$1;
   var $143=$t;
   var $144=(($143)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=$1;
   var $147=(($146+56)|0);
   var $148=HEAP32[(($147)>>2)];
   var $149=$n;
   var $150=((($148)+($149))|0);
   _gen_assignment($142, $145, $150, 0);
   var $151=$t;
   var $152=(($151+4)|0);
   var $153=HEAP32[(($152)>>2)];
   $t=$153;
   var $154=$n;
   var $155=((($154)+(1))|0);
   $n=$155;
   label = 19; break;
  case 21: 
   label = 22; break;
  case 22: 
   label = 23; break;
  case 23: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _loop_break($s, $tree) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $loop;
   var $tmp;
   $1=$s;
   $2=$tree;
   var $3=$1;
   var $4=(($3+72)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=$1;
   var $9=$2;
   _codegen($8, $9, 0);
   var $10=$1;
   _raise_error($10, ((101508)|0));
   label = 19; break;
  case 3: 
   var $12=$2;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $15=$1;
   var $16=$2;
   _codegen($15, $16, 1);
   var $17=$1;
   var $18=(($17+56)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=((($19)-(1))|0);
   HEAP32[(($18)>>2)]=$20;
   label = 5; break;
  case 5: 
   var $22=$1;
   var $23=(($22+72)|0);
   var $24=HEAP32[(($23)>>2)];
   $loop=$24;
   label = 6; break;
  case 6: 
   var $26=$loop;
   var $27=(($26)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|(0))==3;
   if ($29) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $31=$1;
   _genop_peep($31, 8388636, 0);
   var $32=$loop;
   var $33=(($32+24)|0);
   var $34=HEAP32[(($33)>>2)];
   $loop=$34;
   label = 6; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $37=$loop;
   var $38=(($37)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39)|(0))==4;
   if ($40) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $42=$loop;
   var $43=(($42+24)|0);
   var $44=HEAP32[(($43)>>2)];
   $loop=$44;
   label = 9; break;
  case 11: 
   var $46=$loop;
   var $47=(($46)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($48)|(0))==0;
   if ($49) { label = 12; break; } else { label = 17; break; }
  case 12: 
   var $51=$1;
   var $52=(($51+76)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=$1;
   var $55=(($54+72)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56+20)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($53)|(0)) > (($58)|(0));
   if ($59) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $61=$1;
   var $62=$1;
   var $63=(($62+76)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=$1;
   var $66=(($65+72)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67+20)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=((($64)-($69))|0);
   var $71=$70 & 511;
   var $72=$71 << 23;
   var $73=31 | $72;
   _genop_peep($61, $73, 0);
   label = 14; break;
  case 14: 
   var $75=$2;
   var $76=(($75)|(0))!=0;
   if ($76) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $78=$1;
   var $79=$loop;
   var $80=(($79+16)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$81 & 511;
   var $83=$82 << 23;
   var $84=1 | $83;
   var $85=$1;
   var $86=(($85+56)|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=$87 & 511;
   var $89=$88 << 14;
   var $90=$84 | $89;
   _genop_peep($78, $90, 0);
   label = 16; break;
  case 16: 
   var $92=$1;
   var $93=_new_label($92);
   $tmp=$93;
   var $94=$1;
   var $95=$loop;
   var $96=(($95+12)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=((($97)+(32767))|0);
   var $99=$98 & 65535;
   var $100=$99 << 7;
   var $101=23 | $100;
   _genop($94, $101);
   var $102=$tmp;
   var $103=$loop;
   var $104=(($103+12)|0);
   HEAP32[(($104)>>2)]=$102;
   label = 18; break;
  case 17: 
   var $106=$1;
   var $107=$1;
   var $108=(($107+56)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=$109 & 511;
   var $111=$110 << 23;
   var $112=41 | $111;
   var $113=$112 | 16384;
   _genop($106, $113);
   label = 18; break;
  case 18: 
   label = 19; break;
  case 19: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _raise_error($s, $msg) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $idx;
 var $3=sp;
 $1=$s;
 $2=$msg;
 var $4=$1;
 var $5=$1;
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 _mrb_str_new_cstr($3, $7, $8);
 var $9=_new_lit($4, $3);
 $idx=$9;
 var $10=$1;
 var $11=$idx;
 var $12=$11 & 65535;
 var $13=$12 << 7;
 var $14=8388683 | $13;
 _genop($10, $14);
 STACKTOP = sp;
 return;
}
function _mrb_fixnum_value926($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _readint_mrb_int($s, $p, $base, $neg, $overflow) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $e;
   var $result;
   var $n;
   var $c;
   $2=$s;
   $3=$p;
   $4=$base;
   $5=$neg;
   $6=$overflow;
   var $7=$3;
   var $8=$3;
   var $9=_strlen($8);
   var $10=(($7+$9)|0);
   $e=$10;
   $result=0;
   var $11=$3;
   var $12=HEAP8[($11)];
   var $13=(($12 << 24) >> 24);
   var $14=(($13)|(0))==43;
   if ($14) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $16=$3;
   var $17=(($16+1)|0);
   $3=$17;
   label = 3; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $20=$3;
   var $21=$e;
   var $22=(($20)>>>(0)) < (($21)>>>(0));
   if ($22) { label = 5; break; } else { label = 21; break; }
  case 5: 
   var $24=$3;
   var $25=HEAP8[($24)];
   $c=$25;
   var $26=$c;
   var $27=(($26)&(255));
   var $28=_tolower($27);
   var $29=(($28) & 255);
   $c=$29;
   $n=0;
   label = 6; break;
  case 6: 
   var $31=$n;
   var $32=$4;
   var $33=(($31)|(0)) < (($32)|(0));
   if ($33) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $35=$n;
   var $36=((75064+$35)|0);
   var $37=HEAP8[($36)];
   var $38=(($37 << 24) >> 24);
   var $39=$c;
   var $40=(($39 << 24) >> 24);
   var $41=(($38)|(0))==(($40)|(0));
   if ($41) { label = 8; break; } else { label = 9; break; }
  case 8: 
   label = 11; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $45=$n;
   var $46=((($45)+(1))|0);
   $n=$46;
   label = 6; break;
  case 11: 
   var $48=$n;
   var $49=$4;
   var $50=(($48)|(0))==(($49)|(0));
   if ($50) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $52=$2;
   _codegen_error($52, ((101992)|0));
   label = 13; break;
  case 13: 
   var $54=$5;
   var $55=(($54)|(0))!=0;
   if ($55) { label = 14; break; } else { label = 17; break; }
  case 14: 
   var $57=$n;
   var $58=((($57)-(2147483648))|0);
   var $59=$4;
   var $60=((((($58)|(0)))/((($59)|(0))))&-1);
   var $61=$result;
   var $62=(($60)|(0)) > (($61)|(0));
   if ($62) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $64=$6;
   HEAP32[(($64)>>2)]=1;
   $1=0;
   label = 22; break;
  case 16: 
   var $66=$4;
   var $67=$result;
   var $68=(Math.imul($67,$66)|0);
   $result=$68;
   var $69=$n;
   var $70=$result;
   var $71=((($70)-($69))|0);
   $result=$71;
   label = 20; break;
  case 17: 
   var $73=$n;
   var $74=(((2147483647)-($73))|0);
   var $75=$4;
   var $76=((((($74)|(0)))/((($75)|(0))))&-1);
   var $77=$result;
   var $78=(($76)|(0)) < (($77)|(0));
   if ($78) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $80=$6;
   HEAP32[(($80)>>2)]=1;
   $1=0;
   label = 22; break;
  case 19: 
   var $82=$4;
   var $83=$result;
   var $84=(Math.imul($83,$82)|0);
   $result=$84;
   var $85=$n;
   var $86=$result;
   var $87=((($86)+($85))|0);
   $result=$87;
   label = 20; break;
  case 20: 
   var $89=$3;
   var $90=(($89+1)|0);
   $3=$90;
   label = 4; break;
  case 21: 
   var $92=$6;
   HEAP32[(($92)>>2)]=0;
   var $93=$result;
   $1=$93;
   label = 22; break;
  case 22: 
   var $95=$1;
   return $95;
  default: assert(0, "bad label: " + label);
 }
}
function _node_len($tree) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $n;
   $1=$tree;
   $n=0;
   label = 2; break;
  case 2: 
   var $3=$1;
   var $4=(($3)|(0))!=0;
   if ($4) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $6=$n;
   var $7=((($6)+(1))|0);
   $n=$7;
   var $8=$1;
   var $9=(($8+4)|0);
   var $10=HEAP32[(($9)>>2)];
   $1=$10;
   label = 2; break;
  case 4: 
   var $12=$n;
   return $12;
  default: assert(0, "bad label: " + label);
 }
}
function _calc_crc_16_ccitt($src, $nbytes, $crc) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $ibyte;
   var $ibit;
   var $crcwk;
   $1=$src;
   $2=$nbytes;
   $3=$crc;
   var $4=$3;
   var $5=(($4)&(65535));
   var $6=$5 << 8;
   $crcwk=$6;
   $ibyte=0;
   label = 2; break;
  case 2: 
   var $8=$ibyte;
   var $9=$2;
   var $10=(($8)>>>(0)) < (($9)>>>(0));
   if ($10) { label = 3; break; } else { label = 11; break; }
  case 3: 
   var $12=$1;
   var $13=(($12+1)|0);
   $1=$13;
   var $14=HEAP8[($12)];
   var $15=(($14)&(255));
   var $16=$crcwk;
   var $17=$16 | $15;
   $crcwk=$17;
   $ibit=0;
   label = 4; break;
  case 4: 
   var $19=$ibit;
   var $20=(($19)>>>(0)) < 8;
   if ($20) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $22=$crcwk;
   var $23=$22 << 1;
   $crcwk=$23;
   var $24=$crcwk;
   var $25=$24 & 16777216;
   var $26=(($25)|(0))!=0;
   if ($26) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $28=$crcwk;
   var $29=$28 ^ 17834240;
   $crcwk=$29;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $32=$ibit;
   var $33=((($32)+(1))|0);
   $ibit=$33;
   label = 4; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $36=$ibyte;
   var $37=((($36)+(1))|0);
   $ibyte=$37;
   label = 2; break;
  case 11: 
   var $39=$crcwk;
   var $40=$39 >>> 8;
   var $41=(($40) & 65535);
   return $41;
  default: assert(0, "bad label: " + label);
 }
}
function _readint_float($s, $p, $base) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $e;
   var $f;
   var $n;
   var $c;
   $1=$s;
   $2=$p;
   $3=$base;
   var $4=$2;
   var $5=$2;
   var $6=_strlen($5);
   var $7=(($4+$6)|0);
   $e=$7;
   $f=0;
   var $8=$2;
   var $9=HEAP8[($8)];
   var $10=(($9 << 24) >> 24);
   var $11=(($10)|(0))==43;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$2;
   var $14=(($13+1)|0);
   $2=$14;
   label = 3; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $17=$2;
   var $18=$e;
   var $19=(($17)>>>(0)) < (($18)>>>(0));
   if ($19) { label = 5; break; } else { label = 14; break; }
  case 5: 
   var $21=$2;
   var $22=HEAP8[($21)];
   $c=$22;
   var $23=$c;
   var $24=(($23)&(255));
   var $25=_tolower($24);
   var $26=(($25) & 255);
   $c=$26;
   $n=0;
   label = 6; break;
  case 6: 
   var $28=$n;
   var $29=$3;
   var $30=(($28)|(0)) < (($29)|(0));
   if ($30) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $32=$n;
   var $33=((75064+$32)|0);
   var $34=HEAP8[($33)];
   var $35=(($34 << 24) >> 24);
   var $36=$c;
   var $37=(($36 << 24) >> 24);
   var $38=(($35)|(0))==(($37)|(0));
   if ($38) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $40=$3;
   var $41=(($40)|(0));
   var $42=$f;
   var $43=($42)*($41);
   $f=$43;
   var $44=$n;
   var $45=(($44)|(0));
   var $46=$f;
   var $47=($46)+($45);
   $f=$47;
   label = 11; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $50=$n;
   var $51=((($50)+(1))|0);
   $n=$51;
   label = 6; break;
  case 11: 
   var $53=$n;
   var $54=$3;
   var $55=(($53)|(0))==(($54)|(0));
   if ($55) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $57=$1;
   _codegen_error($57, ((101992)|0));
   label = 13; break;
  case 13: 
   var $59=$2;
   var $60=(($59+1)|0);
   $2=$60;
   label = 4; break;
  case 14: 
   var $62=$f;
   return $62;
  default: assert(0, "bad label: " + label);
 }
}
function _new_lit($s, $val) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $i;
   var $pv=sp;
   var $len;
   $2=$s;
   var $3=(($val+8)|0);
   var $4=HEAP32[(($3)>>2)];
   if ((($4)|(0))==16) {
    label = 2; break;
   }
   else if ((($4)|(0))==6) {
    label = 13; break;
   }
   else {
   label = 14; break;
   }
  case 2: 
   $i=0;
   label = 3; break;
  case 3: 
   var $7=$i;
   var $8=$2;
   var $9=(($8+100)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10+36)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($7)>>>(0)) < (($12)>>>(0));
   if ($13) { label = 4; break; } else { label = 12; break; }
  case 4: 
   var $15=$i;
   var $16=$2;
   var $17=(($16+100)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18+16)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+((($15)*(12))&-1))|0);
   var $22=$pv;
   var $23=$21;
   assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
   var $24=(($pv+8)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25)|(0))!=16;
   if ($26) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 11; break;
  case 6: 
   var $29=(($pv)|0);
   var $30=$29;
   var $31=HEAP32[(($30)>>2)];
   var $32=$31;
   var $33=(($32+12)|0);
   var $34=HEAP32[(($33)>>2)];
   $len=$34;
   var $35=(($val)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=$37;
   var $39=(($38+12)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($34)|(0))!=(($40)|(0));
   if ($41) { label = 7; break; } else { label = 8; break; }
  case 7: 
   label = 11; break;
  case 8: 
   var $44=(($pv)|0);
   var $45=$44;
   var $46=HEAP32[(($45)>>2)];
   var $47=$46;
   var $48=(($47+20)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($val)|0);
   var $51=$50;
   var $52=HEAP32[(($51)>>2)];
   var $53=$52;
   var $54=(($53+20)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=$len;
   var $57=_memcmp($49, $55, $56);
   var $58=(($57)|(0))==0;
   if ($58) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $60=$i;
   $1=$60;
   label = 24; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $63=$i;
   var $64=((($63)+(1))|0);
   $i=$64;
   label = 3; break;
  case 12: 
   label = 21; break;
  case 13: 
   label = 14; break;
  case 14: 
   $i=0;
   label = 15; break;
  case 15: 
   var $69=$i;
   var $70=$2;
   var $71=(($70+100)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72+36)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=(($69)>>>(0)) < (($74)>>>(0));
   if ($75) { label = 16; break; } else { label = 20; break; }
  case 16: 
   var $77=$2;
   var $78=(($77)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=$i;
   var $81=$2;
   var $82=(($81+100)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83+16)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85+((($80)*(12))&-1))|0);
   var $87=_mrb_obj_equal($79, $86, $val);
   var $88=(($87 << 24) >> 24)!=0;
   if ($88) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $90=$i;
   $1=$90;
   label = 24; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $93=$i;
   var $94=((($93)+(1))|0);
   $i=$94;
   label = 15; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $97=$2;
   var $98=(($97+100)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99+36)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=$2;
   var $103=(($102+104)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($101)|(0))==(($104)|(0));
   if ($105) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $107=$2;
   var $108=(($107+104)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=($109<<1);
   HEAP32[(($108)>>2)]=$110;
   var $111=$2;
   var $112=$2;
   var $113=(($112+100)|0);
   var $114=HEAP32[(($113)>>2)];
   var $115=(($114+16)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=$116;
   var $118=$2;
   var $119=(($118+104)|0);
   var $120=HEAP32[(($119)>>2)];
   var $121=((($120)*(12))&-1);
   var $122=_codegen_realloc($111, $117, $121);
   var $123=$122;
   var $124=$2;
   var $125=(($124+100)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=(($126+16)|0);
   HEAP32[(($127)>>2)]=$123;
   label = 23; break;
  case 23: 
   var $129=$2;
   var $130=(($129+100)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132=(($131+36)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=$2;
   var $135=(($134+100)|0);
   var $136=HEAP32[(($135)>>2)];
   var $137=(($136+16)|0);
   var $138=HEAP32[(($137)>>2)];
   var $139=(($138+((($133)*(12))&-1))|0);
   var $140=$139;
   var $141=$val;
   assert(12 % 1 === 0);HEAP32[(($140)>>2)]=HEAP32[(($141)>>2)];HEAP32[((($140)+(4))>>2)]=HEAP32[((($141)+(4))>>2)];HEAP32[((($140)+(8))>>2)]=HEAP32[((($141)+(8))>>2)];
   var $142=$2;
   var $143=(($142+100)|0);
   var $144=HEAP32[(($143)>>2)];
   var $145=(($144+36)|0);
   var $146=HEAP32[(($145)>>2)];
   var $147=((($146)+(1))|0);
   HEAP32[(($145)>>2)]=$147;
   $i=$146;
   var $148=$i;
   $1=$148;
   label = 24; break;
  case 24: 
   var $150=$1;
   STACKTOP = sp;
   return $150;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_float_value927($agg_result, $mrb, $f) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $v=sp;
   $1=$mrb;
   $2=$f;
   label = 2; break;
  case 2: 
   var $4=(($v+8)|0);
   HEAP32[(($4)>>2)]=6;
   var $5=$2;
   var $6=(($v)|0);
   var $7=$6;
   (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($7)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($7)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 3; break;
  case 3: 
   var $9=$agg_result;
   var $10=$v;
   assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _gen_literal_array($s, $tree, $sym, $val) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $i;
   var $j;
   $1=$s;
   $2=$tree;
   $3=$sym;
   $4=$val;
   var $5=$4;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 23; break; }
  case 2: 
   $i=0;
   $j=0;
   label = 3; break;
  case 3: 
   var $9=$2;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 4; break; } else { label = 18; break; }
  case 4: 
   var $12=$2;
   var $13=(($12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$16;
   if ((($17)|(0))==55) {
    label = 5; break;
   }
   else if ((($17)|(0))==17) {
    label = 9; break;
   }
   else if ((($17)|(0))==100) {
    label = 10; break;
   }
   else {
   label = 15; break;
   }
  case 5: 
   var $19=$2;
   var $20=(($19+4)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21)|(0))==0;
   if ($22) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $24=$2;
   var $25=(($24)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26+4)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28+4)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$30;
   var $32=(($31)|(0))==0;
   if ($32) { label = 7; break; } else { label = 8; break; }
  case 7: 
   label = 15; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $36=$1;
   var $37=$2;
   var $38=(($37)|0);
   var $39=HEAP32[(($38)>>2)];
   _codegen($36, $39, 1);
   var $40=$j;
   var $41=((($40)+(1))|0);
   $j=$41;
   label = 15; break;
  case 10: 
   var $43=$j;
   var $44=(($43)|(0)) > 0;
   if ($44) { label = 11; break; } else { label = 14; break; }
  case 11: 
   $j=0;
   var $46=$i;
   var $47=((($46)+(1))|0);
   $i=$47;
   var $48=$3;
   var $49=(($48)|(0))!=0;
   if ($49) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $51=$1;
   _gen_send_intern($51);
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $55=$j;
   var $56=(($55)|(0)) >= 2;
   if ($56) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $58=$1;
   var $59=(($58+56)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=((($60)-(1))|0);
   HEAP32[(($59)>>2)]=$61;
   var $62=$1;
   var $63=(($62+56)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=((($64)-(1))|0);
   HEAP32[(($63)>>2)]=$65;
   var $66=$1;
   var $67=$1;
   var $68=(($67+56)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=$69 & 511;
   var $71=$70 << 23;
   var $72=62 | $71;
   var $73=$1;
   var $74=(($73+56)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=((($75)+(1))|0);
   var $77=$76 & 511;
   var $78=$77 << 14;
   var $79=$72 | $78;
   _genop_peep($66, $79, 1);
   var $80=$1;
   _push_($80);
   $j=1;
   label = 17; break;
  case 17: 
   var $82=$2;
   var $83=(($82+4)|0);
   var $84=HEAP32[(($83)>>2)];
   $2=$84;
   label = 3; break;
  case 18: 
   var $86=$j;
   var $87=(($86)|(0)) > 0;
   if ($87) { label = 19; break; } else { label = 22; break; }
  case 19: 
   var $89=$i;
   var $90=((($89)+(1))|0);
   $i=$90;
   var $91=$3;
   var $92=(($91)|(0))!=0;
   if ($92) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $94=$1;
   _gen_send_intern($94);
   label = 21; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $97=$i;
   var $98=$1;
   var $99=(($98+56)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=((($100)-($97))|0);
   HEAP32[(($99)>>2)]=$101;
   var $102=$1;
   var $103=$1;
   var $104=(($103+56)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=$105 & 511;
   var $107=$106 << 23;
   var $108=55 | $107;
   var $109=$1;
   var $110=(($109+56)|0);
   var $111=HEAP32[(($110)>>2)];
   var $112=$111 & 511;
   var $113=$112 << 14;
   var $114=$108 | $113;
   var $115=$i;
   var $116=$115 & 127;
   var $117=$116 << 7;
   var $118=$114 | $117;
   _genop($102, $118);
   var $119=$1;
   _push_($119);
   label = 29; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $122=$2;
   var $123=(($122)|(0))!=0;
   if ($123) { label = 25; break; } else { label = 28; break; }
  case 25: 
   var $125=$2;
   var $126=(($125)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=(($127)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=$129;
   if ((($130)|(0))==17 | (($130)|(0))==4) {
    label = 26; break;
   }
   else {
   label = 27; break;
   }
  case 26: 
   var $132=$1;
   var $133=$2;
   var $134=(($133)|0);
   var $135=HEAP32[(($134)>>2)];
   _codegen($132, $135, 0);
   label = 27; break;
  case 27: 
   var $137=$2;
   var $138=(($137+4)|0);
   var $139=HEAP32[(($138)>>2)];
   $2=$139;
   label = 24; break;
  case 28: 
   label = 29; break;
  case 29: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _gen_send_intern($s) {
 var label = 0;
 var $1;
 $1=$s;
 var $2=$1;
 var $3=(($2+56)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(1))|0);
 HEAP32[(($3)>>2)]=$5;
 var $6=$1;
 var $7=$1;
 var $8=(($7+56)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$9 & 511;
 var $11=$10 << 23;
 var $12=32 | $11;
 var $13=$1;
 var $14=$1;
 var $15=(($14)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=_mrb_intern2($16, ((102376)|0), 6);
 var $18=_new_msym($13, $17);
 var $19=$18 & 511;
 var $20=$19 << 14;
 var $21=$12 | $20;
 _genop($6, $21);
 var $22=$1;
 _push_($22);
 return;
}
function _scope_finish($s) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $mrb;
   var $irep;
   var $fname_len;
   var $fname;
   $1=$s;
   var $2=$1;
   var $3=(($2)|0);
   var $4=HEAP32[(($3)>>2)];
   $mrb=$4;
   var $5=$1;
   var $6=(($5+100)|0);
   var $7=HEAP32[(($6)>>2)];
   $irep=$7;
   var $8=$irep;
   var $9=(($8+8)|0);
   HEAP8[($9)]=0;
   var $10=$1;
   var $11=(($10+88)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))!=0;
   if ($13) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $15=$1;
   var $16=$1;
   var $17=(($16+88)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$18;
   var $20=$1;
   var $21=(($20+60)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=($22<<2);
   var $24=_codegen_realloc($15, $19, $23);
   var $25=$24;
   var $26=$irep;
   var $27=(($26+12)|0);
   HEAP32[(($27)>>2)]=$25;
   var $28=$1;
   var $29=(($28+60)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$irep;
   var $32=(($31+32)|0);
   HEAP32[(($32)>>2)]=$30;
   var $33=$1;
   var $34=(($33+92)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35)|(0))!=0;
   if ($36) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $38=$1;
   var $39=$1;
   var $40=(($39+92)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$41;
   var $43=$1;
   var $44=(($43+60)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=($45<<1);
   var $47=_codegen_realloc($38, $42, $46);
   var $48=$47;
   var $49=$irep;
   var $50=(($49+28)|0);
   HEAP32[(($50)>>2)]=$48;
   label = 5; break;
  case 4: 
   var $52=$irep;
   var $53=(($52+28)|0);
   HEAP32[(($53)>>2)]=0;
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $56=$1;
   var $57=$irep;
   var $58=(($57+16)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=$59;
   var $61=$irep;
   var $62=(($61+36)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=((($63)*(12))&-1);
   var $65=_codegen_realloc($56, $60, $64);
   var $66=$65;
   var $67=$irep;
   var $68=(($67+16)|0);
   HEAP32[(($68)>>2)]=$66;
   var $69=$1;
   var $70=$irep;
   var $71=(($70+20)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=$72;
   var $74=$irep;
   var $75=(($74+40)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=($76<<1);
   var $78=_codegen_realloc($69, $73, $77);
   var $79=$78;
   var $80=$irep;
   var $81=(($80+20)|0);
   HEAP32[(($81)>>2)]=$79;
   var $82=$1;
   var $83=(($82+80)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=(($84)|(0))!=0;
   if ($85) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $87=$1;
   var $88=(($87+80)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=_strlen($89);
   $fname_len=$90;
   var $91=$1;
   var $92=$fname_len;
   var $93=((($92)+(1))|0);
   var $94=_codegen_malloc($91, $93);
   $fname=$94;
   var $95=$fname;
   var $96=$1;
   var $97=(($96+80)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=$fname_len;
   assert($99 % 1 === 0);(_memcpy($95, $98, $99)|0);
   var $100=$fname_len;
   var $101=$fname;
   var $102=(($101+$100)|0);
   HEAP8[($102)]=0;
   var $103=$fname;
   var $104=$irep;
   var $105=(($104+24)|0);
   HEAP32[(($105)>>2)]=$103;
   label = 8; break;
  case 8: 
   var $107=$1;
   var $108=(($107+112)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=(($109) & 65535);
   var $111=$irep;
   var $112=(($111+4)|0);
   HEAP16[(($112)>>1)]=$110;
   var $113=$1;
   var $114=(($113+116)|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=(($115) & 65535);
   var $117=$irep;
   var $118=(($117+6)|0);
   HEAP16[(($118)>>1)]=$116;
   var $119=$mrb;
   var $120=$1;
   var $121=(($120+120)|0);
   var $122=HEAP32[(($121)>>2)];
   _mrb_gc_arena_restore($119, $122);
   var $123=$1;
   var $124=(($123+4)|0);
   var $125=HEAP32[(($124)>>2)];
   _mrb_pool_close($125);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _attrsym($s, $a) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $name;
 var $len=sp;
 var $name2;
 $1=$s;
 $2=$a;
 var $3=$1;
 var $4=(($3)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$2;
 var $7=_mrb_sym2name_len($5, $6, $len);
 $name=$7;
 var $8=$1;
 var $9=HEAP32[(($len)>>2)];
 var $10=((($9)+(1))|0);
 var $11=_codegen_palloc($8, $10);
 $name2=$11;
 var $12=$name2;
 var $13=$name;
 var $14=HEAP32[(($len)>>2)];
 assert($14 % 1 === 0);(_memcpy($12, $13, $14)|0);
 var $15=HEAP32[(($len)>>2)];
 var $16=$name2;
 var $17=(($16+$15)|0);
 HEAP8[($17)]=61;
 var $18=HEAP32[(($len)>>2)];
 var $19=((($18)+(1))|0);
 var $20=$name2;
 var $21=(($20+$19)|0);
 HEAP8[($21)]=0;
 var $22=$1;
 var $23=(($22)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$name2;
 var $26=HEAP32[(($len)>>2)];
 var $27=((($26)+(1))|0);
 var $28=_mrb_intern2($24, $25, $27);
 STACKTOP = sp;
 return $28;
}
function _codegen_palloc($s, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $p;
   $1=$s;
   $2=$len;
   var $3=$1;
   var $4=(($3+4)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$2;
   var $7=_mrb_pool_alloc($5, $6);
   $p=$7;
   var $8=$p;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=$1;
   _codegen_error($11, ((100140)|0));
   label = 3; break;
  case 3: 
   var $13=$p;
   return $13;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_exc_new($agg_result, $mrb, $c, $ptr, $len) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $5=sp;
 var $6=(sp)+(12);
 $1=$mrb;
 $2=$c;
 $3=$ptr;
 $4=$len;
 var $7=$1;
 var $8=$2;
 var $9=$8;
 _mrb_obj_value966($5, $9);
 var $10=$1;
 var $11=$3;
 var $12=$4;
 _mrb_str_new($6, $10, $11, $12);
 _mrb_funcall($agg_result, $7, $5, ((86316)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($6)+(8))>>2)],tempInt));
 STACKTOP = sp;
 return;
}
function _scope_error($s) {
 var label = 0;
 var $1;
 $1=$s;
 _exit(1);
 throw "Reached an unreachable!";
 return;
}
function _mrb_obj_value966($agg_result, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   var $b;
   $1=$p;
   var $2=$1;
   var $3=$2;
   $b=$3;
   label = 2; break;
  case 2: 
   var $5=$b;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 255;
   var $9=(($v+8)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=$1;
   var $11=(($v)|0);
   var $12=$11;
   HEAP32[(($12)>>2)]=$10;
   label = 3; break;
  case 3: 
   var $14=$agg_result;
   var $15=$v;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_exc_new3($agg_result, $mrb, $c, $str) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 var $3=sp;
 var $4=(sp)+(12);
 $1=$mrb;
 $2=$c;
 var $5=$1;
 _mrb_str_to_str($3, $5, $str);
 var $6=$str;
 var $7=$3;
 assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
 var $8=$1;
 var $9=$2;
 var $10=$9;
 _mrb_obj_value966($4, $10);
 _mrb_funcall($agg_result, $8, $4, ((86316)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($str)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($str)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($str)+(8))>>2)],tempInt));
 STACKTOP = sp;
 return;
}
function _exc_debug_info($mrb, $exc) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $ci;
   var $pc;
   var $3=sp;
   var $irep;
   var $4=(sp)+(12);
   var $5=(sp)+(24);
   $1=$mrb;
   $2=$exc;
   var $6=$1;
   var $7=(($6+8)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8+16)|0);
   var $10=HEAP32[(($9)>>2)];
   $ci=$10;
   var $11=$ci;
   var $12=(($11+20)|0);
   var $13=HEAP32[(($12)>>2)];
   $pc=$13;
   var $14=$1;
   var $15=$2;
   var $16=$1;
   var $17=_mrb_intern2($16, ((95996)|0), 5);
   var $18=$ci;
   var $19=$1;
   var $20=(($19+8)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21+20)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=$18;
   var $25=$23;
   var $26=((($24)-($25))|0);
   var $27=((((($26)|(0)))/(44))&-1);
   _mrb_fixnum_value983($3, $27);
   _mrb_obj_iv_set($14, $15, $17, $3);
   var $28=$ci;
   var $29=((($28)-(44))|0);
   $ci=$29;
   label = 2; break;
  case 2: 
   var $31=$ci;
   var $32=$1;
   var $33=(($32+8)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($34+20)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($31)>>>(0)) >= (($36)>>>(0));
   if ($37) { label = 3; break; } else { label = 12; break; }
  case 3: 
   var $39=$ci;
   var $40=(($39+4)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($41)|(0))!=0;
   if ($42) { label = 4; break; } else { label = 11; break; }
  case 4: 
   var $44=$ci;
   var $45=(($44+4)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=$46;
   var $48=HEAP32[(($47)>>2)];
   var $49=$48 >>> 11;
   var $50=$49 & 2097151;
   var $51=$50 & 128;
   var $52=(($51)|(0))!=0;
   if ($52) { label = 11; break; } else { label = 5; break; }
  case 5: 
   var $54=$ci;
   var $55=(($54+4)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56+12)|0);
   var $58=$57;
   var $59=HEAP32[(($58)>>2)];
   $irep=$59;
   var $60=$irep;
   var $61=(($60+24)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62)|(0))!=0;
   if ($63) { label = 6; break; } else { label = 10; break; }
  case 6: 
   var $65=$irep;
   var $66=(($65+28)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67)|(0))!=0;
   if ($68) { label = 7; break; } else { label = 10; break; }
  case 7: 
   var $70=$irep;
   var $71=(($70+12)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=$pc;
   var $74=(($72)>>>(0)) <= (($73)>>>(0));
   if ($74) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $76=$pc;
   var $77=$irep;
   var $78=(($77+12)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=$irep;
   var $81=(($80+32)|0);
   var $82=HEAP32[(($81)>>2)];
   var $83=(($79+($82<<2))|0);
   var $84=(($76)>>>(0)) < (($83)>>>(0));
   if ($84) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $86=$1;
   var $87=$2;
   var $88=$1;
   var $89=_mrb_intern2($88, ((99048)|0), 4);
   var $90=$1;
   var $91=$irep;
   var $92=(($91+24)|0);
   var $93=HEAP32[(($92)>>2)];
   _mrb_str_new_cstr($4, $90, $93);
   _mrb_obj_iv_set($86, $87, $89, $4);
   var $94=$1;
   var $95=$2;
   var $96=$1;
   var $97=_mrb_intern2($96, ((98516)|0), 4);
   var $98=$pc;
   var $99=$irep;
   var $100=(($99+12)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=$98;
   var $103=$101;
   var $104=((($102)-($103))|0);
   var $105=((((($104)|(0)))/(4))&-1);
   var $106=((($105)-(1))|0);
   var $107=$irep;
   var $108=(($107+28)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=(($109+($106<<1))|0);
   var $111=HEAP16[(($110)>>1)];
   var $112=(($111)&(65535));
   _mrb_fixnum_value983($5, $112);
   _mrb_obj_iv_set($94, $95, $97, $5);
   label = 12; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $115=$ci;
   var $116=(($115+20)|0);
   var $117=HEAP32[(($116)>>2)];
   $pc=$117;
   var $118=$ci;
   var $119=((($118)-(44))|0);
   $ci=$119;
   label = 2; break;
  case 12: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_raise($mrb, $c, $msg) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $mesg=sp;
 var $4=(sp)+(12);
 var $5=(sp)+(24);
 $1=$mrb;
 $2=$c;
 $3=$msg;
 var $6=$1;
 var $7=$3;
 _mrb_str_new_cstr($4, $6, $7);
 var $8=$mesg;
 var $9=$4;
 assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 var $10=$1;
 var $11=$1;
 var $12=$2;
 _mrb_exc_new3($5, $11, $12, $mesg);
 _mrb_exc_raise($10, $5);
 STACKTOP = sp;
 return;
}
function _mrb_vformat($agg_result, $mrb, $format, $ap) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 84)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $p;
   var $b;
   var $size;
   var $ary=sp;
   var $c;
   var $4=(sp)+(12);
   var $5=(sp)+(24);
   var $6=(sp)+(36);
   var $7=(sp)+(48);
   var $8=(sp)+(60);
   var $9=(sp)+(72);
   $1=$mrb;
   $2=$format;
   $3=$ap;
   var $10=$2;
   $p=$10;
   var $11=$p;
   $b=$11;
   var $12=$1;
   _mrb_ary_new_capa($ary, $12, 4);
   label = 2; break;
  case 2: 
   var $14=$p;
   var $15=HEAP8[($14)];
   var $16=(($15 << 24) >> 24)!=0;
   if ($16) { label = 3; break; } else { label = 14; break; }
  case 3: 
   var $18=$p;
   var $19=(($18+1)|0);
   $p=$19;
   var $20=HEAP8[($18)];
   $c=$20;
   var $21=$c;
   var $22=(($21 << 24) >> 24);
   var $23=(($22)|(0))==37;
   if ($23) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $25=$p;
   var $26=HEAP8[($25)];
   var $27=(($26 << 24) >> 24);
   var $28=(($27)|(0))==83;
   if ($28) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $30=$p;
   var $31=$b;
   var $32=$30;
   var $33=$31;
   var $34=((($32)-($33))|0);
   var $35=((($34)-(1))|0);
   $size=$35;
   var $36=$1;
   var $37=$1;
   var $38=$b;
   var $39=$size;
   _mrb_str_new($4, $37, $38, $39);
   _mrb_ary_push($36, $ary, $4);
   var $40=$1;
   var $41=$3;
   var $42=$41;
   var $43=(($41+12)|0);
   $3=$43;
   var $44=$5;
   var $45=$42;
   assert(12 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];HEAP32[((($44)+(8))>>2)]=HEAP32[((($45)+(8))>>2)];
   _mrb_ary_push($40, $ary, $5);
   var $46=$p;
   var $47=(($46+1)|0);
   $b=$47;
   label = 6; break;
  case 6: 
   label = 13; break;
  case 7: 
   var $50=$c;
   var $51=(($50 << 24) >> 24);
   var $52=(($51)|(0))==92;
   if ($52) { label = 8; break; } else { label = 12; break; }
  case 8: 
   var $54=$p;
   var $55=HEAP8[($54)];
   var $56=(($55 << 24) >> 24)!=0;
   if ($56) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $58=$p;
   var $59=$b;
   var $60=$58;
   var $61=$59;
   var $62=((($60)-($61))|0);
   var $63=((($62)-(1))|0);
   $size=$63;
   var $64=$1;
   var $65=$1;
   var $66=$b;
   var $67=$size;
   _mrb_str_new($6, $65, $66, $67);
   _mrb_ary_push($64, $ary, $6);
   var $68=$1;
   var $69=$1;
   var $70=$p;
   _mrb_str_new($7, $69, $70, 1);
   _mrb_ary_push($68, $ary, $7);
   var $71=$p;
   var $72=(($71+1)|0);
   $p=$72;
   $b=$72;
   label = 11; break;
  case 10: 
   label = 14; break;
  case 11: 
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   label = 2; break;
  case 14: 
   var $78=$b;
   var $79=$2;
   var $80=(($78)|(0))==(($79)|(0));
   if ($80) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $82=$1;
   var $83=$2;
   _mrb_str_new_cstr($agg_result, $82, $83);
   label = 17; break;
  case 16: 
   var $85=$p;
   var $86=$b;
   var $87=$85;
   var $88=$86;
   var $89=((($87)-($88))|0);
   $size=$89;
   var $90=$1;
   var $91=$1;
   var $92=$b;
   var $93=$size;
   _mrb_str_new($8, $91, $92, $93);
   _mrb_ary_push($90, $ary, $8);
   var $94=$1;
   var $95=$1;
   _mrb_str_new($9, $95, 0, 0);
   _mrb_ary_join($agg_result, $94, $ary, $9);
   label = 17; break;
  case 17: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_format($agg_result, $mrb, $format, varrp) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $ap=sp;
 var $str=(sp)+(4);
 var $3=(sp)+(16);
 $1=$mrb;
 $2=$format;
 var $4=$ap;
 HEAP32[(($4)>>2)]=varrp;
 var $5=$1;
 var $6=$2;
 var $7=HEAP32[(($ap)>>2)];
 _mrb_vformat($3, $5, $6, $7);
 var $8=$str;
 var $9=$3;
 assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 var $10=$ap;
 var $11=$agg_result;
 var $12=$str;
 assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_raisef($mrb, $c, $fmt, varrp) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $args=sp;
 var $mesg=(sp)+(4);
 var $4=(sp)+(16);
 var $5=(sp)+(28);
 $1=$mrb;
 $2=$c;
 $3=$fmt;
 var $6=$args;
 HEAP32[(($6)>>2)]=varrp;
 var $7=$1;
 var $8=$3;
 var $9=HEAP32[(($args)>>2)];
 _mrb_vformat($4, $7, $8, $9);
 var $10=$mesg;
 var $11=$4;
 assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
 var $12=$args;
 var $13=$1;
 var $14=$1;
 var $15=$2;
 _mrb_exc_new3($5, $14, $15, $mesg);
 _mrb_exc_raise($13, $5);
 STACKTOP = sp;
 return;
}
function _mrb_name_error($mrb, $id, $fmt, varrp) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 76)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $exc=sp;
 var $argv=(sp)+(12);
 var $args=(sp)+(36);
 var $4=(sp)+(40);
 var $5=(sp)+(52);
 var $6=(sp)+(64);
 $1=$mrb;
 $2=$id;
 $3=$fmt;
 var $7=$args;
 HEAP32[(($7)>>2)]=varrp;
 var $8=(($argv)|0);
 var $9=$1;
 var $10=$3;
 var $11=HEAP32[(($args)>>2)];
 _mrb_vformat($4, $9, $10, $11);
 var $12=$8;
 var $13=$4;
 assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
 var $14=$args;
 var $15=(($argv+12)|0);
 var $16=$2;
 _mrb_symbol_value977($5, $16);
 var $17=$15;
 var $18=$5;
 assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 var $19=$1;
 var $20=(($argv)|0);
 var $21=$1;
 var $22=_mrb_class_get($21, ((101204)|0));
 _mrb_class_new_instance($6, $19, 2, $20, $22);
 var $23=$exc;
 var $24=$6;
 assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
 var $25=$1;
 _mrb_exc_raise($25, $exc);
 STACKTOP = sp;
 return;
}
function _mrb_symbol_value977($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=4;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP16[(($6)>>1)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_warn($mrb, $fmt, varrp) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $ap=sp;
 var $str=(sp)+(4);
 var $3=(sp)+(16);
 $1=$mrb;
 $2=$fmt;
 var $4=$ap;
 HEAP32[(($4)>>2)]=varrp;
 var $5=$1;
 var $6=$2;
 var $7=HEAP32[(($ap)>>2)];
 _mrb_vformat($3, $5, $6, $7);
 var $8=$str;
 var $9=$3;
 assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 var $10=HEAP32[((_stderr)>>2)];
 var $11=_fputs(((97388)|0), $10);
 var $12=(($str)|0);
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=(($15+20)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($str)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 var $22=(($21+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=HEAP32[((_stderr)>>2)];
 var $25=_fwrite($17, $23, 1, $24);
 var $26=$ap;
 STACKTOP = sp;
 return;
}
function _make_exception($agg_result, $mrb, $argc, $argv, $isstr) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $mesg=sp;
   var $n;
   var $5=(sp)+(12);
   var $6=(sp)+(24);
   var $7=(sp)+(36);
   var $exc;
   var $8=(sp)+(48);
   var $9=(sp)+(60);
   $1=$mrb;
   $2=$argc;
   $3=$argv;
   $4=$isstr;
   _mrb_nil_value982($5);
   var $10=$mesg;
   var $11=$5;
   assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
   var $12=$2;
   if ((($12)|(0))==0) {
    label = 2; break;
   }
   else if ((($12)|(0))==1) {
    label = 3; break;
   }
   else if ((($12)|(0))==2 | (($12)|(0))==3) {
    label = 12; break;
   }
   else {
   label = 17; break;
   }
  case 2: 
   label = 18; break;
  case 3: 
   var $15=$3;
   var $16=(($15)|0);
   var $17=(($16+8)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18)|(0))==0;
   if ($19) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $21=$3;
   var $22=(($21)|0);
   var $23=(($22)|0);
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25)|(0))!=0;
   if ($26) { label = 6; break; } else { label = 5; break; }
  case 5: 
   label = 18; break;
  case 6: 
   var $29=$4;
   var $30=(($29)|(0))!=0;
   if ($30) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $32=$1;
   var $33=$3;
   var $34=(($33)|0);
   _mrb_check_string_type($6, $32, $34);
   var $35=$mesg;
   var $36=$6;
   assert(12 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];HEAP32[((($35)+(8))>>2)]=HEAP32[((($36)+(8))>>2)];
   var $37=(($mesg+8)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38)|(0))==0;
   if ($39) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $41=(($mesg)|0);
   var $42=$41;
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43)|(0))!=0;
   if ($44) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $46=$1;
   var $47=$1;
   var $48=_mrb_class_get($47, ((89824)|0));
   _mrb_exc_new3($7, $46, $48, $mesg);
   var $49=$mesg;
   var $50=$7;
   assert(12 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];HEAP32[((($49)+(4))>>2)]=HEAP32[((($50)+(4))>>2)];HEAP32[((($49)+(8))>>2)]=HEAP32[((($50)+(8))>>2)];
   label = 18; break;
  case 10: 
   label = 11; break;
  case 11: 
   $n=0;
   label = 13; break;
  case 12: 
   $n=1;
   label = 13; break;
  case 13: 
   var $55=$1;
   var $56=_mrb_intern2($55, ((88616)|0), 9);
   $exc=$56;
   var $57=$1;
   var $58=$3;
   var $59=(($58)|0);
   var $60=$exc;
   var $61=_mrb_respond_to($57, $59, $60);
   var $62=(($61 << 24) >> 24)!=0;
   if ($62) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $64=$1;
   var $65=$3;
   var $66=(($65)|0);
   var $67=$exc;
   var $68=$n;
   var $69=$3;
   var $70=(($69+12)|0);
   _mrb_funcall_argv($8, $64, $66, $67, $68, $70);
   var $71=$mesg;
   var $72=$8;
   assert(12 % 1 === 0);HEAP32[(($71)>>2)]=HEAP32[(($72)>>2)];HEAP32[((($71)+(4))>>2)]=HEAP32[((($72)+(4))>>2)];HEAP32[((($71)+(8))>>2)]=HEAP32[((($72)+(8))>>2)];
   label = 16; break;
  case 15: 
   var $74=$1;
   var $75=$1;
   var $76=_mrb_class_get($75, ((87572)|0));
   _mrb_raise($74, $76, ((86768)|0));
   label = 16; break;
  case 16: 
   label = 18; break;
  case 17: 
   var $79=$1;
   var $80=$1;
   var $81=_mrb_class_get($80, ((85868)|0));
   var $82=$2;
   _mrb_fixnum_value983($9, $82);
   _mrb_raisef($79, $81, ((105476)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($9)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($9)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($9)+(8))>>2)],tempInt));
   label = 18; break;
  case 18: 
   var $84=$2;
   var $85=(($84)|(0)) > 0;
   if ($85) { label = 19; break; } else { label = 24; break; }
  case 19: 
   var $87=$1;
   var $88=$1;
   var $89=(($88+572)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=_mrb_obj_is_kind_of($87, $mesg, $90);
   var $92=(($91 << 24) >> 24)!=0;
   if ($92) { label = 21; break; } else { label = 20; break; }
  case 20: 
   var $94=$1;
   var $95=$1;
   var $96=_mrb_class_get($95, ((87572)|0));
   _mrb_raise($94, $96, ((104700)|0));
   label = 21; break;
  case 21: 
   var $98=$2;
   var $99=(($98)|(0)) > 2;
   if ($99) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $101=$1;
   var $102=$3;
   var $103=(($102+24)|0);
   _set_backtrace($101, $mesg, $103);
   label = 23; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $106=$agg_result;
   var $107=$mesg;
   assert(12 % 1 === 0);HEAP32[(($106)>>2)]=HEAP32[(($107)>>2)];HEAP32[((($106)+(4))>>2)]=HEAP32[((($107)+(4))>>2)];HEAP32[((($106)+(8))>>2)]=HEAP32[((($107)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value982($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_value983($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _set_backtrace($mrb, $info, $bt) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $info; $info = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($info)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($info)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($info)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $bt; $bt = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($bt)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($bt)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($bt)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2=sp;
 $1=$mrb;
 var $3=$1;
 _mrb_funcall($2, $3, $info, ((96168)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($bt)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($bt)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($bt)+(8))>>2)],tempInt));
 STACKTOP = sp;
 return;
}
function _mrb_make_exception($agg_result, $mrb, $argc, $argv) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$mrb;
 $2=$argc;
 $3=$argv;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 _make_exception($agg_result, $4, $5, $6, 1);
 return;
}
function _mrb_init_exception($mrb) {
 var label = 0;
 var $1;
 var $e;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=(($3+44)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_mrb_define_class($2, ((103124)|0), $5);
 $e=$6;
 var $7=$1;
 var $8=(($7+572)|0);
 HEAP32[(($8)>>2)]=$6;
 var $9=$1;
 var $10=$e;
 _mrb_define_class_method($9, $10, ((88616)|0), 598, 4096);
 var $11=$1;
 var $12=$e;
 _mrb_define_method($11, $12, ((88616)|0), 552, 4096);
 var $13=$1;
 var $14=$e;
 _mrb_define_method($13, $14, ((102672)|0), 578, 4096);
 var $15=$1;
 var $16=$e;
 _mrb_define_method($15, $16, ((102356)|0), 218, 262144);
 var $17=$1;
 var $18=$e;
 _mrb_define_method($17, $18, ((101940)|0), 126, 0);
 var $19=$1;
 var $20=$e;
 _mrb_define_method($19, $20, ((101476)|0), 348, 0);
 var $21=$1;
 var $22=$e;
 _mrb_define_method($21, $22, ((100924)|0), 278, 0);
 var $23=$1;
 var $24=$1;
 var $25=(($24+572)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=_mrb_define_class($23, ((100636)|0), $26);
 var $28=$1;
 var $29=(($28+576)|0);
 HEAP32[(($29)>>2)]=$27;
 var $30=$1;
 var $31=$1;
 var $32=(($31+576)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=_mrb_define_class($30, ((89824)|0), $33);
 var $35=$1;
 var $36=$1;
 var $37=(($36+572)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=_mrb_define_class($35, ((100120)|0), $38);
 $e=$39;
 var $40=$1;
 var $41=$e;
 var $42=_mrb_define_class($40, ((99860)|0), $41);
 return;
}
function _exc_exception($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $exc=sp;
   var $a=(sp)+(12);
   var $argc;
   var $2=(sp)+(24);
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_get_args($3, ((96428)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$a,tempInt));
   $argc=$4;
   var $5=$argc;
   var $6=(($5)|(0))==0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$agg_result;
   var $9=$self;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   label = 6; break;
  case 3: 
   var $11=$1;
   var $12=_mrb_obj_equal($11, $self, $a);
   var $13=(($12 << 24) >> 24)!=0;
   if ($13) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $15=$agg_result;
   var $16=$self;
   assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
   label = 6; break;
  case 5: 
   var $18=$1;
   _mrb_obj_clone($2, $18, $self);
   var $19=$exc;
   var $20=$2;
   assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
   var $21=$1;
   var $22=$1;
   var $23=_mrb_intern2($22, ((99524)|0), 4);
   _mrb_iv_set($21, $exc, $23, $a);
   var $24=$agg_result;
   var $25=$exc;
   assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_exc_raise($mrb, $exc) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $exc; $exc = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($exc)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($exc)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($exc)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$mrb;
   var $2=(($exc)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=$1;
   var $7=(($6+16)|0);
   HEAP32[(($7)>>2)]=$5;
   var $8=$1;
   var $9=$1;
   var $10=(($9+16)|0);
   var $11=HEAP32[(($10)>>2)];
   _exc_debug_info($8, $11);
   var $12=$1;
   var $13=(($12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $17=$1;
   _mrb_p($17, $exc);
   _abort();
   throw "Reached an unreachable!";
  case 3: 
   var $19=$1;
   var $20=(($19)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$21;
   var $23=(($22)|0);
   _longjmp($23, 1);
   throw "Reached an unreachable!";
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_bug($mrb, $fmt, varrp) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $ap=sp;
 var $str=(sp)+(4);
 var $3=(sp)+(16);
 $1=$mrb;
 $2=$fmt;
 var $4=$ap;
 HEAP32[(($4)>>2)]=varrp;
 var $5=$1;
 var $6=$2;
 var $7=HEAP32[(($ap)>>2)];
 _mrb_vformat($3, $5, $6, $7);
 var $8=$str;
 var $9=$3;
 assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 var $10=HEAP32[((_stderr)>>2)];
 var $11=_fputs(((94784)|0), $10);
 var $12=(($str)|0);
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=$14;
 var $16=(($15+20)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($str)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=$20;
 var $22=(($21+12)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=HEAP32[((_stderr)>>2)];
 var $25=_fwrite($17, $23, 1, $24);
 var $26=$ap;
 _exit(1);
 throw "Reached an unreachable!";
 STACKTOP = sp;
 return;
}
function _exc_initialize($agg_result, $mrb, $exc) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $exc; $exc = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($exc)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($exc)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($exc)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $mesg=sp;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((96428)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$mesg,tempInt));
   var $4=(($3)|(0))==1;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$1;
   var $7=$1;
   var $8=_mrb_intern2($7, ((99524)|0), 4);
   _mrb_iv_set($6, $exc, $8, $mesg);
   label = 3; break;
  case 3: 
   var $10=$agg_result;
   var $11=$exc;
   assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _exc_equal($agg_result, $mrb, $exc) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $exc; $exc = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($exc)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($exc)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($exc)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $obj=sp;
   var $mesg=(sp)+(12);
   var $equal_p;
   var $id_mesg;
   var $2=(sp)+(24);
   var $3=(sp)+(36);
   var $4=(sp)+(48);
   $1=$mrb;
   var $5=$1;
   var $6=_mrb_intern2($5, ((99524)|0), 4);
   $id_mesg=$6;
   var $7=$1;
   var $8=_mrb_get_args($7, ((96964)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$obj,tempInt));
   var $9=$1;
   var $10=_mrb_obj_equal($9, $exc, $obj);
   var $11=(($10 << 24) >> 24)!=0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $equal_p=1;
   label = 10; break;
  case 3: 
   var $14=$1;
   var $15=_mrb_obj_class($14, $exc);
   var $16=$1;
   var $17=_mrb_obj_class($16, $obj);
   var $18=(($15)|(0))!=(($17)|(0));
   if ($18) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $20=$1;
   var $21=$1;
   var $22=_mrb_intern2($21, ((101476)|0), 7);
   var $23=_mrb_respond_to($20, $obj, $22);
   var $24=(($23 << 24) >> 24)!=0;
   if ($24) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $26=$1;
   _mrb_funcall($2, $26, $obj, ((101476)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $27=$mesg;
   var $28=$2;
   assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
   label = 7; break;
  case 6: 
   _mrb_false_value984($agg_result);
   label = 11; break;
  case 7: 
   label = 9; break;
  case 8: 
   var $32=$1;
   var $33=$id_mesg;
   _mrb_attr_get($3, $32, $obj, $33);
   var $34=$mesg;
   var $35=$3;
   assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
   label = 9; break;
  case 9: 
   var $37=$1;
   var $38=$1;
   var $39=$id_mesg;
   _mrb_attr_get($4, $38, $exc, $39);
   var $40=_mrb_equal($37, $4, $mesg);
   $equal_p=$40;
   label = 10; break;
  case 10: 
   var $42=$equal_p;
   _mrb_bool_value985($agg_result, $42);
   label = 11; break;
  case 11: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _exc_to_s($agg_result, $mrb, $exc) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $exc; $exc = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($exc)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($exc)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($exc)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $mesg=sp;
   $1=$mrb;
   var $2=$1;
   var $3=$1;
   var $4=_mrb_intern2($3, ((99524)|0), 4);
   _mrb_attr_get($mesg, $2, $exc, $4);
   var $5=(($mesg+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==0;
   if ($7) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $9=(($mesg)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))!=0;
   if ($12) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $14=$1;
   var $15=$1;
   var $16=_mrb_obj_classname($15, $exc);
   _mrb_str_new_cstr($agg_result, $14, $16);
   label = 5; break;
  case 4: 
   var $18=$agg_result;
   var $19=$mesg;
   assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
   label = 5; break;
  case 5: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _exc_message($agg_result, $mrb, $exc) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $exc; $exc = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($exc)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($exc)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($exc)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_funcall($agg_result, $2, $exc, ((101940)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
 STACKTOP = sp;
 return;
}
function _exc_inspect($agg_result, $mrb, $exc) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 228)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $exc; $exc = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($exc)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($exc)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($exc)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $str=sp;
   var $mesg=(sp)+(12);
   var $file=(sp)+(24);
   var $line=(sp)+(36);
   var $2=(sp)+(48);
   var $3=(sp)+(60);
   var $4=(sp)+(72);
   var $5=(sp)+(84);
   var $6=(sp)+(96);
   var $7=(sp)+(108);
   var $8=(sp)+(120);
   var $9=(sp)+(132);
   var $10=(sp)+(144);
   var $11=(sp)+(156);
   var $12=(sp)+(168);
   var $13=(sp)+(180);
   var $14=(sp)+(192);
   var $15=(sp)+(204);
   var $16=(sp)+(216);
   $1=$mrb;
   var $17=$1;
   var $18=$1;
   var $19=_mrb_intern2($18, ((99524)|0), 4);
   _mrb_attr_get($2, $17, $exc, $19);
   var $20=$mesg;
   var $21=$2;
   assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
   var $22=$1;
   var $23=$1;
   var $24=_mrb_intern2($23, ((99048)|0), 4);
   _mrb_attr_get($3, $22, $exc, $24);
   var $25=$file;
   var $26=$3;
   assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
   var $27=$1;
   var $28=$1;
   var $29=_mrb_intern2($28, ((98516)|0), 4);
   _mrb_attr_get($4, $27, $exc, $29);
   var $30=$line;
   var $31=$4;
   assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
   var $32=(($file+8)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33)|(0))==0;
   if ($34) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $36=(($file)|0);
   var $37=$36;
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38)|(0))!=0;
   if ($39) { label = 3; break; } else { label = 14; break; }
  case 3: 
   var $41=(($line+8)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($42)|(0))==0;
   if ($43) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $45=(($line)|0);
   var $46=$45;
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47)|(0))!=0;
   if ($48) { label = 5; break; } else { label = 14; break; }
  case 5: 
   var $50=$str;
   var $51=$file;
   assert(12 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)];HEAP32[((($50)+(8))>>2)]=HEAP32[((($51)+(8))>>2)];
   var $52=$1;
   _mrb_str_cat($5, $52, $str, ((98140)|0), 1);
   var $53=$1;
   _mrb_str_append($6, $53, $str, $line);
   var $54=$1;
   _mrb_str_cat($7, $54, $str, ((97876)|0), 2);
   var $55=(($mesg+8)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56)|(0))==0;
   if ($57) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $59=(($mesg)|0);
   var $60=$59;
   var $61=HEAP32[(($60)>>2)];
   var $62=(($61)|(0))!=0;
   if ($62) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $64=(($mesg)|0);
   var $65=$64;
   var $66=HEAP32[(($65)>>2)];
   var $67=$66;
   var $68=(($67+12)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($69)|(0)) > 0;
   if ($70) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $72=$1;
   _mrb_str_append($8, $72, $str, $mesg);
   var $73=$1;
   _mrb_str_cat($9, $73, $str, ((97528)|0), 2);
   label = 9; break;
  case 9: 
   var $75=$1;
   var $76=$1;
   var $77=_mrb_obj_classname($76, $exc);
   _mrb_str_cat_cstr($10, $75, $str, $77);
   var $78=(($mesg+8)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79)|(0))==0;
   if ($80) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $82=(($mesg)|0);
   var $83=$82;
   var $84=HEAP32[(($83)>>2)];
   var $85=(($84)|(0))!=0;
   if ($85) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $87=(($mesg)|0);
   var $88=$87;
   var $89=HEAP32[(($88)>>2)];
   var $90=$89;
   var $91=(($90+12)|0);
   var $92=HEAP32[(($91)>>2)];
   var $93=(($92)|(0)) > 0;
   if ($93) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $95=$1;
   _mrb_str_cat($11, $95, $str, ((97260)|0), 1);
   label = 13; break;
  case 13: 
   label = 20; break;
  case 14: 
   var $98=$1;
   var $99=$1;
   var $100=_mrb_obj_classname($99, $exc);
   _mrb_str_new_cstr($12, $98, $100);
   var $101=$str;
   var $102=$12;
   assert(12 % 1 === 0);HEAP32[(($101)>>2)]=HEAP32[(($102)>>2)];HEAP32[((($101)+(4))>>2)]=HEAP32[((($102)+(4))>>2)];HEAP32[((($101)+(8))>>2)]=HEAP32[((($102)+(8))>>2)];
   var $103=(($mesg+8)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104)|(0))==0;
   if ($105) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $107=(($mesg)|0);
   var $108=$107;
   var $109=HEAP32[(($108)>>2)];
   var $110=(($109)|(0))!=0;
   if ($110) { label = 16; break; } else { label = 18; break; }
  case 16: 
   var $112=(($mesg)|0);
   var $113=$112;
   var $114=HEAP32[(($113)>>2)];
   var $115=$114;
   var $116=(($115+12)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($117)|(0)) > 0;
   if ($118) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $120=$1;
   _mrb_str_cat($13, $120, $str, ((97876)|0), 2);
   var $121=$1;
   _mrb_str_append($14, $121, $str, $mesg);
   label = 19; break;
  case 18: 
   var $123=$1;
   _mrb_str_cat($15, $123, $str, ((97876)|0), 2);
   var $124=$1;
   var $125=$1;
   var $126=_mrb_obj_classname($125, $exc);
   _mrb_str_cat_cstr($16, $124, $str, $126);
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $129=$agg_result;
   var $130=$str;
   assert(12 % 1 === 0);HEAP32[(($129)>>2)]=HEAP32[(($130)>>2)];HEAP32[((($129)+(4))>>2)]=HEAP32[((($130)+(4))>>2)];HEAP32[((($129)+(8))>>2)]=HEAP32[((($130)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_false_value984($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=1;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_bool_value985($agg_result, $boolean) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$boolean;
   label = 2; break;
  case 2: 
   var $3=$1;
   var $4=(($3)&(255));
   var $5=(($4)|(0))!=0;
   var $6=$5 ? 2 : 0;
   var $7=(($v+8)|0);
   HEAP32[(($7)>>2)]=$6;
   var $8=(($v)|0);
   var $9=$8;
   HEAP32[(($9)>>2)]=1;
   label = 3; break;
  case 3: 
   var $11=$agg_result;
   var $12=$v;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_realloc_simple($mrb, $p, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $p2;
   $1=$mrb;
   $2=$p;
   $3=$len;
   var $4=$1;
   var $5=(($4+4)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$1;
   var $8=$2;
   var $9=$3;
   var $10=$1;
   var $11=(($10+580)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=FUNCTION_TABLE[$6]($7, $8, $9, $12);
   $p2=$13;
   var $14=$p2;
   var $15=(($14)|(0))!=0;
   if ($15) { label = 5; break; } else { label = 2; break; }
  case 2: 
   var $17=$3;
   var $18=(($17)>>>(0)) > 0;
   if ($18) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $20=$1;
   var $21=(($20+100)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))!=0;
   if ($23) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $25=$1;
   _mrb_garbage_collect($25);
   var $26=$1;
   var $27=(($26+4)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=$1;
   var $30=$2;
   var $31=$3;
   var $32=$1;
   var $33=(($32+580)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=FUNCTION_TABLE[$28]($29, $30, $31, $34);
   $p2=$35;
   label = 5; break;
  case 5: 
   var $37=$p2;
   return $37;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_garbage_collect($mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $max_limit;
   $1=$mrb;
   $max_limit=-1;
   var $2=$1;
   var $3=$2;
   var $4=(($3+552)|0);
   var $5=HEAP8[($4)];
   var $6=$5 & 1;
   var $7=(($6 << 24) >> 24)!=0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 15; break;
  case 3: 
   var $10=$1;
   var $11=(($10+520)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))==2;
   if ($13) { label = 4; break; } else { label = 8; break; }
  case 4: 
   label = 5; break;
  case 5: 
   var $16=$1;
   var $17=(($16+520)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18)|(0))!=0;
   if ($19) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $21=$1;
   var $22=$max_limit;
   var $23=_incremental_gc($21, $22);
   label = 5; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $26=$1;
   var $27=$26;
   var $28=(($27+552)|0);
   var $29=HEAP8[($28)];
   var $30=(($29)&(255)) >>> 2;
   var $31=$30 & 1;
   var $32=(($31 << 24) >> 24)!=0;
   if ($32) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $34=$1;
   _clear_all_old($34);
   var $35=$1;
   var $36=$35;
   var $37=(($36+552)|0);
   var $38=HEAP8[($37)];
   var $39=$38 & -3;
   var $40=$39 | 2;
   HEAP8[($37)]=$40;
   label = 10; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $43=$1;
   var $44=$max_limit;
   var $45=_incremental_gc($43, $44);
   label = 12; break;
  case 12: 
   var $47=$1;
   var $48=(($47+520)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49)|(0))!=0;
   if ($50) { label = 11; break; } else { label = 13; break; }
  case 13: 
   var $52=$1;
   var $53=(($52+536)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=((((($54)>>>(0)))/(100))&-1);
   var $56=$1;
   var $57=(($56+544)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(Math.imul($55,$58)|0);
   var $60=$1;
   var $61=(($60+540)|0);
   HEAP32[(($61)>>2)]=$59;
   var $62=$1;
   var $63=$62;
   var $64=(($63+552)|0);
   var $65=HEAP8[($64)];
   var $66=(($65)&(255)) >>> 2;
   var $67=$66 & 1;
   var $68=(($67 << 24) >> 24)!=0;
   if ($68) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $70=$1;
   var $71=(($70+536)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=((((($72)>>>(0)))/(100))&-1);
   var $74=((($73)*(200))&-1);
   var $75=$1;
   var $76=(($75+556)|0);
   HEAP32[(($76)>>2)]=$74;
   var $77=$1;
   var $78=$77;
   var $79=(($78+552)|0);
   var $80=HEAP8[($79)];
   var $81=$80 & -3;
   HEAP8[($79)]=$81;
   label = 15; break;
  case 15: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_realloc($mrb, $p, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $p2;
   $1=$mrb;
   $2=$p;
   $3=$len;
   var $4=$1;
   var $5=$2;
   var $6=$3;
   var $7=_mrb_realloc_simple($4, $5, $6);
   $p2=$7;
   var $8=$p2;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 7; break; } else { label = 2; break; }
  case 2: 
   var $11=$3;
   var $12=(($11)|(0))!=0;
   if ($12) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $14=$1;
   var $15=$14;
   var $16=(($15+552)|0);
   var $17=HEAP8[($16)];
   var $18=(($17)&(255)) >>> 3;
   var $19=$18 & 1;
   var $20=(($19 << 24) >> 24)!=0;
   if ($20) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 6; break;
  case 5: 
   var $23=$1;
   var $24=$23;
   var $25=(($24+552)|0);
   var $26=HEAP8[($25)];
   var $27=$26 & -9;
   var $28=$27 | 8;
   HEAP8[($25)]=$28;
   var $29=$1;
   var $30=$1;
   var $31=_mrb_class_get($30, ((85908)|0));
   _mrb_raise($29, $31, ((100940)|0));
   label = 6; break;
  case 6: 
   label = 8; break;
  case 7: 
   var $34=$1;
   var $35=$34;
   var $36=(($35+552)|0);
   var $37=HEAP8[($36)];
   var $38=$37 & -9;
   HEAP8[($36)]=$38;
   label = 8; break;
  case 8: 
   var $40=$p2;
   return $40;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_malloc($mrb, $len) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$len;
 var $3=$1;
 var $4=$2;
 var $5=_mrb_realloc($3, 0, $4);
 return $5;
}
function _mrb_calloc($mrb, $nelem, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $p;
   var $size;
   $1=$mrb;
   $2=$nelem;
   $3=$len;
   var $4=$2;
   var $5=(($4)>>>(0)) > 0;
   if ($5) { label = 2; break; } else { label = 7; break; }
  case 2: 
   var $7=$3;
   var $8=(($7)>>>(0)) > 0;
   if ($8) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $10=$2;
   var $11=$3;
   var $12=(((4294967295)/((($11)>>>(0))))&-1);
   var $13=(($10)>>>(0)) <= (($12)>>>(0));
   if ($13) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $15=$2;
   var $16=$3;
   var $17=(Math.imul($15,$16)|0);
   $size=$17;
   var $18=$1;
   var $19=$size;
   var $20=_mrb_realloc($18, 0, $19);
   $p=$20;
   var $21=$p;
   var $22=(($21)|(0))!=0;
   if ($22) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $24=$p;
   var $25=$size;
   _memset($24, 0, $25);
   label = 6; break;
  case 6: 
   label = 8; break;
  case 7: 
   $p=0;
   label = 8; break;
  case 8: 
   var $29=$p;
   return $29;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_free($mrb, $p) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$p;
 var $3=$1;
 var $4=(($3+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$1;
 var $7=$2;
 var $8=$1;
 var $9=(($8+580)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=FUNCTION_TABLE[$5]($6, $7, 0, $10);
 return;
}
function _mrb_init_heap($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=(($2+100)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=$1;
 var $5=(($4+108)|0);
 HEAP32[(($5)>>2)]=0;
 var $6=$1;
 _add_heap($6);
 var $7=$1;
 var $8=(($7+544)|0);
 HEAP32[(($8)>>2)]=200;
 var $9=$1;
 var $10=(($9+548)|0);
 HEAP32[(($10)>>2)]=200;
 var $11=$1;
 var $12=$11;
 var $13=(($12+552)|0);
 var $14=HEAP8[($13)];
 var $15=$14 & -5;
 var $16=$15 | 4;
 HEAP8[($13)]=$16;
 var $17=$1;
 var $18=$17;
 var $19=(($18+552)|0);
 var $20=HEAP8[($19)];
 var $21=$20 & -3;
 var $22=$21 | 2;
 HEAP8[($19)]=$22;
 return;
}
function _add_heap($mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $page;
   var $p;
   var $e;
   var $prev;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_calloc($2, 1, 24600);
   var $4=$3;
   $page=$4;
   $prev=0;
   var $5=$page;
   var $6=(($5+24)|0);
   var $7=(($6)|0);
   $p=$7;
   var $8=$p;
   var $9=(($8+24576)|0);
   $e=$9;
   label = 2; break;
  case 2: 
   var $11=$p;
   var $12=$e;
   var $13=(($11)>>>(0)) < (($12)>>>(0));
   if ($13) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $15=$p;
   var $16=(($15)|0);
   var $17=$16;
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=$19 & -256;
   var $21=$20 | 1;
   HEAP32[(($18)>>2)]=$21;
   var $22=$prev;
   var $23=$p;
   var $24=(($23)|0);
   var $25=$24;
   var $26=(($25+12)|0);
   HEAP32[(($26)>>2)]=$22;
   var $27=$p;
   var $28=(($27)|0);
   var $29=$28;
   $prev=$29;
   label = 4; break;
  case 4: 
   var $31=$p;
   var $32=(($31+24)|0);
   $p=$32;
   label = 2; break;
  case 5: 
   var $34=$prev;
   var $35=$page;
   var $36=(($35)|0);
   HEAP32[(($36)>>2)]=$34;
   var $37=$1;
   var $38=$page;
   _link_heap_page($37, $38);
   var $39=$1;
   var $40=$page;
   _link_free_heap_page($39, $40);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_free_heap($mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $page;
   var $tmp;
   var $p;
   var $e;
   $1=$mrb;
   var $2=$1;
   var $3=(($2+100)|0);
   var $4=HEAP32[(($3)>>2)];
   $page=$4;
   label = 2; break;
  case 2: 
   var $6=$page;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $9=$page;
   $tmp=$9;
   var $10=$page;
   var $11=(($10+8)|0);
   var $12=HEAP32[(($11)>>2)];
   $page=$12;
   var $13=$tmp;
   var $14=(($13+24)|0);
   var $15=(($14)|0);
   $p=$15;
   var $16=$p;
   var $17=(($16+24576)|0);
   $e=$17;
   label = 4; break;
  case 4: 
   var $19=$p;
   var $20=$e;
   var $21=(($19)>>>(0)) < (($20)>>>(0));
   if ($21) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $23=$p;
   var $24=(($23)|0);
   var $25=$24;
   var $26=$25;
   var $27=HEAP32[(($26)>>2)];
   var $28=$27 & 255;
   var $29=(($28)|(0))!=1;
   if ($29) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $31=$1;
   var $32=$p;
   var $33=(($32)|0);
   var $34=$33;
   _obj_free($31, $34);
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $37=$p;
   var $38=(($37+24)|0);
   $p=$38;
   label = 4; break;
  case 9: 
   var $40=$1;
   var $41=$tmp;
   var $42=$41;
   _mrb_free($40, $42);
   label = 2; break;
  case 10: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _unlink_free_heap_page($mrb, $page) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$page;
   var $3=$2;
   var $4=(($3+16)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$2;
   var $9=(($8+12)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$2;
   var $12=(($11+16)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13+12)|0);
   HEAP32[(($14)>>2)]=$10;
   label = 3; break;
  case 3: 
   var $16=$2;
   var $17=(($16+12)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18)|(0))!=0;
   if ($19) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=$2;
   var $22=(($21+16)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=$2;
   var $25=(($24+12)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26+16)|0);
   HEAP32[(($27)>>2)]=$23;
   label = 5; break;
  case 5: 
   var $29=$1;
   var $30=(($29+108)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$2;
   var $33=(($31)|(0))==(($32)|(0));
   if ($33) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $35=$2;
   var $36=(($35+12)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=$1;
   var $39=(($38+108)|0);
   HEAP32[(($39)>>2)]=$37;
   label = 7; break;
  case 7: 
   var $41=$2;
   var $42=(($41+16)|0);
   HEAP32[(($42)>>2)]=0;
   var $43=$2;
   var $44=(($43+12)|0);
   HEAP32[(($44)>>2)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _add_gray_list($mrb, $obj) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$obj;
 var $3=$2;
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$5 & -1793;
 HEAP32[(($4)>>2)]=$6;
 var $7=$1;
 var $8=(($7+528)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=$2;
 var $11=(($10+8)|0);
 HEAP32[(($11)>>2)]=$9;
 var $12=$2;
 var $13=$1;
 var $14=(($13+528)|0);
 HEAP32[(($14)>>2)]=$12;
 return;
}
function _mrb_gc_arena_save($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=(($2+516)|0);
 var $4=HEAP32[(($3)>>2)];
 return $4;
}
function _mrb_gc_arena_restore($mrb, $idx) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$idx;
 var $3=$2;
 var $4=$1;
 var $5=(($4+516)|0);
 HEAP32[(($5)>>2)]=$3;
 return;
}
function _mrb_write_barrier($mrb, $obj) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$obj;
   var $3=$2;
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5 >>> 8;
   var $7=$6 & 7;
   var $8=$7 & 4;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 4; break;
  case 3: 
   var $12=$2;
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=$14 & -1793;
   HEAP32[(($13)>>2)]=$15;
   var $16=$1;
   var $17=(($16+532)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$2;
   var $20=(($19+8)|0);
   HEAP32[(($20)>>2)]=$18;
   var $21=$2;
   var $22=$1;
   var $23=(($22+532)|0);
   HEAP32[(($23)>>2)]=$21;
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _obj_free($mrb, $obj) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $e;
   var $c;
   var $d;
   $1=$mrb;
   $2=$obj;
   var $3=$2;
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5 & 255;
   if ((($6)|(0))==2 | (($6)|(0))==3 | (($6)|(0))==4) {
    label = 2; break;
   }
   else if ((($6)|(0))==6) {
    label = 3; break;
   }
   else if ((($6)|(0))==8) {
    label = 4; break;
   }
   else if ((($6)|(0))==9 | (($6)|(0))==10 | (($6)|(0))==12) {
    label = 5; break;
   }
   else if ((($6)|(0))==20) {
    label = 6; break;
   }
   else if ((($6)|(0))==22) {
    label = 9; break;
   }
   else if ((($6)|(0))==14) {
    label = 10; break;
   }
   else if ((($6)|(0))==15) {
    label = 14; break;
   }
   else if ((($6)|(0))==16) {
    label = 15; break;
   }
   else if ((($6)|(0))==17) {
    label = 16; break;
   }
   else if ((($6)|(0))==21) {
    label = 17; break;
   }
   else {
   label = 20; break;
   }
  case 2: 
   label = 22; break;
  case 3: 
   label = 22; break;
  case 4: 
   var $10=$1;
   var $11=$2;
   var $12=$11;
   _mrb_gc_free_iv($10, $12);
   label = 21; break;
  case 5: 
   var $14=$1;
   var $15=$2;
   var $16=$15;
   _mrb_gc_free_mt($14, $16);
   var $17=$1;
   var $18=$2;
   var $19=$18;
   _mrb_gc_free_iv($17, $19);
   label = 21; break;
  case 6: 
   var $21=$2;
   var $22=$21;
   $e=$22;
   var $23=$e;
   var $24=(($23+20)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25)|(0)) < 0;
   if ($26) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $28=$1;
   var $29=$e;
   var $30=(($29+12)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$31;
   _mrb_free($28, $32);
   var $33=$e;
   var $34=(($33+12)|0);
   HEAP32[(($34)>>2)]=0;
   label = 8; break;
  case 8: 
   label = 21; break;
  case 9: 
   var $37=$2;
   var $38=$37;
   var $39=(($38+12)|0);
   var $40=HEAP32[(($39)>>2)];
   $c=$40;
   var $41=$1;
   var $42=$c;
   _mrb_free_context($41, $42);
   label = 21; break;
  case 10: 
   var $44=$2;
   var $45=$44;
   var $46=HEAP32[(($45)>>2)];
   var $47=$46 >>> 11;
   var $48=$47 & 2097151;
   var $49=$48 & 256;
   var $50=(($49)|(0))!=0;
   if ($50) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $52=$1;
   var $53=$2;
   var $54=$53;
   var $55=(($54+16)|0);
   var $56=$55;
   var $57=HEAP32[(($56)>>2)];
   _mrb_ary_decref($52, $57);
   label = 13; break;
  case 12: 
   var $59=$1;
   var $60=$2;
   var $61=$60;
   var $62=(($61+20)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=$63;
   _mrb_free($59, $64);
   label = 13; break;
  case 13: 
   label = 21; break;
  case 14: 
   var $67=$1;
   var $68=$2;
   var $69=$68;
   _mrb_gc_free_iv($67, $69);
   var $70=$1;
   var $71=$2;
   var $72=$71;
   _mrb_gc_free_hash($70, $72);
   label = 21; break;
  case 15: 
   var $74=$1;
   var $75=$2;
   var $76=$75;
   _mrb_gc_free_str($74, $76);
   label = 21; break;
  case 16: 
   var $78=$1;
   var $79=$2;
   var $80=$79;
   var $81=(($80+12)|0);
   var $82=HEAP32[(($81)>>2)];
   var $83=$82;
   _mrb_free($78, $83);
   label = 21; break;
  case 17: 
   var $85=$2;
   var $86=$85;
   $d=$86;
   var $87=$d;
   var $88=(($87+16)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($89+4)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=(($91)|(0))!=0;
   if ($92) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $94=$d;
   var $95=(($94+16)|0);
   var $96=HEAP32[(($95)>>2)];
   var $97=(($96+4)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=$1;
   var $100=$d;
   var $101=(($100+20)|0);
   var $102=HEAP32[(($101)>>2)];
   FUNCTION_TABLE[$98]($99, $102);
   label = 19; break;
  case 19: 
   var $104=$1;
   var $105=$2;
   var $106=$105;
   _mrb_gc_free_iv($104, $106);
   label = 21; break;
  case 20: 
   label = 21; break;
  case 21: 
   var $109=$2;
   var $110=$109;
   var $111=HEAP32[(($110)>>2)];
   var $112=$111 & -256;
   var $113=$112 | 1;
   HEAP32[(($110)>>2)]=$113;
   label = 22; break;
  case 22: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_gc_protect($mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$mrb;
   var $2=(($obj+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)>>>(0)) <= 7;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 4; break;
  case 3: 
   var $7=$1;
   var $8=(($obj)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10;
   _gc_protect($7, $11);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _gc_protect($mrb, $p) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$p;
   var $3=$1;
   var $4=(($3+516)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0)) >= 100;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$1;
   var $9=(($8+516)|0);
   HEAP32[(($9)>>2)]=96;
   var $10=$1;
   var $11=$1;
   var $12=_mrb_class_get($11, ((85908)|0));
   _mrb_raise($10, $12, ((103556)|0));
   label = 3; break;
  case 3: 
   var $14=$2;
   var $15=$1;
   var $16=(($15+516)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)+(1))|0);
   HEAP32[(($16)>>2)]=$18;
   var $19=$1;
   var $20=(($19+116)|0);
   var $21=(($20+($17<<2))|0);
   HEAP32[(($21)>>2)]=$14;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_alloc($mrb, $ttype, $cls) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $p;
   $1=$mrb;
   $2=$ttype;
   $3=$cls;
   var $4=$1;
   var $5=(($4+540)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$1;
   var $8=(($7+112)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($6)>>>(0)) < (($9)>>>(0));
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$1;
   _mrb_incremental_gc($12);
   label = 3; break;
  case 3: 
   var $14=$1;
   var $15=(($14+108)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))==0;
   if ($17) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $19=$1;
   _add_heap($19);
   label = 5; break;
  case 5: 
   var $21=$1;
   var $22=(($21+108)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|0);
   var $25=HEAP32[(($24)>>2)];
   $p=$25;
   var $26=$p;
   var $27=$26;
   var $28=(($27+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$1;
   var $31=(($30+108)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)|0);
   HEAP32[(($33)>>2)]=$29;
   var $34=$1;
   var $35=(($34+108)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38)|(0))==0;
   if ($39) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $41=$1;
   var $42=$1;
   var $43=(($42+108)|0);
   var $44=HEAP32[(($43)>>2)];
   _unlink_free_heap_page($41, $44);
   label = 7; break;
  case 7: 
   var $46=$1;
   var $47=(($46+112)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=((($48)+(1))|0);
   HEAP32[(($47)>>2)]=$49;
   var $50=$1;
   var $51=$p;
   _gc_protect($50, $51);
   var $52=$p;
   var $53=$52;
   var $54=$53;
   assert(24 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[((((75040)|0))>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[(((((75040)|0))+(4))>>2)];HEAP32[((($54)+(8))>>2)]=HEAP32[(((((75040)|0))+(8))>>2)];HEAP32[((($54)+(12))>>2)]=HEAP32[(((((75040)|0))+(12))>>2)];HEAP32[((($54)+(16))>>2)]=HEAP32[(((((75040)|0))+(16))>>2)];HEAP32[((($54)+(20))>>2)]=HEAP32[(((((75040)|0))+(20))>>2)];
   var $55=$2;
   var $56=$p;
   var $57=$55 & 255;
   var $58=$56;
   var $59=$57 & 255;
   var $60=HEAP32[(($58)>>2)];
   var $61=$60 & -256;
   var $62=$61 | $59;
   HEAP32[(($58)>>2)]=$62;
   var $63=$3;
   var $64=$p;
   var $65=(($64+4)|0);
   HEAP32[(($65)>>2)]=$63;
   var $66=$1;
   var $67=(($66+524)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=$p;
   var $70=$68 & 7;
   var $71=$69;
   var $72=$70 & 7;
   var $73=$72 << 8;
   var $74=HEAP32[(($71)>>2)];
   var $75=$74 & -1793;
   var $76=$75 | $73;
   HEAP32[(($71)>>2)]=$76;
   var $77=$p;
   return $77;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_incremental_gc($mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $limit;
   var $result;
   $1=$mrb;
   var $2=$1;
   var $3=$2;
   var $4=(($3+552)|0);
   var $5=HEAP8[($4)];
   var $6=$5 & 1;
   var $7=(($6 << 24) >> 24)!=0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 29; break;
  case 3: 
   var $10=$1;
   var $11=$10;
   var $12=(($11+552)|0);
   var $13=HEAP8[($12)];
   var $14=(($13)&(255)) >>> 2;
   var $15=$14 & 1;
   var $16=(($15)&(255));
   var $17=(($16)|(0))!=0;
   if ($17) { label = 4; break; } else { label = 9; break; }
  case 4: 
   var $19=$1;
   var $20=$19;
   var $21=(($20+552)|0);
   var $22=HEAP8[($21)];
   var $23=(($22)&(255)) >>> 1;
   var $24=$23 & 1;
   var $25=(($24 << 24) >> 24)!=0;
   if ($25) { label = 9; break; } else { label = 5; break; }
  case 5: 
   label = 6; break;
  case 6: 
   var $28=$1;
   var $29=_incremental_gc($28, -1);
   label = 7; break;
  case 7: 
   var $31=$1;
   var $32=(($31+520)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33)|(0))!=0;
   if ($34) { label = 6; break; } else { label = 8; break; }
  case 8: 
   label = 15; break;
  case 9: 
   $limit=0;
   $result=0;
   var $37=$1;
   var $38=(($37+548)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=((($39)*(10))&-1);
   $limit=$40;
   label = 10; break;
  case 10: 
   var $42=$result;
   var $43=$limit;
   var $44=(($42)>>>(0)) < (($43)>>>(0));
   if ($44) { label = 11; break; } else { label = 14; break; }
  case 11: 
   var $46=$1;
   var $47=$limit;
   var $48=_incremental_gc($46, $47);
   var $49=$result;
   var $50=((($49)+($48))|0);
   $result=$50;
   var $51=$1;
   var $52=(($51+520)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53)|(0))==0;
   if ($54) { label = 12; break; } else { label = 13; break; }
  case 12: 
   label = 14; break;
  case 13: 
   label = 10; break;
  case 14: 
   label = 15; break;
  case 15: 
   var $59=$1;
   var $60=(($59+520)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($61)|(0))==0;
   if ($62) { label = 16; break; } else { label = 28; break; }
  case 16: 
   var $64=$1;
   var $65=(($64+536)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=((((($66)>>>(0)))/(100))&-1);
   var $68=$1;
   var $69=(($68+544)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(Math.imul($67,$70)|0);
   var $72=$1;
   var $73=(($72+540)|0);
   HEAP32[(($73)>>2)]=$71;
   var $74=$1;
   var $75=(($74+540)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=(($76)>>>(0)) < 1024;
   if ($77) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $79=$1;
   var $80=(($79+540)|0);
   HEAP32[(($80)>>2)]=1024;
   label = 18; break;
  case 18: 
   var $82=$1;
   var $83=$82;
   var $84=(($83+552)|0);
   var $85=HEAP8[($84)];
   var $86=(($85)&(255)) >>> 2;
   var $87=$86 & 1;
   var $88=(($87)&(255));
   var $89=(($88)|(0))!=0;
   if ($89) { label = 19; break; } else { label = 21; break; }
  case 19: 
   var $91=$1;
   var $92=$91;
   var $93=(($92+552)|0);
   var $94=HEAP8[($93)];
   var $95=(($94)&(255)) >>> 1;
   var $96=$95 & 1;
   var $97=(($96)&(255));
   var $98=(($97)|(0))!=0;
   if ($98) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $100=$1;
   var $101=(($100+536)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=((((($102)>>>(0)))/(100))&-1);
   var $104=((($103)*(200))&-1);
   var $105=$1;
   var $106=(($105+556)|0);
   HEAP32[(($106)>>2)]=$104;
   var $107=$1;
   var $108=$107;
   var $109=(($108+552)|0);
   var $110=HEAP8[($109)];
   var $111=$110 & -3;
   HEAP8[($109)]=$111;
   label = 27; break;
  case 21: 
   var $113=$1;
   var $114=$113;
   var $115=(($114+552)|0);
   var $116=HEAP8[($115)];
   var $117=(($116)&(255)) >>> 2;
   var $118=$117 & 1;
   var $119=(($118)&(255));
   var $120=(($119)|(0))!=0;
   if ($120) { label = 22; break; } else { label = 26; break; }
  case 22: 
   var $122=$1;
   var $123=$122;
   var $124=(($123+552)|0);
   var $125=HEAP8[($124)];
   var $126=(($125)&(255)) >>> 1;
   var $127=$126 & 1;
   var $128=(($127 << 24) >> 24)!=0;
   if ($128) { label = 26; break; } else { label = 23; break; }
  case 23: 
   var $130=$1;
   var $131=(($130+112)|0);
   var $132=HEAP32[(($131)>>2)];
   var $133=$1;
   var $134=(($133+556)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=(($132)>>>(0)) > (($135)>>>(0));
   if ($136) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $138=$1;
   _clear_all_old($138);
   var $139=$1;
   var $140=$139;
   var $141=(($140+552)|0);
   var $142=HEAP8[($141)];
   var $143=$142 & -3;
   var $144=$143 | 2;
   HEAP8[($141)]=$144;
   label = 25; break;
  case 25: 
   label = 26; break;
  case 26: 
   label = 27; break;
  case 27: 
   label = 29; break;
  case 28: 
   var $149=$1;
   var $150=(($149+112)|0);
   var $151=HEAP32[(($150)>>2)];
   var $152=((($151)+(1024))|0);
   var $153=$1;
   var $154=(($153+540)|0);
   HEAP32[(($154)>>2)]=$152;
   label = 29; break;
  case 29: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_gc_mark($mrb, $obj) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$obj;
   var $3=$2;
   var $4=(($3)|(0))==0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   label = 6; break;
  case 3: 
   var $7=$2;
   var $8=$7;
   var $9=HEAP32[(($8)>>2)];
   var $10=$9 >>> 8;
   var $11=$10 & 7;
   var $12=$11 & 3;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 5; break; } else { label = 4; break; }
  case 4: 
   label = 6; break;
  case 5: 
   var $16=$1;
   var $17=$2;
   _add_gray_list($16, $17);
   label = 6; break;
  case 6: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _incremental_gc($mrb, $limit) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $tried_sweep;
   $2=$mrb;
   $3=$limit;
   var $4=$2;
   var $5=(($4+520)|0);
   var $6=HEAP32[(($5)>>2)];
   if ((($6)|(0))==0) {
    label = 2; break;
   }
   else if ((($6)|(0))==1) {
    label = 3; break;
   }
   else if ((($6)|(0))==2) {
    label = 6; break;
   }
   else {
   label = 9; break;
   }
  case 2: 
   var $8=$2;
   _root_scan_phase($8);
   var $9=$2;
   var $10=(($9+520)|0);
   HEAP32[(($10)>>2)]=1;
   var $11=$2;
   var $12=(($11+524)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$13 ^ 3;
   var $15=$2;
   var $16=(($15+524)|0);
   HEAP32[(($16)>>2)]=$14;
   $1=0;
   label = 10; break;
  case 3: 
   var $18=$2;
   var $19=(($18+528)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|(0))!=0;
   if ($21) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $23=$2;
   var $24=$3;
   var $25=_incremental_marking_phase($23, $24);
   $1=$25;
   label = 10; break;
  case 5: 
   var $27=$2;
   _final_marking_phase($27);
   var $28=$2;
   _prepare_incremental_sweep($28);
   $1=0;
   label = 10; break;
  case 6: 
   $tried_sweep=0;
   var $30=$2;
   var $31=$3;
   var $32=_incremental_sweep_phase($30, $31);
   $tried_sweep=$32;
   var $33=$tried_sweep;
   var $34=(($33)|(0))==0;
   if ($34) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $36=$2;
   var $37=(($36+520)|0);
   HEAP32[(($37)>>2)]=0;
   label = 8; break;
  case 8: 
   var $39=$tried_sweep;
   $1=$39;
   label = 10; break;
  case 9: 
   $1=0;
   label = 10; break;
  case 10: 
   var $42=$1;
   return $42;
  default: assert(0, "bad label: " + label);
 }
}
function _clear_all_old($mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $origin_mode;
   $1=$mrb;
   var $2=$1;
   var $3=$2;
   var $4=(($3+552)|0);
   var $5=HEAP8[($4)];
   var $6=(($5)&(255)) >>> 2;
   var $7=$6 & 1;
   var $8=(($7)&(255));
   $origin_mode=$8;
   var $9=$1;
   var $10=$9;
   var $11=(($10+552)|0);
   var $12=HEAP8[($11)];
   var $13=(($12)&(255)) >>> 2;
   var $14=$13 & 1;
   var $15=(($14)&(255));
   var $16=(($15)|(0))!=0;
   if ($16) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $18=$1;
   var $19=$18;
   var $20=(($19+552)|0);
   var $21=HEAP8[($20)];
   var $22=(($21)&(255)) >>> 1;
   var $23=$22 & 1;
   var $24=(($23)&(255));
   var $25=(($24)|(0))!=0;
   if ($25) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $27=$1;
   _advance_phase($27, 0);
   label = 4; break;
  case 4: 
   var $29=$1;
   var $30=$29;
   var $31=(($30+552)|0);
   var $32=HEAP8[($31)];
   var $33=$32 & -5;
   HEAP8[($31)]=$33;
   var $34=$1;
   _prepare_incremental_sweep($34);
   var $35=$1;
   _advance_phase($35, 0);
   var $36=$1;
   var $37=(($36+528)|0);
   HEAP32[(($37)>>2)]=0;
   var $38=$1;
   var $39=(($38+532)|0);
   HEAP32[(($39)>>2)]=0;
   var $40=$origin_mode;
   var $41=(($40) & 255);
   var $42=$1;
   var $43=$41 & 1;
   var $44=$42;
   var $45=(($44+552)|0);
   var $46=$43 & 1;
   var $47=$46 << 2;
   var $48=HEAP8[($45)];
   var $49=$48 & -5;
   var $50=$49 | $47;
   HEAP8[($45)]=$50;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_field_write_barrier($mrb, $obj, $value) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$mrb;
   $2=$obj;
   $3=$value;
   var $4=$2;
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=$6 >>> 8;
   var $8=$7 & 7;
   var $9=$8 & 4;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 9; break;
  case 3: 
   var $13=$3;
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15 >>> 8;
   var $17=$16 & 7;
   var $18=$17 & 3;
   var $19=(($18)|(0))!=0;
   if ($19) { label = 5; break; } else { label = 4; break; }
  case 4: 
   label = 9; break;
  case 5: 
   var $22=$1;
   var $23=$22;
   var $24=(($23+552)|0);
   var $25=HEAP8[($24)];
   var $26=(($25)&(255)) >>> 2;
   var $27=$26 & 1;
   var $28=(($27)&(255));
   var $29=(($28)|(0))!=0;
   if ($29) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $31=$1;
   var $32=(($31+520)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33)|(0))==1;
   if ($34) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $36=$1;
   var $37=$3;
   _add_gray_list($36, $37);
   label = 9; break;
  case 8: 
   var $39=$1;
   var $40=(($39+524)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$2;
   var $43=$41 & 7;
   var $44=$42;
   var $45=$43 & 7;
   var $46=$45 << 8;
   var $47=HEAP32[(($44)>>2)];
   var $48=$47 & -1793;
   var $49=$48 | $46;
   HEAP32[(($44)>>2)]=$49;
   label = 9; break;
  case 9: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _prepare_incremental_sweep($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=(($2+520)|0);
 HEAP32[(($3)>>2)]=2;
 var $4=$1;
 var $5=(($4+100)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$1;
 var $8=(($7+104)|0);
 HEAP32[(($8)>>2)]=$6;
 var $9=$1;
 var $10=(($9+112)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$1;
 var $13=(($12+536)|0);
 HEAP32[(($13)>>2)]=$11;
 return;
}
function _mrb_objspace_each_objects($mrb, $callback, $data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $page;
   var $p;
   var $pend;
   $1=$mrb;
   $2=$callback;
   $3=$data;
   var $4=$1;
   var $5=(($4+100)|0);
   var $6=HEAP32[(($5)>>2)];
   $page=$6;
   label = 2; break;
  case 2: 
   var $8=$page;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $11=$page;
   var $12=(($11+24)|0);
   var $13=(($12)|0);
   $p=$13;
   var $14=$p;
   var $15=(($14+24576)|0);
   $pend=$15;
   label = 4; break;
  case 4: 
   var $17=$p;
   var $18=$pend;
   var $19=(($17)>>>(0)) < (($18)>>>(0));
   if ($19) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $21=$2;
   var $22=$1;
   var $23=$p;
   var $24=(($23)|0);
   var $25=$24;
   var $26=$3;
   FUNCTION_TABLE[$21]($22, $25, $26);
   label = 6; break;
  case 6: 
   var $28=$p;
   var $29=(($28+24)|0);
   $p=$29;
   label = 4; break;
  case 7: 
   var $31=$page;
   var $32=(($31+8)|0);
   var $33=HEAP32[(($32)>>2)];
   $page=$33;
   label = 2; break;
  case 8: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_init_gc($mrb) {
 var label = 0;
 var $1;
 var $gc;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_define_module($2, ((97280)|0));
 $gc=$3;
 var $4=$1;
 var $5=$gc;
 _mrb_define_class_method($4, $5, ((94580)|0), 264, 0);
 var $6=$1;
 var $7=$gc;
 _mrb_define_class_method($6, $7, ((92076)|0), 160, 0);
 var $8=$1;
 var $9=$gc;
 _mrb_define_class_method($8, $9, ((89788)|0), 100, 0);
 var $10=$1;
 var $11=$gc;
 _mrb_define_class_method($10, $11, ((88556)|0), 104, 0);
 var $12=$1;
 var $13=$gc;
 _mrb_define_class_method($12, $13, ((87520)|0), 262, 262144);
 var $14=$1;
 var $15=$gc;
 _mrb_define_class_method($14, $15, ((86724)|0), 176, 0);
 var $16=$1;
 var $17=$gc;
 _mrb_define_class_method($16, $17, ((85824)|0), 290, 262144);
 var $18=$1;
 var $19=$gc;
 _mrb_define_class_method($18, $19, ((105456)|0), 356, 262144);
 var $20=$1;
 var $21=$gc;
 _mrb_define_class_method($20, $21, ((104680)|0), 186, 0);
 return;
}
function _gc_start($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_garbage_collect($2);
 _mrb_nil_value1030($agg_result);
 STACKTOP = sp;
 return;
}
function _gc_enable($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $old;
 $1=$mrb;
 var $2=$1;
 var $3=$2;
 var $4=(($3+552)|0);
 var $5=HEAP8[($4)];
 var $6=$5 & 1;
 var $7=(($6)&(255));
 $old=$7;
 var $8=$1;
 var $9=$8;
 var $10=(($9+552)|0);
 var $11=HEAP8[($10)];
 var $12=$11 & -2;
 HEAP8[($10)]=$12;
 var $13=$old;
 var $14=(($13) & 255);
 _mrb_bool_value1029($agg_result, $14);
 STACKTOP = sp;
 return;
}
function _gc_disable($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $old;
 $1=$mrb;
 var $2=$1;
 var $3=$2;
 var $4=(($3+552)|0);
 var $5=HEAP8[($4)];
 var $6=$5 & 1;
 var $7=(($6)&(255));
 $old=$7;
 var $8=$1;
 var $9=$8;
 var $10=(($9+552)|0);
 var $11=HEAP8[($10)];
 var $12=$11 & -2;
 var $13=$12 | 1;
 HEAP8[($10)]=$13;
 var $14=$old;
 var $15=(($14) & 255);
 _mrb_bool_value1029($agg_result, $15);
 STACKTOP = sp;
 return;
}
function _gc_interval_ratio_get($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=(($2+544)|0);
 var $4=HEAP32[(($3)>>2)];
 _mrb_fixnum_value1031($agg_result, $4);
 STACKTOP = sp;
 return;
}
function _gc_interval_ratio_set($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $ratio=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((103632)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$ratio,tempInt));
 var $4=HEAP32[(($ratio)>>2)];
 var $5=$1;
 var $6=(($5+544)|0);
 HEAP32[(($6)>>2)]=$4;
 _mrb_nil_value1030($agg_result);
 STACKTOP = sp;
 return;
}
function _gc_step_ratio_get($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=(($2+548)|0);
 var $4=HEAP32[(($3)>>2)];
 _mrb_fixnum_value1031($agg_result, $4);
 STACKTOP = sp;
 return;
}
function _gc_step_ratio_set($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $ratio=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((103632)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$ratio,tempInt));
 var $4=HEAP32[(($ratio)>>2)];
 var $5=$1;
 var $6=(($5+548)|0);
 HEAP32[(($6)>>2)]=$4;
 _mrb_nil_value1030($agg_result);
 STACKTOP = sp;
 return;
}
function _gc_generational_mode_set($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $enable=sp;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((104224)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$enable,tempInt));
   var $4=$1;
   var $5=$4;
   var $6=(($5+552)|0);
   var $7=HEAP8[($6)];
   var $8=(($7)&(255)) >>> 2;
   var $9=$8 & 1;
   var $10=(($9)&(255));
   var $11=HEAP8[($enable)];
   var $12=(($11)&(255));
   var $13=(($10)|(0))!=(($12)|(0));
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $15=$1;
   var $16=HEAP8[($enable)];
   var $17=(($16)&(255));
   _change_gen_gc_mode($15, $17);
   label = 3; break;
  case 3: 
   var $19=HEAP8[($enable)];
   _mrb_bool_value1029($agg_result, $19);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _gc_generational_mode_get($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=$2;
 var $4=(($3+552)|0);
 var $5=HEAP8[($4)];
 var $6=(($5)&(255)) >>> 2;
 var $7=$6 & 1;
 _mrb_bool_value1029($agg_result, $7);
 STACKTOP = sp;
 return;
}
function _mrb_bool_value1029($agg_result, $boolean) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$boolean;
   label = 2; break;
  case 2: 
   var $3=$1;
   var $4=(($3)&(255));
   var $5=(($4)|(0))!=0;
   var $6=$5 ? 2 : 0;
   var $7=(($v+8)|0);
   HEAP32[(($7)>>2)]=$6;
   var $8=(($v)|0);
   var $9=$8;
   HEAP32[(($9)>>2)]=1;
   label = 3; break;
  case 3: 
   var $11=$agg_result;
   var $12=$v;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _change_gen_gc_mode($mrb, $enable) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$enable;
   var $3=$1;
   var $4=$3;
   var $5=(($4+552)|0);
   var $6=HEAP8[($5)];
   var $7=(($6)&(255)) >>> 2;
   var $8=$7 & 1;
   var $9=(($8)&(255));
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $12=$2;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $15=$1;
   _clear_all_old($15);
   var $16=$1;
   var $17=$16;
   var $18=(($17+552)|0);
   var $19=HEAP8[($18)];
   var $20=$19 & -3;
   HEAP8[($18)]=$20;
   label = 8; break;
  case 4: 
   var $22=$1;
   var $23=$22;
   var $24=(($23+552)|0);
   var $25=HEAP8[($24)];
   var $26=(($25)&(255)) >>> 2;
   var $27=$26 & 1;
   var $28=(($27 << 24) >> 24)!=0;
   if ($28) { label = 7; break; } else { label = 5; break; }
  case 5: 
   var $30=$2;
   var $31=(($30)|(0))!=0;
   if ($31) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $33=$1;
   _advance_phase($33, 0);
   var $34=$1;
   var $35=(($34+536)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=((((($36)>>>(0)))/(100))&-1);
   var $38=((($37)*(200))&-1);
   var $39=$1;
   var $40=(($39+556)|0);
   HEAP32[(($40)>>2)]=$38;
   var $41=$1;
   var $42=$41;
   var $43=(($42+552)|0);
   var $44=HEAP8[($43)];
   var $45=$44 & -3;
   HEAP8[($43)]=$45;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $48=$2;
   var $49=(($48) & 255);
   var $50=$1;
   var $51=$49 & 1;
   var $52=$50;
   var $53=(($52+552)|0);
   var $54=$51 & 1;
   var $55=$54 << 2;
   var $56=HEAP8[($53)];
   var $57=$56 & -5;
   var $58=$57 | $55;
   HEAP8[($53)]=$58;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _advance_phase($mrb, $to_state) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$to_state;
   label = 2; break;
  case 2: 
   var $4=$1;
   var $5=(($4+520)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=$2;
   var $8=(($6)|(0))!=(($7)|(0));
   if ($8) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $10=$1;
   var $11=_incremental_gc($10, -1);
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value1030($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_value1031($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _root_scan_phase($mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $i;
   var $e;
   var $j;
   var $len;
   var $irep;
   $1=$mrb;
   var $2=$1;
   var $3=$2;
   var $4=(($3+552)|0);
   var $5=HEAP8[($4)];
   var $6=(($5)&(255)) >>> 2;
   var $7=$6 & 1;
   var $8=(($7)&(255));
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$1;
   var $12=$11;
   var $13=(($12+552)|0);
   var $14=HEAP8[($13)];
   var $15=(($14)&(255)) >>> 1;
   var $16=$15 & 1;
   var $17=(($16 << 24) >> 24)!=0;
   if ($17) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $19=$1;
   var $20=(($19+528)|0);
   HEAP32[(($20)>>2)]=0;
   var $21=$1;
   var $22=(($21+532)|0);
   HEAP32[(($22)>>2)]=0;
   label = 4; break;
  case 4: 
   var $24=$1;
   _mrb_gc_mark_gv($24);
   $i=0;
   var $25=$1;
   var $26=(($25+516)|0);
   var $27=HEAP32[(($26)>>2)];
   $e=$27;
   label = 5; break;
  case 5: 
   var $29=$i;
   var $30=$e;
   var $31=(($29)>>>(0)) < (($30)>>>(0));
   if ($31) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $33=$1;
   var $34=$i;
   var $35=$1;
   var $36=(($35+116)|0);
   var $37=(($36+($34<<2))|0);
   var $38=HEAP32[(($37)>>2)];
   _mrb_gc_mark($33, $38);
   label = 7; break;
  case 7: 
   var $40=$i;
   var $41=((($40)+(1))|0);
   $i=$41;
   label = 5; break;
  case 8: 
   var $43=$1;
   var $44=$1;
   var $45=(($44+44)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=$46;
   _mrb_gc_mark($43, $47);
   var $48=$1;
   var $49=$1;
   var $50=(($49+40)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$51;
   _mrb_gc_mark($48, $52);
   var $53=$1;
   var $54=$1;
   var $55=(($54+16)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=$56;
   _mrb_gc_mark($53, $57);
   var $58=$1;
   var $59=$1;
   var $60=(($59+12)|0);
   var $61=HEAP32[(($60)>>2)];
   _mark_context($58, $61);
   var $62=$1;
   var $63=(($62+24)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64)|(0))!=0;
   if ($65) { label = 9; break; } else { label = 26; break; }
  case 9: 
   var $67=$1;
   var $68=(($67+28)|0);
   var $69=HEAP32[(($68)>>2)];
   $len=$69;
   var $70=$len;
   var $71=$1;
   var $72=(($71+32)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($70)>>>(0)) > (($73)>>>(0));
   if ($74) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $76=$1;
   var $77=(($76+32)|0);
   var $78=HEAP32[(($77)>>2)];
   $len=$78;
   label = 11; break;
  case 11: 
   $i=0;
   label = 12; break;
  case 12: 
   var $81=$i;
   var $82=$len;
   var $83=(($81)>>>(0)) < (($82)>>>(0));
   if ($83) { label = 13; break; } else { label = 25; break; }
  case 13: 
   var $85=$i;
   var $86=$1;
   var $87=(($86+24)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=(($88+($85<<2))|0);
   var $90=HEAP32[(($89)>>2)];
   $irep=$90;
   var $91=$irep;
   var $92=(($91)|(0))!=0;
   if ($92) { label = 15; break; } else { label = 14; break; }
  case 14: 
   label = 24; break;
  case 15: 
   $j=0;
   label = 16; break;
  case 16: 
   var $96=$j;
   var $97=$irep;
   var $98=(($97+36)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($96)>>>(0)) < (($99)>>>(0));
   if ($100) { label = 17; break; } else { label = 23; break; }
  case 17: 
   label = 18; break;
  case 18: 
   var $103=$j;
   var $104=$irep;
   var $105=(($104+16)|0);
   var $106=HEAP32[(($105)>>2)];
   var $107=(($106+((($103)*(12))&-1))|0);
   var $108=(($107+8)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=(($109)>>>(0)) >= 8;
   if ($110) { label = 19; break; } else { label = 20; break; }
  case 19: 
   var $112=$1;
   var $113=$j;
   var $114=$irep;
   var $115=(($114+16)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=(($116+((($113)*(12))&-1))|0);
   var $118=(($117)|0);
   var $119=$118;
   var $120=HEAP32[(($119)>>2)];
   var $121=$120;
   _mrb_gc_mark($112, $121);
   label = 20; break;
  case 20: 
   label = 21; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $125=$j;
   var $126=((($125)+(1))|0);
   $j=$126;
   label = 16; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $129=$i;
   var $130=((($129)+(1))|0);
   $i=$130;
   label = 12; break;
  case 25: 
   label = 26; break;
  case 26: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _incremental_marking_phase($mrb, $limit) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $tried_marks;
   $1=$mrb;
   $2=$limit;
   $tried_marks=0;
   label = 2; break;
  case 2: 
   var $4=$1;
   var $5=(($4+528)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { var $13 = 0;label = 4; break; }
  case 3: 
   var $9=$tried_marks;
   var $10=$2;
   var $11=(($9)>>>(0)) < (($10)>>>(0));
   var $13 = $11;label = 4; break;
  case 4: 
   var $13;
   if ($13) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $15=$1;
   var $16=$1;
   var $17=(($16+528)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=_gc_gray_mark($15, $18);
   var $20=$tried_marks;
   var $21=((($20)+($19))|0);
   $tried_marks=$21;
   label = 2; break;
  case 6: 
   var $23=$tried_marks;
   return $23;
  default: assert(0, "bad label: " + label);
 }
}
function _final_marking_phase($mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$mrb;
   var $2=$1;
   var $3=$1;
   var $4=(($3+12)|0);
   var $5=HEAP32[(($4)>>2)];
   _mark_context_stack($2, $5);
   label = 2; break;
  case 2: 
   var $7=$1;
   var $8=(($7+528)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))!=0;
   if ($10) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $12=$1;
   var $13=(($12+528)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=$16 >>> 8;
   var $18=$17 & 7;
   var $19=(($18)|(0))==0;
   if ($19) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=$1;
   var $22=$1;
   var $23=(($22+528)|0);
   var $24=HEAP32[(($23)>>2)];
   _gc_mark_children($21, $24);
   label = 6; break;
  case 5: 
   var $26=$1;
   var $27=(($26+528)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28+8)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$1;
   var $32=(($31+528)|0);
   HEAP32[(($32)>>2)]=$30;
   label = 6; break;
  case 6: 
   label = 2; break;
  case 7: 
   var $35=$1;
   var $36=(($35+532)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=$1;
   var $39=(($38+528)|0);
   HEAP32[(($39)>>2)]=$37;
   var $40=$1;
   var $41=(($40+532)|0);
   HEAP32[(($41)>>2)]=0;
   label = 8; break;
  case 8: 
   var $43=$1;
   var $44=(($43+528)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($45)|(0))!=0;
   if ($46) { label = 9; break; } else { label = 13; break; }
  case 9: 
   var $48=$1;
   var $49=(($48+528)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=$50;
   var $52=HEAP32[(($51)>>2)];
   var $53=$52 >>> 8;
   var $54=$53 & 7;
   var $55=(($54)|(0))==0;
   if ($55) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $57=$1;
   var $58=$1;
   var $59=(($58+528)|0);
   var $60=HEAP32[(($59)>>2)];
   _gc_mark_children($57, $60);
   label = 12; break;
  case 11: 
   var $62=$1;
   var $63=(($62+528)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64+8)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=$1;
   var $68=(($67+528)|0);
   HEAP32[(($68)>>2)]=$66;
   label = 12; break;
  case 12: 
   label = 8; break;
  case 13: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _unlink_heap_page($mrb, $page) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$page;
   var $3=$2;
   var $4=(($3+4)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$2;
   var $9=(($8+8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$2;
   var $12=(($11+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13+8)|0);
   HEAP32[(($14)>>2)]=$10;
   label = 3; break;
  case 3: 
   var $16=$2;
   var $17=(($16+8)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18)|(0))!=0;
   if ($19) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=$2;
   var $22=(($21+4)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=$2;
   var $25=(($24+8)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26+4)|0);
   HEAP32[(($27)>>2)]=$23;
   label = 5; break;
  case 5: 
   var $29=$1;
   var $30=(($29+100)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$2;
   var $33=(($31)|(0))==(($32)|(0));
   if ($33) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $35=$2;
   var $36=(($35+8)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=$1;
   var $39=(($38+100)|0);
   HEAP32[(($39)>>2)]=$37;
   label = 7; break;
  case 7: 
   var $41=$2;
   var $42=(($41+4)|0);
   HEAP32[(($42)>>2)]=0;
   var $43=$2;
   var $44=(($43+8)|0);
   HEAP32[(($44)>>2)]=0;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _link_free_heap_page($mrb, $page) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$page;
   var $3=$1;
   var $4=(($3+108)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$2;
   var $7=(($6+12)|0);
   HEAP32[(($7)>>2)]=$5;
   var $8=$1;
   var $9=(($8+108)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$2;
   var $14=$1;
   var $15=(($14+108)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16+16)|0);
   HEAP32[(($17)>>2)]=$13;
   label = 3; break;
  case 3: 
   var $19=$2;
   var $20=$1;
   var $21=(($20+108)|0);
   HEAP32[(($21)>>2)]=$19;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _incremental_sweep_phase($mrb, $limit) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $page;
   var $tried_sweep;
   var $p;
   var $e;
   var $freed;
   var $dead_slot;
   var $full;
   var $next;
   $1=$mrb;
   $2=$limit;
   var $3=$1;
   var $4=(($3+104)|0);
   var $5=HEAP32[(($4)>>2)];
   $page=$5;
   $tried_sweep=0;
   label = 2; break;
  case 2: 
   var $7=$page;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 3; break; } else { var $14 = 0;label = 4; break; }
  case 3: 
   var $10=$tried_sweep;
   var $11=$2;
   var $12=(($10)>>>(0)) < (($11)>>>(0));
   var $14 = $12;label = 4; break;
  case 4: 
   var $14;
   if ($14) { label = 5; break; } else { label = 33; break; }
  case 5: 
   var $16=$page;
   var $17=(($16+24)|0);
   var $18=(($17)|0);
   $p=$18;
   var $19=$p;
   var $20=(($19+24576)|0);
   $e=$20;
   $freed=0;
   $dead_slot=1;
   var $21=$page;
   var $22=(($21)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0))==0;
   var $25=(($24)&(1));
   $full=$25;
   var $26=$1;
   var $27=$26;
   var $28=(($27+552)|0);
   var $29=HEAP8[($28)];
   var $30=(($29)&(255)) >>> 2;
   var $31=$30 & 1;
   var $32=(($31)&(255));
   var $33=(($32)|(0))!=0;
   if ($33) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $35=$1;
   var $36=$35;
   var $37=(($36+552)|0);
   var $38=HEAP8[($37)];
   var $39=(($38)&(255)) >>> 1;
   var $40=$39 & 1;
   var $41=(($40 << 24) >> 24)!=0;
   if ($41) { label = 9; break; } else { label = 7; break; }
  case 7: 
   var $43=$page;
   var $44=$43;
   var $45=(($44+20)|0);
   var $46=HEAP8[($45)];
   var $47=$46 & 1;
   var $48=(($47)&(255));
   var $49=(($48)|(0))!=0;
   if ($49) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $51=$e;
   $p=$51;
   $dead_slot=0;
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $54=$p;
   var $55=$e;
   var $56=(($54)>>>(0)) < (($55)>>>(0));
   if ($56) { label = 11; break; } else { label = 20; break; }
  case 11: 
   var $58=$p;
   var $59=(($58)|0);
   var $60=$59;
   var $61=$60;
   var $62=HEAP32[(($61)>>2)];
   var $63=$62 >>> 8;
   var $64=$63 & 7;
   var $65=$1;
   var $66=(($65+524)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=$67 ^ 3;
   var $69=$64 & $68;
   var $70=$69 & 3;
   var $71=(($70)|(0))!=0;
   if ($71) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $73=$p;
   var $74=(($73)|0);
   var $75=$74;
   var $76=$75;
   var $77=HEAP32[(($76)>>2)];
   var $78=$77 & 255;
   var $79=(($78)|(0))==1;
   if ($79) { label = 13; break; } else { label = 16; break; }
  case 13: 
   var $81=$p;
   var $82=(($81)|0);
   var $83=$82;
   var $84=$83;
   var $85=HEAP32[(($84)>>2)];
   var $86=$85 & 255;
   var $87=(($86)|(0))!=1;
   if ($87) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $89=$1;
   var $90=$p;
   var $91=(($90)|0);
   var $92=$91;
   _obj_free($89, $92);
   var $93=$page;
   var $94=(($93)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=$p;
   var $97=(($96)|0);
   var $98=$97;
   var $99=(($98+12)|0);
   HEAP32[(($99)>>2)]=$95;
   var $100=$p;
   var $101=$100;
   var $102=$page;
   var $103=(($102)|0);
   HEAP32[(($103)>>2)]=$101;
   var $104=$freed;
   var $105=((($104)+(1))|0);
   $freed=$105;
   label = 15; break;
  case 15: 
   label = 19; break;
  case 16: 
   var $108=$1;
   var $109=$108;
   var $110=(($109+552)|0);
   var $111=HEAP8[($110)];
   var $112=(($111)&(255)) >>> 2;
   var $113=$112 & 1;
   var $114=(($113 << 24) >> 24)!=0;
   if ($114) { label = 18; break; } else { label = 17; break; }
  case 17: 
   var $116=$1;
   var $117=(($116+524)|0);
   var $118=HEAP32[(($117)>>2)];
   var $119=$p;
   var $120=(($119)|0);
   var $121=$120;
   var $122=$118 & 7;
   var $123=$121;
   var $124=$122 & 7;
   var $125=$124 << 8;
   var $126=HEAP32[(($123)>>2)];
   var $127=$126 & -1793;
   var $128=$127 | $125;
   HEAP32[(($123)>>2)]=$128;
   label = 18; break;
  case 18: 
   $dead_slot=0;
   label = 19; break;
  case 19: 
   var $131=$p;
   var $132=(($131+24)|0);
   $p=$132;
   label = 10; break;
  case 20: 
   var $134=$dead_slot;
   var $135=(($134)|(0))!=0;
   if ($135) { label = 21; break; } else { label = 23; break; }
  case 21: 
   var $137=$freed;
   var $138=(($137)>>>(0)) < 1024;
   if ($138) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $140=$page;
   var $141=(($140+8)|0);
   var $142=HEAP32[(($141)>>2)];
   $next=$142;
   var $143=$1;
   var $144=$page;
   _unlink_heap_page($143, $144);
   var $145=$1;
   var $146=$page;
   _unlink_free_heap_page($145, $146);
   var $147=$1;
   var $148=$page;
   var $149=$148;
   _mrb_free($147, $149);
   var $150=$next;
   $page=$150;
   label = 32; break;
  case 23: 
   var $152=$full;
   var $153=(($152)|(0))!=0;
   if ($153) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $155=$freed;
   var $156=(($155)>>>(0)) > 0;
   if ($156) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $158=$1;
   var $159=$page;
   _link_free_heap_page($158, $159);
   label = 26; break;
  case 26: 
   var $161=$page;
   var $162=(($161)|0);
   var $163=HEAP32[(($162)>>2)];
   var $164=(($163)|(0))==0;
   if ($164) { label = 27; break; } else { label = 30; break; }
  case 27: 
   var $166=$1;
   var $167=$166;
   var $168=(($167+552)|0);
   var $169=HEAP8[($168)];
   var $170=(($169)&(255)) >>> 2;
   var $171=$170 & 1;
   var $172=(($171)&(255));
   var $173=(($172)|(0))!=0;
   if ($173) { label = 28; break; } else { label = 30; break; }
  case 28: 
   var $175=$1;
   var $176=$175;
   var $177=(($176+552)|0);
   var $178=HEAP8[($177)];
   var $179=(($178)&(255)) >>> 1;
   var $180=$179 & 1;
   var $181=(($180 << 24) >> 24)!=0;
   if ($181) { label = 30; break; } else { label = 29; break; }
  case 29: 
   var $183=$page;
   var $184=$183;
   var $185=(($184+20)|0);
   var $186=HEAP8[($185)];
   var $187=$186 & -2;
   var $188=$187 | 1;
   HEAP8[($185)]=$188;
   label = 31; break;
  case 30: 
   var $190=$page;
   var $191=$190;
   var $192=(($191+20)|0);
   var $193=HEAP8[($192)];
   var $194=$193 & -2;
   HEAP8[($192)]=$194;
   label = 31; break;
  case 31: 
   var $196=$page;
   var $197=(($196+8)|0);
   var $198=HEAP32[(($197)>>2)];
   $page=$198;
   label = 32; break;
  case 32: 
   var $200=$tried_sweep;
   var $201=((($200)+(1024))|0);
   $tried_sweep=$201;
   var $202=$freed;
   var $203=$1;
   var $204=(($203+112)|0);
   var $205=HEAP32[(($204)>>2)];
   var $206=((($205)-($202))|0);
   HEAP32[(($204)>>2)]=$206;
   var $207=$freed;
   var $208=$1;
   var $209=(($208+536)|0);
   var $210=HEAP32[(($209)>>2)];
   var $211=((($210)-($207))|0);
   HEAP32[(($209)>>2)]=$211;
   label = 2; break;
  case 33: 
   var $213=$page;
   var $214=$1;
   var $215=(($214+104)|0);
   HEAP32[(($215)>>2)]=$213;
   var $216=$tried_sweep;
   return $216;
  default: assert(0, "bad label: " + label);
 }
}
function _mark_context_stack($mrb, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $i;
   var $e;
   $1=$mrb;
   $2=$c;
   var $3=$2;
   var $4=(($3+4)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$2;
   var $7=(($6+8)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=$5;
   var $10=$8;
   var $11=((($9)-($10))|0);
   var $12=((((($11)|(0)))/(12))&-1);
   $e=$12;
   var $13=$2;
   var $14=(($13+16)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))!=0;
   if ($16) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $18=$2;
   var $19=(($18+16)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+12)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$e;
   var $24=((($23)+($22))|0);
   $e=$24;
   label = 3; break;
  case 3: 
   var $26=$2;
   var $27=(($26+8)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=$e;
   var $30=(($28+((($29)*(12))&-1))|0);
   var $31=$2;
   var $32=(($31+12)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($30)>>>(0)) > (($33)>>>(0));
   if ($34) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $36=$2;
   var $37=(($36+12)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=$2;
   var $40=(($39+8)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=$38;
   var $43=$41;
   var $44=((($42)-($43))|0);
   var $45=((((($44)|(0)))/(12))&-1);
   $e=$45;
   label = 5; break;
  case 5: 
   $i=0;
   label = 6; break;
  case 6: 
   var $48=$i;
   var $49=$e;
   var $50=(($48)>>>(0)) < (($49)>>>(0));
   if ($50) { label = 7; break; } else { label = 13; break; }
  case 7: 
   label = 8; break;
  case 8: 
   var $53=$i;
   var $54=$2;
   var $55=(($54+8)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56+((($53)*(12))&-1))|0);
   var $58=(($57+8)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=(($59)>>>(0)) >= 8;
   if ($60) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $62=$1;
   var $63=$i;
   var $64=$2;
   var $65=(($64+8)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=(($66+((($63)*(12))&-1))|0);
   var $68=(($67)|0);
   var $69=$68;
   var $70=HEAP32[(($69)>>2)];
   var $71=$70;
   _mrb_gc_mark($62, $71);
   label = 10; break;
  case 10: 
   label = 11; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $75=$i;
   var $76=((($75)+(1))|0);
   $i=$76;
   label = 6; break;
  case 13: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _gc_mark_children($mrb, $obj) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   var $p;
   var $e;
   var $i;
   var $len;
   var $c1;
   var $a;
   var $i2;
   var $e3;
   var $r;
   $1=$mrb;
   $2=$obj;
   var $3=$2;
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5 & -1793;
   var $7=$6 | 1024;
   HEAP32[(($4)>>2)]=$7;
   var $8=$2;
   var $9=(($8+8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$1;
   var $12=(($11+528)|0);
   HEAP32[(($12)>>2)]=$10;
   var $13=$1;
   var $14=$2;
   var $15=(($14+4)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$16;
   _mrb_gc_mark($13, $17);
   var $18=$2;
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $21=$20 & 255;
   if ((($21)|(0))==11) {
    label = 2; break;
   }
   else if ((($21)|(0))==9 | (($21)|(0))==10 | (($21)|(0))==12) {
    label = 3; break;
   }
   else if ((($21)|(0))==8 | (($21)|(0))==21) {
    label = 4; break;
   }
   else if ((($21)|(0))==13) {
    label = 5; break;
   }
   else if ((($21)|(0))==20) {
    label = 6; break;
   }
   else if ((($21)|(0))==22) {
    label = 17; break;
   }
   else if ((($21)|(0))==14) {
    label = 18; break;
   }
   else if ((($21)|(0))==15) {
    label = 27; break;
   }
   else if ((($21)|(0))==16) {
    label = 28; break;
   }
   else if ((($21)|(0))==17) {
    label = 29; break;
   }
   else {
   label = 40; break;
   }
  case 2: 
   var $23=$1;
   var $24=$2;
   var $25=$24;
   var $26=(($25+20)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$27;
   _mrb_gc_mark($23, $28);
   label = 41; break;
  case 3: 
   var $30=$2;
   var $31=$30;
   $c=$31;
   var $32=$1;
   var $33=$c;
   _mrb_gc_mark_mt($32, $33);
   var $34=$1;
   var $35=$c;
   var $36=(($35+20)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=$37;
   _mrb_gc_mark($34, $38);
   label = 4; break;
  case 4: 
   var $40=$1;
   var $41=$2;
   var $42=$41;
   _mrb_gc_mark_iv($40, $42);
   label = 41; break;
  case 5: 
   var $44=$2;
   var $45=$44;
   $p=$45;
   var $46=$1;
   var $47=$p;
   var $48=(($47+20)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=$49;
   _mrb_gc_mark($46, $50);
   var $51=$1;
   var $52=$p;
   var $53=(($52+16)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=$54;
   _mrb_gc_mark($51, $55);
   label = 41; break;
  case 6: 
   var $57=$2;
   var $58=$57;
   $e=$58;
   var $59=$e;
   var $60=(($59+20)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($61)|(0)) < 0;
   if ($62) { label = 7; break; } else { label = 16; break; }
  case 7: 
   var $64=$e;
   var $65=$64;
   var $66=HEAP32[(($65)>>2)];
   var $67=$66 >>> 11;
   var $68=$67 & 2097151;
   $len=$68;
   $i=0;
   label = 8; break;
  case 8: 
   var $70=$i;
   var $71=$len;
   var $72=(($70)|(0)) < (($71)|(0));
   if ($72) { label = 9; break; } else { label = 15; break; }
  case 9: 
   label = 10; break;
  case 10: 
   var $75=$i;
   var $76=$e;
   var $77=(($76+12)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=(($78+((($75)*(12))&-1))|0);
   var $80=(($79+8)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($81)>>>(0)) >= 8;
   if ($82) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $84=$1;
   var $85=$i;
   var $86=$e;
   var $87=(($86+12)|0);
   var $88=HEAP32[(($87)>>2)];
   var $89=(($88+((($85)*(12))&-1))|0);
   var $90=(($89)|0);
   var $91=$90;
   var $92=HEAP32[(($91)>>2)];
   var $93=$92;
   _mrb_gc_mark($84, $93);
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $97=$i;
   var $98=((($97)+(1))|0);
   $i=$98;
   label = 8; break;
  case 15: 
   label = 16; break;
  case 16: 
   label = 41; break;
  case 17: 
   var $102=$2;
   var $103=$102;
   var $104=(($103+12)|0);
   var $105=HEAP32[(($104)>>2)];
   $c1=$105;
   var $106=$1;
   var $107=$c1;
   _mark_context($106, $107);
   label = 41; break;
  case 18: 
   var $109=$2;
   var $110=$109;
   $a=$110;
   $i2=0;
   var $111=$a;
   var $112=(($111+12)|0);
   var $113=HEAP32[(($112)>>2)];
   $e3=$113;
   label = 19; break;
  case 19: 
   var $115=$i2;
   var $116=$e3;
   var $117=(($115)>>>(0)) < (($116)>>>(0));
   if ($117) { label = 20; break; } else { label = 26; break; }
  case 20: 
   label = 21; break;
  case 21: 
   var $120=$i2;
   var $121=$a;
   var $122=(($121+20)|0);
   var $123=HEAP32[(($122)>>2)];
   var $124=(($123+((($120)*(12))&-1))|0);
   var $125=(($124+8)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=(($126)>>>(0)) >= 8;
   if ($127) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $129=$1;
   var $130=$i2;
   var $131=$a;
   var $132=(($131+20)|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=(($133+((($130)*(12))&-1))|0);
   var $135=(($134)|0);
   var $136=$135;
   var $137=HEAP32[(($136)>>2)];
   var $138=$137;
   _mrb_gc_mark($129, $138);
   label = 23; break;
  case 23: 
   label = 24; break;
  case 24: 
   label = 25; break;
  case 25: 
   var $142=$i2;
   var $143=((($142)+(1))|0);
   $i2=$143;
   label = 19; break;
  case 26: 
   label = 41; break;
  case 27: 
   var $146=$1;
   var $147=$2;
   var $148=$147;
   _mrb_gc_mark_iv($146, $148);
   var $149=$1;
   var $150=$2;
   var $151=$150;
   _mrb_gc_mark_hash($149, $151);
   label = 41; break;
  case 28: 
   label = 41; break;
  case 29: 
   var $154=$2;
   var $155=$154;
   $r=$155;
   var $156=$r;
   var $157=(($156+12)|0);
   var $158=HEAP32[(($157)>>2)];
   var $159=(($158)|(0))!=0;
   if ($159) { label = 30; break; } else { label = 39; break; }
  case 30: 
   label = 31; break;
  case 31: 
   var $162=$r;
   var $163=(($162+12)|0);
   var $164=HEAP32[(($163)>>2)];
   var $165=(($164)|0);
   var $166=(($165+8)|0);
   var $167=HEAP32[(($166)>>2)];
   var $168=(($167)>>>(0)) >= 8;
   if ($168) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $170=$1;
   var $171=$r;
   var $172=(($171+12)|0);
   var $173=HEAP32[(($172)>>2)];
   var $174=(($173)|0);
   var $175=(($174)|0);
   var $176=$175;
   var $177=HEAP32[(($176)>>2)];
   var $178=$177;
   _mrb_gc_mark($170, $178);
   label = 33; break;
  case 33: 
   label = 34; break;
  case 34: 
   label = 35; break;
  case 35: 
   var $182=$r;
   var $183=(($182+12)|0);
   var $184=HEAP32[(($183)>>2)];
   var $185=(($184+12)|0);
   var $186=(($185+8)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=(($187)>>>(0)) >= 8;
   if ($188) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $190=$1;
   var $191=$r;
   var $192=(($191+12)|0);
   var $193=HEAP32[(($192)>>2)];
   var $194=(($193+12)|0);
   var $195=(($194)|0);
   var $196=$195;
   var $197=HEAP32[(($196)>>2)];
   var $198=$197;
   _mrb_gc_mark($190, $198);
   label = 37; break;
  case 37: 
   label = 38; break;
  case 38: 
   label = 39; break;
  case 39: 
   label = 41; break;
  case 40: 
   label = 41; break;
  case 41: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _link_heap_page($mrb, $page) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$page;
   var $3=$1;
   var $4=(($3+100)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$2;
   var $7=(($6+8)|0);
   HEAP32[(($7)>>2)]=$5;
   var $8=$1;
   var $9=(($8+100)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$2;
   var $14=$1;
   var $15=(($14+100)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16+4)|0);
   HEAP32[(($17)>>2)]=$13;
   label = 3; break;
  case 3: 
   var $19=$2;
   var $20=$1;
   var $21=(($20+100)|0);
   HEAP32[(($21)>>2)]=$19;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_fill_flags1081($p, $c, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$p;
   $2=$c;
   $3=$len;
   label = 2; break;
  case 2: 
   var $5=$3;
   var $6=((($5)-(1))|0);
   $3=$6;
   var $7=(($5)>>>(0)) > 0;
   if ($7) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $9=$2;
   var $10=$1;
   var $11=(($10+1)|0);
   $1=$11;
   HEAP8[($10)]=$9;
   label = 2; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mark_context($mrb, $c) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $i;
   var $e;
   var $ci;
   $1=$mrb;
   $2=$c;
   var $3=$1;
   var $4=$2;
   _mark_context_stack($3, $4);
   var $5=$2;
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))!=0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$2;
   var $11=(($10+16)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12+36)|0);
   var $14=HEAP32[(($13)>>2)];
   var $17 = $14;label = 4; break;
  case 3: 
   var $17 = 0;label = 4; break;
  case 4: 
   var $17;
   $e=$17;
   $i=0;
   label = 5; break;
  case 5: 
   var $19=$i;
   var $20=$e;
   var $21=(($19)>>>(0)) < (($20)>>>(0));
   if ($21) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $23=$1;
   var $24=$i;
   var $25=$2;
   var $26=(($25+36)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27+($24<<2))|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$29;
   _mrb_gc_mark($23, $30);
   label = 7; break;
  case 7: 
   var $32=$i;
   var $33=((($32)+(1))|0);
   $i=$33;
   label = 5; break;
  case 8: 
   var $35=$2;
   var $36=(($35+20)|0);
   var $37=HEAP32[(($36)>>2)];
   $ci=$37;
   label = 9; break;
  case 9: 
   var $39=$ci;
   var $40=$2;
   var $41=(($40+16)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($39)>>>(0)) <= (($42)>>>(0));
   if ($43) { label = 10; break; } else { label = 14; break; }
  case 10: 
   var $45=$ci;
   var $46=(($45)|(0))!=0;
   if ($46) { label = 12; break; } else { label = 11; break; }
  case 11: 
   label = 13; break;
  case 12: 
   var $49=$1;
   var $50=$ci;
   var $51=(($50+40)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=$52;
   _mrb_gc_mark($49, $53);
   var $54=$1;
   var $55=$ci;
   var $56=(($55+4)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=$57;
   _mrb_gc_mark($54, $58);
   var $59=$1;
   var $60=$ci;
   var $61=(($60+28)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=$62;
   _mrb_gc_mark($59, $63);
   label = 13; break;
  case 13: 
   var $65=$ci;
   var $66=(($65+44)|0);
   $ci=$66;
   label = 9; break;
  case 14: 
   var $68=$2;
   var $69=(($68)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=(($70)|(0))!=0;
   if ($71) { label = 15; break; } else { label = 17; break; }
  case 15: 
   var $73=$2;
   var $74=(($73)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($75+48)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($77)|(0))!=0;
   if ($78) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $80=$1;
   var $81=$2;
   var $82=(($81)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83+48)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=$85;
   _mrb_gc_mark($80, $86);
   label = 17; break;
  case 17: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _gc_gray_mark($mrb, $obj) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $children;
   var $c;
   var $c1;
   var $i;
   var $ci;
   var $a;
   $1=$mrb;
   $2=$obj;
   $children=0;
   var $3=$1;
   var $4=$2;
   _gc_mark_children($3, $4);
   var $5=$2;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 255;
   if ((($8)|(0))==11) {
    label = 2; break;
   }
   else if ((($8)|(0))==9 | (($8)|(0))==12 | (($8)|(0))==10) {
    label = 3; break;
   }
   else if ((($8)|(0))==8 | (($8)|(0))==21) {
    label = 4; break;
   }
   else if ((($8)|(0))==20) {
    label = 5; break;
   }
   else if ((($8)|(0))==22) {
    label = 6; break;
   }
   else if ((($8)|(0))==14) {
    label = 20; break;
   }
   else if ((($8)|(0))==15) {
    label = 21; break;
   }
   else if ((($8)|(0))==13 | (($8)|(0))==17) {
    label = 22; break;
   }
   else {
   label = 23; break;
   }
  case 2: 
   var $10=$children;
   var $11=((($10)+(1))|0);
   $children=$11;
   label = 24; break;
  case 3: 
   var $13=$2;
   var $14=$13;
   $c=$14;
   var $15=$1;
   var $16=$2;
   var $17=$16;
   var $18=_mrb_gc_mark_iv_size($15, $17);
   var $19=$children;
   var $20=((($19)+($18))|0);
   $children=$20;
   var $21=$1;
   var $22=$c;
   var $23=_mrb_gc_mark_mt_size($21, $22);
   var $24=$children;
   var $25=((($24)+($23))|0);
   $children=$25;
   var $26=$children;
   var $27=((($26)+(1))|0);
   $children=$27;
   label = 24; break;
  case 4: 
   var $29=$1;
   var $30=$2;
   var $31=$30;
   var $32=_mrb_gc_mark_iv_size($29, $31);
   var $33=$children;
   var $34=((($33)+($32))|0);
   $children=$34;
   label = 24; break;
  case 5: 
   var $36=$2;
   var $37=$36;
   var $38=HEAP32[(($37)>>2)];
   var $39=$38 >>> 11;
   var $40=$39 & 2097151;
   var $41=$children;
   var $42=((($41)+($40))|0);
   $children=$42;
   label = 24; break;
  case 6: 
   var $44=$2;
   var $45=$44;
   var $46=(($45+12)|0);
   var $47=HEAP32[(($46)>>2)];
   $c1=$47;
   var $48=$c1;
   var $49=(($48+4)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=$c1;
   var $52=(($51+8)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=$50;
   var $55=$53;
   var $56=((($54)-($55))|0);
   var $57=((((($56)|(0)))/(12))&-1);
   $i=$57;
   var $58=$c1;
   var $59=(($58+16)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($60)|(0))!=0;
   if ($61) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $63=$c1;
   var $64=(($63+16)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65+12)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=$i;
   var $69=((($68)+($67))|0);
   $i=$69;
   label = 8; break;
  case 8: 
   var $71=$c1;
   var $72=(($71+8)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=$i;
   var $75=(($73+((($74)*(12))&-1))|0);
   var $76=$c1;
   var $77=(($76+12)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=(($75)>>>(0)) > (($78)>>>(0));
   if ($79) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $81=$c1;
   var $82=(($81+12)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=$c1;
   var $85=(($84+8)|0);
   var $86=HEAP32[(($85)>>2)];
   var $87=$83;
   var $88=$86;
   var $89=((($87)-($88))|0);
   var $90=((((($89)|(0)))/(12))&-1);
   $i=$90;
   label = 10; break;
  case 10: 
   var $92=$i;
   var $93=$children;
   var $94=((($93)+($92))|0);
   $children=$94;
   var $95=$c1;
   var $96=(($95+16)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=(($97)|(0))!=0;
   if ($98) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $100=$c1;
   var $101=(($100+16)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=(($102+36)|0);
   var $104=HEAP32[(($103)>>2)];
   var $107 = $104;label = 13; break;
  case 12: 
   var $107 = 0;label = 13; break;
  case 13: 
   var $107;
   var $108=$children;
   var $109=((($108)+($107))|0);
   $children=$109;
   var $110=$c1;
   var $111=(($110+20)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=(($112)|(0))!=0;
   if ($113) { label = 14; break; } else { label = 19; break; }
  case 14: 
   $i=0;
   var $115=$c1;
   var $116=(($115+20)|0);
   var $117=HEAP32[(($116)>>2)];
   $ci=$117;
   label = 15; break;
  case 15: 
   var $119=$ci;
   var $120=$c1;
   var $121=(($120+16)|0);
   var $122=HEAP32[(($121)>>2)];
   var $123=(($119)>>>(0)) <= (($122)>>>(0));
   if ($123) { label = 16; break; } else { label = 18; break; }
  case 16: 
   label = 17; break;
  case 17: 
   var $126=$i;
   var $127=((($126)+(1))|0);
   $i=$127;
   var $128=$ci;
   var $129=(($128+44)|0);
   $ci=$129;
   label = 15; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $132=$i;
   var $133=$children;
   var $134=((($133)+($132))|0);
   $children=$134;
   label = 24; break;
  case 20: 
   var $136=$2;
   var $137=$136;
   $a=$137;
   var $138=$a;
   var $139=(($138+12)|0);
   var $140=HEAP32[(($139)>>2)];
   var $141=$children;
   var $142=((($141)+($140))|0);
   $children=$142;
   label = 24; break;
  case 21: 
   var $144=$1;
   var $145=$2;
   var $146=$145;
   var $147=_mrb_gc_mark_iv_size($144, $146);
   var $148=$children;
   var $149=((($148)+($147))|0);
   $children=$149;
   var $150=$1;
   var $151=$2;
   var $152=$151;
   var $153=_mrb_gc_mark_hash_size($150, $152);
   var $154=$children;
   var $155=((($154)+($153))|0);
   $children=$155;
   label = 24; break;
  case 22: 
   var $157=$children;
   var $158=((($157)+(2))|0);
   $children=$158;
   label = 24; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $161=$children;
   return $161;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_alloc_ht($h) {
 var label = 0;
 var $1;
 var $sz;
 var $p;
 $1=$h;
 var $2=$1;
 var $3=(($2)|0);
 var $4=HEAP32[(($3)>>2)];
 $sz=$4;
 var $5=$1;
 var $6=(($5+36)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$sz;
 var $9=$8;
 var $10=((((($9)>>>(0)))/(4))&-1);
 var $11=$sz;
 var $12=((($11)*(24))&-1);
 var $13=((($10)+($12))|0);
 var $14=_mrb_malloc($7, $13);
 $p=$14;
 var $15=$1;
 var $16=(($15+8)|0);
 HEAP32[(($16)>>2)]=0;
 var $17=$1;
 var $18=(($17+4)|0);
 HEAP32[(($18)>>2)]=0;
 var $19=$sz;
 var $20=$19 >>> 2;
 var $21=$sz;
 var $22=$21 >>> 1;
 var $23=$20 | $22;
 var $24=$1;
 var $25=(($24+12)|0);
 HEAP32[(($25)>>2)]=$23;
 var $26=$p;
 var $27=$26;
 var $28=$1;
 var $29=(($28+20)|0);
 HEAP32[(($29)>>2)]=$27;
 var $30=$p;
 var $31=$sz;
 var $32=((($31)*(12))&-1);
 var $33=(($30+$32)|0);
 var $34=$33;
 var $35=$1;
 var $36=(($35+24)|0);
 HEAP32[(($36)>>2)]=$34;
 var $37=$p;
 var $38=$sz;
 var $39=((($38)*(12))&-1);
 var $40=(($37+$39)|0);
 var $41=$sz;
 var $42=((($41)*(12))&-1);
 var $43=(($40+$42)|0);
 var $44=$1;
 var $45=(($44+16)|0);
 HEAP32[(($45)>>2)]=$43;
 var $46=$1;
 var $47=(($46+16)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=$sz;
 var $50=((((($49)>>>(0)))/(4))&-1);
 _kh_fill_flags1081($48, -86, $50);
 var $51=$sz;
 var $52=((($51)-(1))|0);
 var $53=$1;
 var $54=(($53+28)|0);
 HEAP32[(($54)>>2)]=$52;
 var $55=$sz;
 var $56=((((($55)>>>(0)))/(2))&-1);
 var $57=((($56)-(1))|0);
 var $58=$1;
 var $59=(($58+32)|0);
 HEAP32[(($59)>>2)]=$57;
 return;
}
function _kh_init_ht_size($mrb, $size) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $h;
   $1=$mrb;
   $2=$size;
   var $3=$1;
   var $4=_mrb_calloc($3, 1, 40);
   var $5=$4;
   $h=$5;
   var $6=$2;
   var $7=(($6)>>>(0)) < 8;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $2=8;
   label = 3; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $11=$2;
   var $12=((($11)-(1))|0);
   $2=$12;
   var $13=$2;
   var $14=$13 >>> 1;
   var $15=$2;
   var $16=$15 | $14;
   $2=$16;
   var $17=$2;
   var $18=$17 >>> 2;
   var $19=$2;
   var $20=$19 | $18;
   $2=$20;
   var $21=$2;
   var $22=$21 >>> 4;
   var $23=$2;
   var $24=$23 | $22;
   $2=$24;
   var $25=$2;
   var $26=$25 >>> 8;
   var $27=$2;
   var $28=$27 | $26;
   $2=$28;
   var $29=$2;
   var $30=$29 >>> 16;
   var $31=$2;
   var $32=$31 | $30;
   $2=$32;
   var $33=$2;
   var $34=((($33)+(1))|0);
   $2=$34;
   label = 5; break;
  case 5: 
   var $36=$2;
   var $37=$h;
   var $38=(($37)|0);
   HEAP32[(($38)>>2)]=$36;
   var $39=$1;
   var $40=$h;
   var $41=(($40+36)|0);
   HEAP32[(($41)>>2)]=$39;
   var $42=$h;
   _kh_alloc_ht($42);
   var $43=$h;
   return $43;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_init_ht($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=_kh_init_ht_size($2, 32);
 return $3;
}
function _kh_destroy_ht($h) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$h;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $5=$1;
   var $6=(($5+36)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$1;
   var $9=(($8+20)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$10;
   _mrb_free($7, $11);
   var $12=$1;
   var $13=(($12+36)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$1;
   var $16=$15;
   _mrb_free($14, $16);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_clear_ht($h) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$h;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $5=$1;
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $10=$1;
   var $11=(($10+16)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=$1;
   var $14=(($13)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=((((($15)>>>(0)))/(4))&-1);
   _kh_fill_flags1081($12, -86, $16);
   var $17=$1;
   var $18=(($17+8)|0);
   HEAP32[(($18)>>2)]=0;
   var $19=$1;
   var $20=(($19+4)|0);
   HEAP32[(($20)>>2)]=0;
   label = 4; break;
  case 4: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_get_ht($h, $key) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $k;
   $2=$h;
   var $3=$2;
   var $4=(($3+36)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=_mrb_hash_ht_hash_func($5, $key);
   var $7=$2;
   var $8=(($7+28)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$6 & $9;
   $k=$10;
   label = 2; break;
  case 2: 
   var $12=$k;
   var $13=((((($12)>>>(0)))/(4))&-1);
   var $14=$2;
   var $15=(($14+16)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16+$13)|0);
   var $18=HEAP8[($17)];
   var $19=(($18)&(255));
   var $20=$k;
   var $21=((((($20)>>>(0)))%(4))&-1);
   var $22=((106180+$21)|0);
   var $23=HEAP8[($22)];
   var $24=(($23)&(255));
   var $25=$19 & $24;
   var $26=(($25)|(0))!=0;
   var $27=$26 ^ 1;
   if ($27) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $29=$k;
   var $30=((((($29)>>>(0)))/(4))&-1);
   var $31=$2;
   var $32=(($31+16)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33+$30)|0);
   var $35=HEAP8[($34)];
   var $36=(($35)&(255));
   var $37=$k;
   var $38=((((($37)>>>(0)))%(4))&-1);
   var $39=((106260+$38)|0);
   var $40=HEAP8[($39)];
   var $41=(($40)&(255));
   var $42=$36 & $41;
   var $43=(($42)|(0))!=0;
   if ($43) { label = 7; break; } else { label = 4; break; }
  case 4: 
   var $45=$2;
   var $46=(($45+36)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$k;
   var $49=$2;
   var $50=(($49+20)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($51+((($48)*(12))&-1))|0);
   var $53=_mrb_hash_ht_hash_equal($47, $52, $key);
   var $54=(($53)|(0))!=0;
   if ($54) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $56=$k;
   $1=$56;
   label = 9; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $59=$k;
   var $60=$2;
   var $61=(($60+32)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=((($59)+($62))|0);
   var $64=$2;
   var $65=(($64+28)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=$63 & $66;
   $k=$67;
   label = 2; break;
  case 8: 
   var $69=$2;
   var $70=(($69)|0);
   var $71=HEAP32[(($70)>>2)];
   $1=$71;
   label = 9; break;
  case 9: 
   var $73=$1;
   STACKTOP = sp;
   return $73;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_ht_hash_func($mrb, $key) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $h;
 var $h2=sp;
 var $2=(sp)+(12);
 $1=$mrb;
 var $3=(($key+8)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4 << 24;
 $h=$5;
 var $6=$1;
 _mrb_funcall($2, $6, $key, ((93112)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
 var $7=$h2;
 var $8=$2;
 assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
 var $9=(($h2)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=$h;
 var $13=$12 ^ $11;
 $h=$13;
 var $14=$h;
 STACKTOP = sp;
 return $14;
}
function _mrb_hash_ht_hash_equal($mrb, $a, $b) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_eql($2, $a, $b);
 var $4=(($3)&(255));
 STACKTOP = sp;
 return $4;
}
function _kh_resize_ht($h, $new_n_buckets) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $old_ed_flags;
   var $old_keys;
   var $old_vals;
   var $old_n_buckets;
   var $i;
   var $k;
   $1=$h;
   $2=$new_n_buckets;
   var $3=$2;
   var $4=(($3)>>>(0)) < 8;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $2=8;
   label = 3; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $8=$2;
   var $9=((($8)-(1))|0);
   $2=$9;
   var $10=$2;
   var $11=$10 >>> 1;
   var $12=$2;
   var $13=$12 | $11;
   $2=$13;
   var $14=$2;
   var $15=$14 >>> 2;
   var $16=$2;
   var $17=$16 | $15;
   $2=$17;
   var $18=$2;
   var $19=$18 >>> 4;
   var $20=$2;
   var $21=$20 | $19;
   $2=$21;
   var $22=$2;
   var $23=$22 >>> 8;
   var $24=$2;
   var $25=$24 | $23;
   $2=$25;
   var $26=$2;
   var $27=$26 >>> 16;
   var $28=$2;
   var $29=$28 | $27;
   $2=$29;
   var $30=$2;
   var $31=((($30)+(1))|0);
   $2=$31;
   label = 5; break;
  case 5: 
   var $33=$1;
   var $34=(($33+16)|0);
   var $35=HEAP32[(($34)>>2)];
   $old_ed_flags=$35;
   var $36=$1;
   var $37=(($36+20)|0);
   var $38=HEAP32[(($37)>>2)];
   $old_keys=$38;
   var $39=$1;
   var $40=(($39+24)|0);
   var $41=HEAP32[(($40)>>2)];
   $old_vals=$41;
   var $42=$1;
   var $43=(($42)|0);
   var $44=HEAP32[(($43)>>2)];
   $old_n_buckets=$44;
   var $45=$2;
   var $46=$1;
   var $47=(($46)|0);
   HEAP32[(($47)>>2)]=$45;
   var $48=$1;
   _kh_alloc_ht($48);
   $i=0;
   label = 6; break;
  case 6: 
   var $50=$i;
   var $51=$old_n_buckets;
   var $52=(($50)>>>(0)) < (($51)>>>(0));
   if ($52) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $54=$i;
   var $55=((((($54)>>>(0)))/(4))&-1);
   var $56=$old_ed_flags;
   var $57=(($56+$55)|0);
   var $58=HEAP8[($57)];
   var $59=(($58)&(255));
   var $60=$i;
   var $61=((((($60)>>>(0)))%(4))&-1);
   var $62=((106228+$61)|0);
   var $63=HEAP8[($62)];
   var $64=(($63)&(255));
   var $65=$59 & $64;
   var $66=(($65)|(0))!=0;
   if ($66) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $68=$1;
   var $69=$i;
   var $70=$old_keys;
   var $71=(($70+((($69)*(12))&-1))|0);
   var $72=_kh_put_ht($68, $71);
   $k=$72;
   var $73=$k;
   var $74=$1;
   var $75=(($74+24)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=(($76+((($73)*(12))&-1))|0);
   var $78=$i;
   var $79=$old_vals;
   var $80=(($79+((($78)*(12))&-1))|0);
   var $81=$77;
   var $82=$80;
   assert(12 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($82)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($82)+(8))>>2)];
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $85=$i;
   var $86=((($85)+(1))|0);
   $i=$86;
   label = 6; break;
  case 11: 
   var $88=$1;
   var $89=(($88+36)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=$old_keys;
   var $92=$91;
   _mrb_free($90, $92);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_del_ht($h, $x) {
 var label = 0;
 var $1;
 var $2;
 $1=$h;
 $2=$x;
 var $3=$2;
 var $4=((((($3)>>>(0)))%(4))&-1);
 var $5=((106260+$4)|0);
 var $6=HEAP8[($5)];
 var $7=(($6)&(255));
 var $8=$2;
 var $9=((((($8)>>>(0)))/(4))&-1);
 var $10=$1;
 var $11=(($10+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+$9)|0);
 var $14=HEAP8[($13)];
 var $15=(($14)&(255));
 var $16=$15 | $7;
 var $17=(($16) & 255);
 HEAP8[($13)]=$17;
 var $18=$1;
 var $19=(($18+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=((($20)-(1))|0);
 HEAP32[(($19)>>2)]=$21;
 return;
}
function _mrb_gc_mark_hash_size($mrb, $hash) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $2=$mrb;
   $3=$hash;
   var $4=$3;
   var $5=(($4+16)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 4; break;
  case 3: 
   var $10=$3;
   var $11=(($10+16)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12+4)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=($14<<1);
   $1=$15;
   label = 4; break;
  case 4: 
   var $17=$1;
   return $17;
  default: assert(0, "bad label: " + label);
 }
}
function _kh_put_ht($h, $key) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $k;
   $1=$h;
   var $2=$1;
   var $3=(($2+8)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=$1;
   var $6=(($5+12)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($4)>>>(0)) >= (($7)>>>(0));
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$1;
   var $11=$1;
   var $12=(($11)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=($13<<1);
   _kh_resize_ht($10, $14);
   label = 3; break;
  case 3: 
   var $16=$1;
   var $17=(($16+36)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=_mrb_hash_ht_hash_func($18, $key);
   var $20=$1;
   var $21=(($20+28)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$19 & $22;
   $k=$23;
   label = 4; break;
  case 4: 
   var $25=$k;
   var $26=((((($25)>>>(0)))/(4))&-1);
   var $27=$1;
   var $28=(($27+16)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+$26)|0);
   var $31=HEAP8[($30)];
   var $32=(($31)&(255));
   var $33=$k;
   var $34=((((($33)>>>(0)))%(4))&-1);
   var $35=((106228+$34)|0);
   var $36=HEAP8[($35)];
   var $37=(($36)&(255));
   var $38=$32 & $37;
   var $39=(($38)|(0))!=0;
   var $40=$39 ^ 1;
   if ($40) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $42=$1;
   var $43=(($42+36)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=$k;
   var $46=$1;
   var $47=(($46+20)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($48+((($45)*(12))&-1))|0);
   var $50=_mrb_hash_ht_hash_equal($44, $49, $key);
   var $51=(($50)|(0))!=0;
   if ($51) { label = 6; break; } else { label = 7; break; }
  case 6: 
   label = 8; break;
  case 7: 
   var $54=$k;
   var $55=$1;
   var $56=(($55+32)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=((($54)+($57))|0);
   var $59=$1;
   var $60=(($59+28)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=$58 & $61;
   $k=$62;
   label = 4; break;
  case 8: 
   var $64=$k;
   var $65=((((($64)>>>(0)))/(4))&-1);
   var $66=$1;
   var $67=(($66+16)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=(($68+$65)|0);
   var $70=HEAP8[($69)];
   var $71=(($70)&(255));
   var $72=$k;
   var $73=((((($72)>>>(0)))%(4))&-1);
   var $74=((106180+$73)|0);
   var $75=HEAP8[($74)];
   var $76=(($75)&(255));
   var $77=$71 & $76;
   var $78=(($77)|(0))!=0;
   if ($78) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $80=$k;
   var $81=$1;
   var $82=(($81+20)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83+((($80)*(12))&-1))|0);
   var $85=$84;
   var $86=$key;
   assert(12 % 1 === 0);HEAP32[(($85)>>2)]=HEAP32[(($86)>>2)];HEAP32[((($85)+(4))>>2)]=HEAP32[((($86)+(4))>>2)];HEAP32[((($85)+(8))>>2)]=HEAP32[((($86)+(8))>>2)];
   var $87=$k;
   var $88=((((($87)>>>(0)))%(4))&-1);
   var $89=((106180+$88)|0);
   var $90=HEAP8[($89)];
   var $91=(($90)&(255));
   var $92=$91 ^ -1;
   var $93=$k;
   var $94=((((($93)>>>(0)))/(4))&-1);
   var $95=$1;
   var $96=(($95+16)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=(($97+$94)|0);
   var $99=HEAP8[($98)];
   var $100=(($99)&(255));
   var $101=$100 & $92;
   var $102=(($101) & 255);
   HEAP8[($98)]=$102;
   var $103=$1;
   var $104=(($103+4)|0);
   var $105=HEAP32[(($104)>>2)];
   var $106=((($105)+(1))|0);
   HEAP32[(($104)>>2)]=$106;
   var $107=$1;
   var $108=(($107+8)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=((($109)+(1))|0);
   HEAP32[(($108)>>2)]=$110;
   label = 13; break;
  case 10: 
   var $112=$k;
   var $113=((((($112)>>>(0)))/(4))&-1);
   var $114=$1;
   var $115=(($114+16)|0);
   var $116=HEAP32[(($115)>>2)];
   var $117=(($116+$113)|0);
   var $118=HEAP8[($117)];
   var $119=(($118)&(255));
   var $120=$k;
   var $121=((((($120)>>>(0)))%(4))&-1);
   var $122=((106260+$121)|0);
   var $123=HEAP8[($122)];
   var $124=(($123)&(255));
   var $125=$119 & $124;
   var $126=(($125)|(0))!=0;
   if ($126) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $128=$k;
   var $129=$1;
   var $130=(($129+20)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132=(($131+((($128)*(12))&-1))|0);
   var $133=$132;
   var $134=$key;
   assert(12 % 1 === 0);HEAP32[(($133)>>2)]=HEAP32[(($134)>>2)];HEAP32[((($133)+(4))>>2)]=HEAP32[((($134)+(4))>>2)];HEAP32[((($133)+(8))>>2)]=HEAP32[((($134)+(8))>>2)];
   var $135=$k;
   var $136=((((($135)>>>(0)))%(4))&-1);
   var $137=((106260+$136)|0);
   var $138=HEAP8[($137)];
   var $139=(($138)&(255));
   var $140=$139 ^ -1;
   var $141=$k;
   var $142=((((($141)>>>(0)))/(4))&-1);
   var $143=$1;
   var $144=(($143+16)|0);
   var $145=HEAP32[(($144)>>2)];
   var $146=(($145+$142)|0);
   var $147=HEAP8[($146)];
   var $148=(($147)&(255));
   var $149=$148 & $140;
   var $150=(($149) & 255);
   HEAP8[($146)]=$150;
   var $151=$1;
   var $152=(($151+4)|0);
   var $153=HEAP32[(($152)>>2)];
   var $154=((($153)+(1))|0);
   HEAP32[(($152)>>2)]=$154;
   label = 12; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $157=$k;
   STACKTOP = sp;
   return $157;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_gc_mark_hash($mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $k;
   var $h;
   var $key=sp;
   var $val=(sp)+(12);
   $1=$mrb;
   $2=$hash;
   var $3=$2;
   var $4=(($3+16)|0);
   var $5=HEAP32[(($4)>>2)];
   $h=$5;
   var $6=$h;
   var $7=(($6)|(0))!=0;
   if ($7) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 17; break;
  case 3: 
   $k=0;
   label = 4; break;
  case 4: 
   var $11=$k;
   var $12=$h;
   var $13=(($12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($11)|(0))!=(($14)|(0));
   if ($15) { label = 5; break; } else { label = 17; break; }
  case 5: 
   var $17=$k;
   var $18=((((($17)>>>(0)))/(4))&-1);
   var $19=$h;
   var $20=(($19+16)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21+$18)|0);
   var $23=HEAP8[($22)];
   var $24=(($23)&(255));
   var $25=$k;
   var $26=((((($25)>>>(0)))%(4))&-1);
   var $27=((106228+$26)|0);
   var $28=HEAP8[($27)];
   var $29=(($28)&(255));
   var $30=$24 & $29;
   var $31=(($30)|(0))!=0;
   if ($31) { label = 15; break; } else { label = 6; break; }
  case 6: 
   var $33=$k;
   var $34=$h;
   var $35=(($34+20)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36+((($33)*(12))&-1))|0);
   var $38=$key;
   var $39=$37;
   assert(12 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];HEAP32[((($38)+(8))>>2)]=HEAP32[((($39)+(8))>>2)];
   var $40=$k;
   var $41=$h;
   var $42=(($41+24)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43+((($40)*(12))&-1))|0);
   var $45=$val;
   var $46=$44;
   assert(12 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($45)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];
   label = 7; break;
  case 7: 
   var $48=(($key+8)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49)>>>(0)) >= 8;
   if ($50) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $52=$1;
   var $53=(($key)|0);
   var $54=$53;
   var $55=HEAP32[(($54)>>2)];
   var $56=$55;
   _mrb_gc_mark($52, $56);
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $60=(($val+8)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($61)>>>(0)) >= 8;
   if ($62) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $64=$1;
   var $65=(($val)|0);
   var $66=$65;
   var $67=HEAP32[(($66)>>2)];
   var $68=$67;
   _mrb_gc_mark($64, $68);
   label = 13; break;
  case 13: 
   label = 14; break;
  case 14: 
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $73=$k;
   var $74=((($73)+(1))|0);
   $k=$74;
   label = 4; break;
  case 17: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_gc_free_hash($mrb, $hash) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$mrb;
   $2=$hash;
   var $3=$2;
   var $4=(($3+16)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$2;
   var $9=(($8+16)|0);
   var $10=HEAP32[(($9)>>2)];
   _kh_destroy_ht($10);
   label = 3; break;
  case 3: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_new_capa($agg_result, $mrb, $capa) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $h;
   $1=$mrb;
   $2=$capa;
   var $3=$1;
   var $4=$1;
   var $5=(($4+68)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=_mrb_obj_alloc($3, 15, $6);
   var $8=$7;
   $h=$8;
   var $9=$1;
   var $10=_kh_init_ht($9);
   var $11=$h;
   var $12=(($11+16)|0);
   HEAP32[(($12)>>2)]=$10;
   var $13=$2;
   var $14=(($13)|(0)) > 0;
   if ($14) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $16=$h;
   var $17=(($16+16)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$2;
   _kh_resize_ht($18, $19);
   label = 3; break;
  case 3: 
   var $21=$h;
   var $22=(($21+12)|0);
   HEAP32[(($22)>>2)]=0;
   var $23=$h;
   var $24=$23;
   _mrb_obj_value1090($agg_result, $24);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_value1090($agg_result, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   var $b;
   $1=$p;
   var $2=$1;
   var $3=$2;
   $b=$3;
   label = 2; break;
  case 2: 
   var $5=$b;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 255;
   var $9=(($v+8)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=$1;
   var $11=(($v)|0);
   var $12=$11;
   HEAP32[(($12)>>2)]=$10;
   label = 3; break;
  case 3: 
   var $14=$agg_result;
   var $15=$v;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_new($agg_result, $mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_hash_new_capa($agg_result, $2, 0);
 return;
}
function _mrb_hash_get($agg_result, $mrb, $hash, $key) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $h;
   var $k;
   var $2=sp;
   $1=$mrb;
   var $3=(($hash)|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5;
   var $7=(($6+16)|0);
   var $8=HEAP32[(($7)>>2)];
   $h=$8;
   var $9=$h;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $12=$h;
   var $13=_kh_get_ht($12, $key);
   $k=$13;
   var $14=$k;
   var $15=$h;
   var $16=(($15)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($14)|(0))!=(($17)|(0));
   if ($18) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $20=$k;
   var $21=$h;
   var $22=(($21+24)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23+((($20)*(12))&-1))|0);
   var $25=$agg_result;
   var $26=$24;
   assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
   label = 8; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $29=(($hash)|0);
   var $30=$29;
   var $31=HEAP32[(($30)>>2)];
   var $32=$31;
   var $33=$32;
   var $34=HEAP32[(($33)>>2)];
   var $35=$34 >>> 11;
   var $36=$35 & 2097151;
   var $37=$36 & 256;
   var $38=(($37)|(0))!=0;
   if ($38) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $40=$1;
   var $41=$1;
   var $42=$1;
   var $43=_mrb_intern2($42, ((105724)|0), 6);
   _mrb_iv_get($2, $41, $hash, $43);
   _mrb_funcall($agg_result, $40, $2, ((105416)|0), 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($hash)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($hash)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($hash)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($key)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($key)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($key)+(8))>>2)],tempInt));
   label = 8; break;
  case 7: 
   var $45=$1;
   var $46=$1;
   var $47=_mrb_intern2($46, ((105724)|0), 6);
   _mrb_iv_get($agg_result, $45, $hash, $47);
   label = 8; break;
  case 8: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_fetch($agg_result, $mrb, $hash, $key, $def) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $def; $def = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($def)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($def)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($def)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $h;
   var $k;
   $1=$mrb;
   var $2=(($hash)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   $h=$7;
   var $8=$h;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $11=$h;
   var $12=_kh_get_ht($11, $key);
   $k=$12;
   var $13=$k;
   var $14=$h;
   var $15=(($14)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($13)|(0))!=(($16)|(0));
   if ($17) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $19=$k;
   var $20=$h;
   var $21=(($20+24)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+((($19)*(12))&-1))|0);
   var $24=$agg_result;
   var $25=$23;
   assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
   label = 6; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $28=$agg_result;
   var $29=$def;
   assert(12 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[((($29)+(8))>>2)];
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_set($mrb, $hash, $key, $val) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $h;
   var $k;
   var $ai;
   var $2=sp;
   $1=$mrb;
   var $3=$1;
   _mrb_hash_modify($3, $hash);
   var $4=(($hash)|0);
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=$6;
   var $8=(($7+16)|0);
   var $9=HEAP32[(($8)>>2)];
   $h=$9;
   var $10=$h;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $13=$1;
   var $14=_kh_init_ht($13);
   var $15=(($hash)|0);
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $18=$17;
   var $19=(($18+16)|0);
   HEAP32[(($19)>>2)]=$14;
   $h=$14;
   label = 3; break;
  case 3: 
   var $21=$h;
   var $22=_kh_get_ht($21, $key);
   $k=$22;
   var $23=$k;
   var $24=$h;
   var $25=(($24)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($23)|(0))==(($26)|(0));
   if ($27) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $29=$1;
   var $30=_mrb_gc_arena_save($29);
   $ai=$30;
   var $31=$h;
   var $32=$1;
   _mrb_hash_ht_key($2, $32, $key);
   var $33=_kh_put_ht($31, $2);
   $k=$33;
   var $34=$1;
   var $35=$ai;
   _mrb_gc_arena_restore($34, $35);
   label = 5; break;
  case 5: 
   var $37=$k;
   var $38=$h;
   var $39=(($38+24)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40+((($37)*(12))&-1))|0);
   var $42=$41;
   var $43=$val;
   assert(12 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];HEAP32[((($42)+(8))>>2)]=HEAP32[((($43)+(8))>>2)];
   var $44=$1;
   var $45=(($hash)|0);
   var $46=$45;
   var $47=HEAP32[(($46)>>2)];
   var $48=$47;
   var $49=$48;
   _mrb_write_barrier($44, $49);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_modify($mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_hash_tbl($2, $hash);
 STACKTOP = sp;
 return;
}
function _mrb_hash_ht_key($agg_result, $mrb, $key) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$mrb;
   var $2=(($key+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|(0))==16;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$1;
   _mrb_str_dup($agg_result, $6, $key);
   label = 4; break;
  case 3: 
   var $8=$agg_result;
   var $9=$key;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_tbl($mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $h;
   $1=$mrb;
   var $2=(($hash)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   $h=$7;
   var $8=$h;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=$1;
   var $12=_kh_init_ht($11);
   var $13=(($hash)|0);
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15;
   var $17=(($16+16)|0);
   HEAP32[(($17)>>2)]=$12;
   label = 3; break;
  case 3: 
   var $19=$h;
   STACKTOP = sp;
   return $19;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_aget($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $key=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((94320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$key,tempInt));
 var $4=$1;
 _mrb_hash_get($agg_result, $4, $self, $key);
 STACKTOP = sp;
 return;
}
function _mrb_hash_delete_key($agg_result, $mrb, $hash, $key) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $h;
   var $k;
   var $delVal=sp;
   $1=$mrb;
   var $2=(($hash)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   $h=$7;
   var $8=$h;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $11=$h;
   var $12=_kh_get_ht($11, $key);
   $k=$12;
   var $13=$k;
   var $14=$h;
   var $15=(($14)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($13)|(0))!=(($16)|(0));
   if ($17) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $19=$k;
   var $20=$h;
   var $21=(($20+24)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+((($19)*(12))&-1))|0);
   var $24=$delVal;
   var $25=$23;
   assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
   var $26=$h;
   var $27=$k;
   _kh_del_ht($26, $27);
   var $28=$agg_result;
   var $29=$delVal;
   assert(12 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[((($29)+(8))>>2)];
   label = 6; break;
  case 4: 
   label = 5; break;
  case 5: 
   _mrb_nil_value1093($agg_result);
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value1093($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_delete($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $key=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((94320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$key,tempInt));
 var $4=$1;
 _mrb_hash_delete_key($agg_result, $4, $self, $key);
 STACKTOP = sp;
 return;
}
function _mrb_hash_clear($agg_result, $mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $h;
   $1=$mrb;
   var $2=(($hash)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   $h=$7;
   var $8=$h;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$h;
   _kh_clear_ht($11);
   label = 3; break;
  case 3: 
   var $13=$agg_result;
   var $14=$hash;
   assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_aset($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $key=sp;
 var $val=(sp)+(12);
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((91792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$key,HEAP32[(((tempInt)+(4))>>2)]=$val,tempInt));
 var $4=$1;
 _mrb_hash_set($4, $self, $key, $val);
 var $5=$agg_result;
 var $6=$val;
 assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_hash_empty_p($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $h;
   $1=$mrb;
   var $2=(($self)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   $h=$7;
   var $8=$h;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$h;
   var $12=(($11+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))==0;
   var $15=(($14)&(1));
   var $16=(($15) & 255);
   _mrb_bool_value1094($agg_result, $16);
   label = 4; break;
  case 3: 
   _mrb_true_value1095($agg_result);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_bool_value1094($agg_result, $boolean) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$boolean;
   label = 2; break;
  case 2: 
   var $3=$1;
   var $4=(($3)&(255));
   var $5=(($4)|(0))!=0;
   var $6=$5 ? 2 : 0;
   var $7=(($v+8)|0);
   HEAP32[(($7)>>2)]=$6;
   var $8=(($v)|0);
   var $9=$8;
   HEAP32[(($9)>>2)]=1;
   label = 3; break;
  case 3: 
   var $11=$agg_result;
   var $12=$v;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_true_value1095($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=2;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=1;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_keys($agg_result, $mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $h;
   var $k;
   var $ary=sp;
   var $2=(sp)+(12);
   var $v=(sp)+(24);
   $1=$mrb;
   var $3=(($hash)|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5;
   var $7=(($6+16)|0);
   var $8=HEAP32[(($7)>>2)];
   $h=$8;
   var $9=$h;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $12=$1;
   _mrb_ary_new($agg_result, $12);
   label = 10; break;
  case 3: 
   var $14=$1;
   var $15=$h;
   var $16=(($15+4)|0);
   var $17=HEAP32[(($16)>>2)];
   _mrb_ary_new_capa($2, $14, $17);
   var $18=$ary;
   var $19=$2;
   assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
   $k=0;
   label = 4; break;
  case 4: 
   var $21=$k;
   var $22=$h;
   var $23=(($22)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($21)|(0))!=(($24)|(0));
   if ($25) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $27=$k;
   var $28=((((($27)>>>(0)))/(4))&-1);
   var $29=$h;
   var $30=(($29+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31+$28)|0);
   var $33=HEAP8[($32)];
   var $34=(($33)&(255));
   var $35=$k;
   var $36=((((($35)>>>(0)))%(4))&-1);
   var $37=((106228+$36)|0);
   var $38=HEAP8[($37)];
   var $39=(($38)&(255));
   var $40=$34 & $39;
   var $41=(($40)|(0))!=0;
   if ($41) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $43=$k;
   var $44=$h;
   var $45=(($44+20)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($46+((($43)*(12))&-1))|0);
   var $48=$v;
   var $49=$47;
   assert(12 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($49)+(4))>>2)];HEAP32[((($48)+(8))>>2)]=HEAP32[((($49)+(8))>>2)];
   var $50=$1;
   _mrb_ary_push($50, $ary, $v);
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $53=$k;
   var $54=((($53)+(1))|0);
   $k=$54;
   label = 4; break;
  case 9: 
   var $56=$agg_result;
   var $57=$ary;
   assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($57)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($57)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($57)+(8))>>2)];
   label = 10; break;
  case 10: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_has_keyWithKey($agg_result, $mrb, $hash, $key) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $h;
   var $k;
   $1=$mrb;
   var $2=(($hash)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   $h=$7;
   var $8=$h;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$h;
   var $12=_kh_get_ht($11, $key);
   $k=$12;
   var $13=$k;
   var $14=$h;
   var $15=(($14)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($13)|(0))!=(($16)|(0));
   var $18=(($17)&(1));
   var $19=(($18) & 255);
   _mrb_bool_value1094($agg_result, $19);
   label = 4; break;
  case 3: 
   _mrb_false_value1096($agg_result);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_init_hash($mrb) {
 var label = 0;
 var $1;
 var $h;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=(($3+44)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_mrb_define_class($2, ((100612)|0), $5);
 var $7=$1;
 var $8=(($7+68)|0);
 HEAP32[(($8)>>2)]=$6;
 $h=$6;
 var $9=$h;
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=$11 >>> 11;
 var $13=$12 & 2097151;
 var $14=$13 & -256;
 var $15=$14 | 15;
 var $16=$h;
 var $17=$15 & 2097151;
 var $18=$16;
 var $19=$17 & 2097151;
 var $20=$19 << 11;
 var $21=HEAP32[(($18)>>2)];
 var $22=$21 & 2047;
 var $23=$22 | $20;
 HEAP32[(($18)>>2)]=$23;
 var $24=$1;
 var $25=$h;
 var $26=$1;
 var $27=_mrb_class_get($26, ((87436)|0));
 _mrb_include_module($24, $25, $27);
 var $28=$1;
 var $29=$h;
 _mrb_define_method($28, $29, ((86636)|0), 46, 262144);
 var $30=$1;
 var $31=$h;
 _mrb_define_method($30, $31, ((106064)|0), 668, 262144);
 var $32=$1;
 var $33=$h;
 _mrb_define_method($32, $33, ((105384)|0), 22, 524288);
 var $34=$1;
 var $35=$h;
 _mrb_define_method($34, $35, ((104604)|0), 402, 0);
 var $36=$1;
 var $37=$h;
 _mrb_define_method($36, $37, ((104144)|0), 102, 4096);
 var $38=$1;
 var $39=$h;
 _mrb_define_method($38, $39, ((103544)|0), 40, 262144);
 var $40=$1;
 var $41=$h;
 _mrb_define_method($40, $41, ((103060)|0), 274, 0);
 var $42=$1;
 var $43=$h;
 _mrb_define_method($42, $43, ((102628)|0), 436, 262144);
 var $44=$1;
 var $45=$h;
 _mrb_define_method($44, $45, ((102284)|0), 694, 262144);
 var $46=$1;
 var $47=$h;
 _mrb_define_method($46, $47, ((101884)|0), 576, 0);
 var $48=$1;
 var $49=$h;
 _mrb_define_method($48, $49, ((101384)|0), 406, 262144);
 var $50=$1;
 var $51=$h;
 _mrb_define_method($50, $51, ((100888)|0), 462, 262144);
 var $52=$1;
 var $53=$h;
 _mrb_define_method($52, $53, ((100580)|0), 406, 262144);
 var $54=$1;
 var $55=$h;
 _mrb_define_method($54, $55, ((100096)|0), 458, 4096);
 var $56=$1;
 var $57=$h;
 _mrb_define_method($56, $57, ((99820)|0), 232, 262144);
 var $58=$1;
 var $59=$h;
 _mrb_define_method($58, $59, ((99452)|0), 406, 262144);
 var $60=$1;
 var $61=$h;
 _mrb_define_method($60, $61, ((98980)|0), 114, 0);
 var $62=$1;
 var $63=$h;
 _mrb_define_method($62, $63, ((98428)|0), 670, 0);
 var $64=$1;
 var $65=$h;
 _mrb_define_method($64, $65, ((98096)|0), 406, 262144);
 var $66=$1;
 var $67=$h;
 _mrb_define_method($66, $67, ((97832)|0), 232, 262144);
 var $68=$1;
 var $69=$h;
 _mrb_define_method($68, $69, ((97476)|0), 442, 0);
 var $70=$1;
 var $71=$h;
 _mrb_define_method($70, $71, ((97208)|0), 670, 0);
 var $72=$1;
 var $73=$h;
 _mrb_define_method($72, $73, ((96876)|0), 22, 524288);
 var $74=$1;
 var $75=$h;
 _mrb_define_method($74, $75, ((96392)|0), 462, 262144);
 var $76=$1;
 var $77=$h;
 _mrb_define_method($76, $77, ((96136)|0), 94, 0);
 var $78=$1;
 var $79=$h;
 _mrb_define_method($78, $79, ((96920)|0), 32, 0);
 var $80=$1;
 var $81=$h;
 _mrb_define_method($80, $81, ((95964)|0), 208, 0);
 var $82=$1;
 var $83=$h;
 _mrb_define_alias($82, $83, ((95756)|0), ((95964)|0));
 var $84=$1;
 var $85=$h;
 _mrb_define_method($84, $85, ((95544)|0), 690, 262144);
 return;
}
function _mrb_hash_equal($agg_result, $mrb, $hash1) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash1; $hash1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $hash2=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((94320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$hash2,tempInt));
 var $4=$1;
 _hash_equal($agg_result, $4, $hash1, $hash2, 0);
 STACKTOP = sp;
 return;
}
function _mrb_hash_default($agg_result, $mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $argv=sp;
   var $argc=(sp)+(4);
   var $key=(sp)+(8);
   var $2=(sp)+(20);
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_get_args($3, ((93344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
   var $5=(($hash)|0);
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7;
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 >>> 11;
   var $12=$11 & 2097151;
   var $13=$12 & 256;
   var $14=(($13)|(0))!=0;
   if ($14) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $16=HEAP32[(($argc)>>2)];
   var $17=(($16)|(0))==0;
   if ($17) { label = 3; break; } else { label = 4; break; }
  case 3: 
   _mrb_nil_value1093($agg_result);
   label = 6; break;
  case 4: 
   var $20=HEAP32[(($argv)>>2)];
   var $21=(($20)|0);
   var $22=$key;
   var $23=$21;
   assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
   var $24=$1;
   var $25=$1;
   var $26=$1;
   var $27=_mrb_intern2($26, ((105724)|0), 6);
   _mrb_iv_get($2, $25, $hash, $27);
   _mrb_funcall($agg_result, $24, $2, ((105416)|0), 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($hash)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($hash)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($hash)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($key)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($key)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($key)+(8))>>2)],tempInt));
   label = 6; break;
  case 5: 
   var $29=$1;
   var $30=$1;
   var $31=_mrb_intern2($30, ((105724)|0), 6);
   _mrb_iv_get($agg_result, $29, $hash, $31);
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_set_default($agg_result, $mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $ifnone=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((94320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$ifnone,tempInt));
 var $4=$1;
 _mrb_hash_modify($4, $hash);
 var $5=$1;
 var $6=$1;
 var $7=_mrb_intern2($6, ((105724)|0), 6);
 _mrb_iv_set($5, $hash, $7, $ifnone);
 var $8=(($hash)|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10;
 var $12=$11;
 var $13=HEAP32[(($12)>>2)];
 var $14=$13 >>> 11;
 var $15=$14 & 2097151;
 var $16=$15 & -257;
 var $17=$16 & 2097151;
 var $18=$11;
 var $19=$17 & 2097151;
 var $20=$19 << 11;
 var $21=HEAP32[(($18)>>2)];
 var $22=$21 & 2047;
 var $23=$22 | $20;
 HEAP32[(($18)>>2)]=$23;
 var $24=$agg_result;
 var $25=$ifnone;
 assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_hash_default_proc($agg_result, $mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$mrb;
   var $2=(($hash)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 >>> 11;
   var $9=$8 & 2097151;
   var $10=$9 & 256;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$1;
   var $14=$1;
   var $15=_mrb_intern2($14, ((105724)|0), 6);
   _mrb_iv_get($agg_result, $13, $hash, $15);
   label = 4; break;
  case 3: 
   _mrb_nil_value1093($agg_result);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_set_default_proc($agg_result, $mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $ifnone=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((94320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$ifnone,tempInt));
 var $4=$1;
 _mrb_hash_modify($4, $hash);
 var $5=$1;
 var $6=$1;
 var $7=_mrb_intern2($6, ((105724)|0), 6);
 _mrb_iv_set($5, $hash, $7, $ifnone);
 var $8=(($hash)|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10;
 var $12=$11;
 var $13=HEAP32[(($12)>>2)];
 var $14=$13 >>> 11;
 var $15=$14 & 2097151;
 var $16=$15 | 256;
 var $17=$16 & 2097151;
 var $18=$11;
 var $19=$17 & 2097151;
 var $20=$19 << 11;
 var $21=HEAP32[(($18)>>2)];
 var $22=$21 & 2047;
 var $23=$22 | $20;
 HEAP32[(($18)>>2)]=$23;
 var $24=$agg_result;
 var $25=$ifnone;
 assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_hash_has_key($agg_result, $mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $key=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((94320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$key,tempInt));
 var $4=$1;
 _mrb_hash_has_keyWithKey($agg_result, $4, $hash, $key);
 STACKTOP = sp;
 return;
}
function _mrb_hash_has_value($agg_result, $mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $val=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((94320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$val,tempInt));
 var $4=$1;
 _mrb_hash_has_valueWithvalue($agg_result, $4, $hash, $val);
 STACKTOP = sp;
 return;
}
function _mrb_hash_init_core($agg_result, $mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 44)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $block=sp;
   var $ifnone=(sp)+(12);
   var $argv=(sp)+(24);
   var $argc=(sp)+(28);
   var $2=(sp)+(32);
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_get_args($3, ((93636)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$block,HEAP32[(((tempInt)+(4))>>2)]=$argv,HEAP32[(((tempInt)+(8))>>2)]=$argc,tempInt));
   var $5=$1;
   _mrb_hash_modify($5, $hash);
   var $6=(($block+8)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))==0;
   if ($8) { label = 2; break; } else { label = 9; break; }
  case 2: 
   var $10=(($block)|0);
   var $11=$10;
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))!=0;
   if ($13) { label = 9; break; } else { label = 3; break; }
  case 3: 
   var $15=HEAP32[(($argc)>>2)];
   var $16=(($15)|(0)) > 0;
   if ($16) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $18=HEAP32[(($argc)>>2)];
   var $19=(($18)|(0))!=1;
   if ($19) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $21=$1;
   var $22=$1;
   var $23=_mrb_class_get($22, ((89616)|0));
   _mrb_raise($21, $23, ((88452)|0));
   label = 6; break;
  case 6: 
   var $25=HEAP32[(($argv)>>2)];
   var $26=(($25)|0);
   var $27=$ifnone;
   var $28=$26;
   assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
   label = 8; break;
  case 7: 
   _mrb_nil_value1093($2);
   var $30=$ifnone;
   var $31=$2;
   assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
   label = 8; break;
  case 8: 
   label = 12; break;
  case 9: 
   var $34=HEAP32[(($argc)>>2)];
   var $35=(($34)|(0)) > 0;
   if ($35) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $37=$1;
   var $38=$1;
   var $39=_mrb_class_get($38, ((89616)|0));
   _mrb_raise($37, $39, ((88452)|0));
   label = 11; break;
  case 11: 
   var $41=(($hash)|0);
   var $42=$41;
   var $43=HEAP32[(($42)>>2)];
   var $44=$43;
   var $45=$44;
   var $46=HEAP32[(($45)>>2)];
   var $47=$46 >>> 11;
   var $48=$47 & 2097151;
   var $49=$48 | 256;
   var $50=$49 & 2097151;
   var $51=$44;
   var $52=$50 & 2097151;
   var $53=$52 << 11;
   var $54=HEAP32[(($51)>>2)];
   var $55=$54 & 2047;
   var $56=$55 | $53;
   HEAP32[(($51)>>2)]=$56;
   var $57=$ifnone;
   var $58=$block;
   assert(12 % 1 === 0);HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)];HEAP32[((($57)+(8))>>2)]=HEAP32[((($58)+(8))>>2)];
   label = 12; break;
  case 12: 
   var $60=$1;
   var $61=$1;
   var $62=_mrb_intern2($61, ((105724)|0), 6);
   _mrb_iv_set($60, $hash, $62, $ifnone);
   var $63=$agg_result;
   var $64=$hash;
   assert(12 % 1 === 0);HEAP32[(($63)>>2)]=HEAP32[(($64)>>2)];HEAP32[((($63)+(4))>>2)]=HEAP32[((($64)+(4))>>2)];HEAP32[((($63)+(8))>>2)]=HEAP32[((($64)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_replace($agg_result, $mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $hash2=sp;
   var $ifnone=(sp)+(12);
   var $h2;
   var $k;
   var $2=(sp)+(24);
   var $3=(sp)+(36);
   var $4=(sp)+(48);
   var $5=(sp)+(60);
   $1=$mrb;
   var $6=$1;
   var $7=_mrb_get_args($6, ((94320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$hash2,tempInt));
   var $8=$1;
   _to_hash1098($2, $8, $hash2);
   var $9=$hash2;
   var $10=$2;
   assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   var $11=$1;
   var $12=_mrb_obj_equal($11, $hash, $hash2);
   var $13=(($12 << 24) >> 24)!=0;
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $15=$agg_result;
   var $16=$hash;
   assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
   label = 15; break;
  case 3: 
   var $18=$1;
   _mrb_hash_clear($3, $18, $hash);
   var $19=(($hash2)|0);
   var $20=$19;
   var $21=HEAP32[(($20)>>2)];
   var $22=$21;
   var $23=(($22+16)|0);
   var $24=HEAP32[(($23)>>2)];
   $h2=$24;
   var $25=$h2;
   var $26=(($25)|(0))!=0;
   if ($26) { label = 4; break; } else { label = 11; break; }
  case 4: 
   $k=0;
   label = 5; break;
  case 5: 
   var $29=$k;
   var $30=$h2;
   var $31=(($30)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($29)|(0))!=(($32)|(0));
   if ($33) { label = 6; break; } else { label = 10; break; }
  case 6: 
   var $35=$k;
   var $36=((((($35)>>>(0)))/(4))&-1);
   var $37=$h2;
   var $38=(($37+16)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39+$36)|0);
   var $41=HEAP8[($40)];
   var $42=(($41)&(255));
   var $43=$k;
   var $44=((((($43)>>>(0)))%(4))&-1);
   var $45=((106228+$44)|0);
   var $46=HEAP8[($45)];
   var $47=(($46)&(255));
   var $48=$42 & $47;
   var $49=(($48)|(0))!=0;
   if ($49) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $51=$1;
   var $52=$k;
   var $53=$h2;
   var $54=(($53+20)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+((($52)*(12))&-1))|0);
   var $57=$k;
   var $58=$h2;
   var $59=(($58+24)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($60+((($57)*(12))&-1))|0);
   _mrb_hash_set($51, $hash, $56, $61);
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $64=$k;
   var $65=((($64)+(1))|0);
   $k=$65;
   label = 5; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $68=(($hash2)|0);
   var $69=$68;
   var $70=HEAP32[(($69)>>2)];
   var $71=$70;
   var $72=$71;
   var $73=HEAP32[(($72)>>2)];
   var $74=$73 >>> 11;
   var $75=$74 & 2097151;
   var $76=$75 & 256;
   var $77=(($76)|(0))!=0;
   if ($77) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $79=(($hash)|0);
   var $80=$79;
   var $81=HEAP32[(($80)>>2)];
   var $82=$81;
   var $83=$82;
   var $84=HEAP32[(($83)>>2)];
   var $85=$84 >>> 11;
   var $86=$85 & 2097151;
   var $87=$86 | 256;
   var $88=$87 & 2097151;
   var $89=$82;
   var $90=$88 & 2097151;
   var $91=$90 << 11;
   var $92=HEAP32[(($89)>>2)];
   var $93=$92 & 2047;
   var $94=$93 | $91;
   HEAP32[(($89)>>2)]=$94;
   var $95=$1;
   var $96=$1;
   var $97=_mrb_intern2($96, ((105724)|0), 6);
   _mrb_iv_get($4, $95, $hash2, $97);
   var $98=$ifnone;
   var $99=$4;
   assert(12 % 1 === 0);HEAP32[(($98)>>2)]=HEAP32[(($99)>>2)];HEAP32[((($98)+(4))>>2)]=HEAP32[((($99)+(4))>>2)];HEAP32[((($98)+(8))>>2)]=HEAP32[((($99)+(8))>>2)];
   label = 14; break;
  case 13: 
   var $101=$1;
   var $102=$1;
   var $103=_mrb_intern2($102, ((105724)|0), 6);
   _mrb_iv_get($5, $101, $hash2, $103);
   var $104=$ifnone;
   var $105=$5;
   assert(12 % 1 === 0);HEAP32[(($104)>>2)]=HEAP32[(($105)>>2)];HEAP32[((($104)+(4))>>2)]=HEAP32[((($105)+(4))>>2)];HEAP32[((($104)+(8))>>2)]=HEAP32[((($105)+(8))>>2)];
   label = 14; break;
  case 14: 
   var $107=$1;
   var $108=$1;
   var $109=_mrb_intern2($108, ((105724)|0), 6);
   _mrb_iv_set($107, $hash, $109, $ifnone);
   var $110=$agg_result;
   var $111=$hash;
   assert(12 % 1 === 0);HEAP32[(($110)>>2)]=HEAP32[(($111)>>2)];HEAP32[((($110)+(4))>>2)]=HEAP32[((($111)+(4))>>2)];HEAP32[((($110)+(8))>>2)]=HEAP32[((($111)+(8))>>2)];
   label = 15; break;
  case 15: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_size_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $h;
   $1=$mrb;
   var $2=(($self)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   $h=$7;
   var $8=$h;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_fixnum_value1097($agg_result, 0);
   label = 4; break;
  case 3: 
   var $12=$h;
   var $13=(($12+4)|0);
   var $14=HEAP32[(($13)>>2)];
   _mrb_fixnum_value1097($agg_result, $14);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_shift($agg_result, $mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $h;
   var $k;
   var $delKey=sp;
   var $delVal=(sp)+(12);
   var $2=(sp)+(24);
   var $3=(sp)+(36);
   var $4=(sp)+(48);
   $1=$mrb;
   var $5=(($hash)|0);
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7;
   var $9=(($8+16)|0);
   var $10=HEAP32[(($9)>>2)];
   $h=$10;
   var $11=$1;
   _mrb_hash_modify($11, $hash);
   var $12=$h;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 2; break; } else { label = 11; break; }
  case 2: 
   var $15=$h;
   var $16=(($15+4)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)>>>(0)) > 0;
   if ($18) { label = 3; break; } else { label = 10; break; }
  case 3: 
   $k=0;
   label = 4; break;
  case 4: 
   var $21=$k;
   var $22=$h;
   var $23=(($22)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($21)|(0))!=(($24)|(0));
   if ($25) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $27=$k;
   var $28=((((($27)>>>(0)))/(4))&-1);
   var $29=$h;
   var $30=(($29+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31+$28)|0);
   var $33=HEAP8[($32)];
   var $34=(($33)&(255));
   var $35=$k;
   var $36=((((($35)>>>(0)))%(4))&-1);
   var $37=((106228+$36)|0);
   var $38=HEAP8[($37)];
   var $39=(($38)&(255));
   var $40=$34 & $39;
   var $41=(($40)|(0))!=0;
   if ($41) { label = 6; break; } else { label = 7; break; }
  case 6: 
   label = 8; break;
  case 7: 
   var $44=$k;
   var $45=$h;
   var $46=(($45+20)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47+((($44)*(12))&-1))|0);
   var $49=$delKey;
   var $50=$48;
   assert(12 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];HEAP32[((($49)+(4))>>2)]=HEAP32[((($50)+(4))>>2)];HEAP32[((($49)+(8))>>2)]=HEAP32[((($50)+(8))>>2)];
   var $51=$1;
   _mrb_gc_protect($51, $delKey);
   var $52=$1;
   _mrb_hash_delete_key($2, $52, $hash, $delKey);
   var $53=$delVal;
   var $54=$2;
   assert(12 % 1 === 0);HEAP32[(($53)>>2)]=HEAP32[(($54)>>2)];HEAP32[((($53)+(4))>>2)]=HEAP32[((($54)+(4))>>2)];HEAP32[((($53)+(8))>>2)]=HEAP32[((($54)+(8))>>2)];
   var $55=$1;
   _mrb_gc_protect($55, $delVal);
   var $56=$1;
   _mrb_assoc_new($agg_result, $56, $delKey, $delVal);
   label = 14; break;
  case 8: 
   var $58=$k;
   var $59=((($58)+(1))|0);
   $k=$59;
   label = 4; break;
  case 9: 
   label = 10; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $63=(($hash)|0);
   var $64=$63;
   var $65=HEAP32[(($64)>>2)];
   var $66=$65;
   var $67=$66;
   var $68=HEAP32[(($67)>>2)];
   var $69=$68 >>> 11;
   var $70=$69 & 2097151;
   var $71=$70 & 256;
   var $72=(($71)|(0))!=0;
   if ($72) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $74=$1;
   var $75=$1;
   var $76=$1;
   var $77=_mrb_intern2($76, ((105724)|0), 6);
   _mrb_iv_get($3, $75, $hash, $77);
   _mrb_nil_value1093($4);
   _mrb_funcall($agg_result, $74, $3, ((105416)|0), 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($hash)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($hash)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($hash)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($4)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($4)+(8))>>2)],tempInt));
   label = 14; break;
  case 13: 
   var $79=$1;
   var $80=$1;
   var $81=_mrb_intern2($80, ((105724)|0), 6);
   _mrb_iv_get($agg_result, $79, $hash, $81);
   label = 14; break;
  case 14: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_values($agg_result, $mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $h;
   var $k;
   var $ary=sp;
   var $2=(sp)+(12);
   var $v=(sp)+(24);
   $1=$mrb;
   var $3=(($hash)|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5;
   var $7=(($6+16)|0);
   var $8=HEAP32[(($7)>>2)];
   $h=$8;
   var $9=$h;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $12=$1;
   _mrb_ary_new($agg_result, $12);
   label = 10; break;
  case 3: 
   var $14=$1;
   var $15=$h;
   var $16=(($15+4)|0);
   var $17=HEAP32[(($16)>>2)];
   _mrb_ary_new_capa($2, $14, $17);
   var $18=$ary;
   var $19=$2;
   assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
   $k=0;
   label = 4; break;
  case 4: 
   var $21=$k;
   var $22=$h;
   var $23=(($22)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($21)|(0))!=(($24)|(0));
   if ($25) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $27=$k;
   var $28=((((($27)>>>(0)))/(4))&-1);
   var $29=$h;
   var $30=(($29+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31+$28)|0);
   var $33=HEAP8[($32)];
   var $34=(($33)&(255));
   var $35=$k;
   var $36=((((($35)>>>(0)))%(4))&-1);
   var $37=((106228+$36)|0);
   var $38=HEAP8[($37)];
   var $39=(($38)&(255));
   var $40=$34 & $39;
   var $41=(($40)|(0))!=0;
   if ($41) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $43=$k;
   var $44=$h;
   var $45=(($44+24)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($46+((($43)*(12))&-1))|0);
   var $48=$v;
   var $49=$47;
   assert(12 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($49)+(4))>>2)];HEAP32[((($48)+(8))>>2)]=HEAP32[((($49)+(8))>>2)];
   var $50=$1;
   _mrb_ary_push($50, $ary, $v);
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $53=$k;
   var $54=((($53)+(1))|0);
   $k=$54;
   label = 4; break;
  case 9: 
   var $56=$agg_result;
   var $57=$ary;
   assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($57)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($57)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($57)+(8))>>2)];
   label = 10; break;
  case 10: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_to_hash($agg_result, $mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$agg_result;
 var $3=$hash;
 assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_hash_inspect($agg_result, $mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $h;
   $1=$mrb;
   var $2=(($hash)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   $h=$7;
   var $8=$h;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$h;
   var $12=(($11+4)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))==0;
   if ($14) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $16=$1;
   _mrb_str_new($agg_result, $16, ((95260)|0), 2);
   label = 5; break;
  case 4: 
   var $18=$1;
   _inspect_hash($agg_result, $18, $hash, 0);
   label = 5; break;
  case 5: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_class1169($mrb, $v) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $2=$mrb;
   var $3=(($v+8)|0);
   var $4=HEAP32[(($3)>>2)];
   if ((($4)|(0))==0) {
    label = 2; break;
   }
   else if ((($4)|(0))==2) {
    label = 5; break;
   }
   else if ((($4)|(0))==4) {
    label = 6; break;
   }
   else if ((($4)|(0))==3) {
    label = 7; break;
   }
   else if ((($4)|(0))==6) {
    label = 8; break;
   }
   else {
   label = 9; break;
   }
  case 2: 
   var $6=(($v)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $11=$2;
   var $12=(($11+84)|0);
   var $13=HEAP32[(($12)>>2)];
   $1=$13;
   label = 10; break;
  case 4: 
   var $15=$2;
   var $16=(($15+88)|0);
   var $17=HEAP32[(($16)>>2)];
   $1=$17;
   label = 10; break;
  case 5: 
   var $19=$2;
   var $20=(($19+80)|0);
   var $21=HEAP32[(($20)>>2)];
   $1=$21;
   label = 10; break;
  case 6: 
   var $23=$2;
   var $24=(($23+92)|0);
   var $25=HEAP32[(($24)>>2)];
   $1=$25;
   label = 10; break;
  case 7: 
   var $27=$2;
   var $28=(($27+76)|0);
   var $29=HEAP32[(($28)>>2)];
   $1=$29;
   label = 10; break;
  case 8: 
   var $31=$2;
   var $32=(($31+72)|0);
   var $33=HEAP32[(($32)>>2)];
   $1=$33;
   label = 10; break;
  case 9: 
   var $35=(($v)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=$37;
   var $39=(($38+4)|0);
   var $40=HEAP32[(($39)>>2)];
   $1=$40;
   label = 10; break;
  case 10: 
   var $42=$1;
   STACKTOP = sp;
   return $42;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_hash_eql($agg_result, $mrb, $hash1) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash1; $hash1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $hash2=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((94320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$hash2,tempInt));
 var $4=$1;
 _hash_equal($agg_result, $4, $hash1, $hash2, 1);
 STACKTOP = sp;
 return;
}
function _hash_equal($agg_result, $mrb, $hash1, $hash2, $eql) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash1; $hash1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $hash2; $hash2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $h1;
   var $h2;
   var $k1;
   var $k2;
   var $key=sp;
   $1=$mrb;
   $2=$eql;
   var $3=$1;
   var $4=_mrb_obj_equal($3, $hash1, $hash2);
   var $5=(($4 << 24) >> 24)!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _mrb_true_value1095($agg_result);
   label = 27; break;
  case 3: 
   var $8=(($hash2+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==15;
   if ($10) { label = 9; break; } else { label = 4; break; }
  case 4: 
   var $12=$1;
   var $13=$1;
   var $14=_mrb_intern2($13, ((96920)|0), 7);
   var $15=_mrb_respond_to($12, $hash2, $14);
   var $16=(($15 << 24) >> 24)!=0;
   if ($16) { label = 6; break; } else { label = 5; break; }
  case 5: 
   _mrb_false_value1096($agg_result);
   label = 27; break;
  case 6: 
   var $19=$2;
   var $20=(($19)|(0))!=0;
   if ($20) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $22=$1;
   var $23=_mrb_eql($22, $hash2, $hash1);
   var $24=(($23)&(255));
   _mrb_fixnum_value1097($agg_result, $24);
   label = 27; break;
  case 8: 
   var $26=$1;
   var $27=_mrb_equal($26, $hash2, $hash1);
   var $28=(($27)&(255));
   _mrb_fixnum_value1097($agg_result, $28);
   label = 27; break;
  case 9: 
   var $30=(($hash1)|0);
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=$32;
   var $34=(($33+16)|0);
   var $35=HEAP32[(($34)>>2)];
   $h1=$35;
   var $36=(($hash2)|0);
   var $37=$36;
   var $38=HEAP32[(($37)>>2)];
   var $39=$38;
   var $40=(($39+16)|0);
   var $41=HEAP32[(($40)>>2)];
   $h2=$41;
   var $42=$h1;
   var $43=(($42)|(0))!=0;
   if ($43) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $45=$h2;
   var $46=(($45)|(0))!=0;
   var $47=$46 ^ 1;
   var $48=(($47)&(1));
   var $49=(($48) & 255);
   _mrb_bool_value1094($agg_result, $49);
   label = 27; break;
  case 11: 
   var $51=$h2;
   var $52=(($51)|(0))!=0;
   if ($52) { label = 13; break; } else { label = 12; break; }
  case 12: 
   _mrb_false_value1096($agg_result);
   label = 27; break;
  case 13: 
   var $55=$h1;
   var $56=(($55+4)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=$h2;
   var $59=(($58+4)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($57)|(0))!=(($60)|(0));
   if ($61) { label = 14; break; } else { label = 15; break; }
  case 14: 
   _mrb_false_value1096($agg_result);
   label = 27; break;
  case 15: 
   $k1=0;
   label = 16; break;
  case 16: 
   var $65=$k1;
   var $66=$h1;
   var $67=(($66)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=(($65)|(0))!=(($68)|(0));
   if ($69) { label = 17; break; } else { label = 25; break; }
  case 17: 
   var $71=$k1;
   var $72=((((($71)>>>(0)))/(4))&-1);
   var $73=$h1;
   var $74=(($73+16)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($75+$72)|0);
   var $77=HEAP8[($76)];
   var $78=(($77)&(255));
   var $79=$k1;
   var $80=((((($79)>>>(0)))%(4))&-1);
   var $81=((106228+$80)|0);
   var $82=HEAP8[($81)];
   var $83=(($82)&(255));
   var $84=$78 & $83;
   var $85=(($84)|(0))!=0;
   if ($85) { label = 18; break; } else { label = 19; break; }
  case 18: 
   label = 24; break;
  case 19: 
   var $88=$k1;
   var $89=$h1;
   var $90=(($89+20)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=(($91+((($88)*(12))&-1))|0);
   var $93=$key;
   var $94=$92;
   assert(12 % 1 === 0);HEAP32[(($93)>>2)]=HEAP32[(($94)>>2)];HEAP32[((($93)+(4))>>2)]=HEAP32[((($94)+(4))>>2)];HEAP32[((($93)+(8))>>2)]=HEAP32[((($94)+(8))>>2)];
   var $95=$h2;
   var $96=_kh_get_ht($95, $key);
   $k2=$96;
   var $97=$k2;
   var $98=$h2;
   var $99=(($98)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($97)|(0))!=(($100)|(0));
   if ($101) { label = 20; break; } else { label = 23; break; }
  case 20: 
   var $103=$1;
   var $104=$k1;
   var $105=$h1;
   var $106=(($105+24)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=(($107+((($104)*(12))&-1))|0);
   var $109=$k2;
   var $110=$h2;
   var $111=(($110+24)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=(($112+((($109)*(12))&-1))|0);
   var $114=_mrb_equal($103, $108, $113);
   var $115=(($114 << 24) >> 24)!=0;
   if ($115) { label = 21; break; } else { label = 22; break; }
  case 21: 
   label = 24; break;
  case 22: 
   label = 23; break;
  case 23: 
   _mrb_false_value1096($agg_result);
   label = 27; break;
  case 24: 
   var $120=$k1;
   var $121=((($120)+(1))|0);
   $k1=$121;
   label = 16; break;
  case 25: 
   label = 26; break;
  case 26: 
   _mrb_true_value1095($agg_result);
   label = 27; break;
  case 27: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_false_value1096($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=1;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_value1097($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _inspect_hash($agg_result, $mrb, $hash, $recur) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $str=sp;
   var $str2=(sp)+(12);
   var $h;
   var $k;
   var $3=(sp)+(24);
   var $ai;
   var $4=(sp)+(36);
   var $5=(sp)+(48);
   var $6=(sp)+(60);
   var $7=(sp)+(72);
   var $8=(sp)+(84);
   var $9=(sp)+(96);
   var $10=(sp)+(108);
   $1=$mrb;
   $2=$recur;
   var $11=(($hash)|0);
   var $12=$11;
   var $13=HEAP32[(($12)>>2)];
   var $14=$13;
   var $15=(($14+16)|0);
   var $16=HEAP32[(($15)>>2)];
   $h=$16;
   var $17=$2;
   var $18=(($17)|(0))!=0;
   if ($18) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $20=$1;
   _mrb_str_new($agg_result, $20, ((95088)|0), 5);
   label = 15; break;
  case 3: 
   var $22=$1;
   _mrb_str_new($3, $22, ((94892)|0), 1);
   var $23=$str;
   var $24=$3;
   assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
   var $25=$h;
   var $26=(($25)|(0))!=0;
   if ($26) { label = 4; break; } else { label = 14; break; }
  case 4: 
   var $28=$h;
   var $29=(($28+4)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30)>>>(0)) > 0;
   if ($31) { label = 5; break; } else { label = 14; break; }
  case 5: 
   $k=0;
   label = 6; break;
  case 6: 
   var $34=$k;
   var $35=$h;
   var $36=(($35)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($34)|(0))!=(($37)|(0));
   if ($38) { label = 7; break; } else { label = 13; break; }
  case 7: 
   var $40=$k;
   var $41=((((($40)>>>(0)))/(4))&-1);
   var $42=$h;
   var $43=(($42+16)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=(($44+$41)|0);
   var $46=HEAP8[($45)];
   var $47=(($46)&(255));
   var $48=$k;
   var $49=((((($48)>>>(0)))%(4))&-1);
   var $50=((106228+$49)|0);
   var $51=HEAP8[($50)];
   var $52=(($51)&(255));
   var $53=$47 & $52;
   var $54=(($53)|(0))!=0;
   if ($54) { label = 8; break; } else { label = 9; break; }
  case 8: 
   label = 12; break;
  case 9: 
   var $57=$1;
   var $58=_mrb_gc_arena_save($57);
   $ai=$58;
   var $59=(($str)|0);
   var $60=$59;
   var $61=HEAP32[(($60)>>2)];
   var $62=$61;
   var $63=(($62+12)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64)|(0)) > 1;
   if ($65) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $67=$1;
   _mrb_str_cat($4, $67, $str, ((94520)|0), 2);
   label = 11; break;
  case 11: 
   var $69=$1;
   var $70=$k;
   var $71=$h;
   var $72=(($71+20)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($73+((($70)*(12))&-1))|0);
   _mrb_inspect($5, $69, $74);
   var $75=$str2;
   var $76=$5;
   assert(12 % 1 === 0);HEAP32[(($75)>>2)]=HEAP32[(($76)>>2)];HEAP32[((($75)+(4))>>2)]=HEAP32[((($76)+(4))>>2)];HEAP32[((($75)+(8))>>2)]=HEAP32[((($76)+(8))>>2)];
   var $77=$1;
   _mrb_str_append($6, $77, $str, $str2);
   var $78=$1;
   _mrb_str_buf_cat($7, $78, $str, ((94292)|0), 2);
   var $79=$1;
   var $80=$k;
   var $81=$h;
   var $82=(($81+24)|0);
   var $83=HEAP32[(($82)>>2)];
   var $84=(($83+((($80)*(12))&-1))|0);
   _mrb_inspect($8, $79, $84);
   var $85=$str2;
   var $86=$8;
   assert(12 % 1 === 0);HEAP32[(($85)>>2)]=HEAP32[(($86)>>2)];HEAP32[((($85)+(4))>>2)]=HEAP32[((($86)+(4))>>2)];HEAP32[((($85)+(8))>>2)]=HEAP32[((($86)+(8))>>2)];
   var $87=$1;
   _mrb_str_append($9, $87, $str, $str2);
   var $88=$1;
   var $89=$ai;
   _mrb_gc_arena_restore($88, $89);
   label = 12; break;
  case 12: 
   var $91=$k;
   var $92=((($91)+(1))|0);
   $k=$92;
   label = 6; break;
  case 13: 
   label = 14; break;
  case 14: 
   var $95=$1;
   _mrb_str_buf_cat($10, $95, $str, ((93916)|0), 1);
   var $96=$agg_result;
   var $97=$str;
   assert(12 % 1 === 0);HEAP32[(($96)>>2)]=HEAP32[(($97)>>2)];HEAP32[((($96)+(4))>>2)]=HEAP32[((($97)+(4))>>2)];HEAP32[((($96)+(8))>>2)]=HEAP32[((($97)+(8))>>2)];
   label = 15; break;
  case 15: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _to_hash1098($agg_result, $mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_convert_type($agg_result, $2, $hash, 15, ((100612)|0), ((96920)|0));
 STACKTOP = sp;
 return;
}
function _mrb_hash_has_valueWithvalue($agg_result, $mrb, $hash, $value) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $value; $value = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($value)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($value)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($value)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $h;
   var $k;
   $1=$mrb;
   var $2=(($hash)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=(($5+16)|0);
   var $7=HEAP32[(($6)>>2)];
   $h=$7;
   var $8=$h;
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 11; break; }
  case 2: 
   $k=0;
   label = 3; break;
  case 3: 
   var $12=$k;
   var $13=$h;
   var $14=(($13)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($12)|(0))!=(($15)|(0));
   if ($16) { label = 4; break; } else { label = 10; break; }
  case 4: 
   var $18=$k;
   var $19=((((($18)>>>(0)))/(4))&-1);
   var $20=$h;
   var $21=(($20+16)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+$19)|0);
   var $24=HEAP8[($23)];
   var $25=(($24)&(255));
   var $26=$k;
   var $27=((((($26)>>>(0)))%(4))&-1);
   var $28=((106228+$27)|0);
   var $29=HEAP8[($28)];
   var $30=(($29)&(255));
   var $31=$25 & $30;
   var $32=(($31)|(0))!=0;
   if ($32) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 9; break;
  case 6: 
   var $35=$1;
   var $36=$k;
   var $37=$h;
   var $38=(($37+24)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39+((($36)*(12))&-1))|0);
   var $41=_mrb_equal($35, $40, $value);
   var $42=(($41 << 24) >> 24)!=0;
   if ($42) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _mrb_true_value1095($agg_result);
   label = 12; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $46=$k;
   var $47=((($46)+(1))|0);
   $k=$47;
   label = 3; break;
  case 10: 
   label = 11; break;
  case 11: 
   _mrb_false_value1096($agg_result);
   label = 12; break;
  case 12: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_init_core($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_init_symtbl($2);
 var $3=$1;
 _mrb_gc_arena_restore($3, 0);
 var $4=$1;
 _mrb_init_class($4);
 var $5=$1;
 _mrb_gc_arena_restore($5, 0);
 var $6=$1;
 _mrb_init_object($6);
 var $7=$1;
 _mrb_gc_arena_restore($7, 0);
 var $8=$1;
 _mrb_init_kernel($8);
 var $9=$1;
 _mrb_gc_arena_restore($9, 0);
 var $10=$1;
 _mrb_init_comparable($10);
 var $11=$1;
 _mrb_gc_arena_restore($11, 0);
 var $12=$1;
 _mrb_init_enumerable($12);
 var $13=$1;
 _mrb_gc_arena_restore($13, 0);
 var $14=$1;
 _mrb_init_symbol($14);
 var $15=$1;
 _mrb_gc_arena_restore($15, 0);
 var $16=$1;
 _mrb_init_exception($16);
 var $17=$1;
 _mrb_gc_arena_restore($17, 0);
 var $18=$1;
 _mrb_init_proc($18);
 var $19=$1;
 _mrb_gc_arena_restore($19, 0);
 var $20=$1;
 _mrb_init_string($20);
 var $21=$1;
 _mrb_gc_arena_restore($21, 0);
 var $22=$1;
 _mrb_init_array($22);
 var $23=$1;
 _mrb_gc_arena_restore($23, 0);
 var $24=$1;
 _mrb_init_hash($24);
 var $25=$1;
 _mrb_gc_arena_restore($25, 0);
 var $26=$1;
 _mrb_init_numeric($26);
 var $27=$1;
 _mrb_gc_arena_restore($27, 0);
 var $28=$1;
 _mrb_init_range($28);
 var $29=$1;
 _mrb_gc_arena_restore($29, 0);
 var $30=$1;
 _mrb_init_gc($30);
 var $31=$1;
 _mrb_gc_arena_restore($31, 0);
 var $32=$1;
 _mrb_init_mrblib($32);
 var $33=$1;
 _mrb_gc_arena_restore($33, 0);
 var $34=$1;
 _mrb_init_mrbgems($34);
 var $35=$1;
 _mrb_gc_arena_restore($35, 0);
 return;
}
function _mrb_final_core($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_final_mrbgems($2);
 var $3=$1;
 _mrb_gc_arena_restore($3, 0);
 return;
}
function _mrb_obj_basic_to_s_p($mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $me;
   $2=$mrb;
   var $3=$2;
   var $4=$2;
   var $5=_mrb_class1169($4, $obj);
   var $6=$2;
   var $7=_mrb_intern2($6, ((105424)|0), 4);
   var $8=_mrb_method_search($3, $5, $7);
   $me=$8;
   var $9=$me;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $12=$me;
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=$14 >>> 11;
   var $16=$15 & 2097151;
   var $17=$16 & 128;
   var $18=(($17)|(0))!=0;
   if ($18) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $20=$me;
   var $21=(($20+12)|0);
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0))==(((392))|(0));
   if ($24) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $1=1;
   label = 6; break;
  case 5: 
   $1=0;
   label = 6; break;
  case 6: 
   var $28=$1;
   STACKTOP = sp;
   return $28;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_inspect($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$mrb;
   var $2=(($obj+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|(0))==8;
   if ($4) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $6=$1;
   var $7=_mrb_obj_basic_to_s_p($6, $obj);
   var $8=(($7)&(255));
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $11=$1;
   var $12=(($obj)|0);
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=$14;
   _mrb_obj_iv_inspect($agg_result, $11, $15);
   label = 5; break;
  case 4: 
   var $17=$1;
   _mrb_any_to_s($agg_result, $17, $obj);
   label = 5; break;
  case 5: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_singleton_class_clone($mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $klass;
   var $clone;
   var $3=sp;
   var $4=(sp)+(12);
   var $5=(sp)+(24);
   $2=$mrb;
   var $6=(($obj)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=$8;
   var $10=(($9+4)|0);
   var $11=HEAP32[(($10)>>2)];
   $klass=$11;
   var $12=$klass;
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=$14 & 255;
   var $16=(($15)|(0))!=12;
   if ($16) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $18=$klass;
   $1=$18;
   label = 13; break;
  case 3: 
   var $20=$2;
   var $21=$klass;
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=$23 & 255;
   var $25=$2;
   var $26=(($25+48)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=_mrb_obj_alloc($20, $24, $27);
   var $29=$28;
   $clone=$29;
   var $30=(($obj+8)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31)|(0))==9;
   if ($32) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $34=(($obj+8)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35)|(0))==12;
   if ($36) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $38=$clone;
   var $39=$clone;
   var $40=(($39+4)|0);
   HEAP32[(($40)>>2)]=$38;
   label = 7; break;
  case 6: 
   var $42=$2;
   var $43=$klass;
   var $44=$43;
   _mrb_obj_value1170($3, $44);
   var $45=_mrb_singleton_class_clone($42, $3);
   var $46=$clone;
   var $47=(($46+4)|0);
   HEAP32[(($47)>>2)]=$45;
   label = 7; break;
  case 7: 
   var $49=$klass;
   var $50=(($49+20)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$clone;
   var $53=(($52+20)|0);
   HEAP32[(($53)>>2)]=$51;
   var $54=$klass;
   var $55=(($54+12)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56)|(0))!=0;
   if ($57) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $59=$2;
   var $60=$clone;
   var $61=$60;
   _mrb_obj_value1170($4, $61);
   var $62=$klass;
   var $63=$62;
   _mrb_obj_value1170($5, $63);
   _mrb_iv_copy($59, $4, $5);
   var $64=$2;
   var $65=$clone;
   var $66=$65;
   var $67=$2;
   var $68=_mrb_intern2($67, ((105388)|0), 12);
   _mrb_obj_iv_set($64, $66, $68, $obj);
   label = 9; break;
  case 9: 
   var $70=$klass;
   var $71=(($70+16)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72)|(0))!=0;
   if ($73) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $75=$2;
   var $76=$klass;
   var $77=(($76+16)|0);
   var $78=HEAP32[(($77)>>2)];
   var $79=_kh_copy_mt($75, $78);
   var $80=$clone;
   var $81=(($80+16)|0);
   HEAP32[(($81)>>2)]=$79;
   label = 12; break;
  case 11: 
   var $83=$2;
   var $84=_kh_init_mt($83);
   var $85=$clone;
   var $86=(($85+16)|0);
   HEAP32[(($86)>>2)]=$84;
   label = 12; break;
  case 12: 
   var $88=$clone;
   var $89=$88;
   var $90=HEAP32[(($89)>>2)];
   var $91=$90 & -256;
   var $92=$91 | 12;
   HEAP32[(($89)>>2)]=$92;
   var $93=$clone;
   $1=$93;
   label = 13; break;
  case 13: 
   var $95=$1;
   STACKTOP = sp;
   return $95;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_value1170($agg_result, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   var $b;
   $1=$p;
   var $2=$1;
   var $3=$2;
   $b=$3;
   label = 2; break;
  case 2: 
   var $5=$b;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 255;
   var $9=(($v+8)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=$1;
   var $11=(($v)|0);
   var $12=$11;
   HEAP32[(($12)>>2)]=$10;
   label = 3; break;
  case 3: 
   var $14=$agg_result;
   var $15=$v;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_clone($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $p;
   var $clone=sp;
   var $2=(sp)+(12);
   $1=$mrb;
   var $3=(($self+8)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)>>>(0)) <= 7;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   var $8=$1;
   var $9=_mrb_class_get($8, ((100592)|0));
   _mrb_raisef($7, $9, ((96884)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($self)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($self)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($self)+(8))>>2)],tempInt));
   label = 3; break;
  case 3: 
   var $11=$1;
   var $12=(($self+8)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$1;
   var $15=_mrb_obj_class($14, $self);
   var $16=_mrb_obj_alloc($11, $13, $15);
   var $17=$16;
   $p=$17;
   var $18=$1;
   var $19=_mrb_singleton_class_clone($18, $self);
   var $20=$p;
   var $21=(($20+4)|0);
   HEAP32[(($21)>>2)]=$19;
   var $22=$p;
   var $23=$22;
   _mrb_obj_value1170($2, $23);
   var $24=$clone;
   var $25=$2;
   assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
   var $26=$1;
   _init_copy($26, $clone, $self);
   var $27=$agg_result;
   var $28=$clone;
   assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _init_copy($mrb, $dest, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $dest; $dest = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dest)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dest)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($dest)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2=sp;
   $1=$mrb;
   var $3=(($obj+8)|0);
   var $4=HEAP32[(($3)>>2)];
   if ((($4)|(0))==8 | (($4)|(0))==9 | (($4)|(0))==10 | (($4)|(0))==12 | (($4)|(0))==15 | (($4)|(0))==21) {
    label = 2; break;
   }
   else {
   label = 3; break;
   }
  case 2: 
   var $6=$1;
   _mrb_iv_copy($6, $dest, $obj);
   label = 4; break;
  case 3: 
   label = 4; break;
  case 4: 
   var $9=$1;
   _mrb_funcall($2, $9, $dest, ((94876)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($obj)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj)+(8))>>2)],tempInt));
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_dup($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $p;
   var $dup=sp;
   var $2=(sp)+(12);
   $1=$mrb;
   var $3=(($obj+8)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)>>>(0)) <= 7;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   var $8=$1;
   var $9=_mrb_class_get($8, ((100592)|0));
   _mrb_raisef($7, $9, ((94296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($obj)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj)+(8))>>2)],tempInt));
   label = 3; break;
  case 3: 
   var $11=$1;
   var $12=(($obj+8)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$1;
   var $15=_mrb_obj_class($14, $obj);
   var $16=_mrb_obj_alloc($11, $13, $15);
   $p=$16;
   var $17=$p;
   var $18=$17;
   _mrb_obj_value1170($2, $18);
   var $19=$dup;
   var $20=$2;
   assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
   var $21=$1;
   _init_copy($21, $dup, $obj);
   var $22=$agg_result;
   var $23=$dup;
   assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_extend_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $argv=sp;
 var $argc=(sp)+(4);
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((91784)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
 var $4=$1;
 var $5=HEAP32[(($argc)>>2)];
 var $6=HEAP32[(($argv)>>2)];
 _mrb_obj_extend($agg_result, $4, $5, $6, $self);
 STACKTOP = sp;
 return;
}
function _mrb_obj_extend($agg_result, $mrb, $argc, $argv, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $i;
   var $4=sp;
   var $5=(sp)+(12);
   $1=$mrb;
   $2=$argc;
   $3=$argv;
   var $6=$2;
   var $7=(($6)|(0))==0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$1;
   var $10=$1;
   var $11=_mrb_class_get($10, ((89596)|0));
   _mrb_raise($9, $11, ((89288)|0));
   label = 3; break;
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $14=$i;
   var $15=$2;
   var $16=(($14)|(0)) < (($15)|(0));
   if ($16) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $18=$1;
   var $19=$i;
   var $20=$3;
   var $21=(($20+((($19)*(12))&-1))|0);
   _mrb_check_type($18, $21, 10);
   label = 6; break;
  case 6: 
   var $23=$i;
   var $24=((($23)+(1))|0);
   $i=$24;
   label = 4; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $27=$2;
   var $28=((($27)-(1))|0);
   $2=$28;
   var $29=(($27)|(0))!=0;
   if ($29) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $31=$1;
   var $32=$2;
   var $33=$3;
   var $34=(($33+((($32)*(12))&-1))|0);
   _mrb_funcall($4, $31, $34, ((89192)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($obj)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj)+(8))>>2)],tempInt));
   var $35=$1;
   var $36=$2;
   var $37=$3;
   var $38=(($37+((($36)*(12))&-1))|0);
   _mrb_funcall($5, $35, $38, ((89100)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($obj)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj)+(8))>>2)],tempInt));
   label = 8; break;
  case 10: 
   var $40=$agg_result;
   var $41=$obj;
   assert(12 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];HEAP32[((($40)+(8))>>2)]=HEAP32[((($41)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_hash($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=_mrb_obj_id($self);
 _mrb_fixnum_value1173($agg_result, $2);
 STACKTOP = sp;
 return;
}
function _mrb_fixnum_value1173($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_init_copy($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $orig=sp;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((89612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$orig,tempInt));
   var $4=$1;
   var $5=_mrb_obj_equal($4, $self, $orig);
   var $6=(($5 << 24) >> 24)!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$agg_result;
   var $9=$self;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   label = 7; break;
  case 3: 
   var $11=(($self+8)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($orig+8)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($12)|(0))!=(($14)|(0));
   if ($15) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $17=$1;
   var $18=_mrb_obj_class($17, $self);
   var $19=$1;
   var $20=_mrb_obj_class($19, $orig);
   var $21=(($18)|(0))!=(($20)|(0));
   if ($21) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $23=$1;
   var $24=$1;
   var $25=_mrb_class_get($24, ((100592)|0));
   _mrb_raise($23, $25, ((88404)|0));
   label = 6; break;
  case 6: 
   var $27=$agg_result;
   var $28=$self;
   assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
   label = 7; break;
  case 7: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_instance_eval($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a=sp;
   var $b=(sp)+(12);
   var $cv=(sp)+(24);
   var $c;
   var $2=(sp)+(36);
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_get_args($3, ((87404)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$a,HEAP32[(((tempInt)+(4))>>2)]=$b,tempInt));
   var $5=(($4)|(0))==1;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   var $8=$1;
   var $9=_mrb_class_get($8, ((86604)|0));
   _mrb_raise($7, $9, ((105980)|0));
   label = 3; break;
  case 3: 
   var $11=(($self+8)|0);
   var $12=HEAP32[(($11)>>2)];
   if ((($12)|(0))==4 | (($12)|(0))==3 | (($12)|(0))==6) {
    label = 4; break;
   }
   else {
   label = 5; break;
   }
  case 4: 
   $c=0;
   label = 6; break;
  case 5: 
   var $15=$1;
   _mrb_singleton_class($2, $15, $self);
   var $16=$cv;
   var $17=$2;
   assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
   var $18=(($cv)|0);
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $21=$20;
   $c=$21;
   label = 6; break;
  case 6: 
   var $23=$1;
   var $24=$c;
   _mrb_yield_internal($agg_result, $23, $b, 0, 0, $self, $24);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_is_instance_of($mrb, $obj, $c) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $2=$mrb;
   $3=$c;
   var $4=$2;
   var $5=_mrb_obj_class($4, $obj);
   var $6=$3;
   var $7=(($5)|(0))==(($6)|(0));
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=1;
   label = 4; break;
  case 3: 
   $1=0;
   label = 4; break;
  case 4: 
   var $11=$1;
   STACKTOP = sp;
   return $11;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_ivar_defined($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $mid=sp;
 var $defined_p;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((105376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$mid,tempInt));
 var $4=$1;
 var $5=HEAP16[(($mid)>>1)];
 _check_iv_name($4, $5);
 var $6=$1;
 var $7=(($self)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 var $11=HEAP16[(($mid)>>1)];
 var $12=_mrb_obj_iv_defined($6, $10, $11);
 $defined_p=$12;
 var $13=$defined_p;
 _mrb_bool_value1174($agg_result, $13);
 STACKTOP = sp;
 return;
}
function _check_iv_name($mrb, $id) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $s;
   var $len=sp;
   var $3=(sp)+(4);
   $1=$mrb;
   $2=$id;
   var $4=$1;
   var $5=$2;
   var $6=_mrb_sym2name_len($4, $5, $len);
   $s=$6;
   var $7=HEAP32[(($len)>>2)];
   var $8=(($7)>>>(0)) < 2;
   if ($8) { label = 4; break; } else { label = 2; break; }
  case 2: 
   var $10=$s;
   var $11=(($10)|0);
   var $12=HEAP8[($11)];
   var $13=(($12 << 24) >> 24);
   var $14=(($13)|(0))==64;
   if ($14) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $16=$s;
   var $17=(($16+1)|0);
   var $18=HEAP8[($17)];
   var $19=(($18 << 24) >> 24);
   var $20=(($19)|(0))!=64;
   if ($20) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $22=$1;
   var $23=$2;
   var $24=$1;
   var $25=$2;
   _mrb_sym2str($3, $24, $25);
   _mrb_name_error($22, $23, ((89724)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
   label = 5; break;
  case 5: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_bool_value1174($agg_result, $boolean) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$boolean;
   label = 2; break;
  case 2: 
   var $3=$1;
   var $4=(($3)&(255));
   var $5=(($4)|(0))!=0;
   var $6=$5 ? 2 : 0;
   var $7=(($v+8)|0);
   HEAP32[(($7)>>2)]=$6;
   var $8=(($v)|0);
   var $9=$8;
   HEAP32[(($9)>>2)]=1;
   label = 3; break;
  case 3: 
   var $11=$agg_result;
   var $12=$v;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_ivar_get($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $id=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((105376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$id,tempInt));
 var $4=$1;
 var $5=HEAP16[(($id)>>1)];
 _check_iv_name($4, $5);
 var $6=$1;
 var $7=HEAP16[(($id)>>1)];
 _mrb_iv_get($agg_result, $6, $self, $7);
 STACKTOP = sp;
 return;
}
function _mrb_obj_ivar_set($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $id=sp;
 var $val=(sp)+(4);
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((104596)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$id,HEAP32[(((tempInt)+(4))>>2)]=$val,tempInt));
 var $4=$1;
 var $5=HEAP16[(($id)>>1)];
 _check_iv_name($4, $5);
 var $6=$1;
 var $7=HEAP16[(($id)>>1)];
 _mrb_iv_set($6, $self, $7, $val);
 var $8=$agg_result;
 var $9=$val;
 assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_obj_is_kind_of_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $arg=sp;
 var $kind_of_p;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((89612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$arg,tempInt));
 var $4=$1;
 var $5=(($arg)|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 var $9=_mrb_obj_is_kind_of($4, $self, $8);
 $kind_of_p=$9;
 var $10=$kind_of_p;
 _mrb_bool_value1174($agg_result, $10);
 STACKTOP = sp;
 return;
}
function _class_instance_method_list($agg_result, $mrb, $recur, $klass, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $ary=sp;
   var $oldklass;
   var $5=(sp)+(12);
   $1=$mrb;
   $2=$recur;
   $3=$klass;
   $4=$obj;
   var $6=$1;
   _mrb_ary_new($5, $6);
   var $7=$ary;
   var $8=$5;
   assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
   $oldklass=0;
   label = 2; break;
  case 2: 
   var $10=$3;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 3; break; } else { var $17 = 0;label = 4; break; }
  case 3: 
   var $13=$3;
   var $14=$oldklass;
   var $15=(($13)|(0))!=(($14)|(0));
   var $17 = $15;label = 4; break;
  case 4: 
   var $17;
   if ($17) { label = 5; break; } else { label = 12; break; }
  case 5: 
   var $19=$1;
   var $20=$3;
   _method_entry_loop($19, $20, $ary);
   var $21=$3;
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=$23 & 255;
   var $25=(($24)|(0))==11;
   if ($25) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $27=$3;
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $30=$29 & 255;
   var $31=(($30)|(0))==12;
   if ($31) { label = 7; break; } else { label = 8; break; }
  case 7: 
   label = 11; break;
  case 8: 
   var $34=$2;
   var $35=(($34 << 24) >> 24)!=0;
   if ($35) { label = 10; break; } else { label = 9; break; }
  case 9: 
   label = 12; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $39=$3;
   $oldklass=$39;
   var $40=$3;
   var $41=(($40+20)|0);
   var $42=HEAP32[(($41)>>2)];
   $3=$42;
   label = 2; break;
  case 12: 
   var $44=$agg_result;
   var $45=$ary;
   assert(12 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];HEAP32[((($44)+(8))>>2)]=HEAP32[((($45)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _method_entry_loop($mrb, $klass, $ary) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $i;
   var $h;
   var $3=sp;
   $1=$mrb;
   $2=$klass;
   var $4=$2;
   var $5=(($4+16)|0);
   var $6=HEAP32[(($5)>>2)];
   $h=$6;
   var $7=$h;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 9; break;
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $12=$i;
   var $13=$h;
   var $14=(($13)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($12)>>>(0)) < (($15)>>>(0));
   if ($16) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $18=$i;
   var $19=((((($18)>>>(0)))/(4))&-1);
   var $20=$h;
   var $21=(($20+16)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+$19)|0);
   var $24=HEAP8[($23)];
   var $25=(($24)&(255));
   var $26=$i;
   var $27=((((($26)>>>(0)))%(4))&-1);
   var $28=((106220+$27)|0);
   var $29=HEAP8[($28)];
   var $30=(($29)&(255));
   var $31=$25 & $30;
   var $32=(($31)|(0))!=0;
   if ($32) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $34=$1;
   var $35=$i;
   var $36=$h;
   var $37=(($36+20)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38+($35<<1))|0);
   var $40=HEAP16[(($39)>>1)];
   _mrb_symbol_value1182($3, $40);
   _mrb_ary_push($34, $ary, $3);
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $43=$i;
   var $44=((($43)+(1))|0);
   $i=$44;
   label = 4; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_singleton_methods($agg_result, $mrb, $recur, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $ary=sp;
   var $klass;
   var $3=(sp)+(12);
   $1=$mrb;
   $2=$recur;
   var $4=$1;
   var $5=_mrb_class1169($4, $obj);
   $klass=$5;
   var $6=$1;
   _mrb_ary_new($3, $6);
   var $7=$ary;
   var $8=$3;
   assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
   var $9=$klass;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $12=$klass;
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=$14 & 255;
   var $16=(($15)|(0))==12;
   if ($16) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $18=$1;
   var $19=$klass;
   _method_entry_loop($18, $19, $ary);
   var $20=$klass;
   var $21=(($20+20)|0);
   var $22=HEAP32[(($21)>>2)];
   $klass=$22;
   label = 4; break;
  case 4: 
   var $24=$2;
   var $25=(($24 << 24) >> 24)!=0;
   if ($25) { label = 5; break; } else { label = 13; break; }
  case 5: 
   label = 6; break;
  case 6: 
   var $28=$klass;
   var $29=(($28)|(0))!=0;
   if ($29) { label = 7; break; } else { var $45 = 0;label = 10; break; }
  case 7: 
   var $31=$klass;
   var $32=$31;
   var $33=HEAP32[(($32)>>2)];
   var $34=$33 & 255;
   var $35=(($34)|(0))==12;
   if ($35) { var $43 = 1;label = 9; break; } else { label = 8; break; }
  case 8: 
   var $37=$klass;
   var $38=$37;
   var $39=HEAP32[(($38)>>2)];
   var $40=$39 & 255;
   var $41=(($40)|(0))==11;
   var $43 = $41;label = 9; break;
  case 9: 
   var $43;
   var $45 = $43;label = 10; break;
  case 10: 
   var $45;
   if ($45) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $47=$1;
   var $48=$klass;
   _method_entry_loop($47, $48, $ary);
   var $49=$klass;
   var $50=(($49+20)|0);
   var $51=HEAP32[(($50)>>2)];
   $klass=$51;
   label = 6; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $54=$agg_result;
   var $55=$ary;
   assert(12 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($55)+(4))>>2)];HEAP32[((($54)+(8))>>2)]=HEAP32[((($55)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_methods($agg_result, $mrb, $recur, $obj, $flag) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$mrb;
   $2=$recur;
   $3=$flag;
   var $4=$2;
   var $5=(($4 << 24) >> 24)!=0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   var $8=$2;
   var $9=$1;
   var $10=_mrb_class1169($9, $obj);
   _class_instance_method_list($agg_result, $7, $8, $10, 0);
   label = 4; break;
  case 3: 
   var $12=$1;
   var $13=$2;
   _mrb_obj_singleton_methods($agg_result, $12, $13, $obj);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_methods_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $recur=sp;
 $1=$mrb;
 HEAP8[($recur)]=1;
 var $2=$1;
 var $3=_mrb_get_args($2, ((104136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$recur,tempInt));
 var $4=$1;
 var $5=HEAP8[($recur)];
 _mrb_obj_methods($agg_result, $4, $5, $self, 0);
 STACKTOP = sp;
 return;
}
function _mrb_false($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 _mrb_false_value1177($agg_result);
 STACKTOP = sp;
 return;
}
function _mrb_false_value1177($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=1;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_private_methods($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $recur=sp;
 $1=$mrb;
 HEAP8[($recur)]=1;
 var $2=$1;
 var $3=_mrb_get_args($2, ((104136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$recur,tempInt));
 var $4=$1;
 var $5=HEAP8[($recur)];
 _mrb_obj_methods($agg_result, $4, $5, $self, 2);
 STACKTOP = sp;
 return;
}
function _mrb_obj_protected_methods($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $recur=sp;
 $1=$mrb;
 HEAP8[($recur)]=1;
 var $2=$1;
 var $3=_mrb_get_args($2, ((104136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$recur,tempInt));
 var $4=$1;
 var $5=HEAP8[($recur)];
 _mrb_obj_methods($agg_result, $4, $5, $self, 4);
 STACKTOP = sp;
 return;
}
function _mrb_obj_public_methods($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $recur=sp;
 $1=$mrb;
 HEAP8[($recur)]=1;
 var $2=$1;
 var $3=_mrb_get_args($2, ((104136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$recur,tempInt));
 var $4=$1;
 var $5=HEAP8[($recur)];
 _mrb_obj_methods($agg_result, $4, $5, $self, 0);
 STACKTOP = sp;
 return;
}
function _mrb_f_raise($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 84)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a=sp;
   var $exc=(sp)+(24);
   var $argc;
   var $2=(sp)+(36);
   var $3=(sp)+(48);
   var $4=(sp)+(60);
   var $5=(sp)+(72);
   $1=$mrb;
   var $6=$1;
   var $7=(($a)|0);
   var $8=(($a+12)|0);
   var $9=_mrb_get_args($6, ((103540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$7,HEAP32[(((tempInt)+(4))>>2)]=$8,tempInt));
   $argc=$9;
   var $10=$argc;
   if ((($10)|(0))==0) {
    label = 2; break;
   }
   else if ((($10)|(0))==1) {
    label = 3; break;
   }
   else {
   label = 7; break;
   }
  case 2: 
   var $12=$1;
   var $13=$1;
   var $14=_mrb_class_get($13, ((103044)|0));
   _mrb_raise($12, $14, ((111152)|0));
   label = 8; break;
  case 3: 
   var $16=(($a+12)|0);
   var $17=$1;
   var $18=(($a)|0);
   _mrb_check_string_type($2, $17, $18);
   var $19=$16;
   var $20=$2;
   assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
   var $21=(($a+12)|0);
   var $22=(($21+8)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0))==0;
   if ($24) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $26=(($a+12)|0);
   var $27=(($26)|0);
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29)|(0))!=0;
   if ($30) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $argc=2;
   var $32=(($a)|0);
   var $33=$1;
   var $34=_mrb_class_get($33, ((103044)|0));
   var $35=$34;
   _mrb_obj_value1170($3, $35);
   var $36=$32;
   var $37=$3;
   assert(12 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];HEAP32[((($36)+(8))>>2)]=HEAP32[((($37)+(8))>>2)];
   label = 6; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $40=$1;
   var $41=$argc;
   var $42=(($a)|0);
   _mrb_make_exception($4, $40, $41, $42);
   var $43=$exc;
   var $44=$4;
   assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
   var $45=$1;
   var $46=(($exc)|0);
   var $47=$46;
   var $48=HEAP32[(($47)>>2)];
   var $49=$48;
   var $50=$1;
   var $51=_mrb_intern2($50, ((102276)|0), 6);
   var $52=$1;
   var $53=$1;
   var $54=(($53+8)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55+16)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57+20)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=$59;
   _mrb_voidp_value1178($5, $52, $60);
   _mrb_obj_iv_set($45, $49, $51, $5);
   var $61=$1;
   _mrb_exc_raise($61, $exc);
   label = 8; break;
  case 8: 
   _mrb_nil_value1179($agg_result);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_voidp_value1178($agg_result, $mrb, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $v=sp;
   $1=$mrb;
   $2=$p;
   label = 2; break;
  case 2: 
   var $4=(($v+8)|0);
   HEAP32[(($4)>>2)]=7;
   var $5=$2;
   var $6=(($v)|0);
   var $7=$6;
   HEAP32[(($7)>>2)]=$5;
   label = 3; break;
  case 3: 
   var $9=$agg_result;
   var $10=$v;
   assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value1179($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_remove_instance_variable($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $sym=sp;
   var $val=(sp)+(4);
   var $2=(sp)+(16);
   var $3=(sp)+(28);
   $1=$mrb;
   var $4=$1;
   var $5=_mrb_get_args($4, ((105376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$sym,tempInt));
   var $6=$1;
   var $7=HEAP16[(($sym)>>1)];
   _check_iv_name($6, $7);
   var $8=$1;
   var $9=HEAP16[(($sym)>>1)];
   _mrb_iv_remove($2, $8, $self, $9);
   var $10=$val;
   var $11=$2;
   assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
   var $12=(($val+8)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))==5;
   if ($14) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $16=$1;
   var $17=HEAP16[(($sym)>>1)];
   var $18=$1;
   var $19=HEAP16[(($sym)>>1)];
   _mrb_sym2str($3, $18, $19);
   _mrb_name_error($16, $17, ((101848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
   label = 3; break;
  case 3: 
   var $21=$agg_result;
   var $22=$val;
   assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _obj_respond_to($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 92)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $argv=sp;
   var $argc=(sp)+(4);
   var $mid=(sp)+(8);
   var $priv=(sp)+(20);
   var $id;
   var $rtm_id;
   var $respond_to_p;
   var $2=(sp)+(32);
   var $tmp=(sp)+(44);
   var $3=(sp)+(56);
   var $4=(sp)+(68);
   var $5=(sp)+(80);
   $1=$mrb;
   $respond_to_p=1;
   var $6=$1;
   var $7=_mrb_get_args($6, ((91784)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
   var $8=HEAP32[(($argv)>>2)];
   var $9=(($8)|0);
   var $10=$mid;
   var $11=$9;
   assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
   var $12=HEAP32[(($argc)>>2)];
   var $13=(($12)|(0)) > 1;
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $15=HEAP32[(($argv)>>2)];
   var $16=(($15+12)|0);
   var $17=$priv;
   var $18=$16;
   assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
   label = 4; break;
  case 3: 
   _mrb_nil_value1179($2);
   var $20=$priv;
   var $21=$2;
   assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
   label = 4; break;
  case 4: 
   var $23=(($mid+8)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))==4;
   if ($25) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $27=(($mid)|0);
   var $28=$27;
   var $29=HEAP16[(($28)>>1)];
   $id=$29;
   label = 16; break;
  case 6: 
   var $31=(($mid+8)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)|(0))==16;
   if ($33) { label = 11; break; } else { label = 7; break; }
  case 7: 
   var $35=$1;
   _mrb_check_string_type($3, $35, $mid);
   var $36=$tmp;
   var $37=$3;
   assert(12 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];HEAP32[((($36)+(8))>>2)]=HEAP32[((($37)+(8))>>2)];
   var $38=(($tmp+8)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39)|(0))==0;
   if ($40) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $42=(($tmp)|0);
   var $43=$42;
   var $44=HEAP32[(($43)>>2)];
   var $45=(($44)|(0))!=0;
   if ($45) { label = 10; break; } else { label = 9; break; }
  case 9: 
   var $47=$1;
   _mrb_inspect($4, $47, $mid);
   var $48=$tmp;
   var $49=$4;
   assert(12 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($49)+(4))>>2)];HEAP32[((($48)+(8))>>2)]=HEAP32[((($49)+(8))>>2)];
   var $50=$1;
   var $51=$1;
   var $52=_mrb_class_get($51, ((100592)|0));
   _mrb_raisef($50, $52, ((101364)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($tmp)+(8))>>2)],tempInt));
   label = 10; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $55=$1;
   _mrb_check_intern_str($5, $55, $mid);
   var $56=$tmp;
   var $57=$5;
   assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($57)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($57)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($57)+(8))>>2)];
   var $58=(($tmp+8)|0);
   var $59=HEAP32[(($58)>>2)];
   var $60=(($59)|(0))==0;
   if ($60) { label = 12; break; } else { label = 14; break; }
  case 12: 
   var $62=(($tmp)|0);
   var $63=$62;
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64)|(0))!=0;
   if ($65) { label = 14; break; } else { label = 13; break; }
  case 13: 
   $respond_to_p=0;
   label = 15; break;
  case 14: 
   var $68=(($tmp)|0);
   var $69=$68;
   var $70=HEAP16[(($69)>>1)];
   $id=$70;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $73=$respond_to_p;
   var $74=(($73 << 24) >> 24)!=0;
   if ($74) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $76=$1;
   var $77=$id;
   var $78=(($priv+8)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79)|(0))!=0;
   var $81=$80 ^ 1;
   var $82=(($81)&(1));
   var $83=_basic_obj_respond_to($76, $self, $77, $82);
   $respond_to_p=$83;
   label = 18; break;
  case 18: 
   var $85=$respond_to_p;
   var $86=(($85 << 24) >> 24)!=0;
   if ($86) { label = 22; break; } else { label = 19; break; }
  case 19: 
   var $88=$1;
   var $89=_mrb_intern2($88, ((100868)|0), 19);
   $rtm_id=$89;
   var $90=$1;
   var $91=$rtm_id;
   var $92=(($priv+8)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=(($93)|(0))!=0;
   var $95=$94 ^ 1;
   var $96=(($95)&(1));
   var $97=_basic_obj_respond_to($90, $self, $91, $96);
   var $98=(($97 << 24) >> 24)!=0;
   if ($98) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $100=$1;
   var $101=$rtm_id;
   var $102=HEAP32[(($argc)>>2)];
   var $103=HEAP32[(($argv)>>2)];
   _mrb_funcall_argv($agg_result, $100, $self, $101, $102, $103);
   label = 23; break;
  case 21: 
   label = 22; break;
  case 22: 
   var $106=$respond_to_p;
   _mrb_bool_value1174($agg_result, $106);
   label = 23; break;
  case 23: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _basic_obj_respond_to($mrb, $obj, $id, $pub) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 var $3;
 $1=$mrb;
 $2=$id;
 $3=$pub;
 var $4=$1;
 var $5=$2;
 var $6=_mrb_respond_to($4, $obj, $5);
 STACKTOP = sp;
 return $6;
}
function _mrb_obj_singleton_methods_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $recur=sp;
 $1=$mrb;
 HEAP8[($recur)]=1;
 var $2=$1;
 var $3=_mrb_get_args($2, ((104136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$recur,tempInt));
 var $4=$1;
 var $5=HEAP8[($recur)];
 _mrb_obj_singleton_methods($agg_result, $4, $5, $self);
 STACKTOP = sp;
 return;
}
function _mrb_init_kernel($mrb) {
 var label = 0;
 var $1;
 var $krn;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_define_module($2, ((100572)|0));
 var $4=$1;
 var $5=(($4+96)|0);
 HEAP32[(($5)>>2)]=$3;
 $krn=$3;
 var $6=$1;
 var $7=$krn;
 _mrb_define_class_method($6, $7, ((100080)|0), 122, 0);
 var $8=$1;
 var $9=$krn;
 _mrb_define_class_method($8, $9, ((99800)|0), 18, 0);
 var $10=$1;
 var $11=$krn;
 _mrb_define_class_method($10, $11, ((99440)|0), 122, 0);
 var $12=$1;
 var $13=$krn;
 _mrb_define_class_method($12, $13, ((98972)|0), 62, 4096);
 var $14=$1;
 var $15=$krn;
 _mrb_define_method($14, $15, ((98412)|0), 570, 0);
 var $16=$1;
 var $17=$krn;
 _mrb_define_method($16, $17, ((98092)|0), 188, 262144);
 var $18=$1;
 var $19=$krn;
 _mrb_define_method($18, $19, ((97828)|0), 110, 262144);
 var $20=$1;
 var $21=$krn;
 _mrb_define_method($20, $21, ((97472)|0), 620, 262144);
 var $22=$1;
 var $23=$krn;
 _mrb_define_method($22, $23, ((97200)|0), 562, 0);
 var $24=$1;
 var $25=$krn;
 _mrb_define_method($24, $25, ((96864)|0), 550, 4096);
 var $26=$1;
 var $27=$krn;
 _mrb_define_method($26, $27, ((100080)|0), 122, 0);
 var $28=$1;
 var $29=$krn;
 _mrb_define_method($28, $29, ((96384)|0), 594, 0);
 var $30=$1;
 var $31=$krn;
 _mrb_define_method($30, $31, ((96128)|0), 58, 0);
 var $32=$1;
 var $33=$krn;
 _mrb_define_method($32, $33, ((95960)|0), 448, 0);
 var $34=$1;
 var $35=$krn;
 _mrb_define_method($34, $35, ((95748)|0), 188, 262144);
 var $36=$1;
 var $37=$krn;
 _mrb_define_method($36, $37, ((95536)|0), 188, 262144);
 var $38=$1;
 var $39=$krn;
 _mrb_define_method($38, $39, ((95252)|0), 470, 4096);
 var $40=$1;
 var $41=$krn;
 _mrb_define_method($40, $41, ((99800)|0), 18, 0);
 var $42=$1;
 var $43=$krn;
 _mrb_define_method($42, $43, ((95080)|0), 172, 0);
 var $44=$1;
 var $45=$krn;
 _mrb_define_method($44, $45, ((94876)|0), 592, 262144);
 var $46=$1;
 var $47=$krn;
 _mrb_define_method($46, $47, ((94512)|0), 532, 0);
 var $48=$1;
 var $49=$krn;
 _mrb_define_method($48, $49, ((94276)|0), 456, 4096);
 var $50=$1;
 var $51=$krn;
 _mrb_define_method($50, $51, ((93900)|0), 292, 262144);
 var $52=$1;
 var $53=$krn;
 _mrb_define_method($52, $53, ((93608)|0), 364, 262144);
 var $54=$1;
 var $55=$krn;
 _mrb_define_method($54, $55, ((93320)|0), 82, 262144);
 var $56=$1;
 var $57=$krn;
 _mrb_define_method($56, $57, ((93088)|0), 230, 524288);
 var $58=$1;
 var $59=$krn;
 _mrb_define_method($58, $59, ((92844)|0), 494, 0);
 var $60=$1;
 var $61=$krn;
 _mrb_define_method($60, $61, ((92664)|0), 662, 262144);
 var $62=$1;
 var $63=$krn;
 _mrb_define_method($62, $63, ((99440)|0), 122, 0);
 var $64=$1;
 var $65=$krn;
 _mrb_define_method($64, $65, ((92484)|0), 662, 262144);
 var $66=$1;
 var $67=$krn;
 _mrb_define_method($66, $67, ((92296)|0), 300, 8192);
 var $68=$1;
 var $69=$krn;
 _mrb_define_method($68, $69, ((92032)|0), 460, 0);
 var $70=$1;
 var $71=$krn;
 _mrb_define_method($70, $71, ((91772)|0), 562, 0);
 var $72=$1;
 var $73=$krn;
 _mrb_define_method($72, $73, ((91328)|0), 686, 8192);
 var $74=$1;
 var $75=$krn;
 _mrb_define_method($74, $75, ((91080)|0), 608, 8192);
 var $76=$1;
 var $77=$krn;
 _mrb_define_method($76, $77, ((90820)|0), 664, 8192);
 var $78=$1;
 var $79=$krn;
 _mrb_define_method($78, $79, ((98972)|0), 62, 4096);
 var $80=$1;
 var $81=$krn;
 _mrb_define_method($80, $81, ((90564)|0), 528, 262144);
 var $82=$1;
 var $83=$krn;
 _mrb_define_method($82, $83, ((90384)|0), 684, 4096);
 var $84=$1;
 var $85=$krn;
 _mrb_define_method($84, $85, ((90100)|0), 550, 4096);
 var $86=$1;
 var $87=$krn;
 _mrb_define_method($86, $87, ((89964)|0), 204, 8192);
 var $88=$1;
 var $89=$krn;
 _mrb_define_method($88, $89, ((105424)|0), 392, 0);
 var $90=$1;
 var $91=$1;
 var $92=(($91+44)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=$1;
 var $95=(($94+96)|0);
 var $96=HEAP32[(($95)>>2)];
 _mrb_include_module($90, $93, $96);
 var $97=$1;
 var $98=$1;
 var $99=(($98+52)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=$1;
 var $102=_mrb_intern2($101, ((95960)|0), 3);
 var $103=$1;
 var $104=_mrb_intern2($103, ((96128)|0), 5);
 _mrb_alias_method($97, $100, $102, $104);
 return;
}
function _mrb_f_block_given_p_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ci;
   var $bp;
   var $given_p;
   $1=$mrb;
   var $2=$1;
   var $3=(($2+8)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4+16)|0);
   var $6=HEAP32[(($5)>>2)];
   $ci=$6;
   var $7=$1;
   var $8=(($7+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=$ci;
   var $13=(($12+8)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($11+((($14)*(12))&-1))|0);
   var $16=(($15+12)|0);
   $bp=$16;
   var $17=$ci;
   var $18=((($17)-(44))|0);
   $ci=$18;
   var $19=$ci;
   var $20=$1;
   var $21=(($20+8)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+20)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($19)>>>(0)) <= (($24)>>>(0));
   if ($25) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $given_p=0;
   label = 16; break;
  case 3: 
   var $28=$ci;
   var $29=(($28+4)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30+20)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)|(0))!=0;
   if ($33) { label = 4; break; } else { label = 10; break; }
  case 4: 
   var $35=$ci;
   var $36=(($35+4)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37+20)|0);
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39+12)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($41)|(0))!=0;
   if ($42) { label = 5; break; } else { label = 10; break; }
  case 5: 
   var $44=$ci;
   var $45=(($44+4)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($46+20)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($48+12)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=$1;
   var $52=(($51+8)|0);
   var $53=HEAP32[(($52)>>2)];
   var $54=(($53+8)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($50)|(0))==(($55)|(0));
   if ($56) { var $86 = 1;label = 9; break; } else { label = 6; break; }
  case 6: 
   var $58=$ci;
   var $59=(($58+4)|0);
   var $60=HEAP32[(($59)>>2)];
   var $61=(($60+20)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=(($62+12)|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=(($64+12)|0);
   var $66=(($65+8)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67)|(0))==0;
   if ($68) { label = 7; break; } else { var $84 = 0;label = 8; break; }
  case 7: 
   var $70=$ci;
   var $71=(($70+4)|0);
   var $72=HEAP32[(($71)>>2)];
   var $73=(($72+20)|0);
   var $74=HEAP32[(($73)>>2)];
   var $75=(($74+12)|0);
   var $76=HEAP32[(($75)>>2)];
   var $77=(($76+12)|0);
   var $78=(($77)|0);
   var $79=$78;
   var $80=HEAP32[(($79)>>2)];
   var $81=(($80)|(0))!=0;
   var $82=$81 ^ 1;
   var $84 = $82;label = 8; break;
  case 8: 
   var $84;
   var $86 = $84;label = 9; break;
  case 9: 
   var $86;
   var $87=$86 ^ 1;
   var $88=(($87)&(1));
   var $89=(($88) & 255);
   $given_p=$89;
   label = 15; break;
  case 10: 
   var $91=$ci;
   var $92=(($91+16)|0);
   var $93=HEAP32[(($92)>>2)];
   var $94=(($93)|(0)) > 0;
   if ($94) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $96=$ci;
   var $97=(($96+16)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=$bp;
   var $100=(($99+((($98)*(12))&-1))|0);
   $bp=$100;
   label = 12; break;
  case 12: 
   var $102=$bp;
   var $103=(($102+8)|0);
   var $104=HEAP32[(($103)>>2)];
   var $105=(($104)|(0))==0;
   if ($105) { label = 13; break; } else { var $114 = 0;label = 14; break; }
  case 13: 
   var $107=$bp;
   var $108=(($107)|0);
   var $109=$108;
   var $110=HEAP32[(($109)>>2)];
   var $111=(($110)|(0))!=0;
   var $112=$111 ^ 1;
   var $114 = $112;label = 14; break;
  case 14: 
   var $114;
   var $115=$114 ^ 1;
   var $116=(($115)&(1));
   var $117=(($116) & 255);
   $given_p=$117;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $120=$given_p;
   _mrb_bool_value1174($agg_result, $120);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_equal_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $arg=sp;
 var $eql_p;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((89612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$arg,tempInt));
 var $4=$1;
 var $5=_mrb_obj_equal($4, $self, $arg);
 $eql_p=$5;
 var $6=$eql_p;
 _mrb_bool_value1174($agg_result, $6);
 STACKTOP = sp;
 return;
}
function _mrb_obj_not_equal_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $arg=sp;
 var $eql_p;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((89612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$arg,tempInt));
 var $4=$1;
 var $5=_mrb_equal($4, $self, $arg);
 $eql_p=$5;
 var $6=$eql_p;
 var $7=(($6 << 24) >> 24)!=0;
 var $8=$7 ^ 1;
 var $9=(($8)&(1));
 var $10=(($9) & 255);
 _mrb_bool_value1174($agg_result, $10);
 STACKTOP = sp;
 return;
}
function _mrb_equal_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $arg=sp;
 var $equal_p;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((89612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$arg,tempInt));
 var $4=$1;
 var $5=_mrb_equal($4, $self, $arg);
 $equal_p=$5;
 var $6=$equal_p;
 _mrb_bool_value1174($agg_result, $6);
 STACKTOP = sp;
 return;
}
function _mrb_obj_id_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=_mrb_obj_id($self);
 _mrb_fixnum_value1173($agg_result, $2);
 STACKTOP = sp;
 return;
}
function _mrb_f_send($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $name=sp;
 var $block=(sp)+(4);
 var $argv=(sp)+(16);
 var $argc=(sp)+(20);
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((89864)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$name,HEAP32[(((tempInt)+(4))>>2)]=$argv,HEAP32[(((tempInt)+(8))>>2)]=$argc,HEAP32[(((tempInt)+(12))>>2)]=$block,tempInt));
 var $4=$1;
 var $5=HEAP16[(($name)>>1)];
 var $6=HEAP32[(($argc)>>2)];
 var $7=HEAP32[(($argv)>>2)];
 _mrb_funcall_with_block($agg_result, $4, $self, $5, $6, $7, $block);
 STACKTOP = sp;
 return;
}
function _mrb_obj_class_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_obj_class($2, $self);
 var $4=$3;
 _mrb_obj_value1170($agg_result, $4);
 STACKTOP = sp;
 return;
}
function _obj_is_instance_of($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $arg=sp;
 var $instance_of_p;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((89612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$arg,tempInt));
 var $4=$1;
 var $5=(($arg)|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 var $9=_mrb_obj_is_instance_of($4, $self, $8);
 $instance_of_p=$9;
 var $10=$instance_of_p;
 _mrb_bool_value1174($agg_result, $10);
 STACKTOP = sp;
 return;
}
function _mrb_symbol_value1182($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=4;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP16[(($6)>>1)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_float_value1242($agg_result, $mrb, $f) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $v=sp;
   $1=$mrb;
   $2=$f;
   label = 2; break;
  case 2: 
   var $4=(($v+8)|0);
   HEAP32[(($4)>>2)]=6;
   var $5=$2;
   var $6=(($v)|0);
   var $7=$6;
   (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($7)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($7)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 3; break;
  case 3: 
   var $9=$agg_result;
   var $10=$v;
   assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_to_flo($mrb, $val) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $2=$mrb;
   var $3=(($val+8)|0);
   var $4=HEAP32[(($3)>>2)];
   if ((($4)|(0))==3) {
    label = 2; break;
   }
   else if ((($4)|(0))==6) {
    label = 3; break;
   }
   else {
   label = 4; break;
   }
  case 2: 
   var $6=(($val)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0));
   $1=$9;
   label = 6; break;
  case 3: 
   label = 5; break;
  case 4: 
   var $12=$2;
   var $13=$2;
   var $14=_mrb_class_get($13, ((100448)|0));
   _mrb_raise($12, $14, ((96812)|0));
   label = 5; break;
  case 5: 
   var $16=(($val)|0);
   var $17=$16;
   var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($17)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($17)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   $1=$18;
   label = 6; break;
  case 6: 
   var $20=$1;
   STACKTOP = sp;
   return $20;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_flo_to_str($agg_result, $mrb, $flo, $max_digit) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 108)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $flo; $flo = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($flo)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($flo)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($flo)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $result=sp;
   var $n;
   var $3=(sp)+(12);
   var $4=(sp)+(24);
   var $5=(sp)+(36);
   var $digit;
   var $m;
   var $exp;
   var $e;
   var $s=(sp)+(48);
   var $c;
   var $weight;
   var $6=(sp)+(96);
   $1=$mrb;
   $2=$max_digit;
   var $7=$2;
   var $8=(($7)|(0)) > 40;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$1;
   var $11=$1;
   var $12=_mrb_class_get($11, ((104760)|0));
   _mrb_raise($10, $12, ((105156)|0));
   label = 6; break;
  case 3: 
   var $14=(($flo+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))==6;
   if ($16) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $18=$1;
   var $19=$1;
   var $20=_mrb_class_get($19, ((100448)|0));
   _mrb_raise($18, $20, ((96812)|0));
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $23=(($flo)|0);
   var $24=$23;
   var $25=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($24)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($24)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   $n=$25;
   var $26=$n;
   var $27=___fpclassifyf($26);
   var $28=(($27)|(0))==0;
   if ($28) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $30=$1;
   _mrb_str_new($3, $30, ((94236)|0), 3);
   var $31=$result;
   var $32=$3;
   assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
   label = 43; break;
  case 8: 
   var $34=$n;
   var $35=___fpclassifyf($34);
   var $36=(($35)|(0))==1;
   if ($36) { label = 9; break; } else { label = 13; break; }
  case 9: 
   var $38=$n;
   var $39=$38 < 0;
   if ($39) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $41=$1;
   _mrb_str_new($4, $41, ((91756)|0), 4);
   var $42=$result;
   var $43=$4;
   assert(12 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];HEAP32[((($42)+(8))>>2)]=HEAP32[((($43)+(8))>>2)];
   label = 12; break;
  case 11: 
   var $45=$1;
   _mrb_str_new($5, $45, ((89588)|0), 3);
   var $46=$result;
   var $47=$5;
   assert(12 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($46)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];
   label = 12; break;
  case 12: 
   label = 42; break;
  case 13: 
   $e=0;
   var $50=(($s)|0);
   $c=$50;
   var $51=$n;
   var $52=$51 < 0;
   if ($52) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $54=$n;
   var $55=(-$54);
   $n=$55;
   var $56=$c;
   var $57=(($56+1)|0);
   $c=$57;
   HEAP8[($56)]=45;
   label = 15; break;
  case 15: 
   var $59=$n;
   var $60=_log10($59);
   var $61=(($60)&-1);
   $exp=$61;
   var $62=$exp;
   var $63=(($62)|(0)) < 0;
   if ($63) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $65=$exp;
   var $66=(((-$65))|0);
   var $70 = $66;label = 18; break;
  case 17: 
   var $68=$exp;
   var $70 = $68;label = 18; break;
  case 18: 
   var $70;
   var $71=$2;
   var $72=(($70)|(0)) > (($71)|(0));
   if ($72) { label = 19; break; } else { label = 22; break; }
  case 19: 
   $e=1;
   var $74=$exp;
   $m=$74;
   var $75=$m;
   var $76=(($75)|(0)) < 0;
   if ($76) { label = 20; break; } else { label = 21; break; }
  case 20: 
   var $78=$m;
   var $79=((($78)-(1))|0);
   $m=$79;
   label = 21; break;
  case 21: 
   var $81=$n;
   var $82=$m;
   var $83=(($82)|(0));
   var $84=Math.pow(10, $83);
   var $85=($81)/($84);
   $n=$85;
   $m=0;
   label = 25; break;
  case 22: 
   var $87=$exp;
   $m=$87;
   var $88=$m;
   var $89=(($88)|(0)) < 0;
   if ($89) { label = 23; break; } else { label = 24; break; }
  case 23: 
   $m=0;
   label = 24; break;
  case 24: 
   label = 25; break;
  case 25: 
   label = 26; break;
  case 26: 
   var $94=$2;
   var $95=(($94)|(0)) >= 0;
   if ($95) { label = 27; break; } else { label = 34; break; }
  case 27: 
   var $97=$m;
   var $98=(($97)|(0));
   var $99=Math.pow(10, $98);
   $weight=$99;
   var $100=$n;
   var $101=$weight;
   var $102=($100)/($101);
   var $103=($102)+(1.1920928955078125e-7);
   var $104=Math.floor($103);
   var $105=(($104)&-1);
   $digit=$105;
   var $106=$digit;
   var $107=((($106)+(48))|0);
   var $108=(($107) & 255);
   var $109=$c;
   var $110=(($109+1)|0);
   $c=$110;
   HEAP8[($109)]=$108;
   var $111=$digit;
   var $112=(($111)|(0));
   var $113=$weight;
   var $114=($112)*($113);
   var $115=$n;
   var $116=($115)-($114);
   $n=$116;
   var $117=$2;
   var $118=((($117)-(1))|0);
   $2=$118;
   var $119=$m;
   var $120=((($119)-(1))|0);
   $m=$120;
   var $121=(($119)|(0))==0;
   if ($121) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $123=$c;
   var $124=(($123+1)|0);
   $c=$124;
   HEAP8[($123)]=46;
   label = 33; break;
  case 29: 
   var $126=$m;
   var $127=(($126)|(0)) < -1;
   if ($127) { label = 30; break; } else { label = 32; break; }
  case 30: 
   var $129=$n;
   var $130=$129 < 1.1920928955078125e-7;
   if ($130) { label = 31; break; } else { label = 32; break; }
  case 31: 
   label = 34; break;
  case 32: 
   label = 33; break;
  case 33: 
   label = 26; break;
  case 34: 
   var $135=$e;
   var $136=(($135)|(0))!=0;
   if ($136) { label = 35; break; } else { label = 41; break; }
  case 35: 
   var $138=$c;
   var $139=(($138+1)|0);
   $c=$139;
   HEAP8[($138)]=101;
   var $140=$exp;
   var $141=(($140)|(0)) > 0;
   if ($141) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $143=$c;
   var $144=(($143+1)|0);
   $c=$144;
   HEAP8[($143)]=43;
   label = 38; break;
  case 37: 
   var $146=$c;
   var $147=(($146+1)|0);
   $c=$147;
   HEAP8[($146)]=45;
   var $148=$exp;
   var $149=(((-$148))|0);
   $exp=$149;
   label = 38; break;
  case 38: 
   var $151=$exp;
   var $152=(($151)|(0)) >= 100;
   if ($152) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $154=$1;
   var $155=$1;
   var $156=_mrb_class_get($155, ((104760)|0));
   _mrb_raise($154, $156, ((88376)|0));
   label = 40; break;
  case 40: 
   var $158=$exp;
   var $159=((((($158)|(0)))/(10))&-1);
   var $160=((($159)+(48))|0);
   var $161=(($160) & 255);
   var $162=$c;
   var $163=(($162+1)|0);
   $c=$163;
   HEAP8[($162)]=$161;
   var $164=$exp;
   var $165=((((($164)|(0)))%(10))&-1);
   var $166=((($165)+(48))|0);
   var $167=(($166) & 255);
   var $168=$c;
   var $169=(($168+1)|0);
   $c=$169;
   HEAP8[($168)]=$167;
   label = 41; break;
  case 41: 
   var $171=$c;
   HEAP8[($171)]=0;
   var $172=$1;
   var $173=(($s)|0);
   var $174=$c;
   var $175=(($s)|0);
   var $176=$174;
   var $177=$175;
   var $178=((($176)-($177))|0);
   _mrb_str_new($6, $172, $173, $178);
   var $179=$result;
   var $180=$6;
   assert(12 % 1 === 0);HEAP32[(($179)>>2)]=HEAP32[(($180)>>2)];HEAP32[((($179)+(4))>>2)]=HEAP32[((($180)+(4))>>2)];HEAP32[((($179)+(8))>>2)]=HEAP32[((($180)+(8))>>2)];
   label = 42; break;
  case 42: 
   label = 43; break;
  case 43: 
   var $183=$agg_result;
   var $184=$result;
   assert(12 % 1 === 0);HEAP32[(($183)>>2)]=HEAP32[(($184)>>2)];HEAP32[((($183)+(4))>>2)]=HEAP32[((($184)+(4))>>2)];HEAP32[((($183)+(8))>>2)]=HEAP32[((($184)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_mul($agg_result, $mrb, $x, $y) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $y; $y = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($y)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($y)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($y)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a;
   var $b;
   var $c;
   $1=$mrb;
   var $2=(($x)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   $a=$4;
   var $5=$a;
   var $6=(($5)|(0))==0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$agg_result;
   var $9=$x;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   label = 14; break;
  case 3: 
   var $11=(($y+8)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))==3;
   if ($13) { label = 4; break; } else { label = 13; break; }
  case 4: 
   var $15=(($y)|0);
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   $b=$17;
   var $18=$a;
   var $19=(($18)|(0)) < 32768;
   if ($19) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $21=$a;
   var $22=(($21)|(0)) >= -32768;
   if ($22) { label = 6; break; } else { label = 9; break; }
  case 6: 
   var $24=$b;
   var $25=(($24)|(0)) < 32768;
   if ($25) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $27=$b;
   var $28=(($27)|(0)) >= -32768;
   if ($28) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $30=$a;
   var $31=$b;
   var $32=(Math.imul($30,$31)|0);
   _mrb_fixnum_value1243($agg_result, $32);
   label = 14; break;
  case 9: 
   var $34=$a;
   var $35=$b;
   var $36=(Math.imul($34,$35)|0);
   $c=$36;
   var $37=$a;
   var $38=(($37)|(0))!=0;
   if ($38) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $40=$c;
   var $41=$a;
   var $42=((((($40)|(0)))/((($41)|(0))))&-1);
   var $43=$b;
   var $44=(($42)|(0))!=(($43)|(0));
   if ($44) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $46=$1;
   var $47=$a;
   var $48=(($47)|(0));
   var $49=$b;
   var $50=(($49)|(0));
   var $51=($48)*($50);
   _mrb_float_value1242($agg_result, $46, $51);
   label = 14; break;
  case 12: 
   var $53=$c;
   _mrb_fixnum_value1243($agg_result, $53);
   label = 14; break;
  case 13: 
   var $55=$1;
   var $56=$a;
   var $57=(($56)|(0));
   var $58=$1;
   var $59=_mrb_to_flo($58, $y);
   var $60=($57)*($59);
   _mrb_float_value1242($agg_result, $55, $60);
   label = 14; break;
  case 14: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_value1243($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_flo_to_fixnum($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $z;
   var $d;
   $1=$mrb;
   var $2=(($x+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|(0))==6;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$1;
   var $7=$1;
   var $8=_mrb_class_get($7, ((100448)|0));
   _mrb_raise($6, $8, ((96812)|0));
   $z=0;
   label = 8; break;
  case 3: 
   var $10=(($x)|0);
   var $11=$10;
   var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($11)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($11)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   $d=$12;
   var $13=$d;
   var $14=___fpclassifyf($13);
   var $15=(($14)|(0))==1;
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $17=$1;
   var $18=$1;
   var $19=_mrb_class_get($18, ((87384)|0));
   var $20=$d;
   var $21=$20 < 0;
   var $22=$21 ? (((86592)|0)) : (((105968)|0));
   _mrb_raise($17, $19, $22);
   label = 5; break;
  case 5: 
   var $24=$d;
   var $25=___fpclassifyf($24);
   var $26=(($25)|(0))==0;
   if ($26) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $28=$1;
   var $29=$1;
   var $30=_mrb_class_get($29, ((87384)|0));
   _mrb_raise($28, $30, ((94236)|0));
   label = 7; break;
  case 7: 
   var $32=$d;
   var $33=(($32)&-1);
   $z=$33;
   label = 8; break;
  case 8: 
   var $35=$z;
   _mrb_fixnum_value1243($agg_result, $35);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_plus($agg_result, $mrb, $x, $y) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $y; $y = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($y)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($y)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($y)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a;
   var $b;
   var $c;
   $1=$mrb;
   var $2=(($x)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   $a=$4;
   var $5=$a;
   var $6=(($5)|(0))==0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$agg_result;
   var $9=$y;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   label = 9; break;
  case 3: 
   var $11=(($y+8)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))==3;
   if ($13) { label = 4; break; } else { label = 8; break; }
  case 4: 
   var $15=(($y)|0);
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   $b=$17;
   var $18=$a;
   var $19=$b;
   var $20=((($18)+($19))|0);
   $c=$20;
   var $21=$a;
   var $22=(($21)|(0)) < 0;
   var $23=(($22)&(1));
   var $24=$b;
   var $25=(($24)|(0)) < 0;
   var $26=(($25)&(1));
   var $27=$23 ^ $26;
   var $28=(($27)|(0))==0;
   if ($28) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $30=$a;
   var $31=(($30)|(0)) < 0;
   var $32=(($31)&(1));
   var $33=$c;
   var $34=(($33)|(0)) < 0;
   var $35=(($34)&(1));
   var $36=(($32)|(0))!=(($35)|(0));
   if ($36) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $38=$1;
   var $39=$a;
   var $40=(($39)|(0));
   var $41=$b;
   var $42=(($41)|(0));
   var $43=($40)+($42);
   _mrb_float_value1242($agg_result, $38, $43);
   label = 9; break;
  case 7: 
   var $45=$c;
   _mrb_fixnum_value1243($agg_result, $45);
   label = 9; break;
  case 8: 
   var $47=$1;
   var $48=$a;
   var $49=(($48)|(0));
   var $50=$1;
   var $51=_mrb_to_flo($50, $y);
   var $52=($49)+($51);
   _mrb_float_value1242($agg_result, $47, $52);
   label = 9; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_minus($agg_result, $mrb, $x, $y) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $y; $y = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($y)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($y)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($y)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $a;
   var $b;
   var $c;
   $1=$mrb;
   var $2=(($x)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   $a=$4;
   var $5=(($y+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==3;
   if ($7) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $9=(($y)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   $b=$11;
   var $12=$a;
   var $13=$b;
   var $14=((($12)-($13))|0);
   $c=$14;
   var $15=$a;
   var $16=(($15)|(0)) < 0;
   var $17=(($16)&(1));
   var $18=$b;
   var $19=(($18)|(0)) < 0;
   var $20=(($19)&(1));
   var $21=$17 ^ $20;
   var $22=(($21)|(0))!=0;
   if ($22) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $24=$a;
   var $25=(($24)|(0)) < 0;
   var $26=(($25)&(1));
   var $27=$c;
   var $28=(($27)|(0)) < 0;
   var $29=(($28)&(1));
   var $30=(($26)|(0))!=(($29)|(0));
   if ($30) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $32=$1;
   var $33=$a;
   var $34=(($33)|(0));
   var $35=$b;
   var $36=(($35)|(0));
   var $37=($34)-($36);
   _mrb_float_value1242($agg_result, $32, $37);
   label = 7; break;
  case 5: 
   var $39=$c;
   _mrb_fixnum_value1243($agg_result, $39);
   label = 7; break;
  case 6: 
   var $41=$1;
   var $42=$a;
   var $43=(($42)|(0));
   var $44=$1;
   var $45=_mrb_to_flo($44, $y);
   var $46=($43)-($45);
   _mrb_float_value1242($agg_result, $41, $46);
   label = 7; break;
  case 7: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_to_str($agg_result, $mrb, $x, $base) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $buf=sp;
   var $b;
   var $val;
   var $3=(sp)+(36);
   $1=$mrb;
   $2=$base;
   var $4=(($buf)|0);
   var $5=(($4+33)|0);
   $b=$5;
   var $6=(($x)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   $val=$8;
   var $9=$2;
   var $10=(($9)|(0)) < 2;
   if ($10) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $12=$2;
   var $13=36 < (($12)|(0));
   if ($13) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $15=$1;
   var $16=$1;
   var $17=_mrb_class_get($16, ((105360)|0));
   var $18=$2;
   _mrb_fixnum_value1243($3, $18);
   _mrb_raisef($15, $17, ((104576)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
   label = 4; break;
  case 4: 
   var $20=$val;
   var $21=(($20)|(0))==0;
   if ($21) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $23=$b;
   var $24=((($23)-(1))|0);
   $b=$24;
   HEAP8[($24)]=48;
   label = 16; break;
  case 6: 
   var $26=$val;
   var $27=(($26)|(0)) < 0;
   if ($27) { label = 7; break; } else { label = 11; break; }
  case 7: 
   label = 8; break;
  case 8: 
   var $30=$val;
   var $31=$2;
   var $32=((((($30)|(0)))%((($31)|(0))))&-1);
   var $33=(((-$32))|0);
   var $34=((75064+$33)|0);
   var $35=HEAP8[($34)];
   var $36=$b;
   var $37=((($36)-(1))|0);
   $b=$37;
   HEAP8[($37)]=$35;
   label = 9; break;
  case 9: 
   var $39=$2;
   var $40=$val;
   var $41=((((($40)|(0)))/((($39)|(0))))&-1);
   $val=$41;
   var $42=(($41)|(0))!=0;
   if ($42) { label = 8; break; } else { label = 10; break; }
  case 10: 
   var $44=$b;
   var $45=((($44)-(1))|0);
   $b=$45;
   HEAP8[($45)]=45;
   label = 15; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $48=$val;
   var $49=$2;
   var $50=((((($48)|(0)))%((($49)|(0))))&-1);
   var $51=((75064+$50)|0);
   var $52=HEAP8[($51)];
   var $53=$b;
   var $54=((($53)-(1))|0);
   $b=$54;
   HEAP8[($54)]=$52;
   label = 13; break;
  case 13: 
   var $56=$2;
   var $57=$val;
   var $58=((((($57)|(0)))/((($56)|(0))))&-1);
   $val=$58;
   var $59=(($58)|(0))!=0;
   if ($59) { label = 12; break; } else { label = 14; break; }
  case 14: 
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $63=$1;
   var $64=$b;
   var $65=(($buf)|0);
   var $66=(($65+33)|0);
   var $67=$b;
   var $68=$66;
   var $69=$67;
   var $70=((($68)-($69))|0);
   _mrb_str_new($agg_result, $63, $64, $70);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_init_numeric($mrb) {
 var label = 0;
 var $1;
 var $numeric;
 var $integer;
 var $fixnum;
 var $fl;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=(($3+44)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_mrb_define_class($2, ((104128)|0), $5);
 $numeric=$6;
 var $7=$1;
 var $8=$numeric;
 var $9=$1;
 var $10=_mrb_class_get($9, ((103528)|0));
 _mrb_include_module($7, $8, $10);
 var $11=$1;
 var $12=$numeric;
 _mrb_define_method($11, $12, ((103040)|0), 72, 262144);
 var $13=$1;
 var $14=$numeric;
 _mrb_define_method($13, $14, ((102624)|0), 486, 262144);
 var $15=$1;
 var $16=$numeric;
 _mrb_define_method($15, $16, ((102272)|0), 60, 262144);
 var $17=$1;
 var $18=$numeric;
 _mrb_define_method($17, $18, ((101844)|0), 404, 262144);
 var $19=$1;
 var $20=$numeric;
 _mrb_define_method($19, $20, ((101360)|0), 404, 262144);
 var $21=$1;
 var $22=$numeric;
 _mrb_define_method($21, $22, ((100864)|0), 78, 0);
 var $23=$1;
 var $24=$numeric;
 _mrb_define_method($23, $24, ((100568)|0), 306, 262144);
 var $25=$1;
 var $26=$numeric;
 var $27=_mrb_define_class($25, ((100072)|0), $26);
 $integer=$27;
 var $28=$1;
 var $29=$integer;
 _mrb_undef_class_method($28, $29, ((99796)|0));
 var $30=$1;
 var $31=$integer;
 _mrb_define_method($30, $31, ((99432)|0), 426, 0);
 var $32=$1;
 var $33=$integer;
 _mrb_define_method($32, $33, ((98964)|0), 426, 0);
 var $34=$1;
 var $35=$integer;
 var $36=_mrb_define_class($34, ((98404)|0), $35);
 var $37=$1;
 var $38=(($37+76)|0);
 HEAP32[(($38)>>2)]=$36;
 $fixnum=$36;
 var $39=$1;
 var $40=$fixnum;
 _mrb_define_method($39, $40, ((98088)|0), 654, 262144);
 var $41=$1;
 var $42=$fixnum;
 _mrb_define_method($41, $42, ((97824)|0), 380, 262144);
 var $43=$1;
 var $44=$fixnum;
 _mrb_define_method($43, $44, ((102624)|0), 346, 262144);
 var $45=$1;
 var $46=$fixnum;
 _mrb_define_method($45, $46, ((97468)|0), 24, 262144);
 var $47=$1;
 var $48=$fixnum;
 _mrb_define_method($47, $48, ((97196)|0), 240, 262144);
 var $49=$1;
 var $50=$fixnum;
 _mrb_define_method($49, $50, ((96860)|0), 310, 262144);
 var $51=$1;
 var $52=$fixnum;
 _mrb_define_method($51, $52, ((96380)|0), 130, 0);
 var $53=$1;
 var $54=$fixnum;
 _mrb_define_method($53, $54, ((96124)|0), 42, 262144);
 var $55=$1;
 var $56=$fixnum;
 _mrb_define_method($55, $56, ((95956)|0), 200, 262144);
 var $57=$1;
 var $58=$fixnum;
 _mrb_define_method($57, $58, ((95744)|0), 312, 262144);
 var $59=$1;
 var $60=$fixnum;
 _mrb_define_method($59, $60, ((95532)|0), 588, 262144);
 var $61=$1;
 var $62=$fixnum;
 _mrb_define_method($61, $62, ((95248)|0), 572, 262144);
 var $63=$1;
 var $64=$fixnum;
 _mrb_define_method($63, $64, ((95072)|0), 116, 262144);
 var $65=$1;
 var $66=$fixnum;
 _mrb_define_method($65, $66, ((94868)|0), 270, 0);
 var $67=$1;
 var $68=$fixnum;
 _mrb_define_method($67, $68, ((94504)|0), 518, 0);
 var $69=$1;
 var $70=$fixnum;
 _mrb_define_method($69, $70, ((94268)|0), 638, 0);
 var $71=$1;
 var $72=$fixnum;
 _mrb_define_method($71, $72, ((93892)|0), 388, 0);
 var $73=$1;
 var $74=$fixnum;
 _mrb_define_method($73, $74, ((93600)|0), 378, 0);
 var $75=$1;
 var $76=$fixnum;
 _mrb_define_method($75, $76, ((93312)|0), 378, 0);
 var $77=$1;
 var $78=$fixnum;
 _mrb_define_method($77, $78, ((93080)|0), 368, 262144);
 var $79=$1;
 var $80=$numeric;
 var $81=_mrb_define_class($79, ((92836)|0), $80);
 var $82=$1;
 var $83=(($82+72)|0);
 HEAP32[(($83)>>2)]=$81;
 $fl=$81;
 var $84=$1;
 var $85=$fl;
 _mrb_undef_class_method($84, $85, ((99796)|0));
 var $86=$1;
 var $87=$fl;
 _mrb_define_method($86, $87, ((98088)|0), 202, 262144);
 var $88=$1;
 var $89=$fl;
 _mrb_define_method($88, $89, ((97824)|0), 506, 262144);
 var $90=$1;
 var $91=$fl;
 _mrb_define_method($90, $91, ((97468)|0), 36, 262144);
 var $92=$1;
 var $93=$fl;
 _mrb_define_method($92, $93, ((97196)|0), 614, 262144);
 var $94=$1;
 var $95=$fl;
 _mrb_define_method($94, $95, ((96860)|0), 628, 262144);
 var $96=$1;
 var $97=$fl;
 _mrb_define_method($96, $97, ((92656)|0), 584, 0);
 var $98=$1;
 var $99=$fl;
 _mrb_define_method($98, $99, ((92476)|0), 478, 0);
 var $100=$1;
 var $101=$fl;
 _mrb_define_method($100, $101, ((92288)|0), 468, 0);
 var $102=$1;
 var $103=$fl;
 _mrb_define_method($102, $103, ((92020)|0), 228, 0);
 var $104=$1;
 var $105=$fl;
 _mrb_define_method($104, $105, ((91764)|0), 554, 0);
 var $106=$1;
 var $107=$fl;
 _mrb_define_method($106, $107, ((93892)|0), 536, 0);
 var $108=$1;
 var $109=$fl;
 _mrb_define_method($108, $109, ((99432)|0), 560, 0);
 var $110=$1;
 var $111=$fl;
 _mrb_define_method($110, $111, ((98964)|0), 560, 0);
 var $112=$1;
 var $113=$fl;
 _mrb_define_method($112, $113, ((91316)|0), 560, 0);
 var $114=$1;
 var $115=$fl;
 _mrb_define_method($114, $115, ((93600)|0), 540, 0);
 var $116=$1;
 var $117=$fl;
 _mrb_define_method($116, $117, ((93312)|0), 540, 0);
 return;
}
function _num_uplus($agg_result, $mrb, $num) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$agg_result;
 var $3=$num;
 assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _num_uminus($agg_result, $mrb, $num) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=_mrb_to_flo($3, $num);
 var $5=(-$4);
 _mrb_float_value1242($agg_result, $2, $5);
 STACKTOP = sp;
 return;
}
function _num_pow($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $y=sp;
   var $both_int;
   var $d;
   $1=$mrb;
   $both_int=0;
   var $2=$1;
   var $3=_mrb_get_args($2, ((90816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$y,tempInt));
   var $4=(($x+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))==3;
   if ($6) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $8=(($y+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==3;
   if ($10) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $both_int=1;
   label = 4; break;
  case 4: 
   var $13=$1;
   var $14=_mrb_to_flo($13, $x);
   var $15=$1;
   var $16=_mrb_to_flo($15, $y);
   var $17=Math.pow($14, $16);
   $d=$17;
   var $18=$both_int;
   var $19=(($18)|(0))!=0;
   if ($19) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $21=$d;
   var $22=$21 <= 2147483647;
   if ($22) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $24=$d;
   var $25=$24 >= -2147483648;
   if ($25) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $27=$d;
   var $28=(($27)&-1);
   _mrb_fixnum_value1243($agg_result, $28);
   label = 9; break;
  case 8: 
   var $30=$1;
   var $31=$d;
   _mrb_float_value1242($agg_result, $30, $31);
   label = 9; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _num_div($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $y=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((90380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$y,tempInt));
 var $4=$1;
 var $5=$1;
 var $6=_mrb_to_flo($5, $x);
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($y)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($y)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $8=($6)/($7);
 _mrb_float_value1242($agg_result, $4, $8);
 STACKTOP = sp;
 return;
}
function _num_abs($agg_result, $mrb, $num) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_to_flo($2, $num);
   var $4=$3 < 0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=$1;
   _num_uminus($agg_result, $6, $num);
   label = 4; break;
  case 3: 
   var $8=$agg_result;
   var $9=$num;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _num_cmp($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $other=sp;
   var $x;
   var $y;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((90816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$other,tempInt));
   var $4=$1;
   var $5=_mrb_to_flo($4, $self);
   $x=$5;
   var $6=(($other+8)|0);
   var $7=HEAP32[(($6)>>2)];
   if ((($7)|(0))==3) {
    label = 2; break;
   }
   else if ((($7)|(0))==6) {
    label = 3; break;
   }
   else {
   label = 4; break;
   }
  case 2: 
   var $9=(($other)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0));
   $y=$12;
   label = 5; break;
  case 3: 
   var $14=(($other)|0);
   var $15=$14;
   var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($15)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($15)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   $y=$16;
   label = 5; break;
  case 4: 
   _mrb_nil_value1248($agg_result);
   label = 10; break;
  case 5: 
   var $19=$x;
   var $20=$y;
   var $21=$19 > $20;
   if ($21) { label = 6; break; } else { label = 7; break; }
  case 6: 
   _mrb_fixnum_value1243($agg_result, 1);
   label = 10; break;
  case 7: 
   var $24=$x;
   var $25=$y;
   var $26=$24 < $25;
   if ($26) { label = 8; break; } else { label = 9; break; }
  case 8: 
   _mrb_fixnum_value1243($agg_result, -1);
   label = 10; break;
  case 9: 
   _mrb_fixnum_value1243($agg_result, 0);
   label = 10; break;
  case 10: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _int_to_i($agg_result, $mrb, $num) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$agg_result;
 var $3=$num;
 assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _fix_plus($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $other=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((90816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$other,tempInt));
 var $4=$1;
 _mrb_fixnum_plus($agg_result, $4, $self, $other);
 STACKTOP = sp;
 return;
}
function _fix_minus($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $other=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((90816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$other,tempInt));
 var $4=$1;
 _mrb_fixnum_minus($agg_result, $4, $self, $other);
 STACKTOP = sp;
 return;
}
function _fix_uminus($agg_result, $mrb, $num) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=(($num)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=(((-$4))|0);
 _mrb_fixnum_value1243($agg_result, $5);
 STACKTOP = sp;
 return;
}
function _fix_mul($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $y=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((90816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$y,tempInt));
 var $4=$1;
 _mrb_fixnum_mul($agg_result, $4, $x, $y);
 STACKTOP = sp;
 return;
}
function _fix_mod($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $y=sp;
   var $a;
   var $b;
   var $mod=(sp)+(12);
   var $mod1=(sp)+(16);
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((90816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$y,tempInt));
   var $4=(($x)|0);
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   $a=$6;
   var $7=(($y+8)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))==3;
   if ($9) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $11=(($y)|0);
   var $12=$11;
   var $13=HEAP32[(($12)>>2)];
   $b=$13;
   var $14=(($13)|(0))!=0;
   if ($14) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $16=(($y)|0);
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18)|(0))==0;
   if ($19) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=$1;
   var $22=_strtod(((90560)|0), 0);
   _mrb_float_value1242($agg_result, $21, $22);
   label = 7; break;
  case 5: 
   var $24=$1;
   var $25=$a;
   var $26=(($y)|0);
   var $27=$26;
   var $28=HEAP32[(($27)>>2)];
   _fixdivmod($24, $25, $28, 0, $mod);
   var $29=HEAP32[(($mod)>>2)];
   _mrb_fixnum_value1243($agg_result, $29);
   label = 7; break;
  case 6: 
   var $31=$1;
   var $32=$a;
   var $33=(($32)|(0));
   var $34=$1;
   var $35=_mrb_to_flo($34, $y);
   _flodivmod($31, $33, $35, 0, $mod1);
   var $36=$1;
   var $37=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($mod1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($mod1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   _mrb_float_value1242($agg_result, $36, $37);
   label = 7; break;
  case 7: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _fix_equal($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $y=sp;
   var $equal_p;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((90816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$y,tempInt));
   var $4=$1;
   var $5=_mrb_obj_equal($4, $x, $y);
   var $6=(($5)&(255));
   var $7=(($6)|(0))!=0;
   if ($7) { var $24 = 1;label = 5; break; } else { label = 2; break; }
  case 2: 
   var $9=(($y+8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))==6;
   if ($11) { label = 3; break; } else { var $22 = 0;label = 4; break; }
  case 3: 
   var $13=(($x)|0);
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0));
   var $17=(($y)|0);
   var $18=$17;
   var $19=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($18)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($18)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $20=$16 == $19;
   var $22 = $20;label = 4; break;
  case 4: 
   var $22;
   var $24 = $22;label = 5; break;
  case 5: 
   var $24;
   var $25=(($24)&(1));
   var $26=(($25) & 255);
   $equal_p=$26;
   var $27=$equal_p;
   _mrb_bool_value1249($agg_result, $27);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _fix_rev($agg_result, $mrb, $num) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $val;
 $1=$mrb;
 var $2=(($num)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 $val=$4;
 var $5=$val;
 var $6=$5 ^ -1;
 $val=$6;
 var $7=$val;
 _mrb_fixnum_value1243($agg_result, $7);
 STACKTOP = sp;
 return;
}
function _fix_and($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $y=sp;
 var $val;
 var $2=(sp)+(12);
 $1=$mrb;
 var $3=$1;
 var $4=_mrb_get_args($3, ((90816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$y,tempInt));
 var $5=$1;
 _bit_coerce($2, $5, $y);
 var $6=$y;
 var $7=$2;
 assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
 var $8=(($x)|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($y)|0);
 var $12=$11;
 var $13=HEAP32[(($12)>>2)];
 var $14=$10 & $13;
 $val=$14;
 var $15=$val;
 _mrb_fixnum_value1243($agg_result, $15);
 STACKTOP = sp;
 return;
}
function _fix_or($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $y=sp;
 var $val;
 var $2=(sp)+(12);
 $1=$mrb;
 var $3=$1;
 var $4=_mrb_get_args($3, ((90816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$y,tempInt));
 var $5=$1;
 _bit_coerce($2, $5, $y);
 var $6=$y;
 var $7=$2;
 assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
 var $8=(($x)|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($y)|0);
 var $12=$11;
 var $13=HEAP32[(($12)>>2)];
 var $14=$10 | $13;
 $val=$14;
 var $15=$val;
 _mrb_fixnum_value1243($agg_result, $15);
 STACKTOP = sp;
 return;
}
function _fix_xor($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $y=sp;
 var $val;
 var $2=(sp)+(12);
 $1=$mrb;
 var $3=$1;
 var $4=_mrb_get_args($3, ((90816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$y,tempInt));
 var $5=$1;
 _bit_coerce($2, $5, $y);
 var $6=$y;
 var $7=$2;
 assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
 var $8=(($x)|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($y)|0);
 var $12=$11;
 var $13=HEAP32[(($12)>>2)];
 var $14=$10 ^ $13;
 $val=$14;
 var $15=$val;
 _mrb_fixnum_value1243($agg_result, $15);
 STACKTOP = sp;
 return;
}
function _fix_lshift($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $width=sp;
   var $result=(sp)+(4);
   var $val;
   var $2=(sp)+(16);
   var $3=(sp)+(28);
   $1=$mrb;
   var $4=$1;
   _fix_shift_get_width($4, $width);
   var $5=HEAP32[(($width)>>2)];
   var $6=(($5)|(0))==0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$result;
   var $9=$x;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   label = 7; break;
  case 3: 
   var $11=(($x)|0);
   var $12=$11;
   var $13=HEAP32[(($12)>>2)];
   $val=$13;
   var $14=HEAP32[(($width)>>2)];
   var $15=(($14)|(0)) < 0;
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $17=$val;
   var $18=HEAP32[(($width)>>2)];
   var $19=(((-$18))|0);
   _rshift($2, $17, $19);
   var $20=$result;
   var $21=$2;
   assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
   label = 6; break;
  case 5: 
   var $23=$1;
   var $24=$val;
   var $25=HEAP32[(($width)>>2)];
   _lshift($3, $23, $24, $25);
   var $26=$result;
   var $27=$3;
   assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
   label = 6; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $30=$agg_result;
   var $31=$result;
   assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _fix_rshift($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $width=sp;
   var $result=(sp)+(4);
   var $val;
   var $2=(sp)+(16);
   var $3=(sp)+(28);
   $1=$mrb;
   var $4=$1;
   _fix_shift_get_width($4, $width);
   var $5=HEAP32[(($width)>>2)];
   var $6=(($5)|(0))==0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$result;
   var $9=$x;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   label = 7; break;
  case 3: 
   var $11=(($x)|0);
   var $12=$11;
   var $13=HEAP32[(($12)>>2)];
   $val=$13;
   var $14=HEAP32[(($width)>>2)];
   var $15=(($14)|(0)) < 0;
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $17=$1;
   var $18=$val;
   var $19=HEAP32[(($width)>>2)];
   var $20=(((-$19))|0);
   _lshift($2, $17, $18, $20);
   var $21=$result;
   var $22=$2;
   assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
   label = 6; break;
  case 5: 
   var $24=$val;
   var $25=HEAP32[(($width)>>2)];
   _rshift($3, $24, $25);
   var $26=$result;
   var $27=$3;
   assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
   label = 6; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $30=$agg_result;
   var $31=$result;
   assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _num_eql($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $y=sp;
   var $eql_p;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((90816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$y,tempInt));
   var $4=(($x+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($y+8)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($5)|(0))!=(($7)|(0));
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $eql_p=0;
   label = 4; break;
  case 3: 
   var $11=$1;
   var $12=_mrb_equal($11, $x, $y);
   $eql_p=$12;
   label = 4; break;
  case 4: 
   var $14=$eql_p;
   _mrb_bool_value1249($agg_result, $14);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _flo_hash($agg_result, $mrb, $num) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $d=sp;
   var $c;
   var $i;
   var $hash;
   $1=$mrb;
   var $2=(($num)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0));
   (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($d)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($d)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($d)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($d)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $7=$6 == 0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($d)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($d)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 3; break;
  case 3: 
   var $10=$d;
   $c=$10;
   $hash=0;
   $i=0;
   label = 4; break;
  case 4: 
   var $12=$i;
   var $13=(($12)>>>(0)) < 8;
   if ($13) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $15=$hash;
   var $16=((($15)*(971))&-1);
   var $17=$i;
   var $18=$c;
   var $19=(($18+$17)|0);
   var $20=HEAP8[($19)];
   var $21=(($20)&(255));
   var $22=$16 ^ $21;
   $hash=$22;
   label = 6; break;
  case 6: 
   var $24=$i;
   var $25=((($24)+(1))|0);
   $i=$25;
   label = 4; break;
  case 7: 
   var $27=$hash;
   var $28=(($27)|(0)) < 0;
   if ($28) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $30=$hash;
   var $31=(((-$30))|0);
   $hash=$31;
   label = 9; break;
  case 9: 
   var $33=$hash;
   _mrb_fixnum_value1243($agg_result, $33);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _int_succ($agg_result, $mrb, $num) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2=sp;
   $1=$mrb;
   var $3=(($num+8)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))==3;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   _fix_succ($agg_result, $7, $num);
   label = 4; break;
  case 3: 
   var $9=$1;
   _mrb_fixnum_value1243($2, 1);
   _mrb_funcall($agg_result, $9, $num, ((98088)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($2)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($2)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($2)+(8))>>2)],tempInt));
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _fix_succ($agg_result, $mrb, $num) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=(($num)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)+(1))|0);
 _mrb_fixnum_value1243($agg_result, $5);
 STACKTOP = sp;
 return;
}
function _fix_to_f($agg_result, $mrb, $num) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $val;
 $1=$mrb;
 var $2=(($num)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4)|(0));
 $val=$5;
 var $6=$1;
 var $7=$val;
 _mrb_float_value1242($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _fix_to_s($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $base=sp;
 $1=$mrb;
 HEAP32[(($base)>>2)]=10;
 var $2=$1;
 var $3=_mrb_get_args($2, ((91076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$base,tempInt));
 var $4=$1;
 var $5=HEAP32[(($base)>>2)];
 _mrb_fixnum_to_str($agg_result, $4, $self, $5);
 STACKTOP = sp;
 return;
}
function _fix_divmod($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 132)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $y=sp;
   var $div=(sp)+(12);
   var $mod=(sp)+(16);
   var $2=(sp)+(20);
   var $3=(sp)+(32);
   var $4=(sp)+(44);
   var $5=(sp)+(56);
   var $div1=(sp)+(68);
   var $mod2=(sp)+(76);
   var $a=(sp)+(84);
   var $b=(sp)+(96);
   var $6=(sp)+(108);
   var $7=(sp)+(120);
   $1=$mrb;
   var $8=$1;
   var $9=_mrb_get_args($8, ((90816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$y,tempInt));
   var $10=(($y+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))==3;
   if ($12) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $14=(($y)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0))==0;
   if ($17) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $19=$1;
   var $20=$1;
   var $21=_strtod(((89588)|0), 0);
   _mrb_float_value1242($2, $20, $21);
   var $22=$1;
   var $23=_strtod(((90560)|0), 0);
   _mrb_float_value1242($3, $22, $23);
   _mrb_assoc_new($agg_result, $19, $2, $3);
   label = 6; break;
  case 4: 
   var $25=$1;
   var $26=(($x)|0);
   var $27=$26;
   var $28=HEAP32[(($27)>>2)];
   var $29=(($y)|0);
   var $30=$29;
   var $31=HEAP32[(($30)>>2)];
   _fixdivmod($25, $28, $31, $div, $mod);
   var $32=$1;
   var $33=HEAP32[(($div)>>2)];
   _mrb_fixnum_value1243($4, $33);
   var $34=HEAP32[(($mod)>>2)];
   _mrb_fixnum_value1243($5, $34);
   _mrb_assoc_new($agg_result, $32, $4, $5);
   label = 6; break;
  case 5: 
   var $36=$1;
   var $37=(($x)|0);
   var $38=$37;
   var $39=HEAP32[(($38)>>2)];
   var $40=(($39)|(0));
   var $41=$1;
   var $42=_mrb_to_flo($41, $y);
   _flodivmod($36, $40, $42, $div1, $mod2);
   var $43=$1;
   var $44=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($div1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($div1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $45=(($44)&-1);
   var $46=(($45)|(0));
   _mrb_float_value1242($6, $43, $46);
   var $47=$a;
   var $48=$6;
   assert(12 % 1 === 0);HEAP32[(($47)>>2)]=HEAP32[(($48)>>2)];HEAP32[((($47)+(4))>>2)]=HEAP32[((($48)+(4))>>2)];HEAP32[((($47)+(8))>>2)]=HEAP32[((($48)+(8))>>2)];
   var $49=$1;
   var $50=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($mod2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($mod2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   _mrb_float_value1242($7, $49, $50);
   var $51=$b;
   var $52=$7;
   assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($52)+(8))>>2)];
   var $53=$1;
   _mrb_assoc_new($agg_result, $53, $a, $b);
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _flo_plus($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x;
 var $y=sp;
 $1=$mrb;
 var $2=(($self)|0);
 var $3=$2;
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 $x=$4;
 var $5=$1;
 var $6=_mrb_get_args($5, ((90380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$y,tempInt));
 var $7=$1;
 var $8=$x;
 var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($y)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($y)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $10=($8)+($9);
 _mrb_float_value1242($agg_result, $7, $10);
 STACKTOP = sp;
 return;
}
function _flo_minus($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $y=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((90816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$y,tempInt));
 var $4=$1;
 var $5=(($x)|0);
 var $6=$5;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $8=$1;
 var $9=_mrb_to_flo($8, $y);
 var $10=($7)-($9);
 _mrb_float_value1242($agg_result, $4, $10);
 STACKTOP = sp;
 return;
}
function _flo_mul($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $y=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((90816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$y,tempInt));
 var $4=$1;
 var $5=(($x)|0);
 var $6=$5;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $8=$1;
 var $9=_mrb_to_flo($8, $y);
 var $10=($7)*($9);
 _mrb_float_value1242($agg_result, $4, $10);
 STACKTOP = sp;
 return;
}
function _flo_mod($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $y=sp;
 var $fy;
 var $mod=(sp)+(12);
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((90816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$y,tempInt));
 var $4=$1;
 var $5=_mrb_to_flo($4, $y);
 $fy=$5;
 var $6=$1;
 var $7=(($x)|0);
 var $8=$7;
 var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($8)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($8)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $10=$fy;
 _flodivmod($6, $9, $10, 0, $mod);
 var $11=$1;
 var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($mod)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($mod)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1242($agg_result, $11, $12);
 STACKTOP = sp;
 return;
}
function _flo_eq($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $y=sp;
   var $a;
   var $b;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((90816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$y,tempInt));
   var $4=(($y+8)|0);
   var $5=HEAP32[(($4)>>2)];
   if ((($5)|(0))==3) {
    label = 2; break;
   }
   else if ((($5)|(0))==6) {
    label = 3; break;
   }
   else {
   label = 4; break;
   }
  case 2: 
   var $7=(($y)|0);
   var $8=$7;
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0));
   $b=$10;
   label = 5; break;
  case 3: 
   var $12=(($y)|0);
   var $13=$12;
   var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($13)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($13)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   $b=$14;
   label = 5; break;
  case 4: 
   var $16=$1;
   _num_equal($agg_result, $16, $x, $y);
   label = 6; break;
  case 5: 
   var $18=(($x)|0);
   var $19=$18;
   var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($19)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($19)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   $a=$20;
   var $21=$a;
   var $22=$b;
   var $23=$21 == $22;
   var $24=(($23)&(1));
   var $25=(($24) & 255);
   _mrb_bool_value1249($agg_result, $25);
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _flo_ceil($agg_result, $mrb, $num) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $f;
   $1=$mrb;
   var $2=(($num)|0);
   var $3=$2;
   var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $5=Math.ceil($4);
   $f=$5;
   var $6=$f;
   var $7=$6 <= 2147483647;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$f;
   var $10=$9 >= -2147483648;
   if ($10) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $12=$1;
   var $13=$f;
   _mrb_float_value1242($agg_result, $12, $13);
   label = 5; break;
  case 4: 
   var $15=$f;
   var $16=(($15)&-1);
   _mrb_fixnum_value1243($agg_result, $16);
   label = 5; break;
  case 5: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _flo_finite_p($agg_result, $mrb, $num) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $value;
   var $finite_p;
   $1=$mrb;
   var $2=(($num)|0);
   var $3=$2;
   var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   $value=$4;
   var $5=$value;
   var $6=___fpclassifyf($5);
   var $7=(($6)|(0))==1;
   if ($7) { var $13 = 1;label = 3; break; } else { label = 2; break; }
  case 2: 
   var $9=$value;
   var $10=___fpclassifyf($9);
   var $11=(($10)|(0))==0;
   var $13 = $11;label = 3; break;
  case 3: 
   var $13;
   var $14=$13 ^ 1;
   var $15=(($14)&(1));
   var $16=(($15) & 255);
   $finite_p=$16;
   var $17=$finite_p;
   _mrb_bool_value1249($agg_result, $17);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _flo_floor($agg_result, $mrb, $num) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $f;
   $1=$mrb;
   var $2=(($num)|0);
   var $3=$2;
   var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $5=Math.floor($4);
   $f=$5;
   var $6=$f;
   var $7=$6 <= 2147483647;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$f;
   var $10=$9 >= -2147483648;
   if ($10) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $12=$1;
   var $13=$f;
   _mrb_float_value1242($agg_result, $12, $13);
   label = 5; break;
  case 4: 
   var $15=$f;
   var $16=(($15)&-1);
   _mrb_fixnum_value1243($agg_result, $16);
   label = 5; break;
  case 5: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _fixdivmod($mrb, $x, $y, $divp, $modp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $div;
   var $mod;
   $1=$mrb;
   $2=$x;
   $3=$y;
   $4=$divp;
   $5=$modp;
   var $6=$3;
   var $7=(($6)|(0)) < 0;
   if ($7) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $9=$2;
   var $10=(($9)|(0)) < 0;
   if ($10) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $12=$2;
   var $13=(((-$12))|0);
   var $14=$3;
   var $15=(((-$14))|0);
   var $16=((((($13)|(0)))/((($15)|(0))))&-1);
   $div=$16;
   label = 5; break;
  case 4: 
   var $18=$2;
   var $19=$3;
   var $20=(((-$19))|0);
   var $21=((((($18)|(0)))/((($20)|(0))))&-1);
   var $22=(((-$21))|0);
   $div=$22;
   label = 5; break;
  case 5: 
   label = 10; break;
  case 6: 
   var $25=$2;
   var $26=(($25)|(0)) < 0;
   if ($26) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $28=$2;
   var $29=(((-$28))|0);
   var $30=$3;
   var $31=((((($29)|(0)))/((($30)|(0))))&-1);
   var $32=(((-$31))|0);
   $div=$32;
   label = 9; break;
  case 8: 
   var $34=$2;
   var $35=$3;
   var $36=((((($34)|(0)))/((($35)|(0))))&-1);
   $div=$36;
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   var $39=$2;
   var $40=$div;
   var $41=$3;
   var $42=(Math.imul($40,$41)|0);
   var $43=((($39)-($42))|0);
   $mod=$43;
   var $44=$mod;
   var $45=(($44)|(0)) < 0;
   if ($45) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $47=$3;
   var $48=(($47)|(0)) > 0;
   if ($48) { label = 14; break; } else { label = 12; break; }
  case 12: 
   var $50=$mod;
   var $51=(($50)|(0)) > 0;
   if ($51) { label = 13; break; } else { label = 15; break; }
  case 13: 
   var $53=$3;
   var $54=(($53)|(0)) < 0;
   if ($54) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $56=$3;
   var $57=$mod;
   var $58=((($57)+($56))|0);
   $mod=$58;
   var $59=$div;
   var $60=((($59)-(1))|0);
   $div=$60;
   label = 15; break;
  case 15: 
   var $62=$4;
   var $63=(($62)|(0))!=0;
   if ($63) { label = 16; break; } else { label = 17; break; }
  case 16: 
   var $65=$div;
   var $66=$4;
   HEAP32[(($66)>>2)]=$65;
   label = 17; break;
  case 17: 
   var $68=$5;
   var $69=(($68)|(0))!=0;
   if ($69) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $71=$mod;
   var $72=$5;
   HEAP32[(($72)>>2)]=$71;
   label = 19; break;
  case 19: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_eq($mrb, $v1, $v2) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v1; $v1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $v2; $v2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $2=$mrb;
   var $3=(($v1+8)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($v2+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($4)|(0))!=(($6)|(0));
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=0;
   label = 9; break;
  case 3: 
   var $10=(($v1+8)|0);
   var $11=HEAP32[(($10)>>2)];
   if ((($11)|(0))==2) {
    label = 4; break;
   }
   else if ((($11)|(0))==0 | (($11)|(0))==3) {
    label = 5; break;
   }
   else if ((($11)|(0))==4) {
    label = 6; break;
   }
   else if ((($11)|(0))==6) {
    label = 7; break;
   }
   else {
   label = 8; break;
   }
  case 4: 
   $1=1;
   label = 9; break;
  case 5: 
   var $14=(($v1)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=(($v2)|0);
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=(($16)|(0))==(($19)|(0));
   var $21=(($20)&(1));
   var $22=(($21) & 255);
   $1=$22;
   label = 9; break;
  case 6: 
   var $24=(($v1)|0);
   var $25=$24;
   var $26=HEAP16[(($25)>>1)];
   var $27=(($26 << 16) >> 16);
   var $28=(($v2)|0);
   var $29=$28;
   var $30=HEAP16[(($29)>>1)];
   var $31=(($30 << 16) >> 16);
   var $32=(($27)|(0))==(($31)|(0));
   var $33=(($32)&(1));
   var $34=(($33) & 255);
   $1=$34;
   label = 9; break;
  case 7: 
   var $36=(($v1)|0);
   var $37=$36;
   var $38=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($37)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($37)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $39=(($v2)|0);
   var $40=$39;
   var $41=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($40)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($40)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $42=$38 == $41;
   var $43=(($42)&(1));
   var $44=(($43) & 255);
   $1=$44;
   label = 9; break;
  case 8: 
   var $46=(($v1)|0);
   var $47=$46;
   var $48=HEAP32[(($47)>>2)];
   var $49=(($v2)|0);
   var $50=$49;
   var $51=HEAP32[(($50)>>2)];
   var $52=(($48)|(0))==(($51)|(0));
   var $53=(($52)&(1));
   var $54=(($53) & 255);
   $1=$54;
   label = 9; break;
  case 9: 
   var $56=$1;
   STACKTOP = sp;
   return $56;
  default: assert(0, "bad label: " + label);
 }
}
function _flo_infinite_p($agg_result, $mrb, $num) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $value;
   $1=$mrb;
   var $2=(($num)|0);
   var $3=$2;
   var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   $value=$4;
   var $5=$value;
   var $6=___fpclassifyf($5);
   var $7=(($6)|(0))==1;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$value;
   var $10=$9 < 0;
   var $11=$10 ? -1 : 1;
   _mrb_fixnum_value1243($agg_result, $11);
   label = 4; break;
  case 3: 
   _mrb_nil_value1248($agg_result);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _flo_round($agg_result, $mrb, $num) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $number;
   var $f;
   var $ndigits=sp;
   var $i;
   var $d;
   $1=$mrb;
   HEAP32[(($ndigits)>>2)]=0;
   var $2=$1;
   var $3=_mrb_get_args($2, ((91076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$ndigits,tempInt));
   var $4=(($num)|0);
   var $5=$4;
   var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($5)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   $number=$6;
   $f=1;
   var $7=HEAP32[(($ndigits)>>2)];
   var $8=Math.abs($7);
   $i=$8;
   label = 2; break;
  case 2: 
   var $10=$i;
   var $11=((($10)-(1))|0);
   $i=$11;
   var $12=(($11)|(0)) >= 0;
   if ($12) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $14=$f;
   var $15=($14)*(10);
   $f=$15;
   label = 2; break;
  case 4: 
   var $17=$f;
   var $18=___fpclassifyf($17);
   var $19=(($18)|(0))==1;
   if ($19) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $21=HEAP32[(($ndigits)>>2)];
   var $22=(($21)|(0)) < 0;
   if ($22) { label = 6; break; } else { label = 7; break; }
  case 6: 
   $number=0;
   label = 7; break;
  case 7: 
   label = 20; break;
  case 8: 
   var $26=HEAP32[(($ndigits)>>2)];
   var $27=(($26)|(0)) < 0;
   if ($27) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $29=$f;
   var $30=$number;
   var $31=($30)/($29);
   $number=$31;
   label = 11; break;
  case 10: 
   var $33=$f;
   var $34=$number;
   var $35=($34)*($33);
   $number=$35;
   label = 11; break;
  case 11: 
   var $37=$number;
   var $38=$37 > 0;
   if ($38) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $40=$number;
   var $41=Math.floor($40);
   $d=$41;
   var $42=$d;
   var $43=$number;
   var $44=$d;
   var $45=($43)-($44);
   var $46=$45 >= 0.5;
   var $47=(($46)&(1));
   var $48=(($47)|(0));
   var $49=($42)+($48);
   $number=$49;
   label = 16; break;
  case 13: 
   var $51=$number;
   var $52=$51 < 0;
   if ($52) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $54=$number;
   var $55=Math.ceil($54);
   $d=$55;
   var $56=$d;
   var $57=$d;
   var $58=$number;
   var $59=($57)-($58);
   var $60=$59 >= 0.5;
   var $61=(($60)&(1));
   var $62=(($61)|(0));
   var $63=($56)-($62);
   $number=$63;
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   var $66=HEAP32[(($ndigits)>>2)];
   var $67=(($66)|(0)) < 0;
   if ($67) { label = 17; break; } else { label = 18; break; }
  case 17: 
   var $69=$f;
   var $70=$number;
   var $71=($70)*($69);
   $number=$71;
   label = 19; break;
  case 18: 
   var $73=$f;
   var $74=$number;
   var $75=($74)/($73);
   $number=$75;
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $78=HEAP32[(($ndigits)>>2)];
   var $79=(($78)|(0)) > 0;
   if ($79) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $81=$1;
   var $82=$number;
   _mrb_float_value1242($agg_result, $81, $82);
   label = 23; break;
  case 22: 
   var $84=$number;
   var $85=(($84)&-1);
   _mrb_fixnum_value1243($agg_result, $85);
   label = 23; break;
  case 23: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _flo_to_f($agg_result, $mrb, $num) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$agg_result;
 var $3=$num;
 assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _flo_truncate($agg_result, $mrb, $num) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $f;
   $1=$mrb;
   var $2=(($num)|0);
   var $3=$2;
   var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   $f=$4;
   var $5=$f;
   var $6=$5 > 0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$f;
   var $9=Math.floor($8);
   $f=$9;
   label = 3; break;
  case 3: 
   var $11=$f;
   var $12=$11 < 0;
   if ($12) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $14=$f;
   var $15=Math.ceil($14);
   $f=$15;
   label = 5; break;
  case 5: 
   var $17=$f;
   var $18=$17 <= 2147483647;
   if ($18) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $20=$f;
   var $21=$20 >= -2147483648;
   if ($21) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $23=$1;
   var $24=$f;
   _mrb_float_value1242($agg_result, $23, $24);
   label = 9; break;
  case 8: 
   var $26=$f;
   var $27=(($26)&-1);
   _mrb_fixnum_value1243($agg_result, $27);
   label = 9; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _flo_to_s($agg_result, $mrb, $flt) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $flt; $flt = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($flt)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($flt)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($flt)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_flo_to_str($agg_result, $2, $flt, 14);
 STACKTOP = sp;
 return;
}
function _mrb_nil_value1248($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_bool_value1249($agg_result, $boolean) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$boolean;
   label = 2; break;
  case 2: 
   var $3=$1;
   var $4=(($3)&(255));
   var $5=(($4)|(0))!=0;
   var $6=$5 ? 2 : 0;
   var $7=(($v+8)|0);
   HEAP32[(($7)>>2)]=$6;
   var $8=(($v)|0);
   var $9=$8;
   HEAP32[(($9)>>2)]=1;
   label = 3; break;
  case 3: 
   var $11=$agg_result;
   var $12=$v;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _num_equal($agg_result, $mrb, $x, $y) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $y; $y = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($y)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($y)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($y)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_obj_equal($2, $x, $y);
   var $4=(($3 << 24) >> 24)!=0;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _mrb_true_value1250($agg_result);
   label = 4; break;
  case 3: 
   var $7=$1;
   _mrb_funcall($agg_result, $7, $y, ((96860)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($x)+(8))>>2)],tempInt));
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_true_value1250($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=2;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=1;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _flodivmod($mrb, $x, $y, $divp, $modp) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $div;
   var $mod;
   $1=$mrb;
   $2=$x;
   $3=$y;
   $4=$divp;
   $5=$modp;
   var $6=$3;
   var $7=$6 == 0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=_strtod(((89588)|0), 0);
   $div=$9;
   var $10=_strtod(((90560)|0), 0);
   $mod=$10;
   label = 11; break;
  case 3: 
   var $12=$2;
   var $13=$3;
   var $14=_fmod($12, $13);
   $mod=$14;
   var $15=$2;
   var $16=___fpclassifyf($15);
   var $17=(($16)|(0))==1;
   if ($17) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $19=$3;
   var $20=___fpclassifyf($19);
   var $21=(($20)|(0))==1;
   if ($21) { label = 7; break; } else { label = 5; break; }
  case 5: 
   var $23=$3;
   var $24=___fpclassifyf($23);
   var $25=(($24)|(0))==0;
   if ($25) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $27=$2;
   $div=$27;
   label = 8; break;
  case 7: 
   var $29=$2;
   var $30=$mod;
   var $31=($29)-($30);
   var $32=$3;
   var $33=($31)/($32);
   $div=$33;
   label = 8; break;
  case 8: 
   var $35=$3;
   var $36=$mod;
   var $37=($35)*($36);
   var $38=$37 < 0;
   if ($38) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $40=$3;
   var $41=$mod;
   var $42=($41)+($40);
   $mod=$42;
   var $43=$div;
   var $44=($43)-(1);
   $div=$44;
   label = 10; break;
  case 10: 
   label = 11; break;
  case 11: 
   var $47=$5;
   var $48=(($47)|(0))!=0;
   if ($48) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $50=$mod;
   var $51=$5;
   (HEAPF64[(tempDoublePtr)>>3]=$50,HEAP32[(($51)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($51)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 13; break;
  case 13: 
   var $53=$4;
   var $54=(($53)|(0))!=0;
   if ($54) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $56=$div;
   var $57=$4;
   (HEAPF64[(tempDoublePtr)>>3]=$56,HEAP32[(($57)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($57)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 15; break;
  case 15: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _fix_shift_get_width($mrb, $width) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $y=sp;
 var $3=(sp)+(12);
 $1=$mrb;
 $2=$width;
 var $4=$1;
 var $5=_mrb_get_args($4, ((90816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$y,tempInt));
 var $6=$1;
 _bit_coerce($3, $6, $y);
 var $7=$y;
 var $8=$3;
 assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
 var $9=(($y)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=$2;
 HEAP32[(($12)>>2)]=$11;
 STACKTOP = sp;
 return;
}
function _lshift($agg_result, $mrb, $val, $width) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4=sp;
   var $5=(sp)+(12);
   $1=$mrb;
   $2=$val;
   $3=$width;
   var $6=$3;
   var $7=(($6)>>>(0)) > 31;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$1;
   var $10=$1;
   var $11=_mrb_class_get($10, ((104760)|0));
   var $12=$3;
   _mrb_fixnum_value1243($4, $12);
   _mrb_fixnum_value1243($5, 31);
   _mrb_raisef($9, $11, ((90056)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($5)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
   label = 3; break;
  case 3: 
   var $14=$2;
   var $15=$3;
   var $16=$14 << $15;
   $2=$16;
   var $17=$2;
   _mrb_fixnum_value1243($agg_result, $17);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _rshift($agg_result, $val, $width) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$val;
   $2=$width;
   var $3=$2;
   var $4=(($3)>>>(0)) >= 31;
   if ($4) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $6=$1;
   var $7=(($6)|(0)) < 0;
   if ($7) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $1=-1;
   label = 5; break;
  case 4: 
   $1=0;
   label = 5; break;
  case 5: 
   label = 7; break;
  case 6: 
   var $12=$1;
   var $13=$2;
   var $14=$12 >> (($13)|(0));
   $1=$14;
   label = 7; break;
  case 7: 
   var $16=$1;
   _mrb_fixnum_value1243($agg_result, $16);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _bit_coerce($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2=sp;
   $1=$mrb;
   label = 2; break;
  case 2: 
   var $4=(($x+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))==3;
   var $7=$6 ^ 1;
   if ($7) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $9=(($x+8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))==6;
   if ($11) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $13=$1;
   var $14=$1;
   var $15=_mrb_class_get($14, ((100448)|0));
   _mrb_raise($13, $15, ((89928)|0));
   label = 5; break;
  case 5: 
   var $17=$1;
   _mrb_to_int($2, $17, $x);
   var $18=$x;
   var $19=$2;
   assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
   label = 2; break;
  case 6: 
   var $21=$agg_result;
   var $22=$x;
   assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_equal($mrb, $v1, $v2) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v1; $v1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $v2; $v2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_obj_eq($2, $v1, $v2);
 STACKTOP = sp;
 return $3;
}
function _mrb_equal($mrb, $obj1, $obj2) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj1; $obj1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $obj2; $obj2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $result=sp;
   var $3=(sp)+(12);
   $2=$mrb;
   var $4=$2;
   var $5=_mrb_obj_eq($4, $obj1, $obj2);
   var $6=(($5 << 24) >> 24)!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=1;
   label = 6; break;
  case 3: 
   var $9=$2;
   _mrb_funcall($3, $9, $obj1, ((104308)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($obj2)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj2)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj2)+(8))>>2)],tempInt));
   var $10=$result;
   var $11=$3;
   assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
   var $12=(($result+8)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))!=0;
   if ($14) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $1=1;
   label = 6; break;
  case 5: 
   $1=0;
   label = 6; break;
  case 6: 
   var $18=$1;
   STACKTOP = sp;
   return $18;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_init_object($mrb) {
 var label = 0;
 var $1;
 var $n;
 var $t;
 var $f;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=(($3+44)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_mrb_define_class($2, ((105104)|0), $5);
 var $7=$1;
 var $8=(($7+88)|0);
 HEAP32[(($8)>>2)]=$6;
 $n=$6;
 var $9=$1;
 var $10=$n;
 _mrb_undef_class_method($9, $10, ((100388)|0));
 var $11=$1;
 var $12=$n;
 _mrb_define_method($11, $12, ((96780)|0), 636, 262144);
 var $13=$1;
 var $14=$n;
 _mrb_define_method($13, $14, ((94208)|0), 284, 262144);
 var $15=$1;
 var $16=$n;
 _mrb_define_method($15, $16, ((91684)|0), 652, 262144);
 var $17=$1;
 var $18=$n;
 _mrb_define_method($17, $18, ((89552)|0), 500, 0);
 var $19=$1;
 var $20=$n;
 _mrb_define_method($19, $20, ((88352)|0), 6, 0);
 var $21=$1;
 var $22=$n;
 _mrb_define_method($21, $22, ((87376)|0), 76, 0);
 var $23=$1;
 var $24=$1;
 var $25=(($24+44)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=_mrb_define_class($23, ((86580)|0), $26);
 var $28=$1;
 var $29=(($28+80)|0);
 HEAP32[(($29)>>2)]=$27;
 $t=$27;
 var $30=$1;
 var $31=$t;
 _mrb_undef_class_method($30, $31, ((100388)|0));
 var $32=$1;
 var $33=$t;
 _mrb_define_method($32, $33, ((96780)|0), 640, 262144);
 var $34=$1;
 var $35=$t;
 _mrb_define_method($34, $35, ((94208)|0), 342, 262144);
 var $36=$1;
 var $37=$t;
 _mrb_define_method($36, $37, ((88352)|0), 566, 0);
 var $38=$1;
 var $39=$t;
 _mrb_define_method($38, $39, ((91684)|0), 446, 262144);
 var $40=$1;
 var $41=$t;
 _mrb_define_method($40, $41, ((87376)|0), 566, 0);
 var $42=$1;
 var $43=$1;
 var $44=(($43+44)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=_mrb_define_class($42, ((105956)|0), $45);
 var $47=$1;
 var $48=(($47+84)|0);
 HEAP32[(($48)>>2)]=$46;
 $f=$46;
 var $49=$1;
 var $50=$f;
 _mrb_undef_class_method($49, $50, ((100388)|0));
 var $51=$1;
 var $52=$f;
 _mrb_define_method($51, $52, ((96780)|0), 636, 262144);
 var $53=$1;
 var $54=$f;
 _mrb_define_method($53, $54, ((94208)|0), 284, 262144);
 var $55=$1;
 var $56=$f;
 _mrb_define_method($55, $56, ((88352)|0), 184, 0);
 var $57=$1;
 var $58=$f;
 _mrb_define_method($57, $58, ((91684)|0), 652, 262144);
 var $59=$1;
 var $60=$f;
 _mrb_define_method($59, $60, ((87376)|0), 184, 0);
 return;
}
function _false_and($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 _mrb_false_value1331($agg_result);
 STACKTOP = sp;
 return;
}
function _false_xor($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $obj2=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((92472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$obj2,tempInt));
 var $4=HEAP8[($obj2)];
 _mrb_bool_value1330($agg_result, $4);
 STACKTOP = sp;
 return;
}
function _false_or($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $obj2=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((92472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$obj2,tempInt));
 var $4=HEAP8[($obj2)];
 _mrb_bool_value1330($agg_result, $4);
 STACKTOP = sp;
 return;
}
function _mrb_true($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 _mrb_true_value1329($agg_result);
 STACKTOP = sp;
 return;
}
function _nil_to_s($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_str_new($agg_result, $2, 0, 0);
 STACKTOP = sp;
 return;
}
function _nil_inspect($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_str_new($agg_result, $2, ((103524)|0), 3);
 STACKTOP = sp;
 return;
}
function _true_and($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $obj2=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((92472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$obj2,tempInt));
 var $4=HEAP8[($obj2)];
 _mrb_bool_value1330($agg_result, $4);
 STACKTOP = sp;
 return;
}
function _true_xor($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $obj2=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((92472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$obj2,tempInt));
 var $4=HEAP8[($obj2)];
 var $5=(($4 << 24) >> 24)!=0;
 var $6=$5 ^ 1;
 var $7=(($6)&(1));
 var $8=(($7) & 255);
 _mrb_bool_value1330($agg_result, $8);
 STACKTOP = sp;
 return;
}
function _true_to_s($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_str_new($agg_result, $2, ((95948)|0), 4);
 STACKTOP = sp;
 return;
}
function _mrb_class1321($mrb, $v) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $2=$mrb;
   var $3=(($v+8)|0);
   var $4=HEAP32[(($3)>>2)];
   if ((($4)|(0))==0) {
    label = 2; break;
   }
   else if ((($4)|(0))==2) {
    label = 5; break;
   }
   else if ((($4)|(0))==4) {
    label = 6; break;
   }
   else if ((($4)|(0))==3) {
    label = 7; break;
   }
   else if ((($4)|(0))==6) {
    label = 8; break;
   }
   else {
   label = 9; break;
   }
  case 2: 
   var $6=(($v)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $11=$2;
   var $12=(($11+84)|0);
   var $13=HEAP32[(($12)>>2)];
   $1=$13;
   label = 10; break;
  case 4: 
   var $15=$2;
   var $16=(($15+88)|0);
   var $17=HEAP32[(($16)>>2)];
   $1=$17;
   label = 10; break;
  case 5: 
   var $19=$2;
   var $20=(($19+80)|0);
   var $21=HEAP32[(($20)>>2)];
   $1=$21;
   label = 10; break;
  case 6: 
   var $23=$2;
   var $24=(($23+92)|0);
   var $25=HEAP32[(($24)>>2)];
   $1=$25;
   label = 10; break;
  case 7: 
   var $27=$2;
   var $28=(($27+76)|0);
   var $29=HEAP32[(($28)>>2)];
   $1=$29;
   label = 10; break;
  case 8: 
   var $31=$2;
   var $32=(($31+72)|0);
   var $33=HEAP32[(($32)>>2)];
   $1=$33;
   label = 10; break;
  case 9: 
   var $35=(($v)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=$37;
   var $39=(($38+4)|0);
   var $40=HEAP32[(($39)>>2)];
   $1=$40;
   label = 10; break;
  case 10: 
   var $42=$1;
   STACKTOP = sp;
   return $42;
  default: assert(0, "bad label: " + label);
 }
}
function _true_or($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 _mrb_true_value1329($agg_result);
 STACKTOP = sp;
 return;
}
function _false_to_s($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_str_new($agg_result, $2, ((96116)|0), 5);
 STACKTOP = sp;
 return;
}
function _convert_type($agg_result, $mrb, $val, $tname, $method, $raise) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $m;
   var $5=sp;
   $1=$mrb;
   $2=$tname;
   $3=$method;
   $4=$raise;
   $m=0;
   var $6=$1;
   var $7=$3;
   var $8=_mrb_intern_cstr($6, $7);
   $m=$8;
   var $9=$1;
   var $10=$m;
   var $11=_mrb_respond_to($9, $val, $10);
   var $12=(($11 << 24) >> 24)!=0;
   if ($12) { label = 5; break; } else { label = 2; break; }
  case 2: 
   var $14=$4;
   var $15=(($14)|(0))!=0;
   if ($15) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $17=$1;
   var $18=$1;
   var $19=_mrb_class_get($18, ((104564)|0));
   var $20=$1;
   var $21=$2;
   _mrb_str_new_cstr($5, $20, $21);
   _mrb_raisef($17, $19, ((92628)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($val)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($val)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($val)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($5)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
   _mrb_nil_value1308($agg_result);
   label = 6; break;
  case 4: 
   _mrb_nil_value1308($agg_result);
   label = 6; break;
  case 5: 
   var $24=$1;
   var $25=$m;
   _mrb_funcall_argv($agg_result, $24, $val, $25, 0, 0);
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value1308($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_convert_type($agg_result, $mrb, $val, $type, $tname, $method) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $v=sp;
   var $5=(sp)+(12);
   var $6=(sp)+(24);
   var $7=(sp)+(36);
   $1=$mrb;
   $2=$type;
   $3=$tname;
   $4=$method;
   var $8=(($val+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$2;
   var $11=(($9)|(0))==(($10)|(0));
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$agg_result;
   var $14=$val;
   assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
   label = 6; break;
  case 3: 
   var $16=$1;
   var $17=$3;
   var $18=$4;
   _convert_type($5, $16, $val, $17, $18, 1);
   var $19=$v;
   var $20=$5;
   assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
   var $21=(($v+8)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$2;
   var $24=(($22)|(0))!=(($23)|(0));
   if ($24) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $26=$1;
   var $27=$1;
   var $28=_mrb_class_get($27, ((104564)|0));
   var $29=$1;
   var $30=$3;
   _mrb_str_new_cstr($6, $29, $30);
   var $31=$1;
   var $32=$4;
   _mrb_str_new_cstr($7, $31, $32);
   _mrb_raisef($26, $28, ((104092)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 36)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($val)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($val)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($val)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($6)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($6)+(8))>>2)],HEAP32[(((tempInt)+(24))>>2)]=HEAP32[(($7)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[((($7)+(4))>>2)],HEAP32[((((tempInt)+(24))+(8))>>2)]=HEAP32[((($7)+(8))>>2)],tempInt));
   label = 5; break;
  case 5: 
   var $34=$agg_result;
   var $35=$v;
   assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_check_convert_type($agg_result, $mrb, $val, $type, $tname, $method) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $v=sp;
   var $5=(sp)+(12);
   $1=$mrb;
   $2=$type;
   $3=$tname;
   $4=$method;
   var $6=(($val+8)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$2;
   var $9=(($7)|(0))==(($8)|(0));
   if ($9) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $11=$2;
   var $12=(($11)|(0))!=21;
   if ($12) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $14=$agg_result;
   var $15=$val;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   label = 9; break;
  case 4: 
   var $17=$1;
   var $18=$3;
   var $19=$4;
   _convert_type($5, $17, $val, $18, $19, 0);
   var $20=$v;
   var $21=$5;
   assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
   var $22=(($v+8)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0))==0;
   if ($24) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $26=(($v)|0);
   var $27=$26;
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|(0))!=0;
   if ($29) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $31=(($v+8)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$2;
   var $34=(($32)|(0))!=(($33)|(0));
   if ($34) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _mrb_nil_value1308($agg_result);
   label = 9; break;
  case 8: 
   var $37=$agg_result;
   var $38=$v;
   assert(12 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];
   label = 9; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_check_type($mrb, $x, $t) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $type;
   var $s;
   var $xt;
   var $etype;
   var $3=sp;
   var $4=(sp)+(12);
   var $5=(sp)+(24);
   var $6=(sp)+(36);
   var $7=(sp)+(48);
   $1=$mrb;
   $2=$t;
   $type=((85528)|0);
   var $8=(($x+8)|0);
   var $9=HEAP32[(($8)>>2)];
   $xt=$9;
   var $10=$xt;
   var $11=$2;
   var $12=(($10)|(0))!=(($11)|(0));
   if ($12) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $14=$xt;
   var $15=(($14)|(0))==21;
   if ($15) { label = 3; break; } else { label = 22; break; }
  case 3: 
   label = 4; break;
  case 4: 
   var $18=$type;
   var $19=(($18)|0);
   var $20=HEAP8[($19)];
   var $21=(($20)&(255));
   var $22=(($21)|(0)) < 23;
   if ($22) { label = 5; break; } else { label = 21; break; }
  case 5: 
   var $24=$type;
   var $25=(($24)|0);
   var $26=HEAP8[($25)];
   var $27=(($26)&(255));
   var $28=$2;
   var $29=(($27)|(0))==(($28)|(0));
   if ($29) { label = 6; break; } else { label = 20; break; }
  case 6: 
   var $31=(($x+8)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)|(0))==0;
   if ($33) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $35=(($x)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37)|(0))!=0;
   if ($38) { label = 9; break; } else { label = 8; break; }
  case 8: 
   $etype=((103524)|0);
   label = 19; break;
  case 9: 
   var $41=(($x+8)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($42)|(0))==3;
   if ($43) { label = 10; break; } else { label = 11; break; }
  case 10: 
   $etype=((103032)|0);
   label = 18; break;
  case 11: 
   var $46=(($x+8)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=(($47)|(0))==4;
   if ($48) { label = 12; break; } else { label = 13; break; }
  case 12: 
   $etype=((102616)|0);
   label = 17; break;
  case 13: 
   var $51=(($x+8)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($52)>>>(0)) <= 7;
   if ($53) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $55=$1;
   _mrb_obj_as_string($3, $55, $x);
   var $56=(($3)|0);
   var $57=$56;
   var $58=HEAP32[(($57)>>2)];
   var $59=$58;
   $s=$59;
   var $60=$s;
   var $61=(($60+20)|0);
   var $62=HEAP32[(($61)>>2)];
   $etype=$62;
   label = 16; break;
  case 15: 
   var $64=$1;
   var $65=_mrb_obj_classname($64, $x);
   $etype=$65;
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $70=$1;
   var $71=$1;
   var $72=_mrb_class_get($71, ((104564)|0));
   var $73=$1;
   var $74=$etype;
   _mrb_str_new_cstr($4, $73, $74);
   var $75=$1;
   var $76=$type;
   var $77=(($76+4)|0);
   var $78=HEAP32[(($77)>>2)];
   _mrb_str_new_cstr($5, $75, $78);
   _mrb_raisef($70, $72, ((102232)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($5)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
   label = 20; break;
  case 20: 
   var $80=$type;
   var $81=(($80+8)|0);
   $type=$81;
   label = 4; break;
  case 21: 
   var $83=$1;
   var $84=$1;
   var $85=_mrb_class_get($84, ((104564)|0));
   var $86=$2;
   _mrb_fixnum_value1315($6, $86);
   var $87=(($x+8)|0);
   var $88=HEAP32[(($87)>>2)];
   _mrb_fixnum_value1315($7, $88);
   _mrb_raisef($83, $85, ((101816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($6)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($7)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($7)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($7)+(8))>>2)],tempInt));
   label = 22; break;
  case 22: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_value1315($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_any_to_s($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $str=sp;
 var $cname;
 var $2=(sp)+(12);
 var $3=(sp)+(24);
 var $4=(sp)+(36);
 var $5=(sp)+(48);
 var $6=(sp)+(60);
 $1=$mrb;
 var $7=$1;
 _mrb_str_buf_new($str, $7, 20);
 var $8=$1;
 var $9=_mrb_obj_classname($8, $obj);
 $cname=$9;
 var $10=$1;
 _mrb_str_buf_cat($2, $10, $str, ((101356)|0), 2);
 var $11=$1;
 var $12=$cname;
 _mrb_str_cat21318($3, $11, $str, $12);
 var $13=$1;
 _mrb_str_cat($4, $13, $str, ((100860)|0), 1);
 var $14=$1;
 var $15=$1;
 var $16=(($obj)|0);
 var $17=$16;
 var $18=HEAP32[(($17)>>2)];
 _mrb_ptr_to_str($5, $15, $18);
 _mrb_str_concat($14, $str, $5);
 var $19=$1;
 _mrb_str_buf_cat($6, $19, $str, ((100564)|0), 1);
 var $20=$agg_result;
 var $21=$str;
 assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_str_cat21318($agg_result, $mrb, $str, $ptr) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 $1=$mrb;
 $2=$ptr;
 var $3=$1;
 var $4=$2;
 _mrb_str_cat_cstr($agg_result, $3, $str, $4);
 STACKTOP = sp;
 return;
}
function _mrb_obj_is_kind_of($mrb, $obj, $c) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $cl;
   $2=$mrb;
   $3=$c;
   var $4=$2;
   var $5=_mrb_class1321($4, $obj);
   $cl=$5;
   var $6=$3;
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 & 255;
   if ((($9)|(0))==10 | (($9)|(0))==9 | (($9)|(0))==11) {
    label = 2; break;
   }
   else {
   label = 3; break;
   }
  case 2: 
   label = 4; break;
  case 3: 
   var $12=$2;
   var $13=$2;
   var $14=_mrb_class_get($13, ((104564)|0));
   _mrb_raise($12, $14, ((100044)|0));
   label = 4; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $17=$cl;
   var $18=(($17)|(0))!=0;
   if ($18) { label = 6; break; } else { label = 10; break; }
  case 6: 
   var $20=$cl;
   var $21=$3;
   var $22=(($20)|(0))==(($21)|(0));
   if ($22) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $24=$cl;
   var $25=(($24+16)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$3;
   var $28=(($27+16)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($26)|(0))==(($29)|(0));
   if ($30) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $1=1;
   label = 11; break;
  case 9: 
   var $33=$cl;
   var $34=(($33+20)|0);
   var $35=HEAP32[(($34)>>2)];
   $cl=$35;
   label = 5; break;
  case 10: 
   $1=0;
   label = 11; break;
  case 11: 
   var $38=$1;
   STACKTOP = sp;
   return $38;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_to_int($agg_result, $mrb, $val) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_to_integer($agg_result, $2, $val, ((99788)|0));
 STACKTOP = sp;
 return;
}
function _mrb_to_integer($agg_result, $mrb, $val, $method) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $v=sp;
   var $3=(sp)+(12);
   var $4=(sp)+(24);
   $1=$mrb;
   $2=$method;
   var $5=(($val+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==3;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$agg_result;
   var $10=$val;
   assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   label = 6; break;
  case 3: 
   var $12=$1;
   var $13=$2;
   _convert_type($3, $12, $val, ((105344)|0), $13, 1);
   var $14=$v;
   var $15=$3;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   var $16=$1;
   var $17=$1;
   var $18=(($17+76)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=_mrb_obj_is_kind_of($16, $v, $19);
   var $21=(($20 << 24) >> 24)!=0;
   if ($21) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $23=$1;
   var $24=$1;
   var $25=_mrb_class_get($24, ((104564)|0));
   var $26=$1;
   var $27=$2;
   _mrb_str_new_cstr($4, $26, $27);
   _mrb_raisef($23, $25, ((96332)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 48)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($val)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($val)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($val)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($val)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($val)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($val)+(8))>>2)],HEAP32[(((tempInt)+(24))>>2)]=HEAP32[(($4)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[((((tempInt)+(24))+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(36))>>2)]=HEAP32[(($v)>>2)],HEAP32[((((tempInt)+(36))+(4))>>2)]=HEAP32[((($v)+(4))>>2)],HEAP32[((((tempInt)+(36))+(8))>>2)]=HEAP32[((($v)+(8))>>2)],tempInt));
   label = 5; break;
  case 5: 
   var $29=$agg_result;
   var $30=$v;
   assert(12 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($29)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_Integer($agg_result, $mrb, $val) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_convert_to_integer($agg_result, $2, $val, 0);
 STACKTOP = sp;
 return;
}
function _mrb_convert_to_integer($agg_result, $mrb, $val, $base) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $tmp=sp;
   var $3=(sp)+(12);
   var $4=(sp)+(24);
   $1=$mrb;
   $2=$base;
   var $5=(($val+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==0;
   if ($7) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $9=(($val)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))!=0;
   if ($12) { label = 6; break; } else { label = 3; break; }
  case 3: 
   var $14=$2;
   var $15=(($14)|(0))!=0;
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   label = 24; break;
  case 5: 
   var $18=$1;
   var $19=$1;
   var $20=_mrb_class_get($19, ((104564)|0));
   _mrb_raise($18, $20, ((97792)|0));
   label = 6; break;
  case 6: 
   var $22=(($val+8)|0);
   var $23=HEAP32[(($22)>>2)];
   if ((($23)|(0))==6) {
    label = 7; break;
   }
   else if ((($23)|(0))==3) {
    label = 13; break;
   }
   else if ((($23)|(0))==16) {
    label = 16; break;
   }
   else {
   label = 18; break;
   }
  case 7: 
   var $25=$2;
   var $26=(($25)|(0))!=0;
   if ($26) { label = 8; break; } else { label = 9; break; }
  case 8: 
   label = 24; break;
  case 9: 
   var $29=(($val)|0);
   var $30=$29;
   var $31=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($30)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($30)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $32=$31 <= 2147483647;
   if ($32) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $34=(($val)|0);
   var $35=$34;
   var $36=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($35)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($35)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $37=$36 >= -2147483648;
   if ($37) { label = 11; break; } else { label = 12; break; }
  case 11: 
   label = 19; break;
  case 12: 
   var $40=$1;
   _mrb_flo_to_fixnum($agg_result, $40, $val);
   label = 29; break;
  case 13: 
   var $42=$2;
   var $43=(($42)|(0))!=0;
   if ($43) { label = 14; break; } else { label = 15; break; }
  case 14: 
   label = 24; break;
  case 15: 
   var $46=$agg_result;
   var $47=$val;
   assert(12 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($46)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];
   label = 29; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $50=$1;
   var $51=$2;
   _mrb_str_to_inum($agg_result, $50, $val, $51, 1);
   label = 29; break;
  case 18: 
   label = 19; break;
  case 19: 
   var $54=$2;
   var $55=(($54)|(0))!=0;
   if ($55) { label = 20; break; } else { label = 25; break; }
  case 20: 
   var $57=$1;
   _mrb_check_string_type($3, $57, $val);
   var $58=$tmp;
   var $59=$3;
   assert(12 % 1 === 0);HEAP32[(($58)>>2)]=HEAP32[(($59)>>2)];HEAP32[((($58)+(4))>>2)]=HEAP32[((($59)+(4))>>2)];HEAP32[((($58)+(8))>>2)]=HEAP32[((($59)+(8))>>2)];
   var $60=(($tmp+8)|0);
   var $61=HEAP32[(($60)>>2)];
   var $62=(($61)|(0))==0;
   if ($62) { label = 21; break; } else { label = 22; break; }
  case 21: 
   var $64=(($tmp)|0);
   var $65=$64;
   var $66=HEAP32[(($65)>>2)];
   var $67=(($66)|(0))!=0;
   if ($67) { label = 22; break; } else { label = 23; break; }
  case 22: 
   label = 17; break;
  case 23: 
   label = 24; break;
  case 24: 
   var $71=$1;
   var $72=$1;
   var $73=_mrb_class_get($72, ((97452)|0));
   _mrb_raise($71, $73, ((97160)|0));
   label = 25; break;
  case 25: 
   var $75=$1;
   _convert_type($4, $75, $val, ((105344)|0), ((99788)|0), 0);
   var $76=$tmp;
   var $77=$4;
   assert(12 % 1 === 0);HEAP32[(($76)>>2)]=HEAP32[(($77)>>2)];HEAP32[((($76)+(4))>>2)]=HEAP32[((($77)+(4))>>2)];HEAP32[((($76)+(8))>>2)]=HEAP32[((($77)+(8))>>2)];
   var $78=(($tmp+8)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79)|(0))==0;
   if ($80) { label = 26; break; } else { label = 28; break; }
  case 26: 
   var $82=(($tmp)|0);
   var $83=$82;
   var $84=HEAP32[(($83)>>2)];
   var $85=(($84)|(0))!=0;
   if ($85) { label = 28; break; } else { label = 27; break; }
  case 27: 
   var $87=$1;
   _mrb_to_integer($agg_result, $87, $val, ((96852)|0));
   label = 29; break;
  case 28: 
   var $89=$agg_result;
   var $90=$tmp;
   assert(12 % 1 === 0);HEAP32[(($89)>>2)]=HEAP32[(($90)>>2)];HEAP32[((($89)+(4))>>2)]=HEAP32[((($90)+(4))>>2)];HEAP32[((($89)+(8))>>2)]=HEAP32[((($90)+(8))>>2)];
   label = 29; break;
  case 29: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_Float($agg_result, $mrb, $val) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$mrb;
   var $2=(($val+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|(0))==0;
   if ($4) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $6=(($val)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))!=0;
   if ($9) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $11=$1;
   var $12=$1;
   var $13=_mrb_class_get($12, ((104564)|0));
   _mrb_raise($11, $13, ((99400)|0));
   label = 4; break;
  case 4: 
   var $15=(($val+8)|0);
   var $16=HEAP32[(($15)>>2)];
   if ((($16)|(0))==3) {
    label = 5; break;
   }
   else if ((($16)|(0))==6) {
    label = 6; break;
   }
   else if ((($16)|(0))==16) {
    label = 7; break;
   }
   else {
   label = 8; break;
   }
  case 5: 
   var $18=$1;
   var $19=(($val)|0);
   var $20=$19;
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21)|(0));
   _mrb_float_value1324($agg_result, $18, $22);
   label = 9; break;
  case 6: 
   var $24=$agg_result;
   var $25=$val;
   assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
   label = 9; break;
  case 7: 
   var $27=$1;
   var $28=$1;
   var $29=_mrb_str_to_dbl($28, $val, 1);
   _mrb_float_value1324($agg_result, $27, $29);
   label = 9; break;
  case 8: 
   var $31=$1;
   _mrb_convert_type($agg_result, $31, $val, 6, ((98956)|0), ((98396)|0));
   label = 9; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_float_value1324($agg_result, $mrb, $f) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $v=sp;
   $1=$mrb;
   $2=$f;
   label = 2; break;
  case 2: 
   var $4=(($v+8)|0);
   HEAP32[(($4)>>2)]=6;
   var $5=$2;
   var $6=(($v)|0);
   var $7=$6;
   (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($7)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($7)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 3; break;
  case 3: 
   var $9=$agg_result;
   var $10=$v;
   assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_inspect($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2=sp;
 $1=$mrb;
 var $3=$1;
 var $4=$1;
 _mrb_funcall($2, $4, $obj, ((87376)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
 _mrb_obj_as_string($agg_result, $3, $2);
 STACKTOP = sp;
 return;
}
function _mrb_eql($mrb, $obj1, $obj2) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj1; $obj1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $obj2; $obj2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3=sp;
   $2=$mrb;
   var $4=$2;
   var $5=_mrb_obj_eq($4, $obj1, $obj2);
   var $6=(($5 << 24) >> 24)!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $1=1;
   label = 4; break;
  case 3: 
   var $9=$2;
   _mrb_funcall($3, $9, $obj1, ((98080)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($obj2)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj2)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj2)+(8))>>2)],tempInt));
   var $10=(($3+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))!=0;
   var $13=(($12)&(1));
   var $14=(($13) & 255);
   $1=$14;
   label = 4; break;
  case 4: 
   var $16=$1;
   STACKTOP = sp;
   return $16;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_true_value1329($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=2;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=1;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_bool_value1330($agg_result, $boolean) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$boolean;
   label = 2; break;
  case 2: 
   var $3=$1;
   var $4=(($3)&(255));
   var $5=(($4)|(0))!=0;
   var $6=$5 ? 2 : 0;
   var $7=(($v+8)|0);
   HEAP32[(($7)>>2)]=$6;
   var $8=(($v)|0);
   var $9=$8;
   HEAP32[(($9)>>2)]=1;
   label = 3; break;
  case 3: 
   var $11=$agg_result;
   var $12=$v;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_false_value1331($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=1;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_pool_open($mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $pool;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_malloc($2, 8);
   var $4=$3;
   $pool=$4;
   var $5=$pool;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$1;
   var $9=$pool;
   var $10=(($9)|0);
   HEAP32[(($10)>>2)]=$8;
   var $11=$pool;
   var $12=(($11+4)|0);
   HEAP32[(($12)>>2)]=0;
   label = 3; break;
  case 3: 
   var $14=$pool;
   return $14;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_pool_close($pool) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $page;
   var $tmp;
   $1=$pool;
   var $2=$1;
   var $3=(($2)|(0))!=0;
   if ($3) { label = 3; break; } else { label = 2; break; }
  case 2: 
   label = 7; break;
  case 3: 
   var $6=$1;
   var $7=(($6+4)|0);
   var $8=HEAP32[(($7)>>2)];
   $page=$8;
   label = 4; break;
  case 4: 
   var $10=$page;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $13=$page;
   $tmp=$13;
   var $14=$page;
   var $15=(($14)|0);
   var $16=HEAP32[(($15)>>2)];
   $page=$16;
   var $17=$1;
   var $18=(($17)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$tmp;
   var $21=$20;
   _mrb_free($19, $21);
   label = 4; break;
  case 6: 
   var $23=$1;
   var $24=(($23)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$1;
   var $27=$26;
   _mrb_free($25, $27);
   label = 7; break;
  case 7: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_pool_alloc($pool, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $page;
   var $n;
   $2=$pool;
   $3=$len;
   var $4=$2;
   var $5=(($4)|(0))!=0;
   if ($5) { label = 3; break; } else { label = 2; break; }
  case 2: 
   $1=0;
   label = 11; break;
  case 3: 
   var $8=$3;
   var $9=(((-$8))|0);
   var $10=$9 & 3;
   var $11=$3;
   var $12=((($11)+($10))|0);
   $3=$12;
   var $13=$2;
   var $14=(($13+4)|0);
   var $15=HEAP32[(($14)>>2)];
   $page=$15;
   label = 4; break;
  case 4: 
   var $17=$page;
   var $18=(($17)|(0))!=0;
   if ($18) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $20=$page;
   var $21=(($20+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$3;
   var $24=((($22)+($23))|0);
   var $25=$page;
   var $26=(($25+8)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($24)>>>(0)) <= (($27)>>>(0));
   if ($28) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $30=$page;
   var $31=(($30+4)|0);
   var $32=HEAP32[(($31)>>2)];
   $n=$32;
   var $33=$3;
   var $34=$page;
   var $35=(($34+4)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=((($36)+($33))|0);
   HEAP32[(($35)>>2)]=$37;
   var $38=$page;
   var $39=(($38+16)|0);
   var $40=(($39)|0);
   var $41=$n;
   var $42=(($40+$41)|0);
   var $43=$page;
   var $44=(($43+12)|0);
   HEAP32[(($44)>>2)]=$42;
   var $45=$page;
   var $46=(($45+12)|0);
   var $47=HEAP32[(($46)>>2)];
   $1=$47;
   label = 11; break;
  case 7: 
   var $49=$page;
   var $50=(($49)|0);
   var $51=HEAP32[(($50)>>2)];
   $page=$51;
   label = 4; break;
  case 8: 
   var $53=$2;
   var $54=$3;
   var $55=_page_alloc($53, $54);
   $page=$55;
   var $56=$page;
   var $57=(($56)|(0))!=0;
   if ($57) { label = 10; break; } else { label = 9; break; }
  case 9: 
   $1=0;
   label = 11; break;
  case 10: 
   var $60=$3;
   var $61=$page;
   var $62=(($61+4)|0);
   HEAP32[(($62)>>2)]=$60;
   var $63=$2;
   var $64=(($63+4)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=$page;
   var $67=(($66)|0);
   HEAP32[(($67)>>2)]=$65;
   var $68=$page;
   var $69=$2;
   var $70=(($69+4)|0);
   HEAP32[(($70)>>2)]=$68;
   var $71=$page;
   var $72=(($71+16)|0);
   var $73=(($72)|0);
   var $74=$page;
   var $75=(($74+12)|0);
   HEAP32[(($75)>>2)]=$73;
   var $76=$page;
   var $77=(($76+12)|0);
   var $78=HEAP32[(($77)>>2)];
   $1=$78;
   label = 11; break;
  case 11: 
   var $80=$1;
   return $80;
  default: assert(0, "bad label: " + label);
 }
}
function _page_alloc($pool, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $page;
   $1=$pool;
   $2=$len;
   var $3=$2;
   var $4=(($3)>>>(0)) < 16000;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $2=16000;
   label = 3; break;
  case 3: 
   var $7=$1;
   var $8=(($7)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=$2;
   var $11=((($10)+(16))|0);
   var $12=_mrb_malloc($9, $11);
   var $13=$12;
   $page=$13;
   var $14=$page;
   var $15=(($14)|(0))!=0;
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $17=$page;
   var $18=(($17+4)|0);
   HEAP32[(($18)>>2)]=0;
   var $19=$2;
   var $20=$page;
   var $21=(($20+8)|0);
   HEAP32[(($21)>>2)]=$19;
   label = 5; break;
  case 5: 
   var $23=$page;
   return $23;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_range_new($agg_result, $mrb, $beg, $end, $excl) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $beg; $beg = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($beg)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($beg)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($beg)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $end; $end = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($end)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($end)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($end)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 var $r;
 $1=$mrb;
 $2=$excl;
 var $3=$1;
 var $4=$1;
 var $5=_mrb_class_get($4, ((103788)|0));
 var $6=_mrb_obj_alloc($3, 17, $5);
 var $7=$6;
 $r=$7;
 var $8=$1;
 _range_check($8, $beg, $end);
 var $9=$1;
 var $10=_mrb_malloc($9, 24);
 var $11=$10;
 var $12=$r;
 var $13=(($12+12)|0);
 HEAP32[(($13)>>2)]=$11;
 var $14=$r;
 var $15=(($14+12)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($16)|0);
 var $18=$17;
 var $19=$beg;
 assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
 var $20=$r;
 var $21=(($20+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+12)|0);
 var $24=$23;
 var $25=$end;
 assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
 var $26=$2;
 var $27=$r;
 var $28=(($27+16)|0);
 HEAP32[(($28)>>2)]=$26;
 var $29=$r;
 var $30=$29;
 _mrb_obj_value1366($agg_result, $30);
 STACKTOP = sp;
 return;
}
function _range_check($mrb, $a, $b) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ans=sp;
   var $ta;
   var $tb;
   var $2=(sp)+(12);
   $1=$mrb;
   var $3=(($a+8)|0);
   var $4=HEAP32[(($3)>>2)];
   $ta=$4;
   var $5=(($b+8)|0);
   var $6=HEAP32[(($5)>>2)];
   $tb=$6;
   var $7=$ta;
   var $8=(($7)|(0))==3;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=$ta;
   var $11=(($10)|(0))==6;
   if ($11) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $13=$tb;
   var $14=(($13)|(0))==3;
   if ($14) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $16=$tb;
   var $17=(($16)|(0))==6;
   if ($17) { label = 5; break; } else { label = 6; break; }
  case 5: 
   label = 9; break;
  case 6: 
   var $20=$1;
   _mrb_funcall($2, $20, $a, ((99784)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($b)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($b)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($b)+(8))>>2)],tempInt));
   var $21=$ans;
   var $22=$2;
   assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
   var $23=(($ans+8)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|(0))==0;
   if ($25) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $27=(($ans)|0);
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29)|(0))!=0;
   if ($30) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $32=$1;
   var $33=$1;
   var $34=_mrb_class_get($33, ((99384)|0));
   _mrb_raise($32, $34, ((98936)|0));
   label = 9; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_value1366($agg_result, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   var $b;
   $1=$p;
   var $2=$1;
   var $3=$2;
   $b=$3;
   label = 2; break;
  case 2: 
   var $5=$b;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 255;
   var $9=(($v+8)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=$1;
   var $11=(($v)|0);
   var $12=$11;
   HEAP32[(($12)>>2)]=$10;
   label = 3; break;
  case 3: 
   var $14=$agg_result;
   var $15=$v;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_range_beg($agg_result, $mrb, $range) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $r;
 $1=$mrb;
 var $2=(($range)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 $r=$5;
 var $6=$r;
 var $7=(($6+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8)|0);
 var $10=$agg_result;
 var $11=$9;
 assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_range_end($agg_result, $mrb, $range) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $r;
 $1=$mrb;
 var $2=(($range)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 $r=$5;
 var $6=$r;
 var $7=(($6+12)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+12)|0);
 var $10=$agg_result;
 var $11=$9;
 assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_range_excl($agg_result, $mrb, $range) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $r;
 $1=$mrb;
 var $2=(($range)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 $r=$5;
 var $6=$r;
 var $7=(($6+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8) & 255);
 _mrb_bool_value1367($agg_result, $9);
 STACKTOP = sp;
 return;
}
function _mrb_bool_value1367($agg_result, $boolean) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$boolean;
   label = 2; break;
  case 2: 
   var $3=$1;
   var $4=(($3)&(255));
   var $5=(($4)|(0))!=0;
   var $6=$5 ? 2 : 0;
   var $7=(($v+8)|0);
   HEAP32[(($7)>>2)]=$6;
   var $8=(($v)|0);
   var $9=$8;
   HEAP32[(($9)>>2)]=1;
   label = 3; break;
  case 3: 
   var $11=$agg_result;
   var $12=$v;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_range_initialize($agg_result, $mrb, $range) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $beg=sp;
   var $end=(sp)+(12);
   var $exclusive=(sp)+(24);
   var $n;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((105080)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$beg,HEAP32[(((tempInt)+(4))>>2)]=$end,HEAP32[(((tempInt)+(8))>>2)]=$exclusive,tempInt));
   $n=$3;
   var $4=$n;
   var $5=(($4)|(0))!=3;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   HEAP8[($exclusive)]=0;
   label = 3; break;
  case 3: 
   var $8=$1;
   var $9=HEAP8[($exclusive)];
   var $10=(($9)&(255));
   _range_init($8, $range, $beg, $end, $10);
   var $11=$agg_result;
   var $12=$range;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _range_init($mrb, $range, $beg, $end, $exclude_end) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $beg; $beg = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($beg)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($beg)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($beg)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $end; $end = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($end)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($end)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($end)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $r;
   $1=$mrb;
   $2=$exclude_end;
   var $3=(($range)|0);
   var $4=$3;
   var $5=HEAP32[(($4)>>2)];
   var $6=$5;
   $r=$6;
   var $7=$1;
   _range_check($7, $beg, $end);
   var $8=$2;
   var $9=$r;
   var $10=(($9+16)|0);
   HEAP32[(($10)>>2)]=$8;
   var $11=$r;
   var $12=(($11+12)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))!=0;
   if ($14) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $16=$1;
   var $17=_mrb_malloc($16, 24);
   var $18=$17;
   var $19=$r;
   var $20=(($19+12)|0);
   HEAP32[(($20)>>2)]=$18;
   label = 3; break;
  case 3: 
   var $22=$r;
   var $23=(($22+12)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($24)|0);
   var $26=$25;
   var $27=$beg;
   assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
   var $28=$r;
   var $29=(($28+12)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=(($30+12)|0);
   var $32=$31;
   var $33=$end;
   assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_range_eq($agg_result, $mrb, $range) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $rr;
   var $ro;
   var $obj=sp;
   var $2=(sp)+(12);
   var $3=(sp)+(24);
   $1=$mrb;
   var $4=$1;
   var $5=_mrb_get_args($4, ((100376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$obj,tempInt));
   var $6=$1;
   var $7=_mrb_obj_equal($6, $range, $obj);
   var $8=(($7 << 24) >> 24)!=0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _mrb_true_value1368($agg_result);
   label = 10; break;
  case 3: 
   var $11=$1;
   var $12=$1;
   var $13=_mrb_obj_class($12, $range);
   var $14=_mrb_obj_is_instance_of($11, $obj, $13);
   var $15=(($14 << 24) >> 24)!=0;
   if ($15) { label = 5; break; } else { label = 4; break; }
  case 4: 
   _mrb_false_value1369($agg_result);
   label = 10; break;
  case 5: 
   var $18=(($range)|0);
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $21=$20;
   $rr=$21;
   var $22=(($obj)|0);
   var $23=$22;
   var $24=HEAP32[(($23)>>2)];
   var $25=$24;
   $ro=$25;
   var $26=$1;
   var $27=$rr;
   var $28=(($27+12)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29)|0);
   var $31=$ro;
   var $32=(($31+12)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33)|0);
   _mrb_funcall($2, $26, $30, ((96760)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($34)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($34)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($34)+(8))>>2)],tempInt));
   var $35=(($2+8)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36)|(0))!=0;
   if ($37) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $39=$1;
   var $40=$rr;
   var $41=(($40+12)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($42+12)|0);
   var $44=$ro;
   var $45=(($44+12)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($46+12)|0);
   _mrb_funcall($3, $39, $43, ((96760)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($47)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($47)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($47)+(8))>>2)],tempInt));
   var $48=(($3+8)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49)|(0))!=0;
   if ($50) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $52=$rr;
   var $53=(($52+16)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=$ro;
   var $56=(($55+16)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($54)|(0))!=(($57)|(0));
   if ($58) { label = 8; break; } else { label = 9; break; }
  case 8: 
   _mrb_false_value1369($agg_result);
   label = 10; break;
  case 9: 
   _mrb_true_value1368($agg_result);
   label = 10; break;
  case 10: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_true_value1368($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=2;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=1;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_false_value1369($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=1;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_range_include($agg_result, $mrb, $range) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $val=sp;
   var $r;
   var $beg=(sp)+(12);
   var $end=(sp)+(24);
   var $include_p;
   $1=$mrb;
   var $2=(($range)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $r=$5;
   var $6=$1;
   var $7=_mrb_get_args($6, ((100376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$val,tempInt));
   var $8=$r;
   var $9=(($8+12)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|0);
   var $12=$beg;
   var $13=$11;
   assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
   var $14=$r;
   var $15=(($14+12)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16+12)|0);
   var $18=$end;
   var $19=$17;
   assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
   var $20=$1;
   var $21=_r_le($20, $beg, $val);
   var $22=(($21)&(255));
   var $23=(($22)|(0))!=0;
   if ($23) { label = 2; break; } else { var $42 = 0;label = 6; break; }
  case 2: 
   var $25=$r;
   var $26=(($25+16)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27)|(0))!=0;
   if ($28) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $30=$1;
   var $31=_r_gt($30, $end, $val);
   var $32=(($31)&(255));
   var $33=(($32)|(0))!=0;
   if ($33) { var $40 = 1;label = 5; break; } else { label = 4; break; }
  case 4: 
   var $35=$1;
   var $36=_r_ge($35, $end, $val);
   var $37=(($36)&(255));
   var $38=(($37)|(0))!=0;
   var $40 = $38;label = 5; break;
  case 5: 
   var $40;
   var $42 = $40;label = 6; break;
  case 6: 
   var $42;
   var $43=(($42)&(1));
   var $44=(($43) & 255);
   $include_p=$44;
   var $45=$include_p;
   _mrb_bool_value1367($agg_result, $45);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _r_le($mrb, $a, $b) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $r=sp;
   var $c;
   $2=$mrb;
   var $3=$2;
   _mrb_funcall($r, $3, $a, ((99784)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($b)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($b)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($b)+(8))>>2)],tempInt));
   var $4=(($r+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))==3;
   if ($6) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $8=(($r)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   $c=$10;
   var $11=$c;
   var $12=(($11)|(0))==0;
   if ($12) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $14=$c;
   var $15=(($14)|(0))==-1;
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $1=1;
   label = 7; break;
  case 5: 
   label = 6; break;
  case 6: 
   $1=0;
   label = 7; break;
  case 7: 
   var $20=$1;
   STACKTOP = sp;
   return $20;
  default: assert(0, "bad label: " + label);
 }
}
function _r_gt($mrb, $a, $b) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $r=sp;
   $2=$mrb;
   var $3=$2;
   _mrb_funcall($r, $3, $a, ((99784)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($b)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($b)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($b)+(8))>>2)],tempInt));
   var $4=(($r+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))==3;
   if ($6) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $8=(($r)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))==1;
   if ($11) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $1=1;
   label = 6; break;
  case 4: 
   label = 5; break;
  case 5: 
   $1=0;
   label = 6; break;
  case 6: 
   var $16=$1;
   STACKTOP = sp;
   return $16;
  default: assert(0, "bad label: " + label);
 }
}
function _r_ge($mrb, $a, $b) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $r=sp;
   var $c;
   $2=$mrb;
   var $3=$2;
   _mrb_funcall($r, $3, $a, ((99784)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($b)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($b)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($b)+(8))>>2)],tempInt));
   var $4=(($r+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))==3;
   if ($6) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $8=(($r)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   $c=$10;
   var $11=$c;
   var $12=(($11)|(0))==0;
   if ($12) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $14=$c;
   var $15=(($14)|(0))==1;
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $1=1;
   label = 7; break;
  case 5: 
   label = 6; break;
  case 6: 
   $1=0;
   label = 7; break;
  case 7: 
   var $20=$1;
   STACKTOP = sp;
   return $20;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_range_each($agg_result, $mrb, $range) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$agg_result;
 var $3=$range;
 assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_mruby_array_ext_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _GENERATED_TMP_mrb_mruby_bin_mirb_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _GENERATED_TMP_mrb_mruby_bin_mruby_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _GENERATED_TMP_mrb_mruby_enum_ext_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _mrb_range_beg_len($mrb, $range, $begp, $lenp, $len) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $beg;
   var $end;
   var $b;
   var $e;
   var $r;
   $2=$mrb;
   $3=$begp;
   $4=$lenp;
   $5=$len;
   var $6=(($range)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=$8;
   $r=$9;
   var $10=(($range+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))!=17;
   if ($12) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $14=$2;
   var $15=$2;
   var $16=_mrb_class_get($15, ((94188)|0));
   _mrb_raise($14, $16, ((91660)|0));
   label = 3; break;
  case 3: 
   var $18=$r;
   var $19=(($18+12)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|0);
   var $22=(($21)|0);
   var $23=$22;
   var $24=HEAP32[(($23)>>2)];
   $b=$24;
   $beg=$24;
   var $25=$r;
   var $26=(($25+12)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27+12)|0);
   var $29=(($28)|0);
   var $30=$29;
   var $31=HEAP32[(($30)>>2)];
   $e=$31;
   $end=$31;
   var $32=$beg;
   var $33=(($32)|(0)) < 0;
   if ($33) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $35=$5;
   var $36=$beg;
   var $37=((($36)+($35))|0);
   $beg=$37;
   var $38=$beg;
   var $39=(($38)|(0)) < 0;
   if ($39) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $1=0;
   label = 19; break;
  case 6: 
   label = 7; break;
  case 7: 
   var $43=$beg;
   var $44=$5;
   var $45=(($43)|(0)) > (($44)|(0));
   if ($45) { label = 8; break; } else { label = 9; break; }
  case 8: 
   $1=0;
   label = 19; break;
  case 9: 
   var $48=$end;
   var $49=$5;
   var $50=(($48)|(0)) > (($49)|(0));
   if ($50) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $52=$5;
   $end=$52;
   label = 11; break;
  case 11: 
   var $54=$end;
   var $55=(($54)|(0)) < 0;
   if ($55) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $57=$5;
   var $58=$end;
   var $59=((($58)+($57))|0);
   $end=$59;
   label = 13; break;
  case 13: 
   var $61=$r;
   var $62=(($61+16)|0);
   var $63=HEAP32[(($62)>>2)];
   var $64=(($63)|(0))!=0;
   if ($64) { label = 16; break; } else { label = 14; break; }
  case 14: 
   var $66=$end;
   var $67=$5;
   var $68=(($66)|(0)) < (($67)|(0));
   if ($68) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $70=$end;
   var $71=((($70)+(1))|0);
   $end=$71;
   label = 16; break;
  case 16: 
   var $73=$end;
   var $74=$beg;
   var $75=((($73)-($74))|0);
   $5=$75;
   var $76=$5;
   var $77=(($76)|(0)) < 0;
   if ($77) { label = 17; break; } else { label = 18; break; }
  case 17: 
   $5=0;
   label = 18; break;
  case 18: 
   var $80=$beg;
   var $81=$3;
   HEAP32[(($81)>>2)]=$80;
   var $82=$5;
   var $83=$4;
   HEAP32[(($83)>>2)]=$82;
   $1=1;
   label = 19; break;
  case 19: 
   var $85=$1;
   STACKTOP = sp;
   return $85;
  default: assert(0, "bad label: " + label);
 }
}
function _range_initialize_copy($agg_result, $mrb, $copy) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $copy; $copy = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($copy)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($copy)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($copy)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $src=sp;
   var $r;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((100376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$src,tempInt));
   var $4=$1;
   var $5=_mrb_obj_equal($4, $copy, $src);
   var $6=(($5 << 24) >> 24)!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$agg_result;
   var $9=$copy;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   label = 6; break;
  case 3: 
   var $11=$1;
   var $12=$1;
   var $13=_mrb_obj_class($12, $copy);
   var $14=_mrb_obj_is_instance_of($11, $src, $13);
   var $15=(($14 << 24) >> 24)!=0;
   if ($15) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $17=$1;
   var $18=$1;
   var $19=_mrb_class_get($18, ((94188)|0));
   _mrb_raise($17, $19, ((89528)|0));
   label = 5; break;
  case 5: 
   var $21=(($src)|0);
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=$23;
   $r=$24;
   var $25=$1;
   var $26=$r;
   var $27=(($26+12)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|0);
   var $30=$r;
   var $31=(($30+12)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32+12)|0);
   var $34=$r;
   var $35=(($34+16)|0);
   var $36=HEAP32[(($35)>>2)];
   _range_init($25, $copy, $29, $33, $36);
   var $37=$agg_result;
   var $38=$copy;
   assert(12 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_init_range($mrb) {
 var label = 0;
 var $1;
 var $r;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=(($3+44)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_mrb_define_class($2, ((103788)|0), $5);
 $r=$6;
 var $7=$r;
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=$9 >>> 11;
 var $11=$10 & 2097151;
 var $12=$11 & -256;
 var $13=$12 | 17;
 var $14=$r;
 var $15=$13 & 2097151;
 var $16=$14;
 var $17=$15 & 2097151;
 var $18=$17 << 11;
 var $19=HEAP32[(($16)>>2)];
 var $20=$19 & 2047;
 var $21=$20 | $18;
 HEAP32[(($16)>>2)]=$21;
 var $22=$1;
 var $23=$r;
 var $24=$1;
 var $25=_mrb_class_get($24, ((88332)|0));
 _mrb_include_module($22, $23, $25);
 var $26=$1;
 var $27=$r;
 _mrb_define_method($26, $27, ((87352)|0), 618, 0);
 var $28=$1;
 var $29=$r;
 _mrb_define_method($28, $29, ((86560)|0), 596, 0);
 var $30=$1;
 var $31=$r;
 _mrb_define_method($30, $31, ((96760)|0), 648, 262144);
 var $32=$1;
 var $33=$r;
 _mrb_define_method($32, $33, ((105940)|0), 394, 262144);
 var $34=$1;
 var $35=$r;
 _mrb_define_method($34, $35, ((105316)|0), 74, 0);
 var $36=$1;
 var $37=$r;
 _mrb_define_method($36, $37, ((104532)|0), 118, 0);
 var $38=$1;
 var $39=$r;
 _mrb_define_method($38, $39, ((104040)|0), 618, 0);
 var $40=$1;
 var $41=$r;
 _mrb_define_method($40, $41, ((103472)|0), 394, 262144);
 var $42=$1;
 var $43=$r;
 _mrb_define_method($42, $43, ((102972)|0), 382, 4096);
 var $44=$1;
 var $45=$r;
 _mrb_define_method($44, $45, ((102608)|0), 596, 0);
 var $46=$1;
 var $47=$r;
 _mrb_define_method($46, $47, ((102224)|0), 394, 262144);
 var $48=$1;
 var $49=$r;
 _mrb_define_method($48, $49, ((101808)|0), 192, 0);
 var $50=$1;
 var $51=$r;
 _mrb_define_method($50, $51, ((101348)|0), 248, 0);
 var $52=$1;
 var $53=$r;
 _mrb_define_method($52, $53, ((100852)|0), 90, 262144);
 var $54=$1;
 var $55=$r;
 _mrb_define_method($54, $55, ((100548)|0), 702, 262144);
 return;
}
function _range_to_s($agg_result, $mrb, $range) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 84)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $str=sp;
 var $str2=(sp)+(12);
 var $r;
 var $2=(sp)+(24);
 var $3=(sp)+(36);
 var $4=(sp)+(48);
 var $5=(sp)+(60);
 var $6=(sp)+(72);
 $1=$mrb;
 var $7=(($range)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=$9;
 $r=$10;
 var $11=$1;
 var $12=$r;
 var $13=(($12+12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14)|0);
 _mrb_obj_as_string($2, $11, $15);
 var $16=$str;
 var $17=$2;
 assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
 var $18=$1;
 var $19=$r;
 var $20=(($19+12)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(($21+12)|0);
 _mrb_obj_as_string($3, $18, $22);
 var $23=$str2;
 var $24=$3;
 assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
 var $25=$1;
 _mrb_str_dup($4, $25, $str);
 var $26=$str;
 var $27=$4;
 assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
 var $28=$1;
 var $29=$r;
 var $30=(($29+16)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($31)|(0))!=0;
 var $33=$32 ? 3 : 2;
 _mrb_str_cat($5, $28, $str, ((100040)|0), $33);
 var $34=$1;
 _mrb_str_append($6, $34, $str, $str2);
 var $35=$agg_result;
 var $36=$str;
 assert(12 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];HEAP32[((($35)+(8))>>2)]=HEAP32[((($36)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _range_inspect($agg_result, $mrb, $range) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _inspect_range($agg_result, $2, $range, 0);
 STACKTOP = sp;
 return;
}
function _range_eql($agg_result, $mrb, $range) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $obj=sp;
   var $r;
   var $o;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((100376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$obj,tempInt));
   var $4=$1;
   var $5=_mrb_obj_equal($4, $range, $obj);
   var $6=(($5 << 24) >> 24)!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _mrb_true_value1368($agg_result);
   label = 12; break;
  case 3: 
   var $9=$1;
   var $10=$1;
   var $11=_mrb_class_get($10, ((103788)|0));
   var $12=_mrb_obj_is_kind_of($9, $obj, $11);
   var $13=(($12 << 24) >> 24)!=0;
   if ($13) { label = 5; break; } else { label = 4; break; }
  case 4: 
   _mrb_false_value1369($agg_result);
   label = 12; break;
  case 5: 
   var $16=(($obj+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0))!=17;
   if ($18) { label = 6; break; } else { label = 7; break; }
  case 6: 
   _mrb_false_value1369($agg_result);
   label = 12; break;
  case 7: 
   var $21=(($range)|0);
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=$23;
   $r=$24;
   var $25=(($obj)|0);
   var $26=$25;
   var $27=HEAP32[(($26)>>2)];
   var $28=$27;
   $o=$28;
   var $29=$1;
   var $30=$r;
   var $31=(($30+12)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)|0);
   var $34=$o;
   var $35=(($34+12)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36)|0);
   var $38=_mrb_eql($29, $33, $37);
   var $39=(($38 << 24) >> 24)!=0;
   if ($39) { label = 8; break; } else { label = 10; break; }
  case 8: 
   var $41=$1;
   var $42=$r;
   var $43=(($42+12)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=(($44+12)|0);
   var $46=$o;
   var $47=(($46+12)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($48+12)|0);
   var $50=_mrb_eql($41, $45, $49);
   var $51=(($50 << 24) >> 24)!=0;
   if ($51) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $53=$r;
   var $54=(($53+16)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=$o;
   var $57=(($56+16)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($55)|(0))!=(($58)|(0));
   if ($59) { label = 10; break; } else { label = 11; break; }
  case 10: 
   _mrb_false_value1369($agg_result);
   label = 12; break;
  case 11: 
   _mrb_true_value1368($agg_result);
   label = 12; break;
  case 12: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _inspect_range($agg_result, $mrb, $range, $recur) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 84)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $str=sp;
   var $str2=(sp)+(12);
   var $r;
   var $idx;
   var $3=(sp)+(24);
   var $4=(sp)+(36);
   var $5=(sp)+(48);
   var $6=(sp)+(60);
   var $7=(sp)+(72);
   $1=$mrb;
   $2=$recur;
   var $8=(($range)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10;
   $r=$11;
   var $12=$2;
   var $13=(($12)|(0))!=0;
   if ($13) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $15=$r;
   var $16=(($15+16)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0))!=0;
   var $19=$18 ? 0 : 1;
   $idx=$19;
   var $20=$1;
   var $21=$idx;
   var $22=((75496+((($21)*(14))&-1))|0);
   var $23=(($22)|0);
   var $24=$idx;
   var $25=((75524+($24<<2))|0);
   var $26=HEAP32[(($25)>>2)];
   _mrb_str_new($agg_result, $20, $23, $26);
   label = 4; break;
  case 3: 
   var $28=$1;
   var $29=$r;
   var $30=(($29+12)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31)|0);
   _mrb_inspect($3, $28, $32);
   var $33=$str;
   var $34=$3;
   assert(12 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];HEAP32[((($33)+(8))>>2)]=HEAP32[((($34)+(8))>>2)];
   var $35=$1;
   var $36=$r;
   var $37=(($36+12)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38+12)|0);
   _mrb_inspect($4, $35, $39);
   var $40=$str2;
   var $41=$4;
   assert(12 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];HEAP32[((($40)+(8))>>2)]=HEAP32[((($41)+(8))>>2)];
   var $42=$1;
   _mrb_str_dup($5, $42, $str);
   var $43=$str;
   var $44=$5;
   assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
   var $45=$1;
   var $46=$r;
   var $47=(($46+16)|0);
   var $48=HEAP32[(($47)>>2)];
   var $49=(($48)|(0))!=0;
   var $50=$49 ? 3 : 2;
   _mrb_str_cat($6, $45, $str, ((100040)|0), $50);
   var $51=$1;
   _mrb_str_append($7, $51, $str, $str2);
   var $52=$agg_result;
   var $53=$str;
   assert(12 % 1 === 0);HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[((($52)+(4))>>2)]=HEAP32[((($53)+(4))>>2)];HEAP32[((($52)+(8))>>2)]=HEAP32[((($53)+(8))>>2)];
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_init_mrbgems($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _GENERATED_TMP_mrb_mruby_sprintf_gem_init($2);
 var $3=$1;
 _GENERATED_TMP_mrb_mruby_print_gem_init($3);
 var $4=$1;
 _GENERATED_TMP_mrb_mruby_math_gem_init($4);
 var $5=$1;
 _GENERATED_TMP_mrb_mruby_time_gem_init($5);
 var $6=$1;
 _GENERATED_TMP_mrb_mruby_struct_gem_init($6);
 var $7=$1;
 _GENERATED_TMP_mrb_mruby_enum_ext_gem_init($7);
 var $8=$1;
 _GENERATED_TMP_mrb_mruby_string_ext_gem_init($8);
 var $9=$1;
 _GENERATED_TMP_mrb_mruby_numeric_ext_gem_init($9);
 var $10=$1;
 _GENERATED_TMP_mrb_mruby_array_ext_gem_init($10);
 var $11=$1;
 _GENERATED_TMP_mrb_mruby_hash_ext_gem_init($11);
 var $12=$1;
 _GENERATED_TMP_mrb_mruby_range_ext_gem_init($12);
 var $13=$1;
 _GENERATED_TMP_mrb_mruby_proc_ext_gem_init($13);
 var $14=$1;
 _GENERATED_TMP_mrb_mruby_symbol_ext_gem_init($14);
 var $15=$1;
 _GENERATED_TMP_mrb_mruby_random_gem_init($15);
 var $16=$1;
 _GENERATED_TMP_mrb_mruby_object_ext_gem_init($16);
 var $17=$1;
 _GENERATED_TMP_mrb_mruby_objectspace_gem_init($17);
 var $18=$1;
 _GENERATED_TMP_mrb_mruby_fiber_gem_init($18);
 var $19=$1;
 _GENERATED_TMP_mrb_mruby_toplevel_ext_gem_init($19);
 var $20=$1;
 _GENERATED_TMP_mrb_mruby_bin_mirb_gem_init($20);
 var $21=$1;
 _GENERATED_TMP_mrb_mruby_bin_mruby_gem_init($21);
 return;
}
function _mrb_final_mrbgems($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _GENERATED_TMP_mrb_mruby_sprintf_gem_final($2);
 var $3=$1;
 _GENERATED_TMP_mrb_mruby_print_gem_final($3);
 var $4=$1;
 _GENERATED_TMP_mrb_mruby_math_gem_final($4);
 var $5=$1;
 _GENERATED_TMP_mrb_mruby_time_gem_final($5);
 var $6=$1;
 _GENERATED_TMP_mrb_mruby_struct_gem_final($6);
 var $7=$1;
 _GENERATED_TMP_mrb_mruby_enum_ext_gem_final($7);
 var $8=$1;
 _GENERATED_TMP_mrb_mruby_string_ext_gem_final($8);
 var $9=$1;
 _GENERATED_TMP_mrb_mruby_numeric_ext_gem_final($9);
 var $10=$1;
 _GENERATED_TMP_mrb_mruby_array_ext_gem_final($10);
 var $11=$1;
 _GENERATED_TMP_mrb_mruby_hash_ext_gem_final($11);
 var $12=$1;
 _GENERATED_TMP_mrb_mruby_range_ext_gem_final($12);
 var $13=$1;
 _GENERATED_TMP_mrb_mruby_proc_ext_gem_final($13);
 var $14=$1;
 _GENERATED_TMP_mrb_mruby_symbol_ext_gem_final($14);
 var $15=$1;
 _GENERATED_TMP_mrb_mruby_random_gem_final($15);
 var $16=$1;
 _GENERATED_TMP_mrb_mruby_object_ext_gem_final($16);
 var $17=$1;
 _GENERATED_TMP_mrb_mruby_objectspace_gem_final($17);
 var $18=$1;
 _GENERATED_TMP_mrb_mruby_fiber_gem_final($18);
 var $19=$1;
 _GENERATED_TMP_mrb_mruby_toplevel_ext_gem_final($19);
 var $20=$1;
 _GENERATED_TMP_mrb_mruby_bin_mirb_gem_final($20);
 var $21=$1;
 _GENERATED_TMP_mrb_mruby_bin_mruby_gem_final($21);
 return;
}
function _GENERATED_TMP_mrb_mruby_array_ext_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_mruby_array_ext_gem_final($2);
 return;
}
function _mrb_mruby_array_ext_gem_init($mrb) {
 var label = 0;
 var $1;
 var $a;
 $1=$mrb;
 var $2=$1;
 var $3=(($2+64)|0);
 var $4=HEAP32[(($3)>>2)];
 $a=$4;
 var $5=$1;
 var $6=$a;
 _mrb_define_class_method($5, $6, ((103664)|0), 642, 262144);
 var $7=$1;
 var $8=$a;
 _mrb_define_method($7, $8, ((105072)|0), 20, 262144);
 var $9=$1;
 var $10=$a;
 _mrb_define_method($9, $10, ((100372)|0), 464, 262144);
 var $11=$1;
 var $12=$a;
 _mrb_define_method($11, $12, ((96752)|0), 516, 262144);
 return;
}
function _mrb_ary_s_try_convert($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $ary=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((94184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$ary,tempInt));
 var $4=$1;
 _mrb_check_array_type($agg_result, $4, $ary);
 STACKTOP = sp;
 return;
}
function _mrb_ary_assoc($agg_result, $mrb, $ary) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $i;
   var $v=sp;
   var $k=(sp)+(12);
   var $2=(sp)+(24);
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_get_args($3, ((94184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$k,tempInt));
   $i=0;
   label = 2; break;
  case 2: 
   var $6=$i;
   var $7=(($ary)|0);
   var $8=$7;
   var $9=HEAP32[(($8)>>2)];
   var $10=$9;
   var $11=(($10+12)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($6)|(0)) < (($12)|(0));
   if ($13) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $15=$1;
   var $16=$i;
   var $17=(($ary)|0);
   var $18=$17;
   var $19=HEAP32[(($18)>>2)];
   var $20=$19;
   var $21=(($20+20)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+((($16)*(12))&-1))|0);
   _mrb_check_array_type($2, $15, $23);
   var $24=$v;
   var $25=$2;
   assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
   var $26=(($v+8)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27)|(0))==0;
   if ($28) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $30=(($v)|0);
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)|(0))!=0;
   if ($33) { label = 5; break; } else { label = 8; break; }
  case 5: 
   var $35=(($v)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=$37;
   var $39=(($38+12)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($40)|(0)) > 0;
   if ($41) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $43=$1;
   var $44=(($v)|0);
   var $45=$44;
   var $46=HEAP32[(($45)>>2)];
   var $47=$46;
   var $48=(($47+20)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=(($49)|0);
   var $51=_mrb_equal($43, $50, $k);
   var $52=(($51)&(255));
   var $53=(($52)|(0))!=0;
   if ($53) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $55=$agg_result;
   var $56=$v;
   assert(12 % 1 === 0);HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];HEAP32[((($55)+(4))>>2)]=HEAP32[((($56)+(4))>>2)];HEAP32[((($55)+(8))>>2)]=HEAP32[((($56)+(8))>>2)];
   label = 11; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $59=$i;
   var $60=((($59)+(1))|0);
   $i=$60;
   label = 2; break;
  case 10: 
   _mrb_nil_value1392($agg_result);
   label = 11; break;
  case 11: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_ary_at($agg_result, $mrb, $ary) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $pos=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((91656)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$pos,tempInt));
 var $4=HEAP32[(($pos)>>2)];
 _mrb_ary_entry($agg_result, $ary, $4);
 STACKTOP = sp;
 return;
}
function _mrb_ary_rassoc($agg_result, $mrb, $ary) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $i;
   var $v=sp;
   var $value=(sp)+(12);
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((94184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$value,tempInt));
   $i=0;
   label = 2; break;
  case 2: 
   var $5=$i;
   var $6=(($ary)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=$8;
   var $10=(($9+12)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($5)|(0)) < (($11)|(0));
   if ($12) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $14=$i;
   var $15=(($ary)|0);
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $18=$17;
   var $19=(($18+20)|0);
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20+((($14)*(12))&-1))|0);
   var $22=$v;
   var $23=$21;
   assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
   var $24=(($v+8)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=(($25)|(0))==14;
   if ($26) { label = 4; break; } else { label = 7; break; }
  case 4: 
   var $28=(($v)|0);
   var $29=$28;
   var $30=HEAP32[(($29)>>2)];
   var $31=$30;
   var $32=(($31+12)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33)|(0)) > 1;
   if ($34) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $36=$1;
   var $37=(($v)|0);
   var $38=$37;
   var $39=HEAP32[(($38)>>2)];
   var $40=$39;
   var $41=(($40+20)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($42+12)|0);
   var $44=_mrb_equal($36, $43, $value);
   var $45=(($44)&(255));
   var $46=(($45)|(0))!=0;
   if ($46) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $48=$agg_result;
   var $49=$v;
   assert(12 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($49)+(4))>>2)];HEAP32[((($48)+(8))>>2)]=HEAP32[((($49)+(8))>>2)];
   label = 10; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $52=$i;
   var $53=((($52)+(1))|0);
   $i=$53;
   label = 2; break;
  case 9: 
   _mrb_nil_value1392($agg_result);
   label = 10; break;
  case 10: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value1392($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _GENERATED_TMP_mrb_mruby_bin_mirb_gem_init($mrb) {
 var label = 0;
 var $1;
 var $ai;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_gc_arena_save($2);
 $ai=$3;
 var $4=$1;
 var $5=$ai;
 _mrb_gc_arena_restore($4, $5);
 return;
}
function _GENERATED_TMP_mrb_mruby_bin_mruby_gem_init($mrb) {
 var label = 0;
 var $1;
 var $ai;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_gc_arena_save($2);
 $ai=$3;
 var $4=$1;
 var $5=$ai;
 _mrb_gc_arena_restore($4, $5);
 return;
}
function _GENERATED_TMP_mrb_mruby_fiber_gem_init($mrb) {
 var label = 0;
 var $1;
 var $ai;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_gc_arena_save($2);
 $ai=$3;
 var $4=$1;
 _mrb_mruby_fiber_gem_init($4);
 var $5=$1;
 var $6=$ai;
 _mrb_gc_arena_restore($5, $6);
 return;
}
function _GENERATED_TMP_mrb_mruby_fiber_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_mruby_fiber_gem_final($2);
 return;
}
function _GENERATED_TMP_mrb_mruby_array_ext_gem_init($mrb) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ai;
   var $2=sp;
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_gc_arena_save($3);
   $ai=$4;
   var $5=$1;
   _mrb_mruby_array_ext_gem_init($5);
   var $6=$1;
   _mrb_load_irep($2, $6, ((83296)|0));
   var $7=$1;
   var $8=(($7+16)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$1;
   _mrb_print_error($12);
   _exit(1);
   throw "Reached an unreachable!";
  case 3: 
   var $14=$1;
   var $15=$ai;
   _mrb_gc_arena_restore($14, $15);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _GENERATED_TMP_mrb_mruby_enum_ext_gem_init($mrb) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ai;
   var $2=sp;
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_gc_arena_save($3);
   $ai=$4;
   var $5=$1;
   _mrb_load_irep($2, $5, ((81072)|0));
   var $6=$1;
   var $7=(($6+16)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$1;
   _mrb_print_error($11);
   _exit(1);
   throw "Reached an unreachable!";
  case 3: 
   var $13=$1;
   var $14=$ai;
   _mrb_gc_arena_restore($13, $14);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mruby_fiber_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _mrb_mruby_hash_ext_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _mrb_mruby_fiber_gem_init($mrb) {
 var label = 0;
 var $1;
 var $c;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=(($3+44)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_mrb_define_class($2, ((103596)|0), $5);
 $c=$6;
 var $7=$c;
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=$9 >>> 11;
 var $11=$10 & 2097151;
 var $12=$11 & -256;
 var $13=$12 | 22;
 var $14=$c;
 var $15=$13 & 2097151;
 var $16=$14;
 var $17=$15 & 2097151;
 var $18=$17 << 11;
 var $19=HEAP32[(($16)>>2)];
 var $20=$19 & 2047;
 var $21=$20 | $18;
 HEAP32[(($16)>>2)]=$21;
 var $22=$1;
 var $23=$c;
 _mrb_define_method($22, $23, ((105048)|0), 244, 0);
 var $24=$1;
 var $25=$c;
 _mrb_define_method($24, $25, ((100360)|0), 224, 4096);
 var $26=$1;
 var $27=$c;
 _mrb_define_method($26, $27, ((96736)|0), 502, 0);
 var $28=$1;
 var $29=$c;
 _mrb_define_class_method($28, $29, ((94168)|0), 80, 4096);
 return;
}
function _fiber_init($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $f;
   var $c;
   var $p;
   var $ci;
   var $blk=sp;
   $1=$mrb;
   var $2=(($self)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $f=$5;
   var $6=$1;
   var $7=_mrb_get_args($6, ((104528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$blk,tempInt));
   var $8=(($blk+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==0;
   if ($10) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $12=(($blk)|0);
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|(0))!=0;
   if ($15) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $17=$1;
   var $18=$1;
   var $19=_mrb_class_get($18, ((91632)|0));
   _mrb_raise($17, $19, ((103992)|0));
   label = 4; break;
  case 4: 
   var $21=(($blk)|0);
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=$23;
   $p=$24;
   var $25=$p;
   var $26=$25;
   var $27=HEAP32[(($26)>>2)];
   var $28=$27 >>> 11;
   var $29=$28 & 2097151;
   var $30=$29 & 128;
   var $31=(($30)|(0))!=0;
   if ($31) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $33=$1;
   var $34=$1;
   var $35=_mrb_class_get($34, ((91632)|0));
   _mrb_raise($33, $35, ((103428)|0));
   label = 6; break;
  case 6: 
   var $37=$1;
   var $38=_mrb_malloc($37, 52);
   var $39=$38;
   var $40=$f;
   var $41=(($40+12)|0);
   HEAP32[(($41)>>2)]=$39;
   var $42=$f;
   var $43=(($42+12)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=$44;
   assert(52 % 1 === 0);(_memcpy($45, 111088, 52)|0);
   var $46=$f;
   var $47=(($46+12)|0);
   var $48=HEAP32[(($47)>>2)];
   $c=$48;
   var $49=$1;
   var $50=_mrb_calloc($49, 64, 12);
   var $51=$50;
   var $52=$c;
   var $53=(($52+8)|0);
   HEAP32[(($53)>>2)]=$51;
   var $54=$c;
   var $55=(($54+8)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=(($56+768)|0);
   var $58=$c;
   var $59=(($58+12)|0);
   HEAP32[(($59)>>2)]=$57;
   var $60=$c;
   var $61=(($60+8)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=$c;
   var $64=(($63+4)|0);
   HEAP32[(($64)>>2)]=$62;
   var $65=$c;
   var $66=(($65+4)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67)|0);
   var $69=$1;
   var $70=(($69+8)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=(($71+4)|0);
   var $73=HEAP32[(($72)>>2)];
   var $74=(($73)|0);
   var $75=$68;
   var $76=$74;
   assert(12 % 1 === 0);HEAP32[(($75)>>2)]=HEAP32[(($76)>>2)];HEAP32[((($75)+(4))>>2)]=HEAP32[((($76)+(4))>>2)];HEAP32[((($75)+(8))>>2)]=HEAP32[((($76)+(8))>>2)];
   var $77=$1;
   var $78=_mrb_calloc($77, 8, 44);
   var $79=$78;
   var $80=$c;
   var $81=(($80+20)|0);
   HEAP32[(($81)>>2)]=$79;
   var $82=$c;
   var $83=(($82+20)|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=(($84+352)|0);
   var $86=$c;
   var $87=(($86+24)|0);
   HEAP32[(($87)>>2)]=$85;
   var $88=$c;
   var $89=(($88+20)|0);
   var $90=HEAP32[(($89)>>2)];
   var $91=$c;
   var $92=(($91+16)|0);
   HEAP32[(($92)>>2)]=$90;
   var $93=$c;
   var $94=(($93+16)|0);
   var $95=HEAP32[(($94)>>2)];
   $ci=$95;
   var $96=$p;
   var $97=(($96+16)|0);
   var $98=HEAP32[(($97)>>2)];
   var $99=$ci;
   var $100=(($99+28)|0);
   HEAP32[(($100)>>2)]=$98;
   var $101=$p;
   var $102=$ci;
   var $103=(($102+4)|0);
   HEAP32[(($103)>>2)]=$101;
   var $104=$p;
   var $105=(($104+12)|0);
   var $106=$105;
   var $107=HEAP32[(($106)>>2)];
   var $108=(($107+12)|0);
   var $109=HEAP32[(($108)>>2)];
   var $110=$ci;
   var $111=(($110+20)|0);
   HEAP32[(($111)>>2)]=$109;
   var $112=$p;
   var $113=(($112+12)|0);
   var $114=$113;
   var $115=HEAP32[(($114)>>2)];
   var $116=(($115+6)|0);
   var $117=HEAP16[(($116)>>1)];
   var $118=(($117)&(65535));
   var $119=$ci;
   var $120=(($119+12)|0);
   HEAP32[(($120)>>2)]=$118;
   var $121=$ci;
   var $122=(($121+44)|0);
   var $123=$ci;
   var $124=(($123)|0);
   var $125=$122;
   var $126=$124;
   assert(44 % 1 === 0);(_memcpy($125, $126, 44)|0);
   var $127=$c;
   var $128=(($127+16)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=(($129+44)|0);
   HEAP32[(($128)>>2)]=$130;
   var $131=$f;
   var $132=$c;
   var $133=(($132+48)|0);
   HEAP32[(($133)>>2)]=$131;
   var $134=$c;
   var $135=(($134+44)|0);
   HEAP8[($135)]=0;
   var $136=$agg_result;
   var $137=$self;
   assert(12 % 1 === 0);HEAP32[(($136)>>2)]=HEAP32[(($137)>>2)];HEAP32[((($136)+(4))>>2)]=HEAP32[((($137)+(4))>>2)];HEAP32[((($136)+(8))>>2)]=HEAP32[((($137)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _fiber_resume($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $c;
   var $a=sp;
   var $len=(sp)+(4);
   var $b;
   var $e;
   $1=$mrb;
   var $2=$1;
   var $3=_fiber_check($2, $self);
   $c=$3;
   var $4=$c;
   var $5=(($4+44)|0);
   var $6=HEAP8[($5)];
   var $7=(($6)&(255));
   var $8=(($7)|(0))==2;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$1;
   var $11=$1;
   var $12=_mrb_class_get($11, ((86544)|0));
   _mrb_raise($10, $12, ((105924)|0));
   label = 3; break;
  case 3: 
   var $14=$c;
   var $15=(($14+44)|0);
   var $16=HEAP8[($15)];
   var $17=(($16)&(255));
   var $18=(($17)|(0))==3;
   if ($18) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $20=$1;
   var $21=$1;
   var $22=_mrb_class_get($21, ((86544)|0));
   _mrb_raise($20, $22, ((105296)|0));
   label = 5; break;
  case 5: 
   var $24=$1;
   var $25=_mrb_get_args($24, ((88328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$a,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
   var $26=$1;
   var $27=(($26+8)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28+44)|0);
   HEAP8[($29)]=2;
   var $30=$c;
   var $31=(($30+44)|0);
   var $32=HEAP8[($31)];
   var $33=(($32)&(255));
   var $34=(($33)|(0))==0;
   if ($34) { label = 6; break; } else { label = 12; break; }
  case 6: 
   var $36=$c;
   var $37=(($36+4)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=(($38+12)|0);
   $b=$39;
   var $40=$b;
   var $41=HEAP32[(($len)>>2)];
   var $42=(($40+((($41)*(12))&-1))|0);
   $e=$42;
   label = 7; break;
  case 7: 
   var $44=$b;
   var $45=$e;
   var $46=(($44)>>>(0)) < (($45)>>>(0));
   if ($46) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $48=$b;
   var $49=(($48+12)|0);
   $b=$49;
   var $50=HEAP32[(($a)>>2)];
   var $51=(($50+12)|0);
   HEAP32[(($a)>>2)]=$51;
   var $52=$48;
   var $53=$50;
   assert(12 % 1 === 0);HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[((($52)+(4))>>2)]=HEAP32[((($53)+(4))>>2)];HEAP32[((($52)+(8))>>2)]=HEAP32[((($53)+(8))>>2)];
   label = 7; break;
  case 9: 
   var $55=HEAP32[(($len)>>2)];
   var $56=$c;
   var $57=(($56+20)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=(($58+16)|0);
   HEAP32[(($59)>>2)]=$55;
   var $60=$1;
   var $61=(($60+8)|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=$c;
   var $64=(($63)|0);
   HEAP32[(($64)>>2)]=$62;
   var $65=$c;
   var $66=(($65)|0);
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67+48)|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=(($69)|(0))!=0;
   if ($70) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $72=$1;
   var $73=$c;
   var $74=(($73+48)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=$75;
   var $77=$c;
   var $78=(($77)|0);
   var $79=HEAP32[(($78)>>2)];
   var $80=(($79+48)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=$81;
   _mrb_field_write_barrier($72, $76, $82);
   label = 11; break;
  case 11: 
   var $84=$c;
   var $85=(($84+44)|0);
   HEAP8[($85)]=1;
   var $86=$c;
   var $87=$1;
   var $88=(($87+8)|0);
   HEAP32[(($88)>>2)]=$86;
   var $89=$c;
   var $90=(($89+16)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=(($91+28)|0);
   HEAP32[(($92)>>2)]=0;
   var $93=$c;
   var $94=(($93+16)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95+4)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=(($97+20)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99+12)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101)|0);
   var $103=$agg_result;
   var $104=$102;
   assert(12 % 1 === 0);HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($104)+(4))>>2)];HEAP32[((($103)+(8))>>2)]=HEAP32[((($104)+(8))>>2)];
   label = 15; break;
  case 12: 
   var $106=$c;
   var $107=(($106+16)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=(($108+28)|0);
   HEAP32[(($109)>>2)]=0;
   var $110=$1;
   var $111=(($110+8)|0);
   var $112=HEAP32[(($111)>>2)];
   var $113=$c;
   var $114=(($113)|0);
   HEAP32[(($114)>>2)]=$112;
   var $115=$c;
   var $116=(($115)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($117+48)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120=(($119)|(0))!=0;
   if ($120) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $122=$1;
   var $123=$c;
   var $124=(($123+48)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=$125;
   var $127=$c;
   var $128=(($127)|0);
   var $129=HEAP32[(($128)>>2)];
   var $130=(($129+48)|0);
   var $131=HEAP32[(($130)>>2)];
   var $132=$131;
   _mrb_field_write_barrier($122, $126, $132);
   label = 14; break;
  case 14: 
   var $134=$c;
   var $135=(($134+44)|0);
   HEAP8[($135)]=1;
   var $136=$c;
   var $137=$1;
   var $138=(($137+8)|0);
   HEAP32[(($138)>>2)]=$136;
   var $139=$1;
   var $140=HEAP32[(($a)>>2)];
   var $141=HEAP32[(($len)>>2)];
   _fiber_result($agg_result, $139, $140, $141);
   label = 15; break;
  case 15: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _fiber_alive_p($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $c;
 $1=$mrb;
 var $2=$1;
 var $3=_fiber_check($2, $self);
 $c=$3;
 var $4=$c;
 var $5=(($4+44)|0);
 var $6=HEAP8[($5)];
 var $7=(($6)&(255));
 var $8=(($7)|(0))!=3;
 var $9=(($8)&(1));
 var $10=(($9) & 255);
 _mrb_bool_value1429($agg_result, $10);
 STACKTOP = sp;
 return;
}
function _fiber_yield($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $c;
   var $a=sp;
   var $len=(sp)+(4);
   $1=$mrb;
   var $2=$1;
   var $3=(($2+8)|0);
   var $4=HEAP32[(($3)>>2)];
   $c=$4;
   var $5=$c;
   var $6=(($5)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $10=$1;
   var $11=$1;
   var $12=_mrb_class_get($11, ((91632)|0));
   _mrb_raise($10, $12, ((89500)|0));
   label = 3; break;
  case 3: 
   var $14=$1;
   var $15=_mrb_get_args($14, ((88328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$a,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
   var $16=$c;
   var $17=(($16)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18+44)|0);
   HEAP8[($19)]=1;
   var $20=$c;
   var $21=(($20)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$1;
   var $24=(($23+8)|0);
   HEAP32[(($24)>>2)]=$22;
   var $25=$c;
   var $26=(($25)|0);
   HEAP32[(($26)>>2)]=0;
   var $27=$1;
   var $28=(($27+8)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($29+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31+28)|0);
   HEAP32[(($32)>>2)]=0;
   var $33=$1;
   var $34=HEAP32[(($a)>>2)];
   var $35=HEAP32[(($len)>>2)];
   _fiber_result($agg_result, $33, $34, $35);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _fiber_result($agg_result, $mrb, $a, $len) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $1=$mrb;
   $2=$a;
   $3=$len;
   var $4=$3;
   var $5=(($4)|(0))==0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _mrb_nil_value1428($agg_result);
   label = 6; break;
  case 3: 
   var $8=$3;
   var $9=(($8)|(0))==1;
   if ($9) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $11=$2;
   var $12=(($11)|0);
   var $13=$agg_result;
   var $14=$12;
   assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
   label = 6; break;
  case 5: 
   var $16=$1;
   var $17=$3;
   var $18=$2;
   _mrb_ary_new_from_values($agg_result, $16, $17, $18);
   label = 6; break;
  case 6: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value1428($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _fiber_check($mrb, $fib) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $fib; $fib = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($fib)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($fib)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($fib)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $f;
   $1=$mrb;
   var $2=(($fib)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $f=$5;
   var $6=$f;
   var $7=(($6+12)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))!=0;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=$1;
   var $12=$1;
   var $13=_mrb_class_get($12, ((91632)|0));
   _mrb_raise($11, $13, ((87332)|0));
   label = 3; break;
  case 3: 
   var $15=$f;
   var $16=(($15+12)|0);
   var $17=HEAP32[(($16)>>2)];
   STACKTOP = sp;
   return $17;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_bool_value1429($agg_result, $boolean) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$boolean;
   label = 2; break;
  case 2: 
   var $3=$1;
   var $4=(($3)&(255));
   var $5=(($4)|(0))!=0;
   var $6=$5 ? 2 : 0;
   var $7=(($v+8)|0);
   HEAP32[(($7)>>2)]=$6;
   var $8=(($v)|0);
   var $9=$8;
   HEAP32[(($9)>>2)]=1;
   label = 3; break;
  case 3: 
   var $11=$agg_result;
   var $12=$v;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _GENERATED_TMP_mrb_mruby_hash_ext_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_mruby_hash_ext_gem_final($2);
 return;
}
function _mrb_hash_values_at($agg_result, $mrb, $argc, $argv, $hash) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $result=sp;
   var $i;
   var $4=(sp)+(12);
   $1=$mrb;
   $2=$argc;
   $3=$argv;
   var $5=$1;
   var $6=$2;
   _mrb_ary_new_capa($result, $5, $6);
   $i=0;
   label = 2; break;
  case 2: 
   var $8=$i;
   var $9=$2;
   var $10=(($8)|(0)) < (($9)|(0));
   if ($10) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $12=$1;
   var $13=$1;
   var $14=$i;
   var $15=$3;
   var $16=(($15+((($14)*(12))&-1))|0);
   _mrb_hash_get($4, $13, $hash, $16);
   _mrb_ary_push($12, $result, $4);
   label = 4; break;
  case 4: 
   var $18=$i;
   var $19=((($18)+(1))|0);
   $i=$19;
   label = 2; break;
  case 5: 
   var $21=$agg_result;
   var $22=$result;
   assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mruby_hash_ext_gem_init($mrb) {
 var label = 0;
 var $1;
 var $h;
 $1=$mrb;
 var $2=$1;
 var $3=(($2+68)|0);
 var $4=HEAP32[(($3)>>2)];
 $h=$4;
 var $5=$1;
 var $6=$h;
 _mrb_define_method($5, $6, ((103316)|0), 466, 4096);
 return;
}
function _hash_values_at($agg_result, $mrb, $hash) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $argv=sp;
 var $argc=(sp)+(4);
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((105012)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
 var $4=$1;
 var $5=HEAP32[(($argc)>>2)];
 var $6=HEAP32[(($argv)>>2)];
 _mrb_hash_values_at($agg_result, $4, $5, $6, $hash);
 STACKTOP = sp;
 return;
}
function _GENERATED_TMP_mrb_mruby_math_gem_init($mrb) {
 var label = 0;
 var $1;
 var $ai;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_gc_arena_save($2);
 $ai=$3;
 var $4=$1;
 _mrb_mruby_math_gem_init($4);
 var $5=$1;
 var $6=$ai;
 _mrb_gc_arena_restore($5, $6);
 return;
}
function _GENERATED_TMP_mrb_mruby_math_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_mruby_math_gem_final($2);
 return;
}
function _mrb_mruby_math_gem_init($mrb) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $mrb_math;
 var $2=sp;
 var $3=(sp)+(12);
 var $4=(sp)+(24);
 $1=$mrb;
 var $5=$1;
 var $6=_mrb_define_module($5, ((103296)|0));
 $mrb_math=$6;
 var $7=$1;
 var $8=$mrb_math;
 var $9=$1;
 _mrb_float_value1478($2, $9, 3.141592653589793);
 _mrb_define_const($7, $8, ((105008)|0), $2);
 var $10=$1;
 var $11=$mrb_math;
 var $12=$1;
 _mrb_float_value1478($3, $12, 2.718281828459045);
 _mrb_define_const($10, $11, ((100352)|0), $3);
 var $13=$1;
 var $14=$mrb_math;
 var $15=$1;
 _mrb_float_value1478($4, $15, 1e-12);
 _mrb_define_const($13, $14, ((96712)|0), $4);
 var $16=$1;
 var $17=$mrb_math;
 _mrb_define_module_function($16, $17, ((94160)|0), 152, 262144);
 var $18=$1;
 var $19=$mrb_math;
 _mrb_define_module_function($18, $19, ((91628)|0), 250, 262144);
 var $20=$1;
 var $21=$mrb_math;
 _mrb_define_module_function($20, $21, ((89496)|0), 198, 262144);
 var $22=$1;
 var $23=$mrb_math;
 _mrb_define_module_function($22, $23, ((88320)|0), 612, 262144);
 var $24=$1;
 var $25=$mrb_math;
 _mrb_define_module_function($24, $25, ((87324)|0), 484, 262144);
 var $26=$1;
 var $27=$mrb_math;
 _mrb_define_module_function($26, $27, ((86536)|0), 372, 262144);
 var $28=$1;
 var $29=$mrb_math;
 _mrb_define_module_function($28, $29, ((105916)|0), 630, 524288);
 var $30=$1;
 var $31=$mrb_math;
 _mrb_define_module_function($30, $31, ((105288)|0), 544, 262144);
 var $32=$1;
 var $33=$mrb_math;
 _mrb_define_module_function($32, $33, ((104520)|0), 168, 262144);
 var $34=$1;
 var $35=$mrb_math;
 _mrb_define_module_function($34, $35, ((103984)|0), 280, 262144);
 var $36=$1;
 var $37=$mrb_math;
 _mrb_define_module_function($36, $37, ((103420)|0), 156, 262144);
 var $38=$1;
 var $39=$mrb_math;
 _mrb_define_module_function($38, $39, ((102964)|0), 174, 262144);
 var $40=$1;
 var $41=$mrb_math;
 _mrb_define_module_function($40, $41, ((102592)|0), 600, 262144);
 var $42=$1;
 var $43=$mrb_math;
 _mrb_define_module_function($42, $43, ((102220)|0), 234, 262144);
 var $44=$1;
 var $45=$mrb_math;
 _mrb_define_module_function($44, $45, ((101804)|0), 140, 270336);
 var $46=$1;
 var $47=$mrb_math;
 _mrb_define_module_function($46, $47, ((101340)|0), 692, 262144);
 var $48=$1;
 var $49=$mrb_math;
 _mrb_define_module_function($48, $49, ((100844)|0), 14, 262144);
 var $50=$1;
 var $51=$mrb_math;
 _mrb_define_module_function($50, $51, ((100540)|0), 166, 262144);
 var $52=$1;
 var $53=$mrb_math;
 _mrb_define_module_function($52, $53, ((100032)|0), 238, 262144);
 var $54=$1;
 var $55=$mrb_math;
 _mrb_define_module_function($54, $55, ((99776)|0), 112, 262144);
 var $56=$1;
 var $57=$mrb_math;
 _mrb_define_module_function($56, $57, ((99376)|0), 138, 524288);
 var $58=$1;
 var $59=$mrb_math;
 _mrb_define_module_function($58, $59, ((98928)|0), 34, 524288);
 var $60=$1;
 var $61=$mrb_math;
 _mrb_define_module_function($60, $61, ((98392)|0), 376, 262144);
 var $62=$1;
 var $63=$mrb_math;
 _mrb_define_module_function($62, $63, ((98072)|0), 86, 262144);
 STACKTOP = sp;
 return;
}
function _mrb_float_value1478($agg_result, $mrb, $f) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $v=sp;
   $1=$mrb;
   $2=$f;
   label = 2; break;
  case 2: 
   var $4=(($v+8)|0);
   HEAP32[(($4)>>2)]=6;
   var $5=$2;
   var $6=(($v)|0);
   var $7=$6;
   (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($7)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($7)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 3; break;
  case 3: 
   var $9=$agg_result;
   var $10=$v;
   assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _math_sin($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=Math.sin($4);
 (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $6=$1;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _math_cos($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=Math.cos($4);
 (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $6=$1;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _math_tan($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=Math.tan($4);
 (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $6=$1;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _math_asin($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=Math.asin($4);
 (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $6=$1;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _math_acos($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=Math.acos($4);
 (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $6=$1;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _math_atan($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=Math.atan($4);
 (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $6=$1;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _math_atan2($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 var $y=(sp)+(8);
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,HEAP32[(((tempInt)+(4))>>2)]=$y,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($y)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($y)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $6=Math.atan2($4, $5);
 (HEAPF64[(tempDoublePtr)>>3]=$6,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $7=$1;
 var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $7, $8);
 STACKTOP = sp;
 return;
}
function _math_sinh($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=_sinh($4);
 (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $6=$1;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _math_cosh($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=_cosh($4);
 (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $6=$1;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _GENERATED_TMP_mrb_mruby_hash_ext_gem_init($mrb) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ai;
   var $2=sp;
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_gc_arena_save($3);
   $ai=$4;
   var $5=$1;
   _mrb_mruby_hash_ext_gem_init($5);
   var $6=$1;
   _mrb_load_irep($2, $6, ((80544)|0));
   var $7=$1;
   var $8=(($7+16)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$1;
   _mrb_print_error($12);
   _exit(1);
   throw "Reached an unreachable!";
  case 3: 
   var $14=$1;
   var $15=$ai;
   _mrb_gc_arena_restore($14, $15);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mruby_math_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _mrb_mruby_numeric_ext_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _mrb_mruby_object_ext_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _os_count_object_type($mrb, $obj, $data) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $obj_count;
   $1=$mrb;
   $2=$obj;
   $3=$data;
   var $4=$3;
   var $5=$4;
   $obj_count=$5;
   var $6=$2;
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=$8 >>> 8;
   var $10=$9 & 7;
   var $11=$1;
   var $12=(($11+524)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$13 ^ 3;
   var $15=$10 & $14;
   var $16=$15 & 3;
   var $17=(($16)|(0))!=0;
   if ($17) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $19=$2;
   var $20=$19;
   var $21=HEAP32[(($20)>>2)];
   var $22=$21 & 255;
   var $23=(($22)|(0))==1;
   if ($23) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $25=$obj_count;
   var $26=(($25+4)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=((($27)+(1))|0);
   HEAP32[(($26)>>2)]=$28;
   label = 5; break;
  case 4: 
   var $30=$2;
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=$32 & 255;
   var $34=$obj_count;
   var $35=(($34+8)|0);
   var $36=(($35+($33<<2))|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=((($37)+(1))|0);
   HEAP32[(($36)>>2)]=$38;
   var $39=$obj_count;
   var $40=(($39)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=((($41)+(1))|0);
   HEAP32[(($40)>>2)]=$42;
   label = 5; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _math_tanh($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=_tanh($4);
 (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $6=$1;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _math_asinh($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=_asinh($4);
 (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $6=$1;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _math_acosh($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=_acosh($4);
 (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $6=$1;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _math_atanh($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=_atanh($4);
 (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $6=$1;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _math_exp($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=Math.exp($4);
 (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $6=$1;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _math_log($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $x=sp;
   var $base=(sp)+(8);
   var $argc;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((96848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,HEAP32[(((tempInt)+(4))>>2)]=$base,tempInt));
   $argc=$3;
   var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $5=Math.log($4);
   (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   var $6=$argc;
   var $7=(($6)|(0))==2;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($base)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($base)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $10=Math.log($9);
   var $11=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $12=($11)/($10);
   (HEAPF64[(tempDoublePtr)>>3]=$12,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 3; break;
  case 3: 
   var $14=$1;
   var $15=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   _mrb_float_value1478($agg_result, $14, $15);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _math_log2($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=Math.log($4);
 var $6=($5)/(0.6931471805599453);
 (HEAPF64[(tempDoublePtr)>>3]=$6,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $7=$1;
 var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $7, $8);
 STACKTOP = sp;
 return;
}
function _math_log10($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=_log10($4);
 (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $6=$1;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _math_sqrt($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=Math.sqrt($4);
 (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $6=$1;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _math_cbrt($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=_cbrt($4);
 (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $6=$1;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _math_frexp($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 var $exp=(sp)+(8);
 var $2=(sp)+(12);
 var $3=(sp)+(24);
 $1=$mrb;
 var $4=$1;
 var $5=_mrb_get_args($4, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $7=_frexp($6, $exp);
 (HEAPF64[(tempDoublePtr)>>3]=$7,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $8=$1;
 var $9=$1;
 var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($2, $9, $10);
 var $11=HEAP32[(($exp)>>2)];
 _mrb_fixnum_value1481($3, $11);
 _mrb_assoc_new($agg_result, $8, $2, $3);
 STACKTOP = sp;
 return;
}
function _math_ldexp($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 var $i=(sp)+(8);
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97156)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,HEAP32[(((tempInt)+(4))>>2)]=$i,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=HEAP32[(($i)>>2)];
 var $6=_ldexp($4, $5);
 (HEAPF64[(tempDoublePtr)>>3]=$6,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $7=$1;
 var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $7, $8);
 STACKTOP = sp;
 return;
}
function _math_hypot($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 var $y=(sp)+(8);
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,HEAP32[(((tempInt)+(4))>>2)]=$y,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($y)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($y)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $6=_hypot($4, $5);
 (HEAPF64[(tempDoublePtr)>>3]=$6,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $7=$1;
 var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $7, $8);
 STACKTOP = sp;
 return;
}
function _math_erf($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=_erf($4);
 (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $6=$1;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _math_erfc($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $x=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((97788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$x,tempInt));
 var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $5=_erfc($4);
 (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $6=$1;
 var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_float_value1478($agg_result, $6, $7);
 STACKTOP = sp;
 return;
}
function _mrb_fixnum_value1481($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _GENERATED_TMP_mrb_mruby_numeric_ext_gem_init($mrb) {
 var label = 0;
 var $1;
 var $ai;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_gc_arena_save($2);
 $ai=$3;
 var $4=$1;
 _mrb_mruby_numeric_ext_gem_init($4);
 var $5=$1;
 var $6=$ai;
 _mrb_gc_arena_restore($5, $6);
 return;
}
function _GENERATED_TMP_mrb_mruby_numeric_ext_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_mruby_numeric_ext_gem_final($2);
 return;
}
function _mrb_mruby_numeric_ext_gem_init($mrb) {
 var label = 0;
 var $1;
 var $i;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_class_get($2, ((103148)|0));
 $i=$3;
 var $4=$1;
 var $5=$i;
 _mrb_define_method($4, $5, ((104972)|0), 510, 0);
 return;
}
function _mrb_int_chr($agg_result, $mrb, $x) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $chr;
   var $c=sp;
   $1=$mrb;
   var $2=(($x)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   $chr=$4;
   var $5=$chr;
   var $6=(($5)|(0)) >= 256;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$1;
   var $9=$1;
   var $10=_mrb_class_get($9, ((100320)|0));
   _mrb_raisef($8, $10, ((96668)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($x)+(8))>>2)],tempInt));
   label = 3; break;
  case 3: 
   var $12=$chr;
   var $13=(($12) & 255);
   HEAP8[($c)]=$13;
   var $14=$1;
   _mrb_str_new($agg_result, $14, $c, 1);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _GENERATED_TMP_mrb_mruby_object_ext_gem_init($mrb) {
 var label = 0;
 var $1;
 var $ai;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_gc_arena_save($2);
 $ai=$3;
 var $4=$1;
 _mrb_mruby_object_ext_gem_init($4);
 var $5=$1;
 var $6=$ai;
 _mrb_gc_arena_restore($5, $6);
 return;
}
function _GENERATED_TMP_mrb_mruby_object_ext_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_mruby_object_ext_gem_final($2);
 return;
}
function _mrb_mruby_object_ext_gem_init($mrb) {
 var label = 0;
 var $1;
 var $n;
 $1=$mrb;
 var $2=$1;
 var $3=(($2+88)|0);
 var $4=HEAP32[(($3)>>2)];
 $n=$4;
 var $5=$1;
 var $6=$n;
 _mrb_define_method($5, $6, ((103116)|0), 476, 0);
 var $7=$1;
 var $8=$n;
 _mrb_define_method($7, $8, ((104964)|0), 472, 0);
 var $9=$1;
 var $10=$n;
 _mrb_define_method($9, $10, ((100308)|0), 698, 0);
 var $11=$1;
 var $12=$1;
 var $13=(($12+44)|0);
 var $14=HEAP32[(($13)>>2)];
 _mrb_define_method($11, $14, ((96644)|0), 170, 4097);
 return;
}
function _nil_to_a($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_ary_new($agg_result, $2);
 STACKTOP = sp;
 return;
}
function _nil_to_f($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_float_value1510($agg_result, $2, 0);
 STACKTOP = sp;
 return;
}
function _nil_to_i($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 _mrb_fixnum_value1509($agg_result, 0);
 STACKTOP = sp;
 return;
}
function _mrb_obj_instance_exec($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $argv=sp;
   var $argc=(sp)+(4);
   var $blk=(sp)+(8);
   var $c;
   var $2=(sp)+(20);
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_get_args($3, ((94116)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,HEAP32[(((tempInt)+(8))>>2)]=$blk,tempInt));
   var $5=(($blk+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==0;
   if ($7) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $9=(($blk)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))!=0;
   if ($12) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $14=$1;
   var $15=$1;
   var $16=_mrb_class_get($15, ((91604)|0));
   _mrb_raise($14, $16, ((89480)|0));
   label = 4; break;
  case 4: 
   var $18=(($self+8)|0);
   var $19=HEAP32[(($18)>>2)];
   if ((($19)|(0))==4 | (($19)|(0))==3 | (($19)|(0))==6) {
    label = 5; break;
   }
   else {
   label = 6; break;
   }
  case 5: 
   $c=0;
   label = 7; break;
  case 6: 
   var $22=$1;
   _mrb_singleton_class($2, $22, $self);
   var $23=(($2)|0);
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   var $26=$25;
   $c=$26;
   label = 7; break;
  case 7: 
   var $28=$1;
   var $29=HEAP32[(($argc)>>2)];
   var $30=HEAP32[(($argv)>>2)];
   var $31=$c;
   _mrb_yield_internal($agg_result, $28, $blk, $29, $30, $self, $31);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_value1509($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_float_value1510($agg_result, $mrb, $f) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $v=sp;
   $1=$mrb;
   $2=$f;
   label = 2; break;
  case 2: 
   var $4=(($v+8)|0);
   HEAP32[(($4)>>2)]=6;
   var $5=$2;
   var $6=(($v)|0);
   var $7=$6;
   (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($7)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($7)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 3; break;
  case 3: 
   var $9=$agg_result;
   var $10=$v;
   assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _GENERATED_TMP_mrb_mruby_objectspace_gem_init($mrb) {
 var label = 0;
 var $1;
 var $ai;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_gc_arena_save($2);
 $ai=$3;
 var $4=$1;
 _mrb_mruby_objectspace_gem_init($4);
 var $5=$1;
 var $6=$ai;
 _mrb_gc_arena_restore($5, $6);
 return;
}
function _GENERATED_TMP_mrb_mruby_objectspace_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_mruby_objectspace_gem_final($2);
 return;
}
function _os_count_objects($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 500)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $obj_count=sp;
   var $i;
   var $hash=(sp)+(104);
   var $2=(sp)+(116);
   var $3=(sp)+(128);
   var $4=(sp)+(140);
   var $5=(sp)+(152);
   var $6=(sp)+(164);
   var $7=(sp)+(176);
   var $8=(sp)+(188);
   var $type=(sp)+(200);
   var $9=(sp)+(212);
   var $10=(sp)+(224);
   var $11=(sp)+(236);
   var $12=(sp)+(248);
   var $13=(sp)+(260);
   var $14=(sp)+(272);
   var $15=(sp)+(284);
   var $16=(sp)+(296);
   var $17=(sp)+(308);
   var $18=(sp)+(320);
   var $19=(sp)+(332);
   var $20=(sp)+(344);
   var $21=(sp)+(356);
   var $22=(sp)+(368);
   var $23=(sp)+(380);
   var $24=(sp)+(392);
   var $25=(sp)+(404);
   var $26=(sp)+(416);
   var $27=(sp)+(428);
   var $28=(sp)+(440);
   var $29=(sp)+(452);
   var $30=(sp)+(464);
   var $31=(sp)+(476);
   var $32=(sp)+(488);
   $1=$mrb;
   var $33=$1;
   var $34=_mrb_get_args($33, ((102960)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$hash,tempInt));
   var $35=(($34)|(0))==0;
   if ($35) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $37=$1;
   _mrb_hash_new($2, $37);
   var $38=$hash;
   var $39=$2;
   assert(12 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];HEAP32[((($38)+(8))>>2)]=HEAP32[((($39)+(8))>>2)];
   label = 3; break;
  case 3: 
   var $41=$1;
   _mrb_hash_empty_p($3, $41, $hash);
   var $42=(($3+8)|0);
   var $43=HEAP32[(($42)>>2)];
   var $44=(($43)|(0))!=0;
   if ($44) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $46=$1;
   _mrb_hash_clear($4, $46, $hash);
   label = 5; break;
  case 5: 
   $i=0;
   label = 6; break;
  case 6: 
   var $49=$i;
   var $50=(($49)>>>(0)) <= 23;
   if ($50) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $52=$i;
   var $53=(($obj_count+8)|0);
   var $54=(($53+($52<<2))|0);
   HEAP32[(($54)>>2)]=0;
   label = 8; break;
  case 8: 
   var $56=$i;
   var $57=((($56)+(1))|0);
   $i=$57;
   label = 6; break;
  case 9: 
   var $59=(($obj_count)|0);
   HEAP32[(($59)>>2)]=0;
   var $60=(($obj_count+4)|0);
   HEAP32[(($60)>>2)]=0;
   var $61=$1;
   var $62=$obj_count;
   _mrb_objspace_each_objects($61, 646, $62);
   var $63=$1;
   var $64=$1;
   var $65=_mrb_intern_cstr($64, ((104948)|0));
   _mrb_symbol_value1542($5, $65);
   var $66=(($obj_count)|0);
   var $67=HEAP32[(($66)>>2)];
   _mrb_fixnum_value1543($6, $67);
   _mrb_hash_set($63, $hash, $5, $6);
   var $68=$1;
   var $69=$1;
   var $70=_mrb_intern_cstr($69, ((100300)|0));
   _mrb_symbol_value1542($7, $70);
   var $71=(($obj_count+4)|0);
   var $72=HEAP32[(($71)>>2)];
   _mrb_fixnum_value1543($8, $72);
   _mrb_hash_set($68, $hash, $7, $8);
   $i=0;
   label = 10; break;
  case 10: 
   var $74=$i;
   var $75=(($74)>>>(0)) < 23;
   if ($75) { label = 11; break; } else { label = 39; break; }
  case 11: 
   var $77=$i;
   if ((($77)|(0))==0) {
    label = 12; break;
   }
   else if ((($77)|(0))==1) {
    label = 13; break;
   }
   else if ((($77)|(0))==2) {
    label = 14; break;
   }
   else if ((($77)|(0))==3) {
    label = 15; break;
   }
   else if ((($77)|(0))==4) {
    label = 16; break;
   }
   else if ((($77)|(0))==5) {
    label = 17; break;
   }
   else if ((($77)|(0))==6) {
    label = 18; break;
   }
   else if ((($77)|(0))==7) {
    label = 19; break;
   }
   else if ((($77)|(0))==8) {
    label = 20; break;
   }
   else if ((($77)|(0))==9) {
    label = 21; break;
   }
   else if ((($77)|(0))==10) {
    label = 22; break;
   }
   else if ((($77)|(0))==11) {
    label = 23; break;
   }
   else if ((($77)|(0))==12) {
    label = 24; break;
   }
   else if ((($77)|(0))==13) {
    label = 25; break;
   }
   else if ((($77)|(0))==14) {
    label = 26; break;
   }
   else if ((($77)|(0))==15) {
    label = 27; break;
   }
   else if ((($77)|(0))==16) {
    label = 28; break;
   }
   else if ((($77)|(0))==17) {
    label = 29; break;
   }
   else if ((($77)|(0))==18) {
    label = 30; break;
   }
   else if ((($77)|(0))==19) {
    label = 31; break;
   }
   else if ((($77)|(0))==20) {
    label = 32; break;
   }
   else if ((($77)|(0))==21) {
    label = 33; break;
   }
   else {
   label = 34; break;
   }
  case 12: 
   var $79=$1;
   var $80=_mrb_intern_cstr($79, ((96628)|0));
   _mrb_symbol_value1542($9, $80);
   var $81=$type;
   var $82=$9;
   assert(12 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($82)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($82)+(8))>>2)];
   label = 35; break;
  case 13: 
   var $84=$1;
   var $85=_mrb_intern_cstr($84, ((94104)|0));
   _mrb_symbol_value1542($10, $85);
   var $86=$type;
   var $87=$10;
   assert(12 % 1 === 0);HEAP32[(($86)>>2)]=HEAP32[(($87)>>2)];HEAP32[((($86)+(4))>>2)]=HEAP32[((($87)+(4))>>2)];HEAP32[((($86)+(8))>>2)]=HEAP32[((($87)+(8))>>2)];
   label = 35; break;
  case 14: 
   var $89=$1;
   var $90=_mrb_intern_cstr($89, ((91592)|0));
   _mrb_symbol_value1542($11, $90);
   var $91=$type;
   var $92=$11;
   assert(12 % 1 === 0);HEAP32[(($91)>>2)]=HEAP32[(($92)>>2)];HEAP32[((($91)+(4))>>2)]=HEAP32[((($92)+(4))>>2)];HEAP32[((($91)+(8))>>2)]=HEAP32[((($92)+(8))>>2)];
   label = 35; break;
  case 15: 
   var $94=$1;
   var $95=_mrb_intern_cstr($94, ((89448)|0));
   _mrb_symbol_value1542($12, $95);
   var $96=$type;
   var $97=$12;
   assert(12 % 1 === 0);HEAP32[(($96)>>2)]=HEAP32[(($97)>>2)];HEAP32[((($96)+(4))>>2)]=HEAP32[((($97)+(4))>>2)];HEAP32[((($96)+(8))>>2)]=HEAP32[((($97)+(8))>>2)];
   label = 35; break;
  case 16: 
   var $99=$1;
   var $100=_mrb_intern_cstr($99, ((88300)|0));
   _mrb_symbol_value1542($13, $100);
   var $101=$type;
   var $102=$13;
   assert(12 % 1 === 0);HEAP32[(($101)>>2)]=HEAP32[(($102)>>2)];HEAP32[((($101)+(4))>>2)]=HEAP32[((($102)+(4))>>2)];HEAP32[((($101)+(8))>>2)]=HEAP32[((($102)+(8))>>2)];
   label = 35; break;
  case 17: 
   var $104=$1;
   var $105=_mrb_intern_cstr($104, ((87308)|0));
   _mrb_symbol_value1542($14, $105);
   var $106=$type;
   var $107=$14;
   assert(12 % 1 === 0);HEAP32[(($106)>>2)]=HEAP32[(($107)>>2)];HEAP32[((($106)+(4))>>2)]=HEAP32[((($107)+(4))>>2)];HEAP32[((($106)+(8))>>2)]=HEAP32[((($107)+(8))>>2)];
   label = 35; break;
  case 18: 
   var $109=$1;
   var $110=_mrb_intern_cstr($109, ((86520)|0));
   _mrb_symbol_value1542($15, $110);
   var $111=$type;
   var $112=$15;
   assert(12 % 1 === 0);HEAP32[(($111)>>2)]=HEAP32[(($112)>>2)];HEAP32[((($111)+(4))>>2)]=HEAP32[((($112)+(4))>>2)];HEAP32[((($111)+(8))>>2)]=HEAP32[((($112)+(8))>>2)];
   label = 35; break;
  case 19: 
   var $114=$1;
   var $115=_mrb_intern_cstr($114, ((105900)|0));
   _mrb_symbol_value1542($16, $115);
   var $116=$type;
   var $117=$16;
   assert(12 % 1 === 0);HEAP32[(($116)>>2)]=HEAP32[(($117)>>2)];HEAP32[((($116)+(4))>>2)]=HEAP32[((($117)+(4))>>2)];HEAP32[((($116)+(8))>>2)]=HEAP32[((($117)+(8))>>2)];
   label = 35; break;
  case 20: 
   var $119=$1;
   var $120=_mrb_intern_cstr($119, ((105272)|0));
   _mrb_symbol_value1542($17, $120);
   var $121=$type;
   var $122=$17;
   assert(12 % 1 === 0);HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($122)+(4))>>2)];HEAP32[((($121)+(8))>>2)]=HEAP32[((($122)+(8))>>2)];
   label = 35; break;
  case 21: 
   var $124=$1;
   var $125=_mrb_intern_cstr($124, ((104504)|0));
   _mrb_symbol_value1542($18, $125);
   var $126=$type;
   var $127=$18;
   assert(12 % 1 === 0);HEAP32[(($126)>>2)]=HEAP32[(($127)>>2)];HEAP32[((($126)+(4))>>2)]=HEAP32[((($127)+(4))>>2)];HEAP32[((($126)+(8))>>2)]=HEAP32[((($127)+(8))>>2)];
   label = 35; break;
  case 22: 
   var $129=$1;
   var $130=_mrb_intern_cstr($129, ((103968)|0));
   _mrb_symbol_value1542($19, $130);
   var $131=$type;
   var $132=$19;
   assert(12 % 1 === 0);HEAP32[(($131)>>2)]=HEAP32[(($132)>>2)];HEAP32[((($131)+(4))>>2)]=HEAP32[((($132)+(4))>>2)];HEAP32[((($131)+(8))>>2)]=HEAP32[((($132)+(8))>>2)];
   label = 35; break;
  case 23: 
   var $134=$1;
   var $135=_mrb_intern_cstr($134, ((103404)|0));
   _mrb_symbol_value1542($20, $135);
   var $136=$type;
   var $137=$20;
   assert(12 % 1 === 0);HEAP32[(($136)>>2)]=HEAP32[(($137)>>2)];HEAP32[((($136)+(4))>>2)]=HEAP32[((($137)+(4))>>2)];HEAP32[((($136)+(8))>>2)]=HEAP32[((($137)+(8))>>2)];
   label = 35; break;
  case 24: 
   var $139=$1;
   var $140=_mrb_intern_cstr($139, ((102944)|0));
   _mrb_symbol_value1542($21, $140);
   var $141=$type;
   var $142=$21;
   assert(12 % 1 === 0);HEAP32[(($141)>>2)]=HEAP32[(($142)>>2)];HEAP32[((($141)+(4))>>2)]=HEAP32[((($142)+(4))>>2)];HEAP32[((($141)+(8))>>2)]=HEAP32[((($142)+(8))>>2)];
   label = 35; break;
  case 25: 
   var $144=$1;
   var $145=_mrb_intern_cstr($144, ((102580)|0));
   _mrb_symbol_value1542($22, $145);
   var $146=$type;
   var $147=$22;
   assert(12 % 1 === 0);HEAP32[(($146)>>2)]=HEAP32[(($147)>>2)];HEAP32[((($146)+(4))>>2)]=HEAP32[((($147)+(4))>>2)];HEAP32[((($146)+(8))>>2)]=HEAP32[((($147)+(8))>>2)];
   label = 35; break;
  case 26: 
   var $149=$1;
   var $150=_mrb_intern_cstr($149, ((102204)|0));
   _mrb_symbol_value1542($23, $150);
   var $151=$type;
   var $152=$23;
   assert(12 % 1 === 0);HEAP32[(($151)>>2)]=HEAP32[(($152)>>2)];HEAP32[((($151)+(4))>>2)]=HEAP32[((($152)+(4))>>2)];HEAP32[((($151)+(8))>>2)]=HEAP32[((($152)+(8))>>2)];
   label = 35; break;
  case 27: 
   var $154=$1;
   var $155=_mrb_intern_cstr($154, ((101792)|0));
   _mrb_symbol_value1542($24, $155);
   var $156=$type;
   var $157=$24;
   assert(12 % 1 === 0);HEAP32[(($156)>>2)]=HEAP32[(($157)>>2)];HEAP32[((($156)+(4))>>2)]=HEAP32[((($157)+(4))>>2)];HEAP32[((($156)+(8))>>2)]=HEAP32[((($157)+(8))>>2)];
   label = 35; break;
  case 28: 
   var $159=$1;
   var $160=_mrb_intern_cstr($159, ((101324)|0));
   _mrb_symbol_value1542($25, $160);
   var $161=$type;
   var $162=$25;
   assert(12 % 1 === 0);HEAP32[(($161)>>2)]=HEAP32[(($162)>>2)];HEAP32[((($161)+(4))>>2)]=HEAP32[((($162)+(4))>>2)];HEAP32[((($161)+(8))>>2)]=HEAP32[((($162)+(8))>>2)];
   label = 35; break;
  case 29: 
   var $164=$1;
   var $165=_mrb_intern_cstr($164, ((100828)|0));
   _mrb_symbol_value1542($26, $165);
   var $166=$type;
   var $167=$26;
   assert(12 % 1 === 0);HEAP32[(($166)>>2)]=HEAP32[(($167)>>2)];HEAP32[((($166)+(4))>>2)]=HEAP32[((($167)+(4))>>2)];HEAP32[((($166)+(8))>>2)]=HEAP32[((($167)+(8))>>2)];
   label = 35; break;
  case 30: 
   var $169=$1;
   var $170=_mrb_intern_cstr($169, ((100520)|0));
   _mrb_symbol_value1542($27, $170);
   var $171=$type;
   var $172=$27;
   assert(12 % 1 === 0);HEAP32[(($171)>>2)]=HEAP32[(($172)>>2)];HEAP32[((($171)+(4))>>2)]=HEAP32[((($172)+(4))>>2)];HEAP32[((($171)+(8))>>2)]=HEAP32[((($172)+(8))>>2)];
   label = 35; break;
  case 31: 
   var $174=$1;
   var $175=_mrb_intern_cstr($174, ((100020)|0));
   _mrb_symbol_value1542($28, $175);
   var $176=$type;
   var $177=$28;
   assert(12 % 1 === 0);HEAP32[(($176)>>2)]=HEAP32[(($177)>>2)];HEAP32[((($176)+(4))>>2)]=HEAP32[((($177)+(4))>>2)];HEAP32[((($176)+(8))>>2)]=HEAP32[((($177)+(8))>>2)];
   label = 35; break;
  case 32: 
   var $179=$1;
   var $180=_mrb_intern_cstr($179, ((99764)|0));
   _mrb_symbol_value1542($29, $180);
   var $181=$type;
   var $182=$29;
   assert(12 % 1 === 0);HEAP32[(($181)>>2)]=HEAP32[(($182)>>2)];HEAP32[((($181)+(4))>>2)]=HEAP32[((($182)+(4))>>2)];HEAP32[((($181)+(8))>>2)]=HEAP32[((($182)+(8))>>2)];
   label = 35; break;
  case 33: 
   var $184=$1;
   var $185=_mrb_intern_cstr($184, ((99364)|0));
   _mrb_symbol_value1542($30, $185);
   var $186=$type;
   var $187=$30;
   assert(12 % 1 === 0);HEAP32[(($186)>>2)]=HEAP32[(($187)>>2)];HEAP32[((($186)+(4))>>2)]=HEAP32[((($187)+(4))>>2)];HEAP32[((($186)+(8))>>2)]=HEAP32[((($187)+(8))>>2)];
   label = 35; break;
  case 34: 
   var $189=$i;
   _mrb_fixnum_value1543($31, $189);
   var $190=$type;
   var $191=$31;
   assert(12 % 1 === 0);HEAP32[(($190)>>2)]=HEAP32[(($191)>>2)];HEAP32[((($190)+(4))>>2)]=HEAP32[((($191)+(4))>>2)];HEAP32[((($190)+(8))>>2)]=HEAP32[((($191)+(8))>>2)];
   label = 35; break;
  case 35: 
   var $193=$i;
   var $194=(($obj_count+8)|0);
   var $195=(($194+($193<<2))|0);
   var $196=HEAP32[(($195)>>2)];
   var $197=(($196)|(0))!=0;
   if ($197) { label = 36; break; } else { label = 37; break; }
  case 36: 
   var $199=$1;
   var $200=$i;
   var $201=(($obj_count+8)|0);
   var $202=(($201+($200<<2))|0);
   var $203=HEAP32[(($202)>>2)];
   _mrb_fixnum_value1543($32, $203);
   _mrb_hash_set($199, $hash, $type, $32);
   label = 37; break;
  case 37: 
   label = 38; break;
  case 38: 
   var $206=$i;
   var $207=((($206)+(1))|0);
   $i=$207;
   label = 10; break;
  case 39: 
   var $209=$agg_result;
   var $210=$hash;
   assert(12 % 1 === 0);HEAP32[(($209)>>2)]=HEAP32[(($210)>>2)];HEAP32[((($209)+(4))>>2)]=HEAP32[((($210)+(4))>>2)];HEAP32[((($209)+(8))>>2)]=HEAP32[((($210)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_symbol_value1542($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=4;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP16[(($6)>>1)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mruby_objectspace_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _mrb_mruby_print_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _mrb_mruby_proc_ext_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _mrb_mruby_random_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _mrb_fixnum_value1543($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mruby_objectspace_gem_init($mrb) {
 var label = 0;
 var $1;
 var $os;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_define_module($2, ((98916)|0));
 $os=$3;
 var $4=$1;
 var $5=$os;
 _mrb_define_class_method($4, $5, ((98376)|0), 632, 4096);
 return;
}
function _GENERATED_TMP_mrb_mruby_print_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_mruby_print_gem_final($2);
 return;
}
function _mrb_printstr($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $argv=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((102820)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,tempInt));
 var $4=$1;
 _printstr1554($4, $argv);
 var $5=$agg_result;
 var $6=$argv;
 assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _printstr1554($mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $str;
   var $s;
   var $len;
   $1=$mrb;
   var $2=(($obj+8)|0);
   var $3=HEAP32[(($2)>>2)];
   var $4=(($3)|(0))==16;
   if ($4) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $6=(($obj)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=$8;
   $str=$9;
   var $10=$str;
   var $11=(($10+20)|0);
   var $12=HEAP32[(($11)>>2)];
   $s=$12;
   var $13=$str;
   var $14=(($13+12)|0);
   var $15=HEAP32[(($14)>>2)];
   $len=$15;
   var $16=$s;
   var $17=$len;
   var $18=HEAP32[((_stdout)>>2)];
   var $19=_fwrite($16, $17, 1, $18);
   label = 3; break;
  case 3: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mruby_print_gem_init($mrb) {
 var label = 0;
 var $1;
 var $krn;
 $1=$mrb;
 var $2=$1;
 var $3=(($2+96)|0);
 var $4=HEAP32[(($3)>>2)];
 $krn=$4;
 var $5=$1;
 var $6=$krn;
 _mrb_define_method($5, $6, ((104932)|0), 70, 262144);
 return;
}
function _GENERATED_TMP_mrb_mruby_proc_ext_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_mruby_proc_ext_gem_final($2);
 return;
}
function _mrb_mruby_proc_ext_gem_init($mrb) {
 var label = 0;
 var $1;
 var $p;
 $1=$mrb;
 var $2=$1;
 var $3=(($2+56)|0);
 var $4=HEAP32[(($3)>>2)];
 $p=$4;
 var $5=$1;
 var $6=$p;
 _mrb_define_method($5, $6, ((102756)|0), 16, 0);
 var $7=$1;
 var $8=$p;
 _mrb_define_method($7, $8, ((104916)|0), 398, 0);
 var $9=$1;
 var $10=$p;
 _mrb_define_method($9, $10, ((100292)|0), 424, 0);
 var $11=$1;
 var $12=$p;
 _mrb_define_method($11, $12, ((96620)|0), 424, 0);
 var $13=$1;
 var $14=$1;
 var $15=(($14+96)|0);
 var $16=HEAP32[(($15)>>2)];
 _mrb_define_class_method($13, $16, ((94096)|0), 120, 0);
 var $17=$1;
 var $18=$1;
 var $19=(($18+96)|0);
 var $20=HEAP32[(($19)>>2)];
 _mrb_define_method($17, $20, ((94096)|0), 120, 0);
 return;
}
function _mrb_proc_lambda($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $p;
 $1=$mrb;
 var $2=(($self)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 $p=$5;
 var $6=$p;
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=$8 >>> 11;
 var $10=$9 & 2097151;
 var $11=$10 & 256;
 var $12=(($11)|(0))!=0;
 var $13=(($12)&(1));
 var $14=(($13) & 255);
 _mrb_bool_value1583($agg_result, $14);
 STACKTOP = sp;
 return;
}
function _mrb_proc_source_location($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $p;
   var $irep;
   var $filename=sp;
   var $lines=(sp)+(12);
   var $2=(sp)+(24);
   var $3=(sp)+(36);
   $1=$mrb;
   var $4=(($self)|0);
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=$6;
   $p=$7;
   var $8=$p;
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 >>> 11;
   var $12=$11 & 2097151;
   var $13=$12 & 128;
   var $14=(($13)|(0))!=0;
   if ($14) { label = 2; break; } else { label = 3; break; }
  case 2: 
   _mrb_nil_value1582($agg_result);
   label = 8; break;
  case 3: 
   var $17=$p;
   var $18=(($17+12)|0);
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   $irep=$20;
   _mrb_nil_value1582($filename);
   _mrb_nil_value1582($lines);
   var $21=$irep;
   var $22=(($21+24)|0);
   var $23=HEAP32[(($22)>>2)];
   var $24=(($23)|(0))!=0;
   if ($24) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $26=$1;
   var $27=$irep;
   var $28=(($27+24)|0);
   var $29=HEAP32[(($28)>>2)];
   _mrb_str_new_cstr($2, $26, $29);
   var $30=$filename;
   var $31=$2;
   assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
   label = 5; break;
  case 5: 
   var $33=$irep;
   var $34=(($33+28)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35)|(0))!=0;
   if ($36) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $38=$irep;
   var $39=(($38+28)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=HEAP16[(($40)>>1)];
   var $42=(($41)&(65535));
   _mrb_fixnum_value1581($3, $42);
   var $43=$lines;
   var $44=$3;
   assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
   label = 7; break;
  case 7: 
   var $46=$1;
   _mrb_assoc_new($agg_result, $46, $filename, $lines);
   label = 8; break;
  case 8: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_proc_inspect($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 132)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $p;
   var $str=sp;
   var $2=(sp)+(12);
   var $irep;
   var $3=(sp)+(24);
   var $4=(sp)+(36);
   var $5=(sp)+(48);
   var $6=(sp)+(60);
   var $7=(sp)+(72);
   var $8=(sp)+(84);
   var $9=(sp)+(96);
   var $10=(sp)+(108);
   var $11=(sp)+(120);
   $1=$mrb;
   var $12=(($self)|0);
   var $13=$12;
   var $14=HEAP32[(($13)>>2)];
   var $15=$14;
   $p=$15;
   var $16=$1;
   _mrb_str_new_cstr($str, $16, ((87288)|0));
   var $17=$1;
   var $18=$1;
   var $19=(($self)|0);
   var $20=$19;
   var $21=HEAP32[(($20)>>2)];
   _mrb_ptr_to_str($2, $18, $21);
   _mrb_str_concat($17, $str, $2);
   var $22=$p;
   var $23=$22;
   var $24=HEAP32[(($23)>>2)];
   var $25=$24 >>> 11;
   var $26=$25 & 2097151;
   var $27=$26 & 128;
   var $28=(($27)|(0))!=0;
   if ($28) { label = 9; break; } else { label = 2; break; }
  case 2: 
   var $30=$p;
   var $31=(($30+12)|0);
   var $32=$31;
   var $33=HEAP32[(($32)>>2)];
   $irep=$33;
   var $34=$1;
   _mrb_str_cat_cstr($3, $34, $str, ((86496)|0));
   var $35=$irep;
   var $36=(($35+24)|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=(($37)|(0))!=0;
   if ($38) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $40=$1;
   var $41=$irep;
   var $42=(($41+24)|0);
   var $43=HEAP32[(($42)>>2)];
   _mrb_str_cat_cstr($4, $40, $str, $43);
   label = 5; break;
  case 4: 
   var $45=$1;
   _mrb_str_cat_cstr($5, $45, $str, ((105864)|0));
   label = 5; break;
  case 5: 
   var $47=$1;
   _mrb_str_cat_cstr($6, $47, $str, ((105248)|0));
   var $48=$irep;
   var $49=(($48+28)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($50)|(0))!=0;
   if ($51) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $53=$1;
   var $54=$irep;
   var $55=(($54+28)|0);
   var $56=HEAP32[(($55)>>2)];
   var $57=HEAP16[(($56)>>1)];
   var $58=(($57)&(65535));
   _mrb_fixnum_value1581($7, $58);
   _mrb_str_append($8, $53, $str, $7);
   label = 8; break;
  case 7: 
   var $60=$1;
   _mrb_str_cat_cstr($9, $60, $str, ((105864)|0));
   label = 8; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $63=$p;
   var $64=$63;
   var $65=HEAP32[(($64)>>2)];
   var $66=$65 >>> 11;
   var $67=$66 & 2097151;
   var $68=$67 & 256;
   var $69=(($68)|(0))!=0;
   if ($69) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $71=$1;
   _mrb_str_cat_cstr($10, $71, $str, ((104488)|0));
   label = 11; break;
  case 11: 
   var $73=$1;
   _mrb_str_cat_cstr($11, $73, $str, ((103964)|0));
   var $74=$agg_result;
   var $75=$str;
   assert(12 % 1 === 0);HEAP32[(($74)>>2)]=HEAP32[(($75)>>2)];HEAP32[((($74)+(4))>>2)]=HEAP32[((($75)+(4))>>2)];HEAP32[((($74)+(8))>>2)]=HEAP32[((($75)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_kernel_proc($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $blk=sp;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((91568)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$blk,tempInt));
   var $4=(($blk+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))==0;
   if ($6) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $8=(($blk)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $13=$1;
   var $14=$1;
   var $15=_mrb_class_get($14, ((89432)|0));
   _mrb_raise($13, $15, ((88256)|0));
   label = 4; break;
  case 4: 
   var $17=$agg_result;
   var $18=$blk;
   assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_value1581($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value1582($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_bool_value1583($agg_result, $boolean) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$boolean;
   label = 2; break;
  case 2: 
   var $3=$1;
   var $4=(($3)&(255));
   var $5=(($4)|(0))!=0;
   var $6=$5 ? 2 : 0;
   var $7=(($v+8)|0);
   HEAP32[(($7)>>2)]=$6;
   var $8=(($v)|0);
   var $9=$8;
   HEAP32[(($9)>>2)]=1;
   label = 3; break;
  case 3: 
   var $11=$agg_result;
   var $12=$v;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _GENERATED_TMP_mrb_mruby_random_gem_init($mrb) {
 var label = 0;
 var $1;
 var $ai;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_gc_arena_save($2);
 $ai=$3;
 var $4=$1;
 _mrb_mruby_random_gem_init($4);
 var $5=$1;
 var $6=$ai;
 _mrb_gc_arena_restore($5, $6);
 return;
}
function _GENERATED_TMP_mrb_mruby_random_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_mruby_random_gem_final($2);
 return;
}
function _mrb_mruby_random_gem_init($mrb) {
 var label = 0;
 var $1;
 var $random;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=(($3+96)|0);
 var $5=HEAP32[(($4)>>2)];
 _mrb_define_method($2, $5, ((102688)|0), 298, 8192);
 var $6=$1;
 var $7=$1;
 var $8=(($7+96)|0);
 var $9=HEAP32[(($8)>>2)];
 _mrb_define_method($6, $9, ((104904)|0), 420, 8192);
 var $10=$1;
 var $11=$1;
 var $12=(($11+44)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=_mrb_define_class($10, ((100284)|0), $13);
 $random=$14;
 var $15=$1;
 var $16=$random;
 _mrb_define_class_method($15, $16, ((102688)|0), 298, 8192);
 var $17=$1;
 var $18=$random;
 _mrb_define_class_method($17, $18, ((104904)|0), 420, 8192);
 var $19=$1;
 var $20=$random;
 _mrb_define_method($19, $20, ((96608)|0), 444, 8192);
 var $21=$1;
 var $22=$random;
 _mrb_define_method($21, $22, ((102688)|0), 340, 8192);
 var $23=$1;
 var $24=$random;
 _mrb_define_method($23, $24, ((104904)|0), 276, 8192);
 return;
}
function _mrb_random_g_rand($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $max=sp;
   var $seed=(sp)+(12);
   var $2=(sp)+(24);
   var $3=(sp)+(36);
   var $4=(sp)+(48);
   var $5=(sp)+(60);
   $1=$mrb;
   var $6=$1;
   _get_opt($2, $6);
   var $7=$max;
   var $8=$2;
   assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
   var $9=$1;
   var $10=$1;
   var $11=_mrb_intern2($10, ((103920)|0), 16);
   _mrb_gv_get($3, $9, $11);
   var $12=$seed;
   var $13=$3;
   assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
   var $14=(($seed+8)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))==0;
   if ($16) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $18=(($seed)|0);
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|(0))!=0;
   if ($21) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $23=$1;
   _mrb_nil_value1607($4);
   _mrb_random_mt_g_srand($5, $23, $4);
   label = 4; break;
  case 4: 
   var $25=$1;
   _mrb_random_mt_g_rand($agg_result, $25, $max);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_random_g_srand($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $seed=sp;
 var $old_seed=(sp)+(12);
 var $2=(sp)+(24);
 var $3=(sp)+(36);
 var $4=(sp)+(48);
 $1=$mrb;
 var $5=$1;
 _get_opt($2, $5);
 var $6=$seed;
 var $7=$2;
 assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
 var $8=$1;
 _mrb_random_mt_g_srand($3, $8, $seed);
 var $9=$seed;
 var $10=$3;
 assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 var $11=$1;
 var $12=$1;
 var $13=_mrb_intern2($12, ((103920)|0), 16);
 _mrb_gv_get($4, $11, $13);
 var $14=$old_seed;
 var $15=$4;
 assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
 var $16=$1;
 var $17=$1;
 var $18=_mrb_intern2($17, ((103920)|0), 16);
 _mrb_gv_set($16, $18, $seed);
 var $19=$agg_result;
 var $20=$old_seed;
 assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_random_init($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $seed=sp;
 var $t;
 var $2=(sp)+(12);
 var $3=(sp)+(24);
 var $4=(sp)+(36);
 $1=$mrb;
 var $5=$1;
 var $6=_mrb_malloc($5, 2508);
 var $7=$6;
 $t=$7;
 var $8=$t;
 var $9=(($8+2496)|0);
 HEAP32[(($9)>>2)]=625;
 var $10=$1;
 _get_opt($2, $10);
 var $11=$seed;
 var $12=$2;
 assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
 var $13=$1;
 var $14=$t;
 _mrb_random_mt_srand($3, $13, $14, $seed);
 var $15=$seed;
 var $16=$3;
 assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
 var $17=$1;
 var $18=$1;
 var $19=_mrb_intern2($18, ((94076)|0), 16);
 _mrb_iv_set($17, $self, $19, $seed);
 var $20=$1;
 var $21=$1;
 var $22=_mrb_intern2($21, ((105848)|0), 15);
 var $23=$1;
 var $24=$1;
 var $25=(($24+44)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$t;
 var $28=$27;
 var $29=_mrb_data_object_alloc($23, $26, $28, 59884);
 var $30=$29;
 _mrb_obj_value1609($4, $30);
 _mrb_iv_set($20, $self, $22, $4);
 var $31=$agg_result;
 var $32=$self;
 assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_random_rand($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $max=sp;
   var $seed=(sp)+(12);
   var $t;
   var $2=(sp)+(24);
   var $3=(sp)+(36);
   var $4=(sp)+(48);
   var $5=(sp)+(60);
   $1=$mrb;
   var $6=$1;
   var $7=_mrb_mt_get_context($6, $self);
   $t=$7;
   var $8=$1;
   _get_opt($2, $8);
   var $9=$max;
   var $10=$2;
   assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   var $11=$1;
   var $12=$1;
   var $13=_mrb_intern2($12, ((94076)|0), 16);
   _mrb_iv_get($3, $11, $self, $13);
   var $14=$seed;
   var $15=$3;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   var $16=(($seed+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0))==0;
   if ($18) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $20=(($seed)|0);
   var $21=$20;
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))!=0;
   if ($23) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $25=$1;
   var $26=$t;
   _mrb_nil_value1607($4);
   _mrb_random_mt_srand($5, $25, $26, $4);
   label = 4; break;
  case 4: 
   var $28=$1;
   var $29=$t;
   _mrb_random_mt_rand($agg_result, $28, $29, $max);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_random_srand($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $seed=sp;
 var $old_seed=(sp)+(12);
 var $t;
 var $2=(sp)+(24);
 var $3=(sp)+(36);
 var $4=(sp)+(48);
 $1=$mrb;
 var $5=$1;
 var $6=_mrb_mt_get_context($5, $self);
 $t=$6;
 var $7=$1;
 _get_opt($2, $7);
 var $8=$seed;
 var $9=$2;
 assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 var $10=$1;
 var $11=$t;
 _mrb_random_mt_srand($3, $10, $11, $seed);
 var $12=$seed;
 var $13=$3;
 assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
 var $14=$1;
 var $15=$1;
 var $16=_mrb_intern2($15, ((94076)|0), 16);
 _mrb_iv_get($4, $14, $self, $16);
 var $17=$old_seed;
 var $18=$4;
 assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 var $19=$1;
 var $20=$1;
 var $21=_mrb_intern2($20, ((94076)|0), 16);
 _mrb_iv_set($19, $self, $21, $seed);
 var $22=$agg_result;
 var $23=$old_seed;
 assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_mt_get_context($mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $t;
   var $context=sp;
   var $2=(sp)+(12);
   $1=$mrb;
   var $3=$1;
   var $4=$1;
   var $5=_mrb_intern2($4, ((105848)|0), 15);
   _mrb_iv_get($2, $3, $self, $5);
   var $6=$context;
   var $7=$2;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   var $8=$1;
   var $9=_mrb_data_get_ptr($8, $context, 59884);
   var $10=$9;
   $t=$10;
   var $11=$t;
   var $12=(($11)|(0))!=0;
   if ($12) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $14=$1;
   var $15=$1;
   var $16=_mrb_class_get($15, ((105232)|0));
   _mrb_raise($14, $16, ((104452)|0));
   label = 3; break;
  case 3: 
   var $18=$t;
   STACKTOP = sp;
   return $18;
  default: assert(0, "bad label: " + label);
 }
}
function _get_opt($agg_result, $mrb) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $arg=sp;
   var $2=(sp)+(12);
   var $3=(sp)+(24);
   var $4=(sp)+(36);
   $1=$mrb;
   _mrb_fixnum_value1606($2, 0);
   var $5=$arg;
   var $6=$2;
   assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
   var $7=$1;
   var $8=_mrb_get_args($7, ((91564)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$arg,tempInt));
   var $9=(($arg+8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))==0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=(($arg)|0);
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))!=0;
   if ($16) { label = 3; break; } else { label = 8; break; }
  case 3: 
   var $18=(($arg+8)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19)|(0))==3;
   if ($20) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $22=$1;
   var $23=$1;
   var $24=_mrb_class_get($23, ((89416)|0));
   _mrb_raise($22, $24, ((88232)|0));
   label = 5; break;
  case 5: 
   var $26=$1;
   _mrb_check_convert_type($3, $26, $arg, 3, ((87280)|0), ((86488)|0));
   var $27=$arg;
   var $28=$3;
   assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
   var $29=(($arg)|0);
   var $30=$29;
   var $31=HEAP32[(($30)>>2)];
   var $32=(($31)|(0)) < 0;
   if ($32) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $34=(($arg)|0);
   var $35=$34;
   var $36=HEAP32[(($35)>>2)];
   var $37=(((-$36))|0);
   _mrb_fixnum_value1606($4, $37);
   var $38=$arg;
   var $39=$4;
   assert(12 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];HEAP32[((($38)+(8))>>2)]=HEAP32[((($39)+(8))>>2)];
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $42=$agg_result;
   var $43=$arg;
   assert(12 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];HEAP32[((($42)+(8))>>2)]=HEAP32[((($43)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_random_mt_srand($agg_result, $mrb, $t, $seed) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $seed; $seed = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($seed)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($seed)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($seed)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3=sp;
   var $4=(sp)+(12);
   $1=$mrb;
   $2=$t;
   var $5=(($seed+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==0;
   if ($7) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $9=(($seed)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))!=0;
   if ($12) { label = 6; break; } else { label = 3; break; }
  case 3: 
   var $14=_time(0);
   var $15=$2;
   var $16=_mt_rand($15);
   var $17=((($14)+($16))|0);
   _mrb_fixnum_value1606($3, $17);
   var $18=$seed;
   var $19=$3;
   assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
   var $20=(($seed)|0);
   var $21=$20;
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0)) < 0;
   if ($23) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $25=(($seed)|0);
   var $26=$25;
   var $27=HEAP32[(($26)>>2)];
   var $28=(((-$27))|0);
   _mrb_fixnum_value1606($4, $28);
   var $29=$seed;
   var $30=$4;
   assert(12 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($29)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $33=$2;
   var $34=(($seed)|0);
   var $35=$34;
   var $36=HEAP32[(($35)>>2)];
   _mt_srand($33, $36);
   var $37=$agg_result;
   var $38=$seed;
   assert(12 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_value1606($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mt_rand($t) {
 var label = 0;
 var $1;
 $1=$t;
 var $2=$1;
 var $3=_mrb_random_genrand_int32($2);
 return $3;
}
function _GENERATED_TMP_mrb_mruby_print_gem_init($mrb) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ai;
   var $2=sp;
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_gc_arena_save($3);
   $ai=$4;
   var $5=$1;
   _mrb_mruby_print_gem_init($5);
   var $6=$1;
   _mrb_load_irep($2, $6, ((79416)|0));
   var $7=$1;
   var $8=(($7+16)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$1;
   _mrb_print_error($12);
   _exit(1);
   throw "Reached an unreachable!";
  case 3: 
   var $14=$1;
   var $15=$ai;
   _mrb_gc_arena_restore($14, $15);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _GENERATED_TMP_mrb_mruby_proc_ext_gem_init($mrb) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ai;
   var $2=sp;
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_gc_arena_save($3);
   $ai=$4;
   var $5=$1;
   _mrb_mruby_proc_ext_gem_init($5);
   var $6=$1;
   _mrb_load_irep($2, $6, ((78424)|0));
   var $7=$1;
   var $8=(($7+16)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$1;
   _mrb_print_error($12);
   _exit(1);
   throw "Reached an unreachable!";
  case 3: 
   var $14=$1;
   var $15=$ai;
   _mrb_gc_arena_restore($14, $15);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mruby_range_ext_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _mrb_mruby_sprintf_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _mt_srand($t, $seed) {
 var label = 0;
 var $1;
 var $2;
 $1=$t;
 $2=$seed;
 var $3=$1;
 var $4=$2;
 _mrb_random_init_genrand($3, $4);
 return;
}
function _mrb_nil_value1607($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_random_mt_rand($agg_result, $mrb, $t, $max) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $max; $max = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($max)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($max)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($max)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $value=sp;
   var $3=(sp)+(12);
   var $4=(sp)+(24);
   $1=$mrb;
   $2=$t;
   var $5=(($max)|0);
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))==0;
   if ($8) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $10=$1;
   var $11=$2;
   var $12=_mt_rand_real($11);
   _mrb_float_value1608($3, $10, $12);
   var $13=$value;
   var $14=$3;
   assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
   label = 4; break;
  case 3: 
   var $16=$2;
   var $17=_mt_rand($16);
   var $18=(($max)|0);
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $21=((((($17)>>>(0)))%((($20)>>>(0))))&-1);
   _mrb_fixnum_value1606($4, $21);
   var $22=$value;
   var $23=$4;
   assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
   label = 4; break;
  case 4: 
   var $25=$agg_result;
   var $26=$value;
   assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_float_value1608($agg_result, $mrb, $f) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $v=sp;
   $1=$mrb;
   $2=$f;
   label = 2; break;
  case 2: 
   var $4=(($v+8)|0);
   HEAP32[(($4)>>2)]=6;
   var $5=$2;
   var $6=(($v)|0);
   var $7=$6;
   (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($7)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($7)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 3; break;
  case 3: 
   var $9=$agg_result;
   var $10=$v;
   assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mt_rand_real($t) {
 var label = 0;
 var $1;
 $1=$t;
 var $2=$1;
 var $3=_mrb_random_genrand_real1($2);
 return $3;
}
function _mrb_obj_value1609($agg_result, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   var $b;
   $1=$p;
   var $2=$1;
   var $3=$2;
   $b=$3;
   label = 2; break;
  case 2: 
   var $5=$b;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 255;
   var $9=(($v+8)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=$1;
   var $11=(($v)|0);
   var $12=$11;
   HEAP32[(($12)>>2)]=$10;
   label = 3; break;
  case 3: 
   var $14=$agg_result;
   var $15=$v;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_random_mt_g_srand($agg_result, $mrb, $seed) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $seed; $seed = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($seed)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($seed)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($seed)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2=sp;
   var $3=(sp)+(12);
   $1=$mrb;
   var $4=(($seed+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))==0;
   if ($6) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $8=(($seed)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))!=0;
   if ($11) { label = 6; break; } else { label = 3; break; }
  case 3: 
   var $13=_time(0);
   var $14=_mt_g_rand();
   var $15=((($13)+($14))|0);
   _mrb_fixnum_value1606($2, $15);
   var $16=$seed;
   var $17=$2;
   assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
   var $18=(($seed)|0);
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $21=(($20)|(0)) < 0;
   if ($21) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $23=(($seed)|0);
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   var $26=(((-$25))|0);
   _mrb_fixnum_value1606($3, $26);
   var $27=$seed;
   var $28=$3;
   assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $31=(($seed)|0);
   var $32=$31;
   var $33=HEAP32[(($32)>>2)];
   _mt_g_srand($33);
   var $34=$agg_result;
   var $35=$seed;
   assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mt_g_srand($seed) {
 var label = 0;
 var $1;
 $1=$seed;
 var $2=$1;
 _init_genrand($2);
 return;
}
function _mt_g_rand() {
 var label = 0;
 var $1=_genrand_int32();
 return $1;
}
function _mrb_random_mt_g_rand($agg_result, $mrb, $max) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $max; $max = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($max)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($max)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($max)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $value=sp;
   var $2=(sp)+(12);
   var $3=(sp)+(24);
   $1=$mrb;
   var $4=(($max)|0);
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==0;
   if ($7) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $9=$1;
   var $10=_mt_g_rand_real();
   _mrb_float_value1608($2, $9, $10);
   var $11=$value;
   var $12=$2;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   label = 4; break;
  case 3: 
   var $14=_mt_g_rand();
   var $15=(($max)|0);
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $18=((((($14)>>>(0)))%((($17)>>>(0))))&-1);
   _mrb_fixnum_value1606($3, $18);
   var $19=$value;
   var $20=$3;
   assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
   label = 4; break;
  case 4: 
   var $22=$agg_result;
   var $23=$value;
   assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mt_g_rand_real() {
 var label = 0;
 var $1=_genrand_real1();
 return $1;
}
function _GENERATED_TMP_mrb_mruby_range_ext_gem_init($mrb) {
 var label = 0;
 var $1;
 var $ai;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_gc_arena_save($2);
 $ai=$3;
 var $4=$1;
 _mrb_mruby_range_ext_gem_init($4);
 var $5=$1;
 var $6=$ai;
 _mrb_gc_arena_restore($5, $6);
 return;
}
function _GENERATED_TMP_mrb_mruby_range_ext_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_mruby_range_ext_gem_final($2);
 return;
}
function _mrb_mruby_range_ext_gem_init($mrb) {
 var label = 0;
 var $1;
 var $s;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_class_get($2, ((102600)|0));
 $s=$3;
 var $4=$1;
 var $5=$s;
 _mrb_define_method($4, $5, ((104888)|0), 44, 262144);
 var $6=$1;
 var $7=$s;
 _mrb_define_method($6, $7, ((100268)|0), 182, 8192);
 var $8=$1;
 var $9=$s;
 _mrb_define_method($8, $9, ((96572)|0), 266, 8192);
 return;
}
function _mrb_range_cover($agg_result, $mrb, $range) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $val=sp;
   var $r;
   var $beg=(sp)+(12);
   var $end=(sp)+(24);
   $1=$mrb;
   var $2=(($range)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $r=$5;
   var $6=$1;
   var $7=_mrb_get_args($6, ((89404)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$val,tempInt));
   var $8=$r;
   var $9=(($8+12)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|0);
   var $12=$beg;
   var $13=$11;
   assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
   var $14=$r;
   var $15=(($14+12)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16+12)|0);
   var $18=$end;
   var $19=$17;
   assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
   var $20=$1;
   var $21=_r_le1626($20, $beg, $val);
   var $22=(($21 << 24) >> 24)!=0;
   if ($22) { label = 2; break; } else { label = 10; break; }
  case 2: 
   var $24=$r;
   var $25=(($24+16)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|(0))!=0;
   if ($27) { label = 3; break; } else { label = 6; break; }
  case 3: 
   var $29=$1;
   var $30=_r_lt($29, $val, $end);
   var $31=(($30 << 24) >> 24)!=0;
   if ($31) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _mrb_true_value1627($agg_result);
   label = 11; break;
  case 5: 
   label = 9; break;
  case 6: 
   var $35=$1;
   var $36=_r_le1626($35, $val, $end);
   var $37=(($36 << 24) >> 24)!=0;
   if ($37) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _mrb_true_value1627($agg_result);
   label = 11; break;
  case 8: 
   label = 9; break;
  case 9: 
   label = 10; break;
  case 10: 
   _mrb_false_value1628($agg_result);
   label = 11; break;
  case 11: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_range_first($agg_result, $mrb, $range) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $num=sp;
   var $array=(sp)+(12);
   var $r;
   var $2=(sp)+(24);
   var $3=(sp)+(36);
   $1=$mrb;
   var $4=(($range)|0);
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=$6;
   $r=$7;
   var $8=$1;
   var $9=_mrb_get_args($8, ((94052)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$num,tempInt));
   var $10=(($9)|(0))==0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$r;
   var $13=(($12+12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14)|0);
   var $16=$agg_result;
   var $17=$15;
   assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
   label = 4; break;
  case 3: 
   var $19=$1;
   _mrb_funcall($2, $19, $range, ((91540)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $20=$array;
   var $21=$2;
   assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
   var $22=$1;
   var $23=$1;
   _mrb_to_int($3, $23, $num);
   _mrb_funcall($agg_result, $22, $array, ((100268)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_range_last($agg_result, $mrb, $range) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $num=sp;
   var $array=(sp)+(12);
   var $r;
   var $2=(sp)+(24);
   var $3=(sp)+(36);
   $1=$mrb;
   var $4=(($range)|0);
   var $5=$4;
   var $6=HEAP32[(($5)>>2)];
   var $7=$6;
   $r=$7;
   var $8=$1;
   var $9=_mrb_get_args($8, ((94052)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$num,tempInt));
   var $10=(($9)|(0))==0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$r;
   var $13=(($12+12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($14+12)|0);
   var $16=$agg_result;
   var $17=$15;
   assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
   label = 4; break;
  case 3: 
   var $19=$1;
   _mrb_funcall($2, $19, $range, ((91540)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   var $20=$array;
   var $21=$2;
   assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
   var $22=$1;
   var $23=$1;
   _mrb_to_int($3, $23, $num);
   _mrb_funcall($agg_result, $22, $array, ((96572)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _r_le1626($mrb, $a, $b) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $r=sp;
   var $c;
   $2=$mrb;
   var $3=$2;
   _mrb_funcall($r, $3, $a, ((88228)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($b)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($b)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($b)+(8))>>2)],tempInt));
   var $4=(($r+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))==3;
   if ($6) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $8=(($r)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   $c=$10;
   var $11=$c;
   var $12=(($11)|(0))==0;
   if ($12) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $14=$c;
   var $15=(($14)|(0))==-1;
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   $1=1;
   label = 7; break;
  case 5: 
   label = 6; break;
  case 6: 
   $1=0;
   label = 7; break;
  case 7: 
   var $20=$1;
   STACKTOP = sp;
   return $20;
  default: assert(0, "bad label: " + label);
 }
}
function _r_lt($mrb, $a, $b) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $r=sp;
   $2=$mrb;
   var $3=$2;
   _mrb_funcall($r, $3, $a, ((88228)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($b)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($b)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($b)+(8))>>2)],tempInt));
   var $4=(($r+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))==3;
   if ($6) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $8=(($r)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))==-1;
   if ($11) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $1=1;
   label = 6; break;
  case 4: 
   label = 5; break;
  case 5: 
   $1=0;
   label = 6; break;
  case 6: 
   var $16=$1;
   STACKTOP = sp;
   return $16;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_true_value1627($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=2;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=1;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_false_value1628($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=1;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _GENERATED_TMP_mrb_mruby_sprintf_gem_init($mrb) {
 var label = 0;
 var $1;
 var $ai;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_gc_arena_save($2);
 $ai=$3;
 var $4=$1;
 _mrb_mruby_sprintf_gem_init($4);
 var $5=$1;
 var $6=$ai;
 _mrb_gc_arena_restore($5, $6);
 return;
}
function _GENERATED_TMP_mrb_mruby_sprintf_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_mruby_sprintf_gem_final($2);
 return;
}
function _mrb_mruby_sprintf_gem_init($mrb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $krn;
   $1=$mrb;
   var $2=$1;
   var $3=(($2+96)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0))==0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   var $8=_mrb_define_module($7, ((102480)|0));
   var $9=$1;
   var $10=(($9+96)|0);
   HEAP32[(($10)>>2)]=$8;
   label = 3; break;
  case 3: 
   var $12=$1;
   var $13=(($12+96)|0);
   var $14=HEAP32[(($13)>>2)];
   $krn=$14;
   var $15=$1;
   var $16=$krn;
   _mrb_define_method($15, $16, ((104880)|0), 222, 4096);
   var $17=$1;
   var $18=$krn;
   _mrb_define_method($17, $18, ((100260)|0), 222, 4096);
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_f_sprintf($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $argc=sp;
   var $argv=(sp)+(4);
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((102460)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
   var $4=HEAP32[(($argc)>>2)];
   var $5=(($4)|(0)) <= 0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=$1;
   var $8=$1;
   var $9=_mrb_class_get($8, ((104864)|0));
   _mrb_raise($7, $9, ((100240)|0));
   _mrb_nil_value1688($agg_result);
   label = 4; break;
  case 3: 
   var $11=$1;
   var $12=HEAP32[(($argc)>>2)];
   var $13=((($12)-(1))|0);
   var $14=HEAP32[(($argv)>>2)];
   var $15=(($14+12)|0);
   var $16=HEAP32[(($argv)>>2)];
   var $17=(($16)|0);
   _mrb_str_format($agg_result, $11, $13, $15, $17);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value1688($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_format($agg_result, $mrb, $argc, $argv, $fmt) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 1396)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $fmt; $fmt = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($fmt)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($fmt)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($fmt)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $p;
   var $end;
   var $buf;
   var $blen;
   var $bsiz;
   var $result=sp;
   var $n;
   var $width;
   var $prec;
   var $flags;
   var $nextarg;
   var $posarg;
   var $nextvalue=(sp)+(12);
   var $tmp=(sp)+(24);
   var $str=(sp)+(36);
   var $hash=(sp)+(48);
   var $4=(sp)+(60);
   var $5=(sp)+(72);
   var $t;
   var $id;
   var $6=(sp)+(84);
   var $7=(sp)+(96);
   var $8=(sp)+(108);
   var $next_n;
   var $9=(sp)+(120);
   var $10=(sp)+(132);
   var $11=(sp)+(144);
   var $12=(sp)+(156);
   var $13=(sp)+(168);
   var $14=(sp)+(180);
   var $15=(sp)+(192);
   var $16=(sp)+(204);
   var $17=(sp)+(216);
   var $start;
   var $term;
   var $symname=(sp)+(228);
   var $18=(sp)+(240);
   var $19=(sp)+(252);
   var $20=(sp)+(264);
   var $21=(sp)+(276);
   var $22=(sp)+(288);
   var $23=(sp)+(300);
   var $24=(sp)+(312);
   var $25=(sp)+(324);
   var $26=(sp)+(336);
   var $27=(sp)+(348);
   var $28=(sp)+(360);
   var $29=(sp)+(372);
   var $30=(sp)+(384);
   var $next_n1;
   var $31=(sp)+(396);
   var $32=(sp)+(408);
   var $33=(sp)+(420);
   var $34=(sp)+(432);
   var $35=(sp)+(444);
   var $36=(sp)+(456);
   var $37=(sp)+(468);
   var $38=(sp)+(480);
   var $39=(sp)+(492);
   var $40=(sp)+(504);
   var $41=(sp)+(516);
   var $42=(sp)+(528);
   var $43=(sp)+(540);
   var $next_n2;
   var $44=(sp)+(552);
   var $45=(sp)+(564);
   var $46=(sp)+(576);
   var $47=(sp)+(588);
   var $48=(sp)+(600);
   var $49=(sp)+(612);
   var $50=(sp)+(624);
   var $51=(sp)+(636);
   var $52=(sp)+(648);
   var $53=(sp)+(660);
   var $54=(sp)+(672);
   var $55=(sp)+(684);
   var $56=(sp)+(696);
   var $next_n3;
   var $57=(sp)+(708);
   var $val=(sp)+(720);
   var $58=(sp)+(732);
   var $59=(sp)+(744);
   var $tmp4=(sp)+(756);
   var $c;
   var $60=(sp)+(768);
   var $61=(sp)+(780);
   var $62=(sp)+(792);
   var $63=(sp)+(804);
   var $64=(sp)+(816);
   var $65=(sp)+(828);
   var $arg=(sp)+(840);
   var $66=(sp)+(852);
   var $67=(sp)+(864);
   var $len;
   var $slen;
   var $68=(sp)+(876);
   var $69=(sp)+(888);
   var $p5;
   var $70=(sp)+(900);
   var $71=(sp)+(912);
   var $72=(sp)+(924);
   var $73=(sp)+(936);
   var $val6=(sp)+(948);
   var $74=(sp)+(960);
   var $75=(sp)+(972);
   var $fbuf=(sp)+(984);
   var $nbuf=(sp)+(1016);
   var $s;
   var $prefix;
   var $sign;
   var $dots;
   var $sc=(sp)+(1080);
   var $v;
   var $org_v;
   var $base;
   var $len7;
   var $76=(sp)+(1084);
   var $77=(sp)+(1096);
   var $78=(sp)+(1108);
   var $79=(sp)+(1120);
   var $80=(sp)+(1132);
   var $81=(sp)+(1144);
   var $82=(sp)+(1156);
   var $83=(sp)+(1168);
   var $84=(sp)+(1180);
   var $c8;
   var $c9;
   var $d;
   var $size;
   var $pp;
   var $c10;
   var $size11;
   var $85=(sp)+(1192);
   var $86=(sp)+(1204);
   var $plen;
   var $87=(sp)+(1216);
   var $88=(sp)+(1228);
   var $89=(sp)+(1240);
   var $c12;
   var $c13;
   var $90=(sp)+(1252);
   var $91=(sp)+(1264);
   var $val14=(sp)+(1276);
   var $92=(sp)+(1288);
   var $93=(sp)+(1300);
   var $fval;
   var $i=(sp)+(1312);
   var $need;
   var $fbuf15=(sp)+(1316);
   var $94=(sp)+(1348);
   var $expr;
   var $elen;
   var $95=(sp)+(1360);
   var $96=(sp)+(1372);
   var $97=(sp)+(1384);
   $1=$mrb;
   $2=$argc;
   $3=$argv;
   $flags=0;
   $nextarg=1;
   $posarg=0;
   _mrb_undef_value1689($hash);
   var $98=$2;
   var $99=((($98)+(1))|0);
   $2=$99;
   var $100=$3;
   var $101=((($100)-(12))|0);
   $3=$101;
   var $102=$1;
   _mrb_str_to_str($4, $102, $fmt);
   var $103=$fmt;
   var $104=$4;
   assert(12 % 1 === 0);HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($104)+(4))>>2)];HEAP32[((($103)+(8))>>2)]=HEAP32[((($104)+(8))>>2)];
   var $105=(($fmt)|0);
   var $106=$105;
   var $107=HEAP32[(($106)>>2)];
   var $108=$107;
   var $109=(($108+20)|0);
   var $110=HEAP32[(($109)>>2)];
   $p=$110;
   var $111=$p;
   var $112=(($fmt)|0);
   var $113=$112;
   var $114=HEAP32[(($113)>>2)];
   var $115=$114;
   var $116=(($115+12)|0);
   var $117=HEAP32[(($116)>>2)];
   var $118=(($111+$117)|0);
   $end=$118;
   $blen=0;
   $bsiz=120;
   var $119=$1;
   var $120=$bsiz;
   _mrb_str_buf_new($5, $119, $120);
   var $121=$result;
   var $122=$5;
   assert(12 % 1 === 0);HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($122)+(4))>>2)];HEAP32[((($121)+(8))>>2)]=HEAP32[((($122)+(8))>>2)];
   var $123=(($result)|0);
   var $124=$123;
   var $125=HEAP32[(($124)>>2)];
   var $126=$125;
   var $127=(($126+20)|0);
   var $128=HEAP32[(($127)>>2)];
   $buf=$128;
   var $129=$buf;
   var $130=$bsiz;
   _memset($129, 0, $130);
   label = 2; break;
  case 2: 
   var $132=$p;
   var $133=$end;
   var $134=(($132)>>>(0)) < (($133)>>>(0));
   if ($134) { label = 3; break; } else { label = 583; break; }
  case 3: 
   $id=0;
   var $136=$p;
   $t=$136;
   label = 4; break;
  case 4: 
   var $138=$t;
   var $139=$end;
   var $140=(($138)>>>(0)) < (($139)>>>(0));
   if ($140) { label = 5; break; } else { var $147 = 0;label = 6; break; }
  case 5: 
   var $142=$t;
   var $143=HEAP8[($142)];
   var $144=(($143 << 24) >> 24);
   var $145=(($144)|(0))!=37;
   var $147 = $145;label = 6; break;
  case 6: 
   var $147;
   if ($147) { label = 7; break; } else { label = 9; break; }
  case 7: 
   label = 8; break;
  case 8: 
   var $150=$t;
   var $151=(($150+1)|0);
   $t=$151;
   label = 4; break;
  case 9: 
   label = 10; break;
  case 10: 
   label = 11; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $156=$blen;
   var $157=$t;
   var $158=$p;
   var $159=$157;
   var $160=$158;
   var $161=((($159)-($160))|0);
   var $162=((($156)+($161))|0);
   var $163=$bsiz;
   var $164=(($162)|(0)) >= (($163)|(0));
   if ($164) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $166=$bsiz;
   var $167=($166<<1);
   $bsiz=$167;
   label = 12; break;
  case 14: 
   var $169=$1;
   var $170=$bsiz;
   _mrb_str_resize($6, $169, $result, $170);
   var $171=(($result)|0);
   var $172=$171;
   var $173=HEAP32[(($172)>>2)];
   var $174=$173;
   var $175=(($174+20)|0);
   var $176=HEAP32[(($175)>>2)];
   $buf=$176;
   label = 15; break;
  case 15: 
   var $178=$blen;
   var $179=$buf;
   var $180=(($179+$178)|0);
   var $181=$p;
   var $182=$t;
   var $183=$p;
   var $184=$182;
   var $185=$183;
   var $186=((($184)-($185))|0);
   assert($186 % 1 === 0);(_memcpy($180, $181, $186)|0);
   var $187=$t;
   var $188=$p;
   var $189=$187;
   var $190=$188;
   var $191=((($189)-($190))|0);
   var $192=$blen;
   var $193=((($192)+($191))|0);
   $blen=$193;
   label = 16; break;
  case 16: 
   var $195=$t;
   var $196=$end;
   var $197=(($195)>>>(0)) >= (($196)>>>(0));
   if ($197) { label = 17; break; } else { label = 18; break; }
  case 17: 
   label = 584; break;
  case 18: 
   var $200=$t;
   var $201=(($200+1)|0);
   $p=$201;
   $prec=-1;
   $width=-1;
   _mrb_undef_value1689($7);
   var $202=$nextvalue;
   var $203=$7;
   assert(12 % 1 === 0);HEAP32[(($202)>>2)]=HEAP32[(($203)>>2)];HEAP32[((($202)+(4))>>2)]=HEAP32[((($203)+(4))>>2)];HEAP32[((($202)+(8))>>2)]=HEAP32[((($203)+(8))>>2)];
   label = 19; break;
  case 19: 
   var $205=$p;
   var $206=HEAP8[($205)];
   var $207=(($206 << 24) >> 24);
   if ((($207)|(0))==32) {
    label = 21; break;
   }
   else if ((($207)|(0))==35) {
    label = 26; break;
   }
   else if ((($207)|(0))==43) {
    label = 31; break;
   }
   else if ((($207)|(0))==45) {
    label = 36; break;
   }
   else if ((($207)|(0))==48) {
    label = 41; break;
   }
   else if ((($207)|(0))==49 | (($207)|(0))==50 | (($207)|(0))==51 | (($207)|(0))==52 | (($207)|(0))==53 | (($207)|(0))==54 | (($207)|(0))==55 | (($207)|(0))==56 | (($207)|(0))==57) {
    label = 46; break;
   }
   else if ((($207)|(0))==60 | (($207)|(0))==123) {
    label = 77; break;
   }
   else if ((($207)|(0))==42) {
    label = 95; break;
   }
   else if ((($207)|(0))==46) {
    label = 141; break;
   }
   else if ((($207)|(0))==10 | (($207)|(0))==0) {
    label = 197; break;
   }
   else if ((($207)|(0))==37) {
    label = 198; break;
   }
   else if ((($207)|(0))==99) {
    label = 208; break;
   }
   else if ((($207)|(0))==115 | (($207)|(0))==112) {
    label = 264; break;
   }
   else if ((($207)|(0))==100 | (($207)|(0))==105 | (($207)|(0))==111 | (($207)|(0))==120 | (($207)|(0))==88 | (($207)|(0))==98 | (($207)|(0))==66 | (($207)|(0))==117) {
    label = 322; break;
   }
   else if ((($207)|(0))==102 | (($207)|(0))==103 | (($207)|(0))==71 | (($207)|(0))==101 | (($207)|(0))==69 | (($207)|(0))==97 | (($207)|(0))==65) {
    label = 512; break;
   }
   else {
   label = 20; break;
   }
  case 20: 
   var $209=$1;
   var $210=$1;
   var $211=_mrb_class_get($210, ((104864)|0));
   var $212=$1;
   var $213=$p;
   _mrb_str_new($8, $212, $213, 1);
   _mrb_raisef($209, $211, ((96540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($8)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($8)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($8)+(8))>>2)],tempInt));
   label = 581; break;
  case 21: 
   var $215=$flags;
   var $216=$215 & 32;
   var $217=(($216)|(0))!=0;
   if ($217) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $219=$1;
   var $220=$1;
   var $221=_mrb_class_get($220, ((104864)|0));
   _mrb_raise($219, $221, ((94032)|0));
   label = 23; break;
  case 23: 
   var $223=$flags;
   var $224=$223 & 128;
   var $225=(($224)|(0))!=0;
   if ($225) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $227=$1;
   var $228=$1;
   var $229=_mrb_class_get($228, ((104864)|0));
   _mrb_raise($227, $229, ((91492)|0));
   label = 25; break;
  case 25: 
   var $231=$flags;
   var $232=$231 | 16;
   $flags=$232;
   var $233=$p;
   var $234=(($233+1)|0);
   $p=$234;
   label = 19; break;
  case 26: 
   var $236=$flags;
   var $237=$236 & 32;
   var $238=(($237)|(0))!=0;
   if ($238) { label = 27; break; } else { label = 28; break; }
  case 27: 
   var $240=$1;
   var $241=$1;
   var $242=_mrb_class_get($241, ((104864)|0));
   _mrb_raise($240, $242, ((94032)|0));
   label = 28; break;
  case 28: 
   var $244=$flags;
   var $245=$244 & 128;
   var $246=(($245)|(0))!=0;
   if ($246) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $248=$1;
   var $249=$1;
   var $250=_mrb_class_get($249, ((104864)|0));
   _mrb_raise($248, $250, ((91492)|0));
   label = 30; break;
  case 30: 
   var $252=$flags;
   var $253=$252 | 1;
   $flags=$253;
   var $254=$p;
   var $255=(($254+1)|0);
   $p=$255;
   label = 19; break;
  case 31: 
   var $257=$flags;
   var $258=$257 & 32;
   var $259=(($258)|(0))!=0;
   if ($259) { label = 32; break; } else { label = 33; break; }
  case 32: 
   var $261=$1;
   var $262=$1;
   var $263=_mrb_class_get($262, ((104864)|0));
   _mrb_raise($261, $263, ((94032)|0));
   label = 33; break;
  case 33: 
   var $265=$flags;
   var $266=$265 & 128;
   var $267=(($266)|(0))!=0;
   if ($267) { label = 34; break; } else { label = 35; break; }
  case 34: 
   var $269=$1;
   var $270=$1;
   var $271=_mrb_class_get($270, ((104864)|0));
   _mrb_raise($269, $271, ((91492)|0));
   label = 35; break;
  case 35: 
   var $273=$flags;
   var $274=$273 | 4;
   $flags=$274;
   var $275=$p;
   var $276=(($275+1)|0);
   $p=$276;
   label = 19; break;
  case 36: 
   var $278=$flags;
   var $279=$278 & 32;
   var $280=(($279)|(0))!=0;
   if ($280) { label = 37; break; } else { label = 38; break; }
  case 37: 
   var $282=$1;
   var $283=$1;
   var $284=_mrb_class_get($283, ((104864)|0));
   _mrb_raise($282, $284, ((94032)|0));
   label = 38; break;
  case 38: 
   var $286=$flags;
   var $287=$286 & 128;
   var $288=(($287)|(0))!=0;
   if ($288) { label = 39; break; } else { label = 40; break; }
  case 39: 
   var $290=$1;
   var $291=$1;
   var $292=_mrb_class_get($291, ((104864)|0));
   _mrb_raise($290, $292, ((91492)|0));
   label = 40; break;
  case 40: 
   var $294=$flags;
   var $295=$294 | 2;
   $flags=$295;
   var $296=$p;
   var $297=(($296+1)|0);
   $p=$297;
   label = 19; break;
  case 41: 
   var $299=$flags;
   var $300=$299 & 32;
   var $301=(($300)|(0))!=0;
   if ($301) { label = 42; break; } else { label = 43; break; }
  case 42: 
   var $303=$1;
   var $304=$1;
   var $305=_mrb_class_get($304, ((104864)|0));
   _mrb_raise($303, $305, ((94032)|0));
   label = 43; break;
  case 43: 
   var $307=$flags;
   var $308=$307 & 128;
   var $309=(($308)|(0))!=0;
   if ($309) { label = 44; break; } else { label = 45; break; }
  case 44: 
   var $311=$1;
   var $312=$1;
   var $313=_mrb_class_get($312, ((104864)|0));
   _mrb_raise($311, $313, ((91492)|0));
   label = 45; break;
  case 45: 
   var $315=$flags;
   var $316=$315 | 8;
   $flags=$316;
   var $317=$p;
   var $318=(($317+1)|0);
   $p=$318;
   label = 19; break;
  case 46: 
   $n=0;
   label = 47; break;
  case 47: 
   var $321=$p;
   var $322=$end;
   var $323=(($321)>>>(0)) < (($322)>>>(0));
   if ($323) { label = 48; break; } else { var $331 = 0;label = 49; break; }
  case 48: 
   var $325=$p;
   var $326=HEAP8[($325)];
   var $327=(($326)&(255));
   var $328=_isdigit($327);
   var $329=(($328)|(0))!=0;
   var $331 = $329;label = 49; break;
  case 49: 
   var $331;
   if ($331) { label = 50; break; } else { label = 54; break; }
  case 50: 
   var $333=$n;
   var $334=((($333)*(10))&-1);
   var $335=$p;
   var $336=HEAP8[($335)];
   var $337=(($336 << 24) >> 24);
   var $338=((($337)-(48))|0);
   var $339=((($334)+($338))|0);
   $next_n=$339;
   var $340=$next_n;
   var $341=((((($340)|(0)))/(10))&-1);
   var $342=$n;
   var $343=(($341)|(0))!=(($342)|(0));
   if ($343) { label = 51; break; } else { label = 52; break; }
  case 51: 
   var $345=$1;
   var $346=$1;
   var $347=_mrb_class_get($346, ((104864)|0));
   _mrb_raise($345, $347, ((89388)|0));
   label = 52; break;
  case 52: 
   var $349=$next_n;
   $n=$349;
   label = 53; break;
  case 53: 
   var $351=$p;
   var $352=(($351+1)|0);
   $p=$352;
   label = 47; break;
  case 54: 
   var $354=$p;
   var $355=$end;
   var $356=(($354)>>>(0)) >= (($355)>>>(0));
   if ($356) { label = 55; break; } else { label = 56; break; }
  case 55: 
   var $358=$1;
   var $359=$1;
   var $360=_mrb_class_get($359, ((104864)|0));
   _mrb_raise($358, $360, ((88192)|0));
   label = 56; break;
  case 56: 
   var $362=$p;
   var $363=HEAP8[($362)];
   var $364=(($363 << 24) >> 24);
   var $365=(($364)|(0))==36;
   if ($365) { label = 57; break; } else { label = 72; break; }
  case 57: 
   var $367=(($nextvalue+8)|0);
   var $368=HEAP32[(($367)>>2)];
   var $369=(($368)|(0))==5;
   if ($369) { label = 59; break; } else { label = 58; break; }
  case 58: 
   var $371=$1;
   var $372=$1;
   var $373=_mrb_class_get($372, ((104864)|0));
   var $374=$n;
   _mrb_fixnum_value1690($9, $374);
   _mrb_raisef($371, $373, ((87256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($9)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($9)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($9)+(8))>>2)],tempInt));
   label = 59; break;
  case 59: 
   var $376=$posarg;
   var $377=(($376)|(0)) > 0;
   if ($377) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $379=$1;
   var $380=$1;
   var $381=_mrb_class_get($380, ((104864)|0));
   var $382=$n;
   _mrb_fixnum_value1690($10, $382);
   var $383=$posarg;
   _mrb_fixnum_value1690($11, $383);
   _mrb_raisef($379, $381, ((86452)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($10)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($10)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($10)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($11)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($11)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($11)+(8))>>2)],tempInt));
   _mrb_undef_value1689($12);
   var $384=$nextvalue;
   var $385=$12;
   assert(12 % 1 === 0);HEAP32[(($384)>>2)]=HEAP32[(($385)>>2)];HEAP32[((($384)+(4))>>2)]=HEAP32[((($385)+(4))>>2)];HEAP32[((($384)+(8))>>2)]=HEAP32[((($385)+(8))>>2)];
   label = 71; break;
  case 61: 
   var $387=$posarg;
   var $388=(($387)|(0))==-2;
   if ($388) { label = 62; break; } else { label = 63; break; }
  case 62: 
   var $390=$1;
   var $391=$1;
   var $392=_mrb_class_get($391, ((104864)|0));
   var $393=$n;
   _mrb_fixnum_value1690($13, $393);
   _mrb_raisef($390, $392, ((105820)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($13)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($13)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($13)+(8))>>2)],tempInt));
   _mrb_undef_value1689($14);
   var $394=$nextvalue;
   var $395=$14;
   assert(12 % 1 === 0);HEAP32[(($394)>>2)]=HEAP32[(($395)>>2)];HEAP32[((($394)+(4))>>2)]=HEAP32[((($395)+(4))>>2)];HEAP32[((($394)+(8))>>2)]=HEAP32[((($395)+(8))>>2)];
   label = 70; break;
  case 63: 
   var $397=$n;
   var $398=(($397)|(0)) < 1;
   if ($398) { label = 64; break; } else { label = 65; break; }
  case 64: 
   var $400=$1;
   var $401=$1;
   var $402=_mrb_class_get($401, ((104864)|0));
   var $403=$n;
   _mrb_fixnum_value1690($15, $403);
   _mrb_raisef($400, $402, ((105212)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($15)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($15)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($15)+(8))>>2)],tempInt));
   _mrb_undef_value1689($16);
   var $404=$nextvalue;
   var $405=$16;
   assert(12 % 1 === 0);HEAP32[(($404)>>2)]=HEAP32[(($405)>>2)];HEAP32[((($404)+(4))>>2)]=HEAP32[((($405)+(4))>>2)];HEAP32[((($404)+(8))>>2)]=HEAP32[((($405)+(8))>>2)];
   label = 69; break;
  case 65: 
   $posarg=-1;
   var $407=$n;
   var $408=$2;
   var $409=(($407)|(0)) >= (($408)|(0));
   if ($409) { label = 66; break; } else { label = 67; break; }
  case 66: 
   var $411=$1;
   var $412=$1;
   var $413=_mrb_class_get($412, ((104864)|0));
   _mrb_raise($411, $413, ((100240)|0));
   _mrb_undef_value1689($17);
   var $414=$nextvalue;
   var $415=$17;
   assert(12 % 1 === 0);HEAP32[(($414)>>2)]=HEAP32[(($415)>>2)];HEAP32[((($414)+(4))>>2)]=HEAP32[((($415)+(4))>>2)];HEAP32[((($414)+(8))>>2)]=HEAP32[((($415)+(8))>>2)];
   label = 68; break;
  case 67: 
   var $417=$n;
   var $418=$3;
   var $419=(($418+((($417)*(12))&-1))|0);
   var $420=$nextvalue;
   var $421=$419;
   assert(12 % 1 === 0);HEAP32[(($420)>>2)]=HEAP32[(($421)>>2)];HEAP32[((($420)+(4))>>2)]=HEAP32[((($421)+(4))>>2)];HEAP32[((($420)+(8))>>2)]=HEAP32[((($421)+(8))>>2)];
   label = 68; break;
  case 68: 
   label = 69; break;
  case 69: 
   label = 70; break;
  case 70: 
   label = 71; break;
  case 71: 
   var $426=$p;
   var $427=(($426+1)|0);
   $p=$427;
   label = 19; break;
  case 72: 
   var $429=$flags;
   var $430=$429 & 32;
   var $431=(($430)|(0))!=0;
   if ($431) { label = 73; break; } else { label = 74; break; }
  case 73: 
   var $433=$1;
   var $434=$1;
   var $435=_mrb_class_get($434, ((104864)|0));
   _mrb_raise($433, $435, ((104432)|0));
   label = 74; break;
  case 74: 
   var $437=$flags;
   var $438=$437 & 128;
   var $439=(($438)|(0))!=0;
   if ($439) { label = 75; break; } else { label = 76; break; }
  case 75: 
   var $441=$1;
   var $442=$1;
   var $443=_mrb_class_get($442, ((104864)|0));
   _mrb_raise($441, $443, ((103896)|0));
   label = 76; break;
  case 76: 
   var $445=$n;
   $width=$445;
   var $446=$flags;
   var $447=$446 | 32;
   $flags=$447;
   label = 19; break;
  case 77: 
   var $449=$p;
   $start=$449;
   var $450=$p;
   var $451=HEAP8[($450)];
   var $452=(($451 << 24) >> 24);
   var $453=(($452)|(0))==60;
   var $454=$453 ? 62 : 125;
   var $455=(($454) & 255);
   $term=$455;
   label = 78; break;
  case 78: 
   var $457=$p;
   var $458=$end;
   var $459=(($457)>>>(0)) < (($458)>>>(0));
   if ($459) { label = 79; break; } else { var $468 = 0;label = 80; break; }
  case 79: 
   var $461=$p;
   var $462=HEAP8[($461)];
   var $463=(($462 << 24) >> 24);
   var $464=$term;
   var $465=(($464 << 24) >> 24);
   var $466=(($463)|(0))!=(($465)|(0));
   var $468 = $466;label = 80; break;
  case 80: 
   var $468;
   if ($468) { label = 81; break; } else { label = 82; break; }
  case 81: 
   var $470=$p;
   var $471=(($470+1)|0);
   $p=$471;
   label = 78; break;
  case 82: 
   var $473=$id;
   var $474=(($473 << 16) >> 16)!=0;
   if ($474) { label = 83; break; } else { label = 84; break; }
  case 83: 
   var $476=$1;
   var $477=$1;
   var $478=_mrb_class_get($477, ((104864)|0));
   var $479=$1;
   var $480=$start;
   var $481=$p;
   var $482=$start;
   var $483=$481;
   var $484=$482;
   var $485=((($483)-($484))|0);
   var $486=((($485)+(1))|0);
   _mrb_str_new($18, $479, $480, $486);
   var $487=$1;
   var $488=$id;
   _mrb_sym2str($19, $487, $488);
   _mrb_raisef($476, $478, ((103380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($18)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($18)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($18)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($19)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($19)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($19)+(8))>>2)],tempInt));
   label = 84; break;
  case 84: 
   var $490=$1;
   var $491=$start;
   var $492=(($491+1)|0);
   var $493=$p;
   var $494=$start;
   var $495=$493;
   var $496=$494;
   var $497=((($495)-($496))|0);
   var $498=((($497)-(1))|0);
   _mrb_str_new($20, $490, $492, $498);
   var $499=$symname;
   var $500=$20;
   assert(12 % 1 === 0);HEAP32[(($499)>>2)]=HEAP32[(($500)>>2)];HEAP32[((($499)+(4))>>2)]=HEAP32[((($500)+(4))>>2)];HEAP32[((($499)+(8))>>2)]=HEAP32[((($500)+(8))>>2)];
   var $501=$1;
   var $502=_mrb_intern_str($501, $symname);
   $id=$502;
   var $503=$posarg;
   var $504=(($503)|(0)) > 0;
   if ($504) { label = 85; break; } else { label = 86; break; }
  case 85: 
   var $506=$1;
   var $507=$1;
   var $508=_mrb_class_get($507, ((104864)|0));
   var $509=$1;
   var $510=$start;
   var $511=$p;
   var $512=$start;
   var $513=$511;
   var $514=$512;
   var $515=((($513)-($514))|0);
   var $516=((($515)+(1))|0);
   _mrb_str_new($21, $509, $510, $516);
   var $517=$posarg;
   _mrb_fixnum_value1690($22, $517);
   _mrb_raisef($506, $508, ((102884)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($21)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($21)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($21)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($22)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($22)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($22)+(8))>>2)],tempInt));
   _mrb_undef_value1689($23);
   var $518=$nextvalue;
   var $519=$23;
   assert(12 % 1 === 0);HEAP32[(($518)>>2)]=HEAP32[(($519)>>2)];HEAP32[((($518)+(4))>>2)]=HEAP32[((($519)+(4))>>2)];HEAP32[((($518)+(8))>>2)]=HEAP32[((($519)+(8))>>2)];
   label = 90; break;
  case 86: 
   var $521=$posarg;
   var $522=(($521)|(0))==-1;
   if ($522) { label = 87; break; } else { label = 88; break; }
  case 87: 
   var $524=$1;
   var $525=$1;
   var $526=_mrb_class_get($525, ((104864)|0));
   var $527=$1;
   var $528=$start;
   var $529=$p;
   var $530=$start;
   var $531=$529;
   var $532=$530;
   var $533=((($531)-($532))|0);
   var $534=((($533)+(1))|0);
   _mrb_str_new($24, $527, $528, $534);
   _mrb_raisef($524, $526, ((102520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($24)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($24)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($24)+(8))>>2)],tempInt));
   _mrb_undef_value1689($25);
   var $535=$nextvalue;
   var $536=$25;
   assert(12 % 1 === 0);HEAP32[(($535)>>2)]=HEAP32[(($536)>>2)];HEAP32[((($535)+(4))>>2)]=HEAP32[((($536)+(4))>>2)];HEAP32[((($535)+(8))>>2)]=HEAP32[((($536)+(8))>>2)];
   label = 89; break;
  case 88: 
   $posarg=-2;
   var $538=$1;
   var $539=$1;
   var $540=$2;
   var $541=$3;
   _get_hash($26, $539, $hash, $540, $541);
   var $542=$id;
   _mrb_symbol_value1691($27, $542);
   _mrb_undef_value1689($28);
   _mrb_hash_fetch($29, $538, $26, $27, $28);
   var $543=$nextvalue;
   var $544=$29;
   assert(12 % 1 === 0);HEAP32[(($543)>>2)]=HEAP32[(($544)>>2)];HEAP32[((($543)+(4))>>2)]=HEAP32[((($544)+(4))>>2)];HEAP32[((($543)+(8))>>2)]=HEAP32[((($544)+(8))>>2)];
   label = 89; break;
  case 89: 
   label = 90; break;
  case 90: 
   var $547=(($nextvalue+8)|0);
   var $548=HEAP32[(($547)>>2)];
   var $549=(($548)|(0))==5;
   if ($549) { label = 91; break; } else { label = 92; break; }
  case 91: 
   var $551=$1;
   var $552=$1;
   var $553=_mrb_class_get($552, ((102188)|0));
   var $554=$1;
   var $555=$start;
   var $556=$p;
   var $557=$start;
   var $558=$556;
   var $559=$557;
   var $560=((($558)-($559))|0);
   var $561=((($560)+(1))|0);
   _mrb_str_new($30, $554, $555, $561);
   _mrb_raisef($551, $553, ((101772)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($30)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($30)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($30)+(8))>>2)],tempInt));
   label = 92; break;
  case 92: 
   var $563=$term;
   var $564=(($563 << 24) >> 24);
   var $565=(($564)|(0))==125;
   if ($565) { label = 93; break; } else { label = 94; break; }
  case 93: 
   label = 265; break;
  case 94: 
   var $568=$p;
   var $569=(($568+1)|0);
   $p=$569;
   label = 19; break;
  case 95: 
   var $571=$flags;
   var $572=$571 & 32;
   var $573=(($572)|(0))!=0;
   if ($573) { label = 96; break; } else { label = 97; break; }
  case 96: 
   var $575=$1;
   var $576=$1;
   var $577=_mrb_class_get($576, ((104864)|0));
   _mrb_raise($575, $577, ((104432)|0));
   label = 97; break;
  case 97: 
   var $579=$flags;
   var $580=$579 & 128;
   var $581=(($580)|(0))!=0;
   if ($581) { label = 98; break; } else { label = 99; break; }
  case 98: 
   var $583=$1;
   var $584=$1;
   var $585=_mrb_class_get($584, ((104864)|0));
   _mrb_raise($583, $585, ((103896)|0));
   label = 99; break;
  case 99: 
   var $587=$flags;
   var $588=$587 | 32;
   $flags=$588;
   label = 100; break;
  case 100: 
   var $590=$p;
   var $591=(($590+1)|0);
   $p=$591;
   $t=$590;
   $n=0;
   label = 101; break;
  case 101: 
   var $593=$p;
   var $594=$end;
   var $595=(($593)>>>(0)) < (($594)>>>(0));
   if ($595) { label = 102; break; } else { var $603 = 0;label = 103; break; }
  case 102: 
   var $597=$p;
   var $598=HEAP8[($597)];
   var $599=(($598)&(255));
   var $600=_isdigit($599);
   var $601=(($600)|(0))!=0;
   var $603 = $601;label = 103; break;
  case 103: 
   var $603;
   if ($603) { label = 104; break; } else { label = 108; break; }
  case 104: 
   var $605=$n;
   var $606=((($605)*(10))&-1);
   var $607=$p;
   var $608=HEAP8[($607)];
   var $609=(($608 << 24) >> 24);
   var $610=((($609)-(48))|0);
   var $611=((($606)+($610))|0);
   $next_n1=$611;
   var $612=$next_n1;
   var $613=((((($612)|(0)))/(10))&-1);
   var $614=$n;
   var $615=(($613)|(0))!=(($614)|(0));
   if ($615) { label = 105; break; } else { label = 106; break; }
  case 105: 
   var $617=$1;
   var $618=$1;
   var $619=_mrb_class_get($618, ((104864)|0));
   _mrb_raise($617, $619, ((101308)|0));
   label = 106; break;
  case 106: 
   var $621=$next_n1;
   $n=$621;
   label = 107; break;
  case 107: 
   var $623=$p;
   var $624=(($623+1)|0);
   $p=$624;
   label = 101; break;
  case 108: 
   var $626=$p;
   var $627=$end;
   var $628=(($626)>>>(0)) >= (($627)>>>(0));
   if ($628) { label = 109; break; } else { label = 110; break; }
  case 109: 
   var $630=$1;
   var $631=$1;
   var $632=_mrb_class_get($631, ((104864)|0));
   _mrb_raise($630, $632, ((88192)|0));
   label = 110; break;
  case 110: 
   var $634=$p;
   var $635=HEAP8[($634)];
   var $636=(($635 << 24) >> 24);
   var $637=(($636)|(0))==36;
   if ($637) { label = 111; break; } else { label = 124; break; }
  case 111: 
   var $639=$posarg;
   var $640=(($639)|(0)) > 0;
   if ($640) { label = 112; break; } else { label = 113; break; }
  case 112: 
   var $642=$1;
   var $643=$1;
   var $644=_mrb_class_get($643, ((104864)|0));
   var $645=$n;
   _mrb_fixnum_value1690($31, $645);
   var $646=$posarg;
   _mrb_fixnum_value1690($32, $646);
   _mrb_raisef($642, $644, ((86452)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($31)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($31)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($31)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($32)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($32)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($32)+(8))>>2)],tempInt));
   _mrb_undef_value1689($33);
   var $647=$tmp;
   var $648=$33;
   assert(12 % 1 === 0);HEAP32[(($647)>>2)]=HEAP32[(($648)>>2)];HEAP32[((($647)+(4))>>2)]=HEAP32[((($648)+(4))>>2)];HEAP32[((($647)+(8))>>2)]=HEAP32[((($648)+(8))>>2)];
   label = 123; break;
  case 113: 
   var $650=$posarg;
   var $651=(($650)|(0))==-2;
   if ($651) { label = 114; break; } else { label = 115; break; }
  case 114: 
   var $653=$1;
   var $654=$1;
   var $655=_mrb_class_get($654, ((104864)|0));
   var $656=$n;
   _mrb_fixnum_value1690($34, $656);
   _mrb_raisef($653, $655, ((105820)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($34)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($34)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($34)+(8))>>2)],tempInt));
   _mrb_undef_value1689($35);
   var $657=$tmp;
   var $658=$35;
   assert(12 % 1 === 0);HEAP32[(($657)>>2)]=HEAP32[(($658)>>2)];HEAP32[((($657)+(4))>>2)]=HEAP32[((($658)+(4))>>2)];HEAP32[((($657)+(8))>>2)]=HEAP32[((($658)+(8))>>2)];
   label = 122; break;
  case 115: 
   var $660=$n;
   var $661=(($660)|(0)) < 1;
   if ($661) { label = 116; break; } else { label = 117; break; }
  case 116: 
   var $663=$1;
   var $664=$1;
   var $665=_mrb_class_get($664, ((104864)|0));
   var $666=$n;
   _mrb_fixnum_value1690($36, $666);
   _mrb_raisef($663, $665, ((105212)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($36)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($36)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($36)+(8))>>2)],tempInt));
   _mrb_undef_value1689($37);
   var $667=$tmp;
   var $668=$37;
   assert(12 % 1 === 0);HEAP32[(($667)>>2)]=HEAP32[(($668)>>2)];HEAP32[((($667)+(4))>>2)]=HEAP32[((($668)+(4))>>2)];HEAP32[((($667)+(8))>>2)]=HEAP32[((($668)+(8))>>2)];
   label = 121; break;
  case 117: 
   $posarg=-1;
   var $670=$n;
   var $671=$2;
   var $672=(($670)|(0)) >= (($671)|(0));
   if ($672) { label = 118; break; } else { label = 119; break; }
  case 118: 
   var $674=$1;
   var $675=$1;
   var $676=_mrb_class_get($675, ((104864)|0));
   _mrb_raise($674, $676, ((100240)|0));
   _mrb_undef_value1689($38);
   var $677=$tmp;
   var $678=$38;
   assert(12 % 1 === 0);HEAP32[(($677)>>2)]=HEAP32[(($678)>>2)];HEAP32[((($677)+(4))>>2)]=HEAP32[((($678)+(4))>>2)];HEAP32[((($677)+(8))>>2)]=HEAP32[((($678)+(8))>>2)];
   label = 120; break;
  case 119: 
   var $680=$n;
   var $681=$3;
   var $682=(($681+((($680)*(12))&-1))|0);
   var $683=$tmp;
   var $684=$682;
   assert(12 % 1 === 0);HEAP32[(($683)>>2)]=HEAP32[(($684)>>2)];HEAP32[((($683)+(4))>>2)]=HEAP32[((($684)+(4))>>2)];HEAP32[((($683)+(8))>>2)]=HEAP32[((($684)+(8))>>2)];
   label = 120; break;
  case 120: 
   label = 121; break;
  case 121: 
   label = 122; break;
  case 122: 
   label = 123; break;
  case 123: 
   label = 137; break;
  case 124: 
   var $690=(($nextvalue+8)|0);
   var $691=HEAP32[(($690)>>2)];
   var $692=(($691)|(0))==5;
   if ($692) { label = 126; break; } else { label = 125; break; }
  case 125: 
   var $694=$tmp;
   var $695=$nextvalue;
   assert(12 % 1 === 0);HEAP32[(($694)>>2)]=HEAP32[(($695)>>2)];HEAP32[((($694)+(4))>>2)]=HEAP32[((($695)+(4))>>2)];HEAP32[((($694)+(8))>>2)]=HEAP32[((($695)+(8))>>2)];
   label = 136; break;
  case 126: 
   var $697=$posarg;
   var $698=(($697)|(0))==-1;
   if ($698) { label = 127; break; } else { label = 128; break; }
  case 127: 
   var $700=$1;
   var $701=$1;
   var $702=_mrb_class_get($701, ((104864)|0));
   var $703=$nextarg;
   _mrb_fixnum_value1690($39, $703);
   _mrb_raisef($700, $702, ((100788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($39)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($39)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($39)+(8))>>2)],tempInt));
   _mrb_undef_value1689($40);
   var $704=$tmp;
   var $705=$40;
   assert(12 % 1 === 0);HEAP32[(($704)>>2)]=HEAP32[(($705)>>2)];HEAP32[((($704)+(4))>>2)]=HEAP32[((($705)+(4))>>2)];HEAP32[((($704)+(8))>>2)]=HEAP32[((($705)+(8))>>2)];
   label = 135; break;
  case 128: 
   var $707=$posarg;
   var $708=(($707)|(0))==-2;
   if ($708) { label = 129; break; } else { label = 130; break; }
  case 129: 
   var $710=$1;
   var $711=$1;
   var $712=_mrb_class_get($711, ((104864)|0));
   var $713=$nextarg;
   _mrb_fixnum_value1690($41, $713);
   _mrb_raisef($710, $712, ((100484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($41)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($41)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($41)+(8))>>2)],tempInt));
   _mrb_undef_value1689($42);
   var $714=$tmp;
   var $715=$42;
   assert(12 % 1 === 0);HEAP32[(($714)>>2)]=HEAP32[(($715)>>2)];HEAP32[((($714)+(4))>>2)]=HEAP32[((($715)+(4))>>2)];HEAP32[((($714)+(8))>>2)]=HEAP32[((($715)+(8))>>2)];
   label = 134; break;
  case 130: 
   var $717=$nextarg;
   var $718=((($717)+(1))|0);
   $nextarg=$718;
   $posarg=$717;
   var $719=$posarg;
   var $720=$2;
   var $721=(($719)|(0)) >= (($720)|(0));
   if ($721) { label = 131; break; } else { label = 132; break; }
  case 131: 
   var $723=$1;
   var $724=$1;
   var $725=_mrb_class_get($724, ((104864)|0));
   _mrb_raise($723, $725, ((100240)|0));
   _mrb_undef_value1689($43);
   var $726=$tmp;
   var $727=$43;
   assert(12 % 1 === 0);HEAP32[(($726)>>2)]=HEAP32[(($727)>>2)];HEAP32[((($726)+(4))>>2)]=HEAP32[((($727)+(4))>>2)];HEAP32[((($726)+(8))>>2)]=HEAP32[((($727)+(8))>>2)];
   label = 133; break;
  case 132: 
   var $729=$posarg;
   var $730=$3;
   var $731=(($730+((($729)*(12))&-1))|0);
   var $732=$tmp;
   var $733=$731;
   assert(12 % 1 === 0);HEAP32[(($732)>>2)]=HEAP32[(($733)>>2)];HEAP32[((($732)+(4))>>2)]=HEAP32[((($733)+(4))>>2)];HEAP32[((($732)+(8))>>2)]=HEAP32[((($733)+(8))>>2)];
   label = 133; break;
  case 133: 
   label = 134; break;
  case 134: 
   label = 135; break;
  case 135: 
   label = 136; break;
  case 136: 
   var $738=$t;
   $p=$738;
   label = 137; break;
  case 137: 
   var $740=(($tmp)|0);
   var $741=$740;
   var $742=HEAP32[(($741)>>2)];
   $width=$742;
   label = 138; break;
  case 138: 
   var $744=$width;
   var $745=(($744)|(0)) < 0;
   if ($745) { label = 139; break; } else { label = 140; break; }
  case 139: 
   var $747=$flags;
   var $748=$747 | 2;
   $flags=$748;
   var $749=$width;
   var $750=(((-$749))|0);
   $width=$750;
   label = 140; break;
  case 140: 
   var $752=$p;
   var $753=(($752+1)|0);
   $p=$753;
   label = 19; break;
  case 141: 
   var $755=$flags;
   var $756=$755 & 128;
   var $757=(($756)|(0))!=0;
   if ($757) { label = 142; break; } else { label = 143; break; }
  case 142: 
   var $759=$1;
   var $760=$1;
   var $761=_mrb_class_get($760, ((104864)|0));
   _mrb_raise($759, $761, ((99996)|0));
   label = 143; break;
  case 143: 
   var $763=$flags;
   var $764=$763 | 192;
   $flags=$764;
   $prec=0;
   var $765=$p;
   var $766=(($765+1)|0);
   $p=$766;
   var $767=$p;
   var $768=HEAP8[($767)];
   var $769=(($768 << 24) >> 24);
   var $770=(($769)|(0))==42;
   if ($770) { label = 144; break; } else { label = 186; break; }
  case 144: 
   label = 145; break;
  case 145: 
   var $773=$p;
   var $774=(($773+1)|0);
   $p=$774;
   $t=$773;
   $n=0;
   label = 146; break;
  case 146: 
   var $776=$p;
   var $777=$end;
   var $778=(($776)>>>(0)) < (($777)>>>(0));
   if ($778) { label = 147; break; } else { var $786 = 0;label = 148; break; }
  case 147: 
   var $780=$p;
   var $781=HEAP8[($780)];
   var $782=(($781)&(255));
   var $783=_isdigit($782);
   var $784=(($783)|(0))!=0;
   var $786 = $784;label = 148; break;
  case 148: 
   var $786;
   if ($786) { label = 149; break; } else { label = 153; break; }
  case 149: 
   var $788=$n;
   var $789=((($788)*(10))&-1);
   var $790=$p;
   var $791=HEAP8[($790)];
   var $792=(($791 << 24) >> 24);
   var $793=((($792)-(48))|0);
   var $794=((($789)+($793))|0);
   $next_n2=$794;
   var $795=$next_n2;
   var $796=((((($795)|(0)))/(10))&-1);
   var $797=$n;
   var $798=(($796)|(0))!=(($797)|(0));
   if ($798) { label = 150; break; } else { label = 151; break; }
  case 150: 
   var $800=$1;
   var $801=$1;
   var $802=_mrb_class_get($801, ((104864)|0));
   _mrb_raise($800, $802, ((101308)|0));
   label = 151; break;
  case 151: 
   var $804=$next_n2;
   $n=$804;
   label = 152; break;
  case 152: 
   var $806=$p;
   var $807=(($806+1)|0);
   $p=$807;
   label = 146; break;
  case 153: 
   var $809=$p;
   var $810=$end;
   var $811=(($809)>>>(0)) >= (($810)>>>(0));
   if ($811) { label = 154; break; } else { label = 155; break; }
  case 154: 
   var $813=$1;
   var $814=$1;
   var $815=_mrb_class_get($814, ((104864)|0));
   _mrb_raise($813, $815, ((88192)|0));
   label = 155; break;
  case 155: 
   var $817=$p;
   var $818=HEAP8[($817)];
   var $819=(($818 << 24) >> 24);
   var $820=(($819)|(0))==36;
   if ($820) { label = 156; break; } else { label = 169; break; }
  case 156: 
   var $822=$posarg;
   var $823=(($822)|(0)) > 0;
   if ($823) { label = 157; break; } else { label = 158; break; }
  case 157: 
   var $825=$1;
   var $826=$1;
   var $827=_mrb_class_get($826, ((104864)|0));
   var $828=$n;
   _mrb_fixnum_value1690($44, $828);
   var $829=$posarg;
   _mrb_fixnum_value1690($45, $829);
   _mrb_raisef($825, $827, ((86452)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($44)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($44)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($44)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($45)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($45)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($45)+(8))>>2)],tempInt));
   _mrb_undef_value1689($46);
   var $830=$tmp;
   var $831=$46;
   assert(12 % 1 === 0);HEAP32[(($830)>>2)]=HEAP32[(($831)>>2)];HEAP32[((($830)+(4))>>2)]=HEAP32[((($831)+(4))>>2)];HEAP32[((($830)+(8))>>2)]=HEAP32[((($831)+(8))>>2)];
   label = 168; break;
  case 158: 
   var $833=$posarg;
   var $834=(($833)|(0))==-2;
   if ($834) { label = 159; break; } else { label = 160; break; }
  case 159: 
   var $836=$1;
   var $837=$1;
   var $838=_mrb_class_get($837, ((104864)|0));
   var $839=$n;
   _mrb_fixnum_value1690($47, $839);
   _mrb_raisef($836, $838, ((105820)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($47)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($47)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($47)+(8))>>2)],tempInt));
   _mrb_undef_value1689($48);
   var $840=$tmp;
   var $841=$48;
   assert(12 % 1 === 0);HEAP32[(($840)>>2)]=HEAP32[(($841)>>2)];HEAP32[((($840)+(4))>>2)]=HEAP32[((($841)+(4))>>2)];HEAP32[((($840)+(8))>>2)]=HEAP32[((($841)+(8))>>2)];
   label = 167; break;
  case 160: 
   var $843=$n;
   var $844=(($843)|(0)) < 1;
   if ($844) { label = 161; break; } else { label = 162; break; }
  case 161: 
   var $846=$1;
   var $847=$1;
   var $848=_mrb_class_get($847, ((104864)|0));
   var $849=$n;
   _mrb_fixnum_value1690($49, $849);
   _mrb_raisef($846, $848, ((105212)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($49)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($49)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($49)+(8))>>2)],tempInt));
   _mrb_undef_value1689($50);
   var $850=$tmp;
   var $851=$50;
   assert(12 % 1 === 0);HEAP32[(($850)>>2)]=HEAP32[(($851)>>2)];HEAP32[((($850)+(4))>>2)]=HEAP32[((($851)+(4))>>2)];HEAP32[((($850)+(8))>>2)]=HEAP32[((($851)+(8))>>2)];
   label = 166; break;
  case 162: 
   $posarg=-1;
   var $853=$n;
   var $854=$2;
   var $855=(($853)|(0)) >= (($854)|(0));
   if ($855) { label = 163; break; } else { label = 164; break; }
  case 163: 
   var $857=$1;
   var $858=$1;
   var $859=_mrb_class_get($858, ((104864)|0));
   _mrb_raise($857, $859, ((100240)|0));
   _mrb_undef_value1689($51);
   var $860=$tmp;
   var $861=$51;
   assert(12 % 1 === 0);HEAP32[(($860)>>2)]=HEAP32[(($861)>>2)];HEAP32[((($860)+(4))>>2)]=HEAP32[((($861)+(4))>>2)];HEAP32[((($860)+(8))>>2)]=HEAP32[((($861)+(8))>>2)];
   label = 165; break;
  case 164: 
   var $863=$n;
   var $864=$3;
   var $865=(($864+((($863)*(12))&-1))|0);
   var $866=$tmp;
   var $867=$865;
   assert(12 % 1 === 0);HEAP32[(($866)>>2)]=HEAP32[(($867)>>2)];HEAP32[((($866)+(4))>>2)]=HEAP32[((($867)+(4))>>2)];HEAP32[((($866)+(8))>>2)]=HEAP32[((($867)+(8))>>2)];
   label = 165; break;
  case 165: 
   label = 166; break;
  case 166: 
   label = 167; break;
  case 167: 
   label = 168; break;
  case 168: 
   label = 182; break;
  case 169: 
   var $873=(($nextvalue+8)|0);
   var $874=HEAP32[(($873)>>2)];
   var $875=(($874)|(0))==5;
   if ($875) { label = 171; break; } else { label = 170; break; }
  case 170: 
   var $877=$tmp;
   var $878=$nextvalue;
   assert(12 % 1 === 0);HEAP32[(($877)>>2)]=HEAP32[(($878)>>2)];HEAP32[((($877)+(4))>>2)]=HEAP32[((($878)+(4))>>2)];HEAP32[((($877)+(8))>>2)]=HEAP32[((($878)+(8))>>2)];
   label = 181; break;
  case 171: 
   var $880=$posarg;
   var $881=(($880)|(0))==-1;
   if ($881) { label = 172; break; } else { label = 173; break; }
  case 172: 
   var $883=$1;
   var $884=$1;
   var $885=_mrb_class_get($884, ((104864)|0));
   var $886=$nextarg;
   _mrb_fixnum_value1690($52, $886);
   _mrb_raisef($883, $885, ((100788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($52)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($52)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($52)+(8))>>2)],tempInt));
   _mrb_undef_value1689($53);
   var $887=$tmp;
   var $888=$53;
   assert(12 % 1 === 0);HEAP32[(($887)>>2)]=HEAP32[(($888)>>2)];HEAP32[((($887)+(4))>>2)]=HEAP32[((($888)+(4))>>2)];HEAP32[((($887)+(8))>>2)]=HEAP32[((($888)+(8))>>2)];
   label = 180; break;
  case 173: 
   var $890=$posarg;
   var $891=(($890)|(0))==-2;
   if ($891) { label = 174; break; } else { label = 175; break; }
  case 174: 
   var $893=$1;
   var $894=$1;
   var $895=_mrb_class_get($894, ((104864)|0));
   var $896=$nextarg;
   _mrb_fixnum_value1690($54, $896);
   _mrb_raisef($893, $895, ((100484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($54)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($54)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($54)+(8))>>2)],tempInt));
   _mrb_undef_value1689($55);
   var $897=$tmp;
   var $898=$55;
   assert(12 % 1 === 0);HEAP32[(($897)>>2)]=HEAP32[(($898)>>2)];HEAP32[((($897)+(4))>>2)]=HEAP32[((($898)+(4))>>2)];HEAP32[((($897)+(8))>>2)]=HEAP32[((($898)+(8))>>2)];
   label = 179; break;
  case 175: 
   var $900=$nextarg;
   var $901=((($900)+(1))|0);
   $nextarg=$901;
   $posarg=$900;
   var $902=$posarg;
   var $903=$2;
   var $904=(($902)|(0)) >= (($903)|(0));
   if ($904) { label = 176; break; } else { label = 177; break; }
  case 176: 
   var $906=$1;
   var $907=$1;
   var $908=_mrb_class_get($907, ((104864)|0));
   _mrb_raise($906, $908, ((100240)|0));
   _mrb_undef_value1689($56);
   var $909=$tmp;
   var $910=$56;
   assert(12 % 1 === 0);HEAP32[(($909)>>2)]=HEAP32[(($910)>>2)];HEAP32[((($909)+(4))>>2)]=HEAP32[((($910)+(4))>>2)];HEAP32[((($909)+(8))>>2)]=HEAP32[((($910)+(8))>>2)];
   label = 178; break;
  case 177: 
   var $912=$posarg;
   var $913=$3;
   var $914=(($913+((($912)*(12))&-1))|0);
   var $915=$tmp;
   var $916=$914;
   assert(12 % 1 === 0);HEAP32[(($915)>>2)]=HEAP32[(($916)>>2)];HEAP32[((($915)+(4))>>2)]=HEAP32[((($916)+(4))>>2)];HEAP32[((($915)+(8))>>2)]=HEAP32[((($916)+(8))>>2)];
   label = 178; break;
  case 178: 
   label = 179; break;
  case 179: 
   label = 180; break;
  case 180: 
   label = 181; break;
  case 181: 
   var $921=$t;
   $p=$921;
   label = 182; break;
  case 182: 
   var $923=(($tmp)|0);
   var $924=$923;
   var $925=HEAP32[(($924)>>2)];
   $prec=$925;
   label = 183; break;
  case 183: 
   var $927=$prec;
   var $928=(($927)|(0)) < 0;
   if ($928) { label = 184; break; } else { label = 185; break; }
  case 184: 
   var $930=$flags;
   var $931=$930 & -65;
   $flags=$931;
   label = 185; break;
  case 185: 
   var $933=$p;
   var $934=(($933+1)|0);
   $p=$934;
   label = 19; break;
  case 186: 
   label = 187; break;
  case 187: 
   var $937=$p;
   var $938=$end;
   var $939=(($937)>>>(0)) < (($938)>>>(0));
   if ($939) { label = 188; break; } else { var $947 = 0;label = 189; break; }
  case 188: 
   var $941=$p;
   var $942=HEAP8[($941)];
   var $943=(($942)&(255));
   var $944=_isdigit($943);
   var $945=(($944)|(0))!=0;
   var $947 = $945;label = 189; break;
  case 189: 
   var $947;
   if ($947) { label = 190; break; } else { label = 194; break; }
  case 190: 
   var $949=$prec;
   var $950=((($949)*(10))&-1);
   var $951=$p;
   var $952=HEAP8[($951)];
   var $953=(($952 << 24) >> 24);
   var $954=((($953)-(48))|0);
   var $955=((($950)+($954))|0);
   $next_n3=$955;
   var $956=$next_n3;
   var $957=((((($956)|(0)))/(10))&-1);
   var $958=$prec;
   var $959=(($957)|(0))!=(($958)|(0));
   if ($959) { label = 191; break; } else { label = 192; break; }
  case 191: 
   var $961=$1;
   var $962=$1;
   var $963=_mrb_class_get($962, ((104864)|0));
   _mrb_raise($961, $963, ((99744)|0));
   label = 192; break;
  case 192: 
   var $965=$next_n3;
   $prec=$965;
   label = 193; break;
  case 193: 
   var $967=$p;
   var $968=(($967+1)|0);
   $p=$968;
   label = 187; break;
  case 194: 
   var $970=$p;
   var $971=$end;
   var $972=(($970)>>>(0)) >= (($971)>>>(0));
   if ($972) { label = 195; break; } else { label = 196; break; }
  case 195: 
   var $974=$1;
   var $975=$1;
   var $976=_mrb_class_get($975, ((104864)|0));
   _mrb_raise($974, $976, ((88192)|0));
   label = 196; break;
  case 196: 
   label = 19; break;
  case 197: 
   var $979=$p;
   var $980=((($979)-(1))|0);
   $p=$980;
   label = 198; break;
  case 198: 
   var $982=$flags;
   var $983=(($982)|(0))!=0;
   if ($983) { label = 199; break; } else { label = 200; break; }
  case 199: 
   var $985=$1;
   var $986=$1;
   var $987=_mrb_class_get($986, ((104864)|0));
   _mrb_raise($985, $987, ((99332)|0));
   label = 200; break;
  case 200: 
   label = 201; break;
  case 201: 
   label = 202; break;
  case 202: 
   label = 203; break;
  case 203: 
   var $992=$blen;
   var $993=((($992)+(1))|0);
   var $994=$bsiz;
   var $995=(($993)|(0)) >= (($994)|(0));
   if ($995) { label = 204; break; } else { label = 205; break; }
  case 204: 
   var $997=$bsiz;
   var $998=($997<<1);
   $bsiz=$998;
   label = 203; break;
  case 205: 
   var $1000=$1;
   var $1001=$bsiz;
   _mrb_str_resize($57, $1000, $result, $1001);
   var $1002=(($result)|0);
   var $1003=$1002;
   var $1004=HEAP32[(($1003)>>2)];
   var $1005=$1004;
   var $1006=(($1005+20)|0);
   var $1007=HEAP32[(($1006)>>2)];
   $buf=$1007;
   label = 206; break;
  case 206: 
   var $1009=$blen;
   var $1010=$buf;
   var $1011=(($1010+$1009)|0);
   assert(1 % 1 === 0);HEAP8[($1011)]=HEAP8[((((98912)|0))|0)];
   var $1012=$blen;
   var $1013=((($1012)+(1))|0);
   $blen=$1013;
   label = 207; break;
  case 207: 
   label = 581; break;
  case 208: 
   var $1016=(($nextvalue+8)|0);
   var $1017=HEAP32[(($1016)>>2)];
   var $1018=(($1017)|(0))==5;
   if ($1018) { label = 210; break; } else { label = 209; break; }
  case 209: 
   var $1020=$val;
   var $1021=$nextvalue;
   assert(12 % 1 === 0);HEAP32[(($1020)>>2)]=HEAP32[(($1021)>>2)];HEAP32[((($1020)+(4))>>2)]=HEAP32[((($1021)+(4))>>2)];HEAP32[((($1020)+(8))>>2)]=HEAP32[((($1021)+(8))>>2)];
   label = 220; break;
  case 210: 
   var $1023=$posarg;
   var $1024=(($1023)|(0))==-1;
   if ($1024) { label = 211; break; } else { label = 212; break; }
  case 211: 
   var $1026=$1;
   var $1027=$1;
   var $1028=_mrb_class_get($1027, ((104864)|0));
   var $1029=$nextarg;
   _mrb_fixnum_value1690($58, $1029);
   _mrb_raisef($1026, $1028, ((100788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($58)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($58)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($58)+(8))>>2)],tempInt));
   _mrb_undef_value1689($val);
   label = 219; break;
  case 212: 
   var $1031=$posarg;
   var $1032=(($1031)|(0))==-2;
   if ($1032) { label = 213; break; } else { label = 214; break; }
  case 213: 
   var $1034=$1;
   var $1035=$1;
   var $1036=_mrb_class_get($1035, ((104864)|0));
   var $1037=$nextarg;
   _mrb_fixnum_value1690($59, $1037);
   _mrb_raisef($1034, $1036, ((100484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($59)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($59)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($59)+(8))>>2)],tempInt));
   _mrb_undef_value1689($val);
   label = 218; break;
  case 214: 
   var $1039=$nextarg;
   var $1040=((($1039)+(1))|0);
   $nextarg=$1040;
   $posarg=$1039;
   var $1041=$posarg;
   var $1042=$2;
   var $1043=(($1041)|(0)) >= (($1042)|(0));
   if ($1043) { label = 215; break; } else { label = 216; break; }
  case 215: 
   var $1045=$1;
   var $1046=$1;
   var $1047=_mrb_class_get($1046, ((104864)|0));
   _mrb_raise($1045, $1047, ((100240)|0));
   _mrb_undef_value1689($val);
   label = 217; break;
  case 216: 
   var $1049=$posarg;
   var $1050=$3;
   var $1051=(($1050+((($1049)*(12))&-1))|0);
   var $1052=$val;
   var $1053=$1051;
   assert(12 % 1 === 0);HEAP32[(($1052)>>2)]=HEAP32[(($1053)>>2)];HEAP32[((($1052)+(4))>>2)]=HEAP32[((($1053)+(4))>>2)];HEAP32[((($1052)+(8))>>2)]=HEAP32[((($1053)+(8))>>2)];
   label = 217; break;
  case 217: 
   label = 218; break;
  case 218: 
   label = 219; break;
  case 219: 
   label = 220; break;
  case 220: 
   var $1058=$1;
   _mrb_check_string_type($60, $1058, $val);
   var $1059=$tmp4;
   var $1060=$60;
   assert(12 % 1 === 0);HEAP32[(($1059)>>2)]=HEAP32[(($1060)>>2)];HEAP32[((($1059)+(4))>>2)]=HEAP32[((($1060)+(4))>>2)];HEAP32[((($1059)+(8))>>2)]=HEAP32[((($1060)+(8))>>2)];
   var $1061=(($tmp4+8)|0);
   var $1062=HEAP32[(($1061)>>2)];
   var $1063=(($1062)|(0))==0;
   if ($1063) { label = 221; break; } else { label = 222; break; }
  case 221: 
   var $1065=(($tmp4)|0);
   var $1066=$1065;
   var $1067=HEAP32[(($1066)>>2)];
   var $1068=(($1067)|(0))!=0;
   if ($1068) { label = 222; break; } else { label = 225; break; }
  case 222: 
   var $1070=(($tmp4)|0);
   var $1071=$1070;
   var $1072=HEAP32[(($1071)>>2)];
   var $1073=$1072;
   var $1074=(($1073+12)|0);
   var $1075=HEAP32[(($1074)>>2)];
   var $1076=(($1075)|(0))!=1;
   if ($1076) { label = 223; break; } else { label = 224; break; }
  case 223: 
   var $1078=$1;
   var $1079=$1;
   var $1080=_mrb_class_get($1079, ((104864)|0));
   _mrb_raise($1078, $1080, ((98352)|0));
   label = 224; break;
  case 224: 
   var $1082=(($tmp4)|0);
   var $1083=$1082;
   var $1084=HEAP32[(($1083)>>2)];
   var $1085=$1084;
   var $1086=(($1085+20)|0);
   var $1087=HEAP32[(($1086)>>2)];
   var $1088=(($1087)|0);
   var $1089=HEAP8[($1088)];
   var $1090=(($1089 << 24) >> 24);
   $c=$1090;
   $n=1;
   label = 226; break;
  case 225: 
   var $1092=(($val)|0);
   var $1093=$1092;
   var $1094=HEAP32[(($1093)>>2)];
   $c=$1094;
   $n=1;
   label = 226; break;
  case 226: 
   var $1096=$n;
   var $1097=(($1096)|(0)) <= 0;
   if ($1097) { label = 227; break; } else { label = 228; break; }
  case 227: 
   var $1099=$1;
   var $1100=$1;
   var $1101=_mrb_class_get($1100, ((104864)|0));
   _mrb_raise($1099, $1101, ((98052)|0));
   label = 228; break;
  case 228: 
   var $1103=$flags;
   var $1104=$1103 & 32;
   var $1105=(($1104)|(0))!=0;
   if ($1105) { label = 235; break; } else { label = 229; break; }
  case 229: 
   label = 230; break;
  case 230: 
   label = 231; break;
  case 231: 
   var $1109=$blen;
   var $1110=$n;
   var $1111=((($1109)+($1110))|0);
   var $1112=$bsiz;
   var $1113=(($1111)|(0)) >= (($1112)|(0));
   if ($1113) { label = 232; break; } else { label = 233; break; }
  case 232: 
   var $1115=$bsiz;
   var $1116=($1115<<1);
   $bsiz=$1116;
   label = 231; break;
  case 233: 
   var $1118=$1;
   var $1119=$bsiz;
   _mrb_str_resize($61, $1118, $result, $1119);
   var $1120=(($result)|0);
   var $1121=$1120;
   var $1122=HEAP32[(($1121)>>2)];
   var $1123=$1122;
   var $1124=(($1123+20)|0);
   var $1125=HEAP32[(($1124)>>2)];
   $buf=$1125;
   label = 234; break;
  case 234: 
   var $1127=$c;
   var $1128=(($1127) & 255);
   var $1129=$blen;
   var $1130=$buf;
   var $1131=(($1130+$1129)|0);
   HEAP8[($1131)]=$1128;
   var $1132=$n;
   var $1133=$blen;
   var $1134=((($1133)+($1132))|0);
   $blen=$1134;
   label = 263; break;
  case 235: 
   var $1136=$flags;
   var $1137=$1136 & 2;
   var $1138=(($1137)|(0))!=0;
   if ($1138) { label = 236; break; } else { label = 249; break; }
  case 236: 
   label = 237; break;
  case 237: 
   label = 238; break;
  case 238: 
   var $1142=$blen;
   var $1143=$n;
   var $1144=((($1142)+($1143))|0);
   var $1145=$bsiz;
   var $1146=(($1144)|(0)) >= (($1145)|(0));
   if ($1146) { label = 239; break; } else { label = 240; break; }
  case 239: 
   var $1148=$bsiz;
   var $1149=($1148<<1);
   $bsiz=$1149;
   label = 238; break;
  case 240: 
   var $1151=$1;
   var $1152=$bsiz;
   _mrb_str_resize($62, $1151, $result, $1152);
   var $1153=(($result)|0);
   var $1154=$1153;
   var $1155=HEAP32[(($1154)>>2)];
   var $1156=$1155;
   var $1157=(($1156+20)|0);
   var $1158=HEAP32[(($1157)>>2)];
   $buf=$1158;
   label = 241; break;
  case 241: 
   var $1160=$c;
   var $1161=(($1160) & 255);
   var $1162=$blen;
   var $1163=$buf;
   var $1164=(($1163+$1162)|0);
   HEAP8[($1164)]=$1161;
   var $1165=$n;
   var $1166=$blen;
   var $1167=((($1166)+($1165))|0);
   $blen=$1167;
   label = 242; break;
  case 242: 
   label = 243; break;
  case 243: 
   label = 244; break;
  case 244: 
   var $1171=$blen;
   var $1172=$width;
   var $1173=((($1172)-(1))|0);
   var $1174=((($1171)+($1173))|0);
   var $1175=$bsiz;
   var $1176=(($1174)|(0)) >= (($1175)|(0));
   if ($1176) { label = 245; break; } else { label = 246; break; }
  case 245: 
   var $1178=$bsiz;
   var $1179=($1178<<1);
   $bsiz=$1179;
   label = 244; break;
  case 246: 
   var $1181=$1;
   var $1182=$bsiz;
   _mrb_str_resize($63, $1181, $result, $1182);
   var $1183=(($result)|0);
   var $1184=$1183;
   var $1185=HEAP32[(($1184)>>2)];
   var $1186=$1185;
   var $1187=(($1186+20)|0);
   var $1188=HEAP32[(($1187)>>2)];
   $buf=$1188;
   label = 247; break;
  case 247: 
   var $1190=$blen;
   var $1191=$buf;
   var $1192=(($1191+$1190)|0);
   var $1193=$width;
   var $1194=((($1193)-(1))|0);
   _memset($1192, 32, $1194);
   var $1195=$width;
   var $1196=((($1195)-(1))|0);
   var $1197=$blen;
   var $1198=((($1197)+($1196))|0);
   $blen=$1198;
   label = 248; break;
  case 248: 
   label = 262; break;
  case 249: 
   label = 250; break;
  case 250: 
   label = 251; break;
  case 251: 
   label = 252; break;
  case 252: 
   var $1204=$blen;
   var $1205=$width;
   var $1206=((($1205)-(1))|0);
   var $1207=((($1204)+($1206))|0);
   var $1208=$bsiz;
   var $1209=(($1207)|(0)) >= (($1208)|(0));
   if ($1209) { label = 253; break; } else { label = 254; break; }
  case 253: 
   var $1211=$bsiz;
   var $1212=($1211<<1);
   $bsiz=$1212;
   label = 252; break;
  case 254: 
   var $1214=$1;
   var $1215=$bsiz;
   _mrb_str_resize($64, $1214, $result, $1215);
   var $1216=(($result)|0);
   var $1217=$1216;
   var $1218=HEAP32[(($1217)>>2)];
   var $1219=$1218;
   var $1220=(($1219+20)|0);
   var $1221=HEAP32[(($1220)>>2)];
   $buf=$1221;
   label = 255; break;
  case 255: 
   var $1223=$blen;
   var $1224=$buf;
   var $1225=(($1224+$1223)|0);
   var $1226=$width;
   var $1227=((($1226)-(1))|0);
   _memset($1225, 32, $1227);
   var $1228=$width;
   var $1229=((($1228)-(1))|0);
   var $1230=$blen;
   var $1231=((($1230)+($1229))|0);
   $blen=$1231;
   label = 256; break;
  case 256: 
   label = 257; break;
  case 257: 
   label = 258; break;
  case 258: 
   var $1235=$blen;
   var $1236=$n;
   var $1237=((($1235)+($1236))|0);
   var $1238=$bsiz;
   var $1239=(($1237)|(0)) >= (($1238)|(0));
   if ($1239) { label = 259; break; } else { label = 260; break; }
  case 259: 
   var $1241=$bsiz;
   var $1242=($1241<<1);
   $bsiz=$1242;
   label = 258; break;
  case 260: 
   var $1244=$1;
   var $1245=$bsiz;
   _mrb_str_resize($65, $1244, $result, $1245);
   var $1246=(($result)|0);
   var $1247=$1246;
   var $1248=HEAP32[(($1247)>>2)];
   var $1249=$1248;
   var $1250=(($1249+20)|0);
   var $1251=HEAP32[(($1250)>>2)];
   $buf=$1251;
   label = 261; break;
  case 261: 
   var $1253=$c;
   var $1254=(($1253) & 255);
   var $1255=$blen;
   var $1256=$buf;
   var $1257=(($1256+$1255)|0);
   HEAP8[($1257)]=$1254;
   var $1258=$n;
   var $1259=$blen;
   var $1260=((($1259)+($1258))|0);
   $blen=$1260;
   label = 262; break;
  case 262: 
   label = 263; break;
  case 263: 
   label = 581; break;
  case 264: 
   label = 265; break;
  case 265: 
   var $1265=(($nextvalue+8)|0);
   var $1266=HEAP32[(($1265)>>2)];
   var $1267=(($1266)|(0))==5;
   if ($1267) { label = 267; break; } else { label = 266; break; }
  case 266: 
   var $1269=$arg;
   var $1270=$nextvalue;
   assert(12 % 1 === 0);HEAP32[(($1269)>>2)]=HEAP32[(($1270)>>2)];HEAP32[((($1269)+(4))>>2)]=HEAP32[((($1270)+(4))>>2)];HEAP32[((($1269)+(8))>>2)]=HEAP32[((($1270)+(8))>>2)];
   label = 277; break;
  case 267: 
   var $1272=$posarg;
   var $1273=(($1272)|(0))==-1;
   if ($1273) { label = 268; break; } else { label = 269; break; }
  case 268: 
   var $1275=$1;
   var $1276=$1;
   var $1277=_mrb_class_get($1276, ((104864)|0));
   var $1278=$nextarg;
   _mrb_fixnum_value1690($66, $1278);
   _mrb_raisef($1275, $1277, ((100788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($66)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($66)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($66)+(8))>>2)],tempInt));
   _mrb_undef_value1689($arg);
   label = 276; break;
  case 269: 
   var $1280=$posarg;
   var $1281=(($1280)|(0))==-2;
   if ($1281) { label = 270; break; } else { label = 271; break; }
  case 270: 
   var $1283=$1;
   var $1284=$1;
   var $1285=_mrb_class_get($1284, ((104864)|0));
   var $1286=$nextarg;
   _mrb_fixnum_value1690($67, $1286);
   _mrb_raisef($1283, $1285, ((100484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($67)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($67)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($67)+(8))>>2)],tempInt));
   _mrb_undef_value1689($arg);
   label = 275; break;
  case 271: 
   var $1288=$nextarg;
   var $1289=((($1288)+(1))|0);
   $nextarg=$1289;
   $posarg=$1288;
   var $1290=$posarg;
   var $1291=$2;
   var $1292=(($1290)|(0)) >= (($1291)|(0));
   if ($1292) { label = 272; break; } else { label = 273; break; }
  case 272: 
   var $1294=$1;
   var $1295=$1;
   var $1296=_mrb_class_get($1295, ((104864)|0));
   _mrb_raise($1294, $1296, ((100240)|0));
   _mrb_undef_value1689($arg);
   label = 274; break;
  case 273: 
   var $1298=$posarg;
   var $1299=$3;
   var $1300=(($1299+((($1298)*(12))&-1))|0);
   var $1301=$arg;
   var $1302=$1300;
   assert(12 % 1 === 0);HEAP32[(($1301)>>2)]=HEAP32[(($1302)>>2)];HEAP32[((($1301)+(4))>>2)]=HEAP32[((($1302)+(4))>>2)];HEAP32[((($1301)+(8))>>2)]=HEAP32[((($1302)+(8))>>2)];
   label = 274; break;
  case 274: 
   label = 275; break;
  case 275: 
   label = 276; break;
  case 276: 
   label = 277; break;
  case 277: 
   var $1307=$p;
   var $1308=HEAP8[($1307)];
   var $1309=(($1308 << 24) >> 24);
   var $1310=(($1309)|(0))==112;
   if ($1310) { label = 278; break; } else { label = 279; break; }
  case 278: 
   var $1312=$1;
   _mrb_inspect($68, $1312, $arg);
   var $1313=$arg;
   var $1314=$68;
   assert(12 % 1 === 0);HEAP32[(($1313)>>2)]=HEAP32[(($1314)>>2)];HEAP32[((($1313)+(4))>>2)]=HEAP32[((($1314)+(4))>>2)];HEAP32[((($1313)+(8))>>2)]=HEAP32[((($1314)+(8))>>2)];
   label = 279; break;
  case 279: 
   var $1316=$1;
   _mrb_obj_as_string($69, $1316, $arg);
   var $1317=$str;
   var $1318=$69;
   assert(12 % 1 === 0);HEAP32[(($1317)>>2)]=HEAP32[(($1318)>>2)];HEAP32[((($1317)+(4))>>2)]=HEAP32[((($1318)+(4))>>2)];HEAP32[((($1317)+(8))>>2)]=HEAP32[((($1318)+(8))>>2)];
   var $1319=(($str)|0);
   var $1320=$1319;
   var $1321=HEAP32[(($1320)>>2)];
   var $1322=$1321;
   var $1323=(($1322+12)|0);
   var $1324=HEAP32[(($1323)>>2)];
   $len=$1324;
   var $1325=$blen;
   var $1326=(($result)|0);
   var $1327=$1326;
   var $1328=HEAP32[(($1327)>>2)];
   var $1329=$1328;
   var $1330=(($1329+12)|0);
   HEAP32[(($1330)>>2)]=$1325;
   var $1331=$flags;
   var $1332=$1331 & 96;
   var $1333=(($1332)|(0))!=0;
   if ($1333) { label = 280; break; } else { label = 314; break; }
  case 280: 
   var $1335=(($str)|0);
   var $1336=$1335;
   var $1337=HEAP32[(($1336)>>2)];
   var $1338=$1337;
   var $1339=(($1338+12)|0);
   var $1340=HEAP32[(($1339)>>2)];
   $slen=$1340;
   var $1341=$slen;
   var $1342=(($1341)|(0)) < 0;
   if ($1342) { label = 281; break; } else { label = 282; break; }
  case 281: 
   var $1344=$1;
   var $1345=$1;
   var $1346=_mrb_class_get($1345, ((104864)|0));
   _mrb_raise($1344, $1346, ((97760)|0));
   label = 282; break;
  case 282: 
   var $1348=$flags;
   var $1349=$1348 & 64;
   var $1350=(($1349)|(0))!=0;
   if ($1350) { label = 283; break; } else { label = 285; break; }
  case 283: 
   var $1352=$prec;
   var $1353=$slen;
   var $1354=(($1352)|(0)) < (($1353)|(0));
   if ($1354) { label = 284; break; } else { label = 285; break; }
  case 284: 
   var $1356=(($str)|0);
   var $1357=$1356;
   var $1358=HEAP32[(($1357)>>2)];
   var $1359=$1358;
   var $1360=(($1359+20)|0);
   var $1361=HEAP32[(($1360)>>2)];
   var $1362=$prec;
   var $1363=(($1361+$1362)|0);
   $p5=$1363;
   var $1364=$prec;
   $slen=$1364;
   var $1365=$p5;
   var $1366=(($str)|0);
   var $1367=$1366;
   var $1368=HEAP32[(($1367)>>2)];
   var $1369=$1368;
   var $1370=(($1369+20)|0);
   var $1371=HEAP32[(($1370)>>2)];
   var $1372=$1365;
   var $1373=$1371;
   var $1374=((($1372)-($1373))|0);
   $len=$1374;
   label = 285; break;
  case 285: 
   var $1376=$flags;
   var $1377=$1376 & 32;
   var $1378=(($1377)|(0))!=0;
   if ($1378) { label = 286; break; } else { label = 313; break; }
  case 286: 
   var $1380=$width;
   var $1381=$slen;
   var $1382=(($1380)|(0)) > (($1381)|(0));
   if ($1382) { label = 287; break; } else { label = 313; break; }
  case 287: 
   var $1384=$slen;
   var $1385=$width;
   var $1386=((($1385)-($1384))|0);
   $width=$1386;
   var $1387=$flags;
   var $1388=$1387 & 2;
   var $1389=(($1388)|(0))!=0;
   if ($1389) { label = 297; break; } else { label = 288; break; }
  case 288: 
   label = 289; break;
  case 289: 
   label = 290; break;
  case 290: 
   var $1393=$blen;
   var $1394=$width;
   var $1395=((($1393)+($1394))|0);
   var $1396=$bsiz;
   var $1397=(($1395)|(0)) >= (($1396)|(0));
   if ($1397) { label = 291; break; } else { label = 292; break; }
  case 291: 
   var $1399=$bsiz;
   var $1400=($1399<<1);
   $bsiz=$1400;
   label = 290; break;
  case 292: 
   var $1402=$1;
   var $1403=$bsiz;
   _mrb_str_resize($70, $1402, $result, $1403);
   var $1404=(($result)|0);
   var $1405=$1404;
   var $1406=HEAP32[(($1405)>>2)];
   var $1407=$1406;
   var $1408=(($1407+20)|0);
   var $1409=HEAP32[(($1408)>>2)];
   $buf=$1409;
   label = 293; break;
  case 293: 
   label = 294; break;
  case 294: 
   var $1412=$width;
   var $1413=((($1412)-(1))|0);
   $width=$1413;
   var $1414=(($1412)|(0))!=0;
   if ($1414) { label = 295; break; } else { label = 296; break; }
  case 295: 
   var $1416=$blen;
   var $1417=((($1416)+(1))|0);
   $blen=$1417;
   var $1418=$buf;
   var $1419=(($1418+$1416)|0);
   HEAP8[($1419)]=32;
   label = 294; break;
  case 296: 
   label = 297; break;
  case 297: 
   label = 298; break;
  case 298: 
   label = 299; break;
  case 299: 
   var $1424=$blen;
   var $1425=$len;
   var $1426=((($1424)+($1425))|0);
   var $1427=$bsiz;
   var $1428=(($1426)|(0)) >= (($1427)|(0));
   if ($1428) { label = 300; break; } else { label = 301; break; }
  case 300: 
   var $1430=$bsiz;
   var $1431=($1430<<1);
   $bsiz=$1431;
   label = 299; break;
  case 301: 
   var $1433=$1;
   var $1434=$bsiz;
   _mrb_str_resize($71, $1433, $result, $1434);
   var $1435=(($result)|0);
   var $1436=$1435;
   var $1437=HEAP32[(($1436)>>2)];
   var $1438=$1437;
   var $1439=(($1438+20)|0);
   var $1440=HEAP32[(($1439)>>2)];
   $buf=$1440;
   label = 302; break;
  case 302: 
   var $1442=$blen;
   var $1443=$buf;
   var $1444=(($1443+$1442)|0);
   var $1445=(($str)|0);
   var $1446=$1445;
   var $1447=HEAP32[(($1446)>>2)];
   var $1448=$1447;
   var $1449=(($1448+20)|0);
   var $1450=HEAP32[(($1449)>>2)];
   var $1451=$len;
   assert($1451 % 1 === 0);(_memcpy($1444, $1450, $1451)|0);
   var $1452=$len;
   var $1453=$blen;
   var $1454=((($1453)+($1452))|0);
   $blen=$1454;
   var $1455=$flags;
   var $1456=$1455 & 2;
   var $1457=(($1456)|(0))!=0;
   if ($1457) { label = 303; break; } else { label = 312; break; }
  case 303: 
   label = 304; break;
  case 304: 
   label = 305; break;
  case 305: 
   var $1461=$blen;
   var $1462=$width;
   var $1463=((($1461)+($1462))|0);
   var $1464=$bsiz;
   var $1465=(($1463)|(0)) >= (($1464)|(0));
   if ($1465) { label = 306; break; } else { label = 307; break; }
  case 306: 
   var $1467=$bsiz;
   var $1468=($1467<<1);
   $bsiz=$1468;
   label = 305; break;
  case 307: 
   var $1470=$1;
   var $1471=$bsiz;
   _mrb_str_resize($72, $1470, $result, $1471);
   var $1472=(($result)|0);
   var $1473=$1472;
   var $1474=HEAP32[(($1473)>>2)];
   var $1475=$1474;
   var $1476=(($1475+20)|0);
   var $1477=HEAP32[(($1476)>>2)];
   $buf=$1477;
   label = 308; break;
  case 308: 
   label = 309; break;
  case 309: 
   var $1480=$width;
   var $1481=((($1480)-(1))|0);
   $width=$1481;
   var $1482=(($1480)|(0))!=0;
   if ($1482) { label = 310; break; } else { label = 311; break; }
  case 310: 
   var $1484=$blen;
   var $1485=((($1484)+(1))|0);
   $blen=$1485;
   var $1486=$buf;
   var $1487=(($1486+$1484)|0);
   HEAP8[($1487)]=32;
   label = 309; break;
  case 311: 
   label = 312; break;
  case 312: 
   label = 581; break;
  case 313: 
   label = 314; break;
  case 314: 
   label = 315; break;
  case 315: 
   label = 316; break;
  case 316: 
   label = 317; break;
  case 317: 
   var $1495=$blen;
   var $1496=$len;
   var $1497=((($1495)+($1496))|0);
   var $1498=$bsiz;
   var $1499=(($1497)|(0)) >= (($1498)|(0));
   if ($1499) { label = 318; break; } else { label = 319; break; }
  case 318: 
   var $1501=$bsiz;
   var $1502=($1501<<1);
   $bsiz=$1502;
   label = 317; break;
  case 319: 
   var $1504=$1;
   var $1505=$bsiz;
   _mrb_str_resize($73, $1504, $result, $1505);
   var $1506=(($result)|0);
   var $1507=$1506;
   var $1508=HEAP32[(($1507)>>2)];
   var $1509=$1508;
   var $1510=(($1509+20)|0);
   var $1511=HEAP32[(($1510)>>2)];
   $buf=$1511;
   label = 320; break;
  case 320: 
   var $1513=$blen;
   var $1514=$buf;
   var $1515=(($1514+$1513)|0);
   var $1516=(($str)|0);
   var $1517=$1516;
   var $1518=HEAP32[(($1517)>>2)];
   var $1519=$1518;
   var $1520=(($1519+20)|0);
   var $1521=HEAP32[(($1520)>>2)];
   var $1522=$len;
   assert($1522 % 1 === 0);(_memcpy($1515, $1521, $1522)|0);
   var $1523=$len;
   var $1524=$blen;
   var $1525=((($1524)+($1523))|0);
   $blen=$1525;
   label = 321; break;
  case 321: 
   label = 581; break;
  case 322: 
   var $1528=(($nextvalue+8)|0);
   var $1529=HEAP32[(($1528)>>2)];
   var $1530=(($1529)|(0))==5;
   if ($1530) { label = 324; break; } else { label = 323; break; }
  case 323: 
   var $1532=$val6;
   var $1533=$nextvalue;
   assert(12 % 1 === 0);HEAP32[(($1532)>>2)]=HEAP32[(($1533)>>2)];HEAP32[((($1532)+(4))>>2)]=HEAP32[((($1533)+(4))>>2)];HEAP32[((($1532)+(8))>>2)]=HEAP32[((($1533)+(8))>>2)];
   label = 334; break;
  case 324: 
   var $1535=$posarg;
   var $1536=(($1535)|(0))==-1;
   if ($1536) { label = 325; break; } else { label = 326; break; }
  case 325: 
   var $1538=$1;
   var $1539=$1;
   var $1540=_mrb_class_get($1539, ((104864)|0));
   var $1541=$nextarg;
   _mrb_fixnum_value1690($74, $1541);
   _mrb_raisef($1538, $1540, ((100788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($74)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($74)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($74)+(8))>>2)],tempInt));
   _mrb_undef_value1689($val6);
   label = 333; break;
  case 326: 
   var $1543=$posarg;
   var $1544=(($1543)|(0))==-2;
   if ($1544) { label = 327; break; } else { label = 328; break; }
  case 327: 
   var $1546=$1;
   var $1547=$1;
   var $1548=_mrb_class_get($1547, ((104864)|0));
   var $1549=$nextarg;
   _mrb_fixnum_value1690($75, $1549);
   _mrb_raisef($1546, $1548, ((100484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($75)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($75)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($75)+(8))>>2)],tempInt));
   _mrb_undef_value1689($val6);
   label = 332; break;
  case 328: 
   var $1551=$nextarg;
   var $1552=((($1551)+(1))|0);
   $nextarg=$1552;
   $posarg=$1551;
   var $1553=$posarg;
   var $1554=$2;
   var $1555=(($1553)|(0)) >= (($1554)|(0));
   if ($1555) { label = 329; break; } else { label = 330; break; }
  case 329: 
   var $1557=$1;
   var $1558=$1;
   var $1559=_mrb_class_get($1558, ((104864)|0));
   _mrb_raise($1557, $1559, ((100240)|0));
   _mrb_undef_value1689($val6);
   label = 331; break;
  case 330: 
   var $1561=$posarg;
   var $1562=$3;
   var $1563=(($1562+((($1561)*(12))&-1))|0);
   var $1564=$val6;
   var $1565=$1563;
   assert(12 % 1 === 0);HEAP32[(($1564)>>2)]=HEAP32[(($1565)>>2)];HEAP32[((($1564)+(4))>>2)]=HEAP32[((($1565)+(4))>>2)];HEAP32[((($1564)+(8))>>2)]=HEAP32[((($1565)+(8))>>2)];
   label = 331; break;
  case 331: 
   label = 332; break;
  case 332: 
   label = 333; break;
  case 333: 
   label = 334; break;
  case 334: 
   $prefix=0;
   $sign=0;
   $dots=0;
   HEAP8[($sc)]=0;
   $v=0;
   $org_v=0;
   var $1570=$p;
   var $1571=HEAP8[($1570)];
   var $1572=(($1571 << 24) >> 24);
   if ((($1572)|(0))==100 | (($1572)|(0))==105 | (($1572)|(0))==117) {
    label = 335; break;
   }
   else if ((($1572)|(0))==111 | (($1572)|(0))==120 | (($1572)|(0))==88 | (($1572)|(0))==98 | (($1572)|(0))==66) {
    label = 336; break;
   }
   else {
   label = 339; break;
   }
  case 335: 
   $sign=1;
   label = 340; break;
  case 336: 
   var $1575=$flags;
   var $1576=$1575 & 20;
   var $1577=(($1576)|(0))!=0;
   if ($1577) { label = 337; break; } else { label = 338; break; }
  case 337: 
   $sign=1;
   label = 338; break;
  case 338: 
   label = 340; break;
  case 339: 
   label = 340; break;
  case 340: 
   var $1582=$flags;
   var $1583=$1582 & 1;
   var $1584=(($1583)|(0))!=0;
   if ($1584) { label = 341; break; } else { label = 349; break; }
  case 341: 
   var $1586=$p;
   var $1587=HEAP8[($1586)];
   var $1588=(($1587 << 24) >> 24);
   if ((($1588)|(0))==111) {
    label = 342; break;
   }
   else if ((($1588)|(0))==120) {
    label = 343; break;
   }
   else if ((($1588)|(0))==88) {
    label = 344; break;
   }
   else if ((($1588)|(0))==98) {
    label = 345; break;
   }
   else if ((($1588)|(0))==66) {
    label = 346; break;
   }
   else {
   label = 347; break;
   }
  case 342: 
   $prefix=((97444)|0);
   label = 348; break;
  case 343: 
   $prefix=((97152)|0);
   label = 348; break;
  case 344: 
   $prefix=((96844)|0);
   label = 348; break;
  case 345: 
   $prefix=((96328)|0);
   label = 348; break;
  case 346: 
   $prefix=((96112)|0);
   label = 348; break;
  case 347: 
   label = 348; break;
  case 348: 
   label = 349; break;
  case 349: 
   label = 350; break;
  case 350: 
   var $1598=(($val6+8)|0);
   var $1599=HEAP32[(($1598)>>2)];
   if ((($1599)|(0))==6) {
    label = 351; break;
   }
   else if ((($1599)|(0))==16) {
    label = 357; break;
   }
   else if ((($1599)|(0))==3) {
    label = 358; break;
   }
   else {
   label = 359; break;
   }
  case 351: 
   var $1601=(($val6)|0);
   var $1602=$1601;
   var $1603=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($1602)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($1602)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $1604=$1603 <= 2147483647;
   if ($1604) { label = 352; break; } else { label = 354; break; }
  case 352: 
   var $1606=(($val6)|0);
   var $1607=$1606;
   var $1608=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($1607)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($1607)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $1609=$1608 >= -2147483648;
   if ($1609) { label = 353; break; } else { label = 354; break; }
  case 353: 
   var $1611=(($val6)|0);
   var $1612=$1611;
   var $1613=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($1612)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($1612)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $1614=(($1613)&-1);
   _mrb_fixnum_value1690($76, $1614);
   var $1615=$val6;
   var $1616=$76;
   assert(12 % 1 === 0);HEAP32[(($1615)>>2)]=HEAP32[(($1616)>>2)];HEAP32[((($1615)+(4))>>2)]=HEAP32[((($1616)+(4))>>2)];HEAP32[((($1615)+(8))>>2)]=HEAP32[((($1616)+(8))>>2)];
   label = 350; break;
  case 354: 
   var $1618=$1;
   _mrb_flo_to_fixnum($77, $1618, $val6);
   var $1619=$val6;
   var $1620=$77;
   assert(12 % 1 === 0);HEAP32[(($1619)>>2)]=HEAP32[(($1620)>>2)];HEAP32[((($1619)+(4))>>2)]=HEAP32[((($1620)+(4))>>2)];HEAP32[((($1619)+(8))>>2)]=HEAP32[((($1620)+(8))>>2)];
   var $1621=(($val6+8)|0);
   var $1622=HEAP32[(($1621)>>2)];
   var $1623=(($1622)|(0))==3;
   if ($1623) { label = 355; break; } else { label = 356; break; }
  case 355: 
   label = 350; break;
  case 356: 
   label = 360; break;
  case 357: 
   var $1627=$1;
   _mrb_str_to_inum($78, $1627, $val6, 0, 1);
   var $1628=$val6;
   var $1629=$78;
   assert(12 % 1 === 0);HEAP32[(($1628)>>2)]=HEAP32[(($1629)>>2)];HEAP32[((($1628)+(4))>>2)]=HEAP32[((($1629)+(4))>>2)];HEAP32[((($1628)+(8))>>2)]=HEAP32[((($1629)+(8))>>2)];
   label = 350; break;
  case 358: 
   var $1631=(($val6)|0);
   var $1632=$1631;
   var $1633=HEAP32[(($1632)>>2)];
   $v=$1633;
   label = 360; break;
  case 359: 
   var $1635=$1;
   _mrb_Integer($79, $1635, $val6);
   var $1636=$val6;
   var $1637=$79;
   assert(12 % 1 === 0);HEAP32[(($1636)>>2)]=HEAP32[(($1637)>>2)];HEAP32[((($1636)+(4))>>2)]=HEAP32[((($1637)+(4))>>2)];HEAP32[((($1636)+(8))>>2)]=HEAP32[((($1637)+(8))>>2)];
   label = 350; break;
  case 360: 
   var $1639=$p;
   var $1640=HEAP8[($1639)];
   var $1641=(($1640 << 24) >> 24);
   if ((($1641)|(0))==111) {
    label = 361; break;
   }
   else if ((($1641)|(0))==120 | (($1641)|(0))==88) {
    label = 362; break;
   }
   else if ((($1641)|(0))==98 | (($1641)|(0))==66) {
    label = 363; break;
   }
   else if ((($1641)|(0))==117 | (($1641)|(0))==100 | (($1641)|(0))==105) {
    label = 364; break;
   }
   else {
   label = 365; break;
   }
  case 361: 
   $base=8;
   label = 366; break;
  case 362: 
   $base=16;
   label = 366; break;
  case 363: 
   $base=2;
   label = 366; break;
  case 364: 
   label = 365; break;
  case 365: 
   $base=10;
   label = 366; break;
  case 366: 
   var $1648=$base;
   var $1649=(($1648)|(0))==2;
   if ($1649) { label = 367; break; } else { label = 372; break; }
  case 367: 
   var $1651=$v;
   $org_v=$1651;
   var $1652=$v;
   var $1653=(($1652)|(0)) < 0;
   if ($1653) { label = 368; break; } else { label = 370; break; }
  case 368: 
   var $1655=$sign;
   var $1656=(($1655)|(0))!=0;
   if ($1656) { label = 370; break; } else { label = 369; break; }
  case 369: 
   var $1658=$1;
   var $1659=$v;
   _mrb_fixnum_value1690($80, $1659);
   var $1660=$base;
   _mrb_fix2binstr($81, $1658, $80, $1660);
   var $1661=$val6;
   var $1662=$81;
   assert(12 % 1 === 0);HEAP32[(($1661)>>2)]=HEAP32[(($1662)>>2)];HEAP32[((($1661)+(4))>>2)]=HEAP32[((($1662)+(4))>>2)];HEAP32[((($1661)+(8))>>2)]=HEAP32[((($1662)+(8))>>2)];
   $dots=1;
   label = 371; break;
  case 370: 
   var $1664=$1;
   var $1665=$v;
   _mrb_fixnum_value1690($82, $1665);
   var $1666=$base;
   _mrb_fixnum_to_str($83, $1664, $82, $1666);
   var $1667=$val6;
   var $1668=$83;
   assert(12 % 1 === 0);HEAP32[(($1667)>>2)]=HEAP32[(($1668)>>2)];HEAP32[((($1667)+(4))>>2)]=HEAP32[((($1668)+(4))>>2)];HEAP32[((($1667)+(8))>>2)]=HEAP32[((($1668)+(8))>>2)];
   label = 371; break;
  case 371: 
   var $1670=$1;
   _mrb_str_to_inum($84, $1670, $val6, 10, 0);
   var $1671=(($84)|0);
   var $1672=$1671;
   var $1673=HEAP32[(($1672)>>2)];
   $v=$1673;
   label = 372; break;
  case 372: 
   var $1675=$sign;
   var $1676=(($1675)|(0))!=0;
   if ($1676) { label = 373; break; } else { label = 386; break; }
  case 373: 
   var $1678=$p;
   var $1679=HEAP8[($1678)];
   $c8=$1679;
   var $1680=$c8;
   var $1681=(($1680 << 24) >> 24);
   var $1682=(($1681)|(0))==105;
   if ($1682) { label = 374; break; } else { label = 375; break; }
  case 374: 
   $c8=100;
   label = 375; break;
  case 375: 
   var $1685=$base;
   var $1686=(($1685)|(0))==2;
   if ($1686) { label = 376; break; } else { label = 377; break; }
  case 376: 
   $c8=100;
   label = 377; break;
  case 377: 
   var $1689=$v;
   var $1690=(($1689)|(0)) < 0;
   if ($1690) { label = 378; break; } else { label = 379; break; }
  case 378: 
   var $1692=$v;
   var $1693=(((-$1692))|0);
   $v=$1693;
   HEAP8[($sc)]=45;
   var $1694=$width;
   var $1695=((($1694)-(1))|0);
   $width=$1695;
   label = 385; break;
  case 379: 
   var $1697=$flags;
   var $1698=$1697 & 4;
   var $1699=(($1698)|(0))!=0;
   if ($1699) { label = 380; break; } else { label = 381; break; }
  case 380: 
   HEAP8[($sc)]=43;
   var $1701=$width;
   var $1702=((($1701)-(1))|0);
   $width=$1702;
   label = 384; break;
  case 381: 
   var $1704=$flags;
   var $1705=$1704 & 16;
   var $1706=(($1705)|(0))!=0;
   if ($1706) { label = 382; break; } else { label = 383; break; }
  case 382: 
   HEAP8[($sc)]=32;
   var $1708=$width;
   var $1709=((($1708)-(1))|0);
   $width=$1709;
   label = 383; break;
  case 383: 
   label = 384; break;
  case 384: 
   label = 385; break;
  case 385: 
   var $1713=(($fbuf)|0);
   var $1714=$c8;
   var $1715=(($1714 << 24) >> 24);
   var $1716=_snprintf($1713, 32, ((95940)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1715,tempInt));
   var $1717=(($nbuf)|0);
   var $1718=(($fbuf)|0);
   var $1719=$v;
   var $1720=_snprintf($1717, 64, $1718, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1719,tempInt));
   var $1721=(($nbuf)|0);
   $s=$1721;
   label = 403; break;
  case 386: 
   var $1723=$p;
   var $1724=HEAP8[($1723)];
   $c9=$1724;
   var $1725=$c9;
   var $1726=(($1725 << 24) >> 24);
   var $1727=(($1726)|(0))==88;
   if ($1727) { label = 387; break; } else { label = 388; break; }
  case 387: 
   $c9=120;
   label = 388; break;
  case 388: 
   var $1730=$base;
   var $1731=(($1730)|(0))==2;
   if ($1731) { label = 389; break; } else { label = 390; break; }
  case 389: 
   $c9=100;
   label = 390; break;
  case 390: 
   var $1734=(($nbuf)|0);
   $s=$1734;
   var $1735=$v;
   var $1736=(($1735)|(0)) < 0;
   if ($1736) { label = 391; break; } else { label = 392; break; }
  case 391: 
   $dots=1;
   label = 392; break;
  case 392: 
   var $1739=(($fbuf)|0);
   var $1740=$c9;
   var $1741=(($1740 << 24) >> 24);
   var $1742=_snprintf($1739, 32, ((95940)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1741,tempInt));
   var $1743=$s;
   var $1744=(($1743+1)|0);
   $s=$1744;
   var $1745=(($fbuf)|0);
   var $1746=$v;
   var $1747=_snprintf($1744, 63, $1745, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$1746,tempInt));
   var $1748=$v;
   var $1749=(($1748)|(0)) < 0;
   if ($1749) { label = 393; break; } else { label = 402; break; }
  case 393: 
   var $1751=$s;
   var $1752=$base;
   var $1753=_remove_sign_bits($1751, $1752);
   $s=$1753;
   var $1754=$base;
   if ((($1754)|(0))==16) {
    label = 394; break;
   }
   else if ((($1754)|(0))==8) {
    label = 395; break;
   }
   else if ((($1754)|(0))==2) {
    label = 396; break;
   }
   else {
   label = 397; break;
   }
  case 394: 
   $d=102;
   label = 398; break;
  case 395: 
   $d=55;
   label = 398; break;
  case 396: 
   $d=49;
   label = 398; break;
  case 397: 
   $d=0;
   label = 398; break;
  case 398: 
   var $1760=$d;
   var $1761=(($1760 << 24) >> 24);
   var $1762=(($1761)|(0))!=0;
   if ($1762) { label = 399; break; } else { label = 401; break; }
  case 399: 
   var $1764=$s;
   var $1765=HEAP8[($1764)];
   var $1766=(($1765 << 24) >> 24);
   var $1767=$d;
   var $1768=(($1767 << 24) >> 24);
   var $1769=(($1766)|(0))!=(($1768)|(0));
   if ($1769) { label = 400; break; } else { label = 401; break; }
  case 400: 
   var $1771=$d;
   var $1772=$s;
   var $1773=((($1772)-(1))|0);
   $s=$1773;
   HEAP8[($1773)]=$1771;
   label = 401; break;
  case 401: 
   label = 402; break;
  case 402: 
   label = 403; break;
  case 403: 
   var $1777=$s;
   var $1778=_strlen($1777);
   $size=$1778;
   var $1779=$size;
   $len7=$1779;
   var $1780=$dots;
   var $1781=(($1780)|(0))!=0;
   if ($1781) { label = 404; break; } else { label = 405; break; }
  case 404: 
   var $1783=$prec;
   var $1784=((($1783)-(2))|0);
   $prec=$1784;
   var $1785=$width;
   var $1786=((($1785)-(2))|0);
   $width=$1786;
   label = 405; break;
  case 405: 
   var $1788=$p;
   var $1789=HEAP8[($1788)];
   var $1790=(($1789 << 24) >> 24);
   var $1791=(($1790)|(0))==88;
   if ($1791) { label = 406; break; } else { label = 410; break; }
  case 406: 
   var $1793=$s;
   $pp=$1793;
   label = 407; break;
  case 407: 
   var $1795=$pp;
   var $1796=HEAP8[($1795)];
   var $1797=(($1796)&(255));
   $c10=$1797;
   var $1798=(($1797)|(0))!=0;
   if ($1798) { label = 408; break; } else { label = 409; break; }
  case 408: 
   var $1800=$c10;
   var $1801=_toupper($1800);
   var $1802=(($1801) & 255);
   var $1803=$pp;
   HEAP8[($1803)]=$1802;
   var $1804=$pp;
   var $1805=(($1804+1)|0);
   $pp=$1805;
   label = 407; break;
  case 409: 
   label = 410; break;
  case 410: 
   var $1808=$prefix;
   var $1809=(($1808)|(0))!=0;
   if ($1809) { label = 411; break; } else { label = 425; break; }
  case 411: 
   var $1811=$prefix;
   var $1812=(($1811+1)|0);
   var $1813=HEAP8[($1812)];
   var $1814=(($1813 << 24) >> 24)!=0;
   if ($1814) { label = 425; break; } else { label = 412; break; }
  case 412: 
   var $1816=$dots;
   var $1817=(($1816)|(0))!=0;
   if ($1817) { label = 413; break; } else { label = 414; break; }
  case 413: 
   $prefix=0;
   label = 424; break;
  case 414: 
   var $1820=$len7;
   var $1821=(($1820)|(0))==1;
   if ($1821) { label = 415; break; } else { label = 419; break; }
  case 415: 
   var $1823=$s;
   var $1824=HEAP8[($1823)];
   var $1825=(($1824 << 24) >> 24);
   var $1826=(($1825)|(0))==48;
   if ($1826) { label = 416; break; } else { label = 419; break; }
  case 416: 
   $len7=0;
   var $1828=$flags;
   var $1829=$1828 & 64;
   var $1830=(($1829)|(0))!=0;
   if ($1830) { label = 417; break; } else { label = 418; break; }
  case 417: 
   var $1832=$prec;
   var $1833=((($1832)-(1))|0);
   $prec=$1833;
   label = 418; break;
  case 418: 
   label = 423; break;
  case 419: 
   var $1836=$flags;
   var $1837=$1836 & 64;
   var $1838=(($1837)|(0))!=0;
   if ($1838) { label = 420; break; } else { label = 422; break; }
  case 420: 
   var $1840=$prec;
   var $1841=$len7;
   var $1842=(($1840)|(0)) > (($1841)|(0));
   if ($1842) { label = 421; break; } else { label = 422; break; }
  case 421: 
   $prefix=0;
   label = 422; break;
  case 422: 
   label = 423; break;
  case 423: 
   label = 424; break;
  case 424: 
   label = 429; break;
  case 425: 
   var $1848=$len7;
   var $1849=(($1848)|(0))==1;
   if ($1849) { label = 426; break; } else { label = 428; break; }
  case 426: 
   var $1851=$s;
   var $1852=HEAP8[($1851)];
   var $1853=(($1852 << 24) >> 24);
   var $1854=(($1853)|(0))==48;
   if ($1854) { label = 427; break; } else { label = 428; break; }
  case 427: 
   $prefix=0;
   label = 428; break;
  case 428: 
   label = 429; break;
  case 429: 
   var $1858=$prefix;
   var $1859=(($1858)|(0))!=0;
   if ($1859) { label = 430; break; } else { label = 431; break; }
  case 430: 
   var $1861=$prefix;
   var $1862=_strlen($1861);
   $size11=$1862;
   var $1863=$size11;
   var $1864=$width;
   var $1865=((($1864)-($1863))|0);
   $width=$1865;
   label = 431; break;
  case 431: 
   var $1867=$flags;
   var $1868=$1867 & 74;
   var $1869=(($1868)|(0))==8;
   if ($1869) { label = 432; break; } else { label = 433; break; }
  case 432: 
   var $1871=$width;
   $prec=$1871;
   $width=0;
   label = 441; break;
  case 433: 
   var $1873=$prec;
   var $1874=$len7;
   var $1875=(($1873)|(0)) < (($1874)|(0));
   if ($1875) { label = 434; break; } else { label = 440; break; }
  case 434: 
   var $1877=$prefix;
   var $1878=(($1877)|(0))!=0;
   if ($1878) { label = 439; break; } else { label = 435; break; }
  case 435: 
   var $1880=$prec;
   var $1881=(($1880)|(0))==0;
   if ($1881) { label = 436; break; } else { label = 439; break; }
  case 436: 
   var $1883=$len7;
   var $1884=(($1883)|(0))==1;
   if ($1884) { label = 437; break; } else { label = 439; break; }
  case 437: 
   var $1886=$s;
   var $1887=HEAP8[($1886)];
   var $1888=(($1887 << 24) >> 24);
   var $1889=(($1888)|(0))==48;
   if ($1889) { label = 438; break; } else { label = 439; break; }
  case 438: 
   $len7=0;
   label = 439; break;
  case 439: 
   var $1892=$len7;
   $prec=$1892;
   label = 440; break;
  case 440: 
   var $1894=$prec;
   var $1895=$width;
   var $1896=((($1895)-($1894))|0);
   $width=$1896;
   label = 441; break;
  case 441: 
   var $1898=$flags;
   var $1899=$1898 & 2;
   var $1900=(($1899)|(0))!=0;
   if ($1900) { label = 451; break; } else { label = 442; break; }
  case 442: 
   label = 443; break;
  case 443: 
   label = 444; break;
  case 444: 
   var $1904=$blen;
   var $1905=$width;
   var $1906=((($1904)+($1905))|0);
   var $1907=$bsiz;
   var $1908=(($1906)|(0)) >= (($1907)|(0));
   if ($1908) { label = 445; break; } else { label = 446; break; }
  case 445: 
   var $1910=$bsiz;
   var $1911=($1910<<1);
   $bsiz=$1911;
   label = 444; break;
  case 446: 
   var $1913=$1;
   var $1914=$bsiz;
   _mrb_str_resize($85, $1913, $result, $1914);
   var $1915=(($result)|0);
   var $1916=$1915;
   var $1917=HEAP32[(($1916)>>2)];
   var $1918=$1917;
   var $1919=(($1918+20)|0);
   var $1920=HEAP32[(($1919)>>2)];
   $buf=$1920;
   label = 447; break;
  case 447: 
   label = 448; break;
  case 448: 
   var $1923=$width;
   var $1924=((($1923)-(1))|0);
   $width=$1924;
   var $1925=(($1923)|(0)) > 0;
   if ($1925) { label = 449; break; } else { label = 450; break; }
  case 449: 
   var $1927=$blen;
   var $1928=((($1927)+(1))|0);
   $blen=$1928;
   var $1929=$buf;
   var $1930=(($1929+$1927)|0);
   HEAP8[($1930)]=32;
   label = 448; break;
  case 450: 
   label = 451; break;
  case 451: 
   var $1933=HEAP8[($sc)];
   var $1934=(($1933 << 24) >> 24)!=0;
   if ($1934) { label = 452; break; } else { label = 460; break; }
  case 452: 
   label = 453; break;
  case 453: 
   label = 454; break;
  case 454: 
   label = 455; break;
  case 455: 
   var $1939=$blen;
   var $1940=((($1939)+(1))|0);
   var $1941=$bsiz;
   var $1942=(($1940)|(0)) >= (($1941)|(0));
   if ($1942) { label = 456; break; } else { label = 457; break; }
  case 456: 
   var $1944=$bsiz;
   var $1945=($1944<<1);
   $bsiz=$1945;
   label = 455; break;
  case 457: 
   var $1947=$1;
   var $1948=$bsiz;
   _mrb_str_resize($86, $1947, $result, $1948);
   var $1949=(($result)|0);
   var $1950=$1949;
   var $1951=HEAP32[(($1950)>>2)];
   var $1952=$1951;
   var $1953=(($1952+20)|0);
   var $1954=HEAP32[(($1953)>>2)];
   $buf=$1954;
   label = 458; break;
  case 458: 
   var $1956=$blen;
   var $1957=$buf;
   var $1958=(($1957+$1956)|0);
   assert(1 % 1 === 0);HEAP8[($1958)]=HEAP8[($sc)];
   var $1959=$blen;
   var $1960=((($1959)+(1))|0);
   $blen=$1960;
   label = 459; break;
  case 459: 
   label = 460; break;
  case 460: 
   var $1963=$prefix;
   var $1964=(($1963)|(0))!=0;
   if ($1964) { label = 461; break; } else { label = 469; break; }
  case 461: 
   var $1966=$prefix;
   var $1967=_strlen($1966);
   $plen=$1967;
   label = 462; break;
  case 462: 
   label = 463; break;
  case 463: 
   label = 464; break;
  case 464: 
   var $1971=$blen;
   var $1972=$plen;
   var $1973=((($1971)+($1972))|0);
   var $1974=$bsiz;
   var $1975=(($1973)|(0)) >= (($1974)|(0));
   if ($1975) { label = 465; break; } else { label = 466; break; }
  case 465: 
   var $1977=$bsiz;
   var $1978=($1977<<1);
   $bsiz=$1978;
   label = 464; break;
  case 466: 
   var $1980=$1;
   var $1981=$bsiz;
   _mrb_str_resize($87, $1980, $result, $1981);
   var $1982=(($result)|0);
   var $1983=$1982;
   var $1984=HEAP32[(($1983)>>2)];
   var $1985=$1984;
   var $1986=(($1985+20)|0);
   var $1987=HEAP32[(($1986)>>2)];
   $buf=$1987;
   label = 467; break;
  case 467: 
   var $1989=$blen;
   var $1990=$buf;
   var $1991=(($1990+$1989)|0);
   var $1992=$prefix;
   var $1993=$plen;
   assert($1993 % 1 === 0);(_memcpy($1991, $1992, $1993)|0);
   var $1994=$plen;
   var $1995=$blen;
   var $1996=((($1995)+($1994))|0);
   $blen=$1996;
   label = 468; break;
  case 468: 
   label = 469; break;
  case 469: 
   label = 470; break;
  case 470: 
   label = 471; break;
  case 471: 
   var $2001=$blen;
   var $2002=$prec;
   var $2003=$len7;
   var $2004=((($2002)-($2003))|0);
   var $2005=((($2001)+($2004))|0);
   var $2006=$bsiz;
   var $2007=(($2005)|(0)) >= (($2006)|(0));
   if ($2007) { label = 472; break; } else { label = 473; break; }
  case 472: 
   var $2009=$bsiz;
   var $2010=($2009<<1);
   $bsiz=$2010;
   label = 471; break;
  case 473: 
   var $2012=$1;
   var $2013=$bsiz;
   _mrb_str_resize($88, $2012, $result, $2013);
   var $2014=(($result)|0);
   var $2015=$2014;
   var $2016=HEAP32[(($2015)>>2)];
   var $2017=$2016;
   var $2018=(($2017+20)|0);
   var $2019=HEAP32[(($2018)>>2)];
   $buf=$2019;
   label = 474; break;
  case 474: 
   var $2021=$dots;
   var $2022=(($2021)|(0))!=0;
   if ($2022) { label = 475; break; } else { label = 483; break; }
  case 475: 
   label = 476; break;
  case 476: 
   label = 477; break;
  case 477: 
   label = 478; break;
  case 478: 
   var $2027=$blen;
   var $2028=((($2027)+(2))|0);
   var $2029=$bsiz;
   var $2030=(($2028)|(0)) >= (($2029)|(0));
   if ($2030) { label = 479; break; } else { label = 480; break; }
  case 479: 
   var $2032=$bsiz;
   var $2033=($2032<<1);
   $bsiz=$2033;
   label = 478; break;
  case 480: 
   var $2035=$1;
   var $2036=$bsiz;
   _mrb_str_resize($89, $2035, $result, $2036);
   var $2037=(($result)|0);
   var $2038=$2037;
   var $2039=HEAP32[(($2038)>>2)];
   var $2040=$2039;
   var $2041=(($2040+20)|0);
   var $2042=HEAP32[(($2041)>>2)];
   $buf=$2042;
   label = 481; break;
  case 481: 
   var $2044=$blen;
   var $2045=$buf;
   var $2046=(($2045+$2044)|0);
   assert(2 % 1 === 0);HEAP8[($2046)]=HEAP8[((((95732)|0))|0)];HEAP8[((($2046)+(1))|0)]=HEAP8[(((((95732)|0))+(1))|0)];
   var $2047=$blen;
   var $2048=((($2047)+(2))|0);
   $blen=$2048;
   label = 482; break;
  case 482: 
   label = 483; break;
  case 483: 
   var $2051=$v;
   var $2052=(($2051)|(0)) < 0;
   if ($2052) { label = 486; break; } else { label = 484; break; }
  case 484: 
   var $2054=$base;
   var $2055=(($2054)|(0))==2;
   if ($2055) { label = 485; break; } else { label = 490; break; }
  case 485: 
   var $2057=$org_v;
   var $2058=(($2057)|(0)) < 0;
   if ($2058) { label = 486; break; } else { label = 490; break; }
  case 486: 
   var $2060=$base;
   var $2061=$p;
   var $2062=_sign_bits($2060, $2061);
   $c12=$2062;
   label = 487; break;
  case 487: 
   var $2064=$len7;
   var $2065=$prec;
   var $2066=((($2065)-(1))|0);
   $prec=$2066;
   var $2067=(($2064)|(0)) < (($2065)|(0));
   if ($2067) { label = 488; break; } else { label = 489; break; }
  case 488: 
   var $2069=$c12;
   var $2070=$blen;
   var $2071=((($2070)+(1))|0);
   $blen=$2071;
   var $2072=$buf;
   var $2073=(($2072+$2070)|0);
   HEAP8[($2073)]=$2069;
   label = 487; break;
  case 489: 
   label = 496; break;
  case 490: 
   var $2076=$flags;
   var $2077=$2076 & 66;
   var $2078=(($2077)|(0))!=2;
   if ($2078) { label = 491; break; } else { label = 495; break; }
  case 491: 
   $c13=48;
   label = 492; break;
  case 492: 
   var $2081=$len7;
   var $2082=$prec;
   var $2083=((($2082)-(1))|0);
   $prec=$2083;
   var $2084=(($2081)|(0)) < (($2082)|(0));
   if ($2084) { label = 493; break; } else { label = 494; break; }
  case 493: 
   var $2086=$c13;
   var $2087=$blen;
   var $2088=((($2087)+(1))|0);
   $blen=$2088;
   var $2089=$buf;
   var $2090=(($2089+$2087)|0);
   HEAP8[($2090)]=$2086;
   label = 492; break;
  case 494: 
   label = 495; break;
  case 495: 
   label = 496; break;
  case 496: 
   label = 497; break;
  case 497: 
   label = 498; break;
  case 498: 
   label = 499; break;
  case 499: 
   var $2097=$blen;
   var $2098=$len7;
   var $2099=((($2097)+($2098))|0);
   var $2100=$bsiz;
   var $2101=(($2099)|(0)) >= (($2100)|(0));
   if ($2101) { label = 500; break; } else { label = 501; break; }
  case 500: 
   var $2103=$bsiz;
   var $2104=($2103<<1);
   $bsiz=$2104;
   label = 499; break;
  case 501: 
   var $2106=$1;
   var $2107=$bsiz;
   _mrb_str_resize($90, $2106, $result, $2107);
   var $2108=(($result)|0);
   var $2109=$2108;
   var $2110=HEAP32[(($2109)>>2)];
   var $2111=$2110;
   var $2112=(($2111+20)|0);
   var $2113=HEAP32[(($2112)>>2)];
   $buf=$2113;
   label = 502; break;
  case 502: 
   var $2115=$blen;
   var $2116=$buf;
   var $2117=(($2116+$2115)|0);
   var $2118=$s;
   var $2119=$len7;
   assert($2119 % 1 === 0);(_memcpy($2117, $2118, $2119)|0);
   var $2120=$len7;
   var $2121=$blen;
   var $2122=((($2121)+($2120))|0);
   $blen=$2122;
   label = 503; break;
  case 503: 
   label = 504; break;
  case 504: 
   label = 505; break;
  case 505: 
   var $2126=$blen;
   var $2127=$width;
   var $2128=((($2126)+($2127))|0);
   var $2129=$bsiz;
   var $2130=(($2128)|(0)) >= (($2129)|(0));
   if ($2130) { label = 506; break; } else { label = 507; break; }
  case 506: 
   var $2132=$bsiz;
   var $2133=($2132<<1);
   $bsiz=$2133;
   label = 505; break;
  case 507: 
   var $2135=$1;
   var $2136=$bsiz;
   _mrb_str_resize($91, $2135, $result, $2136);
   var $2137=(($result)|0);
   var $2138=$2137;
   var $2139=HEAP32[(($2138)>>2)];
   var $2140=$2139;
   var $2141=(($2140+20)|0);
   var $2142=HEAP32[(($2141)>>2)];
   $buf=$2142;
   label = 508; break;
  case 508: 
   label = 509; break;
  case 509: 
   var $2145=$width;
   var $2146=((($2145)-(1))|0);
   $width=$2146;
   var $2147=(($2145)|(0)) > 0;
   if ($2147) { label = 510; break; } else { label = 511; break; }
  case 510: 
   var $2149=$blen;
   var $2150=((($2149)+(1))|0);
   $blen=$2150;
   var $2151=$buf;
   var $2152=(($2151+$2149)|0);
   HEAP8[($2152)]=32;
   label = 509; break;
  case 511: 
   label = 581; break;
  case 512: 
   var $2155=(($nextvalue+8)|0);
   var $2156=HEAP32[(($2155)>>2)];
   var $2157=(($2156)|(0))==5;
   if ($2157) { label = 514; break; } else { label = 513; break; }
  case 513: 
   var $2159=$val14;
   var $2160=$nextvalue;
   assert(12 % 1 === 0);HEAP32[(($2159)>>2)]=HEAP32[(($2160)>>2)];HEAP32[((($2159)+(4))>>2)]=HEAP32[((($2160)+(4))>>2)];HEAP32[((($2159)+(8))>>2)]=HEAP32[((($2160)+(8))>>2)];
   label = 524; break;
  case 514: 
   var $2162=$posarg;
   var $2163=(($2162)|(0))==-1;
   if ($2163) { label = 515; break; } else { label = 516; break; }
  case 515: 
   var $2165=$1;
   var $2166=$1;
   var $2167=_mrb_class_get($2166, ((104864)|0));
   var $2168=$nextarg;
   _mrb_fixnum_value1690($92, $2168);
   _mrb_raisef($2165, $2167, ((100788)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($92)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($92)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($92)+(8))>>2)],tempInt));
   _mrb_undef_value1689($val14);
   label = 523; break;
  case 516: 
   var $2170=$posarg;
   var $2171=(($2170)|(0))==-2;
   if ($2171) { label = 517; break; } else { label = 518; break; }
  case 517: 
   var $2173=$1;
   var $2174=$1;
   var $2175=_mrb_class_get($2174, ((104864)|0));
   var $2176=$nextarg;
   _mrb_fixnum_value1690($93, $2176);
   _mrb_raisef($2173, $2175, ((100484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($93)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($93)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($93)+(8))>>2)],tempInt));
   _mrb_undef_value1689($val14);
   label = 522; break;
  case 518: 
   var $2178=$nextarg;
   var $2179=((($2178)+(1))|0);
   $nextarg=$2179;
   $posarg=$2178;
   var $2180=$posarg;
   var $2181=$2;
   var $2182=(($2180)|(0)) >= (($2181)|(0));
   if ($2182) { label = 519; break; } else { label = 520; break; }
  case 519: 
   var $2184=$1;
   var $2185=$1;
   var $2186=_mrb_class_get($2185, ((104864)|0));
   _mrb_raise($2184, $2186, ((100240)|0));
   _mrb_undef_value1689($val14);
   label = 521; break;
  case 520: 
   var $2188=$posarg;
   var $2189=$3;
   var $2190=(($2189+((($2188)*(12))&-1))|0);
   var $2191=$val14;
   var $2192=$2190;
   assert(12 % 1 === 0);HEAP32[(($2191)>>2)]=HEAP32[(($2192)>>2)];HEAP32[((($2191)+(4))>>2)]=HEAP32[((($2192)+(4))>>2)];HEAP32[((($2191)+(8))>>2)]=HEAP32[((($2192)+(8))>>2)];
   label = 521; break;
  case 521: 
   label = 522; break;
  case 522: 
   label = 523; break;
  case 523: 
   label = 524; break;
  case 524: 
   $need=6;
   var $2197=$1;
   _mrb_Float($94, $2197, $val14);
   var $2198=(($94)|0);
   var $2199=$2198;
   var $2200=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($2199)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($2199)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   $fval=$2200;
   var $2201=$fval;
   var $2202=___fpclassifyf($2201);
   var $2203=(($2202)|(0))==0;
   if ($2203) { label = 526; break; } else { label = 525; break; }
  case 525: 
   var $2205=$fval;
   var $2206=___fpclassifyf($2205);
   var $2207=(($2206)|(0))==1;
   if ($2207) { label = 526; break; } else { label = 564; break; }
  case 526: 
   $elen=3;
   var $2209=$fval;
   var $2210=___fpclassifyf($2209);
   var $2211=(($2210)|(0))==0;
   if ($2211) { label = 527; break; } else { label = 528; break; }
  case 527: 
   $expr=((95520)|0);
   label = 529; break;
  case 528: 
   $expr=((95236)|0);
   label = 529; break;
  case 529: 
   $need=3;
   var $2215=$fval;
   var $2216=___fpclassifyf($2215);
   var $2217=(($2216)|(0))==0;
   if ($2217) { label = 531; break; } else { label = 530; break; }
  case 530: 
   var $2219=$fval;
   var $2220=$2219 < 0;
   if ($2220) { label = 532; break; } else { label = 531; break; }
  case 531: 
   var $2222=$flags;
   var $2223=$2222 & 4;
   var $2224=(($2223)|(0))!=0;
   if ($2224) { label = 532; break; } else { label = 533; break; }
  case 532: 
   var $2226=$need;
   var $2227=((($2226)+(1))|0);
   $need=$2227;
   label = 533; break;
  case 533: 
   var $2229=$flags;
   var $2230=$2229 & 32;
   var $2231=(($2230)|(0))!=0;
   if ($2231) { label = 534; break; } else { label = 536; break; }
  case 534: 
   var $2233=$need;
   var $2234=$width;
   var $2235=(($2233)|(0)) < (($2234)|(0));
   if ($2235) { label = 535; break; } else { label = 536; break; }
  case 535: 
   var $2237=$width;
   $need=$2237;
   label = 536; break;
  case 536: 
   label = 537; break;
  case 537: 
   label = 538; break;
  case 538: 
   var $2241=$blen;
   var $2242=$need;
   var $2243=((($2242)+(1))|0);
   var $2244=((($2241)+($2243))|0);
   var $2245=$bsiz;
   var $2246=(($2244)|(0)) >= (($2245)|(0));
   if ($2246) { label = 539; break; } else { label = 540; break; }
  case 539: 
   var $2248=$bsiz;
   var $2249=($2248<<1);
   $bsiz=$2249;
   label = 538; break;
  case 540: 
   var $2251=$1;
   var $2252=$bsiz;
   _mrb_str_resize($95, $2251, $result, $2252);
   var $2253=(($result)|0);
   var $2254=$2253;
   var $2255=HEAP32[(($2254)>>2)];
   var $2256=$2255;
   var $2257=(($2256+20)|0);
   var $2258=HEAP32[(($2257)>>2)];
   $buf=$2258;
   label = 541; break;
  case 541: 
   var $2260=$blen;
   var $2261=$buf;
   var $2262=(($2261+$2260)|0);
   var $2263=$need;
   var $2264=((($2263)+(1))|0);
   var $2265=$need;
   var $2266=_snprintf($2262, $2264, ((95060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$2265,HEAP32[(((tempInt)+(4))>>2)]=((111148)|0),tempInt));
   var $2267=$flags;
   var $2268=$2267 & 2;
   var $2269=(($2268)|(0))!=0;
   if ($2269) { label = 542; break; } else { label = 552; break; }
  case 542: 
   var $2271=$fval;
   var $2272=___fpclassifyf($2271);
   var $2273=(($2272)|(0))==0;
   if ($2273) { label = 545; break; } else { label = 543; break; }
  case 543: 
   var $2275=$fval;
   var $2276=$2275 < 0;
   if ($2276) { label = 544; break; } else { label = 545; break; }
  case 544: 
   var $2278=$blen;
   var $2279=((($2278)+(1))|0);
   $blen=$2279;
   var $2280=$buf;
   var $2281=(($2280+$2278)|0);
   HEAP8[($2281)]=45;
   label = 551; break;
  case 545: 
   var $2283=$flags;
   var $2284=$2283 & 4;
   var $2285=(($2284)|(0))!=0;
   if ($2285) { label = 546; break; } else { label = 547; break; }
  case 546: 
   var $2287=$blen;
   var $2288=((($2287)+(1))|0);
   $blen=$2288;
   var $2289=$buf;
   var $2290=(($2289+$2287)|0);
   HEAP8[($2290)]=43;
   label = 550; break;
  case 547: 
   var $2292=$flags;
   var $2293=$2292 & 16;
   var $2294=(($2293)|(0))!=0;
   if ($2294) { label = 548; break; } else { label = 549; break; }
  case 548: 
   var $2296=$blen;
   var $2297=((($2296)+(1))|0);
   $blen=$2297;
   label = 549; break;
  case 549: 
   label = 550; break;
  case 550: 
   label = 551; break;
  case 551: 
   var $2301=$blen;
   var $2302=$buf;
   var $2303=(($2302+$2301)|0);
   var $2304=$expr;
   assert(3 % 1 === 0);HEAP8[($2303)]=HEAP8[($2304)];HEAP8[((($2303)+(1))|0)]=HEAP8[((($2304)+(1))|0)];HEAP8[((($2303)+(2))|0)]=HEAP8[((($2304)+(2))|0)];
   label = 563; break;
  case 552: 
   var $2306=$fval;
   var $2307=___fpclassifyf($2306);
   var $2308=(($2307)|(0))==0;
   if ($2308) { label = 555; break; } else { label = 553; break; }
  case 553: 
   var $2310=$fval;
   var $2311=$2310 < 0;
   if ($2311) { label = 554; break; } else { label = 555; break; }
  case 554: 
   var $2313=$blen;
   var $2314=$need;
   var $2315=((($2313)+($2314))|0);
   var $2316=((($2315)-(3))|0);
   var $2317=((($2316)-(1))|0);
   var $2318=$buf;
   var $2319=(($2318+$2317)|0);
   HEAP8[($2319)]=45;
   label = 562; break;
  case 555: 
   var $2321=$flags;
   var $2322=$2321 & 4;
   var $2323=(($2322)|(0))!=0;
   if ($2323) { label = 556; break; } else { label = 557; break; }
  case 556: 
   var $2325=$blen;
   var $2326=$need;
   var $2327=((($2325)+($2326))|0);
   var $2328=((($2327)-(3))|0);
   var $2329=((($2328)-(1))|0);
   var $2330=$buf;
   var $2331=(($2330+$2329)|0);
   HEAP8[($2331)]=43;
   label = 561; break;
  case 557: 
   var $2333=$flags;
   var $2334=$2333 & 16;
   var $2335=(($2334)|(0))!=0;
   if ($2335) { label = 558; break; } else { label = 560; break; }
  case 558: 
   var $2337=$need;
   var $2338=$width;
   var $2339=(($2337)|(0)) > (($2338)|(0));
   if ($2339) { label = 559; break; } else { label = 560; break; }
  case 559: 
   var $2341=$blen;
   var $2342=((($2341)+(1))|0);
   $blen=$2342;
   label = 560; break;
  case 560: 
   label = 561; break;
  case 561: 
   label = 562; break;
  case 562: 
   var $2346=$blen;
   var $2347=$need;
   var $2348=((($2346)+($2347))|0);
   var $2349=((($2348)-(3))|0);
   var $2350=$buf;
   var $2351=(($2350+$2349)|0);
   var $2352=$expr;
   assert(3 % 1 === 0);HEAP8[($2351)]=HEAP8[($2352)];HEAP8[((($2351)+(1))|0)]=HEAP8[((($2352)+(1))|0)];HEAP8[((($2351)+(2))|0)]=HEAP8[((($2352)+(2))|0)];
   label = 563; break;
  case 563: 
   var $2354=$blen;
   var $2355=$buf;
   var $2356=(($2355+$2354)|0);
   var $2357=_strlen($2356);
   var $2358=$blen;
   var $2359=((($2358)+($2357))|0);
   $blen=$2359;
   label = 581; break;
  case 564: 
   var $2361=(($fbuf15)|0);
   var $2362=$p;
   var $2363=HEAP8[($2362)];
   var $2364=(($2363 << 24) >> 24);
   var $2365=$flags;
   var $2366=$width;
   var $2367=$prec;
   _fmt_setup($2361, 32, $2364, $2365, $2366, $2367);
   $need=0;
   var $2368=$p;
   var $2369=HEAP8[($2368)];
   var $2370=(($2369 << 24) >> 24);
   var $2371=(($2370)|(0))!=101;
   if ($2371) { label = 565; break; } else { label = 569; break; }
  case 565: 
   var $2373=$p;
   var $2374=HEAP8[($2373)];
   var $2375=(($2374 << 24) >> 24);
   var $2376=(($2375)|(0))!=69;
   if ($2376) { label = 566; break; } else { label = 569; break; }
  case 566: 
   HEAP32[(($i)>>2)]=-2147483648;
   var $2378=$fval;
   var $2379=_frexp($2378, $i);
   var $2380=HEAP32[(($i)>>2)];
   var $2381=(($2380)|(0)) > 0;
   if ($2381) { label = 567; break; } else { label = 568; break; }
  case 567: 
   var $2383=HEAP32[(($i)>>2)];
   var $2384=((($2383)*(146))&-1);
   var $2385=((((($2384)|(0)))/(485))&-1);
   var $2386=((($2385)+(1))|0);
   $need=$2386;
   label = 568; break;
  case 568: 
   label = 569; break;
  case 569: 
   var $2389=$flags;
   var $2390=$2389 & 64;
   var $2391=(($2390)|(0))!=0;
   if ($2391) { label = 570; break; } else { label = 571; break; }
  case 570: 
   var $2393=$prec;
   var $2396 = $2393;label = 572; break;
  case 571: 
   var $2396 = 6;label = 572; break;
  case 572: 
   var $2396;
   var $2397=$need;
   var $2398=((($2397)+($2396))|0);
   $need=$2398;
   var $2399=$flags;
   var $2400=$2399 & 32;
   var $2401=(($2400)|(0))!=0;
   if ($2401) { label = 573; break; } else { label = 575; break; }
  case 573: 
   var $2403=$need;
   var $2404=$width;
   var $2405=(($2403)|(0)) < (($2404)|(0));
   if ($2405) { label = 574; break; } else { label = 575; break; }
  case 574: 
   var $2407=$width;
   $need=$2407;
   label = 575; break;
  case 575: 
   var $2409=$need;
   var $2410=((($2409)+(20))|0);
   $need=$2410;
   label = 576; break;
  case 576: 
   label = 577; break;
  case 577: 
   var $2413=$blen;
   var $2414=$need;
   var $2415=((($2413)+($2414))|0);
   var $2416=$bsiz;
   var $2417=(($2415)|(0)) >= (($2416)|(0));
   if ($2417) { label = 578; break; } else { label = 579; break; }
  case 578: 
   var $2419=$bsiz;
   var $2420=($2419<<1);
   $bsiz=$2420;
   label = 577; break;
  case 579: 
   var $2422=$1;
   var $2423=$bsiz;
   _mrb_str_resize($96, $2422, $result, $2423);
   var $2424=(($result)|0);
   var $2425=$2424;
   var $2426=HEAP32[(($2425)>>2)];
   var $2427=$2426;
   var $2428=(($2427+20)|0);
   var $2429=HEAP32[(($2428)>>2)];
   $buf=$2429;
   label = 580; break;
  case 580: 
   var $2431=$blen;
   var $2432=$buf;
   var $2433=(($2432+$2431)|0);
   var $2434=$need;
   var $2435=(($fbuf15)|0);
   var $2436=$fval;
   var $2437=_snprintf($2433, $2434, $2435, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),(HEAPF64[(tempDoublePtr)>>3]=$2436,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
   $n=$2437;
   var $2438=$n;
   var $2439=$blen;
   var $2440=((($2439)+($2438))|0);
   $blen=$2440;
   label = 581; break;
  case 581: 
   $flags=0;
   label = 582; break;
  case 582: 
   var $2443=$p;
   var $2444=(($2443+1)|0);
   $p=$2444;
   label = 2; break;
  case 583: 
   label = 584; break;
  case 584: 
   var $2447=$1;
   var $2448=$blen;
   _mrb_str_resize($97, $2447, $result, $2448);
   var $2449=$agg_result;
   var $2450=$result;
   assert(12 % 1 === 0);HEAP32[(($2449)>>2)]=HEAP32[(($2450)>>2)];HEAP32[((($2449)+(4))>>2)]=HEAP32[((($2450)+(4))>>2)];HEAP32[((($2449)+(8))>>2)]=HEAP32[((($2450)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _sign_bits($base, $p) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $c;
   $1=$base;
   $2=$p;
   var $3=$1;
   if ((($3)|(0))==16) {
    label = 2; break;
   }
   else if ((($3)|(0))==8) {
    label = 6; break;
   }
   else if ((($3)|(0))==2) {
    label = 7; break;
   }
   else {
   label = 8; break;
   }
  case 2: 
   var $5=$2;
   var $6=HEAP8[($5)];
   var $7=(($6 << 24) >> 24);
   var $8=(($7)|(0))==88;
   if ($8) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $c=70;
   label = 5; break;
  case 4: 
   $c=102;
   label = 5; break;
  case 5: 
   label = 9; break;
  case 6: 
   $c=55;
   label = 9; break;
  case 7: 
   $c=49;
   label = 9; break;
  case 8: 
   $c=46;
   label = 9; break;
  case 9: 
   var $16=$c;
   return $16;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_undef_value1689($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=5;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_value1690($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _get_hash($agg_result, $mrb, $hash, $argc, $argv) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $tmp=sp;
   var $5=(sp)+(12);
   $1=$mrb;
   $2=$hash;
   $3=$argc;
   $4=$argv;
   var $6=$2;
   var $7=(($6+8)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))==5;
   if ($9) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $11=$2;
   var $12=$agg_result;
   var $13=$11;
   assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
   label = 9; break;
  case 3: 
   var $15=$3;
   var $16=(($15)|(0))!=2;
   if ($16) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $18=$1;
   var $19=$1;
   var $20=_mrb_class_get($19, ((104864)|0));
   _mrb_raise($18, $20, ((93572)|0));
   label = 5; break;
  case 5: 
   var $22=$1;
   var $23=$4;
   var $24=(($23+12)|0);
   _mrb_check_convert_type($5, $22, $24, 15, ((93296)|0), ((93064)|0));
   var $25=$tmp;
   var $26=$5;
   assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
   var $27=(($tmp+8)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|(0))==0;
   if ($29) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $31=(($tmp)|0);
   var $32=$31;
   var $33=HEAP32[(($32)>>2)];
   var $34=(($33)|(0))!=0;
   if ($34) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $36=$1;
   var $37=$1;
   var $38=_mrb_class_get($37, ((104864)|0));
   _mrb_raise($36, $38, ((93572)|0));
   label = 8; break;
  case 8: 
   var $40=$2;
   var $41=$40;
   var $42=$tmp;
   assert(12 % 1 === 0);HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];HEAP32[((($41)+(8))>>2)]=HEAP32[((($42)+(8))>>2)];
   var $43=$agg_result;
   var $44=$40;
   assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
   label = 9; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_symbol_value1691($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=4;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP16[(($6)>>1)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fix2binstr($agg_result, $mrb, $x, $base) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 76)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $buf=sp;
   var $b;
   var $num;
   var $val;
   var $d;
   var $3=(sp)+(64);
   $1=$mrb;
   $2=$base;
   var $4=(($buf)|0);
   var $5=(($4+64)|0);
   $b=$5;
   var $6=(($x)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   $num=$8;
   var $9=$num;
   $val=$9;
   var $10=$2;
   var $11=(($10)|(0))!=2;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$1;
   var $14=$1;
   var $15=_mrb_class_get($14, ((104864)|0));
   var $16=$2;
   _mrb_fixnum_value1690($3, $16);
   _mrb_raisef($13, $15, ((93864)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
   label = 3; break;
  case 3: 
   var $18=$val;
   var $19=(($18)>>>(0)) >= 1024;
   if ($19) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=$val;
   var $22=$21 & 1023;
   $val=$22;
   label = 5; break;
  case 5: 
   var $24=$val;
   var $25=(($24)|(0))==0;
   if ($25) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $27=$1;
   _mrb_str_new($agg_result, $27, ((97444)|0), 1);
   label = 21; break;
  case 7: 
   var $29=$b;
   var $30=((($29)-(1))|0);
   $b=$30;
   HEAP8[($30)]=0;
   label = 8; break;
  case 8: 
   var $32=$val;
   var $33=$2;
   var $34=((((($32)>>>(0)))%((($33)>>>(0))))&-1);
   var $35=((75064+$34)|0);
   var $36=HEAP8[($35)];
   var $37=$b;
   var $38=((($37)-(1))|0);
   $b=$38;
   HEAP8[($38)]=$36;
   label = 9; break;
  case 9: 
   var $40=$2;
   var $41=$val;
   var $42=((((($41)>>>(0)))/((($40)>>>(0))))&-1);
   $val=$42;
   var $43=(($42)|(0))!=0;
   if ($43) { label = 8; break; } else { label = 10; break; }
  case 10: 
   var $45=$num;
   var $46=(($45)|(0)) < 0;
   if ($46) { label = 11; break; } else { label = 20; break; }
  case 11: 
   var $48=$b;
   var $49=$2;
   var $50=_remove_sign_bits($48, $49);
   $b=$50;
   var $51=$2;
   if ((($51)|(0))==16) {
    label = 12; break;
   }
   else if ((($51)|(0))==8) {
    label = 13; break;
   }
   else if ((($51)|(0))==2) {
    label = 14; break;
   }
   else {
   label = 15; break;
   }
  case 12: 
   $d=102;
   label = 16; break;
  case 13: 
   $d=55;
   label = 16; break;
  case 14: 
   $d=49;
   label = 16; break;
  case 15: 
   $d=0;
   label = 16; break;
  case 16: 
   var $57=$d;
   var $58=(($57 << 24) >> 24);
   var $59=(($58)|(0))!=0;
   if ($59) { label = 17; break; } else { label = 19; break; }
  case 17: 
   var $61=$b;
   var $62=HEAP8[($61)];
   var $63=(($62 << 24) >> 24);
   var $64=$d;
   var $65=(($64 << 24) >> 24);
   var $66=(($63)|(0))!=(($65)|(0));
   if ($66) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $68=$d;
   var $69=$b;
   var $70=((($69)-(1))|0);
   $b=$70;
   HEAP8[($70)]=$68;
   label = 19; break;
  case 19: 
   label = 20; break;
  case 20: 
   var $73=$1;
   var $74=$b;
   _mrb_str_new_cstr($agg_result, $73, $74);
   label = 21; break;
  case 21: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _remove_sign_bits($str, $base) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $t;
   $1=$str;
   $2=$base;
   var $3=$1;
   $t=$3;
   var $4=$2;
   var $5=(($4)|(0))==16;
   if ($5) { label = 2; break; } else { label = 6; break; }
  case 2: 
   label = 3; break;
  case 3: 
   var $8=$t;
   var $9=HEAP8[($8)];
   var $10=(($9 << 24) >> 24);
   var $11=(($10)|(0))==102;
   if ($11) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $13=$t;
   var $14=(($13+1)|0);
   $t=$14;
   label = 3; break;
  case 5: 
   label = 18; break;
  case 6: 
   var $17=$2;
   var $18=(($17)|(0))==8;
   if ($18) { label = 7; break; } else { label = 11; break; }
  case 7: 
   var $20=$t;
   var $21=_strlen($20);
   var $22=((($21)*(3))&-1);
   var $23=((((($22)>>>(0)))%(32))&-1);
   var $24=-8 >> (($23)|(0));
   var $25=$24 & 7;
   var $26=$t;
   var $27=HEAP8[($26)];
   var $28=(($27 << 24) >> 24);
   var $29=$28 | $25;
   var $30=(($29) & 255);
   HEAP8[($26)]=$30;
   label = 8; break;
  case 8: 
   var $32=$t;
   var $33=HEAP8[($32)];
   var $34=(($33 << 24) >> 24);
   var $35=(($34)|(0))==55;
   if ($35) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $37=$t;
   var $38=(($37+1)|0);
   $t=$38;
   label = 8; break;
  case 10: 
   label = 17; break;
  case 11: 
   var $41=$2;
   var $42=(($41)|(0))==2;
   if ($42) { label = 12; break; } else { label = 16; break; }
  case 12: 
   label = 13; break;
  case 13: 
   var $45=$t;
   var $46=HEAP8[($45)];
   var $47=(($46 << 24) >> 24);
   var $48=(($47)|(0))==49;
   if ($48) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $50=$t;
   var $51=(($50+1)|0);
   $t=$51;
   label = 13; break;
  case 15: 
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $56=$t;
   return $56;
  default: assert(0, "bad label: " + label);
 }
}
function _fmt_setup($buf, $size, $c, $flags, $width, $prec) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $end;
   var $n;
   $1=$buf;
   $2=$size;
   $3=$c;
   $4=$flags;
   $5=$width;
   $6=$prec;
   var $7=$1;
   var $8=$2;
   var $9=(($7+$8)|0);
   $end=$9;
   var $10=$1;
   var $11=(($10+1)|0);
   $1=$11;
   HEAP8[($10)]=37;
   var $12=$4;
   var $13=$12 & 1;
   var $14=(($13)|(0))!=0;
   if ($14) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $16=$1;
   var $17=(($16+1)|0);
   $1=$17;
   HEAP8[($16)]=35;
   label = 3; break;
  case 3: 
   var $19=$4;
   var $20=$19 & 4;
   var $21=(($20)|(0))!=0;
   if ($21) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $23=$1;
   var $24=(($23+1)|0);
   $1=$24;
   HEAP8[($23)]=43;
   label = 5; break;
  case 5: 
   var $26=$4;
   var $27=$26 & 2;
   var $28=(($27)|(0))!=0;
   if ($28) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $30=$1;
   var $31=(($30+1)|0);
   $1=$31;
   HEAP8[($30)]=45;
   label = 7; break;
  case 7: 
   var $33=$4;
   var $34=$33 & 8;
   var $35=(($34)|(0))!=0;
   if ($35) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $37=$1;
   var $38=(($37+1)|0);
   $1=$38;
   HEAP8[($37)]=48;
   label = 9; break;
  case 9: 
   var $40=$4;
   var $41=$40 & 16;
   var $42=(($41)|(0))!=0;
   if ($42) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $44=$1;
   var $45=(($44+1)|0);
   $1=$45;
   HEAP8[($44)]=32;
   label = 11; break;
  case 11: 
   var $47=$4;
   var $48=$47 & 32;
   var $49=(($48)|(0))!=0;
   if ($49) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $51=$1;
   var $52=$end;
   var $53=$1;
   var $54=$52;
   var $55=$53;
   var $56=((($54)-($55))|0);
   var $57=$5;
   var $58=_snprintf($51, $56, ((94492)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$57,tempInt));
   $n=$58;
   var $59=$n;
   var $60=$1;
   var $61=(($60+$59)|0);
   $1=$61;
   label = 13; break;
  case 13: 
   var $63=$4;
   var $64=$63 & 64;
   var $65=(($64)|(0))!=0;
   if ($65) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $67=$1;
   var $68=$end;
   var $69=$1;
   var $70=$68;
   var $71=$69;
   var $72=((($70)-($71))|0);
   var $73=$6;
   var $74=_snprintf($67, $72, ((94256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$73,tempInt));
   $n=$74;
   var $75=$n;
   var $76=$1;
   var $77=(($76+$75)|0);
   $1=$77;
   label = 15; break;
  case 15: 
   var $79=$3;
   var $80=(($79) & 255);
   var $81=$1;
   var $82=(($81+1)|0);
   $1=$82;
   HEAP8[($81)]=$80;
   var $83=$1;
   HEAP8[($83)]=0;
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _GENERATED_TMP_mrb_mruby_string_ext_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_mruby_string_ext_gem_final($2);
 return;
}
function _mrb_mruby_string_ext_gem_init($mrb) {
 var label = 0;
 var $1;
 var $s;
 $1=$mrb;
 var $2=$1;
 var $3=(($2+60)|0);
 var $4=HEAP32[(($3)>>2)];
 $s=$4;
 var $5=$1;
 var $6=$s;
 _mrb_define_method($5, $6, ((102348)|0), 574, 0);
 var $7=$1;
 var $8=$s;
 _mrb_define_method($7, $8, ((104820)|0), 520, 262144);
 var $9=$1;
 var $10=$s;
 _mrb_define_method($9, $10, ((100204)|0), 582, 0);
 var $11=$1;
 var $12=$s;
 _mrb_define_method($11, $12, ((96524)|0), 260, 0);
 var $13=$1;
 var $14=$s;
 _mrb_define_method($13, $14, ((94012)|0), 128, 262144);
 var $15=$1;
 var $16=$s;
 _mrb_define_method($15, $16, ((91472)|0), 128, 262144);
 var $17=$1;
 var $18=$s;
 _mrb_define_method($17, $18, ((89376)|0), 246, 4096);
 var $19=$1;
 var $20=$s;
 _mrb_define_method($19, $20, ((88180)|0), 688, 4096);
 return;
}
function _mrb_str_getbyte($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $pos=sp;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((105812)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$pos,tempInt));
   var $4=HEAP32[(($pos)>>2)];
   var $5=(($4)|(0)) < 0;
   if ($5) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $7=(($str)|0);
   var $8=$7;
   var $9=HEAP32[(($8)>>2)];
   var $10=$9;
   var $11=(($10+12)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=HEAP32[(($pos)>>2)];
   var $14=((($13)+($12))|0);
   HEAP32[(($pos)>>2)]=$14;
   label = 3; break;
  case 3: 
   var $16=HEAP32[(($pos)>>2)];
   var $17=(($16)|(0)) < 0;
   if ($17) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $19=(($str)|0);
   var $20=$19;
   var $21=HEAP32[(($20)>>2)];
   var $22=$21;
   var $23=(($22+12)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=HEAP32[(($pos)>>2)];
   var $26=(($24)|(0)) <= (($25)|(0));
   if ($26) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _mrb_nil_value1713($agg_result);
   label = 7; break;
  case 6: 
   var $29=HEAP32[(($pos)>>2)];
   var $30=(($str)|0);
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=$32;
   var $34=(($33+20)|0);
   var $35=HEAP32[(($34)>>2)];
   var $36=(($35+$29)|0);
   var $37=HEAP8[($36)];
   var $38=(($37)&(255));
   _mrb_fixnum_value1714($agg_result, $38);
   label = 7; break;
  case 7: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_swapcase_bang($agg_result, $mrb, $str) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $p;
   var $pend;
   var $modify;
   var $s;
   $1=$mrb;
   $modify=0;
   var $2=(($str)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   $s=$5;
   var $6=$1;
   var $7=$s;
   _mrb_str_modify($6, $7);
   var $8=$s;
   var $9=(($8+20)|0);
   var $10=HEAP32[(($9)>>2)];
   $p=$10;
   var $11=$s;
   var $12=(($11+20)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=$s;
   var $15=(($14+12)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($13+$16)|0);
   $pend=$17;
   label = 2; break;
  case 2: 
   var $19=$p;
   var $20=$pend;
   var $21=(($19)>>>(0)) < (($20)>>>(0));
   if ($21) { label = 3; break; } else { label = 9; break; }
  case 3: 
   var $23=$p;
   var $24=HEAP8[($23)];
   var $25=(($24)&(255));
   var $26=_isupper($25);
   var $27=(($26)|(0))!=0;
   if ($27) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $29=$p;
   var $30=HEAP8[($29)];
   var $31=(($30)&(255));
   var $32=_tolower($31);
   var $33=(($32) & 255);
   var $34=$p;
   HEAP8[($34)]=$33;
   $modify=1;
   label = 8; break;
  case 5: 
   var $36=$p;
   var $37=HEAP8[($36)];
   var $38=(($37)&(255));
   var $39=_islower($38);
   var $40=(($39)|(0))!=0;
   if ($40) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $42=$p;
   var $43=HEAP8[($42)];
   var $44=(($43)&(255));
   var $45=_toupper($44);
   var $46=(($45) & 255);
   var $47=$p;
   HEAP8[($47)]=$46;
   $modify=1;
   label = 7; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $50=$p;
   var $51=(($50+1)|0);
   $p=$51;
   label = 2; break;
  case 9: 
   var $53=$modify;
   var $54=(($53)|(0))!=0;
   if ($54) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $56=$agg_result;
   var $57=$str;
   assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($57)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($57)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($57)+(8))>>2)];
   label = 12; break;
  case 11: 
   _mrb_nil_value1713($agg_result);
   label = 12; break;
  case 12: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_swapcase($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $str=sp;
 var $2=(sp)+(12);
 var $3=(sp)+(24);
 $1=$mrb;
 var $4=$1;
 _mrb_str_dup($2, $4, $self);
 var $5=$str;
 var $6=$2;
 assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 var $7=$1;
 _mrb_str_swapcase_bang($3, $7, $str);
 var $8=$agg_result;
 var $9=$str;
 assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_str_concat2($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $str=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((86448)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$str,tempInt));
 var $4=$1;
 _mrb_str_concat($4, $self, $str);
 var $5=$agg_result;
 var $6=$self;
 assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_str_start_with($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $argv=sp;
   var $argc=(sp)+(4);
   var $i;
   var $len_l;
   var $len_r;
   var $len_cmp;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((87252)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
   $i=0;
   label = 2; break;
  case 2: 
   var $5=$i;
   var $6=HEAP32[(($argc)>>2)];
   var $7=(($5)|(0)) < (($6)|(0));
   if ($7) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $9=(($self)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=$11;
   var $13=(($12+12)|0);
   var $14=HEAP32[(($13)>>2)];
   $len_l=$14;
   var $15=$i;
   var $16=HEAP32[(($argv)>>2)];
   var $17=(($16+((($15)*(12))&-1))|0);
   var $18=(($17)|0);
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $21=$20;
   var $22=(($21+12)|0);
   var $23=HEAP32[(($22)>>2)];
   $len_r=$23;
   var $24=$len_l;
   var $25=$len_r;
   var $26=(($24)>>>(0)) > (($25)>>>(0));
   if ($26) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $28=$len_r;
   var $32 = $28;label = 6; break;
  case 5: 
   var $30=$len_l;
   var $32 = $30;label = 6; break;
  case 6: 
   var $32;
   $len_cmp=$32;
   var $33=(($self)|0);
   var $34=$33;
   var $35=HEAP32[(($34)>>2)];
   var $36=$35;
   var $37=(($36+20)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=$i;
   var $40=HEAP32[(($argv)>>2)];
   var $41=(($40+((($39)*(12))&-1))|0);
   var $42=(($41)|0);
   var $43=$42;
   var $44=HEAP32[(($43)>>2)];
   var $45=$44;
   var $46=(($45+20)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$len_cmp;
   var $49=_memcmp($38, $47, $48);
   var $50=(($49)|(0))==0;
   if ($50) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _mrb_true_value1711($agg_result);
   label = 11; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $54=$i;
   var $55=((($54)+(1))|0);
   $i=$55;
   label = 2; break;
  case 10: 
   _mrb_false_value1712($agg_result);
   label = 11; break;
  case 11: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _GENERATED_TMP_mrb_mruby_string_ext_gem_init($mrb) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ai;
   var $2=sp;
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_gc_arena_save($3);
   $ai=$4;
   var $5=$1;
   _mrb_mruby_string_ext_gem_init($5);
   var $6=$1;
   _mrb_load_irep($2, $6, ((77120)|0));
   var $7=$1;
   var $8=(($7+16)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$1;
   _mrb_print_error($12);
   _exit(1);
   throw "Reached an unreachable!";
  case 3: 
   var $14=$1;
   var $15=$ai;
   _mrb_gc_arena_restore($14, $15);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mruby_string_ext_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _mrb_is_local_id($id) {
 var label = 0;
 var $1;
 $1=$id;
 var $2=$1;
 var $3=(($2 << 16) >> 16);
 return $3;
}
function _mrb_is_const_id($id) {
 var label = 0;
 var $1;
 $1=$id;
 var $2=$1;
 var $3=(($2 << 16) >> 16);
 return $3;
}
function _mrb_str_end_with($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $argv=sp;
   var $argc=(sp)+(4);
   var $i;
   var $len_l;
   var $len_r;
   var $len_cmp;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((87252)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
   $i=0;
   label = 2; break;
  case 2: 
   var $5=$i;
   var $6=HEAP32[(($argc)>>2)];
   var $7=(($5)|(0)) < (($6)|(0));
   if ($7) { label = 3; break; } else { label = 10; break; }
  case 3: 
   var $9=(($self)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=$11;
   var $13=(($12+12)|0);
   var $14=HEAP32[(($13)>>2)];
   $len_l=$14;
   var $15=$i;
   var $16=HEAP32[(($argv)>>2)];
   var $17=(($16+((($15)*(12))&-1))|0);
   var $18=(($17)|0);
   var $19=$18;
   var $20=HEAP32[(($19)>>2)];
   var $21=$20;
   var $22=(($21+12)|0);
   var $23=HEAP32[(($22)>>2)];
   $len_r=$23;
   var $24=$len_l;
   var $25=$len_r;
   var $26=(($24)>>>(0)) > (($25)>>>(0));
   if ($26) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $28=$len_r;
   var $32 = $28;label = 6; break;
  case 5: 
   var $30=$len_l;
   var $32 = $30;label = 6; break;
  case 6: 
   var $32;
   $len_cmp=$32;
   var $33=(($self)|0);
   var $34=$33;
   var $35=HEAP32[(($34)>>2)];
   var $36=$35;
   var $37=(($36+20)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=$len_l;
   var $40=$len_cmp;
   var $41=((($39)-($40))|0);
   var $42=(($38+$41)|0);
   var $43=$i;
   var $44=HEAP32[(($argv)>>2)];
   var $45=(($44+((($43)*(12))&-1))|0);
   var $46=(($45)|0);
   var $47=$46;
   var $48=HEAP32[(($47)>>2)];
   var $49=$48;
   var $50=(($49+20)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$len_r;
   var $53=$len_cmp;
   var $54=((($52)-($53))|0);
   var $55=(($51+$54)|0);
   var $56=$len_cmp;
   var $57=_memcmp($42, $55, $56);
   var $58=(($57)|(0))==0;
   if ($58) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _mrb_true_value1711($agg_result);
   label = 11; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $62=$i;
   var $63=((($62)+(1))|0);
   $i=$63;
   label = 2; break;
  case 10: 
   _mrb_false_value1712($agg_result);
   label = 11; break;
  case 11: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_true_value1711($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=2;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=1;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_false_value1712($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=1;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value1713($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_value1714($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _GENERATED_TMP_mrb_mruby_struct_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_mruby_struct_gem_final($2);
 return;
}
function _struct_ivar_get($agg_result, $mrb, $c, $id) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $c; $c = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($c)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($c)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($c)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $kclass;
   var $sclass;
   var $ans=sp;
   var $3=(sp)+(12);
   var $4=(sp)+(24);
   $1=$mrb;
   $2=$id;
   var $5=$1;
   var $6=_struct_class($5);
   $sclass=$6;
   label = 2; break;
  case 2: 
   var $8=$1;
   var $9=$2;
   _mrb_iv_get($3, $8, $c, $9);
   var $10=$ans;
   var $11=$3;
   assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
   var $12=(($ans+8)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))==0;
   if ($14) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $16=(($ans)|0);
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   var $19=(($18)|(0))!=0;
   if ($19) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $21=$agg_result;
   var $22=$ans;
   assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
   label = 9; break;
  case 5: 
   var $24=(($c)|0);
   var $25=$24;
   var $26=HEAP32[(($25)>>2)];
   var $27=$26;
   var $28=(($27+20)|0);
   var $29=HEAP32[(($28)>>2)];
   $kclass=$29;
   var $30=$kclass;
   var $31=(($30)|(0))==0;
   if ($31) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $33=$kclass;
   var $34=$sclass;
   var $35=(($33)|(0))==(($34)|(0));
   if ($35) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _mrb_nil_value1763($agg_result);
   label = 9; break;
  case 8: 
   var $38=$kclass;
   var $39=$38;
   _mrb_obj_value1760($4, $39);
   var $40=$c;
   var $41=$4;
   assert(12 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];HEAP32[((($40)+(8))>>2)]=HEAP32[((($41)+(8))>>2)];
   label = 2; break;
  case 9: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_struct_s_members($agg_result, $mrb, $klass) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $klass; $klass = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($klass)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($klass)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($klass)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $members=sp;
   $1=$mrb;
   var $2=$1;
   var $3=$1;
   var $4=_mrb_intern2($3, ((102164)|0), 11);
   _struct_ivar_get($members, $2, $klass, $4);
   var $5=(($members+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==0;
   if ($7) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $9=(($members)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))!=0;
   if ($12) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $14=$1;
   var $15=$1;
   var $16=_mrb_class_get($15, ((104792)|0));
   _mrb_raise($14, $16, ((100172)|0));
   label = 4; break;
  case 4: 
   var $18=(($members+8)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=(($19)|(0))==14;
   if ($20) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $22=$1;
   var $23=$1;
   var $24=_mrb_class_get($23, ((104792)|0));
   _mrb_raise($22, $24, ((96496)|0));
   label = 6; break;
  case 6: 
   var $26=$agg_result;
   var $27=$members;
   assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_struct_members($agg_result, $mrb, $s) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $members=sp;
   var $2=(sp)+(12);
   var $3=(sp)+(24);
   var $4=(sp)+(36);
   $1=$mrb;
   var $5=$1;
   var $6=$1;
   var $7=_mrb_obj_class($6, $s);
   var $8=$7;
   _mrb_obj_value1760($2, $8);
   _mrb_struct_s_members($members, $5, $2);
   var $9=$1;
   var $10=$1;
   var $11=_mrb_obj_class($10, $s);
   var $12=_mrb_class_name($9, $11);
   var $13=_strcmp($12, ((94000)|0));
   var $14=(($13)|(0))!=0;
   if ($14) { label = 5; break; } else { label = 2; break; }
  case 2: 
   var $16=(($s)|0);
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   var $19=$18;
   var $20=(($19+12)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($members)|0);
   var $23=$22;
   var $24=HEAP32[(($23)>>2)];
   var $25=$24;
   var $26=(($25+12)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($21)|(0))!=(($27)|(0));
   if ($28) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $30=$1;
   var $31=$1;
   var $32=_mrb_class_get($31, ((104792)|0));
   var $33=(($members)|0);
   var $34=$33;
   var $35=HEAP32[(($34)>>2)];
   var $36=$35;
   var $37=(($36+12)|0);
   var $38=HEAP32[(($37)>>2)];
   _mrb_fixnum_value1761($3, $38);
   var $39=(($s)|0);
   var $40=$39;
   var $41=HEAP32[(($40)>>2)];
   var $42=$41;
   var $43=(($42+12)|0);
   var $44=HEAP32[(($43)>>2)];
   _mrb_fixnum_value1761($4, $44);
   _mrb_raisef($30, $32, ((91416)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($4)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($4)+(8))>>2)],tempInt));
   label = 4; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $47=$agg_result;
   var $48=$members;
   assert(12 % 1 === 0);HEAP32[(($47)>>2)]=HEAP32[(($48)>>2)];HEAP32[((($47)+(4))>>2)]=HEAP32[((($48)+(4))>>2)];HEAP32[((($47)+(8))>>2)]=HEAP32[((($48)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_value1760($agg_result, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   var $b;
   $1=$p;
   var $2=$1;
   var $3=$2;
   $b=$3;
   label = 2; break;
  case 2: 
   var $5=$b;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 255;
   var $9=(($v+8)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=$1;
   var $11=(($v)|0);
   var $12=$11;
   HEAP32[(($12)>>2)]=$10;
   label = 3; break;
  case 3: 
   var $14=$agg_result;
   var $15=$v;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_value1761($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_struct_getmember($agg_result, $mrb, $obj, $id) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $members=sp;
   var $slot=(sp)+(12);
   var $ptr;
   var $ptr_members;
   var $i;
   var $len;
   var $3=(sp)+(24);
   var $4=(sp)+(36);
   var $5=(sp)+(48);
   $1=$mrb;
   $2=$id;
   var $6=(($obj)|0);
   var $7=$6;
   var $8=HEAP32[(($7)>>2)];
   var $9=$8;
   var $10=(($9+20)|0);
   var $11=HEAP32[(($10)>>2)];
   $ptr=$11;
   var $12=$1;
   _mrb_struct_members($3, $12, $obj);
   var $13=$members;
   var $14=$3;
   assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
   var $15=(($members)|0);
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $18=$17;
   var $19=(($18+20)|0);
   var $20=HEAP32[(($19)>>2)];
   $ptr_members=$20;
   var $21=$2;
   _mrb_symbol_value1762($4, $21);
   var $22=$slot;
   var $23=$4;
   assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
   var $24=(($members)|0);
   var $25=$24;
   var $26=HEAP32[(($25)>>2)];
   var $27=$26;
   var $28=(($27+12)|0);
   var $29=HEAP32[(($28)>>2)];
   $len=$29;
   $i=0;
   label = 2; break;
  case 2: 
   var $31=$i;
   var $32=$len;
   var $33=(($31)|(0)) < (($32)|(0));
   if ($33) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $35=$1;
   var $36=$i;
   var $37=$ptr_members;
   var $38=(($37+((($36)*(12))&-1))|0);
   var $39=_mrb_obj_equal($35, $38, $slot);
   var $40=(($39 << 24) >> 24)!=0;
   if ($40) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $42=$i;
   var $43=$ptr;
   var $44=(($43+((($42)*(12))&-1))|0);
   var $45=$agg_result;
   var $46=$44;
   assert(12 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($45)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];
   label = 8; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $49=$i;
   var $50=((($49)+(1))|0);
   $i=$50;
   label = 2; break;
  case 7: 
   var $52=$1;
   var $53=$1;
   var $54=_mrb_class_get($53, ((89364)|0));
   var $55=$1;
   var $56=$2;
   _mrb_sym2str($5, $55, $56);
   _mrb_raisef($52, $54, ((88156)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($5)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
   _mrb_nil_value1763($agg_result);
   label = 8; break;
  case 8: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_symbol_value1762($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=4;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP16[(($6)>>1)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value1763($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_id_attrset($mrb, $id) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $name;
 var $buf;
 var $len=sp;
 var $mid;
 $1=$mrb;
 $2=$id;
 var $3=$1;
 var $4=$2;
 var $5=_mrb_sym2name_len($3, $4, $len);
 $name=$5;
 var $6=$1;
 var $7=HEAP32[(($len)>>2)];
 var $8=((($7)+(2))|0);
 var $9=_mrb_malloc($6, $8);
 $buf=$9;
 var $10=$buf;
 var $11=$name;
 var $12=HEAP32[(($len)>>2)];
 assert($12 % 1 === 0);(_memcpy($10, $11, $12)|0);
 var $13=HEAP32[(($len)>>2)];
 var $14=$buf;
 var $15=(($14+$13)|0);
 HEAP8[($15)]=61;
 var $16=HEAP32[(($len)>>2)];
 var $17=((($16)+(1))|0);
 var $18=$buf;
 var $19=(($18+$17)|0);
 HEAP8[($19)]=0;
 var $20=$1;
 var $21=$buf;
 var $22=HEAP32[(($len)>>2)];
 var $23=((($22)+(1))|0);
 var $24=_mrb_intern2($20, $21, $23);
 $mid=$24;
 var $25=$1;
 var $26=$buf;
 _mrb_free($25, $26);
 var $27=$mid;
 STACKTOP = sp;
 return $27;
}
function _make_struct($agg_result, $mrb, $name, $members, $klass) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $name; $name = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($name)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($name)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($name)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $members; $members = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($members)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($members)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($members)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $nstr=sp;
   var $ptr_members;
   var $id;
   var $i;
   var $len;
   var $c;
   var $3=(sp)+(12);
   var $4=(sp)+(24);
   var $id1;
   $1=$mrb;
   $2=$klass;
   var $5=(($name+8)|0);
   var $6=HEAP32[(($5)>>2)];
   var $7=(($6)|(0))==0;
   if ($7) { label = 2; break; } else { label = 4; break; }
  case 2: 
   var $9=(($name)|0);
   var $10=$9;
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))!=0;
   if ($12) { label = 4; break; } else { label = 3; break; }
  case 3: 
   var $14=$1;
   var $15=$2;
   var $16=_mrb_class_new($14, $15);
   $c=$16;
   label = 9; break;
  case 4: 
   var $18=$1;
   _mrb_str_to_str($3, $18, $name);
   var $19=$name;
   var $20=$3;
   assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
   var $21=$1;
   var $22=_mrb_obj_to_sym($21, $name);
   $id=$22;
   var $23=$id;
   var $24=_mrb_is_const_id($23);
   var $25=(($24)|(0))!=0;
   if ($25) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $27=$1;
   var $28=$id;
   _mrb_name_error($27, $28, ((95024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($name)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($name)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($name)+(8))>>2)],tempInt));
   label = 6; break;
  case 6: 
   var $30=$1;
   var $31=$2;
   var $32=$id;
   var $33=_mrb_const_defined_at($30, $31, $32);
   var $34=(($33)|(0))!=0;
   if ($34) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $36=$1;
   _mrb_warn($36, ((94828)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($name)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($name)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($name)+(8))>>2)],tempInt));
   label = 8; break;
  case 8: 
   var $38=$1;
   var $39=$2;
   var $40=(($name)|0);
   var $41=$40;
   var $42=HEAP32[(($41)>>2)];
   var $43=$42;
   var $44=(($43+20)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=$2;
   var $47=_mrb_define_class_under($38, $39, $45, $46);
   $c=$47;
   label = 9; break;
  case 9: 
   var $49=$c;
   var $50=$49;
   var $51=HEAP32[(($50)>>2)];
   var $52=$51 >>> 11;
   var $53=$52 & 2097151;
   var $54=$53 & -256;
   var $55=$54 | 14;
   var $56=$c;
   var $57=$55 & 2097151;
   var $58=$56;
   var $59=$57 & 2097151;
   var $60=$59 << 11;
   var $61=HEAP32[(($58)>>2)];
   var $62=$61 & 2047;
   var $63=$62 | $60;
   HEAP32[(($58)>>2)]=$63;
   var $64=$c;
   var $65=$64;
   _mrb_obj_value1760($4, $65);
   var $66=$nstr;
   var $67=$4;
   assert(12 % 1 === 0);HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($67)+(4))>>2)];HEAP32[((($66)+(8))>>2)]=HEAP32[((($67)+(8))>>2)];
   var $68=$1;
   var $69=$1;
   var $70=_mrb_intern2($69, ((102164)|0), 11);
   _mrb_iv_set($68, $nstr, $70, $members);
   var $71=$1;
   var $72=$c;
   _mrb_define_class_method($71, $72, ((102880)|0), 598, 4096);
   var $73=$1;
   var $74=$c;
   _mrb_define_class_method($73, $74, ((102184)|0), 598, 4096);
   var $75=$1;
   var $76=$c;
   _mrb_define_class_method($75, $76, ((101300)|0), 514, 0);
   var $77=(($members)|0);
   var $78=$77;
   var $79=HEAP32[(($78)>>2)];
   var $80=$79;
   var $81=(($80+20)|0);
   var $82=HEAP32[(($81)>>2)];
   $ptr_members=$82;
   var $83=(($members)|0);
   var $84=$83;
   var $85=HEAP32[(($84)>>2)];
   var $86=$85;
   var $87=(($86+12)|0);
   var $88=HEAP32[(($87)>>2)];
   $len=$88;
   $i=0;
   label = 10; break;
  case 10: 
   var $90=$i;
   var $91=$len;
   var $92=(($90)|(0)) < (($91)|(0));
   if ($92) { label = 11; break; } else { label = 19; break; }
  case 11: 
   var $94=$i;
   var $95=$ptr_members;
   var $96=(($95+((($94)*(12))&-1))|0);
   var $97=(($96)|0);
   var $98=$97;
   var $99=HEAP16[(($98)>>1)];
   $id1=$99;
   var $100=$id1;
   var $101=_mrb_is_local_id($100);
   var $102=(($101)|(0))!=0;
   if ($102) { label = 13; break; } else { label = 12; break; }
  case 12: 
   var $104=$id1;
   var $105=_mrb_is_const_id($104);
   var $106=(($105)|(0))!=0;
   if ($106) { label = 13; break; } else { label = 17; break; }
  case 13: 
   var $108=$i;
   var $109=(($108)|(0)) < 10;
   if ($109) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $111=$1;
   var $112=$c;
   var $113=$id1;
   var $114=$i;
   var $115=((59672+($114<<2))|0);
   var $116=HEAP32[(($115)>>2)];
   _mrb_define_method_id($111, $112, $113, $116, 0);
   label = 16; break;
  case 15: 
   var $118=$1;
   var $119=$c;
   var $120=$id1;
   _mrb_define_method_id($118, $119, $120, 212, 0);
   label = 16; break;
  case 16: 
   var $122=$1;
   var $123=$c;
   var $124=$1;
   var $125=$id1;
   var $126=_mrb_id_attrset($124, $125);
   _mrb_define_method_id($122, $123, $126, 314, 262144);
   label = 17; break;
  case 17: 
   label = 18; break;
  case 18: 
   var $129=$i;
   var $130=((($129)+(1))|0);
   $i=$130;
   label = 10; break;
  case 19: 
   var $132=$agg_result;
   var $133=$nstr;
   assert(12 % 1 === 0);HEAP32[(($132)>>2)]=HEAP32[(($133)>>2)];HEAP32[((($132)+(4))>>2)]=HEAP32[((($133)+(4))>>2)];HEAP32[((($132)+(8))>>2)]=HEAP32[((($133)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _struct_class($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_class_get($2, ((94000)|0));
 return $3;
}
function _mrb_struct_initialize_withArg($agg_result, $mrb, $argc, $argv, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $klass;
   var $i;
   var $n;
   var $4=sp;
   $1=$mrb;
   $2=$argc;
   $3=$argv;
   var $5=$1;
   var $6=_mrb_obj_class($5, $self);
   $klass=$6;
   var $7=$1;
   var $8=$klass;
   var $9=_num_members($7, $8);
   $n=$9;
   var $10=$n;
   var $11=$2;
   var $12=(($10)|(0)) < (($11)|(0));
   if ($12) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $14=$1;
   var $15=$1;
   var $16=_mrb_class_get($15, ((95716)|0));
   _mrb_raise($14, $16, ((95500)|0));
   label = 3; break;
  case 3: 
   $i=0;
   label = 4; break;
  case 4: 
   var $19=$i;
   var $20=$2;
   var $21=(($19)|(0)) < (($20)|(0));
   if ($21) { label = 5; break; } else { label = 7; break; }
  case 5: 
   var $23=$1;
   var $24=$i;
   var $25=$i;
   var $26=$3;
   var $27=(($26+((($25)*(12))&-1))|0);
   _mrb_ary_set($23, $self, $24, $27);
   label = 6; break;
  case 6: 
   var $29=$i;
   var $30=((($29)+(1))|0);
   $i=$30;
   label = 4; break;
  case 7: 
   var $32=$2;
   $i=$32;
   label = 8; break;
  case 8: 
   var $34=$i;
   var $35=$n;
   var $36=(($34)|(0)) < (($35)|(0));
   if ($36) { label = 9; break; } else { label = 11; break; }
  case 9: 
   var $38=$1;
   var $39=$i;
   _mrb_nil_value1763($4);
   _mrb_ary_set($38, $self, $39, $4);
   label = 10; break;
  case 10: 
   var $41=$i;
   var $42=((($41)+(1))|0);
   $i=$42;
   label = 8; break;
  case 11: 
   var $44=$agg_result;
   var $45=$self;
   assert(12 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];HEAP32[((($44)+(8))>>2)]=HEAP32[((($45)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _GENERATED_TMP_mrb_mruby_struct_gem_init($mrb) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ai;
   var $2=sp;
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_gc_arena_save($3);
   $ai=$4;
   var $5=$1;
   _mrb_mruby_struct_gem_init($5);
   var $6=$1;
   _mrb_load_irep($2, $6, ((76416)|0));
   var $7=$1;
   var $8=(($7+16)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$1;
   _mrb_print_error($12);
   _exit(1);
   throw "Reached an unreachable!";
  case 3: 
   var $14=$1;
   var $15=$ai;
   _mrb_gc_arena_restore($14, $15);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_struct_init_copy($agg_result, $mrb, $copy) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $copy; $copy = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($copy)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($copy)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($copy)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $s=sp;
   var $i;
   var $len;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((87248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$s,tempInt));
   var $4=$1;
   var $5=_mrb_obj_equal($4, $copy, $s);
   var $6=(($5 << 24) >> 24)!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$agg_result;
   var $9=$copy;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   label = 14; break;
  case 3: 
   var $11=$1;
   var $12=$1;
   var $13=_mrb_obj_class($12, $copy);
   var $14=_mrb_obj_is_instance_of($11, $s, $13);
   var $15=(($14 << 24) >> 24)!=0;
   if ($15) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $17=$1;
   var $18=$1;
   var $19=_mrb_class_get($18, ((104792)|0));
   _mrb_raise($17, $19, ((86424)|0));
   label = 5; break;
  case 5: 
   var $21=(($s+8)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0))==14;
   if ($23) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $25=$1;
   var $26=$1;
   var $27=_mrb_class_get($26, ((104792)|0));
   _mrb_raise($25, $27, ((96496)|0));
   label = 7; break;
  case 7: 
   var $29=(($copy)|0);
   var $30=$29;
   var $31=HEAP32[(($30)>>2)];
   var $32=$31;
   var $33=(($32+12)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($s)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $38=$37;
   var $39=(($38+12)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=(($34)|(0))!=(($40)|(0));
   if ($41) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $43=$1;
   var $44=$1;
   var $45=_mrb_class_get($44, ((104792)|0));
   _mrb_raise($43, $45, ((105788)|0));
   label = 9; break;
  case 9: 
   var $47=(($copy)|0);
   var $48=$47;
   var $49=HEAP32[(($48)>>2)];
   var $50=$49;
   var $51=(($50+12)|0);
   var $52=HEAP32[(($51)>>2)];
   $len=$52;
   $i=0;
   label = 10; break;
  case 10: 
   var $54=$i;
   var $55=$len;
   var $56=(($54)|(0)) < (($55)|(0));
   if ($56) { label = 11; break; } else { label = 13; break; }
  case 11: 
   var $58=$1;
   var $59=$i;
   var $60=$i;
   var $61=(($s)|0);
   var $62=$61;
   var $63=HEAP32[(($62)>>2)];
   var $64=$63;
   var $65=(($64+20)|0);
   var $66=HEAP32[(($65)>>2)];
   var $67=(($66+((($60)*(12))&-1))|0);
   _mrb_ary_set($58, $copy, $59, $67);
   label = 12; break;
  case 12: 
   var $69=$i;
   var $70=((($69)+(1))|0);
   $i=$70;
   label = 10; break;
  case 13: 
   var $72=$agg_result;
   var $73=$copy;
   assert(12 % 1 === 0);HEAP32[(($72)>>2)]=HEAP32[(($73)>>2)];HEAP32[((($72)+(4))>>2)]=HEAP32[((($73)+(4))>>2)];HEAP32[((($72)+(8))>>2)]=HEAP32[((($73)+(8))>>2)];
   label = 14; break;
  case 14: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_struct_aref_n($agg_result, $mrb, $s, $idx) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $idx; $idx = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($idx)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($idx)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($idx)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $i;
   var $sym=sp;
   var $2=(sp)+(12);
   var $3=(sp)+(24);
   var $4=(sp)+(36);
   var $5=(sp)+(48);
   $1=$mrb;
   var $6=(($idx+8)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7)|(0))==16;
   if ($8) { label = 2; break; } else { label = 6; break; }
  case 2: 
   var $10=$1;
   _mrb_check_intern_str($sym, $10, $idx);
   var $11=(($sym+8)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))==0;
   if ($13) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $15=(($sym)|0);
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0))!=0;
   if ($18) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $20=$1;
   var $21=$1;
   var $22=_mrb_class_get($21, ((89364)|0));
   _mrb_raisef($20, $22, ((105184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($idx)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($idx)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($idx)+(8))>>2)],tempInt));
   label = 5; break;
  case 5: 
   var $24=$idx;
   var $25=$sym;
   assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
   label = 6; break;
  case 6: 
   var $27=(($idx+8)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($28)|(0))==4;
   if ($29) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $31=$1;
   var $32=(($idx)|0);
   var $33=$32;
   var $34=HEAP16[(($33)>>1)];
   _mrb_struct_aref_id($agg_result, $31, $s, $34);
   label = 15; break;
  case 8: 
   var $36=(($idx)|0);
   var $37=$36;
   var $38=HEAP32[(($37)>>2)];
   $i=$38;
   var $39=$i;
   var $40=(($39)|(0)) < 0;
   if ($40) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $42=(($s)|0);
   var $43=$42;
   var $44=HEAP32[(($43)>>2)];
   var $45=$44;
   var $46=(($45+12)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$i;
   var $49=((($47)+($48))|0);
   $i=$49;
   label = 10; break;
  case 10: 
   var $51=$i;
   var $52=(($51)|(0)) < 0;
   if ($52) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $54=$1;
   var $55=$1;
   var $56=_mrb_class_get($55, ((89364)|0));
   var $57=$i;
   _mrb_fixnum_value1761($2, $57);
   var $58=(($s)|0);
   var $59=$58;
   var $60=HEAP32[(($59)>>2)];
   var $61=$60;
   var $62=(($61+12)|0);
   var $63=HEAP32[(($62)>>2)];
   _mrb_fixnum_value1761($3, $63);
   _mrb_raisef($54, $56, ((104392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($2)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($2)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($2)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($3)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
   label = 12; break;
  case 12: 
   var $65=(($s)|0);
   var $66=$65;
   var $67=HEAP32[(($66)>>2)];
   var $68=$67;
   var $69=(($68+12)|0);
   var $70=HEAP32[(($69)>>2)];
   var $71=$i;
   var $72=(($70)|(0)) <= (($71)|(0));
   if ($72) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $74=$1;
   var $75=$1;
   var $76=_mrb_class_get($75, ((89364)|0));
   var $77=$i;
   _mrb_fixnum_value1761($4, $77);
   var $78=(($s)|0);
   var $79=$78;
   var $80=HEAP32[(($79)>>2)];
   var $81=$80;
   var $82=(($81+12)|0);
   var $83=HEAP32[(($82)>>2)];
   _mrb_fixnum_value1761($5, $83);
   _mrb_raisef($74, $76, ((103856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($5)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
   label = 14; break;
  case 14: 
   var $85=$i;
   var $86=(($s)|0);
   var $87=$86;
   var $88=HEAP32[(($87)>>2)];
   var $89=$88;
   var $90=(($89+20)|0);
   var $91=HEAP32[(($90)>>2)];
   var $92=(($91+((($85)*(12))&-1))|0);
   var $93=$agg_result;
   var $94=$92;
   assert(12 % 1 === 0);HEAP32[(($93)>>2)]=HEAP32[(($94)>>2)];HEAP32[((($93)+(4))>>2)]=HEAP32[((($94)+(4))>>2)];HEAP32[((($93)+(8))>>2)]=HEAP32[((($94)+(8))>>2)];
   label = 15; break;
  case 15: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_struct_aref_id($agg_result, $mrb, $s, $id) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $ptr;
   var $members=sp;
   var $ptr_members;
   var $i;
   var $len;
   var $3=(sp)+(12);
   var $4=(sp)+(24);
   $1=$mrb;
   $2=$id;
   var $5=(($s)|0);
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7;
   var $9=(($8+20)|0);
   var $10=HEAP32[(($9)>>2)];
   $ptr=$10;
   var $11=$1;
   _mrb_struct_members($3, $11, $s);
   var $12=$members;
   var $13=$3;
   assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
   var $14=(($members)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=$16;
   var $18=(($17+20)|0);
   var $19=HEAP32[(($18)>>2)];
   $ptr_members=$19;
   var $20=(($members)|0);
   var $21=$20;
   var $22=HEAP32[(($21)>>2)];
   var $23=$22;
   var $24=(($23+12)|0);
   var $25=HEAP32[(($24)>>2)];
   $len=$25;
   $i=0;
   label = 2; break;
  case 2: 
   var $27=$i;
   var $28=$len;
   var $29=(($27)|(0)) < (($28)|(0));
   if ($29) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $31=$i;
   var $32=$ptr_members;
   var $33=(($32+((($31)*(12))&-1))|0);
   var $34=(($33)|0);
   var $35=$34;
   var $36=HEAP16[(($35)>>1)];
   var $37=(($36 << 16) >> 16);
   var $38=$2;
   var $39=(($38 << 16) >> 16);
   var $40=(($37)|(0))==(($39)|(0));
   if ($40) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $42=$i;
   var $43=$ptr;
   var $44=(($43+((($42)*(12))&-1))|0);
   var $45=$agg_result;
   var $46=$44;
   assert(12 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($45)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];
   label = 8; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $49=$i;
   var $50=((($49)+(1))|0);
   $i=$50;
   label = 2; break;
  case 7: 
   var $52=$1;
   var $53=$1;
   var $54=_mrb_class_get($53, ((89364)|0));
   var $55=$1;
   var $56=$2;
   _mrb_sym2str($4, $55, $56);
   _mrb_raisef($52, $54, ((105184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],tempInt));
   _mrb_nil_value1763($agg_result);
   label = 8; break;
  case 8: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_struct_aref($agg_result, $mrb, $s) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $idx=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((87248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$idx,tempInt));
 var $4=$1;
 _mrb_struct_aref_n($agg_result, $4, $s, $idx);
 STACKTOP = sp;
 return;
}
function _mrb_struct_aset($agg_result, $mrb, $s) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $i;
   var $idx=sp;
   var $val=(sp)+(12);
   var $2=(sp)+(24);
   var $3=(sp)+(36);
   var $4=(sp)+(48);
   var $5=(sp)+(60);
   $1=$mrb;
   var $6=$1;
   var $7=_mrb_get_args($6, ((103376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$idx,HEAP32[(((tempInt)+(4))>>2)]=$val,tempInt));
   var $8=(($idx+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==16;
   if ($10) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $12=(($idx+8)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))==4;
   if ($14) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $16=$1;
   var $17=$1;
   var $18=_mrb_obj_to_sym($17, $idx);
   _mrb_struct_aset_id($agg_result, $16, $s, $18, $val);
   label = 11; break;
  case 4: 
   var $20=(($idx)|0);
   var $21=$20;
   var $22=HEAP32[(($21)>>2)];
   $i=$22;
   var $23=$i;
   var $24=(($23)|(0)) < 0;
   if ($24) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $26=(($s)|0);
   var $27=$26;
   var $28=HEAP32[(($27)>>2)];
   var $29=$28;
   var $30=(($29+12)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=$i;
   var $33=((($31)+($32))|0);
   $i=$33;
   label = 6; break;
  case 6: 
   var $35=$i;
   var $36=(($35)|(0)) < 0;
   if ($36) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $38=$1;
   var $39=$1;
   var $40=_mrb_class_get($39, ((89364)|0));
   var $41=$i;
   _mrb_fixnum_value1761($2, $41);
   var $42=(($s)|0);
   var $43=$42;
   var $44=HEAP32[(($43)>>2)];
   var $45=$44;
   var $46=(($45+12)|0);
   var $47=HEAP32[(($46)>>2)];
   _mrb_fixnum_value1761($3, $47);
   _mrb_raisef($38, $40, ((104392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($2)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($2)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($2)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($3)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
   label = 8; break;
  case 8: 
   var $49=(($s)|0);
   var $50=$49;
   var $51=HEAP32[(($50)>>2)];
   var $52=$51;
   var $53=(($52+12)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=$i;
   var $56=(($54)|(0)) <= (($55)|(0));
   if ($56) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $58=$1;
   var $59=$1;
   var $60=_mrb_class_get($59, ((89364)|0));
   var $61=$i;
   _mrb_fixnum_value1761($4, $61);
   var $62=(($s)|0);
   var $63=$62;
   var $64=HEAP32[(($63)>>2)];
   var $65=$64;
   var $66=(($65+12)|0);
   var $67=HEAP32[(($66)>>2)];
   _mrb_fixnum_value1761($5, $67);
   _mrb_raisef($58, $60, ((103856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($5)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
   label = 10; break;
  case 10: 
   var $69=$i;
   var $70=(($s)|0);
   var $71=$70;
   var $72=HEAP32[(($71)>>2)];
   var $73=$72;
   var $74=(($73+20)|0);
   var $75=HEAP32[(($74)>>2)];
   var $76=(($75+((($69)*(12))&-1))|0);
   var $77=$76;
   var $78=$val;
   assert(12 % 1 === 0);HEAP32[(($77)>>2)]=HEAP32[(($78)>>2)];HEAP32[((($77)+(4))>>2)]=HEAP32[((($78)+(4))>>2)];HEAP32[((($77)+(8))>>2)]=HEAP32[((($78)+(8))>>2)];
   var $79=$agg_result;
   var $80=$76;
   assert(12 % 1 === 0);HEAP32[(($79)>>2)]=HEAP32[(($80)>>2)];HEAP32[((($79)+(4))>>2)]=HEAP32[((($80)+(4))>>2)];HEAP32[((($79)+(8))>>2)]=HEAP32[((($80)+(8))>>2)];
   label = 11; break;
  case 11: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_struct_aset_id($agg_result, $mrb, $s, $id, $val) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $members=sp;
   var $ptr;
   var $ptr_members;
   var $i;
   var $len;
   var $3=(sp)+(12);
   var $4=(sp)+(24);
   var $5=(sp)+(36);
   var $6=(sp)+(48);
   $1=$mrb;
   $2=$id;
   var $7=$1;
   _mrb_struct_members($3, $7, $s);
   var $8=$members;
   var $9=$3;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   var $10=(($members)|0);
   var $11=$10;
   var $12=HEAP32[(($11)>>2)];
   var $13=$12;
   var $14=(($13+12)|0);
   var $15=HEAP32[(($14)>>2)];
   $len=$15;
   var $16=(($s)|0);
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   var $19=$18;
   var $20=(($19+12)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$len;
   var $23=(($21)|(0))!=(($22)|(0));
   if ($23) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $25=$1;
   var $26=$1;
   var $27=_mrb_class_get($26, ((104792)|0));
   var $28=$len;
   _mrb_fixnum_value1761($4, $28);
   var $29=(($s)|0);
   var $30=$29;
   var $31=HEAP32[(($30)>>2)];
   var $32=$31;
   var $33=(($32+12)|0);
   var $34=HEAP32[(($33)>>2)];
   _mrb_fixnum_value1761($5, $34);
   _mrb_raisef($25, $27, ((91416)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($5)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
   label = 3; break;
  case 3: 
   var $36=(($s)|0);
   var $37=$36;
   var $38=HEAP32[(($37)>>2)];
   var $39=$38;
   var $40=(($39+20)|0);
   var $41=HEAP32[(($40)>>2)];
   $ptr=$41;
   var $42=(($members)|0);
   var $43=$42;
   var $44=HEAP32[(($43)>>2)];
   var $45=$44;
   var $46=(($45+20)|0);
   var $47=HEAP32[(($46)>>2)];
   $ptr_members=$47;
   $i=0;
   label = 4; break;
  case 4: 
   var $49=$i;
   var $50=$len;
   var $51=(($49)|(0)) < (($50)|(0));
   if ($51) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $53=$i;
   var $54=$ptr_members;
   var $55=(($54+((($53)*(12))&-1))|0);
   var $56=(($55)|0);
   var $57=$56;
   var $58=HEAP16[(($57)>>1)];
   var $59=(($58 << 16) >> 16);
   var $60=$2;
   var $61=(($60 << 16) >> 16);
   var $62=(($59)|(0))==(($61)|(0));
   if ($62) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $64=$i;
   var $65=$ptr;
   var $66=(($65+((($64)*(12))&-1))|0);
   var $67=$66;
   var $68=$val;
   assert(12 % 1 === 0);HEAP32[(($67)>>2)]=HEAP32[(($68)>>2)];HEAP32[((($67)+(4))>>2)]=HEAP32[((($68)+(4))>>2)];HEAP32[((($67)+(8))>>2)]=HEAP32[((($68)+(8))>>2)];
   var $69=$agg_result;
   var $70=$val;
   assert(12 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($70)+(4))>>2)];HEAP32[((($69)+(8))>>2)]=HEAP32[((($70)+(8))>>2)];
   label = 10; break;
  case 7: 
   label = 8; break;
  case 8: 
   var $73=$i;
   var $74=((($73)+(1))|0);
   $i=$74;
   label = 4; break;
  case 9: 
   var $76=$1;
   var $77=$1;
   var $78=_mrb_class_get($77, ((89364)|0));
   var $79=$1;
   var $80=$2;
   _mrb_sym2str($6, $79, $80);
   _mrb_raisef($76, $78, ((105184)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($6)+(8))>>2)],tempInt));
   var $81=$agg_result;
   var $82=$val;
   assert(12 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($82)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($82)+(8))>>2)];
   label = 10; break;
  case 10: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mruby_struct_gem_init($mrb) {
 var label = 0;
 var $1;
 var $st;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=(($3+44)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_mrb_define_class($2, ((94000)|0), $5);
 $st=$6;
 var $7=$1;
 var $8=$st;
 _mrb_define_class_method($7, $8, ((102880)|0), 508, 4096);
 var $9=$1;
 var $10=$st;
 _mrb_define_method($9, $10, ((102516)|0), 674, 262144);
 var $11=$1;
 var $12=$st;
 _mrb_define_method($11, $12, ((102184)|0), 482, 262144);
 var $13=$1;
 var $14=$st;
 _mrb_define_method($13, $14, ((101768)|0), 622, 524288);
 var $15=$1;
 var $16=$st;
 _mrb_define_method($15, $16, ((101300)|0), 626, 0);
 var $17=$1;
 var $18=$st;
 _mrb_define_method($17, $18, ((100776)|0), 226, 4096);
 var $19=$1;
 var $20=$st;
 _mrb_define_method($19, $20, ((100468)|0), 28, 262144);
 var $21=$1;
 var $22=$st;
 _mrb_define_method($21, $22, ((99984)|0), 362, 0);
 var $23=$1;
 var $24=$st;
 _mrb_define_alias($23, $24, ((99732)|0), ((99984)|0));
 var $25=$1;
 var $26=$st;
 _mrb_define_method($25, $26, ((99320)|0), 206, 262144);
 return;
}
function _mrb_struct_s_def($agg_result, $mrb, $klass) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 176)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $klass; $klass = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($klass)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($klass)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($klass)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $name=sp;
   var $rest=(sp)+(12);
   var $pargv;
   var $argcnt;
   var $i;
   var $b=(sp)+(24);
   var $st=(sp)+(36);
   var $id;
   var $argv=(sp)+(48);
   var $argc=(sp)+(52);
   var $2=(sp)+(56);
   var $3=(sp)+(68);
   var $4=(sp)+(80);
   var $5=(sp)+(92);
   var $6=(sp)+(104);
   var $7=(sp)+(116);
   var $8=(sp)+(128);
   var $9=(sp)+(140);
   var $10=(sp)+(152);
   var $11=(sp)+(164);
   $1=$mrb;
   _mrb_nil_value1763($2);
   var $12=$name;
   var $13=$2;
   assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
   _mrb_nil_value1763($3);
   var $14=$rest;
   var $15=$3;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   var $16=$1;
   var $17=_mrb_get_args($16, ((96108)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,HEAP32[(((tempInt)+(8))>>2)]=$b,tempInt));
   var $18=HEAP32[(($argc)>>2)];
   var $19=(($18)|(0))==0;
   if ($19) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $21=$1;
   _mrb_ary_new($4, $21);
   var $22=$rest;
   var $23=$4;
   assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
   label = 23; break;
  case 3: 
   var $25=HEAP32[(($argc)>>2)];
   var $26=(($25)|(0)) > 0;
   if ($26) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $28=HEAP32[(($argv)>>2)];
   var $29=(($28)|0);
   var $30=$name;
   var $31=$29;
   assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
   label = 5; break;
  case 5: 
   var $33=HEAP32[(($argc)>>2)];
   var $34=(($33)|(0)) > 1;
   if ($34) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $36=HEAP32[(($argv)>>2)];
   var $37=(($36+12)|0);
   var $38=$rest;
   var $39=$37;
   assert(12 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];HEAP32[((($38)+(8))>>2)]=HEAP32[((($39)+(8))>>2)];
   label = 7; break;
  case 7: 
   var $41=(($rest+8)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($42)|(0))==14;
   if ($43) { label = 8; break; } else { label = 13; break; }
  case 8: 
   var $45=(($name+8)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=(($46)|(0))==0;
   if ($47) { label = 9; break; } else { label = 10; break; }
  case 9: 
   var $49=(($name)|0);
   var $50=$49;
   var $51=HEAP32[(($50)>>2)];
   var $52=(($51)|(0))!=0;
   if ($52) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $54=(($name+8)|0);
   var $55=HEAP32[(($54)>>2)];
   var $56=(($55)|(0))==4;
   if ($56) { label = 11; break; } else { label = 12; break; }
  case 11: 
   var $58=$1;
   _mrb_ary_unshift($5, $58, $rest, $name);
   _mrb_nil_value1763($6);
   var $59=$name;
   var $60=$6;
   assert(12 % 1 === 0);HEAP32[(($59)>>2)]=HEAP32[(($60)>>2)];HEAP32[((($59)+(4))>>2)]=HEAP32[((($60)+(4))>>2)];HEAP32[((($59)+(8))>>2)]=HEAP32[((($60)+(8))>>2)];
   label = 12; break;
  case 12: 
   label = 18; break;
  case 13: 
   var $63=HEAP32[(($argv)>>2)];
   var $64=(($63+12)|0);
   $pargv=$64;
   var $65=HEAP32[(($argc)>>2)];
   var $66=((($65)-(1))|0);
   $argcnt=$66;
   var $67=(($name+8)|0);
   var $68=HEAP32[(($67)>>2)];
   var $69=(($68)|(0))==0;
   if ($69) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $71=(($name)|0);
   var $72=$71;
   var $73=HEAP32[(($72)>>2)];
   var $74=(($73)|(0))!=0;
   if ($74) { label = 15; break; } else { label = 17; break; }
  case 15: 
   var $76=(($name+8)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($77)|(0))==4;
   if ($78) { label = 16; break; } else { label = 17; break; }
  case 16: 
   _mrb_nil_value1763($7);
   var $80=$name;
   var $81=$7;
   assert(12 % 1 === 0);HEAP32[(($80)>>2)]=HEAP32[(($81)>>2)];HEAP32[((($80)+(4))>>2)]=HEAP32[((($81)+(4))>>2)];HEAP32[((($80)+(8))>>2)]=HEAP32[((($81)+(8))>>2)];
   var $82=HEAP32[(($argv)>>2)];
   var $83=(($82)|0);
   $pargv=$83;
   var $84=$argcnt;
   var $85=((($84)+(1))|0);
   $argcnt=$85;
   label = 17; break;
  case 17: 
   var $87=$1;
   var $88=$argcnt;
   var $89=$pargv;
   _mrb_ary_new_from_values($8, $87, $88, $89);
   var $90=$rest;
   var $91=$8;
   assert(12 % 1 === 0);HEAP32[(($90)>>2)]=HEAP32[(($91)>>2)];HEAP32[((($90)+(4))>>2)]=HEAP32[((($91)+(4))>>2)];HEAP32[((($90)+(8))>>2)]=HEAP32[((($91)+(8))>>2)];
   label = 18; break;
  case 18: 
   $i=0;
   label = 19; break;
  case 19: 
   var $94=$i;
   var $95=(($rest)|0);
   var $96=$95;
   var $97=HEAP32[(($96)>>2)];
   var $98=$97;
   var $99=(($98+12)|0);
   var $100=HEAP32[(($99)>>2)];
   var $101=(($94)|(0)) < (($100)|(0));
   if ($101) { label = 20; break; } else { label = 22; break; }
  case 20: 
   var $103=$1;
   var $104=$i;
   var $105=(($rest)|0);
   var $106=$105;
   var $107=HEAP32[(($106)>>2)];
   var $108=$107;
   var $109=(($108+20)|0);
   var $110=HEAP32[(($109)>>2)];
   var $111=(($110+((($104)*(12))&-1))|0);
   var $112=_mrb_obj_to_sym($103, $111);
   $id=$112;
   var $113=$i;
   var $114=(($rest)|0);
   var $115=$114;
   var $116=HEAP32[(($115)>>2)];
   var $117=$116;
   var $118=(($117+20)|0);
   var $119=HEAP32[(($118)>>2)];
   var $120=(($119+((($113)*(12))&-1))|0);
   var $121=$id;
   _mrb_symbol_value1762($9, $121);
   var $122=$120;
   var $123=$9;
   assert(12 % 1 === 0);HEAP32[(($122)>>2)]=HEAP32[(($123)>>2)];HEAP32[((($122)+(4))>>2)]=HEAP32[((($123)+(4))>>2)];HEAP32[((($122)+(8))>>2)]=HEAP32[((($123)+(8))>>2)];
   label = 21; break;
  case 21: 
   var $125=$i;
   var $126=((($125)+(1))|0);
   $i=$126;
   label = 19; break;
  case 22: 
   label = 23; break;
  case 23: 
   var $129=$1;
   var $130=$1;
   var $131=_struct_class($130);
   _make_struct($10, $129, $name, $rest, $131);
   var $132=$st;
   var $133=$10;
   assert(12 % 1 === 0);HEAP32[(($132)>>2)]=HEAP32[(($133)>>2)];HEAP32[((($132)+(4))>>2)]=HEAP32[((($133)+(4))>>2)];HEAP32[((($132)+(8))>>2)]=HEAP32[((($133)+(8))>>2)];
   var $134=(($b+8)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=(($135)|(0))==0;
   if ($136) { label = 24; break; } else { label = 25; break; }
  case 24: 
   var $138=(($b)|0);
   var $139=$138;
   var $140=HEAP32[(($139)>>2)];
   var $141=(($140)|(0))!=0;
   if ($141) { label = 25; break; } else { label = 26; break; }
  case 25: 
   var $143=$1;
   _mrb_funcall($11, $143, $b, ((95932)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$st,tempInt));
   label = 26; break;
  case 26: 
   var $145=$agg_result;
   var $146=$st;
   assert(12 % 1 === 0);HEAP32[(($145)>>2)]=HEAP32[(($146)>>2)];HEAP32[((($145)+(4))>>2)]=HEAP32[((($146)+(4))>>2)];HEAP32[((($145)+(8))>>2)]=HEAP32[((($146)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mruby_struct_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _mrb_struct_equal($agg_result, $mrb, $s) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $s2=sp;
   var $ptr;
   var $ptr2;
   var $i;
   var $len;
   var $equal_p;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((87248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$s2,tempInt));
   var $4=$1;
   var $5=_mrb_obj_equal($4, $s, $s2);
   var $6=(($5 << 24) >> 24)!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $equal_p=1;
   label = 17; break;
  case 3: 
   var $9=$1;
   var $10=$1;
   var $11=_mrb_obj_class($10, $s);
   var $12=_mrb_class_name($9, $11);
   var $13=_strcmp($12, ((94000)|0));
   var $14=(($13)|(0))!=0;
   if ($14) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $16=$1;
   var $17=_mrb_obj_class($16, $s);
   var $18=$1;
   var $19=_mrb_obj_class($18, $s2);
   var $20=(($17)|(0))!=(($19)|(0));
   if ($20) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $equal_p=0;
   label = 16; break;
  case 6: 
   var $23=(($s)|0);
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   var $26=$25;
   var $27=(($26+12)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($s2)|0);
   var $30=$29;
   var $31=HEAP32[(($30)>>2)];
   var $32=$31;
   var $33=(($32+12)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($28)|(0))!=(($34)|(0));
   if ($35) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $37=$1;
   _mrb_bug($37, ((98888)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   $equal_p=0;
   label = 15; break;
  case 8: 
   var $39=(($s)|0);
   var $40=$39;
   var $41=HEAP32[(($40)>>2)];
   var $42=$41;
   var $43=(($42+20)|0);
   var $44=HEAP32[(($43)>>2)];
   $ptr=$44;
   var $45=(($s2)|0);
   var $46=$45;
   var $47=HEAP32[(($46)>>2)];
   var $48=$47;
   var $49=(($48+20)|0);
   var $50=HEAP32[(($49)>>2)];
   $ptr2=$50;
   var $51=(($s)|0);
   var $52=$51;
   var $53=HEAP32[(($52)>>2)];
   var $54=$53;
   var $55=(($54+12)|0);
   var $56=HEAP32[(($55)>>2)];
   $len=$56;
   $equal_p=1;
   $i=0;
   label = 9; break;
  case 9: 
   var $58=$i;
   var $59=$len;
   var $60=(($58)|(0)) < (($59)|(0));
   if ($60) { label = 10; break; } else { label = 14; break; }
  case 10: 
   var $62=$1;
   var $63=$i;
   var $64=$ptr;
   var $65=(($64+((($63)*(12))&-1))|0);
   var $66=$i;
   var $67=$ptr2;
   var $68=(($67+((($66)*(12))&-1))|0);
   var $69=_mrb_equal($62, $65, $68);
   var $70=(($69 << 24) >> 24)!=0;
   if ($70) { label = 12; break; } else { label = 11; break; }
  case 11: 
   $equal_p=0;
   label = 14; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $74=$i;
   var $75=((($74)+(1))|0);
   $i=$75;
   label = 9; break;
  case 14: 
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $80=$equal_p;
   _mrb_bool_value1769($agg_result, $80);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_struct_members_m($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2=sp;
 $1=$mrb;
 var $3=$1;
 var $4=$1;
 var $5=_mrb_obj_class($4, $obj);
 var $6=$5;
 _mrb_obj_value1760($2, $6);
 _mrb_struct_s_members_m($agg_result, $3, $2);
 STACKTOP = sp;
 return;
}
function _mrb_struct_initialize_m($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $argv=sp;
 var $argc=(sp)+(4);
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((96324)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
 var $4=$1;
 var $5=HEAP32[(($argc)>>2)];
 var $6=HEAP32[(($argv)>>2)];
 _mrb_struct_initialize_withArg($agg_result, $4, $5, $6, $self);
 STACKTOP = sp;
 return;
}
function _mrb_struct_inspect($agg_result, $mrb, $s) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 _inspect_struct($agg_result, $2, $s, 0);
 STACKTOP = sp;
 return;
}
function _mrb_struct_eql($agg_result, $mrb, $s) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $s2=sp;
   var $ptr;
   var $ptr2;
   var $i;
   var $len;
   var $eql_p;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((87248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$s2,tempInt));
   var $4=$1;
   var $5=_mrb_obj_equal($4, $s, $s2);
   var $6=(($5 << 24) >> 24)!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   $eql_p=1;
   label = 17; break;
  case 3: 
   var $9=$1;
   var $10=$1;
   var $11=_mrb_obj_class($10, $s2);
   var $12=_mrb_class_name($9, $11);
   var $13=_strcmp($12, ((94000)|0));
   var $14=(($13)|(0))!=0;
   if ($14) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $16=$1;
   var $17=_mrb_obj_class($16, $s);
   var $18=$1;
   var $19=_mrb_obj_class($18, $s2);
   var $20=(($17)|(0))!=(($19)|(0));
   if ($20) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $eql_p=0;
   label = 16; break;
  case 6: 
   var $23=(($s)|0);
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   var $26=$25;
   var $27=(($26+12)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($s2)|0);
   var $30=$29;
   var $31=HEAP32[(($30)>>2)];
   var $32=$31;
   var $33=(($32+12)|0);
   var $34=HEAP32[(($33)>>2)];
   var $35=(($28)|(0))!=(($34)|(0));
   if ($35) { label = 7; break; } else { label = 8; break; }
  case 7: 
   var $37=$1;
   _mrb_bug($37, ((98888)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=0,tempInt));
   $eql_p=0;
   label = 15; break;
  case 8: 
   var $39=(($s)|0);
   var $40=$39;
   var $41=HEAP32[(($40)>>2)];
   var $42=$41;
   var $43=(($42+20)|0);
   var $44=HEAP32[(($43)>>2)];
   $ptr=$44;
   var $45=(($s2)|0);
   var $46=$45;
   var $47=HEAP32[(($46)>>2)];
   var $48=$47;
   var $49=(($48+20)|0);
   var $50=HEAP32[(($49)>>2)];
   $ptr2=$50;
   var $51=(($s)|0);
   var $52=$51;
   var $53=HEAP32[(($52)>>2)];
   var $54=$53;
   var $55=(($54+12)|0);
   var $56=HEAP32[(($55)>>2)];
   $len=$56;
   $eql_p=1;
   $i=0;
   label = 9; break;
  case 9: 
   var $58=$i;
   var $59=$len;
   var $60=(($58)|(0)) < (($59)|(0));
   if ($60) { label = 10; break; } else { label = 14; break; }
  case 10: 
   var $62=$1;
   var $63=$i;
   var $64=$ptr;
   var $65=(($64+((($63)*(12))&-1))|0);
   var $66=$i;
   var $67=$ptr2;
   var $68=(($67+((($66)*(12))&-1))|0);
   var $69=_mrb_eql($62, $65, $68);
   var $70=(($69 << 24) >> 24)!=0;
   if ($70) { label = 12; break; } else { label = 11; break; }
  case 11: 
   $eql_p=0;
   label = 14; break;
  case 12: 
   label = 13; break;
  case 13: 
   var $74=$i;
   var $75=((($74)+(1))|0);
   $i=$75;
   label = 9; break;
  case 14: 
   label = 15; break;
  case 15: 
   label = 16; break;
  case 16: 
   label = 17; break;
  case 17: 
   var $80=$eql_p;
   _mrb_bool_value1769($agg_result, $80);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_bool_value1769($agg_result, $boolean) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$boolean;
   label = 2; break;
  case 2: 
   var $3=$1;
   var $4=(($3)&(255));
   var $5=(($4)|(0))!=0;
   var $6=$5 ? 2 : 0;
   var $7=(($v+8)|0);
   HEAP32[(($7)>>2)]=$6;
   var $8=(($v)|0);
   var $9=$8;
   HEAP32[(($9)>>2)]=1;
   label = 3; break;
  case 3: 
   var $11=$agg_result;
   var $12=$v;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _inspect_struct($agg_result, $mrb, $s, $recur) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 196)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $cn;
   var $members=sp;
   var $str=(sp)+(12);
   var $ptr;
   var $ptr_members;
   var $i;
   var $len;
   var $3=(sp)+(24);
   var $4=(sp)+(36);
   var $5=(sp)+(48);
   var $slot=(sp)+(60);
   var $id;
   var $6=(sp)+(72);
   var $7=(sp)+(84);
   var $name;
   var $len1=(sp)+(96);
   var $8=(sp)+(100);
   var $9=(sp)+(112);
   var $10=(sp)+(124);
   var $11=(sp)+(136);
   var $12=(sp)+(148);
   var $13=(sp)+(160);
   var $14=(sp)+(172);
   var $15=(sp)+(184);
   $1=$mrb;
   $2=$recur;
   var $16=$1;
   var $17=$1;
   var $18=_mrb_obj_class($17, $s);
   var $19=_mrb_class_name($16, $18);
   $cn=$19;
   var $20=$1;
   _mrb_str_new($str, $20, ((98336)|0), 9);
   var $21=$cn;
   var $22=(($21)|(0))!=0;
   if ($22) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $24=$1;
   var $25=$1;
   var $26=$cn;
   _mrb_str_new_cstr($3, $25, $26);
   _mrb_str_append($4, $24, $str, $3);
   label = 3; break;
  case 3: 
   var $28=$2;
   var $29=(($28)|(0))!=0;
   if ($29) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $31=$1;
   _mrb_str_cat21770($agg_result, $31, $str, ((98040)|0));
   label = 19; break;
  case 5: 
   var $33=$1;
   _mrb_struct_members($5, $33, $s);
   var $34=$members;
   var $35=$5;
   assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
   var $36=(($members)|0);
   var $37=$36;
   var $38=HEAP32[(($37)>>2)];
   var $39=$38;
   var $40=(($39+20)|0);
   var $41=HEAP32[(($40)>>2)];
   $ptr_members=$41;
   var $42=(($s)|0);
   var $43=$42;
   var $44=HEAP32[(($43)>>2)];
   var $45=$44;
   var $46=(($45+20)|0);
   var $47=HEAP32[(($46)>>2)];
   $ptr=$47;
   var $48=(($s)|0);
   var $49=$48;
   var $50=HEAP32[(($49)>>2)];
   var $51=$50;
   var $52=(($51+12)|0);
   var $53=HEAP32[(($52)>>2)];
   $len=$53;
   $i=0;
   label = 6; break;
  case 6: 
   var $55=$i;
   var $56=$len;
   var $57=(($55)|(0)) < (($56)|(0));
   if ($57) { label = 7; break; } else { label = 18; break; }
  case 7: 
   var $59=$i;
   var $60=(($59)|(0)) > 0;
   if ($60) { label = 8; break; } else { label = 9; break; }
  case 8: 
   var $62=$1;
   _mrb_str_cat21770($6, $62, $str, ((97752)|0));
   label = 12; break;
  case 9: 
   var $64=$cn;
   var $65=(($64)|(0))!=0;
   if ($65) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $67=$1;
   _mrb_str_cat21770($7, $67, $str, ((97436)|0));
   label = 11; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $70=$i;
   var $71=$ptr_members;
   var $72=(($71+((($70)*(12))&-1))|0);
   var $73=$slot;
   var $74=$72;
   assert(12 % 1 === 0);HEAP32[(($73)>>2)]=HEAP32[(($74)>>2)];HEAP32[((($73)+(4))>>2)]=HEAP32[((($74)+(4))>>2)];HEAP32[((($73)+(8))>>2)]=HEAP32[((($74)+(8))>>2)];
   var $75=(($slot)|0);
   var $76=$75;
   var $77=HEAP16[(($76)>>1)];
   $id=$77;
   var $78=$id;
   var $79=_mrb_is_local_id($78);
   var $80=(($79)|(0))!=0;
   if ($80) { label = 14; break; } else { label = 13; break; }
  case 13: 
   var $82=$id;
   var $83=_mrb_is_const_id($82);
   var $84=(($83)|(0))!=0;
   if ($84) { label = 14; break; } else { label = 15; break; }
  case 14: 
   var $86=$1;
   var $87=$id;
   var $88=_mrb_sym2name_len($86, $87, $len1);
   $name=$88;
   var $89=$1;
   var $90=$1;
   var $91=$name;
   var $92=HEAP32[(($len1)>>2)];
   _mrb_str_new($8, $90, $91, $92);
   _mrb_str_append($9, $89, $str, $8);
   label = 16; break;
  case 15: 
   var $94=$1;
   var $95=$1;
   _mrb_inspect($10, $95, $slot);
   _mrb_str_append($11, $94, $str, $10);
   label = 16; break;
  case 16: 
   var $97=$1;
   _mrb_str_cat21770($12, $97, $str, ((97148)|0));
   var $98=$1;
   var $99=$1;
   var $100=$i;
   var $101=$ptr;
   var $102=(($101+((($100)*(12))&-1))|0);
   _mrb_inspect($13, $99, $102);
   _mrb_str_append($14, $98, $str, $13);
   label = 17; break;
  case 17: 
   var $104=$i;
   var $105=((($104)+(1))|0);
   $i=$105;
   label = 6; break;
  case 18: 
   var $107=$1;
   _mrb_str_cat21770($15, $107, $str, ((96840)|0));
   var $108=$agg_result;
   var $109=$str;
   assert(12 % 1 === 0);HEAP32[(($108)>>2)]=HEAP32[(($109)>>2)];HEAP32[((($108)+(4))>>2)]=HEAP32[((($109)+(4))>>2)];HEAP32[((($108)+(8))>>2)]=HEAP32[((($109)+(8))>>2)];
   label = 19; break;
  case 19: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_str_cat21770($agg_result, $mrb, $str, $ptr) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $2;
 $1=$mrb;
 $2=$ptr;
 var $3=$1;
 var $4=$2;
 _mrb_str_cat_cstr($agg_result, $3, $str, $4);
 STACKTOP = sp;
 return;
}
function _mrb_struct_s_members_m($agg_result, $mrb, $klass) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $klass; $klass = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($klass)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($klass)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($klass)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $members=sp;
   var $ary=(sp)+(12);
   var $p;
   var $pend;
   var $2=(sp)+(24);
   var $3=(sp)+(36);
   $1=$mrb;
   var $4=$1;
   _mrb_struct_s_members($2, $4, $klass);
   var $5=$members;
   var $6=$2;
   assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
   var $7=$1;
   var $8=(($members)|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10;
   var $12=(($11+12)|0);
   var $13=HEAP32[(($12)>>2)];
   _mrb_ary_new_capa($3, $7, $13);
   var $14=$ary;
   var $15=$3;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   var $16=(($members)|0);
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   var $19=$18;
   var $20=(($19+20)|0);
   var $21=HEAP32[(($20)>>2)];
   $p=$21;
   var $22=$p;
   var $23=(($members)|0);
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   var $26=$25;
   var $27=(($26+12)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=(($22+((($28)*(12))&-1))|0);
   $pend=$29;
   label = 2; break;
  case 2: 
   var $31=$p;
   var $32=$pend;
   var $33=(($31)>>>(0)) < (($32)>>>(0));
   if ($33) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $35=$1;
   var $36=$p;
   _mrb_ary_push($35, $ary, $36);
   var $37=$p;
   var $38=(($37+12)|0);
   $p=$38;
   label = 2; break;
  case 4: 
   var $40=$agg_result;
   var $41=$ary;
   assert(12 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];HEAP32[((($40)+(8))>>2)]=HEAP32[((($41)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _num_members($mrb, $klass) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $members=sp;
   var $3=(sp)+(12);
   var $4=(sp)+(24);
   $1=$mrb;
   $2=$klass;
   var $5=$1;
   var $6=$2;
   var $7=$6;
   _mrb_obj_value1760($3, $7);
   var $8=$1;
   var $9=_mrb_intern2($8, ((102164)|0), 11);
   _struct_ivar_get($4, $5, $3, $9);
   var $10=$members;
   var $11=$4;
   assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
   var $12=(($members+8)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($13)|(0))==14;
   if ($14) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $16=$1;
   var $17=$1;
   var $18=_mrb_class_get($17, ((104792)|0));
   _mrb_raise($16, $18, ((95220)|0));
   label = 3; break;
  case 3: 
   var $20=(($members)|0);
   var $21=$20;
   var $22=HEAP32[(($21)>>2)];
   var $23=$22;
   var $24=(($23+12)|0);
   var $25=HEAP32[(($24)>>2)];
   STACKTOP = sp;
   return $25;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_struct_ref($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=(($3+8)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+16)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7)|0);
 var $9=HEAP16[(($8)>>1)];
 _mrb_struct_getmember($agg_result, $2, $obj, $9);
 STACKTOP = sp;
 return;
}
function _mrb_struct_set_m($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $val=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_get_args($2, ((87248)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$val,tempInt));
 var $4=$1;
 _mrb_struct_set($agg_result, $4, $obj, $val);
 STACKTOP = sp;
 return;
}
function _mrb_struct_set($agg_result, $mrb, $obj, $val) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $name;
   var $i;
   var $len=sp;
   var $mid;
   var $members=(sp)+(4);
   var $slot=(sp)+(16);
   var $ptr;
   var $ptr_members;
   var $2=(sp)+(28);
   var $3=(sp)+(40);
   $1=$mrb;
   var $4=$1;
   var $5=$1;
   var $6=(($5+8)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=(($7+16)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|0);
   var $11=HEAP16[(($10)>>1)];
   var $12=_mrb_sym2name_len($4, $11, $len);
   $name=$12;
   var $13=$1;
   var $14=$name;
   var $15=HEAP32[(($len)>>2)];
   var $16=((($15)-(1))|0);
   var $17=_mrb_intern2($13, $14, $16);
   $mid=$17;
   var $18=$1;
   _mrb_struct_members($2, $18, $obj);
   var $19=$members;
   var $20=$2;
   assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
   var $21=(($members)|0);
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=$23;
   var $25=(($24+20)|0);
   var $26=HEAP32[(($25)>>2)];
   $ptr_members=$26;
   var $27=(($members)|0);
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $30=$29;
   var $31=(($30+12)|0);
   var $32=HEAP32[(($31)>>2)];
   HEAP32[(($len)>>2)]=$32;
   var $33=(($obj)|0);
   var $34=$33;
   var $35=HEAP32[(($34)>>2)];
   var $36=$35;
   var $37=(($36+20)|0);
   var $38=HEAP32[(($37)>>2)];
   $ptr=$38;
   $i=0;
   label = 2; break;
  case 2: 
   var $40=$i;
   var $41=HEAP32[(($len)>>2)];
   var $42=(($40)>>>(0)) < (($41)>>>(0));
   if ($42) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $44=$i;
   var $45=$ptr_members;
   var $46=(($45+((($44)*(12))&-1))|0);
   var $47=$slot;
   var $48=$46;
   assert(12 % 1 === 0);HEAP32[(($47)>>2)]=HEAP32[(($48)>>2)];HEAP32[((($47)+(4))>>2)]=HEAP32[((($48)+(4))>>2)];HEAP32[((($47)+(8))>>2)]=HEAP32[((($48)+(8))>>2)];
   var $49=(($slot)|0);
   var $50=$49;
   var $51=HEAP16[(($50)>>1)];
   var $52=(($51 << 16) >> 16);
   var $53=$mid;
   var $54=(($53 << 16) >> 16);
   var $55=(($52)|(0))==(($54)|(0));
   if ($55) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $57=$i;
   var $58=$ptr;
   var $59=(($58+((($57)*(12))&-1))|0);
   var $60=$59;
   var $61=$val;
   assert(12 % 1 === 0);HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];HEAP32[((($60)+(8))>>2)]=HEAP32[((($61)+(8))>>2)];
   var $62=$agg_result;
   var $63=$59;
   assert(12 % 1 === 0);HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($63)+(4))>>2)];HEAP32[((($62)+(8))>>2)]=HEAP32[((($63)+(8))>>2)];
   label = 8; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $66=$i;
   var $67=((($66)+(1))|0);
   $i=$67;
   label = 2; break;
  case 7: 
   var $69=$1;
   var $70=$1;
   var $71=_mrb_class_get($70, ((89364)|0));
   var $72=$1;
   var $73=$mid;
   _mrb_sym2str($3, $72, $73);
   _mrb_raisef($69, $71, ((94464)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
   _mrb_nil_value1763($agg_result);
   label = 8; break;
  case 8: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_struct_ref0($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=(($obj)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7)|0);
 var $9=$agg_result;
 var $10=$8;
 assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_struct_ref1($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=(($obj)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+12)|0);
 var $9=$agg_result;
 var $10=$8;
 assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_struct_ref2($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=(($obj)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+24)|0);
 var $9=$agg_result;
 var $10=$8;
 assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_struct_ref3($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=(($obj)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+36)|0);
 var $9=$agg_result;
 var $10=$8;
 assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_struct_ref4($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=(($obj)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+48)|0);
 var $9=$agg_result;
 var $10=$8;
 assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_struct_ref5($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=(($obj)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+60)|0);
 var $9=$agg_result;
 var $10=$8;
 assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_struct_ref6($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=(($obj)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+72)|0);
 var $9=$agg_result;
 var $10=$8;
 assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_struct_ref7($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=(($obj)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+84)|0);
 var $9=$agg_result;
 var $10=$8;
 assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_struct_ref8($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=(($obj)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+96)|0);
 var $9=$agg_result;
 var $10=$8;
 assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _mrb_struct_ref9($agg_result, $mrb, $obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=(($obj)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($5+20)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+108)|0);
 var $9=$agg_result;
 var $10=$8;
 assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
 STACKTOP = sp;
 return;
}
function _GENERATED_TMP_mrb_mruby_symbol_ext_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_mruby_symbol_ext_gem_final($2);
 return;
}
function _mrb_mruby_symbol_ext_gem_init($mrb) {
 var label = 0;
 var $1;
 var $s;
 $1=$mrb;
 var $2=$1;
 var $3=(($2+92)|0);
 var $4=HEAP32[(($3)>>2)];
 $s=$4;
 var $5=$1;
 var $6=$s;
 _mrb_define_class_method($5, $6, ((102044)|0), 488, 0);
 return;
}
function _GENERATED_TMP_mrb_mruby_symbol_ext_gem_init($mrb) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ai;
   var $2=sp;
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_gc_arena_save($3);
   $ai=$4;
   var $5=$1;
   _mrb_mruby_symbol_ext_gem_init($5);
   var $6=$1;
   _mrb_load_irep($2, $6, ((76156)|0));
   var $7=$1;
   var $8=(($7+16)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$1;
   _mrb_print_error($12);
   _exit(1);
   throw "Reached an unreachable!";
  case 3: 
   var $14=$1;
   var $15=$ai;
   _mrb_gc_arena_restore($14, $15);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mruby_symbol_ext_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _mrb_sym_all_symbols($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $k;
   var $sym;
   var $h;
   var $ary=sp;
   var $2=(sp)+(12);
   $1=$mrb;
   var $3=$1;
   var $4=(($3+568)|0);
   var $5=HEAP32[(($4)>>2)];
   $h=$5;
   var $6=$1;
   var $7=$h;
   var $8=(($7+4)|0);
   var $9=HEAP32[(($8)>>2)];
   _mrb_ary_new_capa($ary, $6, $9);
   $k=0;
   label = 2; break;
  case 2: 
   var $11=$k;
   var $12=$h;
   var $13=(($12)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=(($11)|(0))!=(($14)|(0));
   if ($15) { label = 3; break; } else { label = 7; break; }
  case 3: 
   var $17=$k;
   var $18=((((($17)>>>(0)))/(4))&-1);
   var $19=$h;
   var $20=(($19+16)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($21+$18)|0);
   var $23=HEAP8[($22)];
   var $24=(($23)&(255));
   var $25=$k;
   var $26=((((($25)>>>(0)))%(4))&-1);
   var $27=((106212+$26)|0);
   var $28=HEAP8[($27)];
   var $29=(($28)&(255));
   var $30=$24 & $29;
   var $31=(($30)|(0))!=0;
   if ($31) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $33=$k;
   var $34=$h;
   var $35=(($34+24)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36+($33<<1))|0);
   var $38=HEAP16[(($37)>>1)];
   $sym=$38;
   var $39=$1;
   var $40=$sym;
   _mrb_symbol_value1781($2, $40);
   _mrb_ary_push($39, $ary, $2);
   label = 5; break;
  case 5: 
   label = 6; break;
  case 6: 
   var $43=$k;
   var $44=((($43)+(1))|0);
   $k=$44;
   label = 2; break;
  case 7: 
   var $46=$agg_result;
   var $47=$ary;
   assert(12 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($46)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_symbol_value1781($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=4;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP16[(($6)>>1)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _GENERATED_TMP_mrb_mruby_time_gem_init($mrb) {
 var label = 0;
 var $1;
 var $ai;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_gc_arena_save($2);
 $ai=$3;
 var $4=$1;
 _mrb_mruby_time_gem_init($4);
 var $5=$1;
 var $6=$ai;
 _mrb_gc_arena_restore($5, $6);
 return;
}
function _GENERATED_TMP_mrb_mruby_time_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 _mrb_mruby_time_gem_final($2);
 return;
}
function _mrb_mruby_time_gem_init($mrb) {
 var label = 0;
 var $1;
 var $tc;
 $1=$mrb;
 var $2=$1;
 var $3=$1;
 var $4=(($3+44)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=_mrb_define_class($2, ((101984)|0), $5);
 $tc=$6;
 var $7=$tc;
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=$9 >>> 11;
 var $11=$10 & 2097151;
 var $12=$11 & -256;
 var $13=$12 | 21;
 var $14=$tc;
 var $15=$13 & 2097151;
 var $16=$14;
 var $17=$15 & 2097151;
 var $18=$17 << 11;
 var $19=HEAP32[(($16)>>2)];
 var $20=$19 & 2047;
 var $21=$20 | $18;
 HEAP32[(($16)>>2)]=$21;
 var $22=$1;
 var $23=$tc;
 var $24=$1;
 var $25=_mrb_class_get($24, ((104780)|0));
 _mrb_include_module($22, $23, $25);
 var $26=$1;
 var $27=$tc;
 _mrb_define_class_method($26, $27, ((100168)|0), 430, 4096);
 var $28=$1;
 var $29=$tc;
 _mrb_define_class_method($28, $29, ((96492)|0), 52, 311296);
 var $30=$1;
 var $31=$tc;
 _mrb_define_class_method($30, $31, ((93992)|0), 432, 311296);
 var $32=$1;
 var $33=$tc;
 _mrb_define_class_method($32, $33, ((91408)|0), 432, 311296);
 var $34=$1;
 var $35=$tc;
 _mrb_define_class_method($34, $35, ((89348)|0), 492, 0);
 var $36=$1;
 var $37=$tc;
 _mrb_define_class_method($36, $37, ((88144)|0), 52, 311296);
 var $38=$1;
 var $39=$tc;
 _mrb_define_method($38, $39, ((87228)|0), 358, 262144);
 var $40=$1;
 var $41=$tc;
 _mrb_define_method($40, $41, ((86372)|0), 360, 262144);
 var $42=$1;
 var $43=$tc;
 _mrb_define_method($42, $43, ((105776)|0), 602, 262144);
 var $44=$1;
 var $45=$tc;
 _mrb_define_method($44, $45, ((105180)|0), 134, 262144);
 var $46=$1;
 var $47=$tc;
 _mrb_define_method($46, $47, ((104384)|0), 214, 0);
 var $48=$1;
 var $49=$tc;
 _mrb_define_method($48, $49, ((103848)|0), 214, 0);
 var $50=$1;
 var $51=$tc;
 _mrb_define_method($50, $51, ((103368)|0), 214, 0);
 var $52=$1;
 var $53=$tc;
 _mrb_define_method($52, $53, ((102872)|0), 214, 0);
 var $54=$1;
 var $55=$tc;
 _mrb_define_method($54, $55, ((102512)|0), 350, 0);
 var $56=$1;
 var $57=$tc;
 _mrb_define_method($56, $57, ((102176)|0), 254, 0);
 var $58=$1;
 var $59=$tc;
 _mrb_define_method($58, $59, ((101760)|0), 288, 0);
 var $60=$1;
 var $61=$tc;
 _mrb_define_method($60, $61, ((101288)|0), 194, 0);
 var $62=$1;
 var $63=$tc;
 _mrb_define_method($62, $63, ((100768)|0), 288, 0);
 var $64=$1;
 var $65=$tc;
 _mrb_define_method($64, $65, ((100460)|0), 606, 0);
 var $66=$1;
 var $67=$tc;
 _mrb_define_method($66, $67, ((99976)|0), 568, 0);
 var $68=$1;
 var $69=$tc;
 _mrb_define_method($68, $69, ((99724)|0), 658, 0);
 var $70=$1;
 var $71=$tc;
 _mrb_define_method($70, $71, ((99308)|0), 712, 0);
 var $72=$1;
 var $73=$tc;
 _mrb_define_method($72, $73, ((98880)|0), 162, 0);
 var $74=$1;
 var $75=$tc;
 _mrb_define_method($74, $75, ((98332)|0), 148, 0);
 var $76=$1;
 var $77=$tc;
 _mrb_define_method($76, $77, ((98036)|0), 710, 0);
 var $78=$1;
 var $79=$tc;
 _mrb_define_method($78, $79, ((97744)|0), 710, 0);
 var $80=$1;
 var $81=$tc;
 _mrb_define_method($80, $81, ((97432)|0), 452, 0);
 var $82=$1;
 var $83=$tc;
 _mrb_define_method($82, $83, ((97136)|0), 412, 0);
 var $84=$1;
 var $85=$tc;
 _mrb_define_method($84, $85, ((96828)|0), 408, 0);
 var $86=$1;
 var $87=$tc;
 _mrb_define_method($86, $87, ((96312)|0), 700, 0);
 var $88=$1;
 var $89=$tc;
 _mrb_define_method($88, $89, ((88144)|0), 568, 0);
 var $90=$1;
 var $91=$tc;
 _mrb_define_method($90, $91, ((96096)|0), 606, 0);
 var $92=$1;
 var $93=$tc;
 _mrb_define_method($92, $93, ((95920)|0), 526, 0);
 var $94=$1;
 var $95=$tc;
 _mrb_define_method($94, $95, ((95704)|0), 414, 0);
 var $96=$1;
 var $97=$tc;
 _mrb_define_method($96, $97, ((95488)|0), 370, 0);
 var $98=$1;
 var $99=$tc;
 _mrb_define_method($98, $99, ((95208)|0), 418, 0);
 var $100=$1;
 var $101=$tc;
 _mrb_define_method($100, $101, ((95012)|0), 146, 262144);
 var $102=$1;
 var $103=$tc;
 _mrb_define_method($102, $103, ((94812)|0), 132, 262144);
 return;
}
function _mrb_time_at($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $f=sp;
 var $f2=(sp)+(8);
 $1=$mrb;
 (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($f2)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f2)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $2=$1;
 var $3=_mrb_get_args($2, ((88016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$f,HEAP32[(((tempInt)+(4))>>2)]=$f2,tempInt));
 var $4=$1;
 var $5=(($self)|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 _mrb_time_make($agg_result, $4, $8, $9, $10, 2);
 STACKTOP = sp;
 return;
}
function _mrb_time_gm($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $ayear=sp;
 var $amonth=(sp)+(4);
 var $aday=(sp)+(8);
 var $ahour=(sp)+(12);
 var $amin=(sp)+(16);
 var $asec=(sp)+(20);
 var $ausec=(sp)+(24);
 $1=$mrb;
 HEAP32[(($ayear)>>2)]=0;
 HEAP32[(($amonth)>>2)]=1;
 HEAP32[(($aday)>>2)]=1;
 HEAP32[(($ahour)>>2)]=0;
 HEAP32[(($amin)>>2)]=0;
 HEAP32[(($asec)>>2)]=0;
 HEAP32[(($ausec)>>2)]=0;
 var $2=$1;
 var $3=_mrb_get_args($2, ((88092)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$ayear,HEAP32[(((tempInt)+(4))>>2)]=$amonth,HEAP32[(((tempInt)+(8))>>2)]=$aday,HEAP32[(((tempInt)+(12))>>2)]=$ahour,HEAP32[(((tempInt)+(16))>>2)]=$amin,HEAP32[(((tempInt)+(20))>>2)]=$asec,HEAP32[(((tempInt)+(24))>>2)]=$ausec,tempInt));
 var $4=$1;
 var $5=(($self)|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 var $9=$1;
 var $10=HEAP32[(($ayear)>>2)];
 var $11=HEAP32[(($amonth)>>2)];
 var $12=HEAP32[(($aday)>>2)];
 var $13=HEAP32[(($ahour)>>2)];
 var $14=HEAP32[(($amin)>>2)];
 var $15=HEAP32[(($asec)>>2)];
 var $16=HEAP32[(($ausec)>>2)];
 var $17=_time_mktime($9, $10, $11, $12, $13, $14, $15, $16, 1);
 _mrb_time_wrap($agg_result, $4, $8, $17);
 STACKTOP = sp;
 return;
}
function _mrb_time_local($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 var $ayear=sp;
 var $amonth=(sp)+(4);
 var $aday=(sp)+(8);
 var $ahour=(sp)+(12);
 var $amin=(sp)+(16);
 var $asec=(sp)+(20);
 var $ausec=(sp)+(24);
 $1=$mrb;
 HEAP32[(($ayear)>>2)]=0;
 HEAP32[(($amonth)>>2)]=1;
 HEAP32[(($aday)>>2)]=1;
 HEAP32[(($ahour)>>2)]=0;
 HEAP32[(($amin)>>2)]=0;
 HEAP32[(($asec)>>2)]=0;
 HEAP32[(($ausec)>>2)]=0;
 var $2=$1;
 var $3=_mrb_get_args($2, ((88092)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$ayear,HEAP32[(((tempInt)+(4))>>2)]=$amonth,HEAP32[(((tempInt)+(8))>>2)]=$aday,HEAP32[(((tempInt)+(12))>>2)]=$ahour,HEAP32[(((tempInt)+(16))>>2)]=$amin,HEAP32[(((tempInt)+(20))>>2)]=$asec,HEAP32[(((tempInt)+(24))>>2)]=$ausec,tempInt));
 var $4=$1;
 var $5=(($self)|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 var $9=$1;
 var $10=HEAP32[(($ayear)>>2)];
 var $11=HEAP32[(($amonth)>>2)];
 var $12=HEAP32[(($aday)>>2)];
 var $13=HEAP32[(($ahour)>>2)];
 var $14=HEAP32[(($amin)>>2)];
 var $15=HEAP32[(($asec)>>2)];
 var $16=HEAP32[(($ausec)>>2)];
 var $17=_time_mktime($9, $10, $11, $12, $13, $14, $15, $16, 2);
 _mrb_time_wrap($agg_result, $4, $8, $17);
 STACKTOP = sp;
 return;
}
function _mrb_time_now($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=(($self)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$5;
 var $7=$1;
 var $8=_current_mrb_time($7);
 _mrb_time_wrap($agg_result, $2, $6, $8);
 STACKTOP = sp;
 return;
}
function _mrb_time_eq($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $other=sp;
   var $tm1;
   var $tm2;
   var $eq_p;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((94460)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$other,tempInt));
   var $4=$1;
   var $5=_mrb_data_get_ptr($4, $self, 74660);
   var $6=$5;
   $tm1=$6;
   var $7=$1;
   var $8=_mrb_data_get_ptr($7, $other, 74660);
   var $9=$8;
   $tm2=$9;
   var $10=$tm1;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { var $32 = 0;label = 5; break; }
  case 2: 
   var $13=$tm2;
   var $14=(($13)|(0))!=0;
   if ($14) { label = 3; break; } else { var $32 = 0;label = 5; break; }
  case 3: 
   var $16=$tm1;
   var $17=(($16)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$tm2;
   var $20=(($19)|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=(($18)|(0))==(($21)|(0));
   if ($22) { label = 4; break; } else { var $32 = 0;label = 5; break; }
  case 4: 
   var $24=$tm1;
   var $25=(($24+4)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=$tm2;
   var $28=(($27+4)|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=(($26)|(0))==(($29)|(0));
   var $32 = $30;label = 5; break;
  case 5: 
   var $32;
   var $33=(($32)&(1));
   var $34=(($33) & 255);
   $eq_p=$34;
   var $35=$eq_p;
   _mrb_bool_value1867($agg_result, $35);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_cmp($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $other=sp;
   var $tm1;
   var $tm2;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((94460)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$other,tempInt));
   var $4=$1;
   var $5=_mrb_data_get_ptr($4, $self, 74660);
   var $6=$5;
   $tm1=$6;
   var $7=$1;
   var $8=_mrb_data_get_ptr($7, $other, 74660);
   var $9=$8;
   $tm2=$9;
   var $10=$tm1;
   var $11=(($10)|(0))!=0;
   if ($11) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $13=$tm2;
   var $14=(($13)|(0))!=0;
   if ($14) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _mrb_nil_value1864($agg_result);
   label = 15; break;
  case 4: 
   var $17=$tm1;
   var $18=(($17)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$tm2;
   var $21=(($20)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($19)|(0)) > (($22)|(0));
   if ($23) { label = 5; break; } else { label = 6; break; }
  case 5: 
   _mrb_fixnum_value1865($agg_result, 1);
   label = 15; break;
  case 6: 
   var $26=$tm1;
   var $27=(($26)|0);
   var $28=HEAP32[(($27)>>2)];
   var $29=$tm2;
   var $30=(($29)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($28)|(0)) < (($31)|(0));
   if ($32) { label = 7; break; } else { label = 8; break; }
  case 7: 
   _mrb_fixnum_value1865($agg_result, -1);
   label = 15; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $36=$tm1;
   var $37=(($36+4)|0);
   var $38=HEAP32[(($37)>>2)];
   var $39=$tm2;
   var $40=(($39+4)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($38)|(0)) > (($41)|(0));
   if ($42) { label = 10; break; } else { label = 11; break; }
  case 10: 
   _mrb_fixnum_value1865($agg_result, 1);
   label = 15; break;
  case 11: 
   var $45=$tm1;
   var $46=(($45+4)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$tm2;
   var $49=(($48+4)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($47)|(0)) < (($50)|(0));
   if ($51) { label = 12; break; } else { label = 13; break; }
  case 12: 
   _mrb_fixnum_value1865($agg_result, -1);
   label = 15; break;
  case 13: 
   label = 14; break;
  case 14: 
   _mrb_fixnum_value1865($agg_result, 0);
   label = 15; break;
  case 15: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_plus($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $f=sp;
   var $tm;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((88400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$f,tempInt));
   var $4=$1;
   var $5=_mrb_data_get_ptr($4, $self, 74660);
   var $6=$5;
   $tm=$6;
   var $7=$tm;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value1864($agg_result);
   label = 4; break;
  case 3: 
   var $11=$1;
   var $12=$1;
   var $13=_mrb_obj_class($12, $self);
   var $14=$tm;
   var $15=(($14)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0));
   var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $19=($17)+($18);
   var $20=$tm;
   var $21=(($20+4)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22)|(0));
   var $24=$tm;
   var $25=(($24+8)|0);
   var $26=HEAP32[(($25)>>2)];
   _mrb_time_make($agg_result, $11, $13, $19, $23, $26);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_minus($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $f=sp;
   var $other=(sp)+(8);
   var $tm;
   var $tm2;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((94460)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$other,tempInt));
   var $4=$1;
   var $5=_mrb_data_get_ptr($4, $self, 74660);
   var $6=$5;
   $tm=$6;
   var $7=$tm;
   var $8=(($7)|(0))!=0;
   if ($8) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value1864($agg_result);
   label = 6; break;
  case 3: 
   var $11=$1;
   var $12=_mrb_data_get_ptr($11, $other, 74660);
   var $13=$12;
   $tm2=$13;
   var $14=$tm2;
   var $15=(($14)|(0))!=0;
   if ($15) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $17=$tm;
   var $18=(($17)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$tm2;
   var $21=(($20)|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=((($19)-($22))|0);
   var $24=(($23)|(0));
   var $25=$tm;
   var $26=(($25+4)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$tm2;
   var $29=(($28+4)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=((($27)-($30))|0);
   var $32=(($31)|(0));
   var $33=($32)/(1000000);
   var $34=($24)+($33);
   (HEAPF64[(tempDoublePtr)>>3]=$34,HEAP32[(($f)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   var $35=$1;
   var $36=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   _mrb_float_value1866($agg_result, $35, $36);
   label = 6; break;
  case 5: 
   var $38=$1;
   var $39=_mrb_get_args($38, ((88400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$f,tempInt));
   var $40=$1;
   var $41=$1;
   var $42=_mrb_obj_class($41, $self);
   var $43=$tm;
   var $44=(($43)|0);
   var $45=HEAP32[(($44)>>2)];
   var $46=(($45)|(0));
   var $47=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $48=($46)-($47);
   var $49=$tm;
   var $50=(($49+4)|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=(($51)|(0));
   var $53=$tm;
   var $54=(($53+8)|0);
   var $55=HEAP32[(($54)>>2)];
   _mrb_time_make($agg_result, $40, $42, $48, $52, $55);
   label = 6; break;
  case 6: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_asctime($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   var $d;
   var $buf=sp;
   var $len;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value1864($agg_result);
   label = 4; break;
  case 3: 
   var $9=$tm;
   var $10=(($9+12)|0);
   $d=$10;
   var $11=(($buf)|0);
   var $12=$d;
   var $13=(($12+24)|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=((58776+($14<<2))|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=$d;
   var $18=(($17+16)|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=((75104+($19<<2))|0);
   var $21=HEAP32[(($20)>>2)];
   var $22=$d;
   var $23=(($22+12)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=$d;
   var $26=(($25+8)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=$d;
   var $29=(($28+4)|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$d;
   var $32=(($31)|0);
   var $33=HEAP32[(($32)>>2)];
   var $34=$tm;
   var $35=(($34+8)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36)|(0))==1;
   var $38=$37 ? (((92012)|0)) : (((111140)|0));
   var $39=$d;
   var $40=(($39+20)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=((($41)+(1900))|0);
   var $43=_snprintf($11, 256, ((92256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$16,HEAP32[(((tempInt)+(4))>>2)]=$21,HEAP32[(((tempInt)+(8))>>2)]=$24,HEAP32[(((tempInt)+(12))>>2)]=$27,HEAP32[(((tempInt)+(16))>>2)]=$30,HEAP32[(((tempInt)+(20))>>2)]=$33,HEAP32[(((tempInt)+(24))>>2)]=$38,HEAP32[(((tempInt)+(28))>>2)]=$42,tempInt));
   $len=$43;
   var $44=$1;
   var $45=(($buf)|0);
   var $46=$len;
   _mrb_str_new($agg_result, $44, $45, $46);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_day($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value1864($agg_result);
   label = 4; break;
  case 3: 
   var $9=$tm;
   var $10=(($9+12)|0);
   var $11=(($10+12)|0);
   var $12=HEAP32[(($11)>>2)];
   _mrb_fixnum_value1865($agg_result, $12);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_dstp($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value1864($agg_result);
   label = 4; break;
  case 3: 
   var $9=$tm;
   var $10=(($9+12)|0);
   var $11=(($10+32)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12) & 255);
   _mrb_bool_value1867($agg_result, $13);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_getutc($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   var $tm2;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=$agg_result;
   var $9=$self;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   label = 4; break;
  case 3: 
   var $11=$1;
   var $12=_mrb_malloc($11, 56);
   var $13=$12;
   $tm2=$13;
   var $14=$tm2;
   var $15=$tm;
   var $16=$14;
   var $17=$15;
   assert(56 % 1 === 0);(_memcpy($16, $17, 56)|0);
   var $18=$tm2;
   var $19=(($18+8)|0);
   HEAP32[(($19)>>2)]=1;
   var $20=$tm2;
   var $21=_mrb_time_update_datetime($20);
   var $22=$1;
   var $23=$1;
   var $24=_mrb_obj_class($23, $self);
   var $25=$tm2;
   _mrb_time_wrap($agg_result, $22, $24, $25);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_getlocal($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   var $tm2;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=$agg_result;
   var $9=$self;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   label = 4; break;
  case 3: 
   var $11=$1;
   var $12=_mrb_malloc($11, 56);
   var $13=$12;
   $tm2=$13;
   var $14=$tm2;
   var $15=$tm;
   var $16=$14;
   var $17=$15;
   assert(56 % 1 === 0);(_memcpy($16, $17, 56)|0);
   var $18=$tm2;
   var $19=(($18+8)|0);
   HEAP32[(($19)>>2)]=2;
   var $20=$tm2;
   var $21=_mrb_time_update_datetime($20);
   var $22=$1;
   var $23=$1;
   var $24=_mrb_obj_class($23, $self);
   var $25=$tm2;
   _mrb_time_wrap($agg_result, $22, $24, $25);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_utcp($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value1864($agg_result);
   label = 4; break;
  case 3: 
   var $9=$tm;
   var $10=(($9+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)|(0))==1;
   var $13=(($12)&(1));
   var $14=(($13) & 255);
   _mrb_bool_value1867($agg_result, $14);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_utc($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$tm;
   var $9=(($8+8)|0);
   HEAP32[(($9)>>2)]=1;
   var $10=$tm;
   var $11=_mrb_time_update_datetime($10);
   label = 3; break;
  case 3: 
   var $13=$agg_result;
   var $14=$self;
   assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_hour($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value1864($agg_result);
   label = 4; break;
  case 3: 
   var $9=$tm;
   var $10=(($9+12)|0);
   var $11=(($10+8)|0);
   var $12=HEAP32[(($11)>>2)];
   _mrb_fixnum_value1865($agg_result, $12);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_localtime($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=$agg_result;
   var $9=$self;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   label = 4; break;
  case 3: 
   var $11=$tm;
   var $12=(($11+8)|0);
   HEAP32[(($12)>>2)]=2;
   var $13=$tm;
   var $14=_mrb_time_update_datetime($13);
   var $15=$agg_result;
   var $16=$self;
   assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_mday($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value1864($agg_result);
   label = 4; break;
  case 3: 
   var $9=$tm;
   var $10=(($9+12)|0);
   var $11=(($10+12)|0);
   var $12=HEAP32[(($11)>>2)];
   _mrb_fixnum_value1865($agg_result, $12);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_mruby_time_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _is_leapyear($y) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$y;
   var $2=$1;
   var $3=((((($2)>>>(0)))%(4))&-1);
   var $4=(($3)|(0))==0;
   if ($4) { label = 2; break; } else { var $16 = 0;label = 5; break; }
  case 2: 
   var $6=$1;
   var $7=((((($6)>>>(0)))%(100))&-1);
   var $8=(($7)|(0))!=0;
   if ($8) { var $14 = 1;label = 4; break; } else { label = 3; break; }
  case 3: 
   var $10=$1;
   var $11=((((($10)>>>(0)))%(400))&-1);
   var $12=(($11)|(0))==0;
   var $14 = $12;label = 4; break;
  case 4: 
   var $14;
   var $16 = $14;label = 5; break;
  case 5: 
   var $16;
   var $17=(($16)&(1));
   return $17;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_min($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value1864($agg_result);
   label = 4; break;
  case 3: 
   var $9=$tm;
   var $10=(($9+12)|0);
   var $11=(($10+4)|0);
   var $12=HEAP32[(($11)>>2)];
   _mrb_fixnum_value1865($agg_result, $12);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_mon($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value1864($agg_result);
   label = 4; break;
  case 3: 
   var $9=$tm;
   var $10=(($9+12)|0);
   var $11=(($10+16)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=((($12)+(1))|0);
   _mrb_fixnum_value1865($agg_result, $13);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_sec($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value1864($agg_result);
   label = 4; break;
  case 3: 
   var $9=$tm;
   var $10=(($9+12)|0);
   var $11=(($10)|0);
   var $12=HEAP32[(($11)>>2)];
   _mrb_fixnum_value1865($agg_result, $12);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_to_i($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value1864($agg_result);
   label = 4; break;
  case 3: 
   var $9=$tm;
   var $10=(($9)|0);
   var $11=HEAP32[(($10)>>2)];
   _mrb_fixnum_value1865($agg_result, $11);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_to_f($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value1864($agg_result);
   label = 4; break;
  case 3: 
   var $9=$1;
   var $10=$tm;
   var $11=(($10)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0));
   var $14=$tm;
   var $15=(($14+4)|0);
   var $16=HEAP32[(($15)>>2)];
   var $17=(($16)|(0));
   var $18=($17)/(1000000);
   var $19=($13)+($18);
   _mrb_float_value1866($agg_result, $9, $19);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_usec($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value1864($agg_result);
   label = 4; break;
  case 3: 
   var $9=$tm;
   var $10=(($9+4)|0);
   var $11=HEAP32[(($10)>>2)];
   _mrb_fixnum_value1865($agg_result, $11);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_wday($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value1864($agg_result);
   label = 4; break;
  case 3: 
   var $9=$tm;
   var $10=(($9+12)|0);
   var $11=(($10+24)|0);
   var $12=HEAP32[(($11)>>2)];
   _mrb_fixnum_value1865($agg_result, $12);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_yday($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value1864($agg_result);
   label = 4; break;
  case 3: 
   var $9=$tm;
   var $10=(($9+12)|0);
   var $11=(($10+28)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=((($12)+(1))|0);
   _mrb_fixnum_value1865($agg_result, $13);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_year($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value1864($agg_result);
   label = 4; break;
  case 3: 
   var $9=$tm;
   var $10=(($9+12)|0);
   var $11=(($10+20)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=((($12)+(1900))|0);
   _mrb_fixnum_value1865($agg_result, $13);
   label = 4; break;
  case 4: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_zone($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tm;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_data_get_ptr($2, $self, 74660);
   var $4=$3;
   $tm=$4;
   var $5=$tm;
   var $6=(($5)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   _mrb_nil_value1864($agg_result);
   label = 8; break;
  case 3: 
   var $9=$tm;
   var $10=(($9+8)|0);
   var $11=HEAP32[(($10)>>2)];
   var $12=(($11)>>>(0)) <= 0;
   if ($12) { label = 4; break; } else { label = 5; break; }
  case 4: 
   _mrb_nil_value1864($agg_result);
   label = 8; break;
  case 5: 
   var $15=$tm;
   var $16=(($15+8)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)>>>(0)) >= 3;
   if ($18) { label = 6; break; } else { label = 7; break; }
  case 6: 
   _mrb_nil_value1864($agg_result);
   label = 8; break;
  case 7: 
   var $21=$1;
   var $22=$tm;
   var $23=(($22+8)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=((58804+($24<<2))|0);
   var $26=HEAP32[(($25)>>2)];
   _mrb_str_new_cstr($agg_result, $21, $26);
   label = 8; break;
  case 8: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_initialize($agg_result, $mrb, $self) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ayear=sp;
   var $amonth=(sp)+(4);
   var $aday=(sp)+(8);
   var $ahour=(sp)+(12);
   var $amin=(sp)+(16);
   var $asec=(sp)+(20);
   var $ausec=(sp)+(24);
   var $n;
   var $tm;
   $1=$mrb;
   HEAP32[(($ayear)>>2)]=0;
   HEAP32[(($amonth)>>2)]=1;
   HEAP32[(($aday)>>2)]=1;
   HEAP32[(($ahour)>>2)]=0;
   HEAP32[(($amin)>>2)]=0;
   HEAP32[(($asec)>>2)]=0;
   HEAP32[(($ausec)>>2)]=0;
   var $2=(($self)|0);
   var $3=$2;
   var $4=HEAP32[(($3)>>2)];
   var $5=$4;
   var $6=(($5+20)|0);
   var $7=HEAP32[(($6)>>2)];
   var $8=$7;
   $tm=$8;
   var $9=$tm;
   var $10=(($9)|(0))!=0;
   if ($10) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $12=$1;
   var $13=$tm;
   var $14=$13;
   _mrb_time_free($12, $14);
   label = 3; break;
  case 3: 
   var $16=(($self)|0);
   var $17=$16;
   var $18=HEAP32[(($17)>>2)];
   var $19=$18;
   var $20=(($19+16)|0);
   HEAP32[(($20)>>2)]=74660;
   var $21=(($self)|0);
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=$23;
   var $25=(($24+20)|0);
   HEAP32[(($25)>>2)]=0;
   var $26=$1;
   var $27=_mrb_get_args($26, ((93560)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$ayear,HEAP32[(((tempInt)+(4))>>2)]=$amonth,HEAP32[(((tempInt)+(8))>>2)]=$aday,HEAP32[(((tempInt)+(12))>>2)]=$ahour,HEAP32[(((tempInt)+(16))>>2)]=$amin,HEAP32[(((tempInt)+(20))>>2)]=$asec,HEAP32[(((tempInt)+(24))>>2)]=$ausec,tempInt));
   $n=$27;
   var $28=$n;
   var $29=(($28)|(0))==0;
   if ($29) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $31=$1;
   var $32=_current_mrb_time($31);
   $tm=$32;
   label = 6; break;
  case 5: 
   var $34=$1;
   var $35=HEAP32[(($ayear)>>2)];
   var $36=HEAP32[(($amonth)>>2)];
   var $37=HEAP32[(($aday)>>2)];
   var $38=HEAP32[(($ahour)>>2)];
   var $39=HEAP32[(($amin)>>2)];
   var $40=HEAP32[(($asec)>>2)];
   var $41=HEAP32[(($ausec)>>2)];
   var $42=_time_mktime($34, $35, $36, $37, $38, $39, $40, $41, 2);
   $tm=$42;
   label = 6; break;
  case 6: 
   var $44=$tm;
   var $45=$44;
   var $46=(($self)|0);
   var $47=$46;
   var $48=HEAP32[(($47)>>2)];
   var $49=$48;
   var $50=(($49+20)|0);
   HEAP32[(($50)>>2)]=$45;
   var $51=$agg_result;
   var $52=$self;
   assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($52)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_initialize_copy($agg_result, $mrb, $copy) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $copy; $copy = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($copy)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($copy)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($copy)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $src=sp;
   $1=$mrb;
   var $2=$1;
   var $3=_mrb_get_args($2, ((94460)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=$src,tempInt));
   var $4=$1;
   var $5=_mrb_obj_equal($4, $copy, $src);
   var $6=(($5 << 24) >> 24)!=0;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$agg_result;
   var $9=$copy;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   label = 8; break;
  case 3: 
   var $11=$1;
   var $12=$1;
   var $13=_mrb_obj_class($12, $copy);
   var $14=_mrb_obj_is_instance_of($11, $src, $13);
   var $15=(($14 << 24) >> 24)!=0;
   if ($15) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $17=$1;
   var $18=$1;
   var $19=_mrb_class_get($18, ((94244)|0));
   _mrb_raise($17, $19, ((93840)|0));
   label = 5; break;
  case 5: 
   var $21=(($copy)|0);
   var $22=$21;
   var $23=HEAP32[(($22)>>2)];
   var $24=$23;
   var $25=(($24+20)|0);
   var $26=HEAP32[(($25)>>2)];
   var $27=(($26)|(0))!=0;
   if ($27) { label = 7; break; } else { label = 6; break; }
  case 6: 
   var $29=$1;
   var $30=_mrb_malloc($29, 56);
   var $31=(($copy)|0);
   var $32=$31;
   var $33=HEAP32[(($32)>>2)];
   var $34=$33;
   var $35=(($34+20)|0);
   HEAP32[(($35)>>2)]=$30;
   var $36=(($copy)|0);
   var $37=$36;
   var $38=HEAP32[(($37)>>2)];
   var $39=$38;
   var $40=(($39+16)|0);
   HEAP32[(($40)>>2)]=74660;
   label = 7; break;
  case 7: 
   var $42=(($copy)|0);
   var $43=$42;
   var $44=HEAP32[(($43)>>2)];
   var $45=$44;
   var $46=(($45+20)|0);
   var $47=HEAP32[(($46)>>2)];
   var $48=$47;
   var $49=(($src)|0);
   var $50=$49;
   var $51=HEAP32[(($50)>>2)];
   var $52=$51;
   var $53=(($52+20)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=$54;
   var $56=$48;
   var $57=$55;
   assert(56 % 1 === 0);(_memcpy($56, $57, 56)|0);
   var $58=$agg_result;
   var $59=$copy;
   assert(12 % 1 === 0);HEAP32[(($58)>>2)]=HEAP32[(($59)>>2)];HEAP32[((($58)+(4))>>2)]=HEAP32[((($59)+(4))>>2)];HEAP32[((($58)+(8))>>2)]=HEAP32[((($59)+(8))>>2)];
   label = 8; break;
  case 8: 
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_free($mrb, $ptr) {
 var label = 0;
 var $1;
 var $2;
 $1=$mrb;
 $2=$ptr;
 var $3=$1;
 var $4=$2;
 _mrb_free($3, $4);
 return;
}
function _current_mrb_time($mrb) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $tm;
 var $tv=sp;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_malloc($2, 56);
 var $4=$3;
 $tm=$4;
 var $5=_gettimeofday($tv, 0);
 var $6=(($tv)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$tm;
 var $9=(($8)|0);
 HEAP32[(($9)>>2)]=$7;
 var $10=(($tv+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$tm;
 var $13=(($12+4)|0);
 HEAP32[(($13)>>2)]=$11;
 var $14=$tm;
 var $15=(($14+8)|0);
 HEAP32[(($15)>>2)]=2;
 var $16=$tm;
 var $17=_mrb_time_update_datetime($16);
 var $18=$tm;
 STACKTOP = sp;
 return $18;
}
function _time_mktime($mrb, $ayear, $amonth, $aday, $ahour, $amin, $asec, $ausec, $_timezone) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 44)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $5;
   var $6;
   var $7;
   var $8;
   var $9;
   var $nowsecs;
   var $nowtime=sp;
   $1=$mrb;
   $2=$ayear;
   $3=$amonth;
   $4=$aday;
   $5=$ahour;
   $6=$amin;
   $7=$asec;
   $8=$ausec;
   $9=$_timezone;
   var $10=$nowtime;
   _memset($10, 0, 44);
   var $11=$2;
   var $12=((($11)-(1900))|0);
   var $13=(($nowtime+20)|0);
   HEAP32[(($13)>>2)]=$12;
   var $14=$3;
   var $15=((($14)-(1))|0);
   var $16=(($nowtime+16)|0);
   HEAP32[(($16)>>2)]=$15;
   var $17=$4;
   var $18=(($nowtime+12)|0);
   HEAP32[(($18)>>2)]=$17;
   var $19=$5;
   var $20=(($nowtime+8)|0);
   HEAP32[(($20)>>2)]=$19;
   var $21=$6;
   var $22=(($nowtime+4)|0);
   HEAP32[(($22)>>2)]=$21;
   var $23=$7;
   var $24=(($nowtime)|0);
   HEAP32[(($24)>>2)]=$23;
   var $25=(($nowtime+32)|0);
   HEAP32[(($25)>>2)]=-1;
   var $26=$9;
   var $27=(($26)|(0))==1;
   if ($27) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $29=_my_timgm($nowtime);
   $nowsecs=$29;
   label = 4; break;
  case 3: 
   var $31=_mktime($nowtime);
   $nowsecs=$31;
   label = 4; break;
  case 4: 
   var $33=$nowsecs;
   var $34=(($33)|(0)) < 0;
   if ($34) { label = 5; break; } else { label = 6; break; }
  case 5: 
   var $36=$1;
   var $37=$1;
   var $38=_mrb_class_get($37, ((93280)|0));
   _mrb_raise($36, $38, ((93044)|0));
   label = 6; break;
  case 6: 
   var $40=$1;
   var $41=$nowsecs;
   var $42=(($41)|(0));
   var $43=$8;
   var $44=(($43)|(0));
   var $45=$9;
   var $46=_mrb_time_alloc($40, $42, $44, $45);
   STACKTOP = sp;
   return $46;
  default: assert(0, "bad label: " + label);
 }
}
function _my_timgm($tm) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $r;
   var $i;
   var $nday;
   $1=$tm;
   $r=0;
   var $2=$1;
   var $3=(($2+20)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=((($4)+(1900))|0);
   var $6=_is_leapyear($5);
   var $7=((59784+((($6)*(48))&-1))|0);
   var $8=(($7)|0);
   $nday=$8;
   $i=70;
   label = 2; break;
  case 2: 
   var $10=$i;
   var $11=$1;
   var $12=(($11+20)|0);
   var $13=HEAP32[(($12)>>2)];
   var $14=(($10)|(0)) < (($13)|(0));
   if ($14) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $16=$i;
   var $17=((($16)+(1900))|0);
   var $18=_is_leapyear($17);
   var $19=(($18)|(0))!=0;
   var $20=$19 ? 31622400 : 31536000;
   var $21=$r;
   var $22=((($21)+($20))|0);
   $r=$22;
   label = 4; break;
  case 4: 
   var $24=$i;
   var $25=((($24)+(1))|0);
   $i=$25;
   label = 2; break;
  case 5: 
   $i=0;
   label = 6; break;
  case 6: 
   var $28=$i;
   var $29=$1;
   var $30=(($29+16)|0);
   var $31=HEAP32[(($30)>>2)];
   var $32=(($28)|(0)) < (($31)|(0));
   if ($32) { label = 7; break; } else { label = 9; break; }
  case 7: 
   var $34=$i;
   var $35=$nday;
   var $36=(($35+($34<<2))|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=((($37)*(24))&-1);
   var $39=((($38)*(60))&-1);
   var $40=((($39)*(60))&-1);
   var $41=$r;
   var $42=((($41)+($40))|0);
   $r=$42;
   label = 8; break;
  case 8: 
   var $44=$i;
   var $45=((($44)+(1))|0);
   $i=$45;
   label = 6; break;
  case 9: 
   var $47=$1;
   var $48=(($47+12)|0);
   var $49=HEAP32[(($48)>>2)];
   var $50=((($49)-(1))|0);
   var $51=((($50)*(24))&-1);
   var $52=((($51)*(60))&-1);
   var $53=((($52)*(60))&-1);
   var $54=$r;
   var $55=((($54)+($53))|0);
   $r=$55;
   var $56=$1;
   var $57=(($56+8)|0);
   var $58=HEAP32[(($57)>>2)];
   var $59=((($58)*(60))&-1);
   var $60=((($59)*(60))&-1);
   var $61=$r;
   var $62=((($61)+($60))|0);
   $r=$62;
   var $63=$1;
   var $64=(($63+4)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=((($65)*(60))&-1);
   var $67=$r;
   var $68=((($67)+($66))|0);
   $r=$68;
   var $69=$1;
   var $70=(($69)|0);
   var $71=HEAP32[(($70)>>2)];
   var $72=$r;
   var $73=((($72)+($71))|0);
   $r=$73;
   var $74=$r;
   return $74;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_alloc($mrb, $sec, $usec, $_timezone) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   var $4;
   var $tm;
   $1=$mrb;
   $2=$sec;
   $3=$usec;
   $4=$_timezone;
   var $5=$1;
   var $6=_mrb_malloc($5, 56);
   var $7=$6;
   $tm=$7;
   var $8=$2;
   var $9=(($8)&-1);
   var $10=$tm;
   var $11=(($10)|0);
   HEAP32[(($11)>>2)]=$9;
   var $12=$2;
   var $13=$tm;
   var $14=(($13)|0);
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0));
   var $17=($12)-($16);
   var $18=($17)*(1000000);
   var $19=$3;
   var $20=($18)+($19);
   var $21=(($20)&-1);
   var $22=$tm;
   var $23=(($22+4)|0);
   HEAP32[(($23)>>2)]=$21;
   label = 2; break;
  case 2: 
   var $25=$tm;
   var $26=(($25+4)|0);
   var $27=HEAP32[(($26)>>2)];
   var $28=(($27)|(0)) < 0;
   if ($28) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $30=$tm;
   var $31=(($30)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=((($32)-(1))|0);
   HEAP32[(($31)>>2)]=$33;
   var $34=$tm;
   var $35=(($34+4)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36)|(0));
   var $38=($37)+(1000000);
   var $39=(($38)&-1);
   HEAP32[(($35)>>2)]=$39;
   label = 2; break;
  case 4: 
   label = 5; break;
  case 5: 
   var $42=$tm;
   var $43=(($42+4)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=(($44)|(0));
   var $46=$45 > 1000000;
   if ($46) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $48=$tm;
   var $49=(($48)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=((($50)+(1))|0);
   HEAP32[(($49)>>2)]=$51;
   var $52=$tm;
   var $53=(($52+4)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=(($54)|(0));
   var $56=($55)-(1000000);
   var $57=(($56)&-1);
   HEAP32[(($53)>>2)]=$57;
   label = 5; break;
  case 7: 
   var $59=$4;
   var $60=$tm;
   var $61=(($60+8)|0);
   HEAP32[(($61)>>2)]=$59;
   var $62=$tm;
   var $63=_mrb_time_update_datetime($62);
   var $64=$tm;
   return $64;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_update_datetime($self) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $aid;
   $2=$self;
   var $3=$2;
   var $4=(($3+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)|(0))==1;
   if ($6) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $8=$2;
   var $9=(($8)|0);
   var $10=$2;
   var $11=(($10+12)|0);
   var $12=_gmtime_r($9, $11);
   $aid=$12;
   label = 4; break;
  case 3: 
   var $14=$2;
   var $15=(($14)|0);
   var $16=$2;
   var $17=(($16+12)|0);
   var $18=_localtime_r($15, $17);
   $aid=$18;
   label = 4; break;
  case 4: 
   var $20=$aid;
   var $21=(($20)|(0))!=0;
   if ($21) { label = 6; break; } else { label = 5; break; }
  case 5: 
   $1=0;
   label = 7; break;
  case 6: 
   var $24=$2;
   $1=$24;
   label = 7; break;
  case 7: 
   var $26=$1;
   return $26;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_nil_value1864($agg_result) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $v=sp;
   label = 2; break;
  case 2: 
   var $2=(($v+8)|0);
   HEAP32[(($2)>>2)]=0;
   var $3=(($v)|0);
   var $4=$3;
   HEAP32[(($4)>>2)]=0;
   label = 3; break;
  case 3: 
   var $6=$agg_result;
   var $7=$v;
   assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_fixnum_value1865($agg_result, $i) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$i;
   label = 2; break;
  case 2: 
   var $3=(($v+8)|0);
   HEAP32[(($3)>>2)]=3;
   var $4=$1;
   var $5=(($v)|0);
   var $6=$5;
   HEAP32[(($6)>>2)]=$4;
   label = 3; break;
  case 3: 
   var $8=$agg_result;
   var $9=$v;
   assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_float_value1866($agg_result, $mrb, $f) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $v=sp;
   $1=$mrb;
   $2=$f;
   label = 2; break;
  case 2: 
   var $4=(($v+8)|0);
   HEAP32[(($4)>>2)]=6;
   var $5=$2;
   var $6=(($v)|0);
   var $7=$6;
   (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($7)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($7)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   label = 3; break;
  case 3: 
   var $9=$agg_result;
   var $10=$v;
   assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_bool_value1867($agg_result, $boolean) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   $1=$boolean;
   label = 2; break;
  case 2: 
   var $3=$1;
   var $4=(($3)&(255));
   var $5=(($4)|(0))!=0;
   var $6=$5 ? 2 : 0;
   var $7=(($v+8)|0);
   HEAP32[(($7)>>2)]=$6;
   var $8=(($v)|0);
   var $9=$8;
   HEAP32[(($9)>>2)]=1;
   label = 3; break;
  case 3: 
   var $11=$agg_result;
   var $12=$v;
   assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_wrap($agg_result, $mrb, $tc, $tm) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 $1=$mrb;
 $2=$tc;
 $3=$tm;
 var $4=$1;
 var $5=$2;
 var $6=$3;
 var $7=$6;
 var $8=_mrb_data_object_alloc($4, $5, $7, 74660);
 var $9=$8;
 _mrb_obj_value1868($agg_result, $9);
 return;
}
function _GENERATED_TMP_mrb_mruby_toplevel_ext_gem_final($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 return;
}
function _mrb_data_get_ptr($mrb, $obj, $type) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   var $3;
   $2=$mrb;
   $3=$type;
   var $4=(($obj+8)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=(($5)>>>(0)) <= 7;
   if ($6) { label = 3; break; } else { label = 2; break; }
  case 2: 
   var $8=(($obj+8)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))!=21;
   if ($10) { label = 3; break; } else { label = 4; break; }
  case 3: 
   $1=0;
   label = 7; break;
  case 4: 
   var $13=(($obj)|0);
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $16=$15;
   var $17=(($16+16)|0);
   var $18=HEAP32[(($17)>>2)];
   var $19=$3;
   var $20=(($18)|(0))!=(($19)|(0));
   if ($20) { label = 5; break; } else { label = 6; break; }
  case 5: 
   $1=0;
   label = 7; break;
  case 6: 
   var $23=(($obj)|0);
   var $24=$23;
   var $25=HEAP32[(($24)>>2)];
   var $26=$25;
   var $27=(($26+20)|0);
   var $28=HEAP32[(($27)>>2)];
   $1=$28;
   label = 7; break;
  case 7: 
   var $30=$1;
   STACKTOP = sp;
   return $30;
  default: assert(0, "bad label: " + label);
 }
}
function _float_id($f) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=sp;
   var $p;
   var $len;
   var $id;
   (HEAPF64[(tempDoublePtr)>>3]=$f,HEAP32[(($1)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($1)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
   var $2=$1;
   $p=$2;
   $len=8;
   $id=0;
   label = 2; break;
  case 2: 
   var $4=$len;
   var $5=((($4)-(1))|0);
   $len=$5;
   var $6=(($4)|(0))!=0;
   if ($6) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $8=$id;
   var $9=((($8)*(65599))&-1);
   var $10=$p;
   var $11=HEAP8[($10)];
   var $12=(($11 << 24) >> 24);
   var $13=((($9)+($12))|0);
   $id=$13;
   var $14=$p;
   var $15=(($14+1)|0);
   $p=$15;
   label = 2; break;
  case 4: 
   var $17=$id;
   var $18=$id;
   var $19=$18 >> 5;
   var $20=((($17)+($19))|0);
   $id=$20;
   var $21=$id;
   STACKTOP = sp;
   return $21;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_random_init_genrand($t, $s) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $2;
   $1=$t;
   $2=$s;
   var $3=$2;
   var $4=$1;
   var $5=(($4)|0);
   var $6=(($5)|0);
   HEAP32[(($6)>>2)]=$3;
   var $7=$1;
   var $8=(($7+2496)|0);
   HEAP32[(($8)>>2)]=1;
   label = 2; break;
  case 2: 
   var $10=$1;
   var $11=(($10+2496)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0)) < 624;
   if ($13) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $15=$1;
   var $16=(($15+2496)|0);
   var $17=HEAP32[(($16)>>2)];
   var $18=((($17)-(1))|0);
   var $19=$1;
   var $20=(($19)|0);
   var $21=(($20+($18<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$1;
   var $24=(($23+2496)|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=((($25)-(1))|0);
   var $27=$1;
   var $28=(($27)|0);
   var $29=(($28+($26<<2))|0);
   var $30=HEAP32[(($29)>>2)];
   var $31=$30 >>> 30;
   var $32=$22 ^ $31;
   var $33=(Math.imul($32,1812433253)|0);
   var $34=$1;
   var $35=(($34+2496)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=((($33)+($36))|0);
   var $38=$1;
   var $39=(($38+2496)|0);
   var $40=HEAP32[(($39)>>2)];
   var $41=$1;
   var $42=(($41)|0);
   var $43=(($42+($40<<2))|0);
   HEAP32[(($43)>>2)]=$37;
   var $44=$1;
   var $45=(($44+2496)|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=$1;
   var $48=(($47)|0);
   var $49=(($48+($46<<2))|0);
   var $50=HEAP32[(($49)>>2)];
   HEAP32[(($49)>>2)]=$50;
   label = 4; break;
  case 4: 
   var $52=$1;
   var $53=(($52+2496)|0);
   var $54=HEAP32[(($53)>>2)];
   var $55=((($54)+(1))|0);
   HEAP32[(($53)>>2)]=$55;
   label = 2; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _init_genrand($s) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   $1=$s;
   var $2=$1;
   HEAP32[((((106420)|0))>>2)]=$2;
   HEAP32[((59880)>>2)]=1;
   label = 2; break;
  case 2: 
   var $4=HEAP32[((59880)>>2)];
   var $5=(($4)|(0)) < 624;
   if ($5) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $7=HEAP32[((59880)>>2)];
   var $8=((($7)-(1))|0);
   var $9=((106420+($8<<2))|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=HEAP32[((59880)>>2)];
   var $12=((($11)-(1))|0);
   var $13=((106420+($12<<2))|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$14 >>> 30;
   var $16=$10 ^ $15;
   var $17=(Math.imul($16,1812433253)|0);
   var $18=HEAP32[((59880)>>2)];
   var $19=((($17)+($18))|0);
   var $20=HEAP32[((59880)>>2)];
   var $21=((106420+($20<<2))|0);
   HEAP32[(($21)>>2)]=$19;
   var $22=HEAP32[((59880)>>2)];
   var $23=((106420+($22<<2))|0);
   var $24=HEAP32[(($23)>>2)];
   HEAP32[(($23)>>2)]=$24;
   label = 4; break;
  case 4: 
   var $26=HEAP32[((59880)>>2)];
   var $27=((($26)+(1))|0);
   HEAP32[((59880)>>2)]=$27;
   label = 2; break;
  case 5: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_value1868($agg_result, $p) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $v=sp;
   var $b;
   $1=$p;
   var $2=$1;
   var $3=$2;
   $b=$3;
   label = 2; break;
  case 2: 
   var $5=$b;
   var $6=$5;
   var $7=HEAP32[(($6)>>2)];
   var $8=$7 & 255;
   var $9=(($v+8)|0);
   HEAP32[(($9)>>2)]=$8;
   var $10=$1;
   var $11=(($v)|0);
   var $12=$11;
   HEAP32[(($12)>>2)]=$10;
   label = 3; break;
  case 3: 
   var $14=$agg_result;
   var $15=$v;
   assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_time_make($agg_result, $mrb, $c, $sec, $usec, $_timezone) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$mrb;
 $2=$c;
 $3=$sec;
 $4=$usec;
 $5=$_timezone;
 var $6=$1;
 var $7=$2;
 var $8=$1;
 var $9=$3;
 var $10=$4;
 var $11=$5;
 var $12=_mrb_time_alloc($8, $9, $10, $11);
 _mrb_time_wrap($agg_result, $6, $7, $12);
 return;
}
function _mrb_init_mrblib($mrb) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2=sp;
 $1=$mrb;
 var $3=$1;
 _mrb_load_irep($2, $3, ((59892)|0));
 STACKTOP = sp;
 return;
}
function _mrb_init_comparable($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_define_module($2, ((101580)|0));
 return;
}
function _mrb_init_enumerable($mrb) {
 var label = 0;
 var $1;
 $1=$mrb;
 var $2=$1;
 var $3=_mrb_define_module($2, ((101568)|0));
 return;
}
function _mrb_data_object_alloc($mrb, $klass, $ptr, $type) {
 var label = 0;
 var $1;
 var $2;
 var $3;
 var $4;
 var $data;
 $1=$mrb;
 $2=$klass;
 $3=$ptr;
 $4=$type;
 var $5=$1;
 var $6=$2;
 var $7=_mrb_obj_alloc($5, 21, $6);
 var $8=$7;
 $data=$8;
 var $9=$3;
 var $10=$data;
 var $11=(($10+20)|0);
 HEAP32[(($11)>>2)]=$9;
 var $12=$4;
 var $13=$data;
 var $14=(($13+16)|0);
 HEAP32[(($14)>>2)]=$12;
 var $15=$data;
 return $15;
}
function _mrb_obj_to_sym($mrb, $name) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $name; $name = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($name)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($name)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($name)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tmp=sp;
   var $id;
   var $2=(sp)+(12);
   var $3=(sp)+(24);
   var $4=(sp)+(36);
   $1=$mrb;
   var $5=(($name+8)|0);
   var $6=HEAP32[(($5)>>2)];
   if ((($6)|(0))==16) {
    label = 6; break;
   }
   else if ((($6)|(0))==4) {
    label = 7; break;
   }
   else {
   label = 2; break;
   }
  case 2: 
   var $8=$1;
   _mrb_check_string_type($2, $8, $name);
   var $9=$tmp;
   var $10=$2;
   assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
   var $11=(($tmp+8)|0);
   var $12=HEAP32[(($11)>>2)];
   var $13=(($12)|(0))==0;
   if ($13) { label = 3; break; } else { label = 5; break; }
  case 3: 
   var $15=(($tmp)|0);
   var $16=$15;
   var $17=HEAP32[(($16)>>2)];
   var $18=(($17)|(0))!=0;
   if ($18) { label = 5; break; } else { label = 4; break; }
  case 4: 
   var $20=$1;
   _mrb_inspect($3, $20, $name);
   var $21=$tmp;
   var $22=$3;
   assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
   var $23=$1;
   var $24=$1;
   var $25=_mrb_class_get($24, ((101528)|0));
   _mrb_raisef($23, $25, ((96444)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempInt)>>2)]=HEAP32[(($tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($tmp)+(8))>>2)],tempInt));
   label = 5; break;
  case 5: 
   var $27=$name;
   var $28=$tmp;
   assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
   label = 6; break;
  case 6: 
   var $30=$1;
   _mrb_str_intern($4, $30, $name);
   var $31=$name;
   var $32=$4;
   assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
   label = 7; break;
  case 7: 
   var $34=(($name)|0);
   var $35=$34;
   var $36=HEAP16[(($35)>>1)];
   STACKTOP = sp;
   return $36;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_obj_id($obj) {
 var label = 0;
 var sp  = STACKTOP; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $tt;
   var $2=(($obj+8)|0);
   var $3=HEAP32[(($2)>>2)];
   $tt=$3;
   var $4=$tt;
   if ((($4)|(0))==1 | (($4)|(0))==5) {
    label = 2; break;
   }
   else if ((($4)|(0))==0) {
    label = 3; break;
   }
   else if ((($4)|(0))==2) {
    label = 7; break;
   }
   else if ((($4)|(0))==4) {
    label = 8; break;
   }
   else if ((($4)|(0))==3) {
    label = 9; break;
   }
   else if ((($4)|(0))==6) {
    label = 10; break;
   }
   else if ((($4)|(0))==16 | (($4)|(0))==8 | (($4)|(0))==9 | (($4)|(0))==10 | (($4)|(0))==11 | (($4)|(0))==12 | (($4)|(0))==13 | (($4)|(0))==14 | (($4)|(0))==15 | (($4)|(0))==17 | (($4)|(0))==18 | (($4)|(0))==19 | (($4)|(0))==21) {
    label = 11; break;
   }
   else {
   label = 12; break;
   }
  case 2: 
   var $6=$tt;
   var $7=0 ^ $6;
   $1=$7;
   label = 13; break;
  case 3: 
   var $9=(($obj+8)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=(($10)|(0))==0;
   if ($11) { label = 4; break; } else { label = 6; break; }
  case 4: 
   var $13=(($obj)|0);
   var $14=$13;
   var $15=HEAP32[(($14)>>2)];
   var $16=(($15)|(0))!=0;
   if ($16) { label = 6; break; } else { label = 5; break; }
  case 5: 
   var $18=$tt;
   var $19=1 ^ $18;
   $1=$19;
   label = 13; break;
  case 6: 
   var $21=$tt;
   var $22=0 ^ $21;
   $1=$22;
   label = 13; break;
  case 7: 
   var $24=$tt;
   var $25=1 ^ $24;
   $1=$25;
   label = 13; break;
  case 8: 
   var $27=(($obj)|0);
   var $28=$27;
   var $29=HEAP16[(($28)>>1)];
   var $30=(($29 << 16) >> 16);
   var $31=$tt;
   var $32=$30 ^ $31;
   $1=$32;
   label = 13; break;
  case 9: 
   var $34=(($obj)|0);
   var $35=$34;
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36)|(0));
   var $38=_float_id($37);
   var $39=$38 ^ 6;
   $1=$39;
   label = 13; break;
  case 10: 
   var $41=(($obj)|0);
   var $42=$41;
   var $43=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($42)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($42)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $44=_float_id($43);
   var $45=$tt;
   var $46=$44 ^ $45;
   $1=$46;
   label = 13; break;
  case 11: 
   label = 12; break;
  case 12: 
   var $49=(($obj)|0);
   var $50=$49;
   var $51=HEAP32[(($50)>>2)];
   var $52=$51;
   var $53=$tt;
   var $54=$52 ^ $53;
   $1=$54;
   label = 13; break;
  case 13: 
   var $56=$1;
   STACKTOP = sp;
   return $56;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_random_genrand_int32($t) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $y;
   var $kk;
   $1=$t;
   var $2=$1;
   var $3=(($2+2496)|0);
   var $4=HEAP32[(($3)>>2)];
   var $5=(($4)|(0)) >= 624;
   if ($5) { label = 2; break; } else { label = 13; break; }
  case 2: 
   var $7=$1;
   var $8=(($7+2496)|0);
   var $9=HEAP32[(($8)>>2)];
   var $10=(($9)|(0))==625;
   if ($10) { label = 3; break; } else { label = 4; break; }
  case 3: 
   var $12=$1;
   _mrb_random_init_genrand($12, 5489);
   label = 4; break;
  case 4: 
   $kk=0;
   label = 5; break;
  case 5: 
   var $15=$kk;
   var $16=(($15)|(0)) < 227;
   if ($16) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $18=$kk;
   var $19=$1;
   var $20=(($19)|0);
   var $21=(($20+($18<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=$22 & -2147483648;
   var $24=$kk;
   var $25=((($24)+(1))|0);
   var $26=$1;
   var $27=(($26)|0);
   var $28=(($27+($25<<2))|0);
   var $29=HEAP32[(($28)>>2)];
   var $30=$29 & 2147483647;
   var $31=$23 | $30;
   $y=$31;
   var $32=$kk;
   var $33=((($32)+(397))|0);
   var $34=$1;
   var $35=(($34)|0);
   var $36=(($35+($33<<2))|0);
   var $37=HEAP32[(($36)>>2)];
   var $38=$y;
   var $39=$38 >>> 1;
   var $40=$37 ^ $39;
   var $41=$y;
   var $42=$41 & 1;
   var $43=((75032+($42<<2))|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=$40 ^ $44;
   var $46=$kk;
   var $47=$1;
   var $48=(($47)|0);
   var $49=(($48+($46<<2))|0);
   HEAP32[(($49)>>2)]=$45;
   label = 7; break;
  case 7: 
   var $51=$kk;
   var $52=((($51)+(1))|0);
   $kk=$52;
   label = 5; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $55=$kk;
   var $56=(($55)|(0)) < 623;
   if ($56) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $58=$kk;
   var $59=$1;
   var $60=(($59)|0);
   var $61=(($60+($58<<2))|0);
   var $62=HEAP32[(($61)>>2)];
   var $63=$62 & -2147483648;
   var $64=$kk;
   var $65=((($64)+(1))|0);
   var $66=$1;
   var $67=(($66)|0);
   var $68=(($67+($65<<2))|0);
   var $69=HEAP32[(($68)>>2)];
   var $70=$69 & 2147483647;
   var $71=$63 | $70;
   $y=$71;
   var $72=$kk;
   var $73=((($72)-(227))|0);
   var $74=$1;
   var $75=(($74)|0);
   var $76=(($75+($73<<2))|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=$y;
   var $79=$78 >>> 1;
   var $80=$77 ^ $79;
   var $81=$y;
   var $82=$81 & 1;
   var $83=((75032+($82<<2))|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=$80 ^ $84;
   var $86=$kk;
   var $87=$1;
   var $88=(($87)|0);
   var $89=(($88+($86<<2))|0);
   HEAP32[(($89)>>2)]=$85;
   label = 11; break;
  case 11: 
   var $91=$kk;
   var $92=((($91)+(1))|0);
   $kk=$92;
   label = 9; break;
  case 12: 
   var $94=$1;
   var $95=(($94)|0);
   var $96=(($95+2492)|0);
   var $97=HEAP32[(($96)>>2)];
   var $98=$97 & -2147483648;
   var $99=$1;
   var $100=(($99)|0);
   var $101=(($100)|0);
   var $102=HEAP32[(($101)>>2)];
   var $103=$102 & 2147483647;
   var $104=$98 | $103;
   $y=$104;
   var $105=$1;
   var $106=(($105)|0);
   var $107=(($106+1584)|0);
   var $108=HEAP32[(($107)>>2)];
   var $109=$y;
   var $110=$109 >>> 1;
   var $111=$108 ^ $110;
   var $112=$y;
   var $113=$112 & 1;
   var $114=((75032+($113<<2))|0);
   var $115=HEAP32[(($114)>>2)];
   var $116=$111 ^ $115;
   var $117=$1;
   var $118=(($117)|0);
   var $119=(($118+2492)|0);
   HEAP32[(($119)>>2)]=$116;
   var $120=$1;
   var $121=(($120+2496)|0);
   HEAP32[(($121)>>2)]=0;
   label = 13; break;
  case 13: 
   var $123=$1;
   var $124=(($123+2496)|0);
   var $125=HEAP32[(($124)>>2)];
   var $126=((($125)+(1))|0);
   HEAP32[(($124)>>2)]=$126;
   var $127=$1;
   var $128=(($127)|0);
   var $129=(($128+($125<<2))|0);
   var $130=HEAP32[(($129)>>2)];
   $y=$130;
   var $131=$y;
   var $132=$131 >>> 11;
   var $133=$y;
   var $134=$133 ^ $132;
   $y=$134;
   var $135=$y;
   var $136=$135 << 7;
   var $137=$136 & -1658038656;
   var $138=$y;
   var $139=$138 ^ $137;
   $y=$139;
   var $140=$y;
   var $141=$140 << 15;
   var $142=$141 & -272236544;
   var $143=$y;
   var $144=$143 ^ $142;
   $y=$144;
   var $145=$y;
   var $146=$145 >>> 18;
   var $147=$y;
   var $148=$147 ^ $146;
   $y=$148;
   var $149=$y;
   var $150=$1;
   var $151=(($150+2500)|0);
   var $152=$151;
   HEAP32[(($152)>>2)]=$149;
   var $153=$y;
   return $153;
  default: assert(0, "bad label: " + label);
 }
}
function _mrb_random_genrand_real1($t) {
 var label = 0;
 var $1;
 $1=$t;
 var $2=$1;
 var $3=_mrb_random_genrand_int32($2);
 var $4=$1;
 var $5=(($4+2500)|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7)>>>(0));
 var $9=($8)*(2.3283064370807974e-10);
 var $10=$1;
 var $11=(($10+2500)|0);
 var $12=$11;
 (HEAPF64[(tempDoublePtr)>>3]=$9,HEAP32[(($12)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($12)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
 var $13=$1;
 var $14=(($13+2500)|0);
 var $15=$14;
 var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($15)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($15)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
 return $16;
}
function _genrand_int32() {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $y;
   var $kk;
   var $1=HEAP32[((59880)>>2)];
   var $2=(($1)|(0)) >= 624;
   if ($2) { label = 2; break; } else { label = 13; break; }
  case 2: 
   var $4=HEAP32[((59880)>>2)];
   var $5=(($4)|(0))==625;
   if ($5) { label = 3; break; } else { label = 4; break; }
  case 3: 
   _init_genrand(5489);
   label = 4; break;
  case 4: 
   $kk=0;
   label = 5; break;
  case 5: 
   var $9=$kk;
   var $10=(($9)|(0)) < 227;
   if ($10) { label = 6; break; } else { label = 8; break; }
  case 6: 
   var $12=$kk;
   var $13=((106420+($12<<2))|0);
   var $14=HEAP32[(($13)>>2)];
   var $15=$14 & -2147483648;
   var $16=$kk;
   var $17=((($16)+(1))|0);
   var $18=((106420+($17<<2))|0);
   var $19=HEAP32[(($18)>>2)];
   var $20=$19 & 2147483647;
   var $21=$15 | $20;
   $y=$21;
   var $22=$kk;
   var $23=((($22)+(397))|0);
   var $24=((106420+($23<<2))|0);
   var $25=HEAP32[(($24)>>2)];
   var $26=$y;
   var $27=$26 >>> 1;
   var $28=$25 ^ $27;
   var $29=$y;
   var $30=$29 & 1;
   var $31=((75800+($30<<2))|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=$28 ^ $32;
   var $34=$kk;
   var $35=((106420+($34<<2))|0);
   HEAP32[(($35)>>2)]=$33;
   label = 7; break;
  case 7: 
   var $37=$kk;
   var $38=((($37)+(1))|0);
   $kk=$38;
   label = 5; break;
  case 8: 
   label = 9; break;
  case 9: 
   var $41=$kk;
   var $42=(($41)|(0)) < 623;
   if ($42) { label = 10; break; } else { label = 12; break; }
  case 10: 
   var $44=$kk;
   var $45=((106420+($44<<2))|0);
   var $46=HEAP32[(($45)>>2)];
   var $47=$46 & -2147483648;
   var $48=$kk;
   var $49=((($48)+(1))|0);
   var $50=((106420+($49<<2))|0);
   var $51=HEAP32[(($50)>>2)];
   var $52=$51 & 2147483647;
   var $53=$47 | $52;
   $y=$53;
   var $54=$kk;
   var $55=((($54)-(227))|0);
   var $56=((106420+($55<<2))|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=$y;
   var $59=$58 >>> 1;
   var $60=$57 ^ $59;
   var $61=$y;
   var $62=$61 & 1;
   var $63=((75800+($62<<2))|0);
   var $64=HEAP32[(($63)>>2)];
   var $65=$60 ^ $64;
   var $66=$kk;
   var $67=((106420+($66<<2))|0);
   HEAP32[(($67)>>2)]=$65;
   label = 11; break;
  case 11: 
   var $69=$kk;
   var $70=((($69)+(1))|0);
   $kk=$70;
   label = 9; break;
  case 12: 
   var $72=HEAP32[((((108912)|0))>>2)];
   var $73=$72 & -2147483648;
   var $74=HEAP32[((((106420)|0))>>2)];
   var $75=$74 & 2147483647;
   var $76=$73 | $75;
   $y=$76;
   var $77=HEAP32[((((108004)|0))>>2)];
   var $78=$y;
   var $79=$78 >>> 1;
   var $80=$77 ^ $79;
   var $81=$y;
   var $82=$81 & 1;
   var $83=((75800+($82<<2))|0);
   var $84=HEAP32[(($83)>>2)];
   var $85=$80 ^ $84;
   HEAP32[((((108912)|0))>>2)]=$85;
   HEAP32[((59880)>>2)]=0;
   label = 13; break;
  case 13: 
   var $87=HEAP32[((59880)>>2)];
   var $88=((($87)+(1))|0);
   HEAP32[((59880)>>2)]=$88;
   var $89=((106420+($87<<2))|0);
   var $90=HEAP32[(($89)>>2)];
   $y=$90;
   var $91=$y;
   var $92=$91 >>> 11;
   var $93=$y;
   var $94=$93 ^ $92;
   $y=$94;
   var $95=$y;
   var $96=$95 << 7;
   var $97=$96 & -1658038656;
   var $98=$y;
   var $99=$98 ^ $97;
   $y=$99;
   var $100=$y;
   var $101=$100 << 15;
   var $102=$101 & -272236544;
   var $103=$y;
   var $104=$103 ^ $102;
   $y=$104;
   var $105=$y;
   var $106=$105 >>> 18;
   var $107=$y;
   var $108=$107 ^ $106;
   $y=$108;
   var $109=$y;
   return $109;
  default: assert(0, "bad label: " + label);
 }
}
function _genrand_real1() {
 var label = 0;
 var $1=_genrand_int32();
 var $2=(($1)>>>(0));
 var $3=($2)*(2.3283064370807974e-10);
 return $3;
}
function _GENERATED_TMP_mrb_mruby_toplevel_ext_gem_init($mrb) {
 var label = 0;
 var sp  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; (assert(!(STACKTOP&3))|0); (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1;
   var $ai;
   var $2=sp;
   $1=$mrb;
   var $3=$1;
   var $4=_mrb_gc_arena_save($3);
   $ai=$4;
   var $5=$1;
   _mrb_load_irep($2, $5, ((75808)|0));
   var $6=$1;
   var $7=(($6+16)|0);
   var $8=HEAP32[(($7)>>2)];
   var $9=(($8)|(0))!=0;
   if ($9) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $11=$1;
   _mrb_print_error($11);
   _exit(1);
   throw "Reached an unreachable!";
  case 3: 
   var $13=$1;
   var $14=$ai;
   _mrb_gc_arena_restore($13, $14);
   STACKTOP = sp;
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _malloc($bytes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($bytes)>>>(0)) < 245;
   if ($1) { label = 2; break; } else { label = 78; break; }
  case 2: 
   var $3=(($bytes)>>>(0)) < 11;
   if ($3) { var $8 = 16;label = 4; break; } else { label = 3; break; }
  case 3: 
   var $5=((($bytes)+(11))|0);
   var $6=$5 & -8;
   var $8 = $6;label = 4; break;
  case 4: 
   var $8;
   var $9=$8 >>> 3;
   var $10=HEAP32[((((111156)|0))>>2)];
   var $11=$10 >>> (($9)>>>(0));
   var $12=$11 & 3;
   var $13=(($12)|(0))==0;
   if ($13) { label = 12; break; } else { label = 5; break; }
  case 5: 
   var $15=$11 & 1;
   var $16=$15 ^ 1;
   var $17=((($16)+($9))|0);
   var $18=$17 << 1;
   var $19=((111196+($18<<2))|0);
   var $20=$19;
   var $_sum110=((($18)+(2))|0);
   var $21=((111196+($_sum110<<2))|0);
   var $22=HEAP32[(($21)>>2)];
   var $23=(($22+8)|0);
   var $24=HEAP32[(($23)>>2)];
   var $25=(($20)|(0))==(($24)|(0));
   if ($25) { label = 6; break; } else { label = 7; break; }
  case 6: 
   var $27=1 << $17;
   var $28=$27 ^ -1;
   var $29=$10 & $28;
   HEAP32[((((111156)|0))>>2)]=$29;
   label = 11; break;
  case 7: 
   var $31=$24;
   var $32=HEAP32[((((111172)|0))>>2)];
   var $33=(($31)>>>(0)) < (($32)>>>(0));
   if ($33) { label = 10; break; } else { label = 8; break; }
  case 8: 
   var $35=(($24+12)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($36)|(0))==(($22)|(0));
   if ($37) { label = 9; break; } else { label = 10; break; }
  case 9: 
   HEAP32[(($35)>>2)]=$20;
   HEAP32[(($21)>>2)]=$24;
   label = 11; break;
  case 10: 
   _abort();
   throw "Reached an unreachable!";
  case 11: 
   var $40=$17 << 3;
   var $41=$40 | 3;
   var $42=(($22+4)|0);
   HEAP32[(($42)>>2)]=$41;
   var $43=$22;
   var $_sum111112=$40 | 4;
   var $44=(($43+$_sum111112)|0);
   var $45=$44;
   var $46=HEAP32[(($45)>>2)];
   var $47=$46 | 1;
   HEAP32[(($45)>>2)]=$47;
   var $48=$23;
   var $mem_0 = $48;label = 341; break;
  case 12: 
   var $50=HEAP32[((((111164)|0))>>2)];
   var $51=(($8)>>>(0)) > (($50)>>>(0));
   if ($51) { label = 13; break; } else { var $nb_0 = $8;label = 160; break; }
  case 13: 
   var $53=(($11)|(0))==0;
   if ($53) { label = 27; break; } else { label = 14; break; }
  case 14: 
   var $55=$11 << $9;
   var $56=2 << $9;
   var $57=(((-$56))|0);
   var $58=$56 | $57;
   var $59=$55 & $58;
   var $60=(((-$59))|0);
   var $61=$59 & $60;
   var $62=((($61)-(1))|0);
   var $63=$62 >>> 12;
   var $64=$63 & 16;
   var $65=$62 >>> (($64)>>>(0));
   var $66=$65 >>> 5;
   var $67=$66 & 8;
   var $68=$67 | $64;
   var $69=$65 >>> (($67)>>>(0));
   var $70=$69 >>> 2;
   var $71=$70 & 4;
   var $72=$68 | $71;
   var $73=$69 >>> (($71)>>>(0));
   var $74=$73 >>> 1;
   var $75=$74 & 2;
   var $76=$72 | $75;
   var $77=$73 >>> (($75)>>>(0));
   var $78=$77 >>> 1;
   var $79=$78 & 1;
   var $80=$76 | $79;
   var $81=$77 >>> (($79)>>>(0));
   var $82=((($80)+($81))|0);
   var $83=$82 << 1;
   var $84=((111196+($83<<2))|0);
   var $85=$84;
   var $_sum104=((($83)+(2))|0);
   var $86=((111196+($_sum104<<2))|0);
   var $87=HEAP32[(($86)>>2)];
   var $88=(($87+8)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($85)|(0))==(($89)|(0));
   if ($90) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $92=1 << $82;
   var $93=$92 ^ -1;
   var $94=$10 & $93;
   HEAP32[((((111156)|0))>>2)]=$94;
   label = 20; break;
  case 16: 
   var $96=$89;
   var $97=HEAP32[((((111172)|0))>>2)];
   var $98=(($96)>>>(0)) < (($97)>>>(0));
   if ($98) { label = 19; break; } else { label = 17; break; }
  case 17: 
   var $100=(($89+12)|0);
   var $101=HEAP32[(($100)>>2)];
   var $102=(($101)|(0))==(($87)|(0));
   if ($102) { label = 18; break; } else { label = 19; break; }
  case 18: 
   HEAP32[(($100)>>2)]=$85;
   HEAP32[(($86)>>2)]=$89;
   label = 20; break;
  case 19: 
   _abort();
   throw "Reached an unreachable!";
  case 20: 
   var $105=$82 << 3;
   var $106=((($105)-($8))|0);
   var $107=$8 | 3;
   var $108=(($87+4)|0);
   HEAP32[(($108)>>2)]=$107;
   var $109=$87;
   var $110=(($109+$8)|0);
   var $111=$110;
   var $112=$106 | 1;
   var $_sum105106=$8 | 4;
   var $113=(($109+$_sum105106)|0);
   var $114=$113;
   HEAP32[(($114)>>2)]=$112;
   var $115=(($109+$105)|0);
   var $116=$115;
   HEAP32[(($116)>>2)]=$106;
   var $117=HEAP32[((((111164)|0))>>2)];
   var $118=(($117)|(0))==0;
   if ($118) { label = 26; break; } else { label = 21; break; }
  case 21: 
   var $120=HEAP32[((((111176)|0))>>2)];
   var $121=$117 >>> 3;
   var $122=$121 << 1;
   var $123=((111196+($122<<2))|0);
   var $124=$123;
   var $125=HEAP32[((((111156)|0))>>2)];
   var $126=1 << $121;
   var $127=$125 & $126;
   var $128=(($127)|(0))==0;
   if ($128) { label = 22; break; } else { label = 23; break; }
  case 22: 
   var $130=$125 | $126;
   HEAP32[((((111156)|0))>>2)]=$130;
   var $_sum108_pre=((($122)+(2))|0);
   var $_pre=((111196+($_sum108_pre<<2))|0);
   var $F4_0 = $124;var $_pre_phi = $_pre;label = 25; break;
  case 23: 
   var $_sum109=((($122)+(2))|0);
   var $132=((111196+($_sum109<<2))|0);
   var $133=HEAP32[(($132)>>2)];
   var $134=$133;
   var $135=HEAP32[((((111172)|0))>>2)];
   var $136=(($134)>>>(0)) < (($135)>>>(0));
   if ($136) { label = 24; break; } else { var $F4_0 = $133;var $_pre_phi = $132;label = 25; break; }
  case 24: 
   _abort();
   throw "Reached an unreachable!";
  case 25: 
   var $_pre_phi;
   var $F4_0;
   HEAP32[(($_pre_phi)>>2)]=$120;
   var $139=(($F4_0+12)|0);
   HEAP32[(($139)>>2)]=$120;
   var $140=(($120+8)|0);
   HEAP32[(($140)>>2)]=$F4_0;
   var $141=(($120+12)|0);
   HEAP32[(($141)>>2)]=$124;
   label = 26; break;
  case 26: 
   HEAP32[((((111164)|0))>>2)]=$106;
   HEAP32[((((111176)|0))>>2)]=$111;
   var $143=$88;
   var $mem_0 = $143;label = 341; break;
  case 27: 
   var $145=HEAP32[((((111160)|0))>>2)];
   var $146=(($145)|(0))==0;
   if ($146) { var $nb_0 = $8;label = 160; break; } else { label = 28; break; }
  case 28: 
   var $148=(((-$145))|0);
   var $149=$145 & $148;
   var $150=((($149)-(1))|0);
   var $151=$150 >>> 12;
   var $152=$151 & 16;
   var $153=$150 >>> (($152)>>>(0));
   var $154=$153 >>> 5;
   var $155=$154 & 8;
   var $156=$155 | $152;
   var $157=$153 >>> (($155)>>>(0));
   var $158=$157 >>> 2;
   var $159=$158 & 4;
   var $160=$156 | $159;
   var $161=$157 >>> (($159)>>>(0));
   var $162=$161 >>> 1;
   var $163=$162 & 2;
   var $164=$160 | $163;
   var $165=$161 >>> (($163)>>>(0));
   var $166=$165 >>> 1;
   var $167=$166 & 1;
   var $168=$164 | $167;
   var $169=$165 >>> (($167)>>>(0));
   var $170=((($168)+($169))|0);
   var $171=((111460+($170<<2))|0);
   var $172=HEAP32[(($171)>>2)];
   var $173=(($172+4)|0);
   var $174=HEAP32[(($173)>>2)];
   var $175=$174 & -8;
   var $176=((($175)-($8))|0);
   var $t_0_i = $172;var $v_0_i = $172;var $rsize_0_i = $176;label = 29; break;
  case 29: 
   var $rsize_0_i;
   var $v_0_i;
   var $t_0_i;
   var $178=(($t_0_i+16)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($179)|(0))==0;
   if ($180) { label = 30; break; } else { var $185 = $179;label = 31; break; }
  case 30: 
   var $182=(($t_0_i+20)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=(($183)|(0))==0;
   if ($184) { label = 32; break; } else { var $185 = $183;label = 31; break; }
  case 31: 
   var $185;
   var $186=(($185+4)|0);
   var $187=HEAP32[(($186)>>2)];
   var $188=$187 & -8;
   var $189=((($188)-($8))|0);
   var $190=(($189)>>>(0)) < (($rsize_0_i)>>>(0));
   var $_rsize_0_i=$190 ? $189 : $rsize_0_i;
   var $_v_0_i=$190 ? $185 : $v_0_i;
   var $t_0_i = $185;var $v_0_i = $_v_0_i;var $rsize_0_i = $_rsize_0_i;label = 29; break;
  case 32: 
   var $192=$v_0_i;
   var $193=HEAP32[((((111172)|0))>>2)];
   var $194=(($192)>>>(0)) < (($193)>>>(0));
   if ($194) { label = 76; break; } else { label = 33; break; }
  case 33: 
   var $196=(($192+$8)|0);
   var $197=$196;
   var $198=(($192)>>>(0)) < (($196)>>>(0));
   if ($198) { label = 34; break; } else { label = 76; break; }
  case 34: 
   var $200=(($v_0_i+24)|0);
   var $201=HEAP32[(($200)>>2)];
   var $202=(($v_0_i+12)|0);
   var $203=HEAP32[(($202)>>2)];
   var $204=(($203)|(0))==(($v_0_i)|(0));
   if ($204) { label = 40; break; } else { label = 35; break; }
  case 35: 
   var $206=(($v_0_i+8)|0);
   var $207=HEAP32[(($206)>>2)];
   var $208=$207;
   var $209=(($208)>>>(0)) < (($193)>>>(0));
   if ($209) { label = 39; break; } else { label = 36; break; }
  case 36: 
   var $211=(($207+12)|0);
   var $212=HEAP32[(($211)>>2)];
   var $213=(($212)|(0))==(($v_0_i)|(0));
   if ($213) { label = 37; break; } else { label = 39; break; }
  case 37: 
   var $215=(($203+8)|0);
   var $216=HEAP32[(($215)>>2)];
   var $217=(($216)|(0))==(($v_0_i)|(0));
   if ($217) { label = 38; break; } else { label = 39; break; }
  case 38: 
   HEAP32[(($211)>>2)]=$203;
   HEAP32[(($215)>>2)]=$207;
   var $R_1_i = $203;label = 47; break;
  case 39: 
   _abort();
   throw "Reached an unreachable!";
  case 40: 
   var $220=(($v_0_i+20)|0);
   var $221=HEAP32[(($220)>>2)];
   var $222=(($221)|(0))==0;
   if ($222) { label = 41; break; } else { var $R_0_i = $221;var $RP_0_i = $220;label = 42; break; }
  case 41: 
   var $224=(($v_0_i+16)|0);
   var $225=HEAP32[(($224)>>2)];
   var $226=(($225)|(0))==0;
   if ($226) { var $R_1_i = 0;label = 47; break; } else { var $R_0_i = $225;var $RP_0_i = $224;label = 42; break; }
  case 42: 
   var $RP_0_i;
   var $R_0_i;
   var $227=(($R_0_i+20)|0);
   var $228=HEAP32[(($227)>>2)];
   var $229=(($228)|(0))==0;
   if ($229) { label = 43; break; } else { var $R_0_i = $228;var $RP_0_i = $227;label = 42; break; }
  case 43: 
   var $231=(($R_0_i+16)|0);
   var $232=HEAP32[(($231)>>2)];
   var $233=(($232)|(0))==0;
   if ($233) { label = 44; break; } else { var $R_0_i = $232;var $RP_0_i = $231;label = 42; break; }
  case 44: 
   var $235=$RP_0_i;
   var $236=(($235)>>>(0)) < (($193)>>>(0));
   if ($236) { label = 46; break; } else { label = 45; break; }
  case 45: 
   HEAP32[(($RP_0_i)>>2)]=0;
   var $R_1_i = $R_0_i;label = 47; break;
  case 46: 
   _abort();
   throw "Reached an unreachable!";
  case 47: 
   var $R_1_i;
   var $240=(($201)|(0))==0;
   if ($240) { label = 67; break; } else { label = 48; break; }
  case 48: 
   var $242=(($v_0_i+28)|0);
   var $243=HEAP32[(($242)>>2)];
   var $244=((111460+($243<<2))|0);
   var $245=HEAP32[(($244)>>2)];
   var $246=(($v_0_i)|(0))==(($245)|(0));
   if ($246) { label = 49; break; } else { label = 51; break; }
  case 49: 
   HEAP32[(($244)>>2)]=$R_1_i;
   var $cond_i=(($R_1_i)|(0))==0;
   if ($cond_i) { label = 50; break; } else { label = 57; break; }
  case 50: 
   var $248=HEAP32[(($242)>>2)];
   var $249=1 << $248;
   var $250=$249 ^ -1;
   var $251=HEAP32[((((111160)|0))>>2)];
   var $252=$251 & $250;
   HEAP32[((((111160)|0))>>2)]=$252;
   label = 67; break;
  case 51: 
   var $254=$201;
   var $255=HEAP32[((((111172)|0))>>2)];
   var $256=(($254)>>>(0)) < (($255)>>>(0));
   if ($256) { label = 55; break; } else { label = 52; break; }
  case 52: 
   var $258=(($201+16)|0);
   var $259=HEAP32[(($258)>>2)];
   var $260=(($259)|(0))==(($v_0_i)|(0));
   if ($260) { label = 53; break; } else { label = 54; break; }
  case 53: 
   HEAP32[(($258)>>2)]=$R_1_i;
   label = 56; break;
  case 54: 
   var $263=(($201+20)|0);
   HEAP32[(($263)>>2)]=$R_1_i;
   label = 56; break;
  case 55: 
   _abort();
   throw "Reached an unreachable!";
  case 56: 
   var $266=(($R_1_i)|(0))==0;
   if ($266) { label = 67; break; } else { label = 57; break; }
  case 57: 
   var $268=$R_1_i;
   var $269=HEAP32[((((111172)|0))>>2)];
   var $270=(($268)>>>(0)) < (($269)>>>(0));
   if ($270) { label = 66; break; } else { label = 58; break; }
  case 58: 
   var $272=(($R_1_i+24)|0);
   HEAP32[(($272)>>2)]=$201;
   var $273=(($v_0_i+16)|0);
   var $274=HEAP32[(($273)>>2)];
   var $275=(($274)|(0))==0;
   if ($275) { label = 62; break; } else { label = 59; break; }
  case 59: 
   var $277=$274;
   var $278=HEAP32[((((111172)|0))>>2)];
   var $279=(($277)>>>(0)) < (($278)>>>(0));
   if ($279) { label = 61; break; } else { label = 60; break; }
  case 60: 
   var $281=(($R_1_i+16)|0);
   HEAP32[(($281)>>2)]=$274;
   var $282=(($274+24)|0);
   HEAP32[(($282)>>2)]=$R_1_i;
   label = 62; break;
  case 61: 
   _abort();
   throw "Reached an unreachable!";
  case 62: 
   var $285=(($v_0_i+20)|0);
   var $286=HEAP32[(($285)>>2)];
   var $287=(($286)|(0))==0;
   if ($287) { label = 67; break; } else { label = 63; break; }
  case 63: 
   var $289=$286;
   var $290=HEAP32[((((111172)|0))>>2)];
   var $291=(($289)>>>(0)) < (($290)>>>(0));
   if ($291) { label = 65; break; } else { label = 64; break; }
  case 64: 
   var $293=(($R_1_i+20)|0);
   HEAP32[(($293)>>2)]=$286;
   var $294=(($286+24)|0);
   HEAP32[(($294)>>2)]=$R_1_i;
   label = 67; break;
  case 65: 
   _abort();
   throw "Reached an unreachable!";
  case 66: 
   _abort();
   throw "Reached an unreachable!";
  case 67: 
   var $298=(($rsize_0_i)>>>(0)) < 16;
   if ($298) { label = 68; break; } else { label = 69; break; }
  case 68: 
   var $300=((($rsize_0_i)+($8))|0);
   var $301=$300 | 3;
   var $302=(($v_0_i+4)|0);
   HEAP32[(($302)>>2)]=$301;
   var $_sum4_i=((($300)+(4))|0);
   var $303=(($192+$_sum4_i)|0);
   var $304=$303;
   var $305=HEAP32[(($304)>>2)];
   var $306=$305 | 1;
   HEAP32[(($304)>>2)]=$306;
   label = 77; break;
  case 69: 
   var $308=$8 | 3;
   var $309=(($v_0_i+4)|0);
   HEAP32[(($309)>>2)]=$308;
   var $310=$rsize_0_i | 1;
   var $_sum_i135=$8 | 4;
   var $311=(($192+$_sum_i135)|0);
   var $312=$311;
   HEAP32[(($312)>>2)]=$310;
   var $_sum1_i=((($rsize_0_i)+($8))|0);
   var $313=(($192+$_sum1_i)|0);
   var $314=$313;
   HEAP32[(($314)>>2)]=$rsize_0_i;
   var $315=HEAP32[((((111164)|0))>>2)];
   var $316=(($315)|(0))==0;
   if ($316) { label = 75; break; } else { label = 70; break; }
  case 70: 
   var $318=HEAP32[((((111176)|0))>>2)];
   var $319=$315 >>> 3;
   var $320=$319 << 1;
   var $321=((111196+($320<<2))|0);
   var $322=$321;
   var $323=HEAP32[((((111156)|0))>>2)];
   var $324=1 << $319;
   var $325=$323 & $324;
   var $326=(($325)|(0))==0;
   if ($326) { label = 71; break; } else { label = 72; break; }
  case 71: 
   var $328=$323 | $324;
   HEAP32[((((111156)|0))>>2)]=$328;
   var $_sum2_pre_i=((($320)+(2))|0);
   var $_pre_i=((111196+($_sum2_pre_i<<2))|0);
   var $F1_0_i = $322;var $_pre_phi_i = $_pre_i;label = 74; break;
  case 72: 
   var $_sum3_i=((($320)+(2))|0);
   var $330=((111196+($_sum3_i<<2))|0);
   var $331=HEAP32[(($330)>>2)];
   var $332=$331;
   var $333=HEAP32[((((111172)|0))>>2)];
   var $334=(($332)>>>(0)) < (($333)>>>(0));
   if ($334) { label = 73; break; } else { var $F1_0_i = $331;var $_pre_phi_i = $330;label = 74; break; }
  case 73: 
   _abort();
   throw "Reached an unreachable!";
  case 74: 
   var $_pre_phi_i;
   var $F1_0_i;
   HEAP32[(($_pre_phi_i)>>2)]=$318;
   var $337=(($F1_0_i+12)|0);
   HEAP32[(($337)>>2)]=$318;
   var $338=(($318+8)|0);
   HEAP32[(($338)>>2)]=$F1_0_i;
   var $339=(($318+12)|0);
   HEAP32[(($339)>>2)]=$322;
   label = 75; break;
  case 75: 
   HEAP32[((((111164)|0))>>2)]=$rsize_0_i;
   HEAP32[((((111176)|0))>>2)]=$197;
   label = 77; break;
  case 76: 
   _abort();
   throw "Reached an unreachable!";
  case 77: 
   var $342=(($v_0_i+8)|0);
   var $343=$342;
   var $344=(($342)|(0))==0;
   if ($344) { var $nb_0 = $8;label = 160; break; } else { var $mem_0 = $343;label = 341; break; }
  case 78: 
   var $346=(($bytes)>>>(0)) > 4294967231;
   if ($346) { var $nb_0 = -1;label = 160; break; } else { label = 79; break; }
  case 79: 
   var $348=((($bytes)+(11))|0);
   var $349=$348 & -8;
   var $350=HEAP32[((((111160)|0))>>2)];
   var $351=(($350)|(0))==0;
   if ($351) { var $nb_0 = $349;label = 160; break; } else { label = 80; break; }
  case 80: 
   var $353=(((-$349))|0);
   var $354=$348 >>> 8;
   var $355=(($354)|(0))==0;
   if ($355) { var $idx_0_i = 0;label = 83; break; } else { label = 81; break; }
  case 81: 
   var $357=(($349)>>>(0)) > 16777215;
   if ($357) { var $idx_0_i = 31;label = 83; break; } else { label = 82; break; }
  case 82: 
   var $359=((($354)+(1048320))|0);
   var $360=$359 >>> 16;
   var $361=$360 & 8;
   var $362=$354 << $361;
   var $363=((($362)+(520192))|0);
   var $364=$363 >>> 16;
   var $365=$364 & 4;
   var $366=$365 | $361;
   var $367=$362 << $365;
   var $368=((($367)+(245760))|0);
   var $369=$368 >>> 16;
   var $370=$369 & 2;
   var $371=$366 | $370;
   var $372=(((14)-($371))|0);
   var $373=$367 << $370;
   var $374=$373 >>> 15;
   var $375=((($372)+($374))|0);
   var $376=$375 << 1;
   var $377=((($375)+(7))|0);
   var $378=$349 >>> (($377)>>>(0));
   var $379=$378 & 1;
   var $380=$379 | $376;
   var $idx_0_i = $380;label = 83; break;
  case 83: 
   var $idx_0_i;
   var $382=((111460+($idx_0_i<<2))|0);
   var $383=HEAP32[(($382)>>2)];
   var $384=(($383)|(0))==0;
   if ($384) { var $v_2_i = 0;var $rsize_2_i = $353;var $t_1_i = 0;label = 90; break; } else { label = 84; break; }
  case 84: 
   var $386=(($idx_0_i)|(0))==31;
   if ($386) { var $391 = 0;label = 86; break; } else { label = 85; break; }
  case 85: 
   var $388=$idx_0_i >>> 1;
   var $389=(((25)-($388))|0);
   var $391 = $389;label = 86; break;
  case 86: 
   var $391;
   var $392=$349 << $391;
   var $v_0_i116 = 0;var $rsize_0_i115 = $353;var $t_0_i114 = $383;var $sizebits_0_i = $392;var $rst_0_i = 0;label = 87; break;
  case 87: 
   var $rst_0_i;
   var $sizebits_0_i;
   var $t_0_i114;
   var $rsize_0_i115;
   var $v_0_i116;
   var $394=(($t_0_i114+4)|0);
   var $395=HEAP32[(($394)>>2)];
   var $396=$395 & -8;
   var $397=((($396)-($349))|0);
   var $398=(($397)>>>(0)) < (($rsize_0_i115)>>>(0));
   if ($398) { label = 88; break; } else { var $v_1_i = $v_0_i116;var $rsize_1_i = $rsize_0_i115;label = 89; break; }
  case 88: 
   var $400=(($396)|(0))==(($349)|(0));
   if ($400) { var $v_2_i = $t_0_i114;var $rsize_2_i = $397;var $t_1_i = $t_0_i114;label = 90; break; } else { var $v_1_i = $t_0_i114;var $rsize_1_i = $397;label = 89; break; }
  case 89: 
   var $rsize_1_i;
   var $v_1_i;
   var $402=(($t_0_i114+20)|0);
   var $403=HEAP32[(($402)>>2)];
   var $404=$sizebits_0_i >>> 31;
   var $405=(($t_0_i114+16+($404<<2))|0);
   var $406=HEAP32[(($405)>>2)];
   var $407=(($403)|(0))==0;
   var $408=(($403)|(0))==(($406)|(0));
   var $or_cond_i=$407 | $408;
   var $rst_1_i=$or_cond_i ? $rst_0_i : $403;
   var $409=(($406)|(0))==0;
   var $410=$sizebits_0_i << 1;
   if ($409) { var $v_2_i = $v_1_i;var $rsize_2_i = $rsize_1_i;var $t_1_i = $rst_1_i;label = 90; break; } else { var $v_0_i116 = $v_1_i;var $rsize_0_i115 = $rsize_1_i;var $t_0_i114 = $406;var $sizebits_0_i = $410;var $rst_0_i = $rst_1_i;label = 87; break; }
  case 90: 
   var $t_1_i;
   var $rsize_2_i;
   var $v_2_i;
   var $411=(($t_1_i)|(0))==0;
   var $412=(($v_2_i)|(0))==0;
   var $or_cond19_i=$411 & $412;
   if ($or_cond19_i) { label = 91; break; } else { var $t_2_ph_i = $t_1_i;label = 93; break; }
  case 91: 
   var $414=2 << $idx_0_i;
   var $415=(((-$414))|0);
   var $416=$414 | $415;
   var $417=$350 & $416;
   var $418=(($417)|(0))==0;
   if ($418) { var $nb_0 = $349;label = 160; break; } else { label = 92; break; }
  case 92: 
   var $420=(((-$417))|0);
   var $421=$417 & $420;
   var $422=((($421)-(1))|0);
   var $423=$422 >>> 12;
   var $424=$423 & 16;
   var $425=$422 >>> (($424)>>>(0));
   var $426=$425 >>> 5;
   var $427=$426 & 8;
   var $428=$427 | $424;
   var $429=$425 >>> (($427)>>>(0));
   var $430=$429 >>> 2;
   var $431=$430 & 4;
   var $432=$428 | $431;
   var $433=$429 >>> (($431)>>>(0));
   var $434=$433 >>> 1;
   var $435=$434 & 2;
   var $436=$432 | $435;
   var $437=$433 >>> (($435)>>>(0));
   var $438=$437 >>> 1;
   var $439=$438 & 1;
   var $440=$436 | $439;
   var $441=$437 >>> (($439)>>>(0));
   var $442=((($440)+($441))|0);
   var $443=((111460+($442<<2))|0);
   var $444=HEAP32[(($443)>>2)];
   var $t_2_ph_i = $444;label = 93; break;
  case 93: 
   var $t_2_ph_i;
   var $445=(($t_2_ph_i)|(0))==0;
   if ($445) { var $rsize_3_lcssa_i = $rsize_2_i;var $v_3_lcssa_i = $v_2_i;label = 96; break; } else { var $t_226_i = $t_2_ph_i;var $rsize_327_i = $rsize_2_i;var $v_328_i = $v_2_i;label = 94; break; }
  case 94: 
   var $v_328_i;
   var $rsize_327_i;
   var $t_226_i;
   var $446=(($t_226_i+4)|0);
   var $447=HEAP32[(($446)>>2)];
   var $448=$447 & -8;
   var $449=((($448)-($349))|0);
   var $450=(($449)>>>(0)) < (($rsize_327_i)>>>(0));
   var $_rsize_3_i=$450 ? $449 : $rsize_327_i;
   var $t_2_v_3_i=$450 ? $t_226_i : $v_328_i;
   var $451=(($t_226_i+16)|0);
   var $452=HEAP32[(($451)>>2)];
   var $453=(($452)|(0))==0;
   if ($453) { label = 95; break; } else { var $t_226_i = $452;var $rsize_327_i = $_rsize_3_i;var $v_328_i = $t_2_v_3_i;label = 94; break; }
  case 95: 
   var $454=(($t_226_i+20)|0);
   var $455=HEAP32[(($454)>>2)];
   var $456=(($455)|(0))==0;
   if ($456) { var $rsize_3_lcssa_i = $_rsize_3_i;var $v_3_lcssa_i = $t_2_v_3_i;label = 96; break; } else { var $t_226_i = $455;var $rsize_327_i = $_rsize_3_i;var $v_328_i = $t_2_v_3_i;label = 94; break; }
  case 96: 
   var $v_3_lcssa_i;
   var $rsize_3_lcssa_i;
   var $457=(($v_3_lcssa_i)|(0))==0;
   if ($457) { var $nb_0 = $349;label = 160; break; } else { label = 97; break; }
  case 97: 
   var $459=HEAP32[((((111164)|0))>>2)];
   var $460=((($459)-($349))|0);
   var $461=(($rsize_3_lcssa_i)>>>(0)) < (($460)>>>(0));
   if ($461) { label = 98; break; } else { var $nb_0 = $349;label = 160; break; }
  case 98: 
   var $463=$v_3_lcssa_i;
   var $464=HEAP32[((((111172)|0))>>2)];
   var $465=(($463)>>>(0)) < (($464)>>>(0));
   if ($465) { label = 158; break; } else { label = 99; break; }
  case 99: 
   var $467=(($463+$349)|0);
   var $468=$467;
   var $469=(($463)>>>(0)) < (($467)>>>(0));
   if ($469) { label = 100; break; } else { label = 158; break; }
  case 100: 
   var $471=(($v_3_lcssa_i+24)|0);
   var $472=HEAP32[(($471)>>2)];
   var $473=(($v_3_lcssa_i+12)|0);
   var $474=HEAP32[(($473)>>2)];
   var $475=(($474)|(0))==(($v_3_lcssa_i)|(0));
   if ($475) { label = 106; break; } else { label = 101; break; }
  case 101: 
   var $477=(($v_3_lcssa_i+8)|0);
   var $478=HEAP32[(($477)>>2)];
   var $479=$478;
   var $480=(($479)>>>(0)) < (($464)>>>(0));
   if ($480) { label = 105; break; } else { label = 102; break; }
  case 102: 
   var $482=(($478+12)|0);
   var $483=HEAP32[(($482)>>2)];
   var $484=(($483)|(0))==(($v_3_lcssa_i)|(0));
   if ($484) { label = 103; break; } else { label = 105; break; }
  case 103: 
   var $486=(($474+8)|0);
   var $487=HEAP32[(($486)>>2)];
   var $488=(($487)|(0))==(($v_3_lcssa_i)|(0));
   if ($488) { label = 104; break; } else { label = 105; break; }
  case 104: 
   HEAP32[(($482)>>2)]=$474;
   HEAP32[(($486)>>2)]=$478;
   var $R_1_i120 = $474;label = 113; break;
  case 105: 
   _abort();
   throw "Reached an unreachable!";
  case 106: 
   var $491=(($v_3_lcssa_i+20)|0);
   var $492=HEAP32[(($491)>>2)];
   var $493=(($492)|(0))==0;
   if ($493) { label = 107; break; } else { var $R_0_i118 = $492;var $RP_0_i117 = $491;label = 108; break; }
  case 107: 
   var $495=(($v_3_lcssa_i+16)|0);
   var $496=HEAP32[(($495)>>2)];
   var $497=(($496)|(0))==0;
   if ($497) { var $R_1_i120 = 0;label = 113; break; } else { var $R_0_i118 = $496;var $RP_0_i117 = $495;label = 108; break; }
  case 108: 
   var $RP_0_i117;
   var $R_0_i118;
   var $498=(($R_0_i118+20)|0);
   var $499=HEAP32[(($498)>>2)];
   var $500=(($499)|(0))==0;
   if ($500) { label = 109; break; } else { var $R_0_i118 = $499;var $RP_0_i117 = $498;label = 108; break; }
  case 109: 
   var $502=(($R_0_i118+16)|0);
   var $503=HEAP32[(($502)>>2)];
   var $504=(($503)|(0))==0;
   if ($504) { label = 110; break; } else { var $R_0_i118 = $503;var $RP_0_i117 = $502;label = 108; break; }
  case 110: 
   var $506=$RP_0_i117;
   var $507=(($506)>>>(0)) < (($464)>>>(0));
   if ($507) { label = 112; break; } else { label = 111; break; }
  case 111: 
   HEAP32[(($RP_0_i117)>>2)]=0;
   var $R_1_i120 = $R_0_i118;label = 113; break;
  case 112: 
   _abort();
   throw "Reached an unreachable!";
  case 113: 
   var $R_1_i120;
   var $511=(($472)|(0))==0;
   if ($511) { label = 133; break; } else { label = 114; break; }
  case 114: 
   var $513=(($v_3_lcssa_i+28)|0);
   var $514=HEAP32[(($513)>>2)];
   var $515=((111460+($514<<2))|0);
   var $516=HEAP32[(($515)>>2)];
   var $517=(($v_3_lcssa_i)|(0))==(($516)|(0));
   if ($517) { label = 115; break; } else { label = 117; break; }
  case 115: 
   HEAP32[(($515)>>2)]=$R_1_i120;
   var $cond_i121=(($R_1_i120)|(0))==0;
   if ($cond_i121) { label = 116; break; } else { label = 123; break; }
  case 116: 
   var $519=HEAP32[(($513)>>2)];
   var $520=1 << $519;
   var $521=$520 ^ -1;
   var $522=HEAP32[((((111160)|0))>>2)];
   var $523=$522 & $521;
   HEAP32[((((111160)|0))>>2)]=$523;
   label = 133; break;
  case 117: 
   var $525=$472;
   var $526=HEAP32[((((111172)|0))>>2)];
   var $527=(($525)>>>(0)) < (($526)>>>(0));
   if ($527) { label = 121; break; } else { label = 118; break; }
  case 118: 
   var $529=(($472+16)|0);
   var $530=HEAP32[(($529)>>2)];
   var $531=(($530)|(0))==(($v_3_lcssa_i)|(0));
   if ($531) { label = 119; break; } else { label = 120; break; }
  case 119: 
   HEAP32[(($529)>>2)]=$R_1_i120;
   label = 122; break;
  case 120: 
   var $534=(($472+20)|0);
   HEAP32[(($534)>>2)]=$R_1_i120;
   label = 122; break;
  case 121: 
   _abort();
   throw "Reached an unreachable!";
  case 122: 
   var $537=(($R_1_i120)|(0))==0;
   if ($537) { label = 133; break; } else { label = 123; break; }
  case 123: 
   var $539=$R_1_i120;
   var $540=HEAP32[((((111172)|0))>>2)];
   var $541=(($539)>>>(0)) < (($540)>>>(0));
   if ($541) { label = 132; break; } else { label = 124; break; }
  case 124: 
   var $543=(($R_1_i120+24)|0);
   HEAP32[(($543)>>2)]=$472;
   var $544=(($v_3_lcssa_i+16)|0);
   var $545=HEAP32[(($544)>>2)];
   var $546=(($545)|(0))==0;
   if ($546) { label = 128; break; } else { label = 125; break; }
  case 125: 
   var $548=$545;
   var $549=HEAP32[((((111172)|0))>>2)];
   var $550=(($548)>>>(0)) < (($549)>>>(0));
   if ($550) { label = 127; break; } else { label = 126; break; }
  case 126: 
   var $552=(($R_1_i120+16)|0);
   HEAP32[(($552)>>2)]=$545;
   var $553=(($545+24)|0);
   HEAP32[(($553)>>2)]=$R_1_i120;
   label = 128; break;
  case 127: 
   _abort();
   throw "Reached an unreachable!";
  case 128: 
   var $556=(($v_3_lcssa_i+20)|0);
   var $557=HEAP32[(($556)>>2)];
   var $558=(($557)|(0))==0;
   if ($558) { label = 133; break; } else { label = 129; break; }
  case 129: 
   var $560=$557;
   var $561=HEAP32[((((111172)|0))>>2)];
   var $562=(($560)>>>(0)) < (($561)>>>(0));
   if ($562) { label = 131; break; } else { label = 130; break; }
  case 130: 
   var $564=(($R_1_i120+20)|0);
   HEAP32[(($564)>>2)]=$557;
   var $565=(($557+24)|0);
   HEAP32[(($565)>>2)]=$R_1_i120;
   label = 133; break;
  case 131: 
   _abort();
   throw "Reached an unreachable!";
  case 132: 
   _abort();
   throw "Reached an unreachable!";
  case 133: 
   var $569=(($rsize_3_lcssa_i)>>>(0)) < 16;
   if ($569) { label = 134; break; } else { label = 135; break; }
  case 134: 
   var $571=((($rsize_3_lcssa_i)+($349))|0);
   var $572=$571 | 3;
   var $573=(($v_3_lcssa_i+4)|0);
   HEAP32[(($573)>>2)]=$572;
   var $_sum18_i=((($571)+(4))|0);
   var $574=(($463+$_sum18_i)|0);
   var $575=$574;
   var $576=HEAP32[(($575)>>2)];
   var $577=$576 | 1;
   HEAP32[(($575)>>2)]=$577;
   label = 159; break;
  case 135: 
   var $579=$349 | 3;
   var $580=(($v_3_lcssa_i+4)|0);
   HEAP32[(($580)>>2)]=$579;
   var $581=$rsize_3_lcssa_i | 1;
   var $_sum_i123134=$349 | 4;
   var $582=(($463+$_sum_i123134)|0);
   var $583=$582;
   HEAP32[(($583)>>2)]=$581;
   var $_sum1_i124=((($rsize_3_lcssa_i)+($349))|0);
   var $584=(($463+$_sum1_i124)|0);
   var $585=$584;
   HEAP32[(($585)>>2)]=$rsize_3_lcssa_i;
   var $586=$rsize_3_lcssa_i >>> 3;
   var $587=(($rsize_3_lcssa_i)>>>(0)) < 256;
   if ($587) { label = 136; break; } else { label = 141; break; }
  case 136: 
   var $589=$586 << 1;
   var $590=((111196+($589<<2))|0);
   var $591=$590;
   var $592=HEAP32[((((111156)|0))>>2)];
   var $593=1 << $586;
   var $594=$592 & $593;
   var $595=(($594)|(0))==0;
   if ($595) { label = 137; break; } else { label = 138; break; }
  case 137: 
   var $597=$592 | $593;
   HEAP32[((((111156)|0))>>2)]=$597;
   var $_sum14_pre_i=((($589)+(2))|0);
   var $_pre_i125=((111196+($_sum14_pre_i<<2))|0);
   var $F5_0_i = $591;var $_pre_phi_i126 = $_pre_i125;label = 140; break;
  case 138: 
   var $_sum17_i=((($589)+(2))|0);
   var $599=((111196+($_sum17_i<<2))|0);
   var $600=HEAP32[(($599)>>2)];
   var $601=$600;
   var $602=HEAP32[((((111172)|0))>>2)];
   var $603=(($601)>>>(0)) < (($602)>>>(0));
   if ($603) { label = 139; break; } else { var $F5_0_i = $600;var $_pre_phi_i126 = $599;label = 140; break; }
  case 139: 
   _abort();
   throw "Reached an unreachable!";
  case 140: 
   var $_pre_phi_i126;
   var $F5_0_i;
   HEAP32[(($_pre_phi_i126)>>2)]=$468;
   var $606=(($F5_0_i+12)|0);
   HEAP32[(($606)>>2)]=$468;
   var $_sum15_i=((($349)+(8))|0);
   var $607=(($463+$_sum15_i)|0);
   var $608=$607;
   HEAP32[(($608)>>2)]=$F5_0_i;
   var $_sum16_i=((($349)+(12))|0);
   var $609=(($463+$_sum16_i)|0);
   var $610=$609;
   HEAP32[(($610)>>2)]=$591;
   label = 159; break;
  case 141: 
   var $612=$467;
   var $613=$rsize_3_lcssa_i >>> 8;
   var $614=(($613)|(0))==0;
   if ($614) { var $I7_0_i = 0;label = 144; break; } else { label = 142; break; }
  case 142: 
   var $616=(($rsize_3_lcssa_i)>>>(0)) > 16777215;
   if ($616) { var $I7_0_i = 31;label = 144; break; } else { label = 143; break; }
  case 143: 
   var $618=((($613)+(1048320))|0);
   var $619=$618 >>> 16;
   var $620=$619 & 8;
   var $621=$613 << $620;
   var $622=((($621)+(520192))|0);
   var $623=$622 >>> 16;
   var $624=$623 & 4;
   var $625=$624 | $620;
   var $626=$621 << $624;
   var $627=((($626)+(245760))|0);
   var $628=$627 >>> 16;
   var $629=$628 & 2;
   var $630=$625 | $629;
   var $631=(((14)-($630))|0);
   var $632=$626 << $629;
   var $633=$632 >>> 15;
   var $634=((($631)+($633))|0);
   var $635=$634 << 1;
   var $636=((($634)+(7))|0);
   var $637=$rsize_3_lcssa_i >>> (($636)>>>(0));
   var $638=$637 & 1;
   var $639=$638 | $635;
   var $I7_0_i = $639;label = 144; break;
  case 144: 
   var $I7_0_i;
   var $641=((111460+($I7_0_i<<2))|0);
   var $_sum2_i=((($349)+(28))|0);
   var $642=(($463+$_sum2_i)|0);
   var $643=$642;
   HEAP32[(($643)>>2)]=$I7_0_i;
   var $_sum3_i127=((($349)+(16))|0);
   var $644=(($463+$_sum3_i127)|0);
   var $_sum4_i128=((($349)+(20))|0);
   var $645=(($463+$_sum4_i128)|0);
   var $646=$645;
   HEAP32[(($646)>>2)]=0;
   var $647=$644;
   HEAP32[(($647)>>2)]=0;
   var $648=HEAP32[((((111160)|0))>>2)];
   var $649=1 << $I7_0_i;
   var $650=$648 & $649;
   var $651=(($650)|(0))==0;
   if ($651) { label = 145; break; } else { label = 146; break; }
  case 145: 
   var $653=$648 | $649;
   HEAP32[((((111160)|0))>>2)]=$653;
   HEAP32[(($641)>>2)]=$612;
   var $654=$641;
   var $_sum5_i=((($349)+(24))|0);
   var $655=(($463+$_sum5_i)|0);
   var $656=$655;
   HEAP32[(($656)>>2)]=$654;
   var $_sum6_i=((($349)+(12))|0);
   var $657=(($463+$_sum6_i)|0);
   var $658=$657;
   HEAP32[(($658)>>2)]=$612;
   var $_sum7_i=((($349)+(8))|0);
   var $659=(($463+$_sum7_i)|0);
   var $660=$659;
   HEAP32[(($660)>>2)]=$612;
   label = 159; break;
  case 146: 
   var $662=HEAP32[(($641)>>2)];
   var $663=(($I7_0_i)|(0))==31;
   if ($663) { var $668 = 0;label = 148; break; } else { label = 147; break; }
  case 147: 
   var $665=$I7_0_i >>> 1;
   var $666=(((25)-($665))|0);
   var $668 = $666;label = 148; break;
  case 148: 
   var $668;
   var $669=$rsize_3_lcssa_i << $668;
   var $K12_0_i = $669;var $T_0_i = $662;label = 149; break;
  case 149: 
   var $T_0_i;
   var $K12_0_i;
   var $671=(($T_0_i+4)|0);
   var $672=HEAP32[(($671)>>2)];
   var $673=$672 & -8;
   var $674=(($673)|(0))==(($rsize_3_lcssa_i)|(0));
   if ($674) { label = 154; break; } else { label = 150; break; }
  case 150: 
   var $676=$K12_0_i >>> 31;
   var $677=(($T_0_i+16+($676<<2))|0);
   var $678=HEAP32[(($677)>>2)];
   var $679=(($678)|(0))==0;
   var $680=$K12_0_i << 1;
   if ($679) { label = 151; break; } else { var $K12_0_i = $680;var $T_0_i = $678;label = 149; break; }
  case 151: 
   var $682=$677;
   var $683=HEAP32[((((111172)|0))>>2)];
   var $684=(($682)>>>(0)) < (($683)>>>(0));
   if ($684) { label = 153; break; } else { label = 152; break; }
  case 152: 
   HEAP32[(($677)>>2)]=$612;
   var $_sum11_i=((($349)+(24))|0);
   var $686=(($463+$_sum11_i)|0);
   var $687=$686;
   HEAP32[(($687)>>2)]=$T_0_i;
   var $_sum12_i=((($349)+(12))|0);
   var $688=(($463+$_sum12_i)|0);
   var $689=$688;
   HEAP32[(($689)>>2)]=$612;
   var $_sum13_i=((($349)+(8))|0);
   var $690=(($463+$_sum13_i)|0);
   var $691=$690;
   HEAP32[(($691)>>2)]=$612;
   label = 159; break;
  case 153: 
   _abort();
   throw "Reached an unreachable!";
  case 154: 
   var $694=(($T_0_i+8)|0);
   var $695=HEAP32[(($694)>>2)];
   var $696=$T_0_i;
   var $697=HEAP32[((((111172)|0))>>2)];
   var $698=(($696)>>>(0)) < (($697)>>>(0));
   if ($698) { label = 157; break; } else { label = 155; break; }
  case 155: 
   var $700=$695;
   var $701=(($700)>>>(0)) < (($697)>>>(0));
   if ($701) { label = 157; break; } else { label = 156; break; }
  case 156: 
   var $703=(($695+12)|0);
   HEAP32[(($703)>>2)]=$612;
   HEAP32[(($694)>>2)]=$612;
   var $_sum8_i=((($349)+(8))|0);
   var $704=(($463+$_sum8_i)|0);
   var $705=$704;
   HEAP32[(($705)>>2)]=$695;
   var $_sum9_i=((($349)+(12))|0);
   var $706=(($463+$_sum9_i)|0);
   var $707=$706;
   HEAP32[(($707)>>2)]=$T_0_i;
   var $_sum10_i=((($349)+(24))|0);
   var $708=(($463+$_sum10_i)|0);
   var $709=$708;
   HEAP32[(($709)>>2)]=0;
   label = 159; break;
  case 157: 
   _abort();
   throw "Reached an unreachable!";
  case 158: 
   _abort();
   throw "Reached an unreachable!";
  case 159: 
   var $711=(($v_3_lcssa_i+8)|0);
   var $712=$711;
   var $713=(($711)|(0))==0;
   if ($713) { var $nb_0 = $349;label = 160; break; } else { var $mem_0 = $712;label = 341; break; }
  case 160: 
   var $nb_0;
   var $714=HEAP32[((((111164)|0))>>2)];
   var $715=(($nb_0)>>>(0)) > (($714)>>>(0));
   if ($715) { label = 165; break; } else { label = 161; break; }
  case 161: 
   var $717=((($714)-($nb_0))|0);
   var $718=HEAP32[((((111176)|0))>>2)];
   var $719=(($717)>>>(0)) > 15;
   if ($719) { label = 162; break; } else { label = 163; break; }
  case 162: 
   var $721=$718;
   var $722=(($721+$nb_0)|0);
   var $723=$722;
   HEAP32[((((111176)|0))>>2)]=$723;
   HEAP32[((((111164)|0))>>2)]=$717;
   var $724=$717 | 1;
   var $_sum102=((($nb_0)+(4))|0);
   var $725=(($721+$_sum102)|0);
   var $726=$725;
   HEAP32[(($726)>>2)]=$724;
   var $727=(($721+$714)|0);
   var $728=$727;
   HEAP32[(($728)>>2)]=$717;
   var $729=$nb_0 | 3;
   var $730=(($718+4)|0);
   HEAP32[(($730)>>2)]=$729;
   label = 164; break;
  case 163: 
   HEAP32[((((111164)|0))>>2)]=0;
   HEAP32[((((111176)|0))>>2)]=0;
   var $732=$714 | 3;
   var $733=(($718+4)|0);
   HEAP32[(($733)>>2)]=$732;
   var $734=$718;
   var $_sum101=((($714)+(4))|0);
   var $735=(($734+$_sum101)|0);
   var $736=$735;
   var $737=HEAP32[(($736)>>2)];
   var $738=$737 | 1;
   HEAP32[(($736)>>2)]=$738;
   label = 164; break;
  case 164: 
   var $740=(($718+8)|0);
   var $741=$740;
   var $mem_0 = $741;label = 341; break;
  case 165: 
   var $743=HEAP32[((((111168)|0))>>2)];
   var $744=(($nb_0)>>>(0)) < (($743)>>>(0));
   if ($744) { label = 166; break; } else { label = 167; break; }
  case 166: 
   var $746=((($743)-($nb_0))|0);
   HEAP32[((((111168)|0))>>2)]=$746;
   var $747=HEAP32[((((111180)|0))>>2)];
   var $748=$747;
   var $749=(($748+$nb_0)|0);
   var $750=$749;
   HEAP32[((((111180)|0))>>2)]=$750;
   var $751=$746 | 1;
   var $_sum=((($nb_0)+(4))|0);
   var $752=(($748+$_sum)|0);
   var $753=$752;
   HEAP32[(($753)>>2)]=$751;
   var $754=$nb_0 | 3;
   var $755=(($747+4)|0);
   HEAP32[(($755)>>2)]=$754;
   var $756=(($747+8)|0);
   var $757=$756;
   var $mem_0 = $757;label = 341; break;
  case 167: 
   var $759=HEAP32[((((111064)|0))>>2)];
   var $760=(($759)|(0))==0;
   if ($760) { label = 168; break; } else { label = 171; break; }
  case 168: 
   var $762=_sysconf(8);
   var $763=((($762)-(1))|0);
   var $764=$763 & $762;
   var $765=(($764)|(0))==0;
   if ($765) { label = 170; break; } else { label = 169; break; }
  case 169: 
   _abort();
   throw "Reached an unreachable!";
  case 170: 
   HEAP32[((((111072)|0))>>2)]=$762;
   HEAP32[((((111068)|0))>>2)]=$762;
   HEAP32[((((111076)|0))>>2)]=-1;
   HEAP32[((((111080)|0))>>2)]=2097152;
   HEAP32[((((111084)|0))>>2)]=0;
   HEAP32[((((111600)|0))>>2)]=0;
   var $767=_time(0);
   var $768=$767 & -16;
   var $769=$768 ^ 1431655768;
   HEAP32[((((111064)|0))>>2)]=$769;
   label = 171; break;
  case 171: 
   var $771=((($nb_0)+(48))|0);
   var $772=HEAP32[((((111072)|0))>>2)];
   var $773=((($nb_0)+(47))|0);
   var $774=((($772)+($773))|0);
   var $775=(((-$772))|0);
   var $776=$774 & $775;
   var $777=(($776)>>>(0)) > (($nb_0)>>>(0));
   if ($777) { label = 172; break; } else { var $mem_0 = 0;label = 341; break; }
  case 172: 
   var $779=HEAP32[((((111596)|0))>>2)];
   var $780=(($779)|(0))==0;
   if ($780) { label = 174; break; } else { label = 173; break; }
  case 173: 
   var $782=HEAP32[((((111588)|0))>>2)];
   var $783=((($782)+($776))|0);
   var $784=(($783)>>>(0)) <= (($782)>>>(0));
   var $785=(($783)>>>(0)) > (($779)>>>(0));
   var $or_cond1_i=$784 | $785;
   if ($or_cond1_i) { var $mem_0 = 0;label = 341; break; } else { label = 174; break; }
  case 174: 
   var $787=HEAP32[((((111600)|0))>>2)];
   var $788=$787 & 4;
   var $789=(($788)|(0))==0;
   if ($789) { label = 175; break; } else { var $tsize_1_i = 0;label = 198; break; }
  case 175: 
   var $791=HEAP32[((((111180)|0))>>2)];
   var $792=(($791)|(0))==0;
   if ($792) { label = 181; break; } else { label = 176; break; }
  case 176: 
   var $794=$791;
   var $sp_0_i_i = ((111604)|0);label = 177; break;
  case 177: 
   var $sp_0_i_i;
   var $796=(($sp_0_i_i)|0);
   var $797=HEAP32[(($796)>>2)];
   var $798=(($797)>>>(0)) > (($794)>>>(0));
   if ($798) { label = 179; break; } else { label = 178; break; }
  case 178: 
   var $800=(($sp_0_i_i+4)|0);
   var $801=HEAP32[(($800)>>2)];
   var $802=(($797+$801)|0);
   var $803=(($802)>>>(0)) > (($794)>>>(0));
   if ($803) { label = 180; break; } else { label = 179; break; }
  case 179: 
   var $805=(($sp_0_i_i+8)|0);
   var $806=HEAP32[(($805)>>2)];
   var $807=(($806)|(0))==0;
   if ($807) { label = 181; break; } else { var $sp_0_i_i = $806;label = 177; break; }
  case 180: 
   var $808=(($sp_0_i_i)|(0))==0;
   if ($808) { label = 181; break; } else { label = 188; break; }
  case 181: 
   var $809=_sbrk(0);
   var $810=(($809)|(0))==-1;
   if ($810) { var $tsize_0303639_i = 0;label = 197; break; } else { label = 182; break; }
  case 182: 
   var $812=$809;
   var $813=HEAP32[((((111068)|0))>>2)];
   var $814=((($813)-(1))|0);
   var $815=$814 & $812;
   var $816=(($815)|(0))==0;
   if ($816) { var $ssize_0_i = $776;label = 184; break; } else { label = 183; break; }
  case 183: 
   var $818=((($814)+($812))|0);
   var $819=(((-$813))|0);
   var $820=$818 & $819;
   var $821=((($776)-($812))|0);
   var $822=((($821)+($820))|0);
   var $ssize_0_i = $822;label = 184; break;
  case 184: 
   var $ssize_0_i;
   var $824=HEAP32[((((111588)|0))>>2)];
   var $825=((($824)+($ssize_0_i))|0);
   var $826=(($ssize_0_i)>>>(0)) > (($nb_0)>>>(0));
   var $827=(($ssize_0_i)>>>(0)) < 2147483647;
   var $or_cond_i129=$826 & $827;
   if ($or_cond_i129) { label = 185; break; } else { var $tsize_0303639_i = 0;label = 197; break; }
  case 185: 
   var $829=HEAP32[((((111596)|0))>>2)];
   var $830=(($829)|(0))==0;
   if ($830) { label = 187; break; } else { label = 186; break; }
  case 186: 
   var $832=(($825)>>>(0)) <= (($824)>>>(0));
   var $833=(($825)>>>(0)) > (($829)>>>(0));
   var $or_cond2_i=$832 | $833;
   if ($or_cond2_i) { var $tsize_0303639_i = 0;label = 197; break; } else { label = 187; break; }
  case 187: 
   var $835=_sbrk($ssize_0_i);
   var $836=(($835)|(0))==(($809)|(0));
   var $ssize_0__i=$836 ? $ssize_0_i : 0;
   var $__i=$836 ? $809 : -1;
   var $tbase_0_i = $__i;var $tsize_0_i = $ssize_0__i;var $br_0_i = $835;var $ssize_1_i = $ssize_0_i;label = 190; break;
  case 188: 
   var $838=HEAP32[((((111168)|0))>>2)];
   var $839=((($774)-($838))|0);
   var $840=$839 & $775;
   var $841=(($840)>>>(0)) < 2147483647;
   if ($841) { label = 189; break; } else { var $tsize_0303639_i = 0;label = 197; break; }
  case 189: 
   var $843=_sbrk($840);
   var $844=HEAP32[(($796)>>2)];
   var $845=HEAP32[(($800)>>2)];
   var $846=(($844+$845)|0);
   var $847=(($843)|(0))==(($846)|(0));
   var $_3_i=$847 ? $840 : 0;
   var $_4_i=$847 ? $843 : -1;
   var $tbase_0_i = $_4_i;var $tsize_0_i = $_3_i;var $br_0_i = $843;var $ssize_1_i = $840;label = 190; break;
  case 190: 
   var $ssize_1_i;
   var $br_0_i;
   var $tsize_0_i;
   var $tbase_0_i;
   var $849=(((-$ssize_1_i))|0);
   var $850=(($tbase_0_i)|(0))==-1;
   if ($850) { label = 191; break; } else { var $tsize_244_i = $tsize_0_i;var $tbase_245_i = $tbase_0_i;label = 201; break; }
  case 191: 
   var $852=(($br_0_i)|(0))!=-1;
   var $853=(($ssize_1_i)>>>(0)) < 2147483647;
   var $or_cond5_i=$852 & $853;
   var $854=(($ssize_1_i)>>>(0)) < (($771)>>>(0));
   var $or_cond6_i=$or_cond5_i & $854;
   if ($or_cond6_i) { label = 192; break; } else { var $ssize_2_i = $ssize_1_i;label = 196; break; }
  case 192: 
   var $856=HEAP32[((((111072)|0))>>2)];
   var $857=((($773)-($ssize_1_i))|0);
   var $858=((($857)+($856))|0);
   var $859=(((-$856))|0);
   var $860=$858 & $859;
   var $861=(($860)>>>(0)) < 2147483647;
   if ($861) { label = 193; break; } else { var $ssize_2_i = $ssize_1_i;label = 196; break; }
  case 193: 
   var $863=_sbrk($860);
   var $864=(($863)|(0))==-1;
   if ($864) { label = 195; break; } else { label = 194; break; }
  case 194: 
   var $866=((($860)+($ssize_1_i))|0);
   var $ssize_2_i = $866;label = 196; break;
  case 195: 
   var $868=_sbrk($849);
   var $tsize_0303639_i = $tsize_0_i;label = 197; break;
  case 196: 
   var $ssize_2_i;
   var $870=(($br_0_i)|(0))==-1;
   if ($870) { var $tsize_0303639_i = $tsize_0_i;label = 197; break; } else { var $tsize_244_i = $ssize_2_i;var $tbase_245_i = $br_0_i;label = 201; break; }
  case 197: 
   var $tsize_0303639_i;
   var $871=HEAP32[((((111600)|0))>>2)];
   var $872=$871 | 4;
   HEAP32[((((111600)|0))>>2)]=$872;
   var $tsize_1_i = $tsize_0303639_i;label = 198; break;
  case 198: 
   var $tsize_1_i;
   var $874=(($776)>>>(0)) < 2147483647;
   if ($874) { label = 199; break; } else { label = 340; break; }
  case 199: 
   var $876=_sbrk($776);
   var $877=_sbrk(0);
   var $notlhs_i=(($876)|(0))!=-1;
   var $notrhs_i=(($877)|(0))!=-1;
   var $or_cond8_not_i=$notrhs_i & $notlhs_i;
   var $878=(($876)>>>(0)) < (($877)>>>(0));
   var $or_cond9_i=$or_cond8_not_i & $878;
   if ($or_cond9_i) { label = 200; break; } else { label = 340; break; }
  case 200: 
   var $879=$877;
   var $880=$876;
   var $881=((($879)-($880))|0);
   var $882=((($nb_0)+(40))|0);
   var $883=(($881)>>>(0)) > (($882)>>>(0));
   var $_tsize_1_i=$883 ? $881 : $tsize_1_i;
   var $_tbase_1_i=$883 ? $876 : -1;
   var $884=(($_tbase_1_i)|(0))==-1;
   if ($884) { label = 340; break; } else { var $tsize_244_i = $_tsize_1_i;var $tbase_245_i = $_tbase_1_i;label = 201; break; }
  case 201: 
   var $tbase_245_i;
   var $tsize_244_i;
   var $885=HEAP32[((((111588)|0))>>2)];
   var $886=((($885)+($tsize_244_i))|0);
   HEAP32[((((111588)|0))>>2)]=$886;
   var $887=HEAP32[((((111592)|0))>>2)];
   var $888=(($886)>>>(0)) > (($887)>>>(0));
   if ($888) { label = 202; break; } else { label = 203; break; }
  case 202: 
   HEAP32[((((111592)|0))>>2)]=$886;
   label = 203; break;
  case 203: 
   var $890=HEAP32[((((111180)|0))>>2)];
   var $891=(($890)|(0))==0;
   if ($891) { label = 204; break; } else { var $sp_067_i = ((111604)|0);label = 211; break; }
  case 204: 
   var $893=HEAP32[((((111172)|0))>>2)];
   var $894=(($893)|(0))==0;
   var $895=(($tbase_245_i)>>>(0)) < (($893)>>>(0));
   var $or_cond10_i=$894 | $895;
   if ($or_cond10_i) { label = 205; break; } else { label = 206; break; }
  case 205: 
   HEAP32[((((111172)|0))>>2)]=$tbase_245_i;
   label = 206; break;
  case 206: 
   HEAP32[((((111604)|0))>>2)]=$tbase_245_i;
   HEAP32[((((111608)|0))>>2)]=$tsize_244_i;
   HEAP32[((((111616)|0))>>2)]=0;
   var $897=HEAP32[((((111064)|0))>>2)];
   HEAP32[((((111192)|0))>>2)]=$897;
   HEAP32[((((111188)|0))>>2)]=-1;
   var $i_02_i_i = 0;label = 207; break;
  case 207: 
   var $i_02_i_i;
   var $899=$i_02_i_i << 1;
   var $900=((111196+($899<<2))|0);
   var $901=$900;
   var $_sum_i_i=((($899)+(3))|0);
   var $902=((111196+($_sum_i_i<<2))|0);
   HEAP32[(($902)>>2)]=$901;
   var $_sum1_i_i=((($899)+(2))|0);
   var $903=((111196+($_sum1_i_i<<2))|0);
   HEAP32[(($903)>>2)]=$901;
   var $904=((($i_02_i_i)+(1))|0);
   var $exitcond_i_i=(($904)|(0))==32;
   if ($exitcond_i_i) { label = 208; break; } else { var $i_02_i_i = $904;label = 207; break; }
  case 208: 
   var $905=((($tsize_244_i)-(40))|0);
   var $906=(($tbase_245_i+8)|0);
   var $907=$906;
   var $908=$907 & 7;
   var $909=(($908)|(0))==0;
   if ($909) { var $913 = 0;label = 210; break; } else { label = 209; break; }
  case 209: 
   var $911=(((-$907))|0);
   var $912=$911 & 7;
   var $913 = $912;label = 210; break;
  case 210: 
   var $913;
   var $914=(($tbase_245_i+$913)|0);
   var $915=$914;
   var $916=((($905)-($913))|0);
   HEAP32[((((111180)|0))>>2)]=$915;
   HEAP32[((((111168)|0))>>2)]=$916;
   var $917=$916 | 1;
   var $_sum_i14_i=((($913)+(4))|0);
   var $918=(($tbase_245_i+$_sum_i14_i)|0);
   var $919=$918;
   HEAP32[(($919)>>2)]=$917;
   var $_sum2_i_i=((($tsize_244_i)-(36))|0);
   var $920=(($tbase_245_i+$_sum2_i_i)|0);
   var $921=$920;
   HEAP32[(($921)>>2)]=40;
   var $922=HEAP32[((((111080)|0))>>2)];
   HEAP32[((((111184)|0))>>2)]=$922;
   label = 338; break;
  case 211: 
   var $sp_067_i;
   var $923=(($sp_067_i)|0);
   var $924=HEAP32[(($923)>>2)];
   var $925=(($sp_067_i+4)|0);
   var $926=HEAP32[(($925)>>2)];
   var $927=(($924+$926)|0);
   var $928=(($tbase_245_i)|(0))==(($927)|(0));
   if ($928) { label = 213; break; } else { label = 212; break; }
  case 212: 
   var $930=(($sp_067_i+8)|0);
   var $931=HEAP32[(($930)>>2)];
   var $932=(($931)|(0))==0;
   if ($932) { label = 218; break; } else { var $sp_067_i = $931;label = 211; break; }
  case 213: 
   var $933=(($sp_067_i+12)|0);
   var $934=HEAP32[(($933)>>2)];
   var $935=$934 & 8;
   var $936=(($935)|(0))==0;
   if ($936) { label = 214; break; } else { label = 218; break; }
  case 214: 
   var $938=$890;
   var $939=(($938)>>>(0)) >= (($924)>>>(0));
   var $940=(($938)>>>(0)) < (($tbase_245_i)>>>(0));
   var $or_cond47_i=$939 & $940;
   if ($or_cond47_i) { label = 215; break; } else { label = 218; break; }
  case 215: 
   var $942=((($926)+($tsize_244_i))|0);
   HEAP32[(($925)>>2)]=$942;
   var $943=HEAP32[((((111180)|0))>>2)];
   var $944=HEAP32[((((111168)|0))>>2)];
   var $945=((($944)+($tsize_244_i))|0);
   var $946=$943;
   var $947=(($943+8)|0);
   var $948=$947;
   var $949=$948 & 7;
   var $950=(($949)|(0))==0;
   if ($950) { var $954 = 0;label = 217; break; } else { label = 216; break; }
  case 216: 
   var $952=(((-$948))|0);
   var $953=$952 & 7;
   var $954 = $953;label = 217; break;
  case 217: 
   var $954;
   var $955=(($946+$954)|0);
   var $956=$955;
   var $957=((($945)-($954))|0);
   HEAP32[((((111180)|0))>>2)]=$956;
   HEAP32[((((111168)|0))>>2)]=$957;
   var $958=$957 | 1;
   var $_sum_i18_i=((($954)+(4))|0);
   var $959=(($946+$_sum_i18_i)|0);
   var $960=$959;
   HEAP32[(($960)>>2)]=$958;
   var $_sum2_i19_i=((($945)+(4))|0);
   var $961=(($946+$_sum2_i19_i)|0);
   var $962=$961;
   HEAP32[(($962)>>2)]=40;
   var $963=HEAP32[((((111080)|0))>>2)];
   HEAP32[((((111184)|0))>>2)]=$963;
   label = 338; break;
  case 218: 
   var $964=HEAP32[((((111172)|0))>>2)];
   var $965=(($tbase_245_i)>>>(0)) < (($964)>>>(0));
   if ($965) { label = 219; break; } else { label = 220; break; }
  case 219: 
   HEAP32[((((111172)|0))>>2)]=$tbase_245_i;
   label = 220; break;
  case 220: 
   var $967=(($tbase_245_i+$tsize_244_i)|0);
   var $sp_160_i = ((111604)|0);label = 221; break;
  case 221: 
   var $sp_160_i;
   var $969=(($sp_160_i)|0);
   var $970=HEAP32[(($969)>>2)];
   var $971=(($970)|(0))==(($967)|(0));
   if ($971) { label = 223; break; } else { label = 222; break; }
  case 222: 
   var $973=(($sp_160_i+8)|0);
   var $974=HEAP32[(($973)>>2)];
   var $975=(($974)|(0))==0;
   if ($975) { label = 304; break; } else { var $sp_160_i = $974;label = 221; break; }
  case 223: 
   var $976=(($sp_160_i+12)|0);
   var $977=HEAP32[(($976)>>2)];
   var $978=$977 & 8;
   var $979=(($978)|(0))==0;
   if ($979) { label = 224; break; } else { label = 304; break; }
  case 224: 
   HEAP32[(($969)>>2)]=$tbase_245_i;
   var $981=(($sp_160_i+4)|0);
   var $982=HEAP32[(($981)>>2)];
   var $983=((($982)+($tsize_244_i))|0);
   HEAP32[(($981)>>2)]=$983;
   var $984=(($tbase_245_i+8)|0);
   var $985=$984;
   var $986=$985 & 7;
   var $987=(($986)|(0))==0;
   if ($987) { var $992 = 0;label = 226; break; } else { label = 225; break; }
  case 225: 
   var $989=(((-$985))|0);
   var $990=$989 & 7;
   var $992 = $990;label = 226; break;
  case 226: 
   var $992;
   var $993=(($tbase_245_i+$992)|0);
   var $_sum93_i=((($tsize_244_i)+(8))|0);
   var $994=(($tbase_245_i+$_sum93_i)|0);
   var $995=$994;
   var $996=$995 & 7;
   var $997=(($996)|(0))==0;
   if ($997) { var $1002 = 0;label = 228; break; } else { label = 227; break; }
  case 227: 
   var $999=(((-$995))|0);
   var $1000=$999 & 7;
   var $1002 = $1000;label = 228; break;
  case 228: 
   var $1002;
   var $_sum94_i=((($1002)+($tsize_244_i))|0);
   var $1003=(($tbase_245_i+$_sum94_i)|0);
   var $1004=$1003;
   var $1005=$1003;
   var $1006=$993;
   var $1007=((($1005)-($1006))|0);
   var $_sum_i21_i=((($992)+($nb_0))|0);
   var $1008=(($tbase_245_i+$_sum_i21_i)|0);
   var $1009=$1008;
   var $1010=((($1007)-($nb_0))|0);
   var $1011=$nb_0 | 3;
   var $_sum1_i22_i=((($992)+(4))|0);
   var $1012=(($tbase_245_i+$_sum1_i22_i)|0);
   var $1013=$1012;
   HEAP32[(($1013)>>2)]=$1011;
   var $1014=HEAP32[((((111180)|0))>>2)];
   var $1015=(($1004)|(0))==(($1014)|(0));
   if ($1015) { label = 229; break; } else { label = 230; break; }
  case 229: 
   var $1017=HEAP32[((((111168)|0))>>2)];
   var $1018=((($1017)+($1010))|0);
   HEAP32[((((111168)|0))>>2)]=$1018;
   HEAP32[((((111180)|0))>>2)]=$1009;
   var $1019=$1018 | 1;
   var $_sum42_i_i=((($_sum_i21_i)+(4))|0);
   var $1020=(($tbase_245_i+$_sum42_i_i)|0);
   var $1021=$1020;
   HEAP32[(($1021)>>2)]=$1019;
   label = 303; break;
  case 230: 
   var $1023=HEAP32[((((111176)|0))>>2)];
   var $1024=(($1004)|(0))==(($1023)|(0));
   if ($1024) { label = 231; break; } else { label = 232; break; }
  case 231: 
   var $1026=HEAP32[((((111164)|0))>>2)];
   var $1027=((($1026)+($1010))|0);
   HEAP32[((((111164)|0))>>2)]=$1027;
   HEAP32[((((111176)|0))>>2)]=$1009;
   var $1028=$1027 | 1;
   var $_sum40_i_i=((($_sum_i21_i)+(4))|0);
   var $1029=(($tbase_245_i+$_sum40_i_i)|0);
   var $1030=$1029;
   HEAP32[(($1030)>>2)]=$1028;
   var $_sum41_i_i=((($1027)+($_sum_i21_i))|0);
   var $1031=(($tbase_245_i+$_sum41_i_i)|0);
   var $1032=$1031;
   HEAP32[(($1032)>>2)]=$1027;
   label = 303; break;
  case 232: 
   var $_sum2_i23_i=((($tsize_244_i)+(4))|0);
   var $_sum95_i=((($_sum2_i23_i)+($1002))|0);
   var $1034=(($tbase_245_i+$_sum95_i)|0);
   var $1035=$1034;
   var $1036=HEAP32[(($1035)>>2)];
   var $1037=$1036 & 3;
   var $1038=(($1037)|(0))==1;
   if ($1038) { label = 233; break; } else { var $oldfirst_0_i_i = $1004;var $qsize_0_i_i = $1010;label = 280; break; }
  case 233: 
   var $1040=$1036 & -8;
   var $1041=$1036 >>> 3;
   var $1042=(($1036)>>>(0)) < 256;
   if ($1042) { label = 234; break; } else { label = 246; break; }
  case 234: 
   var $_sum3738_i_i=$1002 | 8;
   var $_sum105_i=((($_sum3738_i_i)+($tsize_244_i))|0);
   var $1044=(($tbase_245_i+$_sum105_i)|0);
   var $1045=$1044;
   var $1046=HEAP32[(($1045)>>2)];
   var $_sum39_i_i=((($tsize_244_i)+(12))|0);
   var $_sum106_i=((($_sum39_i_i)+($1002))|0);
   var $1047=(($tbase_245_i+$_sum106_i)|0);
   var $1048=$1047;
   var $1049=HEAP32[(($1048)>>2)];
   var $1050=$1041 << 1;
   var $1051=((111196+($1050<<2))|0);
   var $1052=$1051;
   var $1053=(($1046)|(0))==(($1052)|(0));
   if ($1053) { label = 237; break; } else { label = 235; break; }
  case 235: 
   var $1055=$1046;
   var $1056=HEAP32[((((111172)|0))>>2)];
   var $1057=(($1055)>>>(0)) < (($1056)>>>(0));
   if ($1057) { label = 245; break; } else { label = 236; break; }
  case 236: 
   var $1059=(($1046+12)|0);
   var $1060=HEAP32[(($1059)>>2)];
   var $1061=(($1060)|(0))==(($1004)|(0));
   if ($1061) { label = 237; break; } else { label = 245; break; }
  case 237: 
   var $1062=(($1049)|(0))==(($1046)|(0));
   if ($1062) { label = 238; break; } else { label = 239; break; }
  case 238: 
   var $1064=1 << $1041;
   var $1065=$1064 ^ -1;
   var $1066=HEAP32[((((111156)|0))>>2)];
   var $1067=$1066 & $1065;
   HEAP32[((((111156)|0))>>2)]=$1067;
   label = 279; break;
  case 239: 
   var $1069=(($1049)|(0))==(($1052)|(0));
   if ($1069) { label = 240; break; } else { label = 241; break; }
  case 240: 
   var $_pre52_i_i=(($1049+8)|0);
   var $_pre_phi53_i_i = $_pre52_i_i;label = 243; break;
  case 241: 
   var $1071=$1049;
   var $1072=HEAP32[((((111172)|0))>>2)];
   var $1073=(($1071)>>>(0)) < (($1072)>>>(0));
   if ($1073) { label = 244; break; } else { label = 242; break; }
  case 242: 
   var $1075=(($1049+8)|0);
   var $1076=HEAP32[(($1075)>>2)];
   var $1077=(($1076)|(0))==(($1004)|(0));
   if ($1077) { var $_pre_phi53_i_i = $1075;label = 243; break; } else { label = 244; break; }
  case 243: 
   var $_pre_phi53_i_i;
   var $1078=(($1046+12)|0);
   HEAP32[(($1078)>>2)]=$1049;
   HEAP32[(($_pre_phi53_i_i)>>2)]=$1046;
   label = 279; break;
  case 244: 
   _abort();
   throw "Reached an unreachable!";
  case 245: 
   _abort();
   throw "Reached an unreachable!";
  case 246: 
   var $1080=$1003;
   var $_sum34_i_i=$1002 | 24;
   var $_sum96_i=((($_sum34_i_i)+($tsize_244_i))|0);
   var $1081=(($tbase_245_i+$_sum96_i)|0);
   var $1082=$1081;
   var $1083=HEAP32[(($1082)>>2)];
   var $_sum5_i_i=((($tsize_244_i)+(12))|0);
   var $_sum97_i=((($_sum5_i_i)+($1002))|0);
   var $1084=(($tbase_245_i+$_sum97_i)|0);
   var $1085=$1084;
   var $1086=HEAP32[(($1085)>>2)];
   var $1087=(($1086)|(0))==(($1080)|(0));
   if ($1087) { label = 252; break; } else { label = 247; break; }
  case 247: 
   var $_sum3536_i_i=$1002 | 8;
   var $_sum98_i=((($_sum3536_i_i)+($tsize_244_i))|0);
   var $1089=(($tbase_245_i+$_sum98_i)|0);
   var $1090=$1089;
   var $1091=HEAP32[(($1090)>>2)];
   var $1092=$1091;
   var $1093=HEAP32[((((111172)|0))>>2)];
   var $1094=(($1092)>>>(0)) < (($1093)>>>(0));
   if ($1094) { label = 251; break; } else { label = 248; break; }
  case 248: 
   var $1096=(($1091+12)|0);
   var $1097=HEAP32[(($1096)>>2)];
   var $1098=(($1097)|(0))==(($1080)|(0));
   if ($1098) { label = 249; break; } else { label = 251; break; }
  case 249: 
   var $1100=(($1086+8)|0);
   var $1101=HEAP32[(($1100)>>2)];
   var $1102=(($1101)|(0))==(($1080)|(0));
   if ($1102) { label = 250; break; } else { label = 251; break; }
  case 250: 
   HEAP32[(($1096)>>2)]=$1086;
   HEAP32[(($1100)>>2)]=$1091;
   var $R_1_i_i = $1086;label = 259; break;
  case 251: 
   _abort();
   throw "Reached an unreachable!";
  case 252: 
   var $_sum67_i_i=$1002 | 16;
   var $_sum103_i=((($_sum2_i23_i)+($_sum67_i_i))|0);
   var $1105=(($tbase_245_i+$_sum103_i)|0);
   var $1106=$1105;
   var $1107=HEAP32[(($1106)>>2)];
   var $1108=(($1107)|(0))==0;
   if ($1108) { label = 253; break; } else { var $R_0_i_i = $1107;var $RP_0_i_i = $1106;label = 254; break; }
  case 253: 
   var $_sum104_i=((($_sum67_i_i)+($tsize_244_i))|0);
   var $1110=(($tbase_245_i+$_sum104_i)|0);
   var $1111=$1110;
   var $1112=HEAP32[(($1111)>>2)];
   var $1113=(($1112)|(0))==0;
   if ($1113) { var $R_1_i_i = 0;label = 259; break; } else { var $R_0_i_i = $1112;var $RP_0_i_i = $1111;label = 254; break; }
  case 254: 
   var $RP_0_i_i;
   var $R_0_i_i;
   var $1114=(($R_0_i_i+20)|0);
   var $1115=HEAP32[(($1114)>>2)];
   var $1116=(($1115)|(0))==0;
   if ($1116) { label = 255; break; } else { var $R_0_i_i = $1115;var $RP_0_i_i = $1114;label = 254; break; }
  case 255: 
   var $1118=(($R_0_i_i+16)|0);
   var $1119=HEAP32[(($1118)>>2)];
   var $1120=(($1119)|(0))==0;
   if ($1120) { label = 256; break; } else { var $R_0_i_i = $1119;var $RP_0_i_i = $1118;label = 254; break; }
  case 256: 
   var $1122=$RP_0_i_i;
   var $1123=HEAP32[((((111172)|0))>>2)];
   var $1124=(($1122)>>>(0)) < (($1123)>>>(0));
   if ($1124) { label = 258; break; } else { label = 257; break; }
  case 257: 
   HEAP32[(($RP_0_i_i)>>2)]=0;
   var $R_1_i_i = $R_0_i_i;label = 259; break;
  case 258: 
   _abort();
   throw "Reached an unreachable!";
  case 259: 
   var $R_1_i_i;
   var $1128=(($1083)|(0))==0;
   if ($1128) { label = 279; break; } else { label = 260; break; }
  case 260: 
   var $_sum30_i_i=((($tsize_244_i)+(28))|0);
   var $_sum99_i=((($_sum30_i_i)+($1002))|0);
   var $1130=(($tbase_245_i+$_sum99_i)|0);
   var $1131=$1130;
   var $1132=HEAP32[(($1131)>>2)];
   var $1133=((111460+($1132<<2))|0);
   var $1134=HEAP32[(($1133)>>2)];
   var $1135=(($1080)|(0))==(($1134)|(0));
   if ($1135) { label = 261; break; } else { label = 263; break; }
  case 261: 
   HEAP32[(($1133)>>2)]=$R_1_i_i;
   var $cond_i_i=(($R_1_i_i)|(0))==0;
   if ($cond_i_i) { label = 262; break; } else { label = 269; break; }
  case 262: 
   var $1137=HEAP32[(($1131)>>2)];
   var $1138=1 << $1137;
   var $1139=$1138 ^ -1;
   var $1140=HEAP32[((((111160)|0))>>2)];
   var $1141=$1140 & $1139;
   HEAP32[((((111160)|0))>>2)]=$1141;
   label = 279; break;
  case 263: 
   var $1143=$1083;
   var $1144=HEAP32[((((111172)|0))>>2)];
   var $1145=(($1143)>>>(0)) < (($1144)>>>(0));
   if ($1145) { label = 267; break; } else { label = 264; break; }
  case 264: 
   var $1147=(($1083+16)|0);
   var $1148=HEAP32[(($1147)>>2)];
   var $1149=(($1148)|(0))==(($1080)|(0));
   if ($1149) { label = 265; break; } else { label = 266; break; }
  case 265: 
   HEAP32[(($1147)>>2)]=$R_1_i_i;
   label = 268; break;
  case 266: 
   var $1152=(($1083+20)|0);
   HEAP32[(($1152)>>2)]=$R_1_i_i;
   label = 268; break;
  case 267: 
   _abort();
   throw "Reached an unreachable!";
  case 268: 
   var $1155=(($R_1_i_i)|(0))==0;
   if ($1155) { label = 279; break; } else { label = 269; break; }
  case 269: 
   var $1157=$R_1_i_i;
   var $1158=HEAP32[((((111172)|0))>>2)];
   var $1159=(($1157)>>>(0)) < (($1158)>>>(0));
   if ($1159) { label = 278; break; } else { label = 270; break; }
  case 270: 
   var $1161=(($R_1_i_i+24)|0);
   HEAP32[(($1161)>>2)]=$1083;
   var $_sum3132_i_i=$1002 | 16;
   var $_sum100_i=((($_sum3132_i_i)+($tsize_244_i))|0);
   var $1162=(($tbase_245_i+$_sum100_i)|0);
   var $1163=$1162;
   var $1164=HEAP32[(($1163)>>2)];
   var $1165=(($1164)|(0))==0;
   if ($1165) { label = 274; break; } else { label = 271; break; }
  case 271: 
   var $1167=$1164;
   var $1168=HEAP32[((((111172)|0))>>2)];
   var $1169=(($1167)>>>(0)) < (($1168)>>>(0));
   if ($1169) { label = 273; break; } else { label = 272; break; }
  case 272: 
   var $1171=(($R_1_i_i+16)|0);
   HEAP32[(($1171)>>2)]=$1164;
   var $1172=(($1164+24)|0);
   HEAP32[(($1172)>>2)]=$R_1_i_i;
   label = 274; break;
  case 273: 
   _abort();
   throw "Reached an unreachable!";
  case 274: 
   var $_sum101_i=((($_sum2_i23_i)+($_sum3132_i_i))|0);
   var $1175=(($tbase_245_i+$_sum101_i)|0);
   var $1176=$1175;
   var $1177=HEAP32[(($1176)>>2)];
   var $1178=(($1177)|(0))==0;
   if ($1178) { label = 279; break; } else { label = 275; break; }
  case 275: 
   var $1180=$1177;
   var $1181=HEAP32[((((111172)|0))>>2)];
   var $1182=(($1180)>>>(0)) < (($1181)>>>(0));
   if ($1182) { label = 277; break; } else { label = 276; break; }
  case 276: 
   var $1184=(($R_1_i_i+20)|0);
   HEAP32[(($1184)>>2)]=$1177;
   var $1185=(($1177+24)|0);
   HEAP32[(($1185)>>2)]=$R_1_i_i;
   label = 279; break;
  case 277: 
   _abort();
   throw "Reached an unreachable!";
  case 278: 
   _abort();
   throw "Reached an unreachable!";
  case 279: 
   var $_sum9_i_i=$1040 | $1002;
   var $_sum102_i=((($_sum9_i_i)+($tsize_244_i))|0);
   var $1189=(($tbase_245_i+$_sum102_i)|0);
   var $1190=$1189;
   var $1191=((($1040)+($1010))|0);
   var $oldfirst_0_i_i = $1190;var $qsize_0_i_i = $1191;label = 280; break;
  case 280: 
   var $qsize_0_i_i;
   var $oldfirst_0_i_i;
   var $1193=(($oldfirst_0_i_i+4)|0);
   var $1194=HEAP32[(($1193)>>2)];
   var $1195=$1194 & -2;
   HEAP32[(($1193)>>2)]=$1195;
   var $1196=$qsize_0_i_i | 1;
   var $_sum10_i_i=((($_sum_i21_i)+(4))|0);
   var $1197=(($tbase_245_i+$_sum10_i_i)|0);
   var $1198=$1197;
   HEAP32[(($1198)>>2)]=$1196;
   var $_sum11_i24_i=((($qsize_0_i_i)+($_sum_i21_i))|0);
   var $1199=(($tbase_245_i+$_sum11_i24_i)|0);
   var $1200=$1199;
   HEAP32[(($1200)>>2)]=$qsize_0_i_i;
   var $1201=$qsize_0_i_i >>> 3;
   var $1202=(($qsize_0_i_i)>>>(0)) < 256;
   if ($1202) { label = 281; break; } else { label = 286; break; }
  case 281: 
   var $1204=$1201 << 1;
   var $1205=((111196+($1204<<2))|0);
   var $1206=$1205;
   var $1207=HEAP32[((((111156)|0))>>2)];
   var $1208=1 << $1201;
   var $1209=$1207 & $1208;
   var $1210=(($1209)|(0))==0;
   if ($1210) { label = 282; break; } else { label = 283; break; }
  case 282: 
   var $1212=$1207 | $1208;
   HEAP32[((((111156)|0))>>2)]=$1212;
   var $_sum26_pre_i_i=((($1204)+(2))|0);
   var $_pre_i25_i=((111196+($_sum26_pre_i_i<<2))|0);
   var $F4_0_i_i = $1206;var $_pre_phi_i26_i = $_pre_i25_i;label = 285; break;
  case 283: 
   var $_sum29_i_i=((($1204)+(2))|0);
   var $1214=((111196+($_sum29_i_i<<2))|0);
   var $1215=HEAP32[(($1214)>>2)];
   var $1216=$1215;
   var $1217=HEAP32[((((111172)|0))>>2)];
   var $1218=(($1216)>>>(0)) < (($1217)>>>(0));
   if ($1218) { label = 284; break; } else { var $F4_0_i_i = $1215;var $_pre_phi_i26_i = $1214;label = 285; break; }
  case 284: 
   _abort();
   throw "Reached an unreachable!";
  case 285: 
   var $_pre_phi_i26_i;
   var $F4_0_i_i;
   HEAP32[(($_pre_phi_i26_i)>>2)]=$1009;
   var $1221=(($F4_0_i_i+12)|0);
   HEAP32[(($1221)>>2)]=$1009;
   var $_sum27_i_i=((($_sum_i21_i)+(8))|0);
   var $1222=(($tbase_245_i+$_sum27_i_i)|0);
   var $1223=$1222;
   HEAP32[(($1223)>>2)]=$F4_0_i_i;
   var $_sum28_i_i=((($_sum_i21_i)+(12))|0);
   var $1224=(($tbase_245_i+$_sum28_i_i)|0);
   var $1225=$1224;
   HEAP32[(($1225)>>2)]=$1206;
   label = 303; break;
  case 286: 
   var $1227=$1008;
   var $1228=$qsize_0_i_i >>> 8;
   var $1229=(($1228)|(0))==0;
   if ($1229) { var $I7_0_i_i = 0;label = 289; break; } else { label = 287; break; }
  case 287: 
   var $1231=(($qsize_0_i_i)>>>(0)) > 16777215;
   if ($1231) { var $I7_0_i_i = 31;label = 289; break; } else { label = 288; break; }
  case 288: 
   var $1233=((($1228)+(1048320))|0);
   var $1234=$1233 >>> 16;
   var $1235=$1234 & 8;
   var $1236=$1228 << $1235;
   var $1237=((($1236)+(520192))|0);
   var $1238=$1237 >>> 16;
   var $1239=$1238 & 4;
   var $1240=$1239 | $1235;
   var $1241=$1236 << $1239;
   var $1242=((($1241)+(245760))|0);
   var $1243=$1242 >>> 16;
   var $1244=$1243 & 2;
   var $1245=$1240 | $1244;
   var $1246=(((14)-($1245))|0);
   var $1247=$1241 << $1244;
   var $1248=$1247 >>> 15;
   var $1249=((($1246)+($1248))|0);
   var $1250=$1249 << 1;
   var $1251=((($1249)+(7))|0);
   var $1252=$qsize_0_i_i >>> (($1251)>>>(0));
   var $1253=$1252 & 1;
   var $1254=$1253 | $1250;
   var $I7_0_i_i = $1254;label = 289; break;
  case 289: 
   var $I7_0_i_i;
   var $1256=((111460+($I7_0_i_i<<2))|0);
   var $_sum12_i_i=((($_sum_i21_i)+(28))|0);
   var $1257=(($tbase_245_i+$_sum12_i_i)|0);
   var $1258=$1257;
   HEAP32[(($1258)>>2)]=$I7_0_i_i;
   var $_sum13_i_i=((($_sum_i21_i)+(16))|0);
   var $1259=(($tbase_245_i+$_sum13_i_i)|0);
   var $_sum14_i_i=((($_sum_i21_i)+(20))|0);
   var $1260=(($tbase_245_i+$_sum14_i_i)|0);
   var $1261=$1260;
   HEAP32[(($1261)>>2)]=0;
   var $1262=$1259;
   HEAP32[(($1262)>>2)]=0;
   var $1263=HEAP32[((((111160)|0))>>2)];
   var $1264=1 << $I7_0_i_i;
   var $1265=$1263 & $1264;
   var $1266=(($1265)|(0))==0;
   if ($1266) { label = 290; break; } else { label = 291; break; }
  case 290: 
   var $1268=$1263 | $1264;
   HEAP32[((((111160)|0))>>2)]=$1268;
   HEAP32[(($1256)>>2)]=$1227;
   var $1269=$1256;
   var $_sum15_i_i=((($_sum_i21_i)+(24))|0);
   var $1270=(($tbase_245_i+$_sum15_i_i)|0);
   var $1271=$1270;
   HEAP32[(($1271)>>2)]=$1269;
   var $_sum16_i_i=((($_sum_i21_i)+(12))|0);
   var $1272=(($tbase_245_i+$_sum16_i_i)|0);
   var $1273=$1272;
   HEAP32[(($1273)>>2)]=$1227;
   var $_sum17_i_i=((($_sum_i21_i)+(8))|0);
   var $1274=(($tbase_245_i+$_sum17_i_i)|0);
   var $1275=$1274;
   HEAP32[(($1275)>>2)]=$1227;
   label = 303; break;
  case 291: 
   var $1277=HEAP32[(($1256)>>2)];
   var $1278=(($I7_0_i_i)|(0))==31;
   if ($1278) { var $1283 = 0;label = 293; break; } else { label = 292; break; }
  case 292: 
   var $1280=$I7_0_i_i >>> 1;
   var $1281=(((25)-($1280))|0);
   var $1283 = $1281;label = 293; break;
  case 293: 
   var $1283;
   var $1284=$qsize_0_i_i << $1283;
   var $K8_0_i_i = $1284;var $T_0_i27_i = $1277;label = 294; break;
  case 294: 
   var $T_0_i27_i;
   var $K8_0_i_i;
   var $1286=(($T_0_i27_i+4)|0);
   var $1287=HEAP32[(($1286)>>2)];
   var $1288=$1287 & -8;
   var $1289=(($1288)|(0))==(($qsize_0_i_i)|(0));
   if ($1289) { label = 299; break; } else { label = 295; break; }
  case 295: 
   var $1291=$K8_0_i_i >>> 31;
   var $1292=(($T_0_i27_i+16+($1291<<2))|0);
   var $1293=HEAP32[(($1292)>>2)];
   var $1294=(($1293)|(0))==0;
   var $1295=$K8_0_i_i << 1;
   if ($1294) { label = 296; break; } else { var $K8_0_i_i = $1295;var $T_0_i27_i = $1293;label = 294; break; }
  case 296: 
   var $1297=$1292;
   var $1298=HEAP32[((((111172)|0))>>2)];
   var $1299=(($1297)>>>(0)) < (($1298)>>>(0));
   if ($1299) { label = 298; break; } else { label = 297; break; }
  case 297: 
   HEAP32[(($1292)>>2)]=$1227;
   var $_sum23_i_i=((($_sum_i21_i)+(24))|0);
   var $1301=(($tbase_245_i+$_sum23_i_i)|0);
   var $1302=$1301;
   HEAP32[(($1302)>>2)]=$T_0_i27_i;
   var $_sum24_i_i=((($_sum_i21_i)+(12))|0);
   var $1303=(($tbase_245_i+$_sum24_i_i)|0);
   var $1304=$1303;
   HEAP32[(($1304)>>2)]=$1227;
   var $_sum25_i_i=((($_sum_i21_i)+(8))|0);
   var $1305=(($tbase_245_i+$_sum25_i_i)|0);
   var $1306=$1305;
   HEAP32[(($1306)>>2)]=$1227;
   label = 303; break;
  case 298: 
   _abort();
   throw "Reached an unreachable!";
  case 299: 
   var $1309=(($T_0_i27_i+8)|0);
   var $1310=HEAP32[(($1309)>>2)];
   var $1311=$T_0_i27_i;
   var $1312=HEAP32[((((111172)|0))>>2)];
   var $1313=(($1311)>>>(0)) < (($1312)>>>(0));
   if ($1313) { label = 302; break; } else { label = 300; break; }
  case 300: 
   var $1315=$1310;
   var $1316=(($1315)>>>(0)) < (($1312)>>>(0));
   if ($1316) { label = 302; break; } else { label = 301; break; }
  case 301: 
   var $1318=(($1310+12)|0);
   HEAP32[(($1318)>>2)]=$1227;
   HEAP32[(($1309)>>2)]=$1227;
   var $_sum20_i_i=((($_sum_i21_i)+(8))|0);
   var $1319=(($tbase_245_i+$_sum20_i_i)|0);
   var $1320=$1319;
   HEAP32[(($1320)>>2)]=$1310;
   var $_sum21_i_i=((($_sum_i21_i)+(12))|0);
   var $1321=(($tbase_245_i+$_sum21_i_i)|0);
   var $1322=$1321;
   HEAP32[(($1322)>>2)]=$T_0_i27_i;
   var $_sum22_i_i=((($_sum_i21_i)+(24))|0);
   var $1323=(($tbase_245_i+$_sum22_i_i)|0);
   var $1324=$1323;
   HEAP32[(($1324)>>2)]=0;
   label = 303; break;
  case 302: 
   _abort();
   throw "Reached an unreachable!";
  case 303: 
   var $_sum1819_i_i=$992 | 8;
   var $1325=(($tbase_245_i+$_sum1819_i_i)|0);
   var $mem_0 = $1325;label = 341; break;
  case 304: 
   var $1326=$890;
   var $sp_0_i_i_i = ((111604)|0);label = 305; break;
  case 305: 
   var $sp_0_i_i_i;
   var $1328=(($sp_0_i_i_i)|0);
   var $1329=HEAP32[(($1328)>>2)];
   var $1330=(($1329)>>>(0)) > (($1326)>>>(0));
   if ($1330) { label = 307; break; } else { label = 306; break; }
  case 306: 
   var $1332=(($sp_0_i_i_i+4)|0);
   var $1333=HEAP32[(($1332)>>2)];
   var $1334=(($1329+$1333)|0);
   var $1335=(($1334)>>>(0)) > (($1326)>>>(0));
   if ($1335) { label = 308; break; } else { label = 307; break; }
  case 307: 
   var $1337=(($sp_0_i_i_i+8)|0);
   var $1338=HEAP32[(($1337)>>2)];
   var $sp_0_i_i_i = $1338;label = 305; break;
  case 308: 
   var $_sum_i15_i=((($1333)-(47))|0);
   var $_sum1_i16_i=((($1333)-(39))|0);
   var $1339=(($1329+$_sum1_i16_i)|0);
   var $1340=$1339;
   var $1341=$1340 & 7;
   var $1342=(($1341)|(0))==0;
   if ($1342) { var $1347 = 0;label = 310; break; } else { label = 309; break; }
  case 309: 
   var $1344=(((-$1340))|0);
   var $1345=$1344 & 7;
   var $1347 = $1345;label = 310; break;
  case 310: 
   var $1347;
   var $_sum2_i17_i=((($_sum_i15_i)+($1347))|0);
   var $1348=(($1329+$_sum2_i17_i)|0);
   var $1349=(($890+16)|0);
   var $1350=$1349;
   var $1351=(($1348)>>>(0)) < (($1350)>>>(0));
   var $1352=$1351 ? $1326 : $1348;
   var $1353=(($1352+8)|0);
   var $1354=$1353;
   var $1355=((($tsize_244_i)-(40))|0);
   var $1356=(($tbase_245_i+8)|0);
   var $1357=$1356;
   var $1358=$1357 & 7;
   var $1359=(($1358)|(0))==0;
   if ($1359) { var $1363 = 0;label = 312; break; } else { label = 311; break; }
  case 311: 
   var $1361=(((-$1357))|0);
   var $1362=$1361 & 7;
   var $1363 = $1362;label = 312; break;
  case 312: 
   var $1363;
   var $1364=(($tbase_245_i+$1363)|0);
   var $1365=$1364;
   var $1366=((($1355)-($1363))|0);
   HEAP32[((((111180)|0))>>2)]=$1365;
   HEAP32[((((111168)|0))>>2)]=$1366;
   var $1367=$1366 | 1;
   var $_sum_i_i_i=((($1363)+(4))|0);
   var $1368=(($tbase_245_i+$_sum_i_i_i)|0);
   var $1369=$1368;
   HEAP32[(($1369)>>2)]=$1367;
   var $_sum2_i_i_i=((($tsize_244_i)-(36))|0);
   var $1370=(($tbase_245_i+$_sum2_i_i_i)|0);
   var $1371=$1370;
   HEAP32[(($1371)>>2)]=40;
   var $1372=HEAP32[((((111080)|0))>>2)];
   HEAP32[((((111184)|0))>>2)]=$1372;
   var $1373=(($1352+4)|0);
   var $1374=$1373;
   HEAP32[(($1374)>>2)]=27;
   assert(16 % 1 === 0);HEAP32[(($1353)>>2)]=HEAP32[(((((111604)|0)))>>2)];HEAP32[((($1353)+(4))>>2)]=HEAP32[((((((111604)|0)))+(4))>>2)];HEAP32[((($1353)+(8))>>2)]=HEAP32[((((((111604)|0)))+(8))>>2)];HEAP32[((($1353)+(12))>>2)]=HEAP32[((((((111604)|0)))+(12))>>2)];
   HEAP32[((((111604)|0))>>2)]=$tbase_245_i;
   HEAP32[((((111608)|0))>>2)]=$tsize_244_i;
   HEAP32[((((111616)|0))>>2)]=0;
   HEAP32[((((111612)|0))>>2)]=$1354;
   var $1375=(($1352+28)|0);
   var $1376=$1375;
   HEAP32[(($1376)>>2)]=7;
   var $1377=(($1352+32)|0);
   var $1378=(($1377)>>>(0)) < (($1334)>>>(0));
   if ($1378) { var $1379 = $1376;label = 313; break; } else { label = 314; break; }
  case 313: 
   var $1379;
   var $1380=(($1379+4)|0);
   HEAP32[(($1380)>>2)]=7;
   var $1381=(($1379+8)|0);
   var $1382=$1381;
   var $1383=(($1382)>>>(0)) < (($1334)>>>(0));
   if ($1383) { var $1379 = $1380;label = 313; break; } else { label = 314; break; }
  case 314: 
   var $1384=(($1352)|(0))==(($1326)|(0));
   if ($1384) { label = 338; break; } else { label = 315; break; }
  case 315: 
   var $1386=$1352;
   var $1387=$890;
   var $1388=((($1386)-($1387))|0);
   var $1389=(($1326+$1388)|0);
   var $_sum3_i_i=((($1388)+(4))|0);
   var $1390=(($1326+$_sum3_i_i)|0);
   var $1391=$1390;
   var $1392=HEAP32[(($1391)>>2)];
   var $1393=$1392 & -2;
   HEAP32[(($1391)>>2)]=$1393;
   var $1394=$1388 | 1;
   var $1395=(($890+4)|0);
   HEAP32[(($1395)>>2)]=$1394;
   var $1396=$1389;
   HEAP32[(($1396)>>2)]=$1388;
   var $1397=$1388 >>> 3;
   var $1398=(($1388)>>>(0)) < 256;
   if ($1398) { label = 316; break; } else { label = 321; break; }
  case 316: 
   var $1400=$1397 << 1;
   var $1401=((111196+($1400<<2))|0);
   var $1402=$1401;
   var $1403=HEAP32[((((111156)|0))>>2)];
   var $1404=1 << $1397;
   var $1405=$1403 & $1404;
   var $1406=(($1405)|(0))==0;
   if ($1406) { label = 317; break; } else { label = 318; break; }
  case 317: 
   var $1408=$1403 | $1404;
   HEAP32[((((111156)|0))>>2)]=$1408;
   var $_sum10_pre_i_i=((($1400)+(2))|0);
   var $_pre_i_i=((111196+($_sum10_pre_i_i<<2))|0);
   var $F_0_i_i = $1402;var $_pre_phi_i_i = $_pre_i_i;label = 320; break;
  case 318: 
   var $_sum11_i_i=((($1400)+(2))|0);
   var $1410=((111196+($_sum11_i_i<<2))|0);
   var $1411=HEAP32[(($1410)>>2)];
   var $1412=$1411;
   var $1413=HEAP32[((((111172)|0))>>2)];
   var $1414=(($1412)>>>(0)) < (($1413)>>>(0));
   if ($1414) { label = 319; break; } else { var $F_0_i_i = $1411;var $_pre_phi_i_i = $1410;label = 320; break; }
  case 319: 
   _abort();
   throw "Reached an unreachable!";
  case 320: 
   var $_pre_phi_i_i;
   var $F_0_i_i;
   HEAP32[(($_pre_phi_i_i)>>2)]=$890;
   var $1417=(($F_0_i_i+12)|0);
   HEAP32[(($1417)>>2)]=$890;
   var $1418=(($890+8)|0);
   HEAP32[(($1418)>>2)]=$F_0_i_i;
   var $1419=(($890+12)|0);
   HEAP32[(($1419)>>2)]=$1402;
   label = 338; break;
  case 321: 
   var $1421=$890;
   var $1422=$1388 >>> 8;
   var $1423=(($1422)|(0))==0;
   if ($1423) { var $I1_0_i_i = 0;label = 324; break; } else { label = 322; break; }
  case 322: 
   var $1425=(($1388)>>>(0)) > 16777215;
   if ($1425) { var $I1_0_i_i = 31;label = 324; break; } else { label = 323; break; }
  case 323: 
   var $1427=((($1422)+(1048320))|0);
   var $1428=$1427 >>> 16;
   var $1429=$1428 & 8;
   var $1430=$1422 << $1429;
   var $1431=((($1430)+(520192))|0);
   var $1432=$1431 >>> 16;
   var $1433=$1432 & 4;
   var $1434=$1433 | $1429;
   var $1435=$1430 << $1433;
   var $1436=((($1435)+(245760))|0);
   var $1437=$1436 >>> 16;
   var $1438=$1437 & 2;
   var $1439=$1434 | $1438;
   var $1440=(((14)-($1439))|0);
   var $1441=$1435 << $1438;
   var $1442=$1441 >>> 15;
   var $1443=((($1440)+($1442))|0);
   var $1444=$1443 << 1;
   var $1445=((($1443)+(7))|0);
   var $1446=$1388 >>> (($1445)>>>(0));
   var $1447=$1446 & 1;
   var $1448=$1447 | $1444;
   var $I1_0_i_i = $1448;label = 324; break;
  case 324: 
   var $I1_0_i_i;
   var $1450=((111460+($I1_0_i_i<<2))|0);
   var $1451=(($890+28)|0);
   var $I1_0_c_i_i=$I1_0_i_i;
   HEAP32[(($1451)>>2)]=$I1_0_c_i_i;
   var $1452=(($890+20)|0);
   HEAP32[(($1452)>>2)]=0;
   var $1453=(($890+16)|0);
   HEAP32[(($1453)>>2)]=0;
   var $1454=HEAP32[((((111160)|0))>>2)];
   var $1455=1 << $I1_0_i_i;
   var $1456=$1454 & $1455;
   var $1457=(($1456)|(0))==0;
   if ($1457) { label = 325; break; } else { label = 326; break; }
  case 325: 
   var $1459=$1454 | $1455;
   HEAP32[((((111160)|0))>>2)]=$1459;
   HEAP32[(($1450)>>2)]=$1421;
   var $1460=(($890+24)|0);
   var $_c_i_i=$1450;
   HEAP32[(($1460)>>2)]=$_c_i_i;
   var $1461=(($890+12)|0);
   HEAP32[(($1461)>>2)]=$890;
   var $1462=(($890+8)|0);
   HEAP32[(($1462)>>2)]=$890;
   label = 338; break;
  case 326: 
   var $1464=HEAP32[(($1450)>>2)];
   var $1465=(($I1_0_i_i)|(0))==31;
   if ($1465) { var $1470 = 0;label = 328; break; } else { label = 327; break; }
  case 327: 
   var $1467=$I1_0_i_i >>> 1;
   var $1468=(((25)-($1467))|0);
   var $1470 = $1468;label = 328; break;
  case 328: 
   var $1470;
   var $1471=$1388 << $1470;
   var $K2_0_i_i = $1471;var $T_0_i_i = $1464;label = 329; break;
  case 329: 
   var $T_0_i_i;
   var $K2_0_i_i;
   var $1473=(($T_0_i_i+4)|0);
   var $1474=HEAP32[(($1473)>>2)];
   var $1475=$1474 & -8;
   var $1476=(($1475)|(0))==(($1388)|(0));
   if ($1476) { label = 334; break; } else { label = 330; break; }
  case 330: 
   var $1478=$K2_0_i_i >>> 31;
   var $1479=(($T_0_i_i+16+($1478<<2))|0);
   var $1480=HEAP32[(($1479)>>2)];
   var $1481=(($1480)|(0))==0;
   var $1482=$K2_0_i_i << 1;
   if ($1481) { label = 331; break; } else { var $K2_0_i_i = $1482;var $T_0_i_i = $1480;label = 329; break; }
  case 331: 
   var $1484=$1479;
   var $1485=HEAP32[((((111172)|0))>>2)];
   var $1486=(($1484)>>>(0)) < (($1485)>>>(0));
   if ($1486) { label = 333; break; } else { label = 332; break; }
  case 332: 
   HEAP32[(($1479)>>2)]=$1421;
   var $1488=(($890+24)|0);
   var $T_0_c7_i_i=$T_0_i_i;
   HEAP32[(($1488)>>2)]=$T_0_c7_i_i;
   var $1489=(($890+12)|0);
   HEAP32[(($1489)>>2)]=$890;
   var $1490=(($890+8)|0);
   HEAP32[(($1490)>>2)]=$890;
   label = 338; break;
  case 333: 
   _abort();
   throw "Reached an unreachable!";
  case 334: 
   var $1493=(($T_0_i_i+8)|0);
   var $1494=HEAP32[(($1493)>>2)];
   var $1495=$T_0_i_i;
   var $1496=HEAP32[((((111172)|0))>>2)];
   var $1497=(($1495)>>>(0)) < (($1496)>>>(0));
   if ($1497) { label = 337; break; } else { label = 335; break; }
  case 335: 
   var $1499=$1494;
   var $1500=(($1499)>>>(0)) < (($1496)>>>(0));
   if ($1500) { label = 337; break; } else { label = 336; break; }
  case 336: 
   var $1502=(($1494+12)|0);
   HEAP32[(($1502)>>2)]=$1421;
   HEAP32[(($1493)>>2)]=$1421;
   var $1503=(($890+8)|0);
   var $_c6_i_i=$1494;
   HEAP32[(($1503)>>2)]=$_c6_i_i;
   var $1504=(($890+12)|0);
   var $T_0_c_i_i=$T_0_i_i;
   HEAP32[(($1504)>>2)]=$T_0_c_i_i;
   var $1505=(($890+24)|0);
   HEAP32[(($1505)>>2)]=0;
   label = 338; break;
  case 337: 
   _abort();
   throw "Reached an unreachable!";
  case 338: 
   var $1506=HEAP32[((((111168)|0))>>2)];
   var $1507=(($1506)>>>(0)) > (($nb_0)>>>(0));
   if ($1507) { label = 339; break; } else { label = 340; break; }
  case 339: 
   var $1509=((($1506)-($nb_0))|0);
   HEAP32[((((111168)|0))>>2)]=$1509;
   var $1510=HEAP32[((((111180)|0))>>2)];
   var $1511=$1510;
   var $1512=(($1511+$nb_0)|0);
   var $1513=$1512;
   HEAP32[((((111180)|0))>>2)]=$1513;
   var $1514=$1509 | 1;
   var $_sum_i132=((($nb_0)+(4))|0);
   var $1515=(($1511+$_sum_i132)|0);
   var $1516=$1515;
   HEAP32[(($1516)>>2)]=$1514;
   var $1517=$nb_0 | 3;
   var $1518=(($1510+4)|0);
   HEAP32[(($1518)>>2)]=$1517;
   var $1519=(($1510+8)|0);
   var $1520=$1519;
   var $mem_0 = $1520;label = 341; break;
  case 340: 
   var $1521=___errno_location();
   HEAP32[(($1521)>>2)]=12;
   var $mem_0 = 0;label = 341; break;
  case 341: 
   var $mem_0;
   return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_malloc"] = _malloc;
function _free($mem) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($mem)|(0))==0;
   if ($1) { label = 142; break; } else { label = 2; break; }
  case 2: 
   var $3=((($mem)-(8))|0);
   var $4=$3;
   var $5=HEAP32[((((111172)|0))>>2)];
   var $6=(($3)>>>(0)) < (($5)>>>(0));
   if ($6) { label = 141; break; } else { label = 3; break; }
  case 3: 
   var $8=((($mem)-(4))|0);
   var $9=$8;
   var $10=HEAP32[(($9)>>2)];
   var $11=$10 & 3;
   var $12=(($11)|(0))==1;
   if ($12) { label = 141; break; } else { label = 4; break; }
  case 4: 
   var $14=$10 & -8;
   var $_sum=((($14)-(8))|0);
   var $15=(($mem+$_sum)|0);
   var $16=$15;
   var $17=$10 & 1;
   var $18=(($17)|(0))==0;
   if ($18) { label = 5; break; } else { var $p_0 = $4;var $psize_0 = $14;label = 56; break; }
  case 5: 
   var $20=$3;
   var $21=HEAP32[(($20)>>2)];
   var $22=(($11)|(0))==0;
   if ($22) { label = 142; break; } else { label = 6; break; }
  case 6: 
   var $_sum232=(((-8)-($21))|0);
   var $24=(($mem+$_sum232)|0);
   var $25=$24;
   var $26=((($21)+($14))|0);
   var $27=(($24)>>>(0)) < (($5)>>>(0));
   if ($27) { label = 141; break; } else { label = 7; break; }
  case 7: 
   var $29=HEAP32[((((111176)|0))>>2)];
   var $30=(($25)|(0))==(($29)|(0));
   if ($30) { label = 54; break; } else { label = 8; break; }
  case 8: 
   var $32=$21 >>> 3;
   var $33=(($21)>>>(0)) < 256;
   if ($33) { label = 9; break; } else { label = 21; break; }
  case 9: 
   var $_sum266=((($_sum232)+(8))|0);
   var $35=(($mem+$_sum266)|0);
   var $36=$35;
   var $37=HEAP32[(($36)>>2)];
   var $_sum267=((($_sum232)+(12))|0);
   var $38=(($mem+$_sum267)|0);
   var $39=$38;
   var $40=HEAP32[(($39)>>2)];
   var $41=$32 << 1;
   var $42=((111196+($41<<2))|0);
   var $43=$42;
   var $44=(($37)|(0))==(($43)|(0));
   if ($44) { label = 12; break; } else { label = 10; break; }
  case 10: 
   var $46=$37;
   var $47=(($46)>>>(0)) < (($5)>>>(0));
   if ($47) { label = 20; break; } else { label = 11; break; }
  case 11: 
   var $49=(($37+12)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($50)|(0))==(($25)|(0));
   if ($51) { label = 12; break; } else { label = 20; break; }
  case 12: 
   var $52=(($40)|(0))==(($37)|(0));
   if ($52) { label = 13; break; } else { label = 14; break; }
  case 13: 
   var $54=1 << $32;
   var $55=$54 ^ -1;
   var $56=HEAP32[((((111156)|0))>>2)];
   var $57=$56 & $55;
   HEAP32[((((111156)|0))>>2)]=$57;
   var $p_0 = $25;var $psize_0 = $26;label = 56; break;
  case 14: 
   var $59=(($40)|(0))==(($43)|(0));
   if ($59) { label = 15; break; } else { label = 16; break; }
  case 15: 
   var $_pre291=(($40+8)|0);
   var $_pre_phi292 = $_pre291;label = 18; break;
  case 16: 
   var $61=$40;
   var $62=(($61)>>>(0)) < (($5)>>>(0));
   if ($62) { label = 19; break; } else { label = 17; break; }
  case 17: 
   var $64=(($40+8)|0);
   var $65=HEAP32[(($64)>>2)];
   var $66=(($65)|(0))==(($25)|(0));
   if ($66) { var $_pre_phi292 = $64;label = 18; break; } else { label = 19; break; }
  case 18: 
   var $_pre_phi292;
   var $67=(($37+12)|0);
   HEAP32[(($67)>>2)]=$40;
   HEAP32[(($_pre_phi292)>>2)]=$37;
   var $p_0 = $25;var $psize_0 = $26;label = 56; break;
  case 19: 
   _abort();
   throw "Reached an unreachable!";
  case 20: 
   _abort();
   throw "Reached an unreachable!";
  case 21: 
   var $69=$24;
   var $_sum258=((($_sum232)+(24))|0);
   var $70=(($mem+$_sum258)|0);
   var $71=$70;
   var $72=HEAP32[(($71)>>2)];
   var $_sum259=((($_sum232)+(12))|0);
   var $73=(($mem+$_sum259)|0);
   var $74=$73;
   var $75=HEAP32[(($74)>>2)];
   var $76=(($75)|(0))==(($69)|(0));
   if ($76) { label = 27; break; } else { label = 22; break; }
  case 22: 
   var $_sum265=((($_sum232)+(8))|0);
   var $78=(($mem+$_sum265)|0);
   var $79=$78;
   var $80=HEAP32[(($79)>>2)];
   var $81=$80;
   var $82=(($81)>>>(0)) < (($5)>>>(0));
   if ($82) { label = 26; break; } else { label = 23; break; }
  case 23: 
   var $84=(($80+12)|0);
   var $85=HEAP32[(($84)>>2)];
   var $86=(($85)|(0))==(($69)|(0));
   if ($86) { label = 24; break; } else { label = 26; break; }
  case 24: 
   var $88=(($75+8)|0);
   var $89=HEAP32[(($88)>>2)];
   var $90=(($89)|(0))==(($69)|(0));
   if ($90) { label = 25; break; } else { label = 26; break; }
  case 25: 
   HEAP32[(($84)>>2)]=$75;
   HEAP32[(($88)>>2)]=$80;
   var $R_1 = $75;label = 34; break;
  case 26: 
   _abort();
   throw "Reached an unreachable!";
  case 27: 
   var $_sum261=((($_sum232)+(20))|0);
   var $93=(($mem+$_sum261)|0);
   var $94=$93;
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95)|(0))==0;
   if ($96) { label = 28; break; } else { var $R_0 = $95;var $RP_0 = $94;label = 29; break; }
  case 28: 
   var $_sum260=((($_sum232)+(16))|0);
   var $98=(($mem+$_sum260)|0);
   var $99=$98;
   var $100=HEAP32[(($99)>>2)];
   var $101=(($100)|(0))==0;
   if ($101) { var $R_1 = 0;label = 34; break; } else { var $R_0 = $100;var $RP_0 = $99;label = 29; break; }
  case 29: 
   var $RP_0;
   var $R_0;
   var $102=(($R_0+20)|0);
   var $103=HEAP32[(($102)>>2)];
   var $104=(($103)|(0))==0;
   if ($104) { label = 30; break; } else { var $R_0 = $103;var $RP_0 = $102;label = 29; break; }
  case 30: 
   var $106=(($R_0+16)|0);
   var $107=HEAP32[(($106)>>2)];
   var $108=(($107)|(0))==0;
   if ($108) { label = 31; break; } else { var $R_0 = $107;var $RP_0 = $106;label = 29; break; }
  case 31: 
   var $110=$RP_0;
   var $111=(($110)>>>(0)) < (($5)>>>(0));
   if ($111) { label = 33; break; } else { label = 32; break; }
  case 32: 
   HEAP32[(($RP_0)>>2)]=0;
   var $R_1 = $R_0;label = 34; break;
  case 33: 
   _abort();
   throw "Reached an unreachable!";
  case 34: 
   var $R_1;
   var $115=(($72)|(0))==0;
   if ($115) { var $p_0 = $25;var $psize_0 = $26;label = 56; break; } else { label = 35; break; }
  case 35: 
   var $_sum262=((($_sum232)+(28))|0);
   var $117=(($mem+$_sum262)|0);
   var $118=$117;
   var $119=HEAP32[(($118)>>2)];
   var $120=((111460+($119<<2))|0);
   var $121=HEAP32[(($120)>>2)];
   var $122=(($69)|(0))==(($121)|(0));
   if ($122) { label = 36; break; } else { label = 38; break; }
  case 36: 
   HEAP32[(($120)>>2)]=$R_1;
   var $cond=(($R_1)|(0))==0;
   if ($cond) { label = 37; break; } else { label = 44; break; }
  case 37: 
   var $124=HEAP32[(($118)>>2)];
   var $125=1 << $124;
   var $126=$125 ^ -1;
   var $127=HEAP32[((((111160)|0))>>2)];
   var $128=$127 & $126;
   HEAP32[((((111160)|0))>>2)]=$128;
   var $p_0 = $25;var $psize_0 = $26;label = 56; break;
  case 38: 
   var $130=$72;
   var $131=HEAP32[((((111172)|0))>>2)];
   var $132=(($130)>>>(0)) < (($131)>>>(0));
   if ($132) { label = 42; break; } else { label = 39; break; }
  case 39: 
   var $134=(($72+16)|0);
   var $135=HEAP32[(($134)>>2)];
   var $136=(($135)|(0))==(($69)|(0));
   if ($136) { label = 40; break; } else { label = 41; break; }
  case 40: 
   HEAP32[(($134)>>2)]=$R_1;
   label = 43; break;
  case 41: 
   var $139=(($72+20)|0);
   HEAP32[(($139)>>2)]=$R_1;
   label = 43; break;
  case 42: 
   _abort();
   throw "Reached an unreachable!";
  case 43: 
   var $142=(($R_1)|(0))==0;
   if ($142) { var $p_0 = $25;var $psize_0 = $26;label = 56; break; } else { label = 44; break; }
  case 44: 
   var $144=$R_1;
   var $145=HEAP32[((((111172)|0))>>2)];
   var $146=(($144)>>>(0)) < (($145)>>>(0));
   if ($146) { label = 53; break; } else { label = 45; break; }
  case 45: 
   var $148=(($R_1+24)|0);
   HEAP32[(($148)>>2)]=$72;
   var $_sum263=((($_sum232)+(16))|0);
   var $149=(($mem+$_sum263)|0);
   var $150=$149;
   var $151=HEAP32[(($150)>>2)];
   var $152=(($151)|(0))==0;
   if ($152) { label = 49; break; } else { label = 46; break; }
  case 46: 
   var $154=$151;
   var $155=HEAP32[((((111172)|0))>>2)];
   var $156=(($154)>>>(0)) < (($155)>>>(0));
   if ($156) { label = 48; break; } else { label = 47; break; }
  case 47: 
   var $158=(($R_1+16)|0);
   HEAP32[(($158)>>2)]=$151;
   var $159=(($151+24)|0);
   HEAP32[(($159)>>2)]=$R_1;
   label = 49; break;
  case 48: 
   _abort();
   throw "Reached an unreachable!";
  case 49: 
   var $_sum264=((($_sum232)+(20))|0);
   var $162=(($mem+$_sum264)|0);
   var $163=$162;
   var $164=HEAP32[(($163)>>2)];
   var $165=(($164)|(0))==0;
   if ($165) { var $p_0 = $25;var $psize_0 = $26;label = 56; break; } else { label = 50; break; }
  case 50: 
   var $167=$164;
   var $168=HEAP32[((((111172)|0))>>2)];
   var $169=(($167)>>>(0)) < (($168)>>>(0));
   if ($169) { label = 52; break; } else { label = 51; break; }
  case 51: 
   var $171=(($R_1+20)|0);
   HEAP32[(($171)>>2)]=$164;
   var $172=(($164+24)|0);
   HEAP32[(($172)>>2)]=$R_1;
   var $p_0 = $25;var $psize_0 = $26;label = 56; break;
  case 52: 
   _abort();
   throw "Reached an unreachable!";
  case 53: 
   _abort();
   throw "Reached an unreachable!";
  case 54: 
   var $_sum233=((($14)-(4))|0);
   var $176=(($mem+$_sum233)|0);
   var $177=$176;
   var $178=HEAP32[(($177)>>2)];
   var $179=$178 & 3;
   var $180=(($179)|(0))==3;
   if ($180) { label = 55; break; } else { var $p_0 = $25;var $psize_0 = $26;label = 56; break; }
  case 55: 
   HEAP32[((((111164)|0))>>2)]=$26;
   var $182=HEAP32[(($177)>>2)];
   var $183=$182 & -2;
   HEAP32[(($177)>>2)]=$183;
   var $184=$26 | 1;
   var $_sum256=((($_sum232)+(4))|0);
   var $185=(($mem+$_sum256)|0);
   var $186=$185;
   HEAP32[(($186)>>2)]=$184;
   var $187=$15;
   HEAP32[(($187)>>2)]=$26;
   label = 142; break;
  case 56: 
   var $psize_0;
   var $p_0;
   var $189=$p_0;
   var $190=(($189)>>>(0)) < (($15)>>>(0));
   if ($190) { label = 57; break; } else { label = 141; break; }
  case 57: 
   var $_sum255=((($14)-(4))|0);
   var $192=(($mem+$_sum255)|0);
   var $193=$192;
   var $194=HEAP32[(($193)>>2)];
   var $195=$194 & 1;
   var $196=(($195)|(0))==0;
   if ($196) { label = 141; break; } else { label = 58; break; }
  case 58: 
   var $198=$194 & 2;
   var $199=(($198)|(0))==0;
   if ($199) { label = 59; break; } else { label = 114; break; }
  case 59: 
   var $201=HEAP32[((((111180)|0))>>2)];
   var $202=(($16)|(0))==(($201)|(0));
   if ($202) { label = 60; break; } else { label = 64; break; }
  case 60: 
   var $204=HEAP32[((((111168)|0))>>2)];
   var $205=((($204)+($psize_0))|0);
   HEAP32[((((111168)|0))>>2)]=$205;
   HEAP32[((((111180)|0))>>2)]=$p_0;
   var $206=$205 | 1;
   var $207=(($p_0+4)|0);
   HEAP32[(($207)>>2)]=$206;
   var $208=HEAP32[((((111176)|0))>>2)];
   var $209=(($p_0)|(0))==(($208)|(0));
   if ($209) { label = 61; break; } else { label = 62; break; }
  case 61: 
   HEAP32[((((111176)|0))>>2)]=0;
   HEAP32[((((111164)|0))>>2)]=0;
   label = 62; break;
  case 62: 
   var $212=HEAP32[((((111184)|0))>>2)];
   var $213=(($205)>>>(0)) > (($212)>>>(0));
   if ($213) { label = 63; break; } else { label = 142; break; }
  case 63: 
   var $215=_sys_trim(0);
   label = 142; break;
  case 64: 
   var $217=HEAP32[((((111176)|0))>>2)];
   var $218=(($16)|(0))==(($217)|(0));
   if ($218) { label = 65; break; } else { label = 66; break; }
  case 65: 
   var $220=HEAP32[((((111164)|0))>>2)];
   var $221=((($220)+($psize_0))|0);
   HEAP32[((((111164)|0))>>2)]=$221;
   HEAP32[((((111176)|0))>>2)]=$p_0;
   var $222=$221 | 1;
   var $223=(($p_0+4)|0);
   HEAP32[(($223)>>2)]=$222;
   var $224=(($189+$221)|0);
   var $225=$224;
   HEAP32[(($225)>>2)]=$221;
   label = 142; break;
  case 66: 
   var $227=$194 & -8;
   var $228=((($227)+($psize_0))|0);
   var $229=$194 >>> 3;
   var $230=(($194)>>>(0)) < 256;
   if ($230) { label = 67; break; } else { label = 79; break; }
  case 67: 
   var $232=(($mem+$14)|0);
   var $233=$232;
   var $234=HEAP32[(($233)>>2)];
   var $_sum253254=$14 | 4;
   var $235=(($mem+$_sum253254)|0);
   var $236=$235;
   var $237=HEAP32[(($236)>>2)];
   var $238=$229 << 1;
   var $239=((111196+($238<<2))|0);
   var $240=$239;
   var $241=(($234)|(0))==(($240)|(0));
   if ($241) { label = 70; break; } else { label = 68; break; }
  case 68: 
   var $243=$234;
   var $244=HEAP32[((((111172)|0))>>2)];
   var $245=(($243)>>>(0)) < (($244)>>>(0));
   if ($245) { label = 78; break; } else { label = 69; break; }
  case 69: 
   var $247=(($234+12)|0);
   var $248=HEAP32[(($247)>>2)];
   var $249=(($248)|(0))==(($16)|(0));
   if ($249) { label = 70; break; } else { label = 78; break; }
  case 70: 
   var $250=(($237)|(0))==(($234)|(0));
   if ($250) { label = 71; break; } else { label = 72; break; }
  case 71: 
   var $252=1 << $229;
   var $253=$252 ^ -1;
   var $254=HEAP32[((((111156)|0))>>2)];
   var $255=$254 & $253;
   HEAP32[((((111156)|0))>>2)]=$255;
   label = 112; break;
  case 72: 
   var $257=(($237)|(0))==(($240)|(0));
   if ($257) { label = 73; break; } else { label = 74; break; }
  case 73: 
   var $_pre289=(($237+8)|0);
   var $_pre_phi290 = $_pre289;label = 76; break;
  case 74: 
   var $259=$237;
   var $260=HEAP32[((((111172)|0))>>2)];
   var $261=(($259)>>>(0)) < (($260)>>>(0));
   if ($261) { label = 77; break; } else { label = 75; break; }
  case 75: 
   var $263=(($237+8)|0);
   var $264=HEAP32[(($263)>>2)];
   var $265=(($264)|(0))==(($16)|(0));
   if ($265) { var $_pre_phi290 = $263;label = 76; break; } else { label = 77; break; }
  case 76: 
   var $_pre_phi290;
   var $266=(($234+12)|0);
   HEAP32[(($266)>>2)]=$237;
   HEAP32[(($_pre_phi290)>>2)]=$234;
   label = 112; break;
  case 77: 
   _abort();
   throw "Reached an unreachable!";
  case 78: 
   _abort();
   throw "Reached an unreachable!";
  case 79: 
   var $268=$15;
   var $_sum235=((($14)+(16))|0);
   var $269=(($mem+$_sum235)|0);
   var $270=$269;
   var $271=HEAP32[(($270)>>2)];
   var $_sum236237=$14 | 4;
   var $272=(($mem+$_sum236237)|0);
   var $273=$272;
   var $274=HEAP32[(($273)>>2)];
   var $275=(($274)|(0))==(($268)|(0));
   if ($275) { label = 85; break; } else { label = 80; break; }
  case 80: 
   var $277=(($mem+$14)|0);
   var $278=$277;
   var $279=HEAP32[(($278)>>2)];
   var $280=$279;
   var $281=HEAP32[((((111172)|0))>>2)];
   var $282=(($280)>>>(0)) < (($281)>>>(0));
   if ($282) { label = 84; break; } else { label = 81; break; }
  case 81: 
   var $284=(($279+12)|0);
   var $285=HEAP32[(($284)>>2)];
   var $286=(($285)|(0))==(($268)|(0));
   if ($286) { label = 82; break; } else { label = 84; break; }
  case 82: 
   var $288=(($274+8)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=(($289)|(0))==(($268)|(0));
   if ($290) { label = 83; break; } else { label = 84; break; }
  case 83: 
   HEAP32[(($284)>>2)]=$274;
   HEAP32[(($288)>>2)]=$279;
   var $R7_1 = $274;label = 92; break;
  case 84: 
   _abort();
   throw "Reached an unreachable!";
  case 85: 
   var $_sum239=((($14)+(12))|0);
   var $293=(($mem+$_sum239)|0);
   var $294=$293;
   var $295=HEAP32[(($294)>>2)];
   var $296=(($295)|(0))==0;
   if ($296) { label = 86; break; } else { var $R7_0 = $295;var $RP9_0 = $294;label = 87; break; }
  case 86: 
   var $_sum238=((($14)+(8))|0);
   var $298=(($mem+$_sum238)|0);
   var $299=$298;
   var $300=HEAP32[(($299)>>2)];
   var $301=(($300)|(0))==0;
   if ($301) { var $R7_1 = 0;label = 92; break; } else { var $R7_0 = $300;var $RP9_0 = $299;label = 87; break; }
  case 87: 
   var $RP9_0;
   var $R7_0;
   var $302=(($R7_0+20)|0);
   var $303=HEAP32[(($302)>>2)];
   var $304=(($303)|(0))==0;
   if ($304) { label = 88; break; } else { var $R7_0 = $303;var $RP9_0 = $302;label = 87; break; }
  case 88: 
   var $306=(($R7_0+16)|0);
   var $307=HEAP32[(($306)>>2)];
   var $308=(($307)|(0))==0;
   if ($308) { label = 89; break; } else { var $R7_0 = $307;var $RP9_0 = $306;label = 87; break; }
  case 89: 
   var $310=$RP9_0;
   var $311=HEAP32[((((111172)|0))>>2)];
   var $312=(($310)>>>(0)) < (($311)>>>(0));
   if ($312) { label = 91; break; } else { label = 90; break; }
  case 90: 
   HEAP32[(($RP9_0)>>2)]=0;
   var $R7_1 = $R7_0;label = 92; break;
  case 91: 
   _abort();
   throw "Reached an unreachable!";
  case 92: 
   var $R7_1;
   var $316=(($271)|(0))==0;
   if ($316) { label = 112; break; } else { label = 93; break; }
  case 93: 
   var $_sum248=((($14)+(20))|0);
   var $318=(($mem+$_sum248)|0);
   var $319=$318;
   var $320=HEAP32[(($319)>>2)];
   var $321=((111460+($320<<2))|0);
   var $322=HEAP32[(($321)>>2)];
   var $323=(($268)|(0))==(($322)|(0));
   if ($323) { label = 94; break; } else { label = 96; break; }
  case 94: 
   HEAP32[(($321)>>2)]=$R7_1;
   var $cond284=(($R7_1)|(0))==0;
   if ($cond284) { label = 95; break; } else { label = 102; break; }
  case 95: 
   var $325=HEAP32[(($319)>>2)];
   var $326=1 << $325;
   var $327=$326 ^ -1;
   var $328=HEAP32[((((111160)|0))>>2)];
   var $329=$328 & $327;
   HEAP32[((((111160)|0))>>2)]=$329;
   label = 112; break;
  case 96: 
   var $331=$271;
   var $332=HEAP32[((((111172)|0))>>2)];
   var $333=(($331)>>>(0)) < (($332)>>>(0));
   if ($333) { label = 100; break; } else { label = 97; break; }
  case 97: 
   var $335=(($271+16)|0);
   var $336=HEAP32[(($335)>>2)];
   var $337=(($336)|(0))==(($268)|(0));
   if ($337) { label = 98; break; } else { label = 99; break; }
  case 98: 
   HEAP32[(($335)>>2)]=$R7_1;
   label = 101; break;
  case 99: 
   var $340=(($271+20)|0);
   HEAP32[(($340)>>2)]=$R7_1;
   label = 101; break;
  case 100: 
   _abort();
   throw "Reached an unreachable!";
  case 101: 
   var $343=(($R7_1)|(0))==0;
   if ($343) { label = 112; break; } else { label = 102; break; }
  case 102: 
   var $345=$R7_1;
   var $346=HEAP32[((((111172)|0))>>2)];
   var $347=(($345)>>>(0)) < (($346)>>>(0));
   if ($347) { label = 111; break; } else { label = 103; break; }
  case 103: 
   var $349=(($R7_1+24)|0);
   HEAP32[(($349)>>2)]=$271;
   var $_sum249=((($14)+(8))|0);
   var $350=(($mem+$_sum249)|0);
   var $351=$350;
   var $352=HEAP32[(($351)>>2)];
   var $353=(($352)|(0))==0;
   if ($353) { label = 107; break; } else { label = 104; break; }
  case 104: 
   var $355=$352;
   var $356=HEAP32[((((111172)|0))>>2)];
   var $357=(($355)>>>(0)) < (($356)>>>(0));
   if ($357) { label = 106; break; } else { label = 105; break; }
  case 105: 
   var $359=(($R7_1+16)|0);
   HEAP32[(($359)>>2)]=$352;
   var $360=(($352+24)|0);
   HEAP32[(($360)>>2)]=$R7_1;
   label = 107; break;
  case 106: 
   _abort();
   throw "Reached an unreachable!";
  case 107: 
   var $_sum250=((($14)+(12))|0);
   var $363=(($mem+$_sum250)|0);
   var $364=$363;
   var $365=HEAP32[(($364)>>2)];
   var $366=(($365)|(0))==0;
   if ($366) { label = 112; break; } else { label = 108; break; }
  case 108: 
   var $368=$365;
   var $369=HEAP32[((((111172)|0))>>2)];
   var $370=(($368)>>>(0)) < (($369)>>>(0));
   if ($370) { label = 110; break; } else { label = 109; break; }
  case 109: 
   var $372=(($R7_1+20)|0);
   HEAP32[(($372)>>2)]=$365;
   var $373=(($365+24)|0);
   HEAP32[(($373)>>2)]=$R7_1;
   label = 112; break;
  case 110: 
   _abort();
   throw "Reached an unreachable!";
  case 111: 
   _abort();
   throw "Reached an unreachable!";
  case 112: 
   var $377=$228 | 1;
   var $378=(($p_0+4)|0);
   HEAP32[(($378)>>2)]=$377;
   var $379=(($189+$228)|0);
   var $380=$379;
   HEAP32[(($380)>>2)]=$228;
   var $381=HEAP32[((((111176)|0))>>2)];
   var $382=(($p_0)|(0))==(($381)|(0));
   if ($382) { label = 113; break; } else { var $psize_1 = $228;label = 115; break; }
  case 113: 
   HEAP32[((((111164)|0))>>2)]=$228;
   label = 142; break;
  case 114: 
   var $385=$194 & -2;
   HEAP32[(($193)>>2)]=$385;
   var $386=$psize_0 | 1;
   var $387=(($p_0+4)|0);
   HEAP32[(($387)>>2)]=$386;
   var $388=(($189+$psize_0)|0);
   var $389=$388;
   HEAP32[(($389)>>2)]=$psize_0;
   var $psize_1 = $psize_0;label = 115; break;
  case 115: 
   var $psize_1;
   var $391=$psize_1 >>> 3;
   var $392=(($psize_1)>>>(0)) < 256;
   if ($392) { label = 116; break; } else { label = 121; break; }
  case 116: 
   var $394=$391 << 1;
   var $395=((111196+($394<<2))|0);
   var $396=$395;
   var $397=HEAP32[((((111156)|0))>>2)];
   var $398=1 << $391;
   var $399=$397 & $398;
   var $400=(($399)|(0))==0;
   if ($400) { label = 117; break; } else { label = 118; break; }
  case 117: 
   var $402=$397 | $398;
   HEAP32[((((111156)|0))>>2)]=$402;
   var $_sum246_pre=((($394)+(2))|0);
   var $_pre=((111196+($_sum246_pre<<2))|0);
   var $F16_0 = $396;var $_pre_phi = $_pre;label = 120; break;
  case 118: 
   var $_sum247=((($394)+(2))|0);
   var $404=((111196+($_sum247<<2))|0);
   var $405=HEAP32[(($404)>>2)];
   var $406=$405;
   var $407=HEAP32[((((111172)|0))>>2)];
   var $408=(($406)>>>(0)) < (($407)>>>(0));
   if ($408) { label = 119; break; } else { var $F16_0 = $405;var $_pre_phi = $404;label = 120; break; }
  case 119: 
   _abort();
   throw "Reached an unreachable!";
  case 120: 
   var $_pre_phi;
   var $F16_0;
   HEAP32[(($_pre_phi)>>2)]=$p_0;
   var $411=(($F16_0+12)|0);
   HEAP32[(($411)>>2)]=$p_0;
   var $412=(($p_0+8)|0);
   HEAP32[(($412)>>2)]=$F16_0;
   var $413=(($p_0+12)|0);
   HEAP32[(($413)>>2)]=$396;
   label = 142; break;
  case 121: 
   var $415=$p_0;
   var $416=$psize_1 >>> 8;
   var $417=(($416)|(0))==0;
   if ($417) { var $I18_0 = 0;label = 124; break; } else { label = 122; break; }
  case 122: 
   var $419=(($psize_1)>>>(0)) > 16777215;
   if ($419) { var $I18_0 = 31;label = 124; break; } else { label = 123; break; }
  case 123: 
   var $421=((($416)+(1048320))|0);
   var $422=$421 >>> 16;
   var $423=$422 & 8;
   var $424=$416 << $423;
   var $425=((($424)+(520192))|0);
   var $426=$425 >>> 16;
   var $427=$426 & 4;
   var $428=$427 | $423;
   var $429=$424 << $427;
   var $430=((($429)+(245760))|0);
   var $431=$430 >>> 16;
   var $432=$431 & 2;
   var $433=$428 | $432;
   var $434=(((14)-($433))|0);
   var $435=$429 << $432;
   var $436=$435 >>> 15;
   var $437=((($434)+($436))|0);
   var $438=$437 << 1;
   var $439=((($437)+(7))|0);
   var $440=$psize_1 >>> (($439)>>>(0));
   var $441=$440 & 1;
   var $442=$441 | $438;
   var $I18_0 = $442;label = 124; break;
  case 124: 
   var $I18_0;
   var $444=((111460+($I18_0<<2))|0);
   var $445=(($p_0+28)|0);
   var $I18_0_c=$I18_0;
   HEAP32[(($445)>>2)]=$I18_0_c;
   var $446=(($p_0+20)|0);
   HEAP32[(($446)>>2)]=0;
   var $447=(($p_0+16)|0);
   HEAP32[(($447)>>2)]=0;
   var $448=HEAP32[((((111160)|0))>>2)];
   var $449=1 << $I18_0;
   var $450=$448 & $449;
   var $451=(($450)|(0))==0;
   if ($451) { label = 125; break; } else { label = 126; break; }
  case 125: 
   var $453=$448 | $449;
   HEAP32[((((111160)|0))>>2)]=$453;
   HEAP32[(($444)>>2)]=$415;
   var $454=(($p_0+24)|0);
   var $_c=$444;
   HEAP32[(($454)>>2)]=$_c;
   var $455=(($p_0+12)|0);
   HEAP32[(($455)>>2)]=$p_0;
   var $456=(($p_0+8)|0);
   HEAP32[(($456)>>2)]=$p_0;
   label = 138; break;
  case 126: 
   var $458=HEAP32[(($444)>>2)];
   var $459=(($I18_0)|(0))==31;
   if ($459) { var $464 = 0;label = 128; break; } else { label = 127; break; }
  case 127: 
   var $461=$I18_0 >>> 1;
   var $462=(((25)-($461))|0);
   var $464 = $462;label = 128; break;
  case 128: 
   var $464;
   var $465=$psize_1 << $464;
   var $K19_0 = $465;var $T_0 = $458;label = 129; break;
  case 129: 
   var $T_0;
   var $K19_0;
   var $467=(($T_0+4)|0);
   var $468=HEAP32[(($467)>>2)];
   var $469=$468 & -8;
   var $470=(($469)|(0))==(($psize_1)|(0));
   if ($470) { label = 134; break; } else { label = 130; break; }
  case 130: 
   var $472=$K19_0 >>> 31;
   var $473=(($T_0+16+($472<<2))|0);
   var $474=HEAP32[(($473)>>2)];
   var $475=(($474)|(0))==0;
   var $476=$K19_0 << 1;
   if ($475) { label = 131; break; } else { var $K19_0 = $476;var $T_0 = $474;label = 129; break; }
  case 131: 
   var $478=$473;
   var $479=HEAP32[((((111172)|0))>>2)];
   var $480=(($478)>>>(0)) < (($479)>>>(0));
   if ($480) { label = 133; break; } else { label = 132; break; }
  case 132: 
   HEAP32[(($473)>>2)]=$415;
   var $482=(($p_0+24)|0);
   var $T_0_c243=$T_0;
   HEAP32[(($482)>>2)]=$T_0_c243;
   var $483=(($p_0+12)|0);
   HEAP32[(($483)>>2)]=$p_0;
   var $484=(($p_0+8)|0);
   HEAP32[(($484)>>2)]=$p_0;
   label = 138; break;
  case 133: 
   _abort();
   throw "Reached an unreachable!";
  case 134: 
   var $487=(($T_0+8)|0);
   var $488=HEAP32[(($487)>>2)];
   var $489=$T_0;
   var $490=HEAP32[((((111172)|0))>>2)];
   var $491=(($489)>>>(0)) < (($490)>>>(0));
   if ($491) { label = 137; break; } else { label = 135; break; }
  case 135: 
   var $493=$488;
   var $494=(($493)>>>(0)) < (($490)>>>(0));
   if ($494) { label = 137; break; } else { label = 136; break; }
  case 136: 
   var $496=(($488+12)|0);
   HEAP32[(($496)>>2)]=$415;
   HEAP32[(($487)>>2)]=$415;
   var $497=(($p_0+8)|0);
   var $_c242=$488;
   HEAP32[(($497)>>2)]=$_c242;
   var $498=(($p_0+12)|0);
   var $T_0_c=$T_0;
   HEAP32[(($498)>>2)]=$T_0_c;
   var $499=(($p_0+24)|0);
   HEAP32[(($499)>>2)]=0;
   label = 138; break;
  case 137: 
   _abort();
   throw "Reached an unreachable!";
  case 138: 
   var $501=HEAP32[((((111188)|0))>>2)];
   var $502=((($501)-(1))|0);
   HEAP32[((((111188)|0))>>2)]=$502;
   var $503=(($502)|(0))==0;
   if ($503) { var $sp_0_in_i = ((111612)|0);label = 139; break; } else { label = 142; break; }
  case 139: 
   var $sp_0_in_i;
   var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
   var $504=(($sp_0_i)|(0))==0;
   var $505=(($sp_0_i+8)|0);
   if ($504) { label = 140; break; } else { var $sp_0_in_i = $505;label = 139; break; }
  case 140: 
   HEAP32[((((111188)|0))>>2)]=-1;
   label = 142; break;
  case 141: 
   _abort();
   throw "Reached an unreachable!";
  case 142: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
Module["_free"] = _free;
function _realloc($oldmem, $bytes) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($oldmem)|(0))==0;
   if ($1) { label = 2; break; } else { label = 3; break; }
  case 2: 
   var $3=_malloc($bytes);
   var $mem_0 = $3;label = 11; break;
  case 3: 
   var $5=(($bytes)>>>(0)) > 4294967231;
   if ($5) { label = 4; break; } else { label = 5; break; }
  case 4: 
   var $7=___errno_location();
   HEAP32[(($7)>>2)]=12;
   var $mem_0 = 0;label = 11; break;
  case 5: 
   var $9=(($bytes)>>>(0)) < 11;
   if ($9) { var $14 = 16;label = 7; break; } else { label = 6; break; }
  case 6: 
   var $11=((($bytes)+(11))|0);
   var $12=$11 & -8;
   var $14 = $12;label = 7; break;
  case 7: 
   var $14;
   var $15=((($oldmem)-(8))|0);
   var $16=$15;
   var $17=_try_realloc_chunk($16, $14);
   var $18=(($17)|(0))==0;
   if ($18) { label = 9; break; } else { label = 8; break; }
  case 8: 
   var $20=(($17+8)|0);
   var $21=$20;
   var $mem_0 = $21;label = 11; break;
  case 9: 
   var $23=_malloc($bytes);
   var $24=(($23)|(0))==0;
   if ($24) { var $mem_0 = 0;label = 11; break; } else { label = 10; break; }
  case 10: 
   var $26=((($oldmem)-(4))|0);
   var $27=$26;
   var $28=HEAP32[(($27)>>2)];
   var $29=$28 & -8;
   var $30=$28 & 3;
   var $31=(($30)|(0))==0;
   var $32=$31 ? 8 : 4;
   var $33=((($29)-($32))|0);
   var $34=(($33)>>>(0)) < (($bytes)>>>(0));
   var $35=$34 ? $33 : $bytes;
   assert($35 % 1 === 0);(_memcpy($23, $oldmem, $35)|0);
   _free($oldmem);
   var $mem_0 = $23;label = 11; break;
  case 11: 
   var $mem_0;
   return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_realloc"] = _realloc;
function _sys_trim($pad) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=HEAP32[((((111064)|0))>>2)];
   var $2=(($1)|(0))==0;
   if ($2) { label = 2; break; } else { label = 5; break; }
  case 2: 
   var $4=_sysconf(8);
   var $5=((($4)-(1))|0);
   var $6=$5 & $4;
   var $7=(($6)|(0))==0;
   if ($7) { label = 4; break; } else { label = 3; break; }
  case 3: 
   _abort();
   throw "Reached an unreachable!";
  case 4: 
   HEAP32[((((111072)|0))>>2)]=$4;
   HEAP32[((((111068)|0))>>2)]=$4;
   HEAP32[((((111076)|0))>>2)]=-1;
   HEAP32[((((111080)|0))>>2)]=2097152;
   HEAP32[((((111084)|0))>>2)]=0;
   HEAP32[((((111600)|0))>>2)]=0;
   var $9=_time(0);
   var $10=$9 & -16;
   var $11=$10 ^ 1431655768;
   HEAP32[((((111064)|0))>>2)]=$11;
   label = 5; break;
  case 5: 
   var $13=(($pad)>>>(0)) < 4294967232;
   if ($13) { label = 6; break; } else { var $released_2 = 0;label = 21; break; }
  case 6: 
   var $15=HEAP32[((((111180)|0))>>2)];
   var $16=(($15)|(0))==0;
   if ($16) { var $released_2 = 0;label = 21; break; } else { label = 7; break; }
  case 7: 
   var $18=((($pad)+(40))|0);
   var $19=HEAP32[((((111168)|0))>>2)];
   var $20=(($19)>>>(0)) > (($18)>>>(0));
   if ($20) { label = 8; break; } else { label = 19; break; }
  case 8: 
   var $22=HEAP32[((((111072)|0))>>2)];
   var $_neg=(((-40)-($pad))|0);
   var $23=((($_neg)-(1))|0);
   var $24=((($23)+($19))|0);
   var $25=((($24)+($22))|0);
   var $26=((((($25)>>>(0)))/((($22)>>>(0))))&-1);
   var $27=((($26)-(1))|0);
   var $28=(Math.imul($27,$22)|0);
   var $29=$15;
   var $sp_0_i = ((111604)|0);label = 9; break;
  case 9: 
   var $sp_0_i;
   var $31=(($sp_0_i)|0);
   var $32=HEAP32[(($31)>>2)];
   var $33=(($32)>>>(0)) > (($29)>>>(0));
   if ($33) { label = 11; break; } else { label = 10; break; }
  case 10: 
   var $35=(($sp_0_i+4)|0);
   var $36=HEAP32[(($35)>>2)];
   var $37=(($32+$36)|0);
   var $38=(($37)>>>(0)) > (($29)>>>(0));
   if ($38) { var $_0_i = $sp_0_i;label = 12; break; } else { label = 11; break; }
  case 11: 
   var $40=(($sp_0_i+8)|0);
   var $41=HEAP32[(($40)>>2)];
   var $42=(($41)|(0))==0;
   if ($42) { var $_0_i = 0;label = 12; break; } else { var $sp_0_i = $41;label = 9; break; }
  case 12: 
   var $_0_i;
   var $43=(($_0_i+12)|0);
   var $44=HEAP32[(($43)>>2)];
   var $45=$44 & 8;
   var $46=(($45)|(0))==0;
   if ($46) { label = 13; break; } else { label = 19; break; }
  case 13: 
   var $48=_sbrk(0);
   var $49=(($_0_i)|0);
   var $50=HEAP32[(($49)>>2)];
   var $51=(($_0_i+4)|0);
   var $52=HEAP32[(($51)>>2)];
   var $53=(($50+$52)|0);
   var $54=(($48)|(0))==(($53)|(0));
   if ($54) { label = 14; break; } else { label = 19; break; }
  case 14: 
   var $56=(((-2147483648)-($22))|0);
   var $57=(($28)>>>(0)) > 2147483646;
   var $_=$57 ? $56 : $28;
   var $58=(((-$_))|0);
   var $59=_sbrk($58);
   var $60=_sbrk(0);
   var $61=(($59)|(0))!=-1;
   var $62=(($60)>>>(0)) < (($48)>>>(0));
   var $or_cond=$61 & $62;
   if ($or_cond) { label = 15; break; } else { label = 19; break; }
  case 15: 
   var $64=$48;
   var $65=$60;
   var $66=((($64)-($65))|0);
   var $67=(($48)|(0))==(($60)|(0));
   if ($67) { label = 19; break; } else { label = 16; break; }
  case 16: 
   var $69=HEAP32[(($51)>>2)];
   var $70=((($69)-($66))|0);
   HEAP32[(($51)>>2)]=$70;
   var $71=HEAP32[((((111588)|0))>>2)];
   var $72=((($71)-($66))|0);
   HEAP32[((((111588)|0))>>2)]=$72;
   var $73=HEAP32[((((111180)|0))>>2)];
   var $74=HEAP32[((((111168)|0))>>2)];
   var $75=((($74)-($66))|0);
   var $76=$73;
   var $77=(($73+8)|0);
   var $78=$77;
   var $79=$78 & 7;
   var $80=(($79)|(0))==0;
   if ($80) { var $85 = 0;label = 18; break; } else { label = 17; break; }
  case 17: 
   var $82=(((-$78))|0);
   var $83=$82 & 7;
   var $85 = $83;label = 18; break;
  case 18: 
   var $85;
   var $86=(($76+$85)|0);
   var $87=$86;
   var $88=((($75)-($85))|0);
   HEAP32[((((111180)|0))>>2)]=$87;
   HEAP32[((((111168)|0))>>2)]=$88;
   var $89=$88 | 1;
   var $_sum_i=((($85)+(4))|0);
   var $90=(($76+$_sum_i)|0);
   var $91=$90;
   HEAP32[(($91)>>2)]=$89;
   var $_sum2_i=((($75)+(4))|0);
   var $92=(($76+$_sum2_i)|0);
   var $93=$92;
   HEAP32[(($93)>>2)]=40;
   var $94=HEAP32[((((111080)|0))>>2)];
   HEAP32[((((111184)|0))>>2)]=$94;
   var $phitmp=(($48)|(0))!=(($60)|(0));
   var $released_2 = $phitmp;label = 21; break;
  case 19: 
   var $95=HEAP32[((((111168)|0))>>2)];
   var $96=HEAP32[((((111184)|0))>>2)];
   var $97=(($95)>>>(0)) > (($96)>>>(0));
   if ($97) { label = 20; break; } else { var $released_2 = 0;label = 21; break; }
  case 20: 
   HEAP32[((((111184)|0))>>2)]=-1;
   var $released_2 = 0;label = 21; break;
  case 21: 
   var $released_2;
   var $100=(($released_2)&(1));
   return $100;
  default: assert(0, "bad label: " + label);
 }
}
function _try_realloc_chunk($p, $nb) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=(($p+4)|0);
   var $2=HEAP32[(($1)>>2)];
   var $3=$2 & -8;
   var $4=$p;
   var $5=(($4+$3)|0);
   var $6=$5;
   var $7=HEAP32[((((111172)|0))>>2)];
   var $8=(($4)>>>(0)) < (($7)>>>(0));
   if ($8) { label = 72; break; } else { label = 2; break; }
  case 2: 
   var $10=$2 & 3;
   var $11=(($10)|(0))!=1;
   var $12=(($4)>>>(0)) < (($5)>>>(0));
   var $or_cond=$11 & $12;
   if ($or_cond) { label = 3; break; } else { label = 72; break; }
  case 3: 
   var $_sum2728=$3 | 4;
   var $14=(($4+$_sum2728)|0);
   var $15=$14;
   var $16=HEAP32[(($15)>>2)];
   var $17=$16 & 1;
   var $18=(($17)|(0))==0;
   if ($18) { label = 72; break; } else { label = 4; break; }
  case 4: 
   var $20=(($10)|(0))==0;
   if ($20) { label = 5; break; } else { label = 9; break; }
  case 5: 
   var $22=(($nb)>>>(0)) < 256;
   if ($22) { var $newp_0 = 0;label = 73; break; } else { label = 6; break; }
  case 6: 
   var $24=((($nb)+(4))|0);
   var $25=(($3)>>>(0)) < (($24)>>>(0));
   if ($25) { label = 8; break; } else { label = 7; break; }
  case 7: 
   var $27=((($3)-($nb))|0);
   var $28=HEAP32[((((111072)|0))>>2)];
   var $29=$28 << 1;
   var $30=(($27)>>>(0)) > (($29)>>>(0));
   if ($30) { label = 8; break; } else { var $newp_0 = $p;label = 73; break; }
  case 8: 
   var $newp_0 = 0;label = 73; break;
  case 9: 
   var $33=(($3)>>>(0)) < (($nb)>>>(0));
   if ($33) { label = 12; break; } else { label = 10; break; }
  case 10: 
   var $35=((($3)-($nb))|0);
   var $36=(($35)>>>(0)) > 15;
   if ($36) { label = 11; break; } else { var $newp_0 = $p;label = 73; break; }
  case 11: 
   var $38=(($4+$nb)|0);
   var $39=$38;
   var $40=$2 & 1;
   var $41=$40 | $nb;
   var $42=$41 | 2;
   HEAP32[(($1)>>2)]=$42;
   var $_sum23=((($nb)+(4))|0);
   var $43=(($4+$_sum23)|0);
   var $44=$43;
   var $45=$35 | 3;
   HEAP32[(($44)>>2)]=$45;
   var $46=HEAP32[(($15)>>2)];
   var $47=$46 | 1;
   HEAP32[(($15)>>2)]=$47;
   _dispose_chunk($39, $35);
   var $newp_0 = $p;label = 73; break;
  case 12: 
   var $49=HEAP32[((((111180)|0))>>2)];
   var $50=(($6)|(0))==(($49)|(0));
   if ($50) { label = 13; break; } else { label = 15; break; }
  case 13: 
   var $52=HEAP32[((((111168)|0))>>2)];
   var $53=((($52)+($3))|0);
   var $54=(($53)>>>(0)) > (($nb)>>>(0));
   if ($54) { label = 14; break; } else { var $newp_0 = 0;label = 73; break; }
  case 14: 
   var $56=((($53)-($nb))|0);
   var $57=(($4+$nb)|0);
   var $58=$57;
   var $59=$2 & 1;
   var $60=$59 | $nb;
   var $61=$60 | 2;
   HEAP32[(($1)>>2)]=$61;
   var $_sum22=((($nb)+(4))|0);
   var $62=(($4+$_sum22)|0);
   var $63=$62;
   var $64=$56 | 1;
   HEAP32[(($63)>>2)]=$64;
   HEAP32[((((111180)|0))>>2)]=$58;
   HEAP32[((((111168)|0))>>2)]=$56;
   var $newp_0 = $p;label = 73; break;
  case 15: 
   var $66=HEAP32[((((111176)|0))>>2)];
   var $67=(($6)|(0))==(($66)|(0));
   if ($67) { label = 16; break; } else { label = 21; break; }
  case 16: 
   var $69=HEAP32[((((111164)|0))>>2)];
   var $70=((($69)+($3))|0);
   var $71=(($70)>>>(0)) < (($nb)>>>(0));
   if ($71) { var $newp_0 = 0;label = 73; break; } else { label = 17; break; }
  case 17: 
   var $73=((($70)-($nb))|0);
   var $74=(($73)>>>(0)) > 15;
   if ($74) { label = 18; break; } else { label = 19; break; }
  case 18: 
   var $76=(($4+$nb)|0);
   var $77=$76;
   var $78=(($4+$70)|0);
   var $79=$2 & 1;
   var $80=$79 | $nb;
   var $81=$80 | 2;
   HEAP32[(($1)>>2)]=$81;
   var $_sum19=((($nb)+(4))|0);
   var $82=(($4+$_sum19)|0);
   var $83=$82;
   var $84=$73 | 1;
   HEAP32[(($83)>>2)]=$84;
   var $85=$78;
   HEAP32[(($85)>>2)]=$73;
   var $_sum20=((($70)+(4))|0);
   var $86=(($4+$_sum20)|0);
   var $87=$86;
   var $88=HEAP32[(($87)>>2)];
   var $89=$88 & -2;
   HEAP32[(($87)>>2)]=$89;
   var $storemerge = $77;var $storemerge21 = $73;label = 20; break;
  case 19: 
   var $91=$2 & 1;
   var $92=$91 | $70;
   var $93=$92 | 2;
   HEAP32[(($1)>>2)]=$93;
   var $_sum17=((($70)+(4))|0);
   var $94=(($4+$_sum17)|0);
   var $95=$94;
   var $96=HEAP32[(($95)>>2)];
   var $97=$96 | 1;
   HEAP32[(($95)>>2)]=$97;
   var $storemerge = 0;var $storemerge21 = 0;label = 20; break;
  case 20: 
   var $storemerge21;
   var $storemerge;
   HEAP32[((((111164)|0))>>2)]=$storemerge21;
   HEAP32[((((111176)|0))>>2)]=$storemerge;
   var $newp_0 = $p;label = 73; break;
  case 21: 
   var $100=$16 & 2;
   var $101=(($100)|(0))==0;
   if ($101) { label = 22; break; } else { var $newp_0 = 0;label = 73; break; }
  case 22: 
   var $103=$16 & -8;
   var $104=((($103)+($3))|0);
   var $105=(($104)>>>(0)) < (($nb)>>>(0));
   if ($105) { var $newp_0 = 0;label = 73; break; } else { label = 23; break; }
  case 23: 
   var $107=((($104)-($nb))|0);
   var $108=$16 >>> 3;
   var $109=(($16)>>>(0)) < 256;
   if ($109) { label = 24; break; } else { label = 36; break; }
  case 24: 
   var $_sum15=((($3)+(8))|0);
   var $111=(($4+$_sum15)|0);
   var $112=$111;
   var $113=HEAP32[(($112)>>2)];
   var $_sum16=((($3)+(12))|0);
   var $114=(($4+$_sum16)|0);
   var $115=$114;
   var $116=HEAP32[(($115)>>2)];
   var $117=$108 << 1;
   var $118=((111196+($117<<2))|0);
   var $119=$118;
   var $120=(($113)|(0))==(($119)|(0));
   if ($120) { label = 27; break; } else { label = 25; break; }
  case 25: 
   var $122=$113;
   var $123=(($122)>>>(0)) < (($7)>>>(0));
   if ($123) { label = 35; break; } else { label = 26; break; }
  case 26: 
   var $125=(($113+12)|0);
   var $126=HEAP32[(($125)>>2)];
   var $127=(($126)|(0))==(($6)|(0));
   if ($127) { label = 27; break; } else { label = 35; break; }
  case 27: 
   var $128=(($116)|(0))==(($113)|(0));
   if ($128) { label = 28; break; } else { label = 29; break; }
  case 28: 
   var $130=1 << $108;
   var $131=$130 ^ -1;
   var $132=HEAP32[((((111156)|0))>>2)];
   var $133=$132 & $131;
   HEAP32[((((111156)|0))>>2)]=$133;
   label = 69; break;
  case 29: 
   var $135=(($116)|(0))==(($119)|(0));
   if ($135) { label = 30; break; } else { label = 31; break; }
  case 30: 
   var $_pre=(($116+8)|0);
   var $_pre_phi = $_pre;label = 33; break;
  case 31: 
   var $137=$116;
   var $138=(($137)>>>(0)) < (($7)>>>(0));
   if ($138) { label = 34; break; } else { label = 32; break; }
  case 32: 
   var $140=(($116+8)|0);
   var $141=HEAP32[(($140)>>2)];
   var $142=(($141)|(0))==(($6)|(0));
   if ($142) { var $_pre_phi = $140;label = 33; break; } else { label = 34; break; }
  case 33: 
   var $_pre_phi;
   var $143=(($113+12)|0);
   HEAP32[(($143)>>2)]=$116;
   HEAP32[(($_pre_phi)>>2)]=$113;
   label = 69; break;
  case 34: 
   _abort();
   throw "Reached an unreachable!";
  case 35: 
   _abort();
   throw "Reached an unreachable!";
  case 36: 
   var $145=$5;
   var $_sum=((($3)+(24))|0);
   var $146=(($4+$_sum)|0);
   var $147=$146;
   var $148=HEAP32[(($147)>>2)];
   var $_sum2=((($3)+(12))|0);
   var $149=(($4+$_sum2)|0);
   var $150=$149;
   var $151=HEAP32[(($150)>>2)];
   var $152=(($151)|(0))==(($145)|(0));
   if ($152) { label = 42; break; } else { label = 37; break; }
  case 37: 
   var $_sum14=((($3)+(8))|0);
   var $154=(($4+$_sum14)|0);
   var $155=$154;
   var $156=HEAP32[(($155)>>2)];
   var $157=$156;
   var $158=(($157)>>>(0)) < (($7)>>>(0));
   if ($158) { label = 41; break; } else { label = 38; break; }
  case 38: 
   var $160=(($156+12)|0);
   var $161=HEAP32[(($160)>>2)];
   var $162=(($161)|(0))==(($145)|(0));
   if ($162) { label = 39; break; } else { label = 41; break; }
  case 39: 
   var $164=(($151+8)|0);
   var $165=HEAP32[(($164)>>2)];
   var $166=(($165)|(0))==(($145)|(0));
   if ($166) { label = 40; break; } else { label = 41; break; }
  case 40: 
   HEAP32[(($160)>>2)]=$151;
   HEAP32[(($164)>>2)]=$156;
   var $R_1 = $151;label = 49; break;
  case 41: 
   _abort();
   throw "Reached an unreachable!";
  case 42: 
   var $_sum4=((($3)+(20))|0);
   var $169=(($4+$_sum4)|0);
   var $170=$169;
   var $171=HEAP32[(($170)>>2)];
   var $172=(($171)|(0))==0;
   if ($172) { label = 43; break; } else { var $R_0 = $171;var $RP_0 = $170;label = 44; break; }
  case 43: 
   var $_sum3=((($3)+(16))|0);
   var $174=(($4+$_sum3)|0);
   var $175=$174;
   var $176=HEAP32[(($175)>>2)];
   var $177=(($176)|(0))==0;
   if ($177) { var $R_1 = 0;label = 49; break; } else { var $R_0 = $176;var $RP_0 = $175;label = 44; break; }
  case 44: 
   var $RP_0;
   var $R_0;
   var $178=(($R_0+20)|0);
   var $179=HEAP32[(($178)>>2)];
   var $180=(($179)|(0))==0;
   if ($180) { label = 45; break; } else { var $R_0 = $179;var $RP_0 = $178;label = 44; break; }
  case 45: 
   var $182=(($R_0+16)|0);
   var $183=HEAP32[(($182)>>2)];
   var $184=(($183)|(0))==0;
   if ($184) { label = 46; break; } else { var $R_0 = $183;var $RP_0 = $182;label = 44; break; }
  case 46: 
   var $186=$RP_0;
   var $187=(($186)>>>(0)) < (($7)>>>(0));
   if ($187) { label = 48; break; } else { label = 47; break; }
  case 47: 
   HEAP32[(($RP_0)>>2)]=0;
   var $R_1 = $R_0;label = 49; break;
  case 48: 
   _abort();
   throw "Reached an unreachable!";
  case 49: 
   var $R_1;
   var $191=(($148)|(0))==0;
   if ($191) { label = 69; break; } else { label = 50; break; }
  case 50: 
   var $_sum11=((($3)+(28))|0);
   var $193=(($4+$_sum11)|0);
   var $194=$193;
   var $195=HEAP32[(($194)>>2)];
   var $196=((111460+($195<<2))|0);
   var $197=HEAP32[(($196)>>2)];
   var $198=(($145)|(0))==(($197)|(0));
   if ($198) { label = 51; break; } else { label = 53; break; }
  case 51: 
   HEAP32[(($196)>>2)]=$R_1;
   var $cond=(($R_1)|(0))==0;
   if ($cond) { label = 52; break; } else { label = 59; break; }
  case 52: 
   var $200=HEAP32[(($194)>>2)];
   var $201=1 << $200;
   var $202=$201 ^ -1;
   var $203=HEAP32[((((111160)|0))>>2)];
   var $204=$203 & $202;
   HEAP32[((((111160)|0))>>2)]=$204;
   label = 69; break;
  case 53: 
   var $206=$148;
   var $207=HEAP32[((((111172)|0))>>2)];
   var $208=(($206)>>>(0)) < (($207)>>>(0));
   if ($208) { label = 57; break; } else { label = 54; break; }
  case 54: 
   var $210=(($148+16)|0);
   var $211=HEAP32[(($210)>>2)];
   var $212=(($211)|(0))==(($145)|(0));
   if ($212) { label = 55; break; } else { label = 56; break; }
  case 55: 
   HEAP32[(($210)>>2)]=$R_1;
   label = 58; break;
  case 56: 
   var $215=(($148+20)|0);
   HEAP32[(($215)>>2)]=$R_1;
   label = 58; break;
  case 57: 
   _abort();
   throw "Reached an unreachable!";
  case 58: 
   var $218=(($R_1)|(0))==0;
   if ($218) { label = 69; break; } else { label = 59; break; }
  case 59: 
   var $220=$R_1;
   var $221=HEAP32[((((111172)|0))>>2)];
   var $222=(($220)>>>(0)) < (($221)>>>(0));
   if ($222) { label = 68; break; } else { label = 60; break; }
  case 60: 
   var $224=(($R_1+24)|0);
   HEAP32[(($224)>>2)]=$148;
   var $_sum12=((($3)+(16))|0);
   var $225=(($4+$_sum12)|0);
   var $226=$225;
   var $227=HEAP32[(($226)>>2)];
   var $228=(($227)|(0))==0;
   if ($228) { label = 64; break; } else { label = 61; break; }
  case 61: 
   var $230=$227;
   var $231=HEAP32[((((111172)|0))>>2)];
   var $232=(($230)>>>(0)) < (($231)>>>(0));
   if ($232) { label = 63; break; } else { label = 62; break; }
  case 62: 
   var $234=(($R_1+16)|0);
   HEAP32[(($234)>>2)]=$227;
   var $235=(($227+24)|0);
   HEAP32[(($235)>>2)]=$R_1;
   label = 64; break;
  case 63: 
   _abort();
   throw "Reached an unreachable!";
  case 64: 
   var $_sum13=((($3)+(20))|0);
   var $238=(($4+$_sum13)|0);
   var $239=$238;
   var $240=HEAP32[(($239)>>2)];
   var $241=(($240)|(0))==0;
   if ($241) { label = 69; break; } else { label = 65; break; }
  case 65: 
   var $243=$240;
   var $244=HEAP32[((((111172)|0))>>2)];
   var $245=(($243)>>>(0)) < (($244)>>>(0));
   if ($245) { label = 67; break; } else { label = 66; break; }
  case 66: 
   var $247=(($R_1+20)|0);
   HEAP32[(($247)>>2)]=$240;
   var $248=(($240+24)|0);
   HEAP32[(($248)>>2)]=$R_1;
   label = 69; break;
  case 67: 
   _abort();
   throw "Reached an unreachable!";
  case 68: 
   _abort();
   throw "Reached an unreachable!";
  case 69: 
   var $252=(($107)>>>(0)) < 16;
   if ($252) { label = 70; break; } else { label = 71; break; }
  case 70: 
   var $254=HEAP32[(($1)>>2)];
   var $255=$254 & 1;
   var $256=$104 | $255;
   var $257=$256 | 2;
   HEAP32[(($1)>>2)]=$257;
   var $_sum910=$104 | 4;
   var $258=(($4+$_sum910)|0);
   var $259=$258;
   var $260=HEAP32[(($259)>>2)];
   var $261=$260 | 1;
   HEAP32[(($259)>>2)]=$261;
   var $newp_0 = $p;label = 73; break;
  case 71: 
   var $263=(($4+$nb)|0);
   var $264=$263;
   var $265=HEAP32[(($1)>>2)];
   var $266=$265 & 1;
   var $267=$266 | $nb;
   var $268=$267 | 2;
   HEAP32[(($1)>>2)]=$268;
   var $_sum5=((($nb)+(4))|0);
   var $269=(($4+$_sum5)|0);
   var $270=$269;
   var $271=$107 | 3;
   HEAP32[(($270)>>2)]=$271;
   var $_sum78=$104 | 4;
   var $272=(($4+$_sum78)|0);
   var $273=$272;
   var $274=HEAP32[(($273)>>2)];
   var $275=$274 | 1;
   HEAP32[(($273)>>2)]=$275;
   _dispose_chunk($264, $107);
   var $newp_0 = $p;label = 73; break;
  case 72: 
   _abort();
   throw "Reached an unreachable!";
  case 73: 
   var $newp_0;
   return $newp_0;
  default: assert(0, "bad label: " + label);
 }
}
function _dispose_chunk($p, $psize) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $1=$p;
   var $2=(($1+$psize)|0);
   var $3=$2;
   var $4=(($p+4)|0);
   var $5=HEAP32[(($4)>>2)];
   var $6=$5 & 1;
   var $7=(($6)|(0))==0;
   if ($7) { label = 2; break; } else { var $_0 = $p;var $_0277 = $psize;label = 54; break; }
  case 2: 
   var $9=(($p)|0);
   var $10=HEAP32[(($9)>>2)];
   var $11=$5 & 3;
   var $12=(($11)|(0))==0;
   if ($12) { label = 134; break; } else { label = 3; break; }
  case 3: 
   var $14=(((-$10))|0);
   var $15=(($1+$14)|0);
   var $16=$15;
   var $17=((($10)+($psize))|0);
   var $18=HEAP32[((((111172)|0))>>2)];
   var $19=(($15)>>>(0)) < (($18)>>>(0));
   if ($19) { label = 53; break; } else { label = 4; break; }
  case 4: 
   var $21=HEAP32[((((111176)|0))>>2)];
   var $22=(($16)|(0))==(($21)|(0));
   if ($22) { label = 51; break; } else { label = 5; break; }
  case 5: 
   var $24=$10 >>> 3;
   var $25=(($10)>>>(0)) < 256;
   if ($25) { label = 6; break; } else { label = 18; break; }
  case 6: 
   var $_sum30=(((8)-($10))|0);
   var $27=(($1+$_sum30)|0);
   var $28=$27;
   var $29=HEAP32[(($28)>>2)];
   var $_sum31=(((12)-($10))|0);
   var $30=(($1+$_sum31)|0);
   var $31=$30;
   var $32=HEAP32[(($31)>>2)];
   var $33=$24 << 1;
   var $34=((111196+($33<<2))|0);
   var $35=$34;
   var $36=(($29)|(0))==(($35)|(0));
   if ($36) { label = 9; break; } else { label = 7; break; }
  case 7: 
   var $38=$29;
   var $39=(($38)>>>(0)) < (($18)>>>(0));
   if ($39) { label = 17; break; } else { label = 8; break; }
  case 8: 
   var $41=(($29+12)|0);
   var $42=HEAP32[(($41)>>2)];
   var $43=(($42)|(0))==(($16)|(0));
   if ($43) { label = 9; break; } else { label = 17; break; }
  case 9: 
   var $44=(($32)|(0))==(($29)|(0));
   if ($44) { label = 10; break; } else { label = 11; break; }
  case 10: 
   var $46=1 << $24;
   var $47=$46 ^ -1;
   var $48=HEAP32[((((111156)|0))>>2)];
   var $49=$48 & $47;
   HEAP32[((((111156)|0))>>2)]=$49;
   var $_0 = $16;var $_0277 = $17;label = 54; break;
  case 11: 
   var $51=(($32)|(0))==(($35)|(0));
   if ($51) { label = 12; break; } else { label = 13; break; }
  case 12: 
   var $_pre55=(($32+8)|0);
   var $_pre_phi56 = $_pre55;label = 15; break;
  case 13: 
   var $53=$32;
   var $54=(($53)>>>(0)) < (($18)>>>(0));
   if ($54) { label = 16; break; } else { label = 14; break; }
  case 14: 
   var $56=(($32+8)|0);
   var $57=HEAP32[(($56)>>2)];
   var $58=(($57)|(0))==(($16)|(0));
   if ($58) { var $_pre_phi56 = $56;label = 15; break; } else { label = 16; break; }
  case 15: 
   var $_pre_phi56;
   var $59=(($29+12)|0);
   HEAP32[(($59)>>2)]=$32;
   HEAP32[(($_pre_phi56)>>2)]=$29;
   var $_0 = $16;var $_0277 = $17;label = 54; break;
  case 16: 
   _abort();
   throw "Reached an unreachable!";
  case 17: 
   _abort();
   throw "Reached an unreachable!";
  case 18: 
   var $61=$15;
   var $_sum22=(((24)-($10))|0);
   var $62=(($1+$_sum22)|0);
   var $63=$62;
   var $64=HEAP32[(($63)>>2)];
   var $_sum23=(((12)-($10))|0);
   var $65=(($1+$_sum23)|0);
   var $66=$65;
   var $67=HEAP32[(($66)>>2)];
   var $68=(($67)|(0))==(($61)|(0));
   if ($68) { label = 24; break; } else { label = 19; break; }
  case 19: 
   var $_sum29=(((8)-($10))|0);
   var $70=(($1+$_sum29)|0);
   var $71=$70;
   var $72=HEAP32[(($71)>>2)];
   var $73=$72;
   var $74=(($73)>>>(0)) < (($18)>>>(0));
   if ($74) { label = 23; break; } else { label = 20; break; }
  case 20: 
   var $76=(($72+12)|0);
   var $77=HEAP32[(($76)>>2)];
   var $78=(($77)|(0))==(($61)|(0));
   if ($78) { label = 21; break; } else { label = 23; break; }
  case 21: 
   var $80=(($67+8)|0);
   var $81=HEAP32[(($80)>>2)];
   var $82=(($81)|(0))==(($61)|(0));
   if ($82) { label = 22; break; } else { label = 23; break; }
  case 22: 
   HEAP32[(($76)>>2)]=$67;
   HEAP32[(($80)>>2)]=$72;
   var $R_1 = $67;label = 31; break;
  case 23: 
   _abort();
   throw "Reached an unreachable!";
  case 24: 
   var $_sum24=(((16)-($10))|0);
   var $_sum25=((($_sum24)+(4))|0);
   var $85=(($1+$_sum25)|0);
   var $86=$85;
   var $87=HEAP32[(($86)>>2)];
   var $88=(($87)|(0))==0;
   if ($88) { label = 25; break; } else { var $R_0 = $87;var $RP_0 = $86;label = 26; break; }
  case 25: 
   var $90=(($1+$_sum24)|0);
   var $91=$90;
   var $92=HEAP32[(($91)>>2)];
   var $93=(($92)|(0))==0;
   if ($93) { var $R_1 = 0;label = 31; break; } else { var $R_0 = $92;var $RP_0 = $91;label = 26; break; }
  case 26: 
   var $RP_0;
   var $R_0;
   var $94=(($R_0+20)|0);
   var $95=HEAP32[(($94)>>2)];
   var $96=(($95)|(0))==0;
   if ($96) { label = 27; break; } else { var $R_0 = $95;var $RP_0 = $94;label = 26; break; }
  case 27: 
   var $98=(($R_0+16)|0);
   var $99=HEAP32[(($98)>>2)];
   var $100=(($99)|(0))==0;
   if ($100) { label = 28; break; } else { var $R_0 = $99;var $RP_0 = $98;label = 26; break; }
  case 28: 
   var $102=$RP_0;
   var $103=(($102)>>>(0)) < (($18)>>>(0));
   if ($103) { label = 30; break; } else { label = 29; break; }
  case 29: 
   HEAP32[(($RP_0)>>2)]=0;
   var $R_1 = $R_0;label = 31; break;
  case 30: 
   _abort();
   throw "Reached an unreachable!";
  case 31: 
   var $R_1;
   var $107=(($64)|(0))==0;
   if ($107) { var $_0 = $16;var $_0277 = $17;label = 54; break; } else { label = 32; break; }
  case 32: 
   var $_sum26=(((28)-($10))|0);
   var $109=(($1+$_sum26)|0);
   var $110=$109;
   var $111=HEAP32[(($110)>>2)];
   var $112=((111460+($111<<2))|0);
   var $113=HEAP32[(($112)>>2)];
   var $114=(($61)|(0))==(($113)|(0));
   if ($114) { label = 33; break; } else { label = 35; break; }
  case 33: 
   HEAP32[(($112)>>2)]=$R_1;
   var $cond=(($R_1)|(0))==0;
   if ($cond) { label = 34; break; } else { label = 41; break; }
  case 34: 
   var $116=HEAP32[(($110)>>2)];
   var $117=1 << $116;
   var $118=$117 ^ -1;
   var $119=HEAP32[((((111160)|0))>>2)];
   var $120=$119 & $118;
   HEAP32[((((111160)|0))>>2)]=$120;
   var $_0 = $16;var $_0277 = $17;label = 54; break;
  case 35: 
   var $122=$64;
   var $123=HEAP32[((((111172)|0))>>2)];
   var $124=(($122)>>>(0)) < (($123)>>>(0));
   if ($124) { label = 39; break; } else { label = 36; break; }
  case 36: 
   var $126=(($64+16)|0);
   var $127=HEAP32[(($126)>>2)];
   var $128=(($127)|(0))==(($61)|(0));
   if ($128) { label = 37; break; } else { label = 38; break; }
  case 37: 
   HEAP32[(($126)>>2)]=$R_1;
   label = 40; break;
  case 38: 
   var $131=(($64+20)|0);
   HEAP32[(($131)>>2)]=$R_1;
   label = 40; break;
  case 39: 
   _abort();
   throw "Reached an unreachable!";
  case 40: 
   var $134=(($R_1)|(0))==0;
   if ($134) { var $_0 = $16;var $_0277 = $17;label = 54; break; } else { label = 41; break; }
  case 41: 
   var $136=$R_1;
   var $137=HEAP32[((((111172)|0))>>2)];
   var $138=(($136)>>>(0)) < (($137)>>>(0));
   if ($138) { label = 50; break; } else { label = 42; break; }
  case 42: 
   var $140=(($R_1+24)|0);
   HEAP32[(($140)>>2)]=$64;
   var $_sum27=(((16)-($10))|0);
   var $141=(($1+$_sum27)|0);
   var $142=$141;
   var $143=HEAP32[(($142)>>2)];
   var $144=(($143)|(0))==0;
   if ($144) { label = 46; break; } else { label = 43; break; }
  case 43: 
   var $146=$143;
   var $147=HEAP32[((((111172)|0))>>2)];
   var $148=(($146)>>>(0)) < (($147)>>>(0));
   if ($148) { label = 45; break; } else { label = 44; break; }
  case 44: 
   var $150=(($R_1+16)|0);
   HEAP32[(($150)>>2)]=$143;
   var $151=(($143+24)|0);
   HEAP32[(($151)>>2)]=$R_1;
   label = 46; break;
  case 45: 
   _abort();
   throw "Reached an unreachable!";
  case 46: 
   var $_sum28=((($_sum27)+(4))|0);
   var $154=(($1+$_sum28)|0);
   var $155=$154;
   var $156=HEAP32[(($155)>>2)];
   var $157=(($156)|(0))==0;
   if ($157) { var $_0 = $16;var $_0277 = $17;label = 54; break; } else { label = 47; break; }
  case 47: 
   var $159=$156;
   var $160=HEAP32[((((111172)|0))>>2)];
   var $161=(($159)>>>(0)) < (($160)>>>(0));
   if ($161) { label = 49; break; } else { label = 48; break; }
  case 48: 
   var $163=(($R_1+20)|0);
   HEAP32[(($163)>>2)]=$156;
   var $164=(($156+24)|0);
   HEAP32[(($164)>>2)]=$R_1;
   var $_0 = $16;var $_0277 = $17;label = 54; break;
  case 49: 
   _abort();
   throw "Reached an unreachable!";
  case 50: 
   _abort();
   throw "Reached an unreachable!";
  case 51: 
   var $_sum=((($psize)+(4))|0);
   var $168=(($1+$_sum)|0);
   var $169=$168;
   var $170=HEAP32[(($169)>>2)];
   var $171=$170 & 3;
   var $172=(($171)|(0))==3;
   if ($172) { label = 52; break; } else { var $_0 = $16;var $_0277 = $17;label = 54; break; }
  case 52: 
   HEAP32[((((111164)|0))>>2)]=$17;
   var $174=HEAP32[(($169)>>2)];
   var $175=$174 & -2;
   HEAP32[(($169)>>2)]=$175;
   var $176=$17 | 1;
   var $_sum20=(((4)-($10))|0);
   var $177=(($1+$_sum20)|0);
   var $178=$177;
   HEAP32[(($178)>>2)]=$176;
   var $179=$2;
   HEAP32[(($179)>>2)]=$17;
   label = 134; break;
  case 53: 
   _abort();
   throw "Reached an unreachable!";
  case 54: 
   var $_0277;
   var $_0;
   var $181=HEAP32[((((111172)|0))>>2)];
   var $182=(($2)>>>(0)) < (($181)>>>(0));
   if ($182) { label = 133; break; } else { label = 55; break; }
  case 55: 
   var $_sum1=((($psize)+(4))|0);
   var $184=(($1+$_sum1)|0);
   var $185=$184;
   var $186=HEAP32[(($185)>>2)];
   var $187=$186 & 2;
   var $188=(($187)|(0))==0;
   if ($188) { label = 56; break; } else { label = 109; break; }
  case 56: 
   var $190=HEAP32[((((111180)|0))>>2)];
   var $191=(($3)|(0))==(($190)|(0));
   if ($191) { label = 57; break; } else { label = 59; break; }
  case 57: 
   var $193=HEAP32[((((111168)|0))>>2)];
   var $194=((($193)+($_0277))|0);
   HEAP32[((((111168)|0))>>2)]=$194;
   HEAP32[((((111180)|0))>>2)]=$_0;
   var $195=$194 | 1;
   var $196=(($_0+4)|0);
   HEAP32[(($196)>>2)]=$195;
   var $197=HEAP32[((((111176)|0))>>2)];
   var $198=(($_0)|(0))==(($197)|(0));
   if ($198) { label = 58; break; } else { label = 134; break; }
  case 58: 
   HEAP32[((((111176)|0))>>2)]=0;
   HEAP32[((((111164)|0))>>2)]=0;
   label = 134; break;
  case 59: 
   var $201=HEAP32[((((111176)|0))>>2)];
   var $202=(($3)|(0))==(($201)|(0));
   if ($202) { label = 60; break; } else { label = 61; break; }
  case 60: 
   var $204=HEAP32[((((111164)|0))>>2)];
   var $205=((($204)+($_0277))|0);
   HEAP32[((((111164)|0))>>2)]=$205;
   HEAP32[((((111176)|0))>>2)]=$_0;
   var $206=$205 | 1;
   var $207=(($_0+4)|0);
   HEAP32[(($207)>>2)]=$206;
   var $208=$_0;
   var $209=(($208+$205)|0);
   var $210=$209;
   HEAP32[(($210)>>2)]=$205;
   label = 134; break;
  case 61: 
   var $212=$186 & -8;
   var $213=((($212)+($_0277))|0);
   var $214=$186 >>> 3;
   var $215=(($186)>>>(0)) < 256;
   if ($215) { label = 62; break; } else { label = 74; break; }
  case 62: 
   var $_sum18=((($psize)+(8))|0);
   var $217=(($1+$_sum18)|0);
   var $218=$217;
   var $219=HEAP32[(($218)>>2)];
   var $_sum19=((($psize)+(12))|0);
   var $220=(($1+$_sum19)|0);
   var $221=$220;
   var $222=HEAP32[(($221)>>2)];
   var $223=$214 << 1;
   var $224=((111196+($223<<2))|0);
   var $225=$224;
   var $226=(($219)|(0))==(($225)|(0));
   if ($226) { label = 65; break; } else { label = 63; break; }
  case 63: 
   var $228=$219;
   var $229=(($228)>>>(0)) < (($181)>>>(0));
   if ($229) { label = 73; break; } else { label = 64; break; }
  case 64: 
   var $231=(($219+12)|0);
   var $232=HEAP32[(($231)>>2)];
   var $233=(($232)|(0))==(($3)|(0));
   if ($233) { label = 65; break; } else { label = 73; break; }
  case 65: 
   var $234=(($222)|(0))==(($219)|(0));
   if ($234) { label = 66; break; } else { label = 67; break; }
  case 66: 
   var $236=1 << $214;
   var $237=$236 ^ -1;
   var $238=HEAP32[((((111156)|0))>>2)];
   var $239=$238 & $237;
   HEAP32[((((111156)|0))>>2)]=$239;
   label = 107; break;
  case 67: 
   var $241=(($222)|(0))==(($225)|(0));
   if ($241) { label = 68; break; } else { label = 69; break; }
  case 68: 
   var $_pre53=(($222+8)|0);
   var $_pre_phi54 = $_pre53;label = 71; break;
  case 69: 
   var $243=$222;
   var $244=(($243)>>>(0)) < (($181)>>>(0));
   if ($244) { label = 72; break; } else { label = 70; break; }
  case 70: 
   var $246=(($222+8)|0);
   var $247=HEAP32[(($246)>>2)];
   var $248=(($247)|(0))==(($3)|(0));
   if ($248) { var $_pre_phi54 = $246;label = 71; break; } else { label = 72; break; }
  case 71: 
   var $_pre_phi54;
   var $249=(($219+12)|0);
   HEAP32[(($249)>>2)]=$222;
   HEAP32[(($_pre_phi54)>>2)]=$219;
   label = 107; break;
  case 72: 
   _abort();
   throw "Reached an unreachable!";
  case 73: 
   _abort();
   throw "Reached an unreachable!";
  case 74: 
   var $251=$2;
   var $_sum2=((($psize)+(24))|0);
   var $252=(($1+$_sum2)|0);
   var $253=$252;
   var $254=HEAP32[(($253)>>2)];
   var $_sum3=((($psize)+(12))|0);
   var $255=(($1+$_sum3)|0);
   var $256=$255;
   var $257=HEAP32[(($256)>>2)];
   var $258=(($257)|(0))==(($251)|(0));
   if ($258) { label = 80; break; } else { label = 75; break; }
  case 75: 
   var $_sum17=((($psize)+(8))|0);
   var $260=(($1+$_sum17)|0);
   var $261=$260;
   var $262=HEAP32[(($261)>>2)];
   var $263=$262;
   var $264=(($263)>>>(0)) < (($181)>>>(0));
   if ($264) { label = 79; break; } else { label = 76; break; }
  case 76: 
   var $266=(($262+12)|0);
   var $267=HEAP32[(($266)>>2)];
   var $268=(($267)|(0))==(($251)|(0));
   if ($268) { label = 77; break; } else { label = 79; break; }
  case 77: 
   var $270=(($257+8)|0);
   var $271=HEAP32[(($270)>>2)];
   var $272=(($271)|(0))==(($251)|(0));
   if ($272) { label = 78; break; } else { label = 79; break; }
  case 78: 
   HEAP32[(($266)>>2)]=$257;
   HEAP32[(($270)>>2)]=$262;
   var $R7_1 = $257;label = 87; break;
  case 79: 
   _abort();
   throw "Reached an unreachable!";
  case 80: 
   var $_sum5=((($psize)+(20))|0);
   var $275=(($1+$_sum5)|0);
   var $276=$275;
   var $277=HEAP32[(($276)>>2)];
   var $278=(($277)|(0))==0;
   if ($278) { label = 81; break; } else { var $R7_0 = $277;var $RP9_0 = $276;label = 82; break; }
  case 81: 
   var $_sum4=((($psize)+(16))|0);
   var $280=(($1+$_sum4)|0);
   var $281=$280;
   var $282=HEAP32[(($281)>>2)];
   var $283=(($282)|(0))==0;
   if ($283) { var $R7_1 = 0;label = 87; break; } else { var $R7_0 = $282;var $RP9_0 = $281;label = 82; break; }
  case 82: 
   var $RP9_0;
   var $R7_0;
   var $284=(($R7_0+20)|0);
   var $285=HEAP32[(($284)>>2)];
   var $286=(($285)|(0))==0;
   if ($286) { label = 83; break; } else { var $R7_0 = $285;var $RP9_0 = $284;label = 82; break; }
  case 83: 
   var $288=(($R7_0+16)|0);
   var $289=HEAP32[(($288)>>2)];
   var $290=(($289)|(0))==0;
   if ($290) { label = 84; break; } else { var $R7_0 = $289;var $RP9_0 = $288;label = 82; break; }
  case 84: 
   var $292=$RP9_0;
   var $293=(($292)>>>(0)) < (($181)>>>(0));
   if ($293) { label = 86; break; } else { label = 85; break; }
  case 85: 
   HEAP32[(($RP9_0)>>2)]=0;
   var $R7_1 = $R7_0;label = 87; break;
  case 86: 
   _abort();
   throw "Reached an unreachable!";
  case 87: 
   var $R7_1;
   var $297=(($254)|(0))==0;
   if ($297) { label = 107; break; } else { label = 88; break; }
  case 88: 
   var $_sum14=((($psize)+(28))|0);
   var $299=(($1+$_sum14)|0);
   var $300=$299;
   var $301=HEAP32[(($300)>>2)];
   var $302=((111460+($301<<2))|0);
   var $303=HEAP32[(($302)>>2)];
   var $304=(($251)|(0))==(($303)|(0));
   if ($304) { label = 89; break; } else { label = 91; break; }
  case 89: 
   HEAP32[(($302)>>2)]=$R7_1;
   var $cond46=(($R7_1)|(0))==0;
   if ($cond46) { label = 90; break; } else { label = 97; break; }
  case 90: 
   var $306=HEAP32[(($300)>>2)];
   var $307=1 << $306;
   var $308=$307 ^ -1;
   var $309=HEAP32[((((111160)|0))>>2)];
   var $310=$309 & $308;
   HEAP32[((((111160)|0))>>2)]=$310;
   label = 107; break;
  case 91: 
   var $312=$254;
   var $313=HEAP32[((((111172)|0))>>2)];
   var $314=(($312)>>>(0)) < (($313)>>>(0));
   if ($314) { label = 95; break; } else { label = 92; break; }
  case 92: 
   var $316=(($254+16)|0);
   var $317=HEAP32[(($316)>>2)];
   var $318=(($317)|(0))==(($251)|(0));
   if ($318) { label = 93; break; } else { label = 94; break; }
  case 93: 
   HEAP32[(($316)>>2)]=$R7_1;
   label = 96; break;
  case 94: 
   var $321=(($254+20)|0);
   HEAP32[(($321)>>2)]=$R7_1;
   label = 96; break;
  case 95: 
   _abort();
   throw "Reached an unreachable!";
  case 96: 
   var $324=(($R7_1)|(0))==0;
   if ($324) { label = 107; break; } else { label = 97; break; }
  case 97: 
   var $326=$R7_1;
   var $327=HEAP32[((((111172)|0))>>2)];
   var $328=(($326)>>>(0)) < (($327)>>>(0));
   if ($328) { label = 106; break; } else { label = 98; break; }
  case 98: 
   var $330=(($R7_1+24)|0);
   HEAP32[(($330)>>2)]=$254;
   var $_sum15=((($psize)+(16))|0);
   var $331=(($1+$_sum15)|0);
   var $332=$331;
   var $333=HEAP32[(($332)>>2)];
   var $334=(($333)|(0))==0;
   if ($334) { label = 102; break; } else { label = 99; break; }
  case 99: 
   var $336=$333;
   var $337=HEAP32[((((111172)|0))>>2)];
   var $338=(($336)>>>(0)) < (($337)>>>(0));
   if ($338) { label = 101; break; } else { label = 100; break; }
  case 100: 
   var $340=(($R7_1+16)|0);
   HEAP32[(($340)>>2)]=$333;
   var $341=(($333+24)|0);
   HEAP32[(($341)>>2)]=$R7_1;
   label = 102; break;
  case 101: 
   _abort();
   throw "Reached an unreachable!";
  case 102: 
   var $_sum16=((($psize)+(20))|0);
   var $344=(($1+$_sum16)|0);
   var $345=$344;
   var $346=HEAP32[(($345)>>2)];
   var $347=(($346)|(0))==0;
   if ($347) { label = 107; break; } else { label = 103; break; }
  case 103: 
   var $349=$346;
   var $350=HEAP32[((((111172)|0))>>2)];
   var $351=(($349)>>>(0)) < (($350)>>>(0));
   if ($351) { label = 105; break; } else { label = 104; break; }
  case 104: 
   var $353=(($R7_1+20)|0);
   HEAP32[(($353)>>2)]=$346;
   var $354=(($346+24)|0);
   HEAP32[(($354)>>2)]=$R7_1;
   label = 107; break;
  case 105: 
   _abort();
   throw "Reached an unreachable!";
  case 106: 
   _abort();
   throw "Reached an unreachable!";
  case 107: 
   var $358=$213 | 1;
   var $359=(($_0+4)|0);
   HEAP32[(($359)>>2)]=$358;
   var $360=$_0;
   var $361=(($360+$213)|0);
   var $362=$361;
   HEAP32[(($362)>>2)]=$213;
   var $363=HEAP32[((((111176)|0))>>2)];
   var $364=(($_0)|(0))==(($363)|(0));
   if ($364) { label = 108; break; } else { var $_1 = $213;label = 110; break; }
  case 108: 
   HEAP32[((((111164)|0))>>2)]=$213;
   label = 134; break;
  case 109: 
   var $367=$186 & -2;
   HEAP32[(($185)>>2)]=$367;
   var $368=$_0277 | 1;
   var $369=(($_0+4)|0);
   HEAP32[(($369)>>2)]=$368;
   var $370=$_0;
   var $371=(($370+$_0277)|0);
   var $372=$371;
   HEAP32[(($372)>>2)]=$_0277;
   var $_1 = $_0277;label = 110; break;
  case 110: 
   var $_1;
   var $374=$_1 >>> 3;
   var $375=(($_1)>>>(0)) < 256;
   if ($375) { label = 111; break; } else { label = 116; break; }
  case 111: 
   var $377=$374 << 1;
   var $378=((111196+($377<<2))|0);
   var $379=$378;
   var $380=HEAP32[((((111156)|0))>>2)];
   var $381=1 << $374;
   var $382=$380 & $381;
   var $383=(($382)|(0))==0;
   if ($383) { label = 112; break; } else { label = 113; break; }
  case 112: 
   var $385=$380 | $381;
   HEAP32[((((111156)|0))>>2)]=$385;
   var $_sum12_pre=((($377)+(2))|0);
   var $_pre=((111196+($_sum12_pre<<2))|0);
   var $F16_0 = $379;var $_pre_phi = $_pre;label = 115; break;
  case 113: 
   var $_sum13=((($377)+(2))|0);
   var $387=((111196+($_sum13<<2))|0);
   var $388=HEAP32[(($387)>>2)];
   var $389=$388;
   var $390=HEAP32[((((111172)|0))>>2)];
   var $391=(($389)>>>(0)) < (($390)>>>(0));
   if ($391) { label = 114; break; } else { var $F16_0 = $388;var $_pre_phi = $387;label = 115; break; }
  case 114: 
   _abort();
   throw "Reached an unreachable!";
  case 115: 
   var $_pre_phi;
   var $F16_0;
   HEAP32[(($_pre_phi)>>2)]=$_0;
   var $394=(($F16_0+12)|0);
   HEAP32[(($394)>>2)]=$_0;
   var $395=(($_0+8)|0);
   HEAP32[(($395)>>2)]=$F16_0;
   var $396=(($_0+12)|0);
   HEAP32[(($396)>>2)]=$379;
   label = 134; break;
  case 116: 
   var $398=$_0;
   var $399=$_1 >>> 8;
   var $400=(($399)|(0))==0;
   if ($400) { var $I19_0 = 0;label = 119; break; } else { label = 117; break; }
  case 117: 
   var $402=(($_1)>>>(0)) > 16777215;
   if ($402) { var $I19_0 = 31;label = 119; break; } else { label = 118; break; }
  case 118: 
   var $404=((($399)+(1048320))|0);
   var $405=$404 >>> 16;
   var $406=$405 & 8;
   var $407=$399 << $406;
   var $408=((($407)+(520192))|0);
   var $409=$408 >>> 16;
   var $410=$409 & 4;
   var $411=$410 | $406;
   var $412=$407 << $410;
   var $413=((($412)+(245760))|0);
   var $414=$413 >>> 16;
   var $415=$414 & 2;
   var $416=$411 | $415;
   var $417=(((14)-($416))|0);
   var $418=$412 << $415;
   var $419=$418 >>> 15;
   var $420=((($417)+($419))|0);
   var $421=$420 << 1;
   var $422=((($420)+(7))|0);
   var $423=$_1 >>> (($422)>>>(0));
   var $424=$423 & 1;
   var $425=$424 | $421;
   var $I19_0 = $425;label = 119; break;
  case 119: 
   var $I19_0;
   var $427=((111460+($I19_0<<2))|0);
   var $428=(($_0+28)|0);
   var $I19_0_c=$I19_0;
   HEAP32[(($428)>>2)]=$I19_0_c;
   var $429=(($_0+20)|0);
   HEAP32[(($429)>>2)]=0;
   var $430=(($_0+16)|0);
   HEAP32[(($430)>>2)]=0;
   var $431=HEAP32[((((111160)|0))>>2)];
   var $432=1 << $I19_0;
   var $433=$431 & $432;
   var $434=(($433)|(0))==0;
   if ($434) { label = 120; break; } else { label = 121; break; }
  case 120: 
   var $436=$431 | $432;
   HEAP32[((((111160)|0))>>2)]=$436;
   HEAP32[(($427)>>2)]=$398;
   var $437=(($_0+24)|0);
   var $_c=$427;
   HEAP32[(($437)>>2)]=$_c;
   var $438=(($_0+12)|0);
   HEAP32[(($438)>>2)]=$_0;
   var $439=(($_0+8)|0);
   HEAP32[(($439)>>2)]=$_0;
   label = 134; break;
  case 121: 
   var $441=HEAP32[(($427)>>2)];
   var $442=(($I19_0)|(0))==31;
   if ($442) { var $447 = 0;label = 123; break; } else { label = 122; break; }
  case 122: 
   var $444=$I19_0 >>> 1;
   var $445=(((25)-($444))|0);
   var $447 = $445;label = 123; break;
  case 123: 
   var $447;
   var $448=$_1 << $447;
   var $K20_0 = $448;var $T_0 = $441;label = 124; break;
  case 124: 
   var $T_0;
   var $K20_0;
   var $450=(($T_0+4)|0);
   var $451=HEAP32[(($450)>>2)];
   var $452=$451 & -8;
   var $453=(($452)|(0))==(($_1)|(0));
   if ($453) { label = 129; break; } else { label = 125; break; }
  case 125: 
   var $455=$K20_0 >>> 31;
   var $456=(($T_0+16+($455<<2))|0);
   var $457=HEAP32[(($456)>>2)];
   var $458=(($457)|(0))==0;
   var $459=$K20_0 << 1;
   if ($458) { label = 126; break; } else { var $K20_0 = $459;var $T_0 = $457;label = 124; break; }
  case 126: 
   var $461=$456;
   var $462=HEAP32[((((111172)|0))>>2)];
   var $463=(($461)>>>(0)) < (($462)>>>(0));
   if ($463) { label = 128; break; } else { label = 127; break; }
  case 127: 
   HEAP32[(($456)>>2)]=$398;
   var $465=(($_0+24)|0);
   var $T_0_c9=$T_0;
   HEAP32[(($465)>>2)]=$T_0_c9;
   var $466=(($_0+12)|0);
   HEAP32[(($466)>>2)]=$_0;
   var $467=(($_0+8)|0);
   HEAP32[(($467)>>2)]=$_0;
   label = 134; break;
  case 128: 
   _abort();
   throw "Reached an unreachable!";
  case 129: 
   var $470=(($T_0+8)|0);
   var $471=HEAP32[(($470)>>2)];
   var $472=$T_0;
   var $473=HEAP32[((((111172)|0))>>2)];
   var $474=(($472)>>>(0)) < (($473)>>>(0));
   if ($474) { label = 132; break; } else { label = 130; break; }
  case 130: 
   var $476=$471;
   var $477=(($476)>>>(0)) < (($473)>>>(0));
   if ($477) { label = 132; break; } else { label = 131; break; }
  case 131: 
   var $479=(($471+12)|0);
   HEAP32[(($479)>>2)]=$398;
   HEAP32[(($470)>>2)]=$398;
   var $480=(($_0+8)|0);
   var $_c8=$471;
   HEAP32[(($480)>>2)]=$_c8;
   var $481=(($_0+12)|0);
   var $T_0_c=$T_0;
   HEAP32[(($481)>>2)]=$T_0_c;
   var $482=(($_0+24)|0);
   HEAP32[(($482)>>2)]=0;
   label = 134; break;
  case 132: 
   _abort();
   throw "Reached an unreachable!";
  case 133: 
   _abort();
   throw "Reached an unreachable!";
  case 134: 
   return;
  default: assert(0, "bad label: " + label);
 }
}
function _strtod($string, $endPtr) {
 var label = 0;
 label = 1; 
 while(1) switch(label) {
  case 1: 
   var $p_0 = $string;label = 2; break;
  case 2: 
   var $p_0;
   var $2=HEAP8[($p_0)];
   var $3=(($2 << 24) >> 24);
   var $4=_isspace($3);
   var $5=(($4)|(0))==0;
   var $6=(($p_0+1)|0);
   if ($5) { label = 3; break; } else { var $p_0 = $6;label = 2; break; }
  case 3: 
   var $8=HEAP8[($p_0)];
   if ((($8 << 24) >> 24)==45) {
    label = 4; break;
   }
   else if ((($8 << 24) >> 24)==43) {
    label = 5; break;
   }
   else {
   var $p_2 = $p_0;var $sign_0 = 0;label = 6; break;
   }
  case 4: 
   var $p_2 = $6;var $sign_0 = 1;label = 6; break;
  case 5: 
   var $p_2 = $6;var $sign_0 = 0;label = 6; break;
  case 6: 
   var $sign_0;
   var $p_2;
   var $decPt_0 = -1;var $mantSize_0 = 0;var $p_3 = $p_2;label = 7; break;
  case 7: 
   var $p_3;
   var $mantSize_0;
   var $decPt_0;
   var $13=HEAP8[($p_3)];
   var $14=(($13 << 24) >> 24);
   var $isdigittmp=((($14)-(48))|0);
   var $isdigit=(($isdigittmp)>>>(0)) < 10;
   if ($isdigit) { var $decPt_1 = $decPt_0;label = 9; break; } else { label = 8; break; }
  case 8: 
   var $16=(($13 << 24) >> 24)!=46;
   var $17=(($decPt_0)|(0)) > -1;
   var $or_cond=$16 | $17;
   if ($or_cond) { label = 10; break; } else { var $decPt_1 = $mantSize_0;label = 9; break; }
  case 9: 
   var $decPt_1;
   var $19=(($p_3+1)|0);
   var $20=((($mantSize_0)+(1))|0);
   var $decPt_0 = $decPt_1;var $mantSize_0 = $20;var $p_3 = $19;label = 7; break;
  case 10: 
   var $22=(((-$mantSize_0))|0);
   var $23=(($p_3+$22)|0);
   var $24=(($decPt_0)|(0)) < 0;
   var $not_=$24 ^ 1;
   var $25=(($not_ << 31) >> 31);
   var $mantSize_1=((($25)+($mantSize_0))|0);
   var $decPt_2=$24 ? $mantSize_0 : $decPt_0;
   var $26=(($mantSize_1)|(0)) > 18;
   var $27=(((-$mantSize_1))|0);
   var $fracExp_0_p=$26 ? -18 : $27;
   var $fracExp_0=((($fracExp_0_p)+($decPt_2))|0);
   var $mantSize_2=$26 ? 18 : $mantSize_1;
   var $28=(($mantSize_2)|(0))==0;
   if ($28) { var $p_11 = $string;var $fraction_0 = 0;label = 37; break; } else { label = 11; break; }
  case 11: 
   var $29=(($mantSize_2)|(0)) > 9;
   if ($29) { var $p_483 = $23;var $mantSize_384 = $mantSize_2;var $frac1_085 = 0;label = 15; break; } else { label = 13; break; }
  case 12: 
   var $phitmp=(($40)|(0));
   var $phitmp90=($phitmp)*(1000000000);
   var $frac1_0_lcssa97 = $phitmp90;var $mantSize_3_lcssa98 = 9;var $p_4_lcssa99 = $p_5;label = 14; break;
  case 13: 
   var $30=(($mantSize_2)|(0)) > 0;
   if ($30) { var $frac1_0_lcssa97 = 0;var $mantSize_3_lcssa98 = $mantSize_2;var $p_4_lcssa99 = $23;label = 14; break; } else { var $frac2_0_lcssa = 0;var $frac1_0_lcssa96 = 0;label = 22; break; }
  case 14: 
   var $p_4_lcssa99;
   var $mantSize_3_lcssa98;
   var $frac1_0_lcssa97;
   var $p_676 = $p_4_lcssa99;var $mantSize_477 = $mantSize_3_lcssa98;var $frac2_078 = 0;label = 18; break;
  case 15: 
   var $frac1_085;
   var $mantSize_384;
   var $p_483;
   var $31=HEAP8[($p_483)];
   var $32=(($p_483+1)|0);
   var $33=(($31 << 24) >> 24)==46;
   if ($33) { label = 16; break; } else { var $c_0_in = $31;var $p_5 = $32;label = 17; break; }
  case 16: 
   var $35=HEAP8[($32)];
   var $36=(($p_483+2)|0);
   var $c_0_in = $35;var $p_5 = $36;label = 17; break;
  case 17: 
   var $p_5;
   var $c_0_in;
   var $c_0=(($c_0_in << 24) >> 24);
   var $38=((($frac1_085)*(10))&-1);
   var $39=((($38)-(48))|0);
   var $40=((($39)+($c_0))|0);
   var $41=((($mantSize_384)-(1))|0);
   var $42=(($41)|(0)) > 9;
   if ($42) { var $p_483 = $p_5;var $mantSize_384 = $41;var $frac1_085 = $40;label = 15; break; } else { label = 12; break; }
  case 18: 
   var $frac2_078;
   var $mantSize_477;
   var $p_676;
   var $44=HEAP8[($p_676)];
   var $45=(($p_676+1)|0);
   var $46=(($44 << 24) >> 24)==46;
   if ($46) { label = 19; break; } else { var $c_1_in = $44;var $p_7 = $45;label = 20; break; }
  case 19: 
   var $48=HEAP8[($45)];
   var $49=(($p_676+2)|0);
   var $c_1_in = $48;var $p_7 = $49;label = 20; break;
  case 20: 
   var $p_7;
   var $c_1_in;
   var $c_1=(($c_1_in << 24) >> 24);
   var $51=((($frac2_078)*(10))&-1);
   var $52=((($51)-(48))|0);
   var $53=((($52)+($c_1))|0);
   var $54=((($mantSize_477)-(1))|0);
   var $55=(($54)|(0)) > 0;
   if ($55) { var $p_676 = $p_7;var $mantSize_477 = $54;var $frac2_078 = $53;label = 18; break; } else { label = 21; break; }
  case 21: 
   var $phitmp91=(($53)|(0));
   var $frac2_0_lcssa = $phitmp91;var $frac1_0_lcssa96 = $frac1_0_lcssa97;label = 22; break;
  case 22: 
   var $frac1_0_lcssa96;
   var $frac2_0_lcssa;
   var $57=($frac1_0_lcssa96)+($frac2_0_lcssa);
   if ((($13 << 24) >> 24)==69 | (($13 << 24) >> 24)==101) {
    label = 23; break;
   }
   else {
   var $exp_1 = 0;var $p_10 = $p_3;var $expSign_1 = 0;label = 28; break;
   }
  case 23: 
   var $59=(($p_3+1)|0);
   var $60=HEAP8[($59)];
   if ((($60 << 24) >> 24)==45) {
    label = 24; break;
   }
   else if ((($60 << 24) >> 24)==43) {
    label = 25; break;
   }
   else {
   var $p_9_ph = $59;var $expSign_0_ph = 0;label = 26; break;
   }
  case 24: 
   var $62=(($p_3+2)|0);
   var $p_9_ph = $62;var $expSign_0_ph = 1;label = 26; break;
  case 25: 
   var $64=(($p_3+2)|0);
   var $p_9_ph = $64;var $expSign_0_ph = 0;label = 26; break;
  case 26: 
   var $expSign_0_ph;
   var $p_9_ph;
   var $65=HEAP8[($p_9_ph)];
   var $66=(($65 << 24) >> 24);
   var $isdigittmp6268=((($66)-(48))|0);
   var $isdigit6369=(($isdigittmp6268)>>>(0)) < 10;
   if ($isdigit6369) { var $p_970 = $p_9_ph;var $exp_071 = 0;var $67 = $65;label = 27; break; } else { var $exp_1 = 0;var $p_10 = $p_9_ph;var $expSign_1 = $expSign_0_ph;label = 28; break; }
  case 27: 
   var $67;
   var $exp_071;
   var $p_970;
   var $68=((($exp_071)*(10))&-1);
   var $69=(($67 << 24) >> 24);
   var $70=((($68)-(48))|0);
   var $71=((($70)+($69))|0);
   var $72=(($p_970+1)|0);
   var $73=HEAP8[($72)];
   var $74=(($73 << 24) >> 24);
   var $isdigittmp62=((($74)-(48))|0);
   var $isdigit63=(($isdigittmp62)>>>(0)) < 10;
   if ($isdigit63) { var $p_970 = $72;var $exp_071 = $71;var $67 = $73;label = 27; break; } else { var $exp_1 = $71;var $p_10 = $72;var $expSign_1 = $expSign_0_ph;label = 28; break; }
  case 28: 
   var $expSign_1;
   var $p_10;
   var $exp_1;
   var $75=(($expSign_1)|(0))==0;
   var $76=(((-$exp_1))|0);
   var $exp_2_p=$75 ? $exp_1 : $76;
   var $exp_2=((($fracExp_0)+($exp_2_p))|0);
   var $77=(($exp_2)|(0)) < 0;
   var $78=(((-$exp_2))|0);
   var $exp_3=$77 ? $78 : $exp_2;
   var $79=(($exp_3)|(0)) > 511;
   if ($79) { label = 29; break; } else { label = 30; break; }
  case 29: 
   var $80=___errno_location();
   HEAP32[(($80)>>2)]=34;
   var $dblExp_064 = 1;var $d_065 = ((59712)|0);var $exp_566 = 511;label = 31; break;
  case 30: 
   var $81=(($exp_3)|(0))==0;
   if ($81) { var $dblExp_0_lcssa = 1;label = 34; break; } else { var $dblExp_064 = 1;var $d_065 = ((59712)|0);var $exp_566 = $exp_3;label = 31; break; }
  case 31: 
   var $exp_566;
   var $d_065;
   var $dblExp_064;
   var $82=$exp_566 & 1;
   var $83=(($82)|(0))==0;
   if ($83) { var $dblExp_1 = $dblExp_064;label = 33; break; } else { label = 32; break; }
  case 32: 
   var $85=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($d_065)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($d_065)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
   var $86=($dblExp_064)*($85);
   var $dblExp_1 = $86;label = 33; break;
  case 33: 
   var $dblExp_1;
   var $88=$exp_566 >> 1;
   var $89=(($d_065+8)|0);
   var $90=(($88)|(0))==0;
   if ($90) { var $dblExp_0_lcssa = $dblExp_1;label = 34; break; } else { var $dblExp_064 = $dblExp_1;var $d_065 = $89;var $exp_566 = $88;label = 31; break; }
  case 34: 
   var $dblExp_0_lcssa;
   var $91=(($exp_2)|(0)) > -1;
   if ($91) { label = 36; break; } else { label = 35; break; }
  case 35: 
   var $93=($57)/($dblExp_0_lcssa);
   var $p_11 = $p_10;var $fraction_0 = $93;label = 37; break;
  case 36: 
   var $95=($57)*($dblExp_0_lcssa);
   var $p_11 = $p_10;var $fraction_0 = $95;label = 37; break;
  case 37: 
   var $fraction_0;
   var $p_11;
   var $97=(($endPtr)|(0))==0;
   if ($97) { label = 39; break; } else { label = 38; break; }
  case 38: 
   HEAP32[(($endPtr)>>2)]=$p_11;
   label = 39; break;
  case 39: 
   var $100=(($sign_0)|(0))==0;
   if ($100) { var $_0 = $fraction_0;label = 41; break; } else { label = 40; break; }
  case 40: 
   var $102=(-$fraction_0);
   var $_0 = $102;label = 41; break;
  case 41: 
   var $_0;
   return $_0;
  default: assert(0, "bad label: " + label);
 }
}
// EMSCRIPTEN_END_FUNCS
// EMSCRIPTEN_END_FUNCS
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(!Module['preRun'] || Module['preRun'].length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  var ret;
  var initialStackTop = STACKTOP;
  try {
    ret = Module['_main'](argc, argv, 0);
  }
  catch(e) {
    if (e.name == 'ExitStatus') {
      return e.status;
    } else if (e == 'SimulateInfiniteLoop') {
      Module['noExitRuntime'] = true;
    } else {
      throw e;
    }
  } finally {
    STACKTOP = initialStackTop;
  }
  return ret;
}
function run(args) {
  args = args || Module['arguments'];
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    var ret = 0;
    calledRun = true;
    if (Module['_main'] && shouldRunNow) {
      ret = Module['callMain'](args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
